
Milestone_3.elf:     file format elf32-littlenios2
Milestone_3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00014f20 memsz 0x00014f20 flags r-x
    LOAD off    0x00015f40 vaddr 0x00014f40 paddr 0x00016a34 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00018528 vaddr 0x00018528 paddr 0x00018528 align 2**12
         filesz 0x00000000 memsz 0x000004b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014170  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c1c  00014324  00014324  00015324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00014f40  00016a34  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004b4  00018528  00018528  00018528  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00017a34  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001278  00000000  00000000  00017a60  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c8d  00000000  00000000  00018cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033cfd  00000000  00000000  0001a965  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b35e  00000000  00000000  0004e662  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d030  00000000  00000000  000599c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002728  00000000  00000000  000769f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c91  00000000  00000000  00079118  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012d1b  00000000  00000000  0007bda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008eac4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  0008eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00093766  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00093769  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009376c  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009376d  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009376e  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00093772  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00093776  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009377a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00093785  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  00093790  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  0009379b  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  000937ac  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00093cf1  00000000  00000000  000937ec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00014324 l    d  .rodata	00000000 .rodata
00014f40 l    d  .rwdata	00000000 .rwdata
00018528 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Camera.c
00018528 l     O .bss	00000002 fd
00000000 l    df *ABS*	00000000 CommandLine.c
00014f40 l     O .rwdata	0000000c HELP
00000a04 l     F .text	0000017c _help
00000868 l     F .text	000000d0 _generateList
00018584 l     O .bss	00000050 inputStr
000185d4 l     O .bss	00000050 cmdStr
00000938 l     F .text	000000cc cmd_parseInput
00018560 l     O .bss	00000024 commandList
00000000 l    df *ABS*	00000000 CameraCMD.c
00000b80 l     F .text	00000094 _readCam
00000c14 l     F .text	0000008c _writeCam
00000ca0 l     F .text	00000060 _displayImage
00000d00 l     F .text	000001a0 _track
00000ea0 l     F .text	00000118 _track_boundingBox
00000000 l    df *ABS*	00000000 MemoryCMD.c
00000fb8 l     F .text	0000009c _read
00001054 l     F .text	00000088 _write
000010dc l     F .text	00000290 _printMem
00000000 l    df *ABS*	00000000 ServoCMD.c
0000136c l     F .text	000000bc _pan
00001428 l     F .text	000000bc _tilt
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LCD.c
00001a88 l     F .text	0000008c lcd_util_pollBusyFlag
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 Pushbutton.c
00000000 l    df *ABS*	00000000 Timer.c
00000000 l       *ABS*	00000000 irq0
00000002 l       *ABS*	00000000 irq2
00000000 l    df *ABS*	00000000 UART.c
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 Servo.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000026a4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 ctype_.c
000149fd l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
0000295c l     F .text	00000058 std
00002a68 l     F .text	00000008 __fp_lock
00002a70 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00014fac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00003a0c l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00003b6c l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00004018 l     F .text	00000058 __sprint_r
00014bf6 l     O .rodata	00000010 blanks.3452
00014be6 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00014c0e l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000078e4 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00016a08 l     O .rwdata	00000004 charset
00014c50 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00014d98 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0000bd7c l     F .text	00000048 match
000157d4 l     O .rwdata	00000014 fpi.1950
00014db4 l     O .rodata	00000028 tinytens
000157c0 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e3b4 l     F .text	00000024 htinit
0000e440 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000eca8 l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000fddc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00011990 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000119f0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011af0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011c10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011cf0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011e4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00012078 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016a24 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00012314 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015990 l     O .rwdata	00001060 jtag_uart_0
00012404 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012644 l     F .text	00000228 altera_avalon_jtag_uart_irq
0001286c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012ee8 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00013234 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00013658 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013794 l     F .text	000000dc alt_file_locked
000139f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0001410c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
000142c0 l     F .text	00000040 alt_sim_halt
00003770 g     F .text	0000001c putchar
0000a804 g     F .text	00000094 _mprec_log10
0000a8f0 g     F .text	00000088 __any_on
0000ef3c g     F .text	00000070 _isatty_r
00014d70 g     O .rodata	00000028 __mprec_tinytens
00011eac g     F .text	0000006c alt_main
00003f18 g     F .text	0000008c strcpy
00003794 g     F .text	000000a0 _puts_r
0001874c g     O .bss	00000100 alt_irq
0000a00c g     F .text	00000078 _lseek_r
00002354 g     F .text	00000034 servo_init
000002c0 g     F .text	00000218 cam_imageCapture
00016a34 g       *ABS*	00000000 __flash_rwdata_start
000108fc g     F .text	00000088 __eqdf2
00001da4 g     F .text	00000098 timer_delay
00001d68 g     F .text	0000003c pushbutton_read
000189dc g       *ABS*	00000000 __alt_heap_start
000036f8 g     F .text	00000044 printf
00003c88 g     F .text	00000068 __sseek
000029c4 g     F .text	000000a4 __sinit
0000e140 g     F .text	00000130 __swbuf_r
00009f6c g     F .text	00000084 _setlocale_r
00002ac4 g     F .text	00000068 __sfmoreglue
0000e124 g     F .text	0000001c ungetc
00011f38 g     F .text	00000020 __malloc_unlock
00014f88 g     O .rwdata	0000000c WR
0000bdc4 g     F .text	000014e4 _strtod_r
00014f4c g     O .rwdata	0000000c RDCAMREG
0000a318 g     F .text	000000e0 memmove
00002388 g     F .text	00000070 servo_pan
00002ab4 g     F .text	00000010 _cleanup
0000a978 g     F .text	000000bc _Balloc
000018c0 g     F .text	0000002c lcd_clr
00010a0c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
000019a4 g     F .text	000000e4 lcd_printString
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e340 g     F .text	00000074 _fstat_r
00018538 g     O .bss	00000004 errno
000075c0 g     F .text	00000024 __svfscanf
000111f4 g     F .text	0000002c __make_fp
0001854c g     O .bss	00000004 alt_argv
000021d0 g     F .text	00000080 uart_printStr
0001e9f0 g       *ABS*	00000000 _gp
00001cc0 g     F .text	00000050 PWM_writeOCRB
00002938 g     F .text	00000024 fgets
00015810 g     O .rwdata	00000180 alt_fd_list
00001e3c g     F .text	00000124 timer_interrupt_init
00014f70 g     O .rwdata	0000000c TRACK
0000378c g     F .text	00000008 _putchar_r
00014f94 g     O .rwdata	0000000c PAN
00013c1c g     F .text	00000094 alt_find_dev
000035c0 g     F .text	000000a0 memcpy
0000ecf4 g     F .text	00000248 __hexnan
00002aa8 g     F .text	0000000c _cleanup_r
00010c2c g     F .text	000000f8 __floatsidf
0001371c g     F .text	00000078 alt_io_redirect
00010b1c g     F .text	00000088 __ltdf2
00014324 g       *ABS*	00000000 __DTOR_END__
00003834 g     F .text	00000014 puts
0000a298 g     F .text	00000040 mbrtowc
000075e4 g     F .text	00000068 _vfscanf_r
0000a754 g     F .text	000000b0 __ratio
00012a84 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0000373c g     F .text	00000034 _printf_r
00800000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000027e0 g     F .text	00000008 __udivsi3
00011b50 g     F .text	000000c0 isatty
00009f1c g     F .text	0000002c iswspace
00014c80 g     O .rodata	000000c8 __mprec_tens
00009f48 g     F .text	00000008 __locale_charset
0000f044 g     F .text	000000a4 __fixunsdfsi
00013e88 g     F .text	00000090 alt_icache_flush
00014f58 g     O .rwdata	0000000c WRCAMREG
0001852c g     O .bss	00000004 __malloc_top_pad
0000db98 g     F .text	00000024 strtoul
00016a04 g     O .rwdata	00000004 __mb_cur_max
00009f50 g     F .text	0000000c _localeconv_r
0000dbbc g     F .text	000002f0 _strtoull_r
0000b070 g     F .text	0000003c __i2b
00009a80 g     F .text	0000049c __sfvwrite_r
00003a28 g     F .text	00000070 _sbrk_r
00001710 g     F .text	00000064 I2C_action
0000b5d8 g     F .text	00000078 _read_r
000157b4 g     O .rwdata	0000000c __lc_ctype
00016a1c g     O .rwdata	00000004 alt_max_fd
00011534 g     F .text	00000138 __unpack_d
000090b0 g     F .text	00000110 _fclose_r
000093d0 g     F .text	00000034 fflush
00018530 g     O .bss	00000004 __malloc_max_sbrked_mem
0001026c g     F .text	00000074 __adddf3
0000fc74 g     F .text	00000078 __nesf2
0000a634 g     F .text	00000120 __b2d
0000f6c4 g     F .text	000005b0 __umoddi3
00011d5c g     F .text	000000f0 lseek
000169f8 g     O .rwdata	00000004 _global_impure_ptr
000004d8 g     F .text	00000238 cam_track
0000b650 g     F .text	000005f4 _realloc_r
000189dc g       *ABS*	00000000 __bss_end
00013560 g     F .text	000000f8 alt_iic_isr_register
00013af0 g     F .text	0000010c alt_tick
0001864c g     O .bss	00000100 __hexdig
0000f0e8 g     F .text	000005dc __udivdi3
00014d48 g     O .rodata	00000028 __mprec_bigtens
0000b2cc g     F .text	00000120 __s2b
00010e70 g     F .text	00000194 __floatunsidf
0000a554 g     F .text	00000060 __mcmp
000169f0 g     O .rwdata	00000004 __ctype_ptr
00002a90 g     F .text	00000018 __fp_lock_all
00013518 g     F .text	00000048 alt_ic_irq_enabled
00013a58 g     F .text	00000098 alt_alarm_stop
0000d62c g     F .text	00000024 strtol
00018554 g     O .bss	00000004 alt_irq_active
0000213c g     F .text	0000004c uart_putch
000000ec g     F .exceptions	000000c8 alt_irq_handler
000157e8 g     O .rwdata	00000028 alt_dev_null
00011084 g     F .text	000000c8 __unpack_f
00001d3c g     F .text	0000002c PWM_readOCRB
0001313c g     F .text	00000044 alt_dcache_flush_all
0000a420 g     F .text	00000070 __hi0bits
000018ec g     F .text	00000034 lcd_home
00010d24 g     F .text	000000d8 __fixdfsi
0000d3cc g     F .text	0000001c strtod
00016a34 g       *ABS*	00000000 __ram_rwdata_end
00001fb8 g     F .text	0000002c timer_ISR_TIMER_0
00016a14 g     O .rwdata	00000008 alt_dev_list
000121f4 g     F .text	00000120 write
0000b4f0 g     F .text	000000e8 _putc_r
0000fcec g     F .text	00000078 __gtsf2
00001f60 g     F .text	00000058 timer_interrupt_start_stop
00014f40 g       *ABS*	00000000 __ram_rodata_end
00011a1c g     F .text	000000d4 fstat
00010ba4 g     F .text	00000088 __ledf2
00003dcc g     F .text	00000090 strcat
0000b1ac g     F .text	00000120 __pow5mult
0001853c g     O .bss	00000004 __nlocale_changed
000027e8 g     F .text	00000008 __umodsi3
000189dc g       *ABS*	00000000 end
00011734 g     F .text	00000160 __pack_f
00012584 g     F .text	000000c0 altera_avalon_jtag_uart_init
00014320 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00012f58 g     F .text	00000090 alt_avalon_timer_sc_init
00011004 g     F .text	00000080 __clzsi2
00012ca8 g     F .text	00000240 altera_avalon_jtag_uart_write
00002010 g     F .text	0000012c uart_init
000029b4 g     F .text	00000004 __sfp_lock_acquire
000034dc g     F .text	000000e4 memchr
00004070 g     F .text	00001eac ___vfprintf_internal_r
00003b0c g     F .text	00000060 _sprintf_r
0000976c g     F .text	00000314 _free_r
00014110 g     F .text	000001b0 __call_exitprocs
00018540 g     O .bss	00000004 __mlocale_changed
00016a00 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00018558 g     O .bss	00000004 _alt_tick_rate
0000d650 g     F .text	00000318 _strtoll_r
00001b44 g     F .text	0000002c LED_read
0000ad3c g     F .text	0000014c __lshift
0001855c g     O .bss	00000004 _alt_nticks
00011f58 g     F .text	00000120 read
000123a8 g     F .text	0000005c alt_sys_init
00013fd8 g     F .text	00000134 __register_exitproc
0000ae88 g     F .text	000001e8 __multiply
0001291c g     F .text	00000074 altera_avalon_jtag_uart_close
00014f40 g       *ABS*	00000000 __ram_rwdata_start
00014324 g       *ABS*	00000000 __ram_rodata_start
00018624 g     O .bss	00000028 __malloc_current_mallinfo
0000aa34 g     F .text	0000017c __d2b
00001974 g     F .text	00000030 lcd_portInit
0001243c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000d968 g     F .text	00000230 _strtoul_r
00013dd0 g     F .text	000000b8 alt_get_fd
00014f7c g     O .rwdata	0000000c RR
0001166c g     F .text	000000c8 __fpcmp_parts_d
00007874 g     F .text	00000070 _close_r
00013f64 g     F .text	00000074 memcmp
000124ec g     F .text	00000048 altera_avalon_jtag_uart_close_fd
000189dc g       *ABS*	00000000 __alt_stack_base
00012534 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003bfc g     F .text	00000084 sscanf
00007738 g     F .text	0000013c __swsetup_r
000106a4 g     F .text	00000258 __divdf3
00002b2c g     F .text	000000f0 __sfp
0000a898 g     F .text	00000058 __copybits
000153ac g     O .rwdata	00000408 __malloc_av_
000029c0 g     F .text	00000004 __sinit_lock_release
00001bf0 g     F .text	00000080 PWM_setDutyCycle_B
000102e0 g     F .text	000003c4 __muldf3
00003d6c g     F .text	00000060 __sread
00009600 g     F .text	00000040 fread
00013cb0 g     F .text	00000120 alt_find_file
00002468 g     F .text	00000038 getServoX
00013180 g     F .text	000000b4 alt_dev_llist_insert
00011f18 g     F .text	00000020 __malloc_lock
00012138 g     F .text	000000bc sbrk
000091d4 g     F .text	000001fc _fflush_r
0000e28c g     F .text	000000b4 _calloc_r
00018528 g       *ABS*	00000000 __bss_start
00003660 g     F .text	00000098 memset
00001920 g     F .text	00000054 lcd_init
00002670 g     F .text	00000034 main
00018550 g     O .bss	00000004 alt_envp
00018534 g     O .bss	00000004 __malloc_max_total_mem
00012494 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e270 g     F .text	0000001c __swbuf
0000fd64 g     F .text	00000078 __ltsf2
00009404 g     F .text	000001fc _fread_r
000025a4 g     F .text	000000cc setServoY
00003c80 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
000091c0 g     F .text	00000014 fclose
0000d3e8 g     F .text	00000244 _strtol_r
00010dfc g     F .text	00000074 __truncdfsf2
0001884c g     O .bss	00000190 _atexit0
00007afc g     F .text	000015b4 _dtoa_r
00002d9c g     F .text	00000740 _malloc_r
00016a20 g     O .rwdata	00000004 alt_errno
0000deac g     F .text	000000dc __submore
00002ce4 g     F .text	000000b8 _fwalk
000027f0 g     F .text	00000148 _fgets_r
0000a2d8 g     F .text	00000040 _mbtowc_r
0000b3ec g     F .text	00000104 putc
00002720 g     F .text	00000060 __divsi3
00014df8 g     O .rodata	00000014 __thenan_df
00014fa0 g     O .rwdata	0000000c TILT
00009640 g     F .text	0000012c _malloc_trim_r
00014324 g       *ABS*	00000000 __CTOR_END__
00001554 g     F .text	000000f8 I2C_read
00003e5c g     F .text	000000bc strcmp
00014324 g       *ABS*	00000000 __flash_rodata_start
00014324 g       *ABS*	00000000 __DTOR_LIST__
00010984 g     F .text	00000088 __nedf2
00012374 g     F .text	00000034 alt_irq_init
000120d8 g     F .text	00000060 alt_release_fd
00001d10 g     F .text	0000002c PWM_readOCRA
00003a98 g     F .text	00000074 sprintf
00014e0c g     O .rodata	00000100 __clz_tab
00018544 g     O .bss	00000004 _PathLocale
000024a0 g     F .text	000000cc setServoX
00001818 g     F .text	000000a8 lcd_prt
0000d2a8 g     F .text	00000124 strtof
00013f18 g     F .text	00000014 atexit
000076c0 g     F .text	00000078 _write_r
00009ff0 g     F .text	0000001c setlocale
0000bd74 g     F .text	00000008 nanf
000169f4 g     O .rwdata	00000004 _impure_ptr
00018548 g     O .bss	00000004 alt_argc
0000a218 g     F .text	00000080 _mbrtowc_r
000132f8 g     F .text	00000064 _do_dtors
00001c70 g     F .text	00000050 PWM_writeOCRA
00003848 g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000a5b4 g     F .text	00000080 __ulp
0000bc44 g     F .text	00000040 __isinfd
00002a78 g     F .text	00000018 __fp_unlock_all
00016a0c g     O .rwdata	00000008 alt_fs_list
000014e4 g     F .text	00000070 I2C_init
00000020 g       *ABS*	00000000 __ram_exceptions_start
00009f5c g     F .text	00000010 localeconv
0001338c g     F .text	00000050 alt_ic_isr_register
0000e3d8 g     F .text	00000068 __hexdig_init
00003b74 g     F .text	00000088 _sscanf_r
00016a34 g       *ABS*	00000000 _edata
000189dc g       *ABS*	00000000 _end
00002188 g     F .text	00000048 uart_getch
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000764c g     F .text	00000074 vfscanf
00012990 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00013478 g     F .text	000000a0 alt_ic_irq_disable
00001fe4 g     F .text	0000002c timer_ISR_TIMER_1
00000710 g     F .text	00000028 cmd_init
00003cf0 g     F .text	0000007c __swrite
000169fc g     O .rwdata	00000004 __malloc_trim_threshold
00013bfc g     F .text	00000020 altera_nios2_qsys_irq_init
00013f2c g     F .text	00000038 exit
00002c1c g     F .text	000000c8 _fwalk_reent
0000abb0 g     F .text	0000018c __mdiff
00002780 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000738 g     F .text	00000130 cmd_getCommand
000029b8 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00002250 g     F .text	00000088 uart_readStr
000022d8 g     F .text	0000007c vga_clearDisplay
0000bcb4 g     F .text	000000c0 __sccl
000148fc g     O .rodata	00000101 _ctype_
00014f64 g     O .rwdata	0000000c IMAGE
00001774 g     F .text	000000a4 lcd_cmd
0001114c g     F .text	000000a8 __fpcmp_parts_f
00014300 g     F .text	00000020 _exit
0000bc84 g     F .text	00000030 __isnand
00012fe8 g     F .text	00000154 alt_alarm_start
00000200 g     F .text	000000c0 cam_init
0000efac g     F .text	00000098 __muldi3
0000a084 g     F .text	00000194 __smakebuf_r
00003fa4 g     F .text	00000074 strlen
00013870 g     F .text	00000188 open
00010a94 g     F .text	00000088 __gedf2
0000e4f0 g     F .text	000007b8 __gethex
00001b70 g     F .text	00000080 PWM_setDutyCycle_A
0001335c g     F .text	00000030 alt_icache_flush_all
000023f8 g     F .text	00000070 servo_tilt
00016a28 g     O .rwdata	00000004 alt_priority_mask
000133dc g     F .text	0000009c alt_ic_irq_enable
00005f1c g     F .text	00000024 __vfprintf_internal
000101ec g     F .text	00000080 __subdf3
0000a490 g     F .text	000000c4 __lo0bits
00005f40 g     F .text	00001680 __svfscanf_r
00016a2c g     O .rwdata	00000008 alt_alarm_list
0000df88 g     F .text	0000019c _ungetc_r
00013294 g     F .text	00000064 _do_ctors
00011894 g     F .text	000000fc close
0000256c g     F .text	00000038 getServoY
00011c70 g     F .text	00000080 alt_load
00011220 g     F .text	00000314 __pack_d
00001b14 g     F .text	00000030 LED_write
0000164c g     F .text	000000c4 I2C_write
00000000  w      *UND*	00000000 free
000029bc g     F .text	00000004 __sinit_lock_acquire
0000b0ac g     F .text	00000100 __multadd
0000a3f8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <irq2+0x2>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000b4 	movhi	r3,2
 134:	18e1d304 	addi	r3,r3,-30900
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000b4 	movhi	r3,2
 14c:	18e1d304 	addi	r3,r3,-30900
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6ba7c14 	ori	gp,gp,59888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	10a14a14 	ori	r2,r2,34088

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18e27714 	ori	r3,r3,35292

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	0011c700 	call	11c70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	0011eac0 	call	11eac <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <cam_init>:
/**
 * Initializes the camera module over I2C for slow rate and desired format.
 * Sets any necessary flags and controls for the camera and prepares all
 * data structures.
 */
void cam_init(){
     200:	defffe04 	addi	sp,sp,-8
     204:	dfc00115 	stw	ra,4(sp)
     208:	df000015 	stw	fp,0(sp)
     20c:	d839883a 	mov	fp,sp

	//initialize members
	fd.maxBrightness = 0x00;
     210:	d026ce05 	stb	zero,-25800(gp)
	fd.minBrightness = 0xFF;
     214:	00c000b4 	movhi	r3,2
     218:	18e14a44 	addi	r3,r3,-31447
     21c:	00bfffc4 	movi	r2,-1
     220:	18800005 	stb	r2,0(r3)

	//initialize I2C camera hardware
	I2C_init();
     224:	00014e40 	call	14e4 <I2C_init>
	timer_delay(100000,TIMER_0);
     228:	010000b4 	movhi	r4,2
     22c:	2121a804 	addi	r4,r4,-31072
     230:	01602034 	movhi	r5,32896
     234:	29481004 	addi	r5,r5,8256
     238:	0001da40 	call	1da4 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_CLKRC,CAMERA_CLKRC_SCALER);
     23c:	01001804 	movi	r4,96
     240:	01400444 	movi	r5,17
     244:	01800544 	movi	r6,21
     248:	000164c0 	call	164c <I2C_write>
	timer_delay(100000,TIMER_0);
     24c:	010000b4 	movhi	r4,2
     250:	2121a804 	addi	r4,r4,-31072
     254:	01602034 	movhi	r5,32896
     258:	29481004 	addi	r5,r5,8256
     25c:	0001da40 	call	1da4 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COML,CAMERA_COML_PCLK_VALID_MASK);
     260:	01001804 	movi	r4,96
     264:	01400e44 	movi	r5,57
     268:	01801004 	movi	r6,64
     26c:	000164c0 	call	164c <I2C_write>
	timer_delay(100000,TIMER_0);
     270:	010000b4 	movhi	r4,2
     274:	2121a804 	addi	r4,r4,-31072
     278:	01602034 	movhi	r5,32896
     27c:	29481004 	addi	r5,r5,8256
     280:	0001da40 	call	1da4 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COMC,CAMERA_COMC_QCIF_MASK);
     284:	01001804 	movi	r4,96
     288:	01400504 	movi	r5,20
     28c:	01800804 	movi	r6,32
     290:	000164c0 	call	164c <I2C_write>
	timer_delay(100000,TIMER_0);
     294:	010000b4 	movhi	r4,2
     298:	2121a804 	addi	r4,r4,-31072
     29c:	01602034 	movhi	r5,32896
     2a0:	29481004 	addi	r5,r5,8256
     2a4:	0001da40 	call	1da4 <timer_delay>

	//clear VGA display
	vga_clearDisplay();
     2a8:	00022d80 	call	22d8 <vga_clearDisplay>
}
     2ac:	e037883a 	mov	sp,fp
     2b0:	dfc00117 	ldw	ra,4(sp)
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00204 	addi	sp,sp,8
     2bc:	f800283a 	ret

000002c0 <cam_imageCapture>:

/**
 * Runs an infinite loop to display the data from the camera on screen. Later
 * this will be converted to the tracking function.
 */
struct frameData* cam_imageCapture(){
     2c0:	defffb04 	addi	sp,sp,-20
     2c4:	df000415 	stw	fp,16(sp)
     2c8:	df000404 	addi	fp,sp,16
	int row, col;
	volatile uint8_t* vgaPtr;
	uint8_t pixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2cc:	00a02034 	movhi	r2,32896
     2d0:	10880004 	addi	r2,r2,8192
     2d4:	10800003 	ldbu	r2,0(r2)
     2d8:	10803fcc 	andi	r2,r2,255
     2dc:	1080010c 	andi	r2,r2,4
     2e0:	1005003a 	cmpeq	r2,r2,zero
     2e4:	103ff91e 	bne	r2,zero,2cc <cam_imageCapture+0xc>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2e8:	00a02034 	movhi	r2,32896
     2ec:	10880004 	addi	r2,r2,8192
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	1080010c 	andi	r2,r2,4
     2fc:	1004c03a 	cmpne	r2,r2,zero
     300:	103ff91e 	bne	r2,zero,2e8 <cam_imageCapture+0x28>
	vgaPtr = VGA_MEM_START;
     304:	00a02034 	movhi	r2,32896
     308:	e0bffd15 	stw	r2,-12(fp)
	fd.maxBrightness = 0x00;
     30c:	d026ce05 	stb	zero,-25800(gp)
	fd.minBrightness = 0xFF;
     310:	00c000b4 	movhi	r3,2
     314:	18e14a44 	addi	r3,r3,-31447
     318:	00bfffc4 	movi	r2,-1
     31c:	18800005 	stb	r2,0(r3)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     320:	008023c4 	movi	r2,143
     324:	e0bfff15 	stw	r2,-4(fp)
     328:	00006306 	br	4b8 <cam_imageCapture+0x1f8>
		//set next VGA row
		if(row < 120 && row%2){
     32c:	e0bfff17 	ldw	r2,-4(fp)
     330:	10801e08 	cmpgei	r2,r2,120
     334:	10000e1e 	bne	r2,zero,370 <cam_imageCapture+0xb0>
     338:	e0bfff17 	ldw	r2,-4(fp)
     33c:	1080004c 	andi	r2,r2,1
     340:	10803fcc 	andi	r2,r2,255
     344:	1005003a 	cmpeq	r2,r2,zero
     348:	1000091e 	bne	r2,zero,370 <cam_imageCapture+0xb0>
			vgaPtr = VGA_MEM_START + (row/2 << 7);
     34c:	e0ffff17 	ldw	r3,-4(fp)
     350:	1804d7fa 	srli	r2,r3,31
     354:	10c5883a 	add	r2,r2,r3
     358:	1005d07a 	srai	r2,r2,1
     35c:	100491fa 	slli	r2,r2,7
     360:	1007883a 	mov	r3,r2
     364:	00a02034 	movhi	r2,32896
     368:	1885883a 	add	r2,r3,r2
     36c:	e0bffd15 	stw	r2,-12(fp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     370:	00a02034 	movhi	r2,32896
     374:	10880004 	addi	r2,r2,8192
     378:	10800003 	ldbu	r2,0(r2)
     37c:	10803fcc 	andi	r2,r2,255
     380:	1080008c 	andi	r2,r2,2
     384:	1005003a 	cmpeq	r2,r2,zero
     388:	103ff91e 	bne	r2,zero,370 <cam_imageCapture+0xb0>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     38c:	e03ffe15 	stw	zero,-8(fp)
     390:	00003c06 	br	484 <cam_imageCapture+0x1c4>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     394:	00a02034 	movhi	r2,32896
     398:	10880004 	addi	r2,r2,8192
     39c:	10800003 	ldbu	r2,0(r2)
     3a0:	10803fcc 	andi	r2,r2,255
     3a4:	1080004c 	andi	r2,r2,1
     3a8:	1005003a 	cmpeq	r2,r2,zero
     3ac:	103ff91e 	bne	r2,zero,394 <cam_imageCapture+0xd4>
			pixel = *CAM_PIXEL_REGISTER;
     3b0:	00a02034 	movhi	r2,32896
     3b4:	10880404 	addi	r2,r2,8208
     3b8:	10800003 	ldbu	r2,0(r2)
     3bc:	e0bffc05 	stb	r2,-16(fp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     3c0:	00a02034 	movhi	r2,32896
     3c4:	10880004 	addi	r2,r2,8192
     3c8:	10800003 	ldbu	r2,0(r2)
     3cc:	10803fcc 	andi	r2,r2,255
     3d0:	1080004c 	andi	r2,r2,1
     3d4:	10803fcc 	andi	r2,r2,255
     3d8:	1004c03a 	cmpne	r2,r2,zero
     3dc:	103ff81e 	bne	r2,zero,3c0 <cam_imageCapture+0x100>

			//display pixels to VGA
			if(row < 120 && row%2 && col < 160 && col%2){
     3e0:	e0bfff17 	ldw	r2,-4(fp)
     3e4:	10801e08 	cmpgei	r2,r2,120
     3e8:	1000231e 	bne	r2,zero,478 <cam_imageCapture+0x1b8>
     3ec:	e0bfff17 	ldw	r2,-4(fp)
     3f0:	1080004c 	andi	r2,r2,1
     3f4:	10803fcc 	andi	r2,r2,255
     3f8:	1005003a 	cmpeq	r2,r2,zero
     3fc:	10001e1e 	bne	r2,zero,478 <cam_imageCapture+0x1b8>
     400:	e0bffe17 	ldw	r2,-8(fp)
     404:	10802808 	cmpgei	r2,r2,160
     408:	10001b1e 	bne	r2,zero,478 <cam_imageCapture+0x1b8>
     40c:	e0bffe17 	ldw	r2,-8(fp)
     410:	1080004c 	andi	r2,r2,1
     414:	10803fcc 	andi	r2,r2,255
     418:	1005003a 	cmpeq	r2,r2,zero
     41c:	1000161e 	bne	r2,zero,478 <cam_imageCapture+0x1b8>
				//write to VGA
				*vgaPtr = pixel;
     420:	e0fffd17 	ldw	r3,-12(fp)
     424:	e0bffc03 	ldbu	r2,-16(fp)
     428:	18800005 	stb	r2,0(r3)
				vgaPtr++;
     42c:	e0bffd17 	ldw	r2,-12(fp)
     430:	10800044 	addi	r2,r2,1
     434:	e0bffd15 	stw	r2,-12(fp)

				//update pixel information
				if(fd.maxBrightness < pixel)
     438:	d0a6ce03 	ldbu	r2,-25800(gp)
     43c:	10c03fcc 	andi	r3,r2,255
     440:	e0bffc03 	ldbu	r2,-16(fp)
     444:	1880022e 	bgeu	r3,r2,450 <cam_imageCapture+0x190>
					fd.maxBrightness = pixel;
     448:	e0bffc03 	ldbu	r2,-16(fp)
     44c:	d0a6ce05 	stb	r2,-25800(gp)
				if(fd.minBrightness > pixel)
     450:	008000b4 	movhi	r2,2
     454:	10a14a44 	addi	r2,r2,-31447
     458:	10800003 	ldbu	r2,0(r2)
     45c:	10c03fcc 	andi	r3,r2,255
     460:	e0bffc03 	ldbu	r2,-16(fp)
     464:	10c0042e 	bgeu	r2,r3,478 <cam_imageCapture+0x1b8>
					fd.minBrightness = pixel;
     468:	00c000b4 	movhi	r3,2
     46c:	18e14a44 	addi	r3,r3,-31447
     470:	e0bffc03 	ldbu	r2,-16(fp)
     474:	18800005 	stb	r2,0(r3)
		if(row < 120 && row%2){
			vgaPtr = VGA_MEM_START + (row/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     478:	e0bffe17 	ldw	r2,-8(fp)
     47c:	10800044 	addi	r2,r2,1
     480:	e0bffe15 	stw	r2,-8(fp)
     484:	e0bffe17 	ldw	r2,-8(fp)
     488:	10802c08 	cmpgei	r2,r2,176
     48c:	1000071e 	bne	r2,zero,4ac <cam_imageCapture+0x1ec>
     490:	00a02034 	movhi	r2,32896
     494:	10880004 	addi	r2,r2,8192
     498:	10800003 	ldbu	r2,0(r2)
     49c:	10803fcc 	andi	r2,r2,255
     4a0:	1080008c 	andi	r2,r2,2
     4a4:	1004c03a 	cmpne	r2,r2,zero
     4a8:	103fba1e 	bne	r2,zero,394 <cam_imageCapture+0xd4>
	vgaPtr = VGA_MEM_START;
	fd.maxBrightness = 0x00;
	fd.minBrightness = 0xFF;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     4ac:	e0bfff17 	ldw	r2,-4(fp)
     4b0:	10bfffc4 	addi	r2,r2,-1
     4b4:	e0bfff15 	stw	r2,-4(fp)
     4b8:	e0bfff17 	ldw	r2,-4(fp)
     4bc:	1004403a 	cmpge	r2,r2,zero
     4c0:	103f9a1e 	bne	r2,zero,32c <cam_imageCapture+0x6c>
				if(fd.minBrightness > pixel)
					fd.minBrightness = pixel;
			}
		}
	}
	return &fd;
     4c4:	d0a6ce04 	addi	r2,gp,-25800
}
     4c8:	e037883a 	mov	sp,fp
     4cc:	df000017 	ldw	fp,0(sp)
     4d0:	dec00104 	addi	sp,sp,4
     4d4:	f800283a 	ret

000004d8 <cam_track>:
/**
 * Captures a frame from the camera and returns it filtered with the given value
 * @param threshold value used to filter the pixel data
 * @return meta-date of the frame as pointer to the internal structure.
 */
struct frameData* cam_track(int16_t threshold){
     4d8:	defffa04 	addi	sp,sp,-24
     4dc:	df000515 	stw	fp,20(sp)
     4e0:	df000504 	addi	fp,sp,20
     4e4:	e13fff0d 	sth	r4,-4(fp)
	int row, col;
	volatile uint8_t* vgaPtr;
	uint8_t pixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     4e8:	00a02034 	movhi	r2,32896
     4ec:	10880004 	addi	r2,r2,8192
     4f0:	10800003 	ldbu	r2,0(r2)
     4f4:	10803fcc 	andi	r2,r2,255
     4f8:	1080010c 	andi	r2,r2,4
     4fc:	1005003a 	cmpeq	r2,r2,zero
     500:	103ff91e 	bne	r2,zero,4e8 <cam_track+0x10>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     504:	00a02034 	movhi	r2,32896
     508:	10880004 	addi	r2,r2,8192
     50c:	10800003 	ldbu	r2,0(r2)
     510:	10803fcc 	andi	r2,r2,255
     514:	1080010c 	andi	r2,r2,4
     518:	1004c03a 	cmpne	r2,r2,zero
     51c:	103ff91e 	bne	r2,zero,504 <cam_track+0x2c>
	vgaPtr = VGA_MEM_START;
     520:	00a02034 	movhi	r2,32896
     524:	e0bffc15 	stw	r2,-16(fp)
	fd.maxBrightness = 0x00;
     528:	d026ce05 	stb	zero,-25800(gp)
	fd.minBrightness = 0xFF;
     52c:	00c000b4 	movhi	r3,2
     530:	18e14a44 	addi	r3,r3,-31447
     534:	00bfffc4 	movi	r2,-1
     538:	18800005 	stb	r2,0(r3)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     53c:	008023c4 	movi	r2,143
     540:	e0bffe15 	stw	r2,-8(fp)
     544:	00006a06 	br	6f0 <cam_track+0x218>
		//set next VGA row
		if(row < 120 && row%2){
     548:	e0bffe17 	ldw	r2,-8(fp)
     54c:	10801e08 	cmpgei	r2,r2,120
     550:	10000e1e 	bne	r2,zero,58c <cam_track+0xb4>
     554:	e0bffe17 	ldw	r2,-8(fp)
     558:	1080004c 	andi	r2,r2,1
     55c:	10803fcc 	andi	r2,r2,255
     560:	1005003a 	cmpeq	r2,r2,zero
     564:	1000091e 	bne	r2,zero,58c <cam_track+0xb4>
			vgaPtr = VGA_MEM_START + (row/2 << 7);
     568:	e0fffe17 	ldw	r3,-8(fp)
     56c:	1804d7fa 	srli	r2,r3,31
     570:	10c5883a 	add	r2,r2,r3
     574:	1005d07a 	srai	r2,r2,1
     578:	100491fa 	slli	r2,r2,7
     57c:	1007883a 	mov	r3,r2
     580:	00a02034 	movhi	r2,32896
     584:	1885883a 	add	r2,r3,r2
     588:	e0bffc15 	stw	r2,-16(fp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     58c:	00a02034 	movhi	r2,32896
     590:	10880004 	addi	r2,r2,8192
     594:	10800003 	ldbu	r2,0(r2)
     598:	10803fcc 	andi	r2,r2,255
     59c:	1080008c 	andi	r2,r2,2
     5a0:	1005003a 	cmpeq	r2,r2,zero
     5a4:	103ff91e 	bne	r2,zero,58c <cam_track+0xb4>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     5a8:	e03ffd15 	stw	zero,-12(fp)
     5ac:	00004306 	br	6bc <cam_track+0x1e4>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5b0:	00a02034 	movhi	r2,32896
     5b4:	10880004 	addi	r2,r2,8192
     5b8:	10800003 	ldbu	r2,0(r2)
     5bc:	10803fcc 	andi	r2,r2,255
     5c0:	1080004c 	andi	r2,r2,1
     5c4:	1005003a 	cmpeq	r2,r2,zero
     5c8:	103ff91e 	bne	r2,zero,5b0 <cam_track+0xd8>
			pixel = *CAM_PIXEL_REGISTER;
     5cc:	00a02034 	movhi	r2,32896
     5d0:	10880404 	addi	r2,r2,8208
     5d4:	10800003 	ldbu	r2,0(r2)
     5d8:	e0bffb05 	stb	r2,-20(fp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5dc:	00a02034 	movhi	r2,32896
     5e0:	10880004 	addi	r2,r2,8192
     5e4:	10800003 	ldbu	r2,0(r2)
     5e8:	10803fcc 	andi	r2,r2,255
     5ec:	1080004c 	andi	r2,r2,1
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	1004c03a 	cmpne	r2,r2,zero
     5f8:	103ff81e 	bne	r2,zero,5dc <cam_track+0x104>

			//display pixels to VGA
			if(row < 120 && row%2 && col < 160 && col%2){
     5fc:	e0bffe17 	ldw	r2,-8(fp)
     600:	10801e08 	cmpgei	r2,r2,120
     604:	10002a1e 	bne	r2,zero,6b0 <cam_track+0x1d8>
     608:	e0bffe17 	ldw	r2,-8(fp)
     60c:	1080004c 	andi	r2,r2,1
     610:	10803fcc 	andi	r2,r2,255
     614:	1005003a 	cmpeq	r2,r2,zero
     618:	1000251e 	bne	r2,zero,6b0 <cam_track+0x1d8>
     61c:	e0bffd17 	ldw	r2,-12(fp)
     620:	10802808 	cmpgei	r2,r2,160
     624:	1000221e 	bne	r2,zero,6b0 <cam_track+0x1d8>
     628:	e0bffd17 	ldw	r2,-12(fp)
     62c:	1080004c 	andi	r2,r2,1
     630:	10803fcc 	andi	r2,r2,255
     634:	1005003a 	cmpeq	r2,r2,zero
     638:	10001d1e 	bne	r2,zero,6b0 <cam_track+0x1d8>
				//write to VGA
				*vgaPtr = (pixel > threshold)? 0xFF : 0x00;;
     63c:	e0fffb03 	ldbu	r3,-20(fp)
     640:	e0bfff0f 	ldh	r2,-4(fp)
     644:	10c0030e 	bge	r2,r3,654 <cam_track+0x17c>
     648:	00bfffc4 	movi	r2,-1
     64c:	e0bfff85 	stb	r2,-2(fp)
     650:	00000106 	br	658 <cam_track+0x180>
     654:	e03fff85 	stb	zero,-2(fp)
     658:	e0bffc17 	ldw	r2,-16(fp)
     65c:	e0ffff83 	ldbu	r3,-2(fp)
     660:	10c00005 	stb	r3,0(r2)
				vgaPtr++;
     664:	e0bffc17 	ldw	r2,-16(fp)
     668:	10800044 	addi	r2,r2,1
     66c:	e0bffc15 	stw	r2,-16(fp)

				//update pixel information
				if(fd.maxBrightness < pixel)
     670:	d0a6ce03 	ldbu	r2,-25800(gp)
     674:	10c03fcc 	andi	r3,r2,255
     678:	e0bffb03 	ldbu	r2,-20(fp)
     67c:	1880022e 	bgeu	r3,r2,688 <cam_track+0x1b0>
					fd.maxBrightness = pixel;
     680:	e0bffb03 	ldbu	r2,-20(fp)
     684:	d0a6ce05 	stb	r2,-25800(gp)
				if(fd.minBrightness > pixel)
     688:	008000b4 	movhi	r2,2
     68c:	10a14a44 	addi	r2,r2,-31447
     690:	10800003 	ldbu	r2,0(r2)
     694:	10c03fcc 	andi	r3,r2,255
     698:	e0bffb03 	ldbu	r2,-20(fp)
     69c:	10c0042e 	bgeu	r2,r3,6b0 <cam_track+0x1d8>
					fd.minBrightness = pixel;
     6a0:	00c000b4 	movhi	r3,2
     6a4:	18e14a44 	addi	r3,r3,-31447
     6a8:	e0bffb03 	ldbu	r2,-20(fp)
     6ac:	18800005 	stb	r2,0(r3)
		if(row < 120 && row%2){
			vgaPtr = VGA_MEM_START + (row/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     6b0:	e0bffd17 	ldw	r2,-12(fp)
     6b4:	10800044 	addi	r2,r2,1
     6b8:	e0bffd15 	stw	r2,-12(fp)
     6bc:	e0bffd17 	ldw	r2,-12(fp)
     6c0:	10802c08 	cmpgei	r2,r2,176
     6c4:	1000071e 	bne	r2,zero,6e4 <cam_track+0x20c>
     6c8:	00a02034 	movhi	r2,32896
     6cc:	10880004 	addi	r2,r2,8192
     6d0:	10800003 	ldbu	r2,0(r2)
     6d4:	10803fcc 	andi	r2,r2,255
     6d8:	1080008c 	andi	r2,r2,2
     6dc:	1004c03a 	cmpne	r2,r2,zero
     6e0:	103fb31e 	bne	r2,zero,5b0 <cam_track+0xd8>
	vgaPtr = VGA_MEM_START;
	fd.maxBrightness = 0x00;
	fd.minBrightness = 0xFF;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     6e4:	e0bffe17 	ldw	r2,-8(fp)
     6e8:	10bfffc4 	addi	r2,r2,-1
     6ec:	e0bffe15 	stw	r2,-8(fp)
     6f0:	e0bffe17 	ldw	r2,-8(fp)
     6f4:	1004403a 	cmpge	r2,r2,zero
     6f8:	103f931e 	bne	r2,zero,548 <cam_track+0x70>
				if(fd.minBrightness > pixel)
					fd.minBrightness = pixel;
			}
		}
	}
	return &fd;
     6fc:	d0a6ce04 	addi	r2,gp,-25800
}
     700:	e037883a 	mov	sp,fp
     704:	df000017 	ldw	fp,0(sp)
     708:	dec00104 	addi	sp,sp,4
     70c:	f800283a 	ret

00000710 <cmd_init>:

/**
 * Initializes the command line module. Specifically the command list is
 * generated so that command parsing can occur.
 */
void cmd_init(){
     710:	defffe04 	addi	sp,sp,-8
     714:	dfc00115 	stw	ra,4(sp)
     718:	df000015 	stw	fp,0(sp)
     71c:	d839883a 	mov	fp,sp
	_generateList();
     720:	00008680 	call	868 <_generateList>
}
     724:	e037883a 	mov	sp,fp
     728:	dfc00117 	ldw	ra,4(sp)
     72c:	df000017 	ldw	fp,0(sp)
     730:	dec00204 	addi	sp,sp,8
     734:	f800283a 	ret

00000738 <cmd_getCommand>:

/**
 * Gets the command from the user and will perform that action. Blocking
 */
void cmd_getCommand(){
     738:	defffa04 	addi	sp,sp,-24
     73c:	dfc00515 	stw	ra,20(sp)
     740:	df000415 	stw	fp,16(sp)
     744:	df000404 	addi	fp,sp,16
	//print prompt to the user for next command
	printf("\nEnter Command:");
     748:	01000074 	movhi	r4,1
     74c:	2110df04 	addi	r4,r4,17276
     750:	00036f80 	call	36f8 <printf>

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
     754:	00800074 	movhi	r2,1
     758:	109a7d04 	addi	r2,r2,27124
     75c:	10800017 	ldw	r2,0(r2)
     760:	11800117 	ldw	r6,4(r2)
     764:	010000b4 	movhi	r4,2
     768:	21216104 	addi	r4,r4,-31356
     76c:	01401404 	movi	r5,80
     770:	00029380 	call	2938 <fgets>
	char* str = inputStr;
     774:	008000b4 	movhi	r2,2
     778:	10a16104 	addi	r2,r2,-31356
     77c:	e0bffe15 	stw	r2,-8(fp)
	while(*str){
     780:	00001d06 	br	7f8 <cmd_getCommand+0xc0>
		*str = toupper(*str);
     784:	e0bffe17 	ldw	r2,-8(fp)
     788:	10800003 	ldbu	r2,0(r2)
     78c:	10803fcc 	andi	r2,r2,255
     790:	1080201c 	xori	r2,r2,128
     794:	10bfe004 	addi	r2,r2,-128
     798:	e0bffc15 	stw	r2,-16(fp)
     79c:	00800074 	movhi	r2,1
     7a0:	109a7c04 	addi	r2,r2,27120
     7a4:	10c00017 	ldw	r3,0(r2)
     7a8:	e0bffc17 	ldw	r2,-16(fp)
     7ac:	1885883a 	add	r2,r3,r2
     7b0:	10800003 	ldbu	r2,0(r2)
     7b4:	10803fcc 	andi	r2,r2,255
     7b8:	1080008c 	andi	r2,r2,2
     7bc:	1005003a 	cmpeq	r2,r2,zero
     7c0:	1000041e 	bne	r2,zero,7d4 <cmd_getCommand+0x9c>
     7c4:	e0bffc17 	ldw	r2,-16(fp)
     7c8:	10bff804 	addi	r2,r2,-32
     7cc:	e0bfff15 	stw	r2,-4(fp)
     7d0:	00000206 	br	7dc <cmd_getCommand+0xa4>
     7d4:	e0bffc17 	ldw	r2,-16(fp)
     7d8:	e0bfff15 	stw	r2,-4(fp)
     7dc:	e0bfff17 	ldw	r2,-4(fp)
     7e0:	1007883a 	mov	r3,r2
     7e4:	e0bffe17 	ldw	r2,-8(fp)
     7e8:	10c00005 	stb	r3,0(r2)
		str++;
     7ec:	e0bffe17 	ldw	r2,-8(fp)
     7f0:	10800044 	addi	r2,r2,1
     7f4:	e0bffe15 	stw	r2,-8(fp)
	printf("\nEnter Command:");

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
	char* str = inputStr;
	while(*str){
     7f8:	e0bffe17 	ldw	r2,-8(fp)
     7fc:	10800003 	ldbu	r2,0(r2)
     800:	10803fcc 	andi	r2,r2,255
     804:	1080201c 	xori	r2,r2,128
     808:	10bfe004 	addi	r2,r2,-128
     80c:	1004c03a 	cmpne	r2,r2,zero
     810:	103fdc1e 	bne	r2,zero,784 <cmd_getCommand+0x4c>
		*str = toupper(*str);
		str++;
	}

	//parse for command
	int matched = sscanf(inputStr,"%s",cmdStr);
     814:	010000b4 	movhi	r4,2
     818:	21216104 	addi	r4,r4,-31356
     81c:	01400074 	movhi	r5,1
     820:	2950e304 	addi	r5,r5,17292
     824:	018000b4 	movhi	r6,2
     828:	31a17504 	addi	r6,r6,-31276
     82c:	0003bfc0 	call	3bfc <sscanf>
     830:	e0bffd15 	stw	r2,-12(fp)
	if(matched != EOF){
     834:	e0bffd17 	ldw	r2,-12(fp)
     838:	10bfffe0 	cmpeqi	r2,r2,-1
     83c:	1000051e 	bne	r2,zero,854 <cmd_getCommand+0x11c>
		cmd_parseInput(inputStr,cmdStr);
     840:	010000b4 	movhi	r4,2
     844:	21216104 	addi	r4,r4,-31356
     848:	014000b4 	movhi	r5,2
     84c:	29617504 	addi	r5,r5,-31276
     850:	00009380 	call	938 <cmd_parseInput>
	}
}
     854:	e037883a 	mov	sp,fp
     858:	dfc00117 	ldw	ra,4(sp)
     85c:	df000017 	ldw	fp,0(sp)
     860:	dec00204 	addi	sp,sp,8
     864:	f800283a 	ret

00000868 <_generateList>:

/**
 * Generates the list of commands in an array of pointers so that commands
 * can be looked up based on their name when parsed.
 */
static void _generateList(){
     868:	deffff04 	addi	sp,sp,-4
     86c:	df000015 	stw	fp,0(sp)
     870:	d839883a 	mov	fp,sp
	//setup command list
	commandList[0] = &RR;
     874:	00c000b4 	movhi	r3,2
     878:	18e15804 	addi	r3,r3,-31392
     87c:	00800074 	movhi	r2,1
     880:	1093df04 	addi	r2,r2,20348
     884:	18800015 	stw	r2,0(r3)
	commandList[1] = &WR;
     888:	00c000b4 	movhi	r3,2
     88c:	18e15804 	addi	r3,r3,-31392
     890:	00800074 	movhi	r2,1
     894:	1093e204 	addi	r2,r2,20360
     898:	18800115 	stw	r2,4(r3)
	commandList[2] = &HELP;
     89c:	00c000b4 	movhi	r3,2
     8a0:	18e15804 	addi	r3,r3,-31392
     8a4:	00800074 	movhi	r2,1
     8a8:	1093d004 	addi	r2,r2,20288
     8ac:	18800215 	stw	r2,8(r3)
	commandList[3] = &PAN;
     8b0:	00c000b4 	movhi	r3,2
     8b4:	18e15804 	addi	r3,r3,-31392
     8b8:	00800074 	movhi	r2,1
     8bc:	1093e504 	addi	r2,r2,20372
     8c0:	18800315 	stw	r2,12(r3)
	commandList[4] = &TILT;
     8c4:	00c000b4 	movhi	r3,2
     8c8:	18e15804 	addi	r3,r3,-31392
     8cc:	00800074 	movhi	r2,1
     8d0:	1093e804 	addi	r2,r2,20384
     8d4:	18800415 	stw	r2,16(r3)
	commandList[5] = &WRCAMREG;
     8d8:	00c000b4 	movhi	r3,2
     8dc:	18e15804 	addi	r3,r3,-31392
     8e0:	00800074 	movhi	r2,1
     8e4:	1093d604 	addi	r2,r2,20312
     8e8:	18800515 	stw	r2,20(r3)
	commandList[6] = &RDCAMREG;
     8ec:	00c000b4 	movhi	r3,2
     8f0:	18e15804 	addi	r3,r3,-31392
     8f4:	00800074 	movhi	r2,1
     8f8:	1093d304 	addi	r2,r2,20300
     8fc:	18800615 	stw	r2,24(r3)
	commandList[7] = &IMAGE;
     900:	00c000b4 	movhi	r3,2
     904:	18e15804 	addi	r3,r3,-31392
     908:	00800074 	movhi	r2,1
     90c:	1093d904 	addi	r2,r2,20324
     910:	18800715 	stw	r2,28(r3)
	commandList[8] = &TRACK;
     914:	00c000b4 	movhi	r3,2
     918:	18e15804 	addi	r3,r3,-31392
     91c:	00800074 	movhi	r2,1
     920:	1093dc04 	addi	r2,r2,20336
     924:	18800815 	stw	r2,32(r3)
}
     928:	e037883a 	mov	sp,fp
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00104 	addi	sp,sp,4
     934:	f800283a 	ret

00000938 <cmd_parseInput>:
 * Matches the command given by the user with the predefined list. Will run
 * any command that is matched with given.
 * @param inputStr original string from the user.
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
     938:	defffa04 	addi	sp,sp,-24
     93c:	dfc00515 	stw	ra,20(sp)
     940:	df000415 	stw	fp,16(sp)
     944:	df000404 	addi	fp,sp,16
     948:	e13ffe15 	stw	r4,-8(fp)
     94c:	e17fff15 	stw	r5,-4(fp)
		//search command list for match
		int commandFoundFlag = 0;
     950:	e03ffd15 	stw	zero,-12(fp)
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     954:	e03ffc15 	stw	zero,-16(fp)
     958:	00001c06 	br	9cc <cmd_parseInput+0x94>
			if(strcmp(cmdStr,commandList[i]->name)==0){
     95c:	e0bffc17 	ldw	r2,-16(fp)
     960:	00c000b4 	movhi	r3,2
     964:	18e15804 	addi	r3,r3,-31392
     968:	1085883a 	add	r2,r2,r2
     96c:	1085883a 	add	r2,r2,r2
     970:	10c5883a 	add	r2,r2,r3
     974:	10800017 	ldw	r2,0(r2)
     978:	11400017 	ldw	r5,0(r2)
     97c:	e13fff17 	ldw	r4,-4(fp)
     980:	0003e5c0 	call	3e5c <strcmp>
     984:	1004c03a 	cmpne	r2,r2,zero
     988:	10000d1e 	bne	r2,zero,9c0 <cmd_parseInput+0x88>
				lcd_clr();
     98c:	00018c00 	call	18c0 <lcd_clr>
				commandList[i]->cmdFnt(inputStr);
     990:	e0bffc17 	ldw	r2,-16(fp)
     994:	00c000b4 	movhi	r3,2
     998:	18e15804 	addi	r3,r3,-31392
     99c:	1085883a 	add	r2,r2,r2
     9a0:	1085883a 	add	r2,r2,r2
     9a4:	10c5883a 	add	r2,r2,r3
     9a8:	10800017 	ldw	r2,0(r2)
     9ac:	10800217 	ldw	r2,8(r2)
     9b0:	e13ffe17 	ldw	r4,-8(fp)
     9b4:	103ee83a 	callr	r2
				commandFoundFlag = 1;
     9b8:	00800044 	movi	r2,1
     9bc:	e0bffd15 	stw	r2,-12(fp)
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
		//search command list for match
		int commandFoundFlag = 0;
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     9c0:	e0bffc17 	ldw	r2,-16(fp)
     9c4:	10800044 	addi	r2,r2,1
     9c8:	e0bffc15 	stw	r2,-16(fp)
     9cc:	e0bffc17 	ldw	r2,-16(fp)
     9d0:	10800250 	cmplti	r2,r2,9
     9d4:	103fe11e 	bne	r2,zero,95c <cmd_parseInput+0x24>
				commandFoundFlag = 1;
			}
		}

		//if command not found then print error message
		if(!commandFoundFlag){
     9d8:	e0bffd17 	ldw	r2,-12(fp)
     9dc:	1004c03a 	cmpne	r2,r2,zero
     9e0:	1000031e 	bne	r2,zero,9f0 <cmd_parseInput+0xb8>
			printf("Invalid Command.\n");
     9e4:	01000074 	movhi	r4,1
     9e8:	2110e404 	addi	r4,r4,17296
     9ec:	00038340 	call	3834 <puts>
		}
}
     9f0:	e037883a 	mov	sp,fp
     9f4:	dfc00117 	ldw	ra,4(sp)
     9f8:	df000017 	ldw	fp,0(sp)
     9fc:	dec00204 	addi	sp,sp,8
     a00:	f800283a 	ret

00000a04 <_help>:

/**
 * Help Command Function
 * @param arg string to parse
 */
static void _help(char* arg){
     a04:	deffe404 	addi	sp,sp,-112
     a08:	dfc01b15 	stw	ra,108(sp)
     a0c:	df001a15 	stw	fp,104(sp)
     a10:	df001a04 	addi	fp,sp,104
     a14:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Help Menu");
     a18:	01000074 	movhi	r4,1
     a1c:	2110e904 	addi	r4,r4,17316
     a20:	00019a40 	call	19a4 <lcd_printString>
	char cmd[5];
	char otherStr[80]; //large to prevent failure of size

	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
     a24:	e1bfe904 	addi	r6,fp,-92
     a28:	e1ffea44 	addi	r7,fp,-87
     a2c:	e13fff17 	ldw	r4,-4(fp)
     a30:	01400074 	movhi	r5,1
     a34:	2950ec04 	addi	r5,r5,17328
     a38:	0003bfc0 	call	3bfc <sscanf>
     a3c:	e0bfe815 	stw	r2,-96(fp)
	if(matched == 2){
     a40:	e0bfe817 	ldw	r2,-96(fp)
     a44:	10800098 	cmpnei	r2,r2,2
     a48:	1000441e 	bne	r2,zero,b5c <_help+0x158>
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
     a4c:	e13fea44 	addi	r4,fp,-87
     a50:	01400074 	movhi	r5,1
     a54:	2950ee04 	addi	r5,r5,17336
     a58:	0003e5c0 	call	3e5c <strcmp>
     a5c:	1004c03a 	cmpne	r2,r2,zero
     a60:	10001c1e 	bne	r2,zero,ad4 <_help+0xd0>
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     a64:	e03fe715 	stw	zero,-100(fp)
     a68:	00001606 	br	ac4 <_help+0xc0>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
     a6c:	e0bfe717 	ldw	r2,-100(fp)
     a70:	00c000b4 	movhi	r3,2
     a74:	18e15804 	addi	r3,r3,-31392
     a78:	1085883a 	add	r2,r2,r2
     a7c:	1085883a 	add	r2,r2,r2
     a80:	10c5883a 	add	r2,r2,r3
     a84:	10800017 	ldw	r2,0(r2)
     a88:	11400017 	ldw	r5,0(r2)
     a8c:	e0bfe717 	ldw	r2,-100(fp)
     a90:	00c000b4 	movhi	r3,2
     a94:	18e15804 	addi	r3,r3,-31392
     a98:	1085883a 	add	r2,r2,r2
     a9c:	1085883a 	add	r2,r2,r2
     aa0:	10c5883a 	add	r2,r2,r3
     aa4:	10800017 	ldw	r2,0(r2)
     aa8:	11800117 	ldw	r6,4(r2)
     aac:	01000074 	movhi	r4,1
     ab0:	2110ef04 	addi	r4,r4,17340
     ab4:	00036f80 	call	36f8 <printf>
	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
	if(matched == 2){
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     ab8:	e0bfe717 	ldw	r2,-100(fp)
     abc:	10800044 	addi	r2,r2,1
     ac0:	e0bfe715 	stw	r2,-100(fp)
     ac4:	e0bfe717 	ldw	r2,-100(fp)
     ac8:	10800250 	cmplti	r2,r2,9
     acc:	103fe71e 	bne	r2,zero,a6c <_help+0x68>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
     ad0:	00002606 	br	b6c <_help+0x168>
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     ad4:	e03fe615 	stw	zero,-104(fp)
     ad8:	00001906 	br	b40 <_help+0x13c>
				if(strcmp(otherStr,commandList[i]->name)==0){
     adc:	e0bfe617 	ldw	r2,-104(fp)
     ae0:	00c000b4 	movhi	r3,2
     ae4:	18e15804 	addi	r3,r3,-31392
     ae8:	1085883a 	add	r2,r2,r2
     aec:	1085883a 	add	r2,r2,r2
     af0:	10c5883a 	add	r2,r2,r3
     af4:	10800017 	ldw	r2,0(r2)
     af8:	11400017 	ldw	r5,0(r2)
     afc:	e13fea44 	addi	r4,fp,-87
     b00:	0003e5c0 	call	3e5c <strcmp>
     b04:	1004c03a 	cmpne	r2,r2,zero
     b08:	10000a1e 	bne	r2,zero,b34 <_help+0x130>
					printf(commandList[i]->helpInfo);
     b0c:	e0bfe617 	ldw	r2,-104(fp)
     b10:	00c000b4 	movhi	r3,2
     b14:	18e15804 	addi	r3,r3,-31392
     b18:	1085883a 	add	r2,r2,r2
     b1c:	1085883a 	add	r2,r2,r2
     b20:	10c5883a 	add	r2,r2,r3
     b24:	10800017 	ldw	r2,0(r2)
     b28:	11000117 	ldw	r4,4(r2)
     b2c:	00036f80 	call	36f8 <printf>
					return; //ends early as the item was found
     b30:	00000e06 	br	b6c <_help+0x168>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     b34:	e0bfe617 	ldw	r2,-104(fp)
     b38:	10800044 	addi	r2,r2,1
     b3c:	e0bfe615 	stw	r2,-104(fp)
     b40:	e0bfe617 	ldw	r2,-104(fp)
     b44:	10800250 	cmplti	r2,r2,9
     b48:	103fe41e 	bne	r2,zero,adc <_help+0xd8>
				}
			}
		}

		//did not find command.
		printf("Command %s is not valid.\n",otherStr);
     b4c:	e17fea44 	addi	r5,fp,-87
     b50:	01000074 	movhi	r4,1
     b54:	2110f104 	addi	r4,r4,17348
     b58:	00036f80 	call	36f8 <printf>
	}

	//print its own help info
	printf(HELP.helpInfo);
     b5c:	00800074 	movhi	r2,1
     b60:	1093d004 	addi	r2,r2,20288
     b64:	11000117 	ldw	r4,4(r2)
     b68:	00036f80 	call	36f8 <printf>
}
     b6c:	e037883a 	mov	sp,fp
     b70:	dfc00117 	ldw	ra,4(sp)
     b74:	df000017 	ldw	fp,0(sp)
     b78:	dec00204 	addi	sp,sp,8
     b7c:	f800283a 	ret

00000b80 <_readCam>:

/**
 * Reads from the I2C camera.
 * @param arg string to parse
 */
static void _readCam(char* arg){
     b80:	defff704 	addi	sp,sp,-36
     b84:	dfc00815 	stw	ra,32(sp)
     b88:	df000715 	stw	fp,28(sp)
     b8c:	df000704 	addi	fp,sp,28
     b90:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading I2C");
     b94:	01000074 	movhi	r4,1
     b98:	21115b04 	addi	r4,r4,17772
     b9c:	00019a40 	call	19a4 <lcd_printString>
	char cmd[10];
	unsigned int regNumber;
	int matched = sscanf(arg,"%s %x",cmd,&regNumber);
     ba0:	e1bffb04 	addi	r6,fp,-20
     ba4:	e1fffe04 	addi	r7,fp,-8
     ba8:	e13fff17 	ldw	r4,-4(fp)
     bac:	01400074 	movhi	r5,1
     bb0:	29515e04 	addi	r5,r5,17784
     bb4:	0003bfc0 	call	3bfc <sscanf>
     bb8:	e0bffa15 	stw	r2,-24(fp)
	if(matched > 1){
     bbc:	e0bffa17 	ldw	r2,-24(fp)
     bc0:	10800090 	cmplti	r2,r2,2
     bc4:	10000b1e 	bne	r2,zero,bf4 <_readCam+0x74>
		unsigned char data = I2C_read(CAMERA_I2C_ADDRESS,regNumber);
     bc8:	e0bffe17 	ldw	r2,-8(fp)
     bcc:	11403fcc 	andi	r5,r2,255
     bd0:	01001804 	movi	r4,96
     bd4:	00015540 	call	1554 <I2C_read>
     bd8:	e0bff905 	stb	r2,-28(fp)
		printf("%02x: %02x\n",regNumber,data);
     bdc:	e17ffe17 	ldw	r5,-8(fp)
     be0:	e1bff903 	ldbu	r6,-28(fp)
     be4:	01000074 	movhi	r4,1
     be8:	21116004 	addi	r4,r4,17792
     bec:	00036f80 	call	36f8 <printf>
     bf0:	00000306 	br	c00 <_readCam+0x80>
	}else{
		printf("Invalid read command structure\n");
     bf4:	01000074 	movhi	r4,1
     bf8:	21116304 	addi	r4,r4,17804
     bfc:	00038340 	call	3834 <puts>
	}
}
     c00:	e037883a 	mov	sp,fp
     c04:	dfc00117 	ldw	ra,4(sp)
     c08:	df000017 	ldw	fp,0(sp)
     c0c:	dec00204 	addi	sp,sp,8
     c10:	f800283a 	ret

00000c14 <_writeCam>:

/**
 * Writes to the I2C camera.
 * @param arg string to parse.
 */
static void _writeCam(char* arg){
     c14:	defff604 	addi	sp,sp,-40
     c18:	dfc00915 	stw	ra,36(sp)
     c1c:	df000815 	stw	fp,32(sp)
     c20:	df000804 	addi	fp,sp,32
     c24:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing I2C");
     c28:	01000074 	movhi	r4,1
     c2c:	21116b04 	addi	r4,r4,17836
     c30:	00019a40 	call	19a4 <lcd_printString>
	char cmd[10];
	unsigned int regNumber, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&regNumber,&value);
     c34:	e1bffa04 	addi	r6,fp,-24
     c38:	e1fffd04 	addi	r7,fp,-12
     c3c:	e0bffe04 	addi	r2,fp,-8
     c40:	d8800015 	stw	r2,0(sp)
     c44:	e13fff17 	ldw	r4,-4(fp)
     c48:	01400074 	movhi	r5,1
     c4c:	29516e04 	addi	r5,r5,17848
     c50:	0003bfc0 	call	3bfc <sscanf>
     c54:	e0bff915 	stw	r2,-28(fp)
	if(matched > 2){
     c58:	e0bff917 	ldw	r2,-28(fp)
     c5c:	108000d0 	cmplti	r2,r2,3
     c60:	1000071e 	bne	r2,zero,c80 <_writeCam+0x6c>
		I2C_write(CAMERA_I2C_ADDRESS,regNumber,value);
     c64:	e0bffd17 	ldw	r2,-12(fp)
     c68:	11403fcc 	andi	r5,r2,255
     c6c:	e0bffe17 	ldw	r2,-8(fp)
     c70:	11803fcc 	andi	r6,r2,255
     c74:	01001804 	movi	r4,96
     c78:	000164c0 	call	164c <I2C_write>
     c7c:	00000306 	br	c8c <_writeCam+0x78>
	}else{
		printf("Invalid write command structure\n");
     c80:	01000074 	movhi	r4,1
     c84:	21117104 	addi	r4,r4,17860
     c88:	00038340 	call	3834 <puts>
	}
}
     c8c:	e037883a 	mov	sp,fp
     c90:	dfc00117 	ldw	ra,4(sp)
     c94:	df000017 	ldw	fp,0(sp)
     c98:	dec00204 	addi	sp,sp,8
     c9c:	f800283a 	ret

00000ca0 <_displayImage>:
/**
 * Displays the camera image onto the VGA hardware. Runs in a loop until
 * pushbutton two is pressed to exit.
 * @param arg ignored
 */
static void _displayImage(char* arg){
     ca0:	defffd04 	addi	sp,sp,-12
     ca4:	dfc00215 	stw	ra,8(sp)
     ca8:	df000115 	stw	fp,4(sp)
     cac:	df000104 	addi	fp,sp,4
     cb0:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Displaying\nCamera Image");
     cb4:	01000074 	movhi	r4,1
     cb8:	21117904 	addi	r4,r4,17892
     cbc:	00019a40 	call	19a4 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     cc0:	01000074 	movhi	r4,1
     cc4:	21117f04 	addi	r4,r4,17916
     cc8:	00038340 	call	3834 <puts>

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     ccc:	00000106 	br	cd4 <_displayImage+0x34>
		cam_imageCapture();
     cd0:	00002c00 	call	2c0 <cam_imageCapture>
 */
static void _displayImage(char* arg){
	lcd_printString("Displaying\nCamera Image");
	printf("Press Button 2 to exit.\n");

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     cd4:	01000044 	movi	r4,1
     cd8:	0001d680 	call	1d68 <pushbutton_read>
     cdc:	10803fcc 	andi	r2,r2,255
     ce0:	1004c03a 	cmpne	r2,r2,zero
     ce4:	103ffa1e 	bne	r2,zero,cd0 <_displayImage+0x30>
		cam_imageCapture();
	}

	//set to default
	vga_clearDisplay();
     ce8:	00022d80 	call	22d8 <vga_clearDisplay>
}
     cec:	e037883a 	mov	sp,fp
     cf0:	dfc00117 	ldw	ra,4(sp)
     cf4:	df000017 	ldw	fp,0(sp)
     cf8:	dec00204 	addi	sp,sp,8
     cfc:	f800283a 	ret

00000d00 <_track>:
/**
 * Track command looks for target that meets threshold requirement. Manipulates
 * servo turret to track target under closed loop control.
 * @param arg ignored
 */
static void _track(char* arg){
     d00:	defff604 	addi	sp,sp,-40
     d04:	dfc00915 	stw	ra,36(sp)
     d08:	df000815 	stw	fp,32(sp)
     d0c:	dc000715 	stw	r16,28(sp)
     d10:	df000704 	addi	fp,sp,28
     d14:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Tracking Target");
     d18:	01000074 	movhi	r4,1
     d1c:	21118504 	addi	r4,r4,17940
     d20:	00019a40 	call	19a4 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     d24:	01000074 	movhi	r4,1
     d28:	21117f04 	addi	r4,r4,17916
     d2c:	00038340 	call	3834 <puts>

	//data members
	struct frameData* fd;
	struct boundingBox box;

	int16_t threshold = 0x55;
     d30:	00801544 	movi	r2,85
     d34:	e0bffc0d 	sth	r2,-16(fp)
	int16_t errorX, prevErrorX = 0;
     d38:	e03ffb0d 	sth	zero,-20(fp)
	int16_t errorY, prevErrorY = 0;
     d3c:	e03ffa0d 	sth	zero,-24(fp)

	//loop the tracking until button pressed
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     d40:	00004a06 	br	e6c <_track+0x16c>
		//get data
		fd = cam_track(threshold);
     d44:	e13ffc0f 	ldh	r4,-16(fp)
     d48:	00004d80 	call	4d8 <cam_track>
     d4c:	e0bffd15 	stw	r2,-12(fp)
		box.minr = VGA_ROW_MAX;
     d50:	00800f04 	movi	r2,60
     d54:	e0bffe05 	stb	r2,-8(fp)
		box.minc = VGA_COL_MAX;
     d58:	00801404 	movi	r2,80
     d5c:	e0bffe45 	stb	r2,-7(fp)
		box.maxr = 0;
     d60:	e03ffe85 	stb	zero,-6(fp)
		box.maxc = 0;
     d64:	e03ffec5 	stb	zero,-5(fp)

		//filter image for abstract target
		_track_boundingBox(&box);
     d68:	e13ffe04 	addi	r4,fp,-8
     d6c:	0000ea00 	call	ea0 <_track_boundingBox>

		//calculate cog of the object
		int16_t cogy = (box.maxr + box.minr)/2;
     d70:	e0bffe83 	ldbu	r2,-6(fp)
     d74:	10c03fcc 	andi	r3,r2,255
     d78:	e0bffe03 	ldbu	r2,-8(fp)
     d7c:	10803fcc 	andi	r2,r2,255
     d80:	1887883a 	add	r3,r3,r2
     d84:	1804d7fa 	srli	r2,r3,31
     d88:	10c5883a 	add	r2,r2,r3
     d8c:	1005d07a 	srai	r2,r2,1
     d90:	e0bff98d 	sth	r2,-26(fp)
		int16_t cogx = (box.maxc + box.minc)/2;
     d94:	e0bffec3 	ldbu	r2,-5(fp)
     d98:	10c03fcc 	andi	r3,r2,255
     d9c:	e0bffe43 	ldbu	r2,-7(fp)
     da0:	10803fcc 	andi	r2,r2,255
     da4:	1887883a 	add	r3,r3,r2
     da8:	1804d7fa 	srli	r2,r3,31
     dac:	10c5883a 	add	r2,r2,r3
     db0:	1005d07a 	srai	r2,r2,1
     db4:	e0bff90d 	sth	r2,-28(fp)
		if(cogx < 0 || cogy < 0){
     db8:	e0bff90f 	ldh	r2,-28(fp)
     dbc:	1004803a 	cmplt	r2,r2,zero
     dc0:	10002a1e 	bne	r2,zero,e6c <_track+0x16c>
     dc4:	e0bff98f 	ldh	r2,-26(fp)
     dc8:	1004803a 	cmplt	r2,r2,zero
     dcc:	1000271e 	bne	r2,zero,e6c <_track+0x16c>
			continue; //no pixels to track
		}

		//control servo motors
		errorX = (40 - cogx);
     dd0:	e0fff90b 	ldhu	r3,-28(fp)
     dd4:	00800a04 	movi	r2,40
     dd8:	10c5c83a 	sub	r2,r2,r3
     ddc:	e0bffb8d 	sth	r2,-18(fp)
		setServoX(errorX/2 + (errorX - prevErrorX)/5);
     de0:	e0fffb8f 	ldh	r3,-18(fp)
     de4:	1804d7fa 	srli	r2,r3,31
     de8:	10c5883a 	add	r2,r2,r3
     dec:	1005d07a 	srai	r2,r2,1
     df0:	143fffcc 	andi	r16,r2,65535
     df4:	8420001c 	xori	r16,r16,32768
     df8:	84200004 	addi	r16,r16,-32768
     dfc:	e0fffb8f 	ldh	r3,-18(fp)
     e00:	e0bffb0f 	ldh	r2,-20(fp)
     e04:	1889c83a 	sub	r4,r3,r2
     e08:	01400144 	movi	r5,5
     e0c:	00027200 	call	2720 <__divsi3>
     e10:	8089883a 	add	r4,r16,r2
     e14:	00024a00 	call	24a0 <setServoX>
		errorY = (30 - cogy);
     e18:	e0fff98b 	ldhu	r3,-26(fp)
     e1c:	00800784 	movi	r2,30
     e20:	10c5c83a 	sub	r2,r2,r3
     e24:	e0bffa8d 	sth	r2,-22(fp)
		setServoY(errorY*2/3 + (errorY - prevErrorY)/5);
     e28:	e0bffa8f 	ldh	r2,-22(fp)
     e2c:	1085883a 	add	r2,r2,r2
     e30:	1009883a 	mov	r4,r2
     e34:	014000c4 	movi	r5,3
     e38:	00027200 	call	2720 <__divsi3>
     e3c:	1021883a 	mov	r16,r2
     e40:	e0fffa8f 	ldh	r3,-22(fp)
     e44:	e0bffa0f 	ldh	r2,-24(fp)
     e48:	1889c83a 	sub	r4,r3,r2
     e4c:	01400144 	movi	r5,5
     e50:	00027200 	call	2720 <__divsi3>
     e54:	8089883a 	add	r4,r16,r2
     e58:	00025a40 	call	25a4 <setServoY>
		prevErrorX = errorX;
     e5c:	e0bffb8b 	ldhu	r2,-18(fp)
     e60:	e0bffb0d 	sth	r2,-20(fp)
		prevErrorY = errorY;
     e64:	e0bffa8b 	ldhu	r2,-22(fp)
     e68:	e0bffa0d 	sth	r2,-24(fp)
	int16_t threshold = 0x55;
	int16_t errorX, prevErrorX = 0;
	int16_t errorY, prevErrorY = 0;

	//loop the tracking until button pressed
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     e6c:	01000044 	movi	r4,1
     e70:	0001d680 	call	1d68 <pushbutton_read>
     e74:	10803fcc 	andi	r2,r2,255
     e78:	1004c03a 	cmpne	r2,r2,zero
     e7c:	103fb11e 	bne	r2,zero,d44 <_track+0x44>
		prevErrorX = errorX;
		prevErrorY = errorY;
	}

	//set system to default
	servo_init();
     e80:	00023540 	call	2354 <servo_init>
	vga_clearDisplay();
     e84:	00022d80 	call	22d8 <vga_clearDisplay>
}
     e88:	e037883a 	mov	sp,fp
     e8c:	dfc00217 	ldw	ra,8(sp)
     e90:	df000117 	ldw	fp,4(sp)
     e94:	dc000017 	ldw	r16,0(sp)
     e98:	dec00304 	addi	sp,sp,12
     e9c:	f800283a 	ret

00000ea0 <_track_boundingBox>:
/**
 * Calculates the bounding box of the target and updates through the bounding
 * box pointer.
 * @param box pointer to object that will be updated with new bounding info.
 */
static void _track_boundingBox(struct boundingBox* box){
     ea0:	defffc04 	addi	sp,sp,-16
     ea4:	df000315 	stw	fp,12(sp)
     ea8:	df000304 	addi	fp,sp,12
     eac:	e13fff15 	stw	r4,-4(fp)
	uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
     eb0:	e03ffe85 	stb	zero,-6(fp)
     eb4:	00003906 	br	f9c <_track_boundingBox+0xfc>
		for(col=0;col<VGA_COL_MAX;col++){
     eb8:	e03ffe45 	stb	zero,-7(fp)
     ebc:	00003106 	br	f84 <_track_boundingBox+0xe4>
			uint8_t* ptr = (uint8_t*)(VGA_MEM_START + (row << 7) + col);
     ec0:	e0bffe83 	ldbu	r2,-6(fp)
     ec4:	100491fa 	slli	r2,r2,7
     ec8:	1007883a 	mov	r3,r2
     ecc:	e0bffe43 	ldbu	r2,-7(fp)
     ed0:	1887883a 	add	r3,r3,r2
     ed4:	00a02034 	movhi	r2,32896
     ed8:	1885883a 	add	r2,r3,r2
     edc:	e0bffd15 	stw	r2,-12(fp)
			pixel = *ptr;
     ee0:	e0bffd17 	ldw	r2,-12(fp)
     ee4:	10800003 	ldbu	r2,0(r2)
     ee8:	e0bffe05 	stb	r2,-8(fp)
			if(pixel > 0x55){
     eec:	e0bffe03 	ldbu	r2,-8(fp)
     ef0:	108015b0 	cmpltui	r2,r2,86
     ef4:	1000201e 	bne	r2,zero,f78 <_track_boundingBox+0xd8>
				//check within current bounding box
				if(row < box->minr)
     ef8:	e0bfff17 	ldw	r2,-4(fp)
     efc:	10800003 	ldbu	r2,0(r2)
     f00:	10c03fcc 	andi	r3,r2,255
     f04:	e0bffe83 	ldbu	r2,-6(fp)
     f08:	10c0032e 	bgeu	r2,r3,f18 <_track_boundingBox+0x78>
					box->minr = row;
     f0c:	e0ffff17 	ldw	r3,-4(fp)
     f10:	e0bffe83 	ldbu	r2,-6(fp)
     f14:	18800005 	stb	r2,0(r3)
				if(col < box->minc)
     f18:	e0bfff17 	ldw	r2,-4(fp)
     f1c:	10800043 	ldbu	r2,1(r2)
     f20:	10c03fcc 	andi	r3,r2,255
     f24:	e0bffe43 	ldbu	r2,-7(fp)
     f28:	10c0032e 	bgeu	r2,r3,f38 <_track_boundingBox+0x98>
					box->minc = col;
     f2c:	e0ffff17 	ldw	r3,-4(fp)
     f30:	e0bffe43 	ldbu	r2,-7(fp)
     f34:	18800045 	stb	r2,1(r3)
				if(col > box->maxc)
     f38:	e0bfff17 	ldw	r2,-4(fp)
     f3c:	108000c3 	ldbu	r2,3(r2)
     f40:	10c03fcc 	andi	r3,r2,255
     f44:	e0bffe43 	ldbu	r2,-7(fp)
     f48:	1880032e 	bgeu	r3,r2,f58 <_track_boundingBox+0xb8>
					box->maxc = col;
     f4c:	e0ffff17 	ldw	r3,-4(fp)
     f50:	e0bffe43 	ldbu	r2,-7(fp)
     f54:	188000c5 	stb	r2,3(r3)
				if(row > box->maxr)
     f58:	e0bfff17 	ldw	r2,-4(fp)
     f5c:	10800083 	ldbu	r2,2(r2)
     f60:	10c03fcc 	andi	r3,r2,255
     f64:	e0bffe83 	ldbu	r2,-6(fp)
     f68:	1880032e 	bgeu	r3,r2,f78 <_track_boundingBox+0xd8>
					box->maxr = row;
     f6c:	e0ffff17 	ldw	r3,-4(fp)
     f70:	e0bffe83 	ldbu	r2,-6(fp)
     f74:	18800085 	stb	r2,2(r3)
 * @param box pointer to object that will be updated with new bounding info.
 */
static void _track_boundingBox(struct boundingBox* box){
	uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
		for(col=0;col<VGA_COL_MAX;col++){
     f78:	e0bffe43 	ldbu	r2,-7(fp)
     f7c:	10800044 	addi	r2,r2,1
     f80:	e0bffe45 	stb	r2,-7(fp)
     f84:	e0bffe43 	ldbu	r2,-7(fp)
     f88:	10801430 	cmpltui	r2,r2,80
     f8c:	103fcc1e 	bne	r2,zero,ec0 <_track_boundingBox+0x20>
 * box pointer.
 * @param box pointer to object that will be updated with new bounding info.
 */
static void _track_boundingBox(struct boundingBox* box){
	uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
     f90:	e0bffe83 	ldbu	r2,-6(fp)
     f94:	10800044 	addi	r2,r2,1
     f98:	e0bffe85 	stb	r2,-6(fp)
     f9c:	e0bffe83 	ldbu	r2,-6(fp)
     fa0:	10800f30 	cmpltui	r2,r2,60
     fa4:	103fc41e 	bne	r2,zero,eb8 <_track_boundingBox+0x18>
				if(row > box->maxr)
					box->maxr = row;
			}
		}
	}
}
     fa8:	e037883a 	mov	sp,fp
     fac:	df000017 	ldw	fp,0(sp)
     fb0:	dec00104 	addi	sp,sp,4
     fb4:	f800283a 	ret

00000fb8 <_read>:

/**
 * Read Command Function
 * @param arg string to parse
 */
static void _read(char* arg){
     fb8:	defff804 	addi	sp,sp,-32
     fbc:	dfc00715 	stw	ra,28(sp)
     fc0:	df000615 	stw	fp,24(sp)
     fc4:	df000604 	addi	fp,sp,24
     fc8:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading Memory");
     fcc:	01000074 	movhi	r4,1
     fd0:	2111ac04 	addi	r4,r4,18096
     fd4:	00019a40 	call	19a4 <lcd_printString>
	char cmd[3];
	unsigned int address, count;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&count);
     fd8:	e1bffc04 	addi	r6,fp,-16
     fdc:	e1fffd04 	addi	r7,fp,-12
     fe0:	e0bffe04 	addi	r2,fp,-8
     fe4:	d8800015 	stw	r2,0(sp)
     fe8:	e13fff17 	ldw	r4,-4(fp)
     fec:	01400074 	movhi	r5,1
     ff0:	2951b004 	addi	r5,r5,18112
     ff4:	0003bfc0 	call	3bfc <sscanf>
     ff8:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
     ffc:	e0bffb17 	ldw	r2,-20(fp)
    1000:	108000d8 	cmpnei	r2,r2,3
    1004:	1000041e 	bne	r2,zero,1018 <_read+0x60>
		//Read multiple
		_printMem(address,count);
    1008:	e13ffd17 	ldw	r4,-12(fp)
    100c:	e17ffe17 	ldw	r5,-8(fp)
    1010:	00010dc0 	call	10dc <_printMem>
    1014:	00000a06 	br	1040 <_read+0x88>
	}else if(matched == 2){
    1018:	e0bffb17 	ldw	r2,-20(fp)
    101c:	10800098 	cmpnei	r2,r2,2
    1020:	1000041e 	bne	r2,zero,1034 <_read+0x7c>
		//Read single
		_printMem(address,1);
    1024:	e13ffd17 	ldw	r4,-12(fp)
    1028:	01400044 	movi	r5,1
    102c:	00010dc0 	call	10dc <_printMem>
    1030:	00000306 	br	1040 <_read+0x88>
	}else{
		printf("Invalid RR Command Structure.\n");
    1034:	01000074 	movhi	r4,1
    1038:	2111b304 	addi	r4,r4,18124
    103c:	00038340 	call	3834 <puts>
	}
}
    1040:	e037883a 	mov	sp,fp
    1044:	dfc00117 	ldw	ra,4(sp)
    1048:	df000017 	ldw	fp,0(sp)
    104c:	dec00204 	addi	sp,sp,8
    1050:	f800283a 	ret

00001054 <_write>:

/**
 * Write Command Function
 * @param arg string to parse
 */
static void _write(char* arg){
    1054:	defff804 	addi	sp,sp,-32
    1058:	dfc00715 	stw	ra,28(sp)
    105c:	df000615 	stw	fp,24(sp)
    1060:	df000604 	addi	fp,sp,24
    1064:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing Memory");
    1068:	01000074 	movhi	r4,1
    106c:	2111bb04 	addi	r4,r4,18156
    1070:	00019a40 	call	19a4 <lcd_printString>
	char cmd[3];
	unsigned int address, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&value);
    1074:	e1bffc04 	addi	r6,fp,-16
    1078:	e1fffd04 	addi	r7,fp,-12
    107c:	e0bffe04 	addi	r2,fp,-8
    1080:	d8800015 	stw	r2,0(sp)
    1084:	e13fff17 	ldw	r4,-4(fp)
    1088:	01400074 	movhi	r5,1
    108c:	2951b004 	addi	r5,r5,18112
    1090:	0003bfc0 	call	3bfc <sscanf>
    1094:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
    1098:	e0bffb17 	ldw	r2,-20(fp)
    109c:	108000d8 	cmpnei	r2,r2,3
    10a0:	1000061e 	bne	r2,zero,10bc <_write+0x68>
		//always apply the store IO version of the instruction for immediate
		// change and store in original for memory required versions
		*((volatile unsigned char*)(address | BYPASS_CACHE_FLAG)) = value;
    10a4:	e0bffd17 	ldw	r2,-12(fp)
    10a8:	10a00034 	orhi	r2,r2,32768
    10ac:	1007883a 	mov	r3,r2
    10b0:	e0bffe17 	ldw	r2,-8(fp)
    10b4:	18800005 	stb	r2,0(r3)
    10b8:	00000306 	br	10c8 <_write+0x74>
	}else{
		printf("Invalid WR Command Structure.\n");
    10bc:	01000074 	movhi	r4,1
    10c0:	2111bf04 	addi	r4,r4,18172
    10c4:	00038340 	call	3834 <puts>
	}
}
    10c8:	e037883a 	mov	sp,fp
    10cc:	dfc00117 	ldw	ra,4(sp)
    10d0:	df000017 	ldw	fp,0(sp)
    10d4:	dec00204 	addi	sp,sp,8
    10d8:	f800283a 	ret

000010dc <_printMem>:
/**
 * Prints out memory starting at the address for the count amount of bytes
 * @param address the address of memory to start printing
 * @param count the number of bytes to read and print
 */
static void _printMem(unsigned int address, unsigned int count){
    10dc:	deffdf04 	addi	sp,sp,-132
    10e0:	dfc02015 	stw	ra,128(sp)
    10e4:	df001f15 	stw	fp,124(sp)
    10e8:	dc001e15 	stw	r16,120(sp)
    10ec:	df001e04 	addi	fp,sp,120
    10f0:	e13ffe15 	stw	r4,-8(fp)
    10f4:	e17fff15 	stw	r5,-4(fp)

	//sanity check count for valid specification
	if(count < 1){
    10f8:	e0bfff17 	ldw	r2,-4(fp)
    10fc:	1004c03a 	cmpne	r2,r2,zero
    1100:	1000041e 	bne	r2,zero,1114 <_printMem+0x38>
		printf("Error - Invalid Number of Addresses Specified.\n");
    1104:	01000074 	movhi	r4,1
    1108:	2111c704 	addi	r4,r4,18204
    110c:	00038340 	call	3834 <puts>
		return; //error case so leave early
    1110:	00009006 	br	1354 <_printMem+0x278>
	}else if(address + count < address){
    1114:	e0fffe17 	ldw	r3,-8(fp)
    1118:	e0bfff17 	ldw	r2,-4(fp)
    111c:	1887883a 	add	r3,r3,r2
    1120:	e0bffe17 	ldw	r2,-8(fp)
    1124:	1880032e 	bgeu	r3,r2,1134 <_printMem+0x58>
		printf("Warning - Address Overflow.\n");
    1128:	01000074 	movhi	r4,1
    112c:	2111d304 	addi	r4,r4,18252
    1130:	00038340 	call	3834 <puts>
	//buffer allocation
	char buffer[80];
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
    1134:	e0bfe704 	addi	r2,fp,-100
    1138:	1009883a 	mov	r4,r2
    113c:	01801404 	movi	r6,80
    1140:	000b883a 	mov	r5,zero
    1144:	00036600 	call	3660 <memset>
	strcat(buffer,"  Base   :");
    1148:	e43fe704 	addi	r16,fp,-100
    114c:	e13fe704 	addi	r4,fp,-100
    1150:	0003fa40 	call	3fa4 <strlen>
    1154:	8085883a 	add	r2,r16,r2
    1158:	1007883a 	mov	r3,r2
    115c:	00800804 	movi	r2,32
    1160:	18800005 	stb	r2,0(r3)
    1164:	00800804 	movi	r2,32
    1168:	18800045 	stb	r2,1(r3)
    116c:	00801084 	movi	r2,66
    1170:	18800085 	stb	r2,2(r3)
    1174:	00801844 	movi	r2,97
    1178:	188000c5 	stb	r2,3(r3)
    117c:	00801cc4 	movi	r2,115
    1180:	18800105 	stb	r2,4(r3)
    1184:	00801944 	movi	r2,101
    1188:	18800145 	stb	r2,5(r3)
    118c:	00800804 	movi	r2,32
    1190:	18800185 	stb	r2,6(r3)
    1194:	00800804 	movi	r2,32
    1198:	188001c5 	stb	r2,7(r3)
    119c:	00800804 	movi	r2,32
    11a0:	18800205 	stb	r2,8(r3)
    11a4:	00800e84 	movi	r2,58
    11a8:	18800245 	stb	r2,9(r3)
    11ac:	18000285 	stb	zero,10(r3)
	int i; for(i = 0; i < count && i < 16; ++i){
    11b0:	e03fe615 	stw	zero,-104(fp)
    11b4:	00000e06 	br	11f0 <_printMem+0x114>
		*(temp+3) = '\0';
    11b8:	e0bffb04 	addi	r2,fp,-20
    11bc:	108000c4 	addi	r2,r2,3
    11c0:	10000005 	stb	zero,0(r2)
		sprintf(temp," +%x",i);
    11c4:	e13ffb04 	addi	r4,fp,-20
    11c8:	01400074 	movhi	r5,1
    11cc:	2951da04 	addi	r5,r5,18280
    11d0:	e1bfe617 	ldw	r6,-104(fp)
    11d4:	0003a980 	call	3a98 <sprintf>
		strcat(buffer,temp);
    11d8:	e13fe704 	addi	r4,fp,-100
    11dc:	e17ffb04 	addi	r5,fp,-20
    11e0:	0003dcc0 	call	3dcc <strcat>
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
	strcat(buffer,"  Base   :");
	int i; for(i = 0; i < count && i < 16; ++i){
    11e4:	e0bfe617 	ldw	r2,-104(fp)
    11e8:	10800044 	addi	r2,r2,1
    11ec:	e0bfe615 	stw	r2,-104(fp)
    11f0:	e0ffe617 	ldw	r3,-104(fp)
    11f4:	e0bfff17 	ldw	r2,-4(fp)
    11f8:	1880032e 	bgeu	r3,r2,1208 <_printMem+0x12c>
    11fc:	e0bfe617 	ldw	r2,-104(fp)
    1200:	10800410 	cmplti	r2,r2,16
    1204:	103fec1e 	bne	r2,zero,11b8 <_printMem+0xdc>
		*(temp+3) = '\0';
		sprintf(temp," +%x",i);
		strcat(buffer,temp);
	}
	strcat(buffer,"\n");
    1208:	e13fe704 	addi	r4,fp,-100
    120c:	01400074 	movhi	r5,1
    1210:	2951dc04 	addi	r5,r5,18288
    1214:	0003dcc0 	call	3dcc <strcat>
	printf(buffer);
    1218:	e13fe704 	addi	r4,fp,-100
    121c:	00036f80 	call	36f8 <printf>

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    1220:	e03fe515 	stw	zero,-108(fp)
    1224:	00004306 	br	1334 <_printMem+0x258>
		memset(buffer,'\0',sizeof buffer);
    1228:	e0bfe704 	addi	r2,fp,-100
    122c:	1009883a 	mov	r4,r2
    1230:	01801404 	movi	r6,80
    1234:	000b883a 	mov	r5,zero
    1238:	00036600 	call	3660 <memset>

		//print address
		*(temp+10) = '\0';
    123c:	e0bffb04 	addi	r2,fp,-20
    1240:	10800284 	addi	r2,r2,10
    1244:	10000005 	stb	zero,0(r2)
		sprintf(temp,"%08x :",address + j*16);
    1248:	e0bfe517 	ldw	r2,-108(fp)
    124c:	1004913a 	slli	r2,r2,4
    1250:	1007883a 	mov	r3,r2
    1254:	e0bffe17 	ldw	r2,-8(fp)
    1258:	188d883a 	add	r6,r3,r2
    125c:	e13ffb04 	addi	r4,fp,-20
    1260:	01400074 	movhi	r5,1
    1264:	2951dd04 	addi	r5,r5,18292
    1268:	0003a980 	call	3a98 <sprintf>
		strcat(buffer,temp);
    126c:	e13fe704 	addi	r4,fp,-100
    1270:	e17ffb04 	addi	r5,fp,-20
    1274:	0003dcc0 	call	3dcc <strcat>

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    1278:	e03fe415 	stw	zero,-112(fp)
    127c:	00001a06 	br	12e8 <_printMem+0x20c>
			unsigned int addr = address + j*16+a;
    1280:	e0bfe517 	ldw	r2,-108(fp)
    1284:	1004913a 	slli	r2,r2,4
    1288:	1007883a 	mov	r3,r2
    128c:	e0bffe17 	ldw	r2,-8(fp)
    1290:	1887883a 	add	r3,r3,r2
    1294:	e0bfe417 	ldw	r2,-112(fp)
    1298:	1885883a 	add	r2,r3,r2
    129c:	e0bfe315 	stw	r2,-116(fp)
			unsigned char val = *((unsigned char*)(addr | BYPASS_CACHE_FLAG));
    12a0:	e0bfe317 	ldw	r2,-116(fp)
    12a4:	10a00034 	orhi	r2,r2,32768
    12a8:	10800003 	ldbu	r2,0(r2)
    12ac:	e0bfe205 	stb	r2,-120(fp)
			*(temp+3) = '\0';
    12b0:	e0bffb04 	addi	r2,fp,-20
    12b4:	108000c4 	addi	r2,r2,3
    12b8:	10000005 	stb	zero,0(r2)
			sprintf(temp," %02x",val);
    12bc:	e1bfe203 	ldbu	r6,-120(fp)
    12c0:	e13ffb04 	addi	r4,fp,-20
    12c4:	01400074 	movhi	r5,1
    12c8:	2951df04 	addi	r5,r5,18300
    12cc:	0003a980 	call	3a98 <sprintf>
			strcat(buffer,temp);
    12d0:	e13fe704 	addi	r4,fp,-100
    12d4:	e17ffb04 	addi	r5,fp,-20
    12d8:	0003dcc0 	call	3dcc <strcat>
		*(temp+10) = '\0';
		sprintf(temp,"%08x :",address + j*16);
		strcat(buffer,temp);

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    12dc:	e0bfe417 	ldw	r2,-112(fp)
    12e0:	10800044 	addi	r2,r2,1
    12e4:	e0bfe415 	stw	r2,-112(fp)
    12e8:	e0bfe417 	ldw	r2,-112(fp)
    12ec:	10800408 	cmpgei	r2,r2,16
    12f0:	1000071e 	bne	r2,zero,1310 <_printMem+0x234>
    12f4:	e13fe417 	ldw	r4,-112(fp)
    12f8:	e0bfe517 	ldw	r2,-108(fp)
    12fc:	1004913a 	slli	r2,r2,4
    1300:	1007883a 	mov	r3,r2
    1304:	e0bfff17 	ldw	r2,-4(fp)
    1308:	10c5c83a 	sub	r2,r2,r3
    130c:	20bfdc36 	bltu	r4,r2,1280 <_printMem+0x1a4>
			sprintf(temp," %02x",val);
			strcat(buffer,temp);
		}

		//send to serial device
		strcat(buffer,"\n");
    1310:	e13fe704 	addi	r4,fp,-100
    1314:	01400074 	movhi	r5,1
    1318:	2951dc04 	addi	r5,r5,18288
    131c:	0003dcc0 	call	3dcc <strcat>
		printf(buffer);
    1320:	e13fe704 	addi	r4,fp,-100
    1324:	00036f80 	call	36f8 <printf>
	}
	strcat(buffer,"\n");
	printf(buffer);

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    1328:	e0bfe517 	ldw	r2,-108(fp)
    132c:	10800044 	addi	r2,r2,1
    1330:	e0bfe515 	stw	r2,-108(fp)
    1334:	e0ffe517 	ldw	r3,-108(fp)
    1338:	e0bfff17 	ldw	r2,-4(fp)
    133c:	10bfffc4 	addi	r2,r2,-1
    1340:	1004d13a 	srli	r2,r2,4
    1344:	10800044 	addi	r2,r2,1
    1348:	18bfb736 	bltu	r3,r2,1228 <_printMem+0x14c>
		strcat(buffer,"\n");
		printf(buffer);
	}

	//send final character to clean up display
	printf("\n");
    134c:	01000284 	movi	r4,10
    1350:	00037700 	call	3770 <putchar>
}
    1354:	e037883a 	mov	sp,fp
    1358:	dfc00217 	ldw	ra,8(sp)
    135c:	df000117 	ldw	fp,4(sp)
    1360:	dc000017 	ldw	r16,0(sp)
    1364:	dec00304 	addi	sp,sp,12
    1368:	f800283a 	ret

0000136c <_pan>:

/**
 * Pans the servo by the input value provided
 * @param arg string to parse
 */
static void _pan(char* arg){
    136c:	defff604 	addi	sp,sp,-40
    1370:	dfc00915 	stw	ra,36(sp)
    1374:	df000815 	stw	fp,32(sp)
    1378:	df000804 	addi	fp,sp,32
    137c:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Panning");
    1380:	01000074 	movhi	r4,1
    1384:	21121704 	addi	r4,r4,18524
    1388:	00019a40 	call	19a4 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    138c:	e1bff904 	addi	r6,fp,-28
    1390:	e1fffb04 	addi	r7,fp,-20
    1394:	e13fff17 	ldw	r4,-4(fp)
    1398:	01400074 	movhi	r5,1
    139c:	29521904 	addi	r5,r5,18532
    13a0:	0003bfc0 	call	3bfc <sscanf>
    13a4:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    13a8:	e0bff817 	ldw	r2,-32(fp)
    13ac:	10800090 	cmplti	r2,r2,2
    13b0:	1000151e 	bne	r2,zero,1408 <_pan+0x9c>
		if(servo_pan(pos) == -1){
    13b4:	e13ffb17 	ldw	r4,-20(fp)
    13b8:	00023880 	call	2388 <servo_pan>
    13bc:	10bfffd8 	cmpnei	r2,r2,-1
    13c0:	1000141e 	bne	r2,zero,1414 <_pan+0xa8>
			printf("Position ");
    13c4:	01000074 	movhi	r4,1
    13c8:	21121b04 	addi	r4,r4,18540
    13cc:	00036f80 	call	36f8 <printf>
			char temp[11]; *(temp+10) = '\0';
    13d0:	e0bffc04 	addi	r2,fp,-16
    13d4:	10800284 	addi	r2,r2,10
    13d8:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    13dc:	e1bffb17 	ldw	r6,-20(fp)
    13e0:	e13ffc04 	addi	r4,fp,-16
    13e4:	01400074 	movhi	r5,1
    13e8:	29521e04 	addi	r5,r5,18552
    13ec:	0003a980 	call	3a98 <sprintf>
			printf(temp);
    13f0:	e13ffc04 	addi	r4,fp,-16
    13f4:	00036f80 	call	36f8 <printf>
			printf(" is invalid. Enter between 0 and 175.\n");
    13f8:	01000074 	movhi	r4,1
    13fc:	21121f04 	addi	r4,r4,18556
    1400:	00038340 	call	3834 <puts>
    1404:	00000306 	br	1414 <_pan+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    1408:	01000074 	movhi	r4,1
    140c:	21122904 	addi	r4,r4,18596
    1410:	00038340 	call	3834 <puts>
	}
}
    1414:	e037883a 	mov	sp,fp
    1418:	dfc00117 	ldw	ra,4(sp)
    141c:	df000017 	ldw	fp,0(sp)
    1420:	dec00204 	addi	sp,sp,8
    1424:	f800283a 	ret

00001428 <_tilt>:

/**
 * Tilts the servo by the input value provided
 * @param arg string to parse
 */
static void _tilt(char* arg){
    1428:	defff604 	addi	sp,sp,-40
    142c:	dfc00915 	stw	ra,36(sp)
    1430:	df000815 	stw	fp,32(sp)
    1434:	df000804 	addi	fp,sp,32
    1438:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Tilting");
    143c:	01000074 	movhi	r4,1
    1440:	21123004 	addi	r4,r4,18624
    1444:	00019a40 	call	19a4 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    1448:	e1bff904 	addi	r6,fp,-28
    144c:	e1fffb04 	addi	r7,fp,-20
    1450:	e13fff17 	ldw	r4,-4(fp)
    1454:	01400074 	movhi	r5,1
    1458:	29521904 	addi	r5,r5,18532
    145c:	0003bfc0 	call	3bfc <sscanf>
    1460:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    1464:	e0bff817 	ldw	r2,-32(fp)
    1468:	10800090 	cmplti	r2,r2,2
    146c:	1000151e 	bne	r2,zero,14c4 <_tilt+0x9c>
		if(servo_tilt(pos) == -1){
    1470:	e13ffb17 	ldw	r4,-20(fp)
    1474:	00023f80 	call	23f8 <servo_tilt>
    1478:	10bfffd8 	cmpnei	r2,r2,-1
    147c:	1000141e 	bne	r2,zero,14d0 <_tilt+0xa8>
			printf("Position ");
    1480:	01000074 	movhi	r4,1
    1484:	21121b04 	addi	r4,r4,18540
    1488:	00036f80 	call	36f8 <printf>
			char temp[11]; *(temp+10) = '\0';
    148c:	e0bffc04 	addi	r2,fp,-16
    1490:	10800284 	addi	r2,r2,10
    1494:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    1498:	e1bffb17 	ldw	r6,-20(fp)
    149c:	e13ffc04 	addi	r4,fp,-16
    14a0:	01400074 	movhi	r5,1
    14a4:	29521e04 	addi	r5,r5,18552
    14a8:	0003a980 	call	3a98 <sprintf>
			printf(temp);
    14ac:	e13ffc04 	addi	r4,fp,-16
    14b0:	00036f80 	call	36f8 <printf>
			printf(" is invalid. Enter between 0 and 143.\n");
    14b4:	01000074 	movhi	r4,1
    14b8:	21123204 	addi	r4,r4,18632
    14bc:	00038340 	call	3834 <puts>
    14c0:	00000306 	br	14d0 <_tilt+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    14c4:	01000074 	movhi	r4,1
    14c8:	21122904 	addi	r4,r4,18596
    14cc:	00038340 	call	3834 <puts>
	}
}
    14d0:	e037883a 	mov	sp,fp
    14d4:	dfc00117 	ldw	ra,4(sp)
    14d8:	df000017 	ldw	fp,0(sp)
    14dc:	dec00204 	addi	sp,sp,8
    14e0:	f800283a 	ret

000014e4 <I2C_init>:

/**
 * This function will initialize the pre-scaler register and enable the I2C
 * peripheral
 */
void I2C_init(){
    14e4:	defffe04 	addi	sp,sp,-8
    14e8:	df000115 	stw	fp,4(sp)
    14ec:	df000104 	addi	fp,sp,4
	uint16_t scaler = I2C_PRESCALER_FORMULA(50000000,100000);
    14f0:	008018c4 	movi	r2,99
    14f4:	e0bfff0d 	sth	r2,-4(fp)
	I2C->PRESCALER_LO = (scaler)&0xFF;
    14f8:	01202034 	movhi	r4,32896
    14fc:	21080804 	addi	r4,r4,8224
    1500:	e0bfff0b 	ldhu	r2,-4(fp)
    1504:	1007883a 	mov	r3,r2
    1508:	00bfffc4 	movi	r2,-1
    150c:	1884703a 	and	r2,r3,r2
    1510:	20800005 	stb	r2,0(r4)
	I2C->PRESCALER_HI = (scaler>>8)&0xFF;
    1514:	01202034 	movhi	r4,32896
    1518:	21080804 	addi	r4,r4,8224
    151c:	e0bfff0b 	ldhu	r2,-4(fp)
    1520:	1004d23a 	srli	r2,r2,8
    1524:	1007883a 	mov	r3,r2
    1528:	00bfffc4 	movi	r2,-1
    152c:	1884703a 	and	r2,r3,r2
    1530:	20800045 	stb	r2,1(r4)
	I2C->CNTRL = I2C_CNTRL_ENABLE_MASK;
    1534:	00e02034 	movhi	r3,32896
    1538:	18c80804 	addi	r3,r3,8224
    153c:	00bfe004 	movi	r2,-128
    1540:	18800085 	stb	r2,2(r3)
}
    1544:	e037883a 	mov	sp,fp
    1548:	df000017 	ldw	fp,0(sp)
    154c:	dec00104 	addi	sp,sp,4
    1550:	f800283a 	ret

00001554 <I2C_read>:
 * It returns the 8-bit contents of the specified register.
 * @param addr slave address of device 7-bit
 * @param regNumber register address to read on slave device.
 * @return byte read from the device.
 */
uint8_t I2C_read(uint8_t addr, uint8_t regNumber){
    1554:	defffa04 	addi	sp,sp,-24
    1558:	dfc00515 	stw	ra,20(sp)
    155c:	df000415 	stw	fp,16(sp)
    1560:	df000404 	addi	fp,sp,16
    1564:	e13ffd05 	stb	r4,-12(fp)
    1568:	e17ffe05 	stb	r5,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    156c:	00e02034 	movhi	r3,32896
    1570:	18c80804 	addi	r3,r3,8224
    1574:	e0bffd03 	ldbu	r2,-12(fp)
    1578:	1085883a 	add	r2,r2,r2
    157c:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    1580:	01002404 	movi	r4,144
    1584:	00017100 	call	1710 <I2C_action>
    1588:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    158c:	e0bffc03 	ldbu	r2,-16(fp)
    1590:	1005003a 	cmpeq	r2,r2,zero
    1594:	1000031e 	bne	r2,zero,15a4 <I2C_read+0x50>
		return -1; //error occurred
    1598:	00803fc4 	movi	r2,255
    159c:	e0bfff15 	stw	r2,-4(fp)
    15a0:	00002406 	br	1634 <I2C_read+0xe0>
	}

	//write register address and end transmit
	I2C->RX_TX = regNumber;
    15a4:	00e02034 	movhi	r3,32896
    15a8:	18c80804 	addi	r3,r3,8224
    15ac:	e0bffe03 	ldbu	r2,-8(fp)
    15b0:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK| I2C_CMD_STO_MASK);
    15b4:	01001404 	movi	r4,80
    15b8:	00017100 	call	1710 <I2C_action>
    15bc:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    15c0:	e0bffc03 	ldbu	r2,-16(fp)
    15c4:	1005003a 	cmpeq	r2,r2,zero
    15c8:	1000031e 	bne	r2,zero,15d8 <I2C_read+0x84>
		return -1; //error occurred
    15cc:	00803fc4 	movi	r2,255
    15d0:	e0bfff15 	stw	r2,-4(fp)
    15d4:	00001706 	br	1634 <I2C_read+0xe0>
	}

	//write slave read address, data received is from device
	I2C->RX_TX = (addr << 1) | 1;
    15d8:	00e02034 	movhi	r3,32896
    15dc:	18c80804 	addi	r3,r3,8224
    15e0:	e0bffd03 	ldbu	r2,-12(fp)
    15e4:	1085883a 	add	r2,r2,r2
    15e8:	10800054 	ori	r2,r2,1
    15ec:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    15f0:	01002404 	movi	r4,144
    15f4:	00017100 	call	1710 <I2C_action>
    15f8:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    15fc:	e0bffc03 	ldbu	r2,-16(fp)
    1600:	1005003a 	cmpeq	r2,r2,zero
    1604:	1000031e 	bne	r2,zero,1614 <I2C_read+0xc0>
		return -1; //error occurred
    1608:	00803fc4 	movi	r2,255
    160c:	e0bfff15 	stw	r2,-4(fp)
    1610:	00000806 	br	1634 <I2C_read+0xe0>
	}
	nacked = I2C_action(I2C_CMD_RD_MASK | I2C_CMD_STO_MASK | I2C_CMD_ACK_MASK);
    1614:	01001a04 	movi	r4,104
    1618:	00017100 	call	1710 <I2C_action>
    161c:	e0bffc05 	stb	r2,-16(fp)
	return I2C->RX_TX;
    1620:	00a02034 	movhi	r2,32896
    1624:	10880804 	addi	r2,r2,8224
    1628:	108000c3 	ldbu	r2,3(r2)
    162c:	10803fcc 	andi	r2,r2,255
    1630:	e0bfff15 	stw	r2,-4(fp)
    1634:	e0bfff17 	ldw	r2,-4(fp)

}
    1638:	e037883a 	mov	sp,fp
    163c:	dfc00117 	ldw	ra,4(sp)
    1640:	df000017 	ldw	fp,0(sp)
    1644:	dec00204 	addi	sp,sp,8
    1648:	f800283a 	ret

0000164c <I2C_write>:
 * @param addr slave address of device 7-bit
 * @param regNumber register address to write on slave device.
 * @param value data byte to send to slave register.
 * @return 1 if nacked, 0 if acked
 */
uint8_t I2C_write(uint8_t addr, uint8_t regNumber, uint8_t value){
    164c:	defff904 	addi	sp,sp,-28
    1650:	dfc00615 	stw	ra,24(sp)
    1654:	df000515 	stw	fp,20(sp)
    1658:	df000504 	addi	fp,sp,20
    165c:	e13ffc05 	stb	r4,-16(fp)
    1660:	e17ffd05 	stb	r5,-12(fp)
    1664:	e1bffe05 	stb	r6,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    1668:	00e02034 	movhi	r3,32896
    166c:	18c80804 	addi	r3,r3,8224
    1670:	e0bffc03 	ldbu	r2,-16(fp)
    1674:	1085883a 	add	r2,r2,r2
    1678:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    167c:	01002404 	movi	r4,144
    1680:	00017100 	call	1710 <I2C_action>
    1684:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    1688:	e0bffb03 	ldbu	r2,-20(fp)
    168c:	1005003a 	cmpeq	r2,r2,zero
    1690:	1000031e 	bne	r2,zero,16a0 <I2C_write+0x54>
		return nacked; //error occurred
    1694:	e0bffb03 	ldbu	r2,-20(fp)
    1698:	e0bfff15 	stw	r2,-4(fp)
    169c:	00001606 	br	16f8 <I2C_write+0xac>
	}

	//write register address
	I2C->RX_TX = regNumber;
    16a0:	00e02034 	movhi	r3,32896
    16a4:	18c80804 	addi	r3,r3,8224
    16a8:	e0bffd03 	ldbu	r2,-12(fp)
    16ac:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK);
    16b0:	01000404 	movi	r4,16
    16b4:	00017100 	call	1710 <I2C_action>
    16b8:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    16bc:	e0bffb03 	ldbu	r2,-20(fp)
    16c0:	1005003a 	cmpeq	r2,r2,zero
    16c4:	1000031e 	bne	r2,zero,16d4 <I2C_write+0x88>
		return nacked; //error occurred
    16c8:	e0bffb03 	ldbu	r2,-20(fp)
    16cc:	e0bfff15 	stw	r2,-4(fp)
    16d0:	00000906 	br	16f8 <I2C_write+0xac>
	}

	//write data
	I2C->RX_TX = value;
    16d4:	00a02034 	movhi	r2,32896
    16d8:	10880804 	addi	r2,r2,8224
    16dc:	e0fffe03 	ldbu	r3,-8(fp)
    16e0:	10c000c5 	stb	r3,3(r2)
	nacked = I2C_action(I2C_CMD_WR_MASK | I2C_CMD_STO_MASK);
    16e4:	01001404 	movi	r4,80
    16e8:	00017100 	call	1710 <I2C_action>
    16ec:	e0bffb05 	stb	r2,-20(fp)
	return nacked;
    16f0:	e0bffb03 	ldbu	r2,-20(fp)
    16f4:	e0bfff15 	stw	r2,-4(fp)
    16f8:	e0bfff17 	ldw	r2,-4(fp)
}
    16fc:	e037883a 	mov	sp,fp
    1700:	dfc00117 	ldw	ra,4(sp)
    1704:	df000017 	ldw	fp,0(sp)
    1708:	dec00204 	addi	sp,sp,8
    170c:	f800283a 	ret

00001710 <I2C_action>:
 * particular I2C transfer, polls TIP for end of transfer and returns the
 * RxACK status (0 for success).
 * @param command bit flags specifying the commands to apply to I2C control
 * @return success/fail of command (NACK != 0, ACK = 0)
 */
uint8_t I2C_action(uint8_t command){
    1710:	defffe04 	addi	sp,sp,-8
    1714:	df000115 	stw	fp,4(sp)
    1718:	df000104 	addi	fp,sp,4
    171c:	e13fff05 	stb	r4,-4(fp)
	I2C->STATUS_CMD = command;
    1720:	00e02034 	movhi	r3,32896
    1724:	18c80804 	addi	r3,r3,8224
    1728:	e0bfff03 	ldbu	r2,-4(fp)
    172c:	18800105 	stb	r2,4(r3)
	while(I2C->STATUS_CMD&I2C_STATUS_TIP_FLAG); //wait for TIP
    1730:	00a02034 	movhi	r2,32896
    1734:	10880804 	addi	r2,r2,8224
    1738:	10800103 	ldbu	r2,4(r2)
    173c:	10803fcc 	andi	r2,r2,255
    1740:	1080008c 	andi	r2,r2,2
    1744:	1004c03a 	cmpne	r2,r2,zero
    1748:	103ff91e 	bne	r2,zero,1730 <I2C_action+0x20>
	return I2C->STATUS_CMD&I2C_STATUS_RXACK_FLAG;
    174c:	00a02034 	movhi	r2,32896
    1750:	10880804 	addi	r2,r2,8224
    1754:	10800103 	ldbu	r2,4(r2)
    1758:	10c03fcc 	andi	r3,r2,255
    175c:	00802004 	movi	r2,128
    1760:	1884703a 	and	r2,r3,r2
}
    1764:	e037883a 	mov	sp,fp
    1768:	df000017 	ldw	fp,0(sp)
    176c:	dec00104 	addi	sp,sp,4
    1770:	f800283a 	ret

00001774 <lcd_cmd>:

/**
 * Writes a command to the LCD.
 * @param cmd command to be sent to LCD.
 */
void lcd_cmd(uint8_t cmd){
    1774:	defffc04 	addi	sp,sp,-16
    1778:	dfc00315 	stw	ra,12(sp)
    177c:	df000215 	stw	fp,8(sp)
    1780:	df000204 	addi	fp,sp,8
    1784:	e13fff05 	stb	r4,-4(fp)
	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    1788:	0001a880 	call	1a88 <lcd_util_pollBusyFlag>

	// write E=RS=RW=0
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_CMD_MASK;
    178c:	00a02034 	movhi	r2,32896
    1790:	10882004 	addi	r2,r2,8320
    1794:	10000005 	stb	zero,0(r2)

	// write command to data port
	(LCD_DATA->DATA) = cmd;
    1798:	00e02034 	movhi	r3,32896
    179c:	18c82804 	addi	r3,r3,8352
    17a0:	e0bfff03 	ldbu	r2,-4(fp)
    17a4:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    17a8:	00a02034 	movhi	r2,32896
    17ac:	10882004 	addi	r2,r2,8320
    17b0:	10800003 	ldbu	r2,0(r2)
    17b4:	10800114 	ori	r2,r2,4
    17b8:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    17bc:	00e02034 	movhi	r3,32896
    17c0:	18c82004 	addi	r3,r3,8320
    17c4:	e0bffe03 	ldbu	r2,-8(fp)
    17c8:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    17cc:	01007d04 	movi	r4,500
    17d0:	01602034 	movhi	r5,32896
    17d4:	29481804 	addi	r5,r5,8288
    17d8:	0001da40 	call	1da4 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    17dc:	00a02034 	movhi	r2,32896
    17e0:	10882004 	addi	r2,r2,8320
    17e4:	10c00003 	ldbu	r3,0(r2)
    17e8:	00bffec4 	movi	r2,-5
    17ec:	1884703a 	and	r2,r3,r2
    17f0:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    17f4:	00e02034 	movhi	r3,32896
    17f8:	18c82004 	addi	r3,r3,8320
    17fc:	e0bffe03 	ldbu	r2,-8(fp)
    1800:	18800005 	stb	r2,0(r3)

}
    1804:	e037883a 	mov	sp,fp
    1808:	dfc00117 	ldw	ra,4(sp)
    180c:	df000017 	ldw	fp,0(sp)
    1810:	dec00204 	addi	sp,sp,8
    1814:	f800283a 	ret

00001818 <lcd_prt>:

/**
 * Writes a character to the LCD.
 * @param c character that is to be sent to LCD.
 */
void lcd_prt(char c){
    1818:	defffc04 	addi	sp,sp,-16
    181c:	dfc00315 	stw	ra,12(sp)
    1820:	df000215 	stw	fp,8(sp)
    1824:	df000204 	addi	fp,sp,8
    1828:	e13fff05 	stb	r4,-4(fp)

	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    182c:	0001a880 	call	1a88 <lcd_util_pollBusyFlag>

	// write RW=E=0 RS=1  "0b010"
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_DATA_MASK;
    1830:	00e02034 	movhi	r3,32896
    1834:	18c82004 	addi	r3,r3,8320
    1838:	00800084 	movi	r2,2
    183c:	18800005 	stb	r2,0(r3)

	// write character to data port
	(LCD_DATA->DATA) = c;
    1840:	00e02034 	movhi	r3,32896
    1844:	18c82804 	addi	r3,r3,8352
    1848:	e0bfff07 	ldb	r2,-4(fp)
    184c:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    1850:	00a02034 	movhi	r2,32896
    1854:	10882004 	addi	r2,r2,8320
    1858:	10800003 	ldbu	r2,0(r2)
    185c:	10800114 	ori	r2,r2,4
    1860:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1864:	00e02034 	movhi	r3,32896
    1868:	18c82004 	addi	r3,r3,8320
    186c:	e0bffe03 	ldbu	r2,-8(fp)
    1870:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    1874:	01007d04 	movi	r4,500
    1878:	01602034 	movhi	r5,32896
    187c:	29481804 	addi	r5,r5,8288
    1880:	0001da40 	call	1da4 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    1884:	00a02034 	movhi	r2,32896
    1888:	10882004 	addi	r2,r2,8320
    188c:	10c00003 	ldbu	r3,0(r2)
    1890:	00bffec4 	movi	r2,-5
    1894:	1884703a 	and	r2,r3,r2
    1898:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    189c:	00e02034 	movhi	r3,32896
    18a0:	18c82004 	addi	r3,r3,8320
    18a4:	e0bffe03 	ldbu	r2,-8(fp)
    18a8:	18800005 	stb	r2,0(r3)
}
    18ac:	e037883a 	mov	sp,fp
    18b0:	dfc00117 	ldw	ra,4(sp)
    18b4:	df000017 	ldw	fp,0(sp)
    18b8:	dec00204 	addi	sp,sp,8
    18bc:	f800283a 	ret

000018c0 <lcd_clr>:

/**
 * Writes the clear command to the LCD.
 */
void lcd_clr(void){
    18c0:	defffe04 	addi	sp,sp,-8
    18c4:	dfc00115 	stw	ra,4(sp)
    18c8:	df000015 	stw	fp,0(sp)
    18cc:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_CLEAR);
    18d0:	01000044 	movi	r4,1
    18d4:	00017740 	call	1774 <lcd_cmd>
}
    18d8:	e037883a 	mov	sp,fp
    18dc:	dfc00117 	ldw	ra,4(sp)
    18e0:	df000017 	ldw	fp,0(sp)
    18e4:	dec00204 	addi	sp,sp,8
    18e8:	f800283a 	ret

000018ec <lcd_home>:

/**
 * Moves the cursor back to home on the LCD.
 */
void lcd_home(void){
    18ec:	defffe04 	addi	sp,sp,-8
    18f0:	dfc00115 	stw	ra,4(sp)
    18f4:	df000015 	stw	fp,0(sp)
    18f8:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    18fc:	01000184 	movi	r4,6
    1900:	00017740 	call	1774 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1904:	01000084 	movi	r4,2
    1908:	00017740 	call	1774 <lcd_cmd>
}
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <lcd_init>:

/**
 * Initializes the LCD. Sends out the command stream to setup the display. Must
 * call LCDportInit first for direction setting.
 */
void lcd_init(void){
    1920:	defffe04 	addi	sp,sp,-8
    1924:	dfc00115 	stw	ra,4(sp)
    1928:	df000015 	stw	fp,0(sp)
    192c:	d839883a 	mov	fp,sp
	lcd_portInit(0xFF);
    1930:	01003fc4 	movi	r4,255
    1934:	00019740 	call	1974 <lcd_portInit>
	lcd_cmd(LCD_CMD_DATALENGTH_8BIT);
    1938:	01000e04 	movi	r4,56
    193c:	00017740 	call	1774 <lcd_cmd>
	lcd_cmd(LCD_CMD_DISPLAY_CURSOR_BLINK_ON);
    1940:	010003c4 	movi	r4,15
    1944:	00017740 	call	1774 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLEAR);
    1948:	01000044 	movi	r4,1
    194c:	00017740 	call	1774 <lcd_cmd>
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    1950:	01000184 	movi	r4,6
    1954:	00017740 	call	1774 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1958:	01000084 	movi	r4,2
    195c:	00017740 	call	1774 <lcd_cmd>
}
    1960:	e037883a 	mov	sp,fp
    1964:	dfc00117 	ldw	ra,4(sp)
    1968:	df000017 	ldw	fp,0(sp)
    196c:	dec00204 	addi	sp,sp,8
    1970:	f800283a 	ret

00001974 <lcd_portInit>:

/**
 * Sets the direction of the LCD data port.
 * @param dir Port direction mask for the LCD data port
 */
void lcd_portInit(uint8_t dir){
    1974:	defffe04 	addi	sp,sp,-8
    1978:	df000115 	stw	fp,4(sp)
    197c:	df000104 	addi	fp,sp,4
    1980:	e13fff05 	stb	r4,-4(fp)
	(LCD_DATA->DIRECTION) = dir;
    1984:	00e02034 	movhi	r3,32896
    1988:	18c82804 	addi	r3,r3,8352
    198c:	e0bfff03 	ldbu	r2,-4(fp)
    1990:	18800115 	stw	r2,4(r3)
}
    1994:	e037883a 	mov	sp,fp
    1998:	df000017 	ldw	fp,0(sp)
    199c:	dec00104 	addi	sp,sp,4
    19a0:	f800283a 	ret

000019a4 <lcd_printString>:

/**
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
    19a4:	defffc04 	addi	sp,sp,-16
    19a8:	dfc00315 	stw	ra,12(sp)
    19ac:	df000215 	stw	fp,8(sp)
    19b0:	df000204 	addi	fp,sp,8
    19b4:	e13fff15 	stw	r4,-4(fp)
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    19b8:	e03ffe15 	stw	zero,-8(fp)
    19bc:	00002306 	br	1a4c <lcd_printString+0xa8>

		// If enter character
		if(*ptr == '\n'){
    19c0:	e0bfff17 	ldw	r2,-4(fp)
    19c4:	10800003 	ldbu	r2,0(r2)
    19c8:	10803fcc 	andi	r2,r2,255
    19cc:	1080201c 	xori	r2,r2,128
    19d0:	10bfe004 	addi	r2,r2,-128
    19d4:	10800298 	cmpnei	r2,r2,10
    19d8:	10000b1e 	bne	r2,zero,1a08 <lcd_printString+0x64>
			//If on first line move to second
			if(counter < 16){
    19dc:	e0bffe17 	ldw	r2,-8(fp)
    19e0:	10800408 	cmpgei	r2,r2,16
    19e4:	1000231e 	bne	r2,zero,1a74 <lcd_printString+0xd0>
				lcd_cmd(LCD_SECONDLINE_CMD);
    19e8:	01003004 	movi	r4,192
    19ec:	00017740 	call	1774 <lcd_cmd>
				counter = 16;
    19f0:	00800404 	movi	r2,16
    19f4:	e0bffe15 	stw	r2,-8(fp)
			else {
				return;
			}

			//index pointer
			ptr++;
    19f8:	e0bfff17 	ldw	r2,-4(fp)
    19fc:	10800044 	addi	r2,r2,1
    1a00:	e0bfff15 	stw	r2,-4(fp)
    1a04:	00000e06 	br	1a40 <lcd_printString+0x9c>
		}
		//Roll over to second line when first line fills
		else{
			if(counter == 16)
    1a08:	e0bffe17 	ldw	r2,-8(fp)
    1a0c:	10800418 	cmpnei	r2,r2,16
    1a10:	1000021e 	bne	r2,zero,1a1c <lcd_printString+0x78>
				lcd_cmd(LCD_SECONDLINE_CMD);
    1a14:	01003004 	movi	r4,192
    1a18:	00017740 	call	1774 <lcd_cmd>

			//print the character and index pointer
			lcd_prt(*ptr);
    1a1c:	e0bfff17 	ldw	r2,-4(fp)
    1a20:	10800003 	ldbu	r2,0(r2)
    1a24:	11003fcc 	andi	r4,r2,255
    1a28:	2100201c 	xori	r4,r4,128
    1a2c:	213fe004 	addi	r4,r4,-128
    1a30:	00018180 	call	1818 <lcd_prt>
			ptr++;
    1a34:	e0bfff17 	ldw	r2,-4(fp)
    1a38:	10800044 	addi	r2,r2,1
    1a3c:	e0bfff15 	stw	r2,-4(fp)
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    1a40:	e0bffe17 	ldw	r2,-8(fp)
    1a44:	10800044 	addi	r2,r2,1
    1a48:	e0bffe15 	stw	r2,-8(fp)
    1a4c:	e0bfff17 	ldw	r2,-4(fp)
    1a50:	10800003 	ldbu	r2,0(r2)
    1a54:	10803fcc 	andi	r2,r2,255
    1a58:	1080201c 	xori	r2,r2,128
    1a5c:	10bfe004 	addi	r2,r2,-128
    1a60:	1005003a 	cmpeq	r2,r2,zero
    1a64:	1000031e 	bne	r2,zero,1a74 <lcd_printString+0xd0>
    1a68:	e0bffe17 	ldw	r2,-8(fp)
    1a6c:	10800818 	cmpnei	r2,r2,32
    1a70:	103fd31e 	bne	r2,zero,19c0 <lcd_printString+0x1c>
			//print the character and index pointer
			lcd_prt(*ptr);
			ptr++;
		}
	}
}
    1a74:	e037883a 	mov	sp,fp
    1a78:	dfc00117 	ldw	ra,4(sp)
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00204 	addi	sp,sp,8
    1a84:	f800283a 	ret

00001a88 <lcd_util_pollBusyFlag>:

/**
 * Polls the busy flag of the LCD to synchronize the program to the LCD
 * instruction execution.
 */
static void lcd_util_pollBusyFlag(){
    1a88:	defffd04 	addi	sp,sp,-12
    1a8c:	df000215 	stw	fp,8(sp)
    1a90:	df000204 	addi	fp,sp,8

	//Set data register to input
	uint32_t tempDataDir = (LCD_DATA->DIRECTION);
    1a94:	00a02034 	movhi	r2,32896
    1a98:	10882804 	addi	r2,r2,8352
    1a9c:	10800117 	ldw	r2,4(r2)
    1aa0:	e0bfff15 	stw	r2,-4(fp)
	(LCD_DATA->DIRECTION) = 0;
    1aa4:	00a02034 	movhi	r2,32896
    1aa8:	10882804 	addi	r2,r2,8352
    1aac:	10000115 	stw	zero,4(r2)

	// Set RW=E=1, RS=0 to get visible busy flag
	(LCD_CTRL->L_CTRL) = 0x5;
    1ab0:	00e02034 	movhi	r3,32896
    1ab4:	18c82004 	addi	r3,r3,8320
    1ab8:	00800144 	movi	r2,5
    1abc:	18800005 	stb	r2,0(r3)

	// Needs small delay since processor is faster than LCD. Thus this noop
	// is ran.
	int i = 0; i++;
    1ac0:	e03ffe15 	stw	zero,-8(fp)
    1ac4:	e0bffe17 	ldw	r2,-8(fp)
    1ac8:	10800044 	addi	r2,r2,1
    1acc:	e0bffe15 	stw	r2,-8(fp)

	// Poll busy flag while it is active, since old operation is still running
	while((LCD_DATA->DATA) & 0x80);
    1ad0:	00a02034 	movhi	r2,32896
    1ad4:	10882804 	addi	r2,r2,8352
    1ad8:	10800017 	ldw	r2,0(r2)
    1adc:	1080200c 	andi	r2,r2,128
    1ae0:	1004c03a 	cmpne	r2,r2,zero
    1ae4:	103ffa1e 	bne	r2,zero,1ad0 <lcd_util_pollBusyFlag+0x48>

	// Restore the initial direction of the data ports
	(LCD_DATA->DIRECTION) = tempDataDir;
    1ae8:	00a02034 	movhi	r2,32896
    1aec:	10882804 	addi	r2,r2,8352
    1af0:	e0ffff17 	ldw	r3,-4(fp)
    1af4:	10c00115 	stw	r3,4(r2)
	(LCD_CTRL->L_CTRL) = 0;
    1af8:	00a02034 	movhi	r2,32896
    1afc:	10882004 	addi	r2,r2,8320
    1b00:	10000005 	stb	zero,0(r2)
}
    1b04:	e037883a 	mov	sp,fp
    1b08:	df000017 	ldw	fp,0(sp)
    1b0c:	dec00104 	addi	sp,sp,4
    1b10:	f800283a 	ret

00001b14 <LED_write>:

/**
 * Writes the value to the data register
 * @param output sets this value
 */
void LED_write(uint16_t output){
    1b14:	defffe04 	addi	sp,sp,-8
    1b18:	df000115 	stw	fp,4(sp)
    1b1c:	df000104 	addi	fp,sp,4
    1b20:	e13fff0d 	sth	r4,-4(fp)
	(LEDS -> DATA) = output;
    1b24:	00e02034 	movhi	r3,32896
    1b28:	18c80c04 	addi	r3,r3,8240
    1b2c:	e0bfff0b 	ldhu	r2,-4(fp)
    1b30:	18800015 	stw	r2,0(r3)
}
    1b34:	e037883a 	mov	sp,fp
    1b38:	df000017 	ldw	fp,0(sp)
    1b3c:	dec00104 	addi	sp,sp,4
    1b40:	f800283a 	ret

00001b44 <LED_read>:

/**
 * Reads from the data register
 * @return value from register which is activity of LEDs
 */
uint16_t LED_read(){
    1b44:	deffff04 	addi	sp,sp,-4
    1b48:	df000015 	stw	fp,0(sp)
    1b4c:	d839883a 	mov	fp,sp
	return (LEDS -> DATA);
    1b50:	00a02034 	movhi	r2,32896
    1b54:	10880c04 	addi	r2,r2,8240
    1b58:	10800017 	ldw	r2,0(r2)
    1b5c:	10bfffcc 	andi	r2,r2,65535
}
    1b60:	e037883a 	mov	sp,fp
    1b64:	df000017 	ldw	fp,0(sp)
    1b68:	dec00104 	addi	sp,sp,4
    1b6c:	f800283a 	ret

00001b70 <PWM_setDutyCycle_A>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_A(int dutyCycle){
    1b70:	defffc04 	addi	sp,sp,-16
    1b74:	df000315 	stw	fp,12(sp)
    1b78:	df000304 	addi	fp,sp,12
    1b7c:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1b80:	e0bffe17 	ldw	r2,-8(fp)
    1b84:	10801948 	cmpgei	r2,r2,101
    1b88:	1000121e 	bne	r2,zero,1bd4 <PWM_setDutyCycle_A+0x64>
    1b8c:	e0bffe17 	ldw	r2,-8(fp)
    1b90:	1004803a 	cmplt	r2,r2,zero
    1b94:	10000f1e 	bne	r2,zero,1bd4 <PWM_setDutyCycle_A+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    1b98:	e0bffe17 	ldw	r2,-8(fp)
    1b9c:	10803224 	muli	r2,r2,200
    1ba0:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    1ba4:	e0bffd17 	ldw	r2,-12(fp)
    1ba8:	10938818 	cmpnei	r2,r2,20000
    1bac:	1000031e 	bne	r2,zero,1bbc <PWM_setDutyCycle_A+0x4c>
			duty--;
    1bb0:	e0bffd17 	ldw	r2,-12(fp)
    1bb4:	10bfffc4 	addi	r2,r2,-1
    1bb8:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRA = duty;
    1bbc:	00a02034 	movhi	r2,32896
    1bc0:	10880a04 	addi	r2,r2,8232
    1bc4:	e0fffd17 	ldw	r3,-12(fp)
    1bc8:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1; // return an error
	}
	// no error
	return 0;
    1bcc:	e03fff15 	stw	zero,-4(fp)
    1bd0:	00000206 	br	1bdc <PWM_setDutyCycle_A+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRA = duty;
	} else {
		return -1; // return an error
    1bd4:	00bfffc4 	movi	r2,-1
    1bd8:	e0bfff15 	stw	r2,-4(fp)
    1bdc:	e0bfff17 	ldw	r2,-4(fp)
	}
	// no error
	return 0;
}
    1be0:	e037883a 	mov	sp,fp
    1be4:	df000017 	ldw	fp,0(sp)
    1be8:	dec00104 	addi	sp,sp,4
    1bec:	f800283a 	ret

00001bf0 <PWM_setDutyCycle_B>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_B(int dutyCycle){
    1bf0:	defffc04 	addi	sp,sp,-16
    1bf4:	df000315 	stw	fp,12(sp)
    1bf8:	df000304 	addi	fp,sp,12
    1bfc:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1c00:	e0bffe17 	ldw	r2,-8(fp)
    1c04:	10801948 	cmpgei	r2,r2,101
    1c08:	1000121e 	bne	r2,zero,1c54 <PWM_setDutyCycle_B+0x64>
    1c0c:	e0bffe17 	ldw	r2,-8(fp)
    1c10:	1004803a 	cmplt	r2,r2,zero
    1c14:	10000f1e 	bne	r2,zero,1c54 <PWM_setDutyCycle_B+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    1c18:	e0bffe17 	ldw	r2,-8(fp)
    1c1c:	10803224 	muli	r2,r2,200
    1c20:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    1c24:	e0bffd17 	ldw	r2,-12(fp)
    1c28:	10938818 	cmpnei	r2,r2,20000
    1c2c:	1000031e 	bne	r2,zero,1c3c <PWM_setDutyCycle_B+0x4c>
			duty--;
    1c30:	e0bffd17 	ldw	r2,-12(fp)
    1c34:	10bfffc4 	addi	r2,r2,-1
    1c38:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRB = duty;
    1c3c:	00a02034 	movhi	r2,32896
    1c40:	10880a84 	addi	r2,r2,8234
    1c44:	e0fffd17 	ldw	r3,-12(fp)
    1c48:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1;
	}
	return 0;
    1c4c:	e03fff15 	stw	zero,-4(fp)
    1c50:	00000206 	br	1c5c <PWM_setDutyCycle_B+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRB = duty;
	} else {
		return -1;
    1c54:	00bfffc4 	movi	r2,-1
    1c58:	e0bfff15 	stw	r2,-4(fp)
    1c5c:	e0bfff17 	ldw	r2,-4(fp)
	}
	return 0;
}
    1c60:	e037883a 	mov	sp,fp
    1c64:	df000017 	ldw	fp,0(sp)
    1c68:	dec00104 	addi	sp,sp,4
    1c6c:	f800283a 	ret

00001c70 <PWM_writeOCRA>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRA(unsigned int value){
    1c70:	defffd04 	addi	sp,sp,-12
    1c74:	df000215 	stw	fp,8(sp)
    1c78:	df000204 	addi	fp,sp,8
    1c7c:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    1c80:	e0bffe17 	ldw	r2,-8(fp)
    1c84:	10938870 	cmpltui	r2,r2,20001
    1c88:	1000031e 	bne	r2,zero,1c98 <PWM_writeOCRA+0x28>
		return -1;
    1c8c:	00bfffc4 	movi	r2,-1
    1c90:	e0bfff15 	stw	r2,-4(fp)
    1c94:	00000506 	br	1cac <PWM_writeOCRA+0x3c>
	}
	*OCRA = value;
    1c98:	00a02034 	movhi	r2,32896
    1c9c:	10880a04 	addi	r2,r2,8232
    1ca0:	e0fffe17 	ldw	r3,-8(fp)
    1ca4:	10c0000d 	sth	r3,0(r2)
	return 0;
    1ca8:	e03fff15 	stw	zero,-4(fp)
    1cac:	e0bfff17 	ldw	r2,-4(fp)
}
    1cb0:	e037883a 	mov	sp,fp
    1cb4:	df000017 	ldw	fp,0(sp)
    1cb8:	dec00104 	addi	sp,sp,4
    1cbc:	f800283a 	ret

00001cc0 <PWM_writeOCRB>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRB(unsigned int value){
    1cc0:	defffd04 	addi	sp,sp,-12
    1cc4:	df000215 	stw	fp,8(sp)
    1cc8:	df000204 	addi	fp,sp,8
    1ccc:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    1cd0:	e0bffe17 	ldw	r2,-8(fp)
    1cd4:	10938870 	cmpltui	r2,r2,20001
    1cd8:	1000031e 	bne	r2,zero,1ce8 <PWM_writeOCRB+0x28>
		return -1;
    1cdc:	00bfffc4 	movi	r2,-1
    1ce0:	e0bfff15 	stw	r2,-4(fp)
    1ce4:	00000506 	br	1cfc <PWM_writeOCRB+0x3c>
	}
	*OCRB = value;
    1ce8:	00a02034 	movhi	r2,32896
    1cec:	10880a84 	addi	r2,r2,8234
    1cf0:	e0fffe17 	ldw	r3,-8(fp)
    1cf4:	10c0000d 	sth	r3,0(r2)
	return 0;
    1cf8:	e03fff15 	stw	zero,-4(fp)
    1cfc:	e0bfff17 	ldw	r2,-4(fp)
}
    1d00:	e037883a 	mov	sp,fp
    1d04:	df000017 	ldw	fp,0(sp)
    1d08:	dec00104 	addi	sp,sp,4
    1d0c:	f800283a 	ret

00001d10 <PWM_readOCRA>:

/**
 * Reads from the OCRA register in counts.
 * @return count value.
 */
int PWM_readOCRA(){
    1d10:	deffff04 	addi	sp,sp,-4
    1d14:	df000015 	stw	fp,0(sp)
    1d18:	d839883a 	mov	fp,sp
	return *OCRA;
    1d1c:	00a02034 	movhi	r2,32896
    1d20:	10880a04 	addi	r2,r2,8232
    1d24:	1080000b 	ldhu	r2,0(r2)
    1d28:	10bfffcc 	andi	r2,r2,65535
}
    1d2c:	e037883a 	mov	sp,fp
    1d30:	df000017 	ldw	fp,0(sp)
    1d34:	dec00104 	addi	sp,sp,4
    1d38:	f800283a 	ret

00001d3c <PWM_readOCRB>:

/**
 * Reads from the OCRB register in counts.
 * @return count value.
 */
int PWM_readOCRB(){
    1d3c:	deffff04 	addi	sp,sp,-4
    1d40:	df000015 	stw	fp,0(sp)
    1d44:	d839883a 	mov	fp,sp
	return *OCRB;
    1d48:	00a02034 	movhi	r2,32896
    1d4c:	10880a84 	addi	r2,r2,8234
    1d50:	1080000b 	ldhu	r2,0(r2)
    1d54:	10bfffcc 	andi	r2,r2,65535
}
    1d58:	e037883a 	mov	sp,fp
    1d5c:	df000017 	ldw	fp,0(sp)
    1d60:	dec00104 	addi	sp,sp,4
    1d64:	f800283a 	ret

00001d68 <pushbutton_read>:
 * Reads the raw data from the pushbutton. Note that the pushbutton logic is
 * inverted.
 * @param selectedButton number for the correct pushbutton. 1 or 2
 * @return  masked value returning value for register
 */
uint8_t pushbutton_read(uint8_t selectedButton){
    1d68:	defffe04 	addi	sp,sp,-8
    1d6c:	df000115 	stw	fp,4(sp)
    1d70:	df000104 	addi	fp,sp,4
    1d74:	e13fff05 	stb	r4,-4(fp)
	return (PUSHBUTTON -> DATA) & selectedButton;
    1d78:	00a02034 	movhi	r2,32896
    1d7c:	10883404 	addi	r2,r2,8400
    1d80:	10800017 	ldw	r2,0(r2)
    1d84:	1007883a 	mov	r3,r2
    1d88:	e0bfff03 	ldbu	r2,-4(fp)
    1d8c:	1884703a 	and	r2,r3,r2
    1d90:	10803fcc 	andi	r2,r2,255
}
    1d94:	e037883a 	mov	sp,fp
    1d98:	df000017 	ldw	fp,0(sp)
    1d9c:	dec00104 	addi	sp,sp,4
    1da0:	f800283a 	ret

00001da4 <timer_delay>:
/**
 * Delay for the time passed into the timer as a polling loop.
 * @param timeToDelay nanoseconds to delay
 * @param timer Pointer to TIMER hardware.
 */
void timer_delay(uint32_t timeToDelay, struct TIMER_HARDWARE volatile * timer){
    1da4:	defffb04 	addi	sp,sp,-20
    1da8:	dfc00415 	stw	ra,16(sp)
    1dac:	df000315 	stw	fp,12(sp)
    1db0:	df000304 	addi	fp,sp,12
    1db4:	e13ffe15 	stw	r4,-8(fp)
    1db8:	e17fff15 	stw	r5,-4(fp)

	//Convert from seconds to clock cycles
	timeToDelay = timeToDelay / TIME_PER_CYCLE;
    1dbc:	e13ffe17 	ldw	r4,-8(fp)
    1dc0:	01400504 	movi	r5,20
    1dc4:	00027e00 	call	27e0 <__udivsi3>
    1dc8:	e0bffe15 	stw	r2,-8(fp)

	//Set initial state of the timer needs both since they are 16 bit registers
	(timer -> PERIODL) = timeToDelay;
    1dcc:	e0ffff17 	ldw	r3,-4(fp)
    1dd0:	e0bffe17 	ldw	r2,-8(fp)
    1dd4:	18800215 	stw	r2,8(r3)
	(timer -> PERIODH) = timeToDelay >> 16;
    1dd8:	e0bffe17 	ldw	r2,-8(fp)
    1ddc:	1006d43a 	srli	r3,r2,16
    1de0:	e0bfff17 	ldw	r2,-4(fp)
    1de4:	10c00315 	stw	r3,12(r2)

	// Clear t0 flag to reset timer if it was set before for whatever reason
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    1de8:	e0ffff17 	ldw	r3,-4(fp)
    1dec:	00800044 	movi	r2,1
    1df0:	18800015 	stw	r2,0(r3)

	//Start timer count down by setting start bit
	uint8_t timerStatus = START_TIMER_MASK;
    1df4:	00800104 	movi	r2,4
    1df8:	e0bffd05 	stb	r2,-12(fp)
	(timer -> CTRL) = timerStatus;
    1dfc:	e0fffd03 	ldbu	r3,-12(fp)
    1e00:	e0bfff17 	ldw	r2,-4(fp)
    1e04:	10c00115 	stw	r3,4(r2)

	//Loop while t0 flag is a zero
	while(((timer -> STATUS) & TIMER_STATUS_T0_MASK) == 0)
    1e08:	e0bfff17 	ldw	r2,-4(fp)
    1e0c:	10800017 	ldw	r2,0(r2)
    1e10:	1080004c 	andi	r2,r2,1
    1e14:	1005003a 	cmpeq	r2,r2,zero
    1e18:	103ffb1e 	bne	r2,zero,1e08 <timer_delay+0x64>
		;

	// Clear t0 flag to reset timer
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    1e1c:	e0ffff17 	ldw	r3,-4(fp)
    1e20:	00800044 	movi	r2,1
    1e24:	18800015 	stw	r2,0(r3)
}
    1e28:	e037883a 	mov	sp,fp
    1e2c:	dfc00117 	ldw	ra,4(sp)
    1e30:	df000017 	ldw	fp,0(sp)
    1e34:	dec00204 	addi	sp,sp,8
    1e38:	f800283a 	ret

00001e3c <timer_interrupt_init>:
 * @param isInterruptable 0 is disabling interrupts, 1 is enabling interrupts
 * @param timeToDelay Time to set in timer before interrupt once started.
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_init(uint8_t isInterruptable, uint32_t timeToDelay,
		struct TIMER_HARDWARE volatile * timer){
    1e3c:	defffb04 	addi	sp,sp,-20
    1e40:	dfc00415 	stw	ra,16(sp)
    1e44:	df000315 	stw	fp,12(sp)
    1e48:	df000304 	addi	fp,sp,12
    1e4c:	e17ffe15 	stw	r5,-8(fp)
    1e50:	e1bfff15 	stw	r6,-4(fp)
    1e54:	e13ffd05 	stb	r4,-12(fp)

	//check to see if enabling or disabling interrupts
	if(isInterruptable){
    1e58:	e0bffd03 	ldbu	r2,-12(fp)
    1e5c:	1005003a 	cmpeq	r2,r2,zero
    1e60:	1000251e 	bne	r2,zero,1ef8 <timer_interrupt_init+0xbc>

		// set IRQ0
		if(timer == TIMER_0){
    1e64:	e0ffff17 	ldw	r3,-4(fp)
    1e68:	00a02034 	movhi	r2,32896
    1e6c:	10881004 	addi	r2,r2,8256
    1e70:	1880051e 	bne	r3,r2,1e88 <timer_interrupt_init+0x4c>
			// set interrupt ienable
			asm volatile(
    1e74:	01c00044 	movi	r7,1
    1e78:	000d30fa 	rdctl	r6,ienable
    1e7c:	398eb03a 	or	r7,r7,r6
    1e80:	380170fa 	wrctl	ienable,r7
    1e84:	00000806 	br	1ea8 <timer_interrupt_init+0x6c>
							::
						);

		}
		// set IRQ2
		else if (timer == TIMER_1){
    1e88:	e0ffff17 	ldw	r3,-4(fp)
    1e8c:	00a02034 	movhi	r2,32896
    1e90:	10881804 	addi	r2,r2,8288
    1e94:	1880041e 	bne	r3,r2,1ea8 <timer_interrupt_init+0x6c>
			// set interrupt ienable
			asm volatile(
    1e98:	01c00104 	movi	r7,4
    1e9c:	000d30fa 	rdctl	r6,ienable
    1ea0:	398eb03a 	or	r7,r7,r6
    1ea4:	380170fa 	wrctl	ienable,r7
						);
		}

		//Clear t0 flag to reset timer if it was
		// set before for whatever reason
		(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    1ea8:	e0ffff17 	ldw	r3,-4(fp)
    1eac:	00800044 	movi	r2,1
    1eb0:	18800015 	stw	r2,0(r3)

		//Convert from seconds to clock cycles
		timeToDelay = timeToDelay / TIME_PER_CYCLE;
    1eb4:	e13ffe17 	ldw	r4,-8(fp)
    1eb8:	01400504 	movi	r5,20
    1ebc:	00027e00 	call	27e0 <__udivsi3>
    1ec0:	e0bffe15 	stw	r2,-8(fp)

		//Set initial state of the timer needs both since
		// they are 16 bit registers
		(timer -> PERIODL) = timeToDelay;
    1ec4:	e0ffff17 	ldw	r3,-4(fp)
    1ec8:	e0bffe17 	ldw	r2,-8(fp)
    1ecc:	18800215 	stw	r2,8(r3)
		(timer -> PERIODH) = timeToDelay >> 16;
    1ed0:	e0bffe17 	ldw	r2,-8(fp)
    1ed4:	1006d43a 	srli	r3,r2,16
    1ed8:	e0bfff17 	ldw	r2,-4(fp)
    1edc:	10c00315 	stw	r3,12(r2)

		// set interrupt on control register
		(timer -> CTRL) = (timer -> CTRL) | (INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    1ee0:	e0bfff17 	ldw	r2,-4(fp)
    1ee4:	10800117 	ldw	r2,4(r2)
    1ee8:	10c000d4 	ori	r3,r2,3
    1eec:	e0bfff17 	ldw	r2,-4(fp)
    1ef0:	10c00115 	stw	r3,4(r2)
    1ef4:	00001506 	br	1f4c <timer_interrupt_init+0x110>

	} else {
		// set IRQ to off
		if(timer == TIMER_0){
    1ef8:	e0ffff17 	ldw	r3,-4(fp)
    1efc:	00a02034 	movhi	r2,32896
    1f00:	10881004 	addi	r2,r2,8256
    1f04:	1880051e 	bne	r3,r2,1f1c <timer_interrupt_init+0xe0>
			asm volatile(
    1f08:	01ffff84 	movi	r7,-2
    1f0c:	000d30fa 	rdctl	r6,ienable
    1f10:	398e703a 	and	r7,r7,r6
    1f14:	380170fa 	wrctl	ienable,r7
    1f18:	00000806 	br	1f3c <timer_interrupt_init+0x100>
							"rdctl	r6, ienable\n\t"	// combine previous
							"and	r7, r7, r6\n\t"     // ienable and irq0
							"wrctl	ienable, r7"
							::
						);
		}else if(timer == TIMER_1){
    1f1c:	e0ffff17 	ldw	r3,-4(fp)
    1f20:	00a02034 	movhi	r2,32896
    1f24:	10881804 	addi	r2,r2,8288
    1f28:	1880041e 	bne	r3,r2,1f3c <timer_interrupt_init+0x100>
			asm volatile(
    1f2c:	01fffec4 	movi	r7,-5
    1f30:	000d30fa 	rdctl	r6,ienable
    1f34:	398e703a 	and	r7,r7,r6
    1f38:	380170fa 	wrctl	ienable,r7
							::
						);
		}

		// disable interrupt
		(timer -> CTRL) = (timer -> CTRL) & !(INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    1f3c:	e0bfff17 	ldw	r2,-4(fp)
    1f40:	10800117 	ldw	r2,4(r2)
    1f44:	e0bfff17 	ldw	r2,-4(fp)
    1f48:	10000115 	stw	zero,4(r2)
	}
}
    1f4c:	e037883a 	mov	sp,fp
    1f50:	dfc00117 	ldw	ra,4(sp)
    1f54:	df000017 	ldw	fp,0(sp)
    1f58:	dec00204 	addi	sp,sp,8
    1f5c:	f800283a 	ret

00001f60 <timer_interrupt_start_stop>:
 * Sets the timer to be started or stopped for interrupt use.
 * @param isStart boolean value whether to start of stop timer
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_start_stop(uint8_t isStart,
		struct TIMER_HARDWARE volatile * timer){
    1f60:	defffd04 	addi	sp,sp,-12
    1f64:	df000215 	stw	fp,8(sp)
    1f68:	df000204 	addi	fp,sp,8
    1f6c:	e17fff15 	stw	r5,-4(fp)
    1f70:	e13ffe05 	stb	r4,-8(fp)
	//Start the timer
	if(isStart){
    1f74:	e0bffe03 	ldbu	r2,-8(fp)
    1f78:	1005003a 	cmpeq	r2,r2,zero
    1f7c:	1000061e 	bne	r2,zero,1f98 <timer_interrupt_start_stop+0x38>
		(timer -> CTRL) = (timer -> CTRL) | START_TIMER_MASK;
    1f80:	e0bfff17 	ldw	r2,-4(fp)
    1f84:	10800117 	ldw	r2,4(r2)
    1f88:	10c00114 	ori	r3,r2,4
    1f8c:	e0bfff17 	ldw	r2,-4(fp)
    1f90:	10c00115 	stw	r3,4(r2)
    1f94:	00000406 	br	1fa8 <timer_interrupt_start_stop+0x48>
	}
	//Stop the timer
	else {
		(timer -> CTRL) = (timer -> CTRL) & !START_TIMER_MASK;
    1f98:	e0bfff17 	ldw	r2,-4(fp)
    1f9c:	10800117 	ldw	r2,4(r2)
    1fa0:	e0bfff17 	ldw	r2,-4(fp)
    1fa4:	10000115 	stw	zero,4(r2)
	}
}
    1fa8:	e037883a 	mov	sp,fp
    1fac:	df000017 	ldw	fp,0(sp)
    1fb0:	dec00104 	addi	sp,sp,4
    1fb4:	f800283a 	ret

00001fb8 <timer_ISR_TIMER_0>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_0(){
    1fb8:	deffff04 	addi	sp,sp,-4
    1fbc:	df000015 	stw	fp,0(sp)
    1fc0:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_0 -> STATUS) = TIMER_STATUS_T0_MASK;
    1fc4:	00e02034 	movhi	r3,32896
    1fc8:	18c81004 	addi	r3,r3,8256
    1fcc:	00800044 	movi	r2,1
    1fd0:	18800015 	stw	r2,0(r3)
}
    1fd4:	e037883a 	mov	sp,fp
    1fd8:	df000017 	ldw	fp,0(sp)
    1fdc:	dec00104 	addi	sp,sp,4
    1fe0:	f800283a 	ret

00001fe4 <timer_ISR_TIMER_1>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_1(){
    1fe4:	deffff04 	addi	sp,sp,-4
    1fe8:	df000015 	stw	fp,0(sp)
    1fec:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_1 -> STATUS) = TIMER_STATUS_T0_MASK;
    1ff0:	00e02034 	movhi	r3,32896
    1ff4:	18c81804 	addi	r3,r3,8288
    1ff8:	00800044 	movi	r2,1
    1ffc:	18800015 	stw	r2,0(r3)
}
    2000:	e037883a 	mov	sp,fp
    2004:	df000017 	ldw	fp,0(sp)
    2008:	dec00104 	addi	sp,sp,4
    200c:	f800283a 	ret

00002010 <uart_init>:
 * Sets UART for no interrupts, sets baud rate to specified
 * @param baudRate the baud to transmit at
 * @param UART pointer to the hardware device to interface with
 * @return -1 if error, 0 otherwise
 */
int uart_init(uint16_t baudRate, struct UART_Hardware volatile * UART){
    2010:	defffa04 	addi	sp,sp,-24
    2014:	df000515 	stw	fp,20(sp)
    2018:	df000504 	addi	fp,sp,20
    201c:	e17ffd15 	stw	r5,-12(fp)
    2020:	e13ffc0d 	sth	r4,-16(fp)

	// select the baud input as hardware signals
	uint8_t baud;
	switch(baudRate){
    2024:	e0bffc0b 	ldhu	r2,-16(fp)
    2028:	e0bfff15 	stw	r2,-4(fp)
    202c:	e0ffff17 	ldw	r3,-4(fp)
    2030:	18825820 	cmpeqi	r2,r3,2400
    2034:	1000291e 	bne	r2,zero,20dc <uart_init+0xcc>
    2038:	e0ffff17 	ldw	r3,-4(fp)
    203c:	18825848 	cmpgei	r2,r3,2401
    2040:	10000a1e 	bne	r2,zero,206c <uart_init+0x5c>
    2044:	e0ffff17 	ldw	r3,-4(fp)
    2048:	18809620 	cmpeqi	r2,r3,600
    204c:	1000291e 	bne	r2,zero,20f4 <uart_init+0xe4>
    2050:	e0ffff17 	ldw	r3,-4(fp)
    2054:	18812c20 	cmpeqi	r2,r3,1200
    2058:	1000231e 	bne	r2,zero,20e8 <uart_init+0xd8>
    205c:	e0ffff17 	ldw	r3,-4(fp)
    2060:	18804b20 	cmpeqi	r2,r3,300
    2064:	1000261e 	bne	r2,zero,2100 <uart_init+0xf0>
    2068:	00002806 	br	210c <uart_init+0xfc>
    206c:	e0ffff17 	ldw	r3,-4(fp)
    2070:	18896020 	cmpeqi	r2,r3,9600
    2074:	1000131e 	bne	r2,zero,20c4 <uart_init+0xb4>
    2078:	e0ffff17 	ldw	r3,-4(fp)
    207c:	18896048 	cmpgei	r2,r3,9601
    2080:	1000041e 	bne	r2,zero,2094 <uart_init+0x84>
    2084:	e0ffff17 	ldw	r3,-4(fp)
    2088:	1884b020 	cmpeqi	r2,r3,4800
    208c:	1000101e 	bne	r2,zero,20d0 <uart_init+0xc0>
    2090:	00001e06 	br	210c <uart_init+0xfc>
    2094:	e0ffff17 	ldw	r3,-4(fp)
    2098:	1892c020 	cmpeqi	r2,r3,19200
    209c:	1000061e 	bne	r2,zero,20b8 <uart_init+0xa8>
    20a0:	00a58014 	movui	r2,38400
    20a4:	e0ffff17 	ldw	r3,-4(fp)
    20a8:	18800126 	beq	r3,r2,20b0 <uart_init+0xa0>
    20ac:	00001706 	br	210c <uart_init+0xfc>
		case 38400:
						baud = 0x0;
    20b0:	e03ffb05 	stb	zero,-20(fp)
						break;
    20b4:	00001806 	br	2118 <uart_init+0x108>
		case 19200:
						baud = 0x1;
    20b8:	00800044 	movi	r2,1
    20bc:	e0bffb05 	stb	r2,-20(fp)
						break;
    20c0:	00001506 	br	2118 <uart_init+0x108>
		case 9600:
						baud = 0x2;
    20c4:	00800084 	movi	r2,2
    20c8:	e0bffb05 	stb	r2,-20(fp)
						break;
    20cc:	00001206 	br	2118 <uart_init+0x108>
		case 4800:
						baud = 0x3;
    20d0:	008000c4 	movi	r2,3
    20d4:	e0bffb05 	stb	r2,-20(fp)
						break;
    20d8:	00000f06 	br	2118 <uart_init+0x108>
		case 2400:
						baud = 0x4;
    20dc:	00800104 	movi	r2,4
    20e0:	e0bffb05 	stb	r2,-20(fp)
						break;
    20e4:	00000c06 	br	2118 <uart_init+0x108>
		case 1200:
						baud = 0x5;
    20e8:	00800144 	movi	r2,5
    20ec:	e0bffb05 	stb	r2,-20(fp)
						break;
    20f0:	00000906 	br	2118 <uart_init+0x108>
		case 600:
						baud = 0x6;
    20f4:	00800184 	movi	r2,6
    20f8:	e0bffb05 	stb	r2,-20(fp)
						break;
    20fc:	00000606 	br	2118 <uart_init+0x108>
		case 300:
						baud = 0x7;
    2100:	008001c4 	movi	r2,7
    2104:	e0bffb05 	stb	r2,-20(fp)
						break;
    2108:	00000306 	br	2118 <uart_init+0x108>
		default:
						// there is an error since input is invalid
						return -1;
    210c:	00bfffc4 	movi	r2,-1
    2110:	e0bffe15 	stw	r2,-8(fp)
    2114:	00000406 	br	2128 <uart_init+0x118>

	}

	// No interrupts, 38500 Baud
	(UART->UCONTROL) = baud;
    2118:	e0fffd17 	ldw	r3,-12(fp)
    211c:	e0bffb03 	ldbu	r2,-20(fp)
    2120:	18800085 	stb	r2,2(r3)

	return 0;
    2124:	e03ffe15 	stw	zero,-8(fp)
    2128:	e0bffe17 	ldw	r2,-8(fp)
}
    212c:	e037883a 	mov	sp,fp
    2130:	df000017 	ldw	fp,0(sp)
    2134:	dec00104 	addi	sp,sp,4
    2138:	f800283a 	ret

0000213c <uart_putch>:
 * stuck in a loop, for polling, until the transmit register is ready for next
 * byte.
 * @param x character to send out.
 * @param UART Hardware register pointer
 */
void uart_putch(char x, struct UART_Hardware volatile * UART){
    213c:	defffd04 	addi	sp,sp,-12
    2140:	df000215 	stw	fp,8(sp)
    2144:	df000204 	addi	fp,sp,8
    2148:	e17fff15 	stw	r5,-4(fp)
    214c:	e13ffe05 	stb	r4,-8(fp)

	// Poll till char is received
	while(((UART -> USTATUS) & TDRE) == 0);
    2150:	e0bfff17 	ldw	r2,-4(fp)
    2154:	10800043 	ldbu	r2,1(r2)
    2158:	10803fcc 	andi	r2,r2,255
    215c:	1080201c 	xori	r2,r2,128
    2160:	10bfe004 	addi	r2,r2,-128
    2164:	1004403a 	cmpge	r2,r2,zero
    2168:	103ff91e 	bne	r2,zero,2150 <uart_putch+0x14>

	// Write the character
	(UART -> UDR) = x;
    216c:	e0ffff17 	ldw	r3,-4(fp)
    2170:	e0bffe03 	ldbu	r2,-8(fp)
    2174:	18800005 	stb	r2,0(r3)
}
    2178:	e037883a 	mov	sp,fp
    217c:	df000017 	ldw	fp,0(sp)
    2180:	dec00104 	addi	sp,sp,4
    2184:	f800283a 	ret

00002188 <uart_getch>:
 * Gets a character that was received from the UART. Caution: WIll be stuck in
 * a loop, due to polling, until a character is received.
 * @param UART Hardware register pointer
 * @return character received by the UART in ASCII encoding.
 */
char uart_getch(struct UART_Hardware volatile * UART){
    2188:	defffd04 	addi	sp,sp,-12
    218c:	df000215 	stw	fp,8(sp)
    2190:	df000204 	addi	fp,sp,8
    2194:	e13fff15 	stw	r4,-4(fp)

	// Temporary memory
	char x;

	//Wait till transmitter ready
	while(((UART -> USTATUS) & RDRF) == 0);
    2198:	e0bfff17 	ldw	r2,-4(fp)
    219c:	10800043 	ldbu	r2,1(r2)
    21a0:	10803fcc 	andi	r2,r2,255
    21a4:	1080100c 	andi	r2,r2,64
    21a8:	1005003a 	cmpeq	r2,r2,zero
    21ac:	103ffa1e 	bne	r2,zero,2198 <uart_getch+0x10>

	// Read the character
	x = (UART -> UDR);
    21b0:	e0bfff17 	ldw	r2,-4(fp)
    21b4:	10800003 	ldbu	r2,0(r2)
    21b8:	e0bffe05 	stb	r2,-8(fp)
	return x;
    21bc:	e0bffe07 	ldb	r2,-8(fp)
}
    21c0:	e037883a 	mov	sp,fp
    21c4:	df000017 	ldw	fp,0(sp)
    21c8:	dec00104 	addi	sp,sp,4
    21cc:	f800283a 	ret

000021d0 <uart_printStr>:
/**
 * Print string to UART device.
 * @param str passes a string through the UART
 * @param UART Hardware register pointer
 */
void uart_printStr(char* str,struct UART_Hardware volatile * UART){
    21d0:	defffc04 	addi	sp,sp,-16
    21d4:	dfc00315 	stw	ra,12(sp)
    21d8:	df000215 	stw	fp,8(sp)
    21dc:	df000204 	addi	fp,sp,8
    21e0:	e13ffe15 	stw	r4,-8(fp)
    21e4:	e17fff15 	stw	r5,-4(fp)
	if(str != NULL){
    21e8:	e0bffe17 	ldw	r2,-8(fp)
    21ec:	1004c03a 	cmpne	r2,r2,zero
    21f0:	1000121e 	bne	r2,zero,223c <uart_printStr+0x6c>
		return; //error NULL pointer
	}

	while(*str){
    21f4:	00000a06 	br	2220 <uart_printStr+0x50>
		uart_putch(*str,UART);
    21f8:	e0bffe17 	ldw	r2,-8(fp)
    21fc:	10800003 	ldbu	r2,0(r2)
    2200:	11003fcc 	andi	r4,r2,255
    2204:	2100201c 	xori	r4,r4,128
    2208:	213fe004 	addi	r4,r4,-128
    220c:	e17fff17 	ldw	r5,-4(fp)
    2210:	000213c0 	call	213c <uart_putch>
		str++;
    2214:	e0bffe17 	ldw	r2,-8(fp)
    2218:	10800044 	addi	r2,r2,1
    221c:	e0bffe15 	stw	r2,-8(fp)
void uart_printStr(char* str,struct UART_Hardware volatile * UART){
	if(str != NULL){
		return; //error NULL pointer
	}

	while(*str){
    2220:	e0bffe17 	ldw	r2,-8(fp)
    2224:	10800003 	ldbu	r2,0(r2)
    2228:	10803fcc 	andi	r2,r2,255
    222c:	1080201c 	xori	r2,r2,128
    2230:	10bfe004 	addi	r2,r2,-128
    2234:	1004c03a 	cmpne	r2,r2,zero
    2238:	103fef1e 	bne	r2,zero,21f8 <uart_printStr+0x28>
		uart_putch(*str,UART);
		str++;
	}
}
    223c:	e037883a 	mov	sp,fp
    2240:	dfc00117 	ldw	ra,4(sp)
    2244:	df000017 	ldw	fp,0(sp)
    2248:	dec00204 	addi	sp,sp,8
    224c:	f800283a 	ret

00002250 <uart_readStr>:
 *        function until either a new line character is
 *        received or length is reached.
 * @param length size of the buffer.
 * @param UART Hardware register pointer
 */
void uart_readStr(char* inputStr, unsigned int length,struct UART_Hardware volatile * UART){
    2250:	defff904 	addi	sp,sp,-28
    2254:	dfc00615 	stw	ra,24(sp)
    2258:	df000515 	stw	fp,20(sp)
    225c:	df000504 	addi	fp,sp,20
    2260:	e13ffd15 	stw	r4,-12(fp)
    2264:	e17ffe15 	stw	r5,-8(fp)
    2268:	e1bfff15 	stw	r6,-4(fp)
	unsigned int count;
	char c;
	while((c=uart_getch(UART)) != '\n' || count < length-1){
    226c:	00000906 	br	2294 <uart_readStr+0x44>
		count++;
    2270:	e0bffc17 	ldw	r2,-16(fp)
    2274:	10800044 	addi	r2,r2,1
    2278:	e0bffc15 	stw	r2,-16(fp)
		*inputStr = c;
    227c:	e0fffd17 	ldw	r3,-12(fp)
    2280:	e0bffb03 	ldbu	r2,-20(fp)
    2284:	18800005 	stb	r2,0(r3)
		inputStr++;
    2288:	e0bffd17 	ldw	r2,-12(fp)
    228c:	10800044 	addi	r2,r2,1
    2290:	e0bffd15 	stw	r2,-12(fp)
 * @param UART Hardware register pointer
 */
void uart_readStr(char* inputStr, unsigned int length,struct UART_Hardware volatile * UART){
	unsigned int count;
	char c;
	while((c=uart_getch(UART)) != '\n' || count < length-1){
    2294:	e13fff17 	ldw	r4,-4(fp)
    2298:	00021880 	call	2188 <uart_getch>
    229c:	e0bffb05 	stb	r2,-20(fp)
    22a0:	e0bffb07 	ldb	r2,-20(fp)
    22a4:	10800298 	cmpnei	r2,r2,10
    22a8:	103ff11e 	bne	r2,zero,2270 <uart_readStr+0x20>
    22ac:	e0bffe17 	ldw	r2,-8(fp)
    22b0:	10ffffc4 	addi	r3,r2,-1
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	10ffed36 	bltu	r2,r3,2270 <uart_readStr+0x20>
		count++;
		*inputStr = c;
		inputStr++;
	}
	*inputStr = '\0';
    22bc:	e0bffd17 	ldw	r2,-12(fp)
    22c0:	10000005 	stb	zero,0(r2)
}
    22c4:	e037883a 	mov	sp,fp
    22c8:	dfc00117 	ldw	ra,4(sp)
    22cc:	df000017 	ldw	fp,0(sp)
    22d0:	dec00204 	addi	sp,sp,8
    22d4:	f800283a 	ret

000022d8 <vga_clearDisplay>:
//=============================================================================

/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
    22d8:	defffe04 	addi	sp,sp,-8
    22dc:	df000115 	stw	fp,4(sp)
    22e0:	df000104 	addi	fp,sp,4
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    22e4:	e03fff45 	stb	zero,-3(fp)
    22e8:	00001306 	br	2338 <vga_clearDisplay+0x60>
		for(col=0;col<VGA_COL_MAX;col++){
    22ec:	e03fff05 	stb	zero,-4(fp)
    22f0:	00000b06 	br	2320 <vga_clearDisplay+0x48>
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
    22f4:	e0bfff43 	ldbu	r2,-3(fp)
    22f8:	100491fa 	slli	r2,r2,7
    22fc:	1007883a 	mov	r3,r2
    2300:	e0bfff03 	ldbu	r2,-4(fp)
    2304:	1887883a 	add	r3,r3,r2
    2308:	00a02034 	movhi	r2,32896
    230c:	1885883a 	add	r2,r3,r2
    2310:	10000005 	stb	zero,0(r2)
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
		for(col=0;col<VGA_COL_MAX;col++){
    2314:	e0bfff03 	ldbu	r2,-4(fp)
    2318:	10800044 	addi	r2,r2,1
    231c:	e0bfff05 	stb	r2,-4(fp)
    2320:	e0bfff03 	ldbu	r2,-4(fp)
    2324:	10801430 	cmpltui	r2,r2,80
    2328:	103ff21e 	bne	r2,zero,22f4 <vga_clearDisplay+0x1c>
/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    232c:	e0bfff43 	ldbu	r2,-3(fp)
    2330:	10800044 	addi	r2,r2,1
    2334:	e0bfff45 	stb	r2,-3(fp)
    2338:	e0bfff43 	ldbu	r2,-3(fp)
    233c:	10800f30 	cmpltui	r2,r2,60
    2340:	103fea1e 	bne	r2,zero,22ec <vga_clearDisplay+0x14>
		for(col=0;col<VGA_COL_MAX;col++){
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
		}
	}
}
    2344:	e037883a 	mov	sp,fp
    2348:	df000017 	ldw	fp,0(sp)
    234c:	dec00104 	addi	sp,sp,4
    2350:	f800283a 	ret

00002354 <servo_init>:
//=============================================================================

/**
 * Sets up the PWM to move the servos to center position
 */
void servo_init(){
    2354:	defffe04 	addi	sp,sp,-8
    2358:	dfc00115 	stw	ra,4(sp)
    235c:	df000015 	stw	fp,0(sp)
    2360:	d839883a 	mov	fp,sp
	servo_pan(PAN_MAX/2);
    2364:	010015c4 	movi	r4,87
    2368:	00023880 	call	2388 <servo_pan>
	servo_tilt(TILT_MAX/2+5);
    236c:	01001304 	movi	r4,76
    2370:	00023f80 	call	23f8 <servo_tilt>
}
    2374:	e037883a 	mov	sp,fp
    2378:	dfc00117 	ldw	ra,4(sp)
    237c:	df000017 	ldw	fp,0(sp)
    2380:	dec00204 	addi	sp,sp,8
    2384:	f800283a 	ret

00002388 <servo_pan>:
 * of the camera. These values should cause a full range of travel from far
 * left to far right.
 * @param col the x tracking position
 * @return -1 if invalid input, else 0
 */
int servo_pan(int col){
    2388:	defffc04 	addi	sp,sp,-16
    238c:	dfc00315 	stw	ra,12(sp)
    2390:	df000215 	stw	fp,8(sp)
    2394:	df000204 	addi	fp,sp,8
    2398:	e13ffe15 	stw	r4,-8(fp)
	if(col < PAN_MIN || col > PAN_MAX){
    239c:	e0bffe17 	ldw	r2,-8(fp)
    23a0:	1004803a 	cmplt	r2,r2,zero
    23a4:	1000031e 	bne	r2,zero,23b4 <servo_pan+0x2c>
    23a8:	e0bffe17 	ldw	r2,-8(fp)
    23ac:	10802c10 	cmplti	r2,r2,176
    23b0:	1000031e 	bne	r2,zero,23c0 <servo_pan+0x38>
		return -1;
    23b4:	00bfffc4 	movi	r2,-1
    23b8:	e0bfff15 	stw	r2,-4(fp)
    23bc:	00000806 	br	23e0 <servo_pan+0x58>
	}
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(col));
    23c0:	e0bffe17 	ldw	r2,-8(fp)
    23c4:	11001ae4 	muli	r4,r2,107
    23c8:	01400284 	movi	r5,10
    23cc:	00027200 	call	2720 <__divsi3>
    23d0:	10807f84 	addi	r2,r2,510
    23d4:	1009883a 	mov	r4,r2
    23d8:	0001c700 	call	1c70 <PWM_writeOCRA>
	return 0;
    23dc:	e03fff15 	stw	zero,-4(fp)
    23e0:	e0bfff17 	ldw	r2,-4(fp)
}
    23e4:	e037883a 	mov	sp,fp
    23e8:	dfc00117 	ldw	ra,4(sp)
    23ec:	df000017 	ldw	fp,0(sp)
    23f0:	dec00204 	addi	sp,sp,8
    23f4:	f800283a 	ret

000023f8 <servo_tilt>:
 * the camera. These values should cause a full range of travel from top to
 * bottom.
 * @param row the y tracking position
 * @return -1 if invalid input, else 0
 */
int servo_tilt(int row){
    23f8:	defffc04 	addi	sp,sp,-16
    23fc:	dfc00315 	stw	ra,12(sp)
    2400:	df000215 	stw	fp,8(sp)
    2404:	df000204 	addi	fp,sp,8
    2408:	e13ffe15 	stw	r4,-8(fp)
	if(row < TILT_MIN || row > TILT_MAX){
    240c:	e0bffe17 	ldw	r2,-8(fp)
    2410:	1004803a 	cmplt	r2,r2,zero
    2414:	1000031e 	bne	r2,zero,2424 <servo_tilt+0x2c>
    2418:	e0bffe17 	ldw	r2,-8(fp)
    241c:	10802410 	cmplti	r2,r2,144
    2420:	1000031e 	bne	r2,zero,2430 <servo_tilt+0x38>
		return -1;
    2424:	00bfffc4 	movi	r2,-1
    2428:	e0bfff15 	stw	r2,-4(fp)
    242c:	00000806 	br	2450 <servo_tilt+0x58>
	}
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(row));
    2430:	e0bffe17 	ldw	r2,-8(fp)
    2434:	11001164 	muli	r4,r2,69
    2438:	01400284 	movi	r5,10
    243c:	00027200 	call	2720 <__divsi3>
    2440:	1080fdc4 	addi	r2,r2,1015
    2444:	1009883a 	mov	r4,r2
    2448:	0001cc00 	call	1cc0 <PWM_writeOCRB>
	return 0;
    244c:	e03fff15 	stw	zero,-4(fp)
    2450:	e0bfff17 	ldw	r2,-4(fp)
}
    2454:	e037883a 	mov	sp,fp
    2458:	dfc00117 	ldw	ra,4(sp)
    245c:	df000017 	ldw	fp,0(sp)
    2460:	dec00204 	addi	sp,sp,8
    2464:	f800283a 	ret

00002468 <getServoX>:

/**
 * Gets the current pan location
 * @return absolute position of servo.
 */
int getServoX(){
    2468:	defffe04 	addi	sp,sp,-8
    246c:	dfc00115 	stw	ra,4(sp)
    2470:	df000015 	stw	fp,0(sp)
    2474:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_PAN_POS(PWM_readOCRA());
    2478:	0001d100 	call	1d10 <PWM_readOCRA>
    247c:	108002a4 	muli	r2,r2,10
    2480:	113b0504 	addi	r4,r2,-5100
    2484:	01401ac4 	movi	r5,107
    2488:	00027200 	call	2720 <__divsi3>
}
    248c:	e037883a 	mov	sp,fp
    2490:	dfc00117 	ldw	ra,4(sp)
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00204 	addi	sp,sp,8
    249c:	f800283a 	ret

000024a0 <setServoX>:

/**
 * Sets the relative pan location. Will stop at limit of range.
 * @param xpos position to add to current position.
 */
void setServoX(int xpos){
    24a0:	defffa04 	addi	sp,sp,-24
    24a4:	dfc00515 	stw	ra,20(sp)
    24a8:	df000415 	stw	fp,16(sp)
    24ac:	df000404 	addi	fp,sp,16
    24b0:	e13ffd15 	stw	r4,-12(fp)
	xpos = (xpos > PAN_STEP)? PAN_STEP : (xpos < -PAN_STEP)? -PAN_STEP : xpos;
    24b4:	e0bffd17 	ldw	r2,-12(fp)
    24b8:	10800548 	cmpgei	r2,r2,21
    24bc:	1000081e 	bne	r2,zero,24e0 <setServoX+0x40>
    24c0:	e0bffd17 	ldw	r2,-12(fp)
    24c4:	e0bfff15 	stw	r2,-4(fp)
    24c8:	e0ffff17 	ldw	r3,-4(fp)
    24cc:	18bffb08 	cmpgei	r2,r3,-20
    24d0:	1000051e 	bne	r2,zero,24e8 <setServoX+0x48>
    24d4:	00bffb04 	movi	r2,-20
    24d8:	e0bfff15 	stw	r2,-4(fp)
    24dc:	00000206 	br	24e8 <setServoX+0x48>
    24e0:	00c00504 	movi	r3,20
    24e4:	e0ffff15 	stw	r3,-4(fp)
    24e8:	e0bfff17 	ldw	r2,-4(fp)
    24ec:	e0bffd15 	stw	r2,-12(fp)
	int pos = getServoX() + xpos;
    24f0:	00024680 	call	2468 <getServoX>
    24f4:	1007883a 	mov	r3,r2
    24f8:	e0bffd17 	ldw	r2,-12(fp)
    24fc:	1885883a 	add	r2,r3,r2
    2500:	e0bffc15 	stw	r2,-16(fp)
	pos = (pos > PAN_MAX) ? (PAN_MAX) : ((pos < PAN_MIN) ? PAN_MIN : pos);
    2504:	e0bffc17 	ldw	r2,-16(fp)
    2508:	10802c08 	cmpgei	r2,r2,176
    250c:	1000071e 	bne	r2,zero,252c <setServoX+0x8c>
    2510:	e0fffc17 	ldw	r3,-16(fp)
    2514:	e0fffe15 	stw	r3,-8(fp)
    2518:	e0fffe17 	ldw	r3,-8(fp)
    251c:	1804403a 	cmpge	r2,r3,zero
    2520:	1000041e 	bne	r2,zero,2534 <setServoX+0x94>
    2524:	e03ffe15 	stw	zero,-8(fp)
    2528:	00000206 	br	2534 <setServoX+0x94>
    252c:	00802bc4 	movi	r2,175
    2530:	e0bffe15 	stw	r2,-8(fp)
    2534:	e0fffe17 	ldw	r3,-8(fp)
    2538:	e0fffc15 	stw	r3,-16(fp)
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(pos));
    253c:	e0bffc17 	ldw	r2,-16(fp)
    2540:	11001ae4 	muli	r4,r2,107
    2544:	01400284 	movi	r5,10
    2548:	00027200 	call	2720 <__divsi3>
    254c:	10807f84 	addi	r2,r2,510
    2550:	1009883a 	mov	r4,r2
    2554:	0001c700 	call	1c70 <PWM_writeOCRA>
}
    2558:	e037883a 	mov	sp,fp
    255c:	dfc00117 	ldw	ra,4(sp)
    2560:	df000017 	ldw	fp,0(sp)
    2564:	dec00204 	addi	sp,sp,8
    2568:	f800283a 	ret

0000256c <getServoY>:

/**
 * Gets the current tilt location.
 * @return absolute position of servo.
 */
int getServoY(){
    256c:	defffe04 	addi	sp,sp,-8
    2570:	dfc00115 	stw	ra,4(sp)
    2574:	df000015 	stw	fp,0(sp)
    2578:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_TILT_POS(PWM_readOCRB());
    257c:	0001d3c0 	call	1d3c <PWM_readOCRB>
    2580:	108002a4 	muli	r2,r2,10
    2584:	11361684 	addi	r4,r2,-10150
    2588:	01401144 	movi	r5,69
    258c:	00027200 	call	2720 <__divsi3>
}
    2590:	e037883a 	mov	sp,fp
    2594:	dfc00117 	ldw	ra,4(sp)
    2598:	df000017 	ldw	fp,0(sp)
    259c:	dec00204 	addi	sp,sp,8
    25a0:	f800283a 	ret

000025a4 <setServoY>:

/**
 * Sets the relative tilt location. Will stop at limit of range.
 * @param ypos position to add to current position.
 */
void setServoY(int ypos){
    25a4:	defffa04 	addi	sp,sp,-24
    25a8:	dfc00515 	stw	ra,20(sp)
    25ac:	df000415 	stw	fp,16(sp)
    25b0:	df000404 	addi	fp,sp,16
    25b4:	e13ffd15 	stw	r4,-12(fp)
	ypos = (ypos > TILT_STEP)? TILT_STEP : (ypos < -TILT_STEP)? -TILT_STEP : ypos;
    25b8:	e0bffd17 	ldw	r2,-12(fp)
    25bc:	10800548 	cmpgei	r2,r2,21
    25c0:	1000081e 	bne	r2,zero,25e4 <setServoY+0x40>
    25c4:	e0bffd17 	ldw	r2,-12(fp)
    25c8:	e0bfff15 	stw	r2,-4(fp)
    25cc:	e0ffff17 	ldw	r3,-4(fp)
    25d0:	18bffb08 	cmpgei	r2,r3,-20
    25d4:	1000051e 	bne	r2,zero,25ec <setServoY+0x48>
    25d8:	00bffb04 	movi	r2,-20
    25dc:	e0bfff15 	stw	r2,-4(fp)
    25e0:	00000206 	br	25ec <setServoY+0x48>
    25e4:	00c00504 	movi	r3,20
    25e8:	e0ffff15 	stw	r3,-4(fp)
    25ec:	e0bfff17 	ldw	r2,-4(fp)
    25f0:	e0bffd15 	stw	r2,-12(fp)
	int pos = getServoY() + ypos;
    25f4:	000256c0 	call	256c <getServoY>
    25f8:	1007883a 	mov	r3,r2
    25fc:	e0bffd17 	ldw	r2,-12(fp)
    2600:	1885883a 	add	r2,r3,r2
    2604:	e0bffc15 	stw	r2,-16(fp)
	pos = (pos > TILT_MAX) ? (TILT_MAX) : ((pos < TILT_MIN) ? TILT_MIN : pos);
    2608:	e0bffc17 	ldw	r2,-16(fp)
    260c:	10802408 	cmpgei	r2,r2,144
    2610:	1000071e 	bne	r2,zero,2630 <setServoY+0x8c>
    2614:	e0fffc17 	ldw	r3,-16(fp)
    2618:	e0fffe15 	stw	r3,-8(fp)
    261c:	e0fffe17 	ldw	r3,-8(fp)
    2620:	1804403a 	cmpge	r2,r3,zero
    2624:	1000041e 	bne	r2,zero,2638 <setServoY+0x94>
    2628:	e03ffe15 	stw	zero,-8(fp)
    262c:	00000206 	br	2638 <setServoY+0x94>
    2630:	008023c4 	movi	r2,143
    2634:	e0bffe15 	stw	r2,-8(fp)
    2638:	e0fffe17 	ldw	r3,-8(fp)
    263c:	e0fffc15 	stw	r3,-16(fp)
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(pos));
    2640:	e0bffc17 	ldw	r2,-16(fp)
    2644:	11001164 	muli	r4,r2,69
    2648:	01400284 	movi	r5,10
    264c:	00027200 	call	2720 <__divsi3>
    2650:	1080fdc4 	addi	r2,r2,1015
    2654:	1009883a 	mov	r4,r2
    2658:	0001cc00 	call	1cc0 <PWM_writeOCRB>
}
    265c:	e037883a 	mov	sp,fp
    2660:	dfc00117 	ldw	ra,4(sp)
    2664:	df000017 	ldw	fp,0(sp)
    2668:	dec00204 	addi	sp,sp,8
    266c:	f800283a 	ret

00002670 <main>:
/**
 * main will run the serial command line input to get information from user
 * and enact the commands.
 * @return does not actually return (infinite loop)
 */
int main(){
    2670:	defffe04 	addi	sp,sp,-8
    2674:	dfc00115 	stw	ra,4(sp)
    2678:	df000015 	stw	fp,0(sp)
    267c:	d839883a 	mov	fp,sp
	//initialization
	lcd_init();
    2680:	00019200 	call	1920 <lcd_init>
	servo_init();
    2684:	00023540 	call	2354 <servo_init>
	cam_init();
    2688:	00002000 	call	200 <cam_init>
	cmd_init();
    268c:	00007100 	call	710 <cmd_init>

	//run input loop from serial input to command the controller
	lcd_printString("Starting...");
    2690:	01000074 	movhi	r4,1
    2694:	21123c04 	addi	r4,r4,18672
    2698:	00019a40 	call	19a4 <lcd_printString>
	while(1){
		cmd_getCommand();
    269c:	00007380 	call	738 <cmd_getCommand>
	}
    26a0:	003ffe06 	br	269c <main+0x2c>

000026a4 <udivmodsi4>:
    26a4:	29001b2e 	bgeu	r5,r4,2714 <udivmodsi4+0x70>
    26a8:	28001a16 	blt	r5,zero,2714 <udivmodsi4+0x70>
    26ac:	00800044 	movi	r2,1
    26b0:	0007883a 	mov	r3,zero
    26b4:	01c007c4 	movi	r7,31
    26b8:	00000306 	br	26c8 <udivmodsi4+0x24>
    26bc:	19c01326 	beq	r3,r7,270c <udivmodsi4+0x68>
    26c0:	18c00044 	addi	r3,r3,1
    26c4:	28000416 	blt	r5,zero,26d8 <udivmodsi4+0x34>
    26c8:	294b883a 	add	r5,r5,r5
    26cc:	1085883a 	add	r2,r2,r2
    26d0:	293ffa36 	bltu	r5,r4,26bc <udivmodsi4+0x18>
    26d4:	10000d26 	beq	r2,zero,270c <udivmodsi4+0x68>
    26d8:	0007883a 	mov	r3,zero
    26dc:	21400236 	bltu	r4,r5,26e8 <udivmodsi4+0x44>
    26e0:	2149c83a 	sub	r4,r4,r5
    26e4:	1886b03a 	or	r3,r3,r2
    26e8:	1004d07a 	srli	r2,r2,1
    26ec:	280ad07a 	srli	r5,r5,1
    26f0:	103ffa1e 	bne	r2,zero,26dc <udivmodsi4+0x38>
    26f4:	30000226 	beq	r6,zero,2700 <udivmodsi4+0x5c>
    26f8:	2005883a 	mov	r2,r4
    26fc:	f800283a 	ret
    2700:	1809883a 	mov	r4,r3
    2704:	2005883a 	mov	r2,r4
    2708:	f800283a 	ret
    270c:	0007883a 	mov	r3,zero
    2710:	003ff806 	br	26f4 <udivmodsi4+0x50>
    2714:	00800044 	movi	r2,1
    2718:	0007883a 	mov	r3,zero
    271c:	003fef06 	br	26dc <udivmodsi4+0x38>

00002720 <__divsi3>:
    2720:	defffe04 	addi	sp,sp,-8
    2724:	dc000015 	stw	r16,0(sp)
    2728:	dfc00115 	stw	ra,4(sp)
    272c:	0021883a 	mov	r16,zero
    2730:	20000c16 	blt	r4,zero,2764 <__divsi3+0x44>
    2734:	000d883a 	mov	r6,zero
    2738:	28000e16 	blt	r5,zero,2774 <__divsi3+0x54>
    273c:	00026a40 	call	26a4 <udivmodsi4>
    2740:	1007883a 	mov	r3,r2
    2744:	8005003a 	cmpeq	r2,r16,zero
    2748:	1000011e 	bne	r2,zero,2750 <__divsi3+0x30>
    274c:	00c7c83a 	sub	r3,zero,r3
    2750:	1805883a 	mov	r2,r3
    2754:	dfc00117 	ldw	ra,4(sp)
    2758:	dc000017 	ldw	r16,0(sp)
    275c:	dec00204 	addi	sp,sp,8
    2760:	f800283a 	ret
    2764:	0109c83a 	sub	r4,zero,r4
    2768:	04000044 	movi	r16,1
    276c:	000d883a 	mov	r6,zero
    2770:	283ff20e 	bge	r5,zero,273c <__divsi3+0x1c>
    2774:	014bc83a 	sub	r5,zero,r5
    2778:	8021003a 	cmpeq	r16,r16,zero
    277c:	003fef06 	br	273c <__divsi3+0x1c>

00002780 <__modsi3>:
    2780:	deffff04 	addi	sp,sp,-4
    2784:	dfc00015 	stw	ra,0(sp)
    2788:	01800044 	movi	r6,1
    278c:	2807883a 	mov	r3,r5
    2790:	20000416 	blt	r4,zero,27a4 <__modsi3+0x24>
    2794:	28000c16 	blt	r5,zero,27c8 <__modsi3+0x48>
    2798:	dfc00017 	ldw	ra,0(sp)
    279c:	dec00104 	addi	sp,sp,4
    27a0:	00026a41 	jmpi	26a4 <udivmodsi4>
    27a4:	0109c83a 	sub	r4,zero,r4
    27a8:	28000b16 	blt	r5,zero,27d8 <__modsi3+0x58>
    27ac:	180b883a 	mov	r5,r3
    27b0:	01800044 	movi	r6,1
    27b4:	00026a40 	call	26a4 <udivmodsi4>
    27b8:	0085c83a 	sub	r2,zero,r2
    27bc:	dfc00017 	ldw	ra,0(sp)
    27c0:	dec00104 	addi	sp,sp,4
    27c4:	f800283a 	ret
    27c8:	014bc83a 	sub	r5,zero,r5
    27cc:	dfc00017 	ldw	ra,0(sp)
    27d0:	dec00104 	addi	sp,sp,4
    27d4:	00026a41 	jmpi	26a4 <udivmodsi4>
    27d8:	0147c83a 	sub	r3,zero,r5
    27dc:	003ff306 	br	27ac <__modsi3+0x2c>

000027e0 <__udivsi3>:
    27e0:	000d883a 	mov	r6,zero
    27e4:	00026a41 	jmpi	26a4 <udivmodsi4>

000027e8 <__umodsi3>:
    27e8:	01800044 	movi	r6,1
    27ec:	00026a41 	jmpi	26a4 <udivmodsi4>

000027f0 <_fgets_r>:
    27f0:	defff804 	addi	sp,sp,-32
    27f4:	00800044 	movi	r2,1
    27f8:	dd800615 	stw	r22,24(sp)
    27fc:	dd400515 	stw	r21,20(sp)
    2800:	dc400115 	stw	r17,4(sp)
    2804:	dc000015 	stw	r16,0(sp)
    2808:	dfc00715 	stw	ra,28(sp)
    280c:	dd000415 	stw	r20,16(sp)
    2810:	dcc00315 	stw	r19,12(sp)
    2814:	dc800215 	stw	r18,8(sp)
    2818:	3021883a 	mov	r16,r6
    281c:	282d883a 	mov	r22,r5
    2820:	3823883a 	mov	r17,r7
    2824:	202b883a 	mov	r21,r4
    2828:	1180410e 	bge	r2,r6,2930 <_fgets_r+0x140>
    282c:	20000226 	beq	r4,zero,2838 <_fgets_r+0x48>
    2830:	20800e17 	ldw	r2,56(r4)
    2834:	10002e26 	beq	r2,zero,28f0 <_fgets_r+0x100>
    2838:	853fffc4 	addi	r20,r16,-1
    283c:	b027883a 	mov	r19,r22
    2840:	88800117 	ldw	r2,4(r17)
    2844:	a809883a 	mov	r4,r21
    2848:	880b883a 	mov	r5,r17
    284c:	100d883a 	mov	r6,r2
    2850:	1000031e 	bne	r2,zero,2860 <_fgets_r+0x70>
    2854:	00038480 	call	3848 <__srefill_r>
    2858:	1000341e 	bne	r2,zero,292c <_fgets_r+0x13c>
    285c:	89800117 	ldw	r6,4(r17)
    2860:	01400284 	movi	r5,10
    2864:	3021883a 	mov	r16,r6
    2868:	8c800017 	ldw	r18,0(r17)
    286c:	a180012e 	bgeu	r20,r6,2874 <_fgets_r+0x84>
    2870:	a021883a 	mov	r16,r20
    2874:	9009883a 	mov	r4,r18
    2878:	800d883a 	mov	r6,r16
    287c:	00034dc0 	call	34dc <memchr>
    2880:	1007883a 	mov	r3,r2
    2884:	900b883a 	mov	r5,r18
    2888:	9809883a 	mov	r4,r19
    288c:	800d883a 	mov	r6,r16
    2890:	1000191e 	bne	r2,zero,28f8 <_fgets_r+0x108>
    2894:	88800117 	ldw	r2,4(r17)
    2898:	88c00017 	ldw	r3,0(r17)
    289c:	9c27883a 	add	r19,r19,r16
    28a0:	1405c83a 	sub	r2,r2,r16
    28a4:	1c07883a 	add	r3,r3,r16
    28a8:	88c00015 	stw	r3,0(r17)
    28ac:	88800115 	stw	r2,4(r17)
    28b0:	00035c00 	call	35c0 <memcpy>
    28b4:	a407c83a 	sub	r3,r20,r16
    28b8:	1829883a 	mov	r20,r3
    28bc:	183fe01e 	bne	r3,zero,2840 <_fgets_r+0x50>
    28c0:	98000005 	stb	zero,0(r19)
    28c4:	b005883a 	mov	r2,r22
    28c8:	dfc00717 	ldw	ra,28(sp)
    28cc:	dd800617 	ldw	r22,24(sp)
    28d0:	dd400517 	ldw	r21,20(sp)
    28d4:	dd000417 	ldw	r20,16(sp)
    28d8:	dcc00317 	ldw	r19,12(sp)
    28dc:	dc800217 	ldw	r18,8(sp)
    28e0:	dc400117 	ldw	r17,4(sp)
    28e4:	dc000017 	ldw	r16,0(sp)
    28e8:	dec00804 	addi	sp,sp,32
    28ec:	f800283a 	ret
    28f0:	00029c40 	call	29c4 <__sinit>
    28f4:	003fd006 	br	2838 <_fgets_r+0x48>
    28f8:	88800117 	ldw	r2,4(r17)
    28fc:	18c00044 	addi	r3,r3,1
    2900:	1ca1c83a 	sub	r16,r3,r18
    2904:	1405c83a 	sub	r2,r2,r16
    2908:	800d883a 	mov	r6,r16
    290c:	88c00015 	stw	r3,0(r17)
    2910:	88800115 	stw	r2,4(r17)
    2914:	900b883a 	mov	r5,r18
    2918:	9809883a 	mov	r4,r19
    291c:	00035c00 	call	35c0 <memcpy>
    2920:	9c21883a 	add	r16,r19,r16
    2924:	80000005 	stb	zero,0(r16)
    2928:	003fe606 	br	28c4 <_fgets_r+0xd4>
    292c:	9dbfe41e 	bne	r19,r22,28c0 <_fgets_r+0xd0>
    2930:	002d883a 	mov	r22,zero
    2934:	003fe306 	br	28c4 <_fgets_r+0xd4>

00002938 <fgets>:
    2938:	00800074 	movhi	r2,1
    293c:	109a7d04 	addi	r2,r2,27124
    2940:	2013883a 	mov	r9,r4
    2944:	11000017 	ldw	r4,0(r2)
    2948:	2805883a 	mov	r2,r5
    294c:	300f883a 	mov	r7,r6
    2950:	480b883a 	mov	r5,r9
    2954:	100d883a 	mov	r6,r2
    2958:	00027f01 	jmpi	27f0 <_fgets_r>

0000295c <std>:
    295c:	00800034 	movhi	r2,0
    2960:	108f2004 	addi	r2,r2,15488
    2964:	20800b15 	stw	r2,44(r4)
    2968:	00800034 	movhi	r2,0
    296c:	108f5b04 	addi	r2,r2,15724
    2970:	20800815 	stw	r2,32(r4)
    2974:	00c00034 	movhi	r3,0
    2978:	18cf3c04 	addi	r3,r3,15600
    297c:	00800034 	movhi	r2,0
    2980:	108f2204 	addi	r2,r2,15496
    2984:	2140030d 	sth	r5,12(r4)
    2988:	2180038d 	sth	r6,14(r4)
    298c:	20c00915 	stw	r3,36(r4)
    2990:	20800a15 	stw	r2,40(r4)
    2994:	20000015 	stw	zero,0(r4)
    2998:	20000115 	stw	zero,4(r4)
    299c:	20000215 	stw	zero,8(r4)
    29a0:	20000415 	stw	zero,16(r4)
    29a4:	20000515 	stw	zero,20(r4)
    29a8:	20000615 	stw	zero,24(r4)
    29ac:	21000715 	stw	r4,28(r4)
    29b0:	f800283a 	ret

000029b4 <__sfp_lock_acquire>:
    29b4:	f800283a 	ret

000029b8 <__sfp_lock_release>:
    29b8:	f800283a 	ret

000029bc <__sinit_lock_acquire>:
    29bc:	f800283a 	ret

000029c0 <__sinit_lock_release>:
    29c0:	f800283a 	ret

000029c4 <__sinit>:
    29c4:	20800e17 	ldw	r2,56(r4)
    29c8:	defffd04 	addi	sp,sp,-12
    29cc:	dc400115 	stw	r17,4(sp)
    29d0:	dc000015 	stw	r16,0(sp)
    29d4:	dfc00215 	stw	ra,8(sp)
    29d8:	04400044 	movi	r17,1
    29dc:	01400104 	movi	r5,4
    29e0:	000d883a 	mov	r6,zero
    29e4:	2021883a 	mov	r16,r4
    29e8:	2200bb04 	addi	r8,r4,748
    29ec:	200f883a 	mov	r7,r4
    29f0:	10000526 	beq	r2,zero,2a08 <__sinit+0x44>
    29f4:	dfc00217 	ldw	ra,8(sp)
    29f8:	dc400117 	ldw	r17,4(sp)
    29fc:	dc000017 	ldw	r16,0(sp)
    2a00:	dec00304 	addi	sp,sp,12
    2a04:	f800283a 	ret
    2a08:	21000117 	ldw	r4,4(r4)
    2a0c:	00800034 	movhi	r2,0
    2a10:	108aaa04 	addi	r2,r2,10920
    2a14:	00c000c4 	movi	r3,3
    2a18:	80800f15 	stw	r2,60(r16)
    2a1c:	80c0b915 	stw	r3,740(r16)
    2a20:	8200ba15 	stw	r8,744(r16)
    2a24:	84400e15 	stw	r17,56(r16)
    2a28:	8000b815 	stw	zero,736(r16)
    2a2c:	000295c0 	call	295c <std>
    2a30:	81000217 	ldw	r4,8(r16)
    2a34:	880d883a 	mov	r6,r17
    2a38:	800f883a 	mov	r7,r16
    2a3c:	01400284 	movi	r5,10
    2a40:	000295c0 	call	295c <std>
    2a44:	81000317 	ldw	r4,12(r16)
    2a48:	800f883a 	mov	r7,r16
    2a4c:	01400484 	movi	r5,18
    2a50:	01800084 	movi	r6,2
    2a54:	dfc00217 	ldw	ra,8(sp)
    2a58:	dc400117 	ldw	r17,4(sp)
    2a5c:	dc000017 	ldw	r16,0(sp)
    2a60:	dec00304 	addi	sp,sp,12
    2a64:	000295c1 	jmpi	295c <std>

00002a68 <__fp_lock>:
    2a68:	0005883a 	mov	r2,zero
    2a6c:	f800283a 	ret

00002a70 <__fp_unlock>:
    2a70:	0005883a 	mov	r2,zero
    2a74:	f800283a 	ret

00002a78 <__fp_unlock_all>:
    2a78:	00800074 	movhi	r2,1
    2a7c:	109a7d04 	addi	r2,r2,27124
    2a80:	11000017 	ldw	r4,0(r2)
    2a84:	01400034 	movhi	r5,0
    2a88:	294a9c04 	addi	r5,r5,10864
    2a8c:	0002ce41 	jmpi	2ce4 <_fwalk>

00002a90 <__fp_lock_all>:
    2a90:	00800074 	movhi	r2,1
    2a94:	109a7d04 	addi	r2,r2,27124
    2a98:	11000017 	ldw	r4,0(r2)
    2a9c:	01400034 	movhi	r5,0
    2aa0:	294a9a04 	addi	r5,r5,10856
    2aa4:	0002ce41 	jmpi	2ce4 <_fwalk>

00002aa8 <_cleanup_r>:
    2aa8:	01400074 	movhi	r5,1
    2aac:	29647004 	addi	r5,r5,-28224
    2ab0:	0002ce41 	jmpi	2ce4 <_fwalk>

00002ab4 <_cleanup>:
    2ab4:	00800074 	movhi	r2,1
    2ab8:	109a7e04 	addi	r2,r2,27128
    2abc:	11000017 	ldw	r4,0(r2)
    2ac0:	0002aa81 	jmpi	2aa8 <_cleanup_r>

00002ac4 <__sfmoreglue>:
    2ac4:	defffc04 	addi	sp,sp,-16
    2ac8:	dc400115 	stw	r17,4(sp)
    2acc:	2c401724 	muli	r17,r5,92
    2ad0:	dc800215 	stw	r18,8(sp)
    2ad4:	2825883a 	mov	r18,r5
    2ad8:	89400304 	addi	r5,r17,12
    2adc:	dc000015 	stw	r16,0(sp)
    2ae0:	dfc00315 	stw	ra,12(sp)
    2ae4:	0002d9c0 	call	2d9c <_malloc_r>
    2ae8:	0021883a 	mov	r16,zero
    2aec:	880d883a 	mov	r6,r17
    2af0:	000b883a 	mov	r5,zero
    2af4:	10000626 	beq	r2,zero,2b10 <__sfmoreglue+0x4c>
    2af8:	11000304 	addi	r4,r2,12
    2afc:	14800115 	stw	r18,4(r2)
    2b00:	10000015 	stw	zero,0(r2)
    2b04:	11000215 	stw	r4,8(r2)
    2b08:	1021883a 	mov	r16,r2
    2b0c:	00036600 	call	3660 <memset>
    2b10:	8005883a 	mov	r2,r16
    2b14:	dfc00317 	ldw	ra,12(sp)
    2b18:	dc800217 	ldw	r18,8(sp)
    2b1c:	dc400117 	ldw	r17,4(sp)
    2b20:	dc000017 	ldw	r16,0(sp)
    2b24:	dec00404 	addi	sp,sp,16
    2b28:	f800283a 	ret

00002b2c <__sfp>:
    2b2c:	defffd04 	addi	sp,sp,-12
    2b30:	00800074 	movhi	r2,1
    2b34:	109a7e04 	addi	r2,r2,27128
    2b38:	dc000015 	stw	r16,0(sp)
    2b3c:	14000017 	ldw	r16,0(r2)
    2b40:	dc400115 	stw	r17,4(sp)
    2b44:	dfc00215 	stw	ra,8(sp)
    2b48:	80800e17 	ldw	r2,56(r16)
    2b4c:	2023883a 	mov	r17,r4
    2b50:	10002626 	beq	r2,zero,2bec <__sfp+0xc0>
    2b54:	8400b804 	addi	r16,r16,736
    2b58:	80800117 	ldw	r2,4(r16)
    2b5c:	81000217 	ldw	r4,8(r16)
    2b60:	10ffffc4 	addi	r3,r2,-1
    2b64:	18000916 	blt	r3,zero,2b8c <__sfp+0x60>
    2b68:	2080030f 	ldh	r2,12(r4)
    2b6c:	10000b26 	beq	r2,zero,2b9c <__sfp+0x70>
    2b70:	017fffc4 	movi	r5,-1
    2b74:	00000206 	br	2b80 <__sfp+0x54>
    2b78:	2080030f 	ldh	r2,12(r4)
    2b7c:	10000726 	beq	r2,zero,2b9c <__sfp+0x70>
    2b80:	18ffffc4 	addi	r3,r3,-1
    2b84:	21001704 	addi	r4,r4,92
    2b88:	197ffb1e 	bne	r3,r5,2b78 <__sfp+0x4c>
    2b8c:	80800017 	ldw	r2,0(r16)
    2b90:	10001926 	beq	r2,zero,2bf8 <__sfp+0xcc>
    2b94:	1021883a 	mov	r16,r2
    2b98:	003fef06 	br	2b58 <__sfp+0x2c>
    2b9c:	00bfffc4 	movi	r2,-1
    2ba0:	00c00044 	movi	r3,1
    2ba4:	2080038d 	sth	r2,14(r4)
    2ba8:	20c0030d 	sth	r3,12(r4)
    2bac:	20000015 	stw	zero,0(r4)
    2bb0:	20000215 	stw	zero,8(r4)
    2bb4:	20000115 	stw	zero,4(r4)
    2bb8:	20000415 	stw	zero,16(r4)
    2bbc:	20000515 	stw	zero,20(r4)
    2bc0:	20000615 	stw	zero,24(r4)
    2bc4:	20000c15 	stw	zero,48(r4)
    2bc8:	20000d15 	stw	zero,52(r4)
    2bcc:	20001115 	stw	zero,68(r4)
    2bd0:	20001215 	stw	zero,72(r4)
    2bd4:	2005883a 	mov	r2,r4
    2bd8:	dfc00217 	ldw	ra,8(sp)
    2bdc:	dc400117 	ldw	r17,4(sp)
    2be0:	dc000017 	ldw	r16,0(sp)
    2be4:	dec00304 	addi	sp,sp,12
    2be8:	f800283a 	ret
    2bec:	8009883a 	mov	r4,r16
    2bf0:	00029c40 	call	29c4 <__sinit>
    2bf4:	003fd706 	br	2b54 <__sfp+0x28>
    2bf8:	8809883a 	mov	r4,r17
    2bfc:	01400104 	movi	r5,4
    2c00:	0002ac40 	call	2ac4 <__sfmoreglue>
    2c04:	80800015 	stw	r2,0(r16)
    2c08:	103fe21e 	bne	r2,zero,2b94 <__sfp+0x68>
    2c0c:	00800304 	movi	r2,12
    2c10:	0009883a 	mov	r4,zero
    2c14:	88800015 	stw	r2,0(r17)
    2c18:	003fee06 	br	2bd4 <__sfp+0xa8>

00002c1c <_fwalk_reent>:
    2c1c:	defff704 	addi	sp,sp,-36
    2c20:	dcc00315 	stw	r19,12(sp)
    2c24:	24c0b804 	addi	r19,r4,736
    2c28:	dd800615 	stw	r22,24(sp)
    2c2c:	dd400515 	stw	r21,20(sp)
    2c30:	dfc00815 	stw	ra,32(sp)
    2c34:	ddc00715 	stw	r23,28(sp)
    2c38:	dd000415 	stw	r20,16(sp)
    2c3c:	dc800215 	stw	r18,8(sp)
    2c40:	dc400115 	stw	r17,4(sp)
    2c44:	dc000015 	stw	r16,0(sp)
    2c48:	202b883a 	mov	r21,r4
    2c4c:	282d883a 	mov	r22,r5
    2c50:	00029b40 	call	29b4 <__sfp_lock_acquire>
    2c54:	98002126 	beq	r19,zero,2cdc <_fwalk_reent+0xc0>
    2c58:	002f883a 	mov	r23,zero
    2c5c:	9c800117 	ldw	r18,4(r19)
    2c60:	9c000217 	ldw	r16,8(r19)
    2c64:	90bfffc4 	addi	r2,r18,-1
    2c68:	10000d16 	blt	r2,zero,2ca0 <_fwalk_reent+0x84>
    2c6c:	0023883a 	mov	r17,zero
    2c70:	053fffc4 	movi	r20,-1
    2c74:	8080030f 	ldh	r2,12(r16)
    2c78:	8c400044 	addi	r17,r17,1
    2c7c:	10000626 	beq	r2,zero,2c98 <_fwalk_reent+0x7c>
    2c80:	8080038f 	ldh	r2,14(r16)
    2c84:	800b883a 	mov	r5,r16
    2c88:	a809883a 	mov	r4,r21
    2c8c:	15000226 	beq	r2,r20,2c98 <_fwalk_reent+0x7c>
    2c90:	b03ee83a 	callr	r22
    2c94:	b8aeb03a 	or	r23,r23,r2
    2c98:	84001704 	addi	r16,r16,92
    2c9c:	947ff51e 	bne	r18,r17,2c74 <_fwalk_reent+0x58>
    2ca0:	9cc00017 	ldw	r19,0(r19)
    2ca4:	983fed1e 	bne	r19,zero,2c5c <_fwalk_reent+0x40>
    2ca8:	00029b80 	call	29b8 <__sfp_lock_release>
    2cac:	b805883a 	mov	r2,r23
    2cb0:	dfc00817 	ldw	ra,32(sp)
    2cb4:	ddc00717 	ldw	r23,28(sp)
    2cb8:	dd800617 	ldw	r22,24(sp)
    2cbc:	dd400517 	ldw	r21,20(sp)
    2cc0:	dd000417 	ldw	r20,16(sp)
    2cc4:	dcc00317 	ldw	r19,12(sp)
    2cc8:	dc800217 	ldw	r18,8(sp)
    2ccc:	dc400117 	ldw	r17,4(sp)
    2cd0:	dc000017 	ldw	r16,0(sp)
    2cd4:	dec00904 	addi	sp,sp,36
    2cd8:	f800283a 	ret
    2cdc:	002f883a 	mov	r23,zero
    2ce0:	003ff106 	br	2ca8 <_fwalk_reent+0x8c>

00002ce4 <_fwalk>:
    2ce4:	defff804 	addi	sp,sp,-32
    2ce8:	dcc00315 	stw	r19,12(sp)
    2cec:	24c0b804 	addi	r19,r4,736
    2cf0:	dd400515 	stw	r21,20(sp)
    2cf4:	dfc00715 	stw	ra,28(sp)
    2cf8:	dd800615 	stw	r22,24(sp)
    2cfc:	dd000415 	stw	r20,16(sp)
    2d00:	dc800215 	stw	r18,8(sp)
    2d04:	dc400115 	stw	r17,4(sp)
    2d08:	dc000015 	stw	r16,0(sp)
    2d0c:	282b883a 	mov	r21,r5
    2d10:	00029b40 	call	29b4 <__sfp_lock_acquire>
    2d14:	98001f26 	beq	r19,zero,2d94 <_fwalk+0xb0>
    2d18:	002d883a 	mov	r22,zero
    2d1c:	9c800117 	ldw	r18,4(r19)
    2d20:	9c000217 	ldw	r16,8(r19)
    2d24:	90bfffc4 	addi	r2,r18,-1
    2d28:	10000c16 	blt	r2,zero,2d5c <_fwalk+0x78>
    2d2c:	0023883a 	mov	r17,zero
    2d30:	053fffc4 	movi	r20,-1
    2d34:	8080030f 	ldh	r2,12(r16)
    2d38:	8c400044 	addi	r17,r17,1
    2d3c:	10000526 	beq	r2,zero,2d54 <_fwalk+0x70>
    2d40:	8080038f 	ldh	r2,14(r16)
    2d44:	8009883a 	mov	r4,r16
    2d48:	15000226 	beq	r2,r20,2d54 <_fwalk+0x70>
    2d4c:	a83ee83a 	callr	r21
    2d50:	b0acb03a 	or	r22,r22,r2
    2d54:	84001704 	addi	r16,r16,92
    2d58:	947ff61e 	bne	r18,r17,2d34 <_fwalk+0x50>
    2d5c:	9cc00017 	ldw	r19,0(r19)
    2d60:	983fee1e 	bne	r19,zero,2d1c <_fwalk+0x38>
    2d64:	00029b80 	call	29b8 <__sfp_lock_release>
    2d68:	b005883a 	mov	r2,r22
    2d6c:	dfc00717 	ldw	ra,28(sp)
    2d70:	dd800617 	ldw	r22,24(sp)
    2d74:	dd400517 	ldw	r21,20(sp)
    2d78:	dd000417 	ldw	r20,16(sp)
    2d7c:	dcc00317 	ldw	r19,12(sp)
    2d80:	dc800217 	ldw	r18,8(sp)
    2d84:	dc400117 	ldw	r17,4(sp)
    2d88:	dc000017 	ldw	r16,0(sp)
    2d8c:	dec00804 	addi	sp,sp,32
    2d90:	f800283a 	ret
    2d94:	002d883a 	mov	r22,zero
    2d98:	003ff206 	br	2d64 <_fwalk+0x80>

00002d9c <_malloc_r>:
    2d9c:	defff604 	addi	sp,sp,-40
    2da0:	28c002c4 	addi	r3,r5,11
    2da4:	00800584 	movi	r2,22
    2da8:	dc800215 	stw	r18,8(sp)
    2dac:	dfc00915 	stw	ra,36(sp)
    2db0:	df000815 	stw	fp,32(sp)
    2db4:	ddc00715 	stw	r23,28(sp)
    2db8:	dd800615 	stw	r22,24(sp)
    2dbc:	dd400515 	stw	r21,20(sp)
    2dc0:	dd000415 	stw	r20,16(sp)
    2dc4:	dcc00315 	stw	r19,12(sp)
    2dc8:	dc400115 	stw	r17,4(sp)
    2dcc:	dc000015 	stw	r16,0(sp)
    2dd0:	2025883a 	mov	r18,r4
    2dd4:	10c01236 	bltu	r2,r3,2e20 <_malloc_r+0x84>
    2dd8:	04400404 	movi	r17,16
    2ddc:	8940142e 	bgeu	r17,r5,2e30 <_malloc_r+0x94>
    2de0:	00800304 	movi	r2,12
    2de4:	0007883a 	mov	r3,zero
    2de8:	90800015 	stw	r2,0(r18)
    2dec:	1805883a 	mov	r2,r3
    2df0:	dfc00917 	ldw	ra,36(sp)
    2df4:	df000817 	ldw	fp,32(sp)
    2df8:	ddc00717 	ldw	r23,28(sp)
    2dfc:	dd800617 	ldw	r22,24(sp)
    2e00:	dd400517 	ldw	r21,20(sp)
    2e04:	dd000417 	ldw	r20,16(sp)
    2e08:	dcc00317 	ldw	r19,12(sp)
    2e0c:	dc800217 	ldw	r18,8(sp)
    2e10:	dc400117 	ldw	r17,4(sp)
    2e14:	dc000017 	ldw	r16,0(sp)
    2e18:	dec00a04 	addi	sp,sp,40
    2e1c:	f800283a 	ret
    2e20:	00bffe04 	movi	r2,-8
    2e24:	18a2703a 	and	r17,r3,r2
    2e28:	883fed16 	blt	r17,zero,2de0 <_malloc_r+0x44>
    2e2c:	897fec36 	bltu	r17,r5,2de0 <_malloc_r+0x44>
    2e30:	9009883a 	mov	r4,r18
    2e34:	0011f180 	call	11f18 <__malloc_lock>
    2e38:	00807dc4 	movi	r2,503
    2e3c:	14402b2e 	bgeu	r2,r17,2eec <_malloc_r+0x150>
    2e40:	8806d27a 	srli	r3,r17,9
    2e44:	18003f1e 	bne	r3,zero,2f44 <_malloc_r+0x1a8>
    2e48:	880cd0fa 	srli	r6,r17,3
    2e4c:	300490fa 	slli	r2,r6,3
    2e50:	02c00074 	movhi	r11,1
    2e54:	5ad4eb04 	addi	r11,r11,21420
    2e58:	12cb883a 	add	r5,r2,r11
    2e5c:	2c000317 	ldw	r16,12(r5)
    2e60:	580f883a 	mov	r7,r11
    2e64:	2c00041e 	bne	r5,r16,2e78 <_malloc_r+0xdc>
    2e68:	00000a06 	br	2e94 <_malloc_r+0xf8>
    2e6c:	1800860e 	bge	r3,zero,3088 <_malloc_r+0x2ec>
    2e70:	84000317 	ldw	r16,12(r16)
    2e74:	2c000726 	beq	r5,r16,2e94 <_malloc_r+0xf8>
    2e78:	80800117 	ldw	r2,4(r16)
    2e7c:	00ffff04 	movi	r3,-4
    2e80:	10c8703a 	and	r4,r2,r3
    2e84:	2447c83a 	sub	r3,r4,r17
    2e88:	008003c4 	movi	r2,15
    2e8c:	10fff70e 	bge	r2,r3,2e6c <_malloc_r+0xd0>
    2e90:	31bfffc4 	addi	r6,r6,-1
    2e94:	32400044 	addi	r9,r6,1
    2e98:	02800074 	movhi	r10,1
    2e9c:	5294ed04 	addi	r10,r10,21428
    2ea0:	54000217 	ldw	r16,8(r10)
    2ea4:	8280a026 	beq	r16,r10,3128 <_malloc_r+0x38c>
    2ea8:	80800117 	ldw	r2,4(r16)
    2eac:	00ffff04 	movi	r3,-4
    2eb0:	10ca703a 	and	r5,r2,r3
    2eb4:	2c4dc83a 	sub	r6,r5,r17
    2eb8:	008003c4 	movi	r2,15
    2ebc:	11808316 	blt	r2,r6,30cc <_malloc_r+0x330>
    2ec0:	52800315 	stw	r10,12(r10)
    2ec4:	52800215 	stw	r10,8(r10)
    2ec8:	30002916 	blt	r6,zero,2f70 <_malloc_r+0x1d4>
    2ecc:	8147883a 	add	r3,r16,r5
    2ed0:	18800117 	ldw	r2,4(r3)
    2ed4:	9009883a 	mov	r4,r18
    2ed8:	10800054 	ori	r2,r2,1
    2edc:	18800115 	stw	r2,4(r3)
    2ee0:	0011f380 	call	11f38 <__malloc_unlock>
    2ee4:	80c00204 	addi	r3,r16,8
    2ee8:	003fc006 	br	2dec <_malloc_r+0x50>
    2eec:	02c00074 	movhi	r11,1
    2ef0:	5ad4eb04 	addi	r11,r11,21420
    2ef4:	8ac5883a 	add	r2,r17,r11
    2ef8:	14000317 	ldw	r16,12(r2)
    2efc:	580f883a 	mov	r7,r11
    2f00:	8806d0fa 	srli	r3,r17,3
    2f04:	14006c26 	beq	r2,r16,30b8 <_malloc_r+0x31c>
    2f08:	80c00117 	ldw	r3,4(r16)
    2f0c:	00bfff04 	movi	r2,-4
    2f10:	81800317 	ldw	r6,12(r16)
    2f14:	1886703a 	and	r3,r3,r2
    2f18:	80c7883a 	add	r3,r16,r3
    2f1c:	18800117 	ldw	r2,4(r3)
    2f20:	81400217 	ldw	r5,8(r16)
    2f24:	9009883a 	mov	r4,r18
    2f28:	10800054 	ori	r2,r2,1
    2f2c:	18800115 	stw	r2,4(r3)
    2f30:	31400215 	stw	r5,8(r6)
    2f34:	29800315 	stw	r6,12(r5)
    2f38:	0011f380 	call	11f38 <__malloc_unlock>
    2f3c:	80c00204 	addi	r3,r16,8
    2f40:	003faa06 	br	2dec <_malloc_r+0x50>
    2f44:	00800104 	movi	r2,4
    2f48:	10c0052e 	bgeu	r2,r3,2f60 <_malloc_r+0x1c4>
    2f4c:	00800504 	movi	r2,20
    2f50:	10c07836 	bltu	r2,r3,3134 <_malloc_r+0x398>
    2f54:	198016c4 	addi	r6,r3,91
    2f58:	300490fa 	slli	r2,r6,3
    2f5c:	003fbc06 	br	2e50 <_malloc_r+0xb4>
    2f60:	8804d1ba 	srli	r2,r17,6
    2f64:	11800e04 	addi	r6,r2,56
    2f68:	300490fa 	slli	r2,r6,3
    2f6c:	003fb806 	br	2e50 <_malloc_r+0xb4>
    2f70:	00807fc4 	movi	r2,511
    2f74:	1140bb36 	bltu	r2,r5,3264 <_malloc_r+0x4c8>
    2f78:	2806d0fa 	srli	r3,r5,3
    2f7c:	573ffe04 	addi	fp,r10,-8
    2f80:	00800044 	movi	r2,1
    2f84:	180890fa 	slli	r4,r3,3
    2f88:	1807d0ba 	srai	r3,r3,2
    2f8c:	e1c00117 	ldw	r7,4(fp)
    2f90:	5909883a 	add	r4,r11,r4
    2f94:	21400217 	ldw	r5,8(r4)
    2f98:	10c4983a 	sll	r2,r2,r3
    2f9c:	81000315 	stw	r4,12(r16)
    2fa0:	81400215 	stw	r5,8(r16)
    2fa4:	388eb03a 	or	r7,r7,r2
    2fa8:	2c000315 	stw	r16,12(r5)
    2fac:	24000215 	stw	r16,8(r4)
    2fb0:	e1c00115 	stw	r7,4(fp)
    2fb4:	4807883a 	mov	r3,r9
    2fb8:	4800cd16 	blt	r9,zero,32f0 <_malloc_r+0x554>
    2fbc:	1807d0ba 	srai	r3,r3,2
    2fc0:	00800044 	movi	r2,1
    2fc4:	10c8983a 	sll	r4,r2,r3
    2fc8:	39004436 	bltu	r7,r4,30dc <_malloc_r+0x340>
    2fcc:	21c4703a 	and	r2,r4,r7
    2fd0:	10000a1e 	bne	r2,zero,2ffc <_malloc_r+0x260>
    2fd4:	2109883a 	add	r4,r4,r4
    2fd8:	00bfff04 	movi	r2,-4
    2fdc:	4884703a 	and	r2,r9,r2
    2fe0:	3906703a 	and	r3,r7,r4
    2fe4:	12400104 	addi	r9,r2,4
    2fe8:	1800041e 	bne	r3,zero,2ffc <_malloc_r+0x260>
    2fec:	2109883a 	add	r4,r4,r4
    2ff0:	3904703a 	and	r2,r7,r4
    2ff4:	4a400104 	addi	r9,r9,4
    2ff8:	103ffc26 	beq	r2,zero,2fec <_malloc_r+0x250>
    2ffc:	480490fa 	slli	r2,r9,3
    3000:	4819883a 	mov	r12,r9
    3004:	023fff04 	movi	r8,-4
    3008:	589b883a 	add	r13,r11,r2
    300c:	6807883a 	mov	r3,r13
    3010:	014003c4 	movi	r5,15
    3014:	1c000317 	ldw	r16,12(r3)
    3018:	1c00041e 	bne	r3,r16,302c <_malloc_r+0x290>
    301c:	0000a706 	br	32bc <_malloc_r+0x520>
    3020:	3000ab0e 	bge	r6,zero,32d0 <_malloc_r+0x534>
    3024:	84000317 	ldw	r16,12(r16)
    3028:	1c00a426 	beq	r3,r16,32bc <_malloc_r+0x520>
    302c:	80800117 	ldw	r2,4(r16)
    3030:	1204703a 	and	r2,r2,r8
    3034:	144dc83a 	sub	r6,r2,r17
    3038:	29bff90e 	bge	r5,r6,3020 <_malloc_r+0x284>
    303c:	81000317 	ldw	r4,12(r16)
    3040:	80c00217 	ldw	r3,8(r16)
    3044:	89400054 	ori	r5,r17,1
    3048:	8445883a 	add	r2,r16,r17
    304c:	20c00215 	stw	r3,8(r4)
    3050:	19000315 	stw	r4,12(r3)
    3054:	81400115 	stw	r5,4(r16)
    3058:	1187883a 	add	r3,r2,r6
    305c:	31000054 	ori	r4,r6,1
    3060:	50800315 	stw	r2,12(r10)
    3064:	50800215 	stw	r2,8(r10)
    3068:	19800015 	stw	r6,0(r3)
    306c:	11000115 	stw	r4,4(r2)
    3070:	12800215 	stw	r10,8(r2)
    3074:	12800315 	stw	r10,12(r2)
    3078:	9009883a 	mov	r4,r18
    307c:	0011f380 	call	11f38 <__malloc_unlock>
    3080:	80c00204 	addi	r3,r16,8
    3084:	003f5906 	br	2dec <_malloc_r+0x50>
    3088:	8109883a 	add	r4,r16,r4
    308c:	20800117 	ldw	r2,4(r4)
    3090:	80c00217 	ldw	r3,8(r16)
    3094:	81400317 	ldw	r5,12(r16)
    3098:	10800054 	ori	r2,r2,1
    309c:	20800115 	stw	r2,4(r4)
    30a0:	28c00215 	stw	r3,8(r5)
    30a4:	19400315 	stw	r5,12(r3)
    30a8:	9009883a 	mov	r4,r18
    30ac:	0011f380 	call	11f38 <__malloc_unlock>
    30b0:	80c00204 	addi	r3,r16,8
    30b4:	003f4d06 	br	2dec <_malloc_r+0x50>
    30b8:	80800204 	addi	r2,r16,8
    30bc:	14000317 	ldw	r16,12(r2)
    30c0:	143f911e 	bne	r2,r16,2f08 <_malloc_r+0x16c>
    30c4:	1a400084 	addi	r9,r3,2
    30c8:	003f7306 	br	2e98 <_malloc_r+0xfc>
    30cc:	88c00054 	ori	r3,r17,1
    30d0:	8445883a 	add	r2,r16,r17
    30d4:	80c00115 	stw	r3,4(r16)
    30d8:	003fdf06 	br	3058 <_malloc_r+0x2bc>
    30dc:	e4000217 	ldw	r16,8(fp)
    30e0:	00bfff04 	movi	r2,-4
    30e4:	80c00117 	ldw	r3,4(r16)
    30e8:	802d883a 	mov	r22,r16
    30ec:	18aa703a 	and	r21,r3,r2
    30f0:	ac401636 	bltu	r21,r17,314c <_malloc_r+0x3b0>
    30f4:	ac49c83a 	sub	r4,r21,r17
    30f8:	008003c4 	movi	r2,15
    30fc:	1100130e 	bge	r2,r4,314c <_malloc_r+0x3b0>
    3100:	88800054 	ori	r2,r17,1
    3104:	8447883a 	add	r3,r16,r17
    3108:	80800115 	stw	r2,4(r16)
    310c:	20800054 	ori	r2,r4,1
    3110:	18800115 	stw	r2,4(r3)
    3114:	e0c00215 	stw	r3,8(fp)
    3118:	9009883a 	mov	r4,r18
    311c:	0011f380 	call	11f38 <__malloc_unlock>
    3120:	80c00204 	addi	r3,r16,8
    3124:	003f3106 	br	2dec <_malloc_r+0x50>
    3128:	39c00117 	ldw	r7,4(r7)
    312c:	573ffe04 	addi	fp,r10,-8
    3130:	003fa006 	br	2fb4 <_malloc_r+0x218>
    3134:	00801504 	movi	r2,84
    3138:	10c06736 	bltu	r2,r3,32d8 <_malloc_r+0x53c>
    313c:	8804d33a 	srli	r2,r17,12
    3140:	11801b84 	addi	r6,r2,110
    3144:	300490fa 	slli	r2,r6,3
    3148:	003f4106 	br	2e50 <_malloc_r+0xb4>
    314c:	d0a6cf17 	ldw	r2,-25796(gp)
    3150:	d0e00417 	ldw	r3,-32752(gp)
    3154:	053fffc4 	movi	r20,-1
    3158:	10800404 	addi	r2,r2,16
    315c:	88a7883a 	add	r19,r17,r2
    3160:	1d000326 	beq	r3,r20,3170 <_malloc_r+0x3d4>
    3164:	98c3ffc4 	addi	r3,r19,4095
    3168:	00bc0004 	movi	r2,-4096
    316c:	18a6703a 	and	r19,r3,r2
    3170:	9009883a 	mov	r4,r18
    3174:	980b883a 	mov	r5,r19
    3178:	0003a280 	call	3a28 <_sbrk_r>
    317c:	1009883a 	mov	r4,r2
    3180:	15000426 	beq	r2,r20,3194 <_malloc_r+0x3f8>
    3184:	854b883a 	add	r5,r16,r21
    3188:	1029883a 	mov	r20,r2
    318c:	11405a2e 	bgeu	r2,r5,32f8 <_malloc_r+0x55c>
    3190:	87000c26 	beq	r16,fp,31c4 <_malloc_r+0x428>
    3194:	e4000217 	ldw	r16,8(fp)
    3198:	80c00117 	ldw	r3,4(r16)
    319c:	00bfff04 	movi	r2,-4
    31a0:	1884703a 	and	r2,r3,r2
    31a4:	14400336 	bltu	r2,r17,31b4 <_malloc_r+0x418>
    31a8:	1449c83a 	sub	r4,r2,r17
    31ac:	008003c4 	movi	r2,15
    31b0:	113fd316 	blt	r2,r4,3100 <_malloc_r+0x364>
    31b4:	9009883a 	mov	r4,r18
    31b8:	0011f380 	call	11f38 <__malloc_unlock>
    31bc:	0007883a 	mov	r3,zero
    31c0:	003f0a06 	br	2dec <_malloc_r+0x50>
    31c4:	05c000b4 	movhi	r23,2
    31c8:	bde18904 	addi	r23,r23,-31196
    31cc:	b8800017 	ldw	r2,0(r23)
    31d0:	988d883a 	add	r6,r19,r2
    31d4:	b9800015 	stw	r6,0(r23)
    31d8:	d0e00417 	ldw	r3,-32752(gp)
    31dc:	00bfffc4 	movi	r2,-1
    31e0:	18808e26 	beq	r3,r2,341c <_malloc_r+0x680>
    31e4:	2145c83a 	sub	r2,r4,r5
    31e8:	3085883a 	add	r2,r6,r2
    31ec:	b8800015 	stw	r2,0(r23)
    31f0:	20c001cc 	andi	r3,r4,7
    31f4:	18005f1e 	bne	r3,zero,3374 <_malloc_r+0x5d8>
    31f8:	000b883a 	mov	r5,zero
    31fc:	a4c5883a 	add	r2,r20,r19
    3200:	1083ffcc 	andi	r2,r2,4095
    3204:	00c40004 	movi	r3,4096
    3208:	1887c83a 	sub	r3,r3,r2
    320c:	28e7883a 	add	r19,r5,r3
    3210:	9009883a 	mov	r4,r18
    3214:	980b883a 	mov	r5,r19
    3218:	0003a280 	call	3a28 <_sbrk_r>
    321c:	1007883a 	mov	r3,r2
    3220:	00bfffc4 	movi	r2,-1
    3224:	18807a26 	beq	r3,r2,3410 <_malloc_r+0x674>
    3228:	1d05c83a 	sub	r2,r3,r20
    322c:	9885883a 	add	r2,r19,r2
    3230:	10c00054 	ori	r3,r2,1
    3234:	b8800017 	ldw	r2,0(r23)
    3238:	a021883a 	mov	r16,r20
    323c:	a0c00115 	stw	r3,4(r20)
    3240:	9885883a 	add	r2,r19,r2
    3244:	b8800015 	stw	r2,0(r23)
    3248:	e5000215 	stw	r20,8(fp)
    324c:	b7003626 	beq	r22,fp,3328 <_malloc_r+0x58c>
    3250:	018003c4 	movi	r6,15
    3254:	35404b36 	bltu	r6,r21,3384 <_malloc_r+0x5e8>
    3258:	00800044 	movi	r2,1
    325c:	a0800115 	stw	r2,4(r20)
    3260:	003fcd06 	br	3198 <_malloc_r+0x3fc>
    3264:	2808d27a 	srli	r4,r5,9
    3268:	2000371e 	bne	r4,zero,3348 <_malloc_r+0x5ac>
    326c:	2808d0fa 	srli	r4,r5,3
    3270:	200690fa 	slli	r3,r4,3
    3274:	1ad1883a 	add	r8,r3,r11
    3278:	41800217 	ldw	r6,8(r8)
    327c:	41805b26 	beq	r8,r6,33ec <_malloc_r+0x650>
    3280:	30800117 	ldw	r2,4(r6)
    3284:	00ffff04 	movi	r3,-4
    3288:	10c4703a 	and	r2,r2,r3
    328c:	2880022e 	bgeu	r5,r2,3298 <_malloc_r+0x4fc>
    3290:	31800217 	ldw	r6,8(r6)
    3294:	41bffa1e 	bne	r8,r6,3280 <_malloc_r+0x4e4>
    3298:	32000317 	ldw	r8,12(r6)
    329c:	39c00117 	ldw	r7,4(r7)
    32a0:	82000315 	stw	r8,12(r16)
    32a4:	81800215 	stw	r6,8(r16)
    32a8:	07000074 	movhi	fp,1
    32ac:	e714eb04 	addi	fp,fp,21420
    32b0:	34000315 	stw	r16,12(r6)
    32b4:	44000215 	stw	r16,8(r8)
    32b8:	003f3e06 	br	2fb4 <_malloc_r+0x218>
    32bc:	63000044 	addi	r12,r12,1
    32c0:	608000cc 	andi	r2,r12,3
    32c4:	10005d26 	beq	r2,zero,343c <_malloc_r+0x6a0>
    32c8:	18c00204 	addi	r3,r3,8
    32cc:	003f5106 	br	3014 <_malloc_r+0x278>
    32d0:	8089883a 	add	r4,r16,r2
    32d4:	003f6d06 	br	308c <_malloc_r+0x2f0>
    32d8:	00805504 	movi	r2,340
    32dc:	10c02036 	bltu	r2,r3,3360 <_malloc_r+0x5c4>
    32e0:	8804d3fa 	srli	r2,r17,15
    32e4:	11801dc4 	addi	r6,r2,119
    32e8:	300490fa 	slli	r2,r6,3
    32ec:	003ed806 	br	2e50 <_malloc_r+0xb4>
    32f0:	48c000c4 	addi	r3,r9,3
    32f4:	003f3106 	br	2fbc <_malloc_r+0x220>
    32f8:	05c000b4 	movhi	r23,2
    32fc:	bde18904 	addi	r23,r23,-31196
    3300:	b8800017 	ldw	r2,0(r23)
    3304:	988d883a 	add	r6,r19,r2
    3308:	b9800015 	stw	r6,0(r23)
    330c:	293fb21e 	bne	r5,r4,31d8 <_malloc_r+0x43c>
    3310:	2083ffcc 	andi	r2,r4,4095
    3314:	103fb01e 	bne	r2,zero,31d8 <_malloc_r+0x43c>
    3318:	e4000217 	ldw	r16,8(fp)
    331c:	9d45883a 	add	r2,r19,r21
    3320:	10800054 	ori	r2,r2,1
    3324:	80800115 	stw	r2,4(r16)
    3328:	b8c00017 	ldw	r3,0(r23)
    332c:	d0a6d017 	ldw	r2,-25792(gp)
    3330:	10c0012e 	bgeu	r2,r3,3338 <_malloc_r+0x59c>
    3334:	d0e6d015 	stw	r3,-25792(gp)
    3338:	d0a6d117 	ldw	r2,-25788(gp)
    333c:	10ff962e 	bgeu	r2,r3,3198 <_malloc_r+0x3fc>
    3340:	d0e6d115 	stw	r3,-25788(gp)
    3344:	003f9406 	br	3198 <_malloc_r+0x3fc>
    3348:	00800104 	movi	r2,4
    334c:	11001e36 	bltu	r2,r4,33c8 <_malloc_r+0x62c>
    3350:	2804d1ba 	srli	r2,r5,6
    3354:	11000e04 	addi	r4,r2,56
    3358:	200690fa 	slli	r3,r4,3
    335c:	003fc506 	br	3274 <_malloc_r+0x4d8>
    3360:	00815504 	movi	r2,1364
    3364:	10c01d2e 	bgeu	r2,r3,33dc <_malloc_r+0x640>
    3368:	01801f84 	movi	r6,126
    336c:	0080fc04 	movi	r2,1008
    3370:	003eb706 	br	2e50 <_malloc_r+0xb4>
    3374:	00800204 	movi	r2,8
    3378:	10cbc83a 	sub	r5,r2,r3
    337c:	2169883a 	add	r20,r4,r5
    3380:	003f9e06 	br	31fc <_malloc_r+0x460>
    3384:	00bffe04 	movi	r2,-8
    3388:	a93ffd04 	addi	r4,r21,-12
    338c:	2088703a 	and	r4,r4,r2
    3390:	b10b883a 	add	r5,r22,r4
    3394:	00c00144 	movi	r3,5
    3398:	28c00215 	stw	r3,8(r5)
    339c:	28c00115 	stw	r3,4(r5)
    33a0:	b0800117 	ldw	r2,4(r22)
    33a4:	1080004c 	andi	r2,r2,1
    33a8:	2084b03a 	or	r2,r4,r2
    33ac:	b0800115 	stw	r2,4(r22)
    33b0:	313fdd2e 	bgeu	r6,r4,3328 <_malloc_r+0x58c>
    33b4:	b1400204 	addi	r5,r22,8
    33b8:	9009883a 	mov	r4,r18
    33bc:	000976c0 	call	976c <_free_r>
    33c0:	e4000217 	ldw	r16,8(fp)
    33c4:	003fd806 	br	3328 <_malloc_r+0x58c>
    33c8:	00800504 	movi	r2,20
    33cc:	11001536 	bltu	r2,r4,3424 <_malloc_r+0x688>
    33d0:	210016c4 	addi	r4,r4,91
    33d4:	200690fa 	slli	r3,r4,3
    33d8:	003fa606 	br	3274 <_malloc_r+0x4d8>
    33dc:	8804d4ba 	srli	r2,r17,18
    33e0:	11801f04 	addi	r6,r2,124
    33e4:	300490fa 	slli	r2,r6,3
    33e8:	003e9906 	br	2e50 <_malloc_r+0xb4>
    33ec:	2009d0ba 	srai	r4,r4,2
    33f0:	01400074 	movhi	r5,1
    33f4:	2954eb04 	addi	r5,r5,21420
    33f8:	00c00044 	movi	r3,1
    33fc:	28800117 	ldw	r2,4(r5)
    3400:	1906983a 	sll	r3,r3,r4
    3404:	10c4b03a 	or	r2,r2,r3
    3408:	28800115 	stw	r2,4(r5)
    340c:	003fa306 	br	329c <_malloc_r+0x500>
    3410:	0027883a 	mov	r19,zero
    3414:	00c00044 	movi	r3,1
    3418:	003f8606 	br	3234 <_malloc_r+0x498>
    341c:	d1200415 	stw	r4,-32752(gp)
    3420:	003f7306 	br	31f0 <_malloc_r+0x454>
    3424:	00801504 	movi	r2,84
    3428:	11001936 	bltu	r2,r4,3490 <_malloc_r+0x6f4>
    342c:	2804d33a 	srli	r2,r5,12
    3430:	11001b84 	addi	r4,r2,110
    3434:	200690fa 	slli	r3,r4,3
    3438:	003f8e06 	br	3274 <_malloc_r+0x4d8>
    343c:	480b883a 	mov	r5,r9
    3440:	6807883a 	mov	r3,r13
    3444:	288000cc 	andi	r2,r5,3
    3448:	18fffe04 	addi	r3,r3,-8
    344c:	297fffc4 	addi	r5,r5,-1
    3450:	10001526 	beq	r2,zero,34a8 <_malloc_r+0x70c>
    3454:	18800217 	ldw	r2,8(r3)
    3458:	10fffa26 	beq	r2,r3,3444 <_malloc_r+0x6a8>
    345c:	2109883a 	add	r4,r4,r4
    3460:	393f1e36 	bltu	r7,r4,30dc <_malloc_r+0x340>
    3464:	203f1d26 	beq	r4,zero,30dc <_malloc_r+0x340>
    3468:	21c4703a 	and	r2,r4,r7
    346c:	10000226 	beq	r2,zero,3478 <_malloc_r+0x6dc>
    3470:	6013883a 	mov	r9,r12
    3474:	003ee106 	br	2ffc <_malloc_r+0x260>
    3478:	2109883a 	add	r4,r4,r4
    347c:	3904703a 	and	r2,r7,r4
    3480:	63000104 	addi	r12,r12,4
    3484:	103ffc26 	beq	r2,zero,3478 <_malloc_r+0x6dc>
    3488:	6013883a 	mov	r9,r12
    348c:	003edb06 	br	2ffc <_malloc_r+0x260>
    3490:	00805504 	movi	r2,340
    3494:	11000836 	bltu	r2,r4,34b8 <_malloc_r+0x71c>
    3498:	2804d3fa 	srli	r2,r5,15
    349c:	11001dc4 	addi	r4,r2,119
    34a0:	200690fa 	slli	r3,r4,3
    34a4:	003f7306 	br	3274 <_malloc_r+0x4d8>
    34a8:	0104303a 	nor	r2,zero,r4
    34ac:	388e703a 	and	r7,r7,r2
    34b0:	e1c00115 	stw	r7,4(fp)
    34b4:	003fe906 	br	345c <_malloc_r+0x6c0>
    34b8:	00815504 	movi	r2,1364
    34bc:	1100032e 	bgeu	r2,r4,34cc <_malloc_r+0x730>
    34c0:	01001f84 	movi	r4,126
    34c4:	00c0fc04 	movi	r3,1008
    34c8:	003f6a06 	br	3274 <_malloc_r+0x4d8>
    34cc:	2804d4ba 	srli	r2,r5,18
    34d0:	11001f04 	addi	r4,r2,124
    34d4:	200690fa 	slli	r3,r4,3
    34d8:	003f6606 	br	3274 <_malloc_r+0x4d8>

000034dc <memchr>:
    34dc:	008000c4 	movi	r2,3
    34e0:	29403fcc 	andi	r5,r5,255
    34e4:	2007883a 	mov	r3,r4
    34e8:	1180022e 	bgeu	r2,r6,34f4 <memchr+0x18>
    34ec:	2084703a 	and	r2,r4,r2
    34f0:	10000b26 	beq	r2,zero,3520 <memchr+0x44>
    34f4:	313fffc4 	addi	r4,r6,-1
    34f8:	3000051e 	bne	r6,zero,3510 <memchr+0x34>
    34fc:	00002c06 	br	35b0 <memchr+0xd4>
    3500:	213fffc4 	addi	r4,r4,-1
    3504:	00bfffc4 	movi	r2,-1
    3508:	18c00044 	addi	r3,r3,1
    350c:	20802826 	beq	r4,r2,35b0 <memchr+0xd4>
    3510:	18800003 	ldbu	r2,0(r3)
    3514:	28bffa1e 	bne	r5,r2,3500 <memchr+0x24>
    3518:	1805883a 	mov	r2,r3
    351c:	f800283a 	ret
    3520:	0011883a 	mov	r8,zero
    3524:	0007883a 	mov	r3,zero
    3528:	01c00104 	movi	r7,4
    352c:	4004923a 	slli	r2,r8,8
    3530:	18c00044 	addi	r3,r3,1
    3534:	1151883a 	add	r8,r2,r5
    3538:	19fffc1e 	bne	r3,r7,352c <memchr+0x50>
    353c:	02bfbff4 	movhi	r10,65279
    3540:	52bfbfc4 	addi	r10,r10,-257
    3544:	02602074 	movhi	r9,32897
    3548:	4a602004 	addi	r9,r9,-32640
    354c:	02c000c4 	movi	r11,3
    3550:	20800017 	ldw	r2,0(r4)
    3554:	31bfff04 	addi	r6,r6,-4
    3558:	200f883a 	mov	r7,r4
    355c:	1204f03a 	xor	r2,r2,r8
    3560:	1287883a 	add	r3,r2,r10
    3564:	1a46703a 	and	r3,r3,r9
    3568:	0084303a 	nor	r2,zero,r2
    356c:	10c4703a 	and	r2,r2,r3
    3570:	10000b26 	beq	r2,zero,35a0 <memchr+0xc4>
    3574:	20800003 	ldbu	r2,0(r4)
    3578:	28800f26 	beq	r5,r2,35b8 <memchr+0xdc>
    357c:	20800043 	ldbu	r2,1(r4)
    3580:	21c00044 	addi	r7,r4,1
    3584:	28800c26 	beq	r5,r2,35b8 <memchr+0xdc>
    3588:	20800083 	ldbu	r2,2(r4)
    358c:	21c00084 	addi	r7,r4,2
    3590:	28800926 	beq	r5,r2,35b8 <memchr+0xdc>
    3594:	208000c3 	ldbu	r2,3(r4)
    3598:	21c000c4 	addi	r7,r4,3
    359c:	28800626 	beq	r5,r2,35b8 <memchr+0xdc>
    35a0:	21000104 	addi	r4,r4,4
    35a4:	59bfea36 	bltu	r11,r6,3550 <memchr+0x74>
    35a8:	2007883a 	mov	r3,r4
    35ac:	003fd106 	br	34f4 <memchr+0x18>
    35b0:	0005883a 	mov	r2,zero
    35b4:	f800283a 	ret
    35b8:	3805883a 	mov	r2,r7
    35bc:	f800283a 	ret

000035c0 <memcpy>:
    35c0:	01c003c4 	movi	r7,15
    35c4:	2007883a 	mov	r3,r4
    35c8:	3980032e 	bgeu	r7,r6,35d8 <memcpy+0x18>
    35cc:	2904b03a 	or	r2,r5,r4
    35d0:	108000cc 	andi	r2,r2,3
    35d4:	10000926 	beq	r2,zero,35fc <memcpy+0x3c>
    35d8:	30000626 	beq	r6,zero,35f4 <memcpy+0x34>
    35dc:	30cd883a 	add	r6,r6,r3
    35e0:	28800003 	ldbu	r2,0(r5)
    35e4:	29400044 	addi	r5,r5,1
    35e8:	18800005 	stb	r2,0(r3)
    35ec:	18c00044 	addi	r3,r3,1
    35f0:	30fffb1e 	bne	r6,r3,35e0 <memcpy+0x20>
    35f4:	2005883a 	mov	r2,r4
    35f8:	f800283a 	ret
    35fc:	3811883a 	mov	r8,r7
    3600:	200f883a 	mov	r7,r4
    3604:	28c00017 	ldw	r3,0(r5)
    3608:	31bffc04 	addi	r6,r6,-16
    360c:	38c00015 	stw	r3,0(r7)
    3610:	28800117 	ldw	r2,4(r5)
    3614:	38800115 	stw	r2,4(r7)
    3618:	28c00217 	ldw	r3,8(r5)
    361c:	38c00215 	stw	r3,8(r7)
    3620:	28800317 	ldw	r2,12(r5)
    3624:	29400404 	addi	r5,r5,16
    3628:	38800315 	stw	r2,12(r7)
    362c:	39c00404 	addi	r7,r7,16
    3630:	41bff436 	bltu	r8,r6,3604 <memcpy+0x44>
    3634:	008000c4 	movi	r2,3
    3638:	1180072e 	bgeu	r2,r6,3658 <memcpy+0x98>
    363c:	1007883a 	mov	r3,r2
    3640:	28800017 	ldw	r2,0(r5)
    3644:	31bfff04 	addi	r6,r6,-4
    3648:	29400104 	addi	r5,r5,4
    364c:	38800015 	stw	r2,0(r7)
    3650:	39c00104 	addi	r7,r7,4
    3654:	19bffa36 	bltu	r3,r6,3640 <memcpy+0x80>
    3658:	3807883a 	mov	r3,r7
    365c:	003fde06 	br	35d8 <memcpy+0x18>

00003660 <memset>:
    3660:	008000c4 	movi	r2,3
    3664:	29403fcc 	andi	r5,r5,255
    3668:	2007883a 	mov	r3,r4
    366c:	1180022e 	bgeu	r2,r6,3678 <memset+0x18>
    3670:	2084703a 	and	r2,r4,r2
    3674:	10000826 	beq	r2,zero,3698 <memset+0x38>
    3678:	30000526 	beq	r6,zero,3690 <memset+0x30>
    367c:	2805883a 	mov	r2,r5
    3680:	30cd883a 	add	r6,r6,r3
    3684:	18800005 	stb	r2,0(r3)
    3688:	18c00044 	addi	r3,r3,1
    368c:	19bffd1e 	bne	r3,r6,3684 <memset+0x24>
    3690:	2005883a 	mov	r2,r4
    3694:	f800283a 	ret
    3698:	2804923a 	slli	r2,r5,8
    369c:	020003c4 	movi	r8,15
    36a0:	200f883a 	mov	r7,r4
    36a4:	2884b03a 	or	r2,r5,r2
    36a8:	1006943a 	slli	r3,r2,16
    36ac:	10c6b03a 	or	r3,r2,r3
    36b0:	41800a2e 	bgeu	r8,r6,36dc <memset+0x7c>
    36b4:	4005883a 	mov	r2,r8
    36b8:	31bffc04 	addi	r6,r6,-16
    36bc:	38c00015 	stw	r3,0(r7)
    36c0:	38c00115 	stw	r3,4(r7)
    36c4:	38c00215 	stw	r3,8(r7)
    36c8:	38c00315 	stw	r3,12(r7)
    36cc:	39c00404 	addi	r7,r7,16
    36d0:	11bff936 	bltu	r2,r6,36b8 <memset+0x58>
    36d4:	008000c4 	movi	r2,3
    36d8:	1180052e 	bgeu	r2,r6,36f0 <memset+0x90>
    36dc:	31bfff04 	addi	r6,r6,-4
    36e0:	008000c4 	movi	r2,3
    36e4:	38c00015 	stw	r3,0(r7)
    36e8:	39c00104 	addi	r7,r7,4
    36ec:	11bffb36 	bltu	r2,r6,36dc <memset+0x7c>
    36f0:	3807883a 	mov	r3,r7
    36f4:	003fe006 	br	3678 <memset+0x18>

000036f8 <printf>:
    36f8:	defffb04 	addi	sp,sp,-20
    36fc:	dfc00115 	stw	ra,4(sp)
    3700:	d9400215 	stw	r5,8(sp)
    3704:	d9800315 	stw	r6,12(sp)
    3708:	d9c00415 	stw	r7,16(sp)
    370c:	00800074 	movhi	r2,1
    3710:	109a7d04 	addi	r2,r2,27124
    3714:	10c00017 	ldw	r3,0(r2)
    3718:	200b883a 	mov	r5,r4
    371c:	d8800204 	addi	r2,sp,8
    3720:	19000217 	ldw	r4,8(r3)
    3724:	100d883a 	mov	r6,r2
    3728:	d8800015 	stw	r2,0(sp)
    372c:	0005f1c0 	call	5f1c <__vfprintf_internal>
    3730:	dfc00117 	ldw	ra,4(sp)
    3734:	dec00504 	addi	sp,sp,20
    3738:	f800283a 	ret

0000373c <_printf_r>:
    373c:	defffc04 	addi	sp,sp,-16
    3740:	dfc00115 	stw	ra,4(sp)
    3744:	d9800215 	stw	r6,8(sp)
    3748:	d9c00315 	stw	r7,12(sp)
    374c:	280d883a 	mov	r6,r5
    3750:	21400217 	ldw	r5,8(r4)
    3754:	d8c00204 	addi	r3,sp,8
    3758:	180f883a 	mov	r7,r3
    375c:	d8c00015 	stw	r3,0(sp)
    3760:	00040700 	call	4070 <___vfprintf_internal_r>
    3764:	dfc00117 	ldw	ra,4(sp)
    3768:	dec00404 	addi	sp,sp,16
    376c:	f800283a 	ret

00003770 <putchar>:
    3770:	00800074 	movhi	r2,1
    3774:	109a7d04 	addi	r2,r2,27124
    3778:	11800017 	ldw	r6,0(r2)
    377c:	200b883a 	mov	r5,r4
    3780:	3009883a 	mov	r4,r6
    3784:	31800217 	ldw	r6,8(r6)
    3788:	000b4f01 	jmpi	b4f0 <_putc_r>

0000378c <_putchar_r>:
    378c:	21800217 	ldw	r6,8(r4)
    3790:	000b4f01 	jmpi	b4f0 <_putc_r>

00003794 <_puts_r>:
    3794:	defff604 	addi	sp,sp,-40
    3798:	dc400715 	stw	r17,28(sp)
    379c:	2023883a 	mov	r17,r4
    37a0:	2809883a 	mov	r4,r5
    37a4:	dfc00915 	stw	ra,36(sp)
    37a8:	dcc00815 	stw	r19,32(sp)
    37ac:	2827883a 	mov	r19,r5
    37b0:	0003fa40 	call	3fa4 <strlen>
    37b4:	89400217 	ldw	r5,8(r17)
    37b8:	00c00074 	movhi	r3,1
    37bc:	18d2e104 	addi	r3,r3,19332
    37c0:	01c00044 	movi	r7,1
    37c4:	12000044 	addi	r8,r2,1
    37c8:	d8c00515 	stw	r3,20(sp)
    37cc:	d9c00615 	stw	r7,24(sp)
    37d0:	d8c00304 	addi	r3,sp,12
    37d4:	01c00084 	movi	r7,2
    37d8:	8809883a 	mov	r4,r17
    37dc:	d80d883a 	mov	r6,sp
    37e0:	d8c00015 	stw	r3,0(sp)
    37e4:	dcc00315 	stw	r19,12(sp)
    37e8:	da000215 	stw	r8,8(sp)
    37ec:	d9c00115 	stw	r7,4(sp)
    37f0:	d8800415 	stw	r2,16(sp)
    37f4:	0009a800 	call	9a80 <__sfvwrite_r>
    37f8:	00ffffc4 	movi	r3,-1
    37fc:	10000626 	beq	r2,zero,3818 <_puts_r+0x84>
    3800:	1805883a 	mov	r2,r3
    3804:	dfc00917 	ldw	ra,36(sp)
    3808:	dcc00817 	ldw	r19,32(sp)
    380c:	dc400717 	ldw	r17,28(sp)
    3810:	dec00a04 	addi	sp,sp,40
    3814:	f800283a 	ret
    3818:	00c00284 	movi	r3,10
    381c:	1805883a 	mov	r2,r3
    3820:	dfc00917 	ldw	ra,36(sp)
    3824:	dcc00817 	ldw	r19,32(sp)
    3828:	dc400717 	ldw	r17,28(sp)
    382c:	dec00a04 	addi	sp,sp,40
    3830:	f800283a 	ret

00003834 <puts>:
    3834:	00800074 	movhi	r2,1
    3838:	109a7d04 	addi	r2,r2,27124
    383c:	200b883a 	mov	r5,r4
    3840:	11000017 	ldw	r4,0(r2)
    3844:	00037941 	jmpi	3794 <_puts_r>

00003848 <__srefill_r>:
    3848:	defffd04 	addi	sp,sp,-12
    384c:	dc400115 	stw	r17,4(sp)
    3850:	dc000015 	stw	r16,0(sp)
    3854:	dfc00215 	stw	ra,8(sp)
    3858:	2023883a 	mov	r17,r4
    385c:	2821883a 	mov	r16,r5
    3860:	20000226 	beq	r4,zero,386c <__srefill_r+0x24>
    3864:	20800e17 	ldw	r2,56(r4)
    3868:	10004126 	beq	r2,zero,3970 <__srefill_r+0x128>
    386c:	80c0030b 	ldhu	r3,12(r16)
    3870:	80000115 	stw	zero,4(r16)
    3874:	1880080c 	andi	r2,r3,32
    3878:	1000361e 	bne	r2,zero,3954 <__srefill_r+0x10c>
    387c:	1880010c 	andi	r2,r3,4
    3880:	1000211e 	bne	r2,zero,3908 <__srefill_r+0xc0>
    3884:	1880040c 	andi	r2,r3,16
    3888:	10005026 	beq	r2,zero,39cc <__srefill_r+0x184>
    388c:	1880020c 	andi	r2,r3,8
    3890:	1000541e 	bne	r2,zero,39e4 <__srefill_r+0x19c>
    3894:	8080030b 	ldhu	r2,12(r16)
    3898:	10800114 	ori	r2,r2,4
    389c:	8080030d 	sth	r2,12(r16)
    38a0:	80800417 	ldw	r2,16(r16)
    38a4:	10004526 	beq	r2,zero,39bc <__srefill_r+0x174>
    38a8:	8080030b 	ldhu	r2,12(r16)
    38ac:	108000cc 	andi	r2,r2,3
    38b0:	1000361e 	bne	r2,zero,398c <__srefill_r+0x144>
    38b4:	81800417 	ldw	r6,16(r16)
    38b8:	80c00817 	ldw	r3,32(r16)
    38bc:	81400717 	ldw	r5,28(r16)
    38c0:	81c00517 	ldw	r7,20(r16)
    38c4:	8809883a 	mov	r4,r17
    38c8:	81800015 	stw	r6,0(r16)
    38cc:	183ee83a 	callr	r3
    38d0:	80c0030b 	ldhu	r3,12(r16)
    38d4:	1009883a 	mov	r4,r2
    38d8:	80800115 	stw	r2,4(r16)
    38dc:	00b7ffc4 	movi	r2,-8193
    38e0:	1884703a 	and	r2,r3,r2
    38e4:	8080030d 	sth	r2,12(r16)
    38e8:	0100230e 	bge	zero,r4,3978 <__srefill_r+0x130>
    38ec:	0009883a 	mov	r4,zero
    38f0:	2005883a 	mov	r2,r4
    38f4:	dfc00217 	ldw	ra,8(sp)
    38f8:	dc400117 	ldw	r17,4(sp)
    38fc:	dc000017 	ldw	r16,0(sp)
    3900:	dec00304 	addi	sp,sp,12
    3904:	f800283a 	ret
    3908:	81400c17 	ldw	r5,48(r16)
    390c:	283fe426 	beq	r5,zero,38a0 <__srefill_r+0x58>
    3910:	80801004 	addi	r2,r16,64
    3914:	28800226 	beq	r5,r2,3920 <__srefill_r+0xd8>
    3918:	8809883a 	mov	r4,r17
    391c:	000976c0 	call	976c <_free_r>
    3920:	80800f17 	ldw	r2,60(r16)
    3924:	80000c15 	stw	zero,48(r16)
    3928:	80800115 	stw	r2,4(r16)
    392c:	103fdc26 	beq	r2,zero,38a0 <__srefill_r+0x58>
    3930:	80800e17 	ldw	r2,56(r16)
    3934:	0009883a 	mov	r4,zero
    3938:	80800015 	stw	r2,0(r16)
    393c:	2005883a 	mov	r2,r4
    3940:	dfc00217 	ldw	ra,8(sp)
    3944:	dc400117 	ldw	r17,4(sp)
    3948:	dc000017 	ldw	r16,0(sp)
    394c:	dec00304 	addi	sp,sp,12
    3950:	f800283a 	ret
    3954:	013fffc4 	movi	r4,-1
    3958:	2005883a 	mov	r2,r4
    395c:	dfc00217 	ldw	ra,8(sp)
    3960:	dc400117 	ldw	r17,4(sp)
    3964:	dc000017 	ldw	r16,0(sp)
    3968:	dec00304 	addi	sp,sp,12
    396c:	f800283a 	ret
    3970:	00029c40 	call	29c4 <__sinit>
    3974:	003fbd06 	br	386c <__srefill_r+0x24>
    3978:	20000b1e 	bne	r4,zero,39a8 <__srefill_r+0x160>
    397c:	10800814 	ori	r2,r2,32
    3980:	013fffc4 	movi	r4,-1
    3984:	8080030d 	sth	r2,12(r16)
    3988:	003fd906 	br	38f0 <__srefill_r+0xa8>
    398c:	00800074 	movhi	r2,1
    3990:	109a7e04 	addi	r2,r2,27128
    3994:	11000017 	ldw	r4,0(r2)
    3998:	01400034 	movhi	r5,0
    399c:	294e8304 	addi	r5,r5,14860
    39a0:	0002ce40 	call	2ce4 <_fwalk>
    39a4:	003fc306 	br	38b4 <__srefill_r+0x6c>
    39a8:	10801014 	ori	r2,r2,64
    39ac:	013fffc4 	movi	r4,-1
    39b0:	8080030d 	sth	r2,12(r16)
    39b4:	80000115 	stw	zero,4(r16)
    39b8:	003fcd06 	br	38f0 <__srefill_r+0xa8>
    39bc:	8809883a 	mov	r4,r17
    39c0:	800b883a 	mov	r5,r16
    39c4:	000a0840 	call	a084 <__smakebuf_r>
    39c8:	003fb706 	br	38a8 <__srefill_r+0x60>
    39cc:	18c01014 	ori	r3,r3,64
    39d0:	00800244 	movi	r2,9
    39d4:	013fffc4 	movi	r4,-1
    39d8:	88800015 	stw	r2,0(r17)
    39dc:	80c0030d 	sth	r3,12(r16)
    39e0:	003fc306 	br	38f0 <__srefill_r+0xa8>
    39e4:	8809883a 	mov	r4,r17
    39e8:	800b883a 	mov	r5,r16
    39ec:	00091d40 	call	91d4 <_fflush_r>
    39f0:	103fd81e 	bne	r2,zero,3954 <__srefill_r+0x10c>
    39f4:	8080030b 	ldhu	r2,12(r16)
    39f8:	80000215 	stw	zero,8(r16)
    39fc:	80000615 	stw	zero,24(r16)
    3a00:	10bffdcc 	andi	r2,r2,65527
    3a04:	8080030d 	sth	r2,12(r16)
    3a08:	003fa206 	br	3894 <__srefill_r+0x4c>

00003a0c <lflush>:
    3a0c:	20c0030b 	ldhu	r3,12(r4)
    3a10:	01400244 	movi	r5,9
    3a14:	0005883a 	mov	r2,zero
    3a18:	18c0024c 	andi	r3,r3,9
    3a1c:	19400126 	beq	r3,r5,3a24 <lflush+0x18>
    3a20:	f800283a 	ret
    3a24:	00093d01 	jmpi	93d0 <fflush>

00003a28 <_sbrk_r>:
    3a28:	defffd04 	addi	sp,sp,-12
    3a2c:	dc000015 	stw	r16,0(sp)
    3a30:	040000b4 	movhi	r16,2
    3a34:	84214e04 	addi	r16,r16,-31432
    3a38:	dc400115 	stw	r17,4(sp)
    3a3c:	80000015 	stw	zero,0(r16)
    3a40:	2023883a 	mov	r17,r4
    3a44:	2809883a 	mov	r4,r5
    3a48:	dfc00215 	stw	ra,8(sp)
    3a4c:	00121380 	call	12138 <sbrk>
    3a50:	1007883a 	mov	r3,r2
    3a54:	00bfffc4 	movi	r2,-1
    3a58:	18800626 	beq	r3,r2,3a74 <_sbrk_r+0x4c>
    3a5c:	1805883a 	mov	r2,r3
    3a60:	dfc00217 	ldw	ra,8(sp)
    3a64:	dc400117 	ldw	r17,4(sp)
    3a68:	dc000017 	ldw	r16,0(sp)
    3a6c:	dec00304 	addi	sp,sp,12
    3a70:	f800283a 	ret
    3a74:	80800017 	ldw	r2,0(r16)
    3a78:	103ff826 	beq	r2,zero,3a5c <_sbrk_r+0x34>
    3a7c:	88800015 	stw	r2,0(r17)
    3a80:	1805883a 	mov	r2,r3
    3a84:	dfc00217 	ldw	ra,8(sp)
    3a88:	dc400117 	ldw	r17,4(sp)
    3a8c:	dc000017 	ldw	r16,0(sp)
    3a90:	dec00304 	addi	sp,sp,12
    3a94:	f800283a 	ret

00003a98 <sprintf>:
    3a98:	deffe504 	addi	sp,sp,-108
    3a9c:	2013883a 	mov	r9,r4
    3aa0:	dfc01815 	stw	ra,96(sp)
    3aa4:	d9801915 	stw	r6,100(sp)
    3aa8:	d9c01a15 	stw	r7,104(sp)
    3aac:	d8801904 	addi	r2,sp,100
    3ab0:	d8800015 	stw	r2,0(sp)
    3ab4:	00800074 	movhi	r2,1
    3ab8:	109a7d04 	addi	r2,r2,27124
    3abc:	11000017 	ldw	r4,0(r2)
    3ac0:	d9c00017 	ldw	r7,0(sp)
    3ac4:	00808204 	movi	r2,520
    3ac8:	00e00034 	movhi	r3,32768
    3acc:	18ffffc4 	addi	r3,r3,-1
    3ad0:	280d883a 	mov	r6,r5
    3ad4:	d880040d 	sth	r2,16(sp)
    3ad8:	d9400104 	addi	r5,sp,4
    3adc:	00bfffc4 	movi	r2,-1
    3ae0:	d8c00615 	stw	r3,24(sp)
    3ae4:	d8c00315 	stw	r3,12(sp)
    3ae8:	da400515 	stw	r9,20(sp)
    3aec:	d880048d 	sth	r2,18(sp)
    3af0:	da400115 	stw	r9,4(sp)
    3af4:	00040700 	call	4070 <___vfprintf_internal_r>
    3af8:	d8c00117 	ldw	r3,4(sp)
    3afc:	18000005 	stb	zero,0(r3)
    3b00:	dfc01817 	ldw	ra,96(sp)
    3b04:	dec01b04 	addi	sp,sp,108
    3b08:	f800283a 	ret

00003b0c <_sprintf_r>:
    3b0c:	deffe604 	addi	sp,sp,-104
    3b10:	2813883a 	mov	r9,r5
    3b14:	dfc01815 	stw	ra,96(sp)
    3b18:	d9c01915 	stw	r7,100(sp)
    3b1c:	d8801904 	addi	r2,sp,100
    3b20:	d8800015 	stw	r2,0(sp)
    3b24:	100f883a 	mov	r7,r2
    3b28:	00808204 	movi	r2,520
    3b2c:	00e00034 	movhi	r3,32768
    3b30:	18ffffc4 	addi	r3,r3,-1
    3b34:	d880040d 	sth	r2,16(sp)
    3b38:	d9400104 	addi	r5,sp,4
    3b3c:	00bfffc4 	movi	r2,-1
    3b40:	d8c00615 	stw	r3,24(sp)
    3b44:	d8c00315 	stw	r3,12(sp)
    3b48:	da400515 	stw	r9,20(sp)
    3b4c:	d880048d 	sth	r2,18(sp)
    3b50:	da400115 	stw	r9,4(sp)
    3b54:	00040700 	call	4070 <___vfprintf_internal_r>
    3b58:	d8c00117 	ldw	r3,4(sp)
    3b5c:	18000005 	stb	zero,0(r3)
    3b60:	dfc01817 	ldw	ra,96(sp)
    3b64:	dec01a04 	addi	sp,sp,104
    3b68:	f800283a 	ret

00003b6c <eofread>:
    3b6c:	0005883a 	mov	r2,zero
    3b70:	f800283a 	ret

00003b74 <_sscanf_r>:
    3b74:	deffe404 	addi	sp,sp,-112
    3b78:	dcc01915 	stw	r19,100(sp)
    3b7c:	2027883a 	mov	r19,r4
    3b80:	dfc01a15 	stw	ra,104(sp)
    3b84:	dc401815 	stw	r17,96(sp)
    3b88:	d9c01b15 	stw	r7,108(sp)
    3b8c:	00808104 	movi	r2,516
    3b90:	2809883a 	mov	r4,r5
    3b94:	3023883a 	mov	r17,r6
    3b98:	d9400115 	stw	r5,4(sp)
    3b9c:	d9400515 	stw	r5,20(sp)
    3ba0:	d880040d 	sth	r2,16(sp)
    3ba4:	0003fa40 	call	3fa4 <strlen>
    3ba8:	d8c01b04 	addi	r3,sp,108
    3bac:	d8c00015 	stw	r3,0(sp)
    3bb0:	180f883a 	mov	r7,r3
    3bb4:	023fffc4 	movi	r8,-1
    3bb8:	00c00034 	movhi	r3,0
    3bbc:	18cedb04 	addi	r3,r3,15212
    3bc0:	9809883a 	mov	r4,r19
    3bc4:	880d883a 	mov	r6,r17
    3bc8:	d9400104 	addi	r5,sp,4
    3bcc:	d8800615 	stw	r2,24(sp)
    3bd0:	d8c00915 	stw	r3,36(sp)
    3bd4:	da00048d 	sth	r8,18(sp)
    3bd8:	d8800215 	stw	r2,8(sp)
    3bdc:	d8000d15 	stw	zero,52(sp)
    3be0:	d8001215 	stw	zero,72(sp)
    3be4:	0005f400 	call	5f40 <__svfscanf_r>
    3be8:	dfc01a17 	ldw	ra,104(sp)
    3bec:	dcc01917 	ldw	r19,100(sp)
    3bf0:	dc401817 	ldw	r17,96(sp)
    3bf4:	dec01c04 	addi	sp,sp,112
    3bf8:	f800283a 	ret

00003bfc <sscanf>:
    3bfc:	deffe404 	addi	sp,sp,-112
    3c00:	dfc01915 	stw	ra,100(sp)
    3c04:	dc401815 	stw	r17,96(sp)
    3c08:	d9801a15 	stw	r6,104(sp)
    3c0c:	d9c01b15 	stw	r7,108(sp)
    3c10:	00808104 	movi	r2,516
    3c14:	2823883a 	mov	r17,r5
    3c18:	d9000515 	stw	r4,20(sp)
    3c1c:	d9000115 	stw	r4,4(sp)
    3c20:	d880040d 	sth	r2,16(sp)
    3c24:	0003fa40 	call	3fa4 <strlen>
    3c28:	d8c01a04 	addi	r3,sp,104
    3c2c:	d8c00015 	stw	r3,0(sp)
    3c30:	00c00074 	movhi	r3,1
    3c34:	18da7d04 	addi	r3,r3,27124
    3c38:	19000017 	ldw	r4,0(r3)
    3c3c:	d9c00017 	ldw	r7,0(sp)
    3c40:	00c00034 	movhi	r3,0
    3c44:	18cedb04 	addi	r3,r3,15212
    3c48:	023fffc4 	movi	r8,-1
    3c4c:	880d883a 	mov	r6,r17
    3c50:	d9400104 	addi	r5,sp,4
    3c54:	d8800615 	stw	r2,24(sp)
    3c58:	d8c00915 	stw	r3,36(sp)
    3c5c:	da00048d 	sth	r8,18(sp)
    3c60:	d8800215 	stw	r2,8(sp)
    3c64:	d8000d15 	stw	zero,52(sp)
    3c68:	d8001215 	stw	zero,72(sp)
    3c6c:	0005f400 	call	5f40 <__svfscanf_r>
    3c70:	dfc01917 	ldw	ra,100(sp)
    3c74:	dc401817 	ldw	r17,96(sp)
    3c78:	dec01c04 	addi	sp,sp,112
    3c7c:	f800283a 	ret

00003c80 <__sclose>:
    3c80:	2940038f 	ldh	r5,14(r5)
    3c84:	00078741 	jmpi	7874 <_close_r>

00003c88 <__sseek>:
    3c88:	defffe04 	addi	sp,sp,-8
    3c8c:	dc000015 	stw	r16,0(sp)
    3c90:	2821883a 	mov	r16,r5
    3c94:	2940038f 	ldh	r5,14(r5)
    3c98:	dfc00115 	stw	ra,4(sp)
    3c9c:	000a00c0 	call	a00c <_lseek_r>
    3ca0:	1007883a 	mov	r3,r2
    3ca4:	00bfffc4 	movi	r2,-1
    3ca8:	18800926 	beq	r3,r2,3cd0 <__sseek+0x48>
    3cac:	8080030b 	ldhu	r2,12(r16)
    3cb0:	80c01415 	stw	r3,80(r16)
    3cb4:	10840014 	ori	r2,r2,4096
    3cb8:	8080030d 	sth	r2,12(r16)
    3cbc:	1805883a 	mov	r2,r3
    3cc0:	dfc00117 	ldw	ra,4(sp)
    3cc4:	dc000017 	ldw	r16,0(sp)
    3cc8:	dec00204 	addi	sp,sp,8
    3ccc:	f800283a 	ret
    3cd0:	8080030b 	ldhu	r2,12(r16)
    3cd4:	10bbffcc 	andi	r2,r2,61439
    3cd8:	8080030d 	sth	r2,12(r16)
    3cdc:	1805883a 	mov	r2,r3
    3ce0:	dfc00117 	ldw	ra,4(sp)
    3ce4:	dc000017 	ldw	r16,0(sp)
    3ce8:	dec00204 	addi	sp,sp,8
    3cec:	f800283a 	ret

00003cf0 <__swrite>:
    3cf0:	2880030b 	ldhu	r2,12(r5)
    3cf4:	defffb04 	addi	sp,sp,-20
    3cf8:	dcc00315 	stw	r19,12(sp)
    3cfc:	1080400c 	andi	r2,r2,256
    3d00:	dc800215 	stw	r18,8(sp)
    3d04:	dc400115 	stw	r17,4(sp)
    3d08:	dc000015 	stw	r16,0(sp)
    3d0c:	3027883a 	mov	r19,r6
    3d10:	3825883a 	mov	r18,r7
    3d14:	dfc00415 	stw	ra,16(sp)
    3d18:	2821883a 	mov	r16,r5
    3d1c:	000d883a 	mov	r6,zero
    3d20:	01c00084 	movi	r7,2
    3d24:	2023883a 	mov	r17,r4
    3d28:	10000226 	beq	r2,zero,3d34 <__swrite+0x44>
    3d2c:	2940038f 	ldh	r5,14(r5)
    3d30:	000a00c0 	call	a00c <_lseek_r>
    3d34:	8080030b 	ldhu	r2,12(r16)
    3d38:	8140038f 	ldh	r5,14(r16)
    3d3c:	8809883a 	mov	r4,r17
    3d40:	10bbffcc 	andi	r2,r2,61439
    3d44:	980d883a 	mov	r6,r19
    3d48:	900f883a 	mov	r7,r18
    3d4c:	8080030d 	sth	r2,12(r16)
    3d50:	dfc00417 	ldw	ra,16(sp)
    3d54:	dcc00317 	ldw	r19,12(sp)
    3d58:	dc800217 	ldw	r18,8(sp)
    3d5c:	dc400117 	ldw	r17,4(sp)
    3d60:	dc000017 	ldw	r16,0(sp)
    3d64:	dec00504 	addi	sp,sp,20
    3d68:	00076c01 	jmpi	76c0 <_write_r>

00003d6c <__sread>:
    3d6c:	defffe04 	addi	sp,sp,-8
    3d70:	dc000015 	stw	r16,0(sp)
    3d74:	2821883a 	mov	r16,r5
    3d78:	2940038f 	ldh	r5,14(r5)
    3d7c:	dfc00115 	stw	ra,4(sp)
    3d80:	000b5d80 	call	b5d8 <_read_r>
    3d84:	1007883a 	mov	r3,r2
    3d88:	10000816 	blt	r2,zero,3dac <__sread+0x40>
    3d8c:	80801417 	ldw	r2,80(r16)
    3d90:	10c5883a 	add	r2,r2,r3
    3d94:	80801415 	stw	r2,80(r16)
    3d98:	1805883a 	mov	r2,r3
    3d9c:	dfc00117 	ldw	ra,4(sp)
    3da0:	dc000017 	ldw	r16,0(sp)
    3da4:	dec00204 	addi	sp,sp,8
    3da8:	f800283a 	ret
    3dac:	8080030b 	ldhu	r2,12(r16)
    3db0:	10bbffcc 	andi	r2,r2,61439
    3db4:	8080030d 	sth	r2,12(r16)
    3db8:	1805883a 	mov	r2,r3
    3dbc:	dfc00117 	ldw	ra,4(sp)
    3dc0:	dc000017 	ldw	r16,0(sp)
    3dc4:	dec00204 	addi	sp,sp,8
    3dc8:	f800283a 	ret

00003dcc <strcat>:
    3dcc:	defffe04 	addi	sp,sp,-8
    3dd0:	208000cc 	andi	r2,r4,3
    3dd4:	dc000015 	stw	r16,0(sp)
    3dd8:	dfc00115 	stw	ra,4(sp)
    3ddc:	2021883a 	mov	r16,r4
    3de0:	1000161e 	bne	r2,zero,3e3c <strcat+0x70>
    3de4:	20c00017 	ldw	r3,0(r4)
    3de8:	01bfbff4 	movhi	r6,65279
    3dec:	31bfbfc4 	addi	r6,r6,-257
    3df0:	02202074 	movhi	r8,32897
    3df4:	42202004 	addi	r8,r8,-32640
    3df8:	1985883a 	add	r2,r3,r6
    3dfc:	1204703a 	and	r2,r2,r8
    3e00:	00c6303a 	nor	r3,zero,r3
    3e04:	1886703a 	and	r3,r3,r2
    3e08:	18000c1e 	bne	r3,zero,3e3c <strcat+0x70>
    3e0c:	300f883a 	mov	r7,r6
    3e10:	400d883a 	mov	r6,r8
    3e14:	21000104 	addi	r4,r4,4
    3e18:	20800017 	ldw	r2,0(r4)
    3e1c:	11c7883a 	add	r3,r2,r7
    3e20:	1986703a 	and	r3,r3,r6
    3e24:	0084303a 	nor	r2,zero,r2
    3e28:	10c4703a 	and	r2,r2,r3
    3e2c:	103ff926 	beq	r2,zero,3e14 <strcat+0x48>
    3e30:	20800007 	ldb	r2,0(r4)
    3e34:	10000326 	beq	r2,zero,3e44 <strcat+0x78>
    3e38:	21000044 	addi	r4,r4,1
    3e3c:	20800007 	ldb	r2,0(r4)
    3e40:	103ffd1e 	bne	r2,zero,3e38 <strcat+0x6c>
    3e44:	0003f180 	call	3f18 <strcpy>
    3e48:	8005883a 	mov	r2,r16
    3e4c:	dfc00117 	ldw	ra,4(sp)
    3e50:	dc000017 	ldw	r16,0(sp)
    3e54:	dec00204 	addi	sp,sp,8
    3e58:	f800283a 	ret

00003e5c <strcmp>:
    3e5c:	2144b03a 	or	r2,r4,r5
    3e60:	108000cc 	andi	r2,r2,3
    3e64:	10001d1e 	bne	r2,zero,3edc <strcmp+0x80>
    3e68:	200f883a 	mov	r7,r4
    3e6c:	28800017 	ldw	r2,0(r5)
    3e70:	21000017 	ldw	r4,0(r4)
    3e74:	280d883a 	mov	r6,r5
    3e78:	2080161e 	bne	r4,r2,3ed4 <strcmp+0x78>
    3e7c:	023fbff4 	movhi	r8,65279
    3e80:	423fbfc4 	addi	r8,r8,-257
    3e84:	2207883a 	add	r3,r4,r8
    3e88:	01602074 	movhi	r5,32897
    3e8c:	29602004 	addi	r5,r5,-32640
    3e90:	1946703a 	and	r3,r3,r5
    3e94:	0104303a 	nor	r2,zero,r4
    3e98:	10c4703a 	and	r2,r2,r3
    3e9c:	10001c1e 	bne	r2,zero,3f10 <strcmp+0xb4>
    3ea0:	4013883a 	mov	r9,r8
    3ea4:	2811883a 	mov	r8,r5
    3ea8:	00000106 	br	3eb0 <strcmp+0x54>
    3eac:	1800181e 	bne	r3,zero,3f10 <strcmp+0xb4>
    3eb0:	39c00104 	addi	r7,r7,4
    3eb4:	39000017 	ldw	r4,0(r7)
    3eb8:	31800104 	addi	r6,r6,4
    3ebc:	31400017 	ldw	r5,0(r6)
    3ec0:	2245883a 	add	r2,r4,r9
    3ec4:	1204703a 	and	r2,r2,r8
    3ec8:	0106303a 	nor	r3,zero,r4
    3ecc:	1886703a 	and	r3,r3,r2
    3ed0:	217ff626 	beq	r4,r5,3eac <strcmp+0x50>
    3ed4:	3809883a 	mov	r4,r7
    3ed8:	300b883a 	mov	r5,r6
    3edc:	20c00007 	ldb	r3,0(r4)
    3ee0:	1800051e 	bne	r3,zero,3ef8 <strcmp+0x9c>
    3ee4:	00000606 	br	3f00 <strcmp+0xa4>
    3ee8:	21000044 	addi	r4,r4,1
    3eec:	20c00007 	ldb	r3,0(r4)
    3ef0:	29400044 	addi	r5,r5,1
    3ef4:	18000226 	beq	r3,zero,3f00 <strcmp+0xa4>
    3ef8:	28800007 	ldb	r2,0(r5)
    3efc:	18bffa26 	beq	r3,r2,3ee8 <strcmp+0x8c>
    3f00:	20c00003 	ldbu	r3,0(r4)
    3f04:	28800003 	ldbu	r2,0(r5)
    3f08:	1885c83a 	sub	r2,r3,r2
    3f0c:	f800283a 	ret
    3f10:	0005883a 	mov	r2,zero
    3f14:	f800283a 	ret

00003f18 <strcpy>:
    3f18:	2904b03a 	or	r2,r5,r4
    3f1c:	108000cc 	andi	r2,r2,3
    3f20:	10000826 	beq	r2,zero,3f44 <strcpy+0x2c>
    3f24:	2007883a 	mov	r3,r4
    3f28:	28800003 	ldbu	r2,0(r5)
    3f2c:	29400044 	addi	r5,r5,1
    3f30:	18800005 	stb	r2,0(r3)
    3f34:	18c00044 	addi	r3,r3,1
    3f38:	103ffb1e 	bne	r2,zero,3f28 <strcpy+0x10>
    3f3c:	2005883a 	mov	r2,r4
    3f40:	f800283a 	ret
    3f44:	29800017 	ldw	r6,0(r5)
    3f48:	023fbff4 	movhi	r8,65279
    3f4c:	423fbfc4 	addi	r8,r8,-257
    3f50:	02a02074 	movhi	r10,32897
    3f54:	52a02004 	addi	r10,r10,-32640
    3f58:	3205883a 	add	r2,r6,r8
    3f5c:	0186303a 	nor	r3,zero,r6
    3f60:	10c4703a 	and	r2,r2,r3
    3f64:	1284703a 	and	r2,r2,r10
    3f68:	200f883a 	mov	r7,r4
    3f6c:	10000b1e 	bne	r2,zero,3f9c <strcpy+0x84>
    3f70:	4013883a 	mov	r9,r8
    3f74:	5011883a 	mov	r8,r10
    3f78:	39800015 	stw	r6,0(r7)
    3f7c:	29400104 	addi	r5,r5,4
    3f80:	29800017 	ldw	r6,0(r5)
    3f84:	39c00104 	addi	r7,r7,4
    3f88:	3245883a 	add	r2,r6,r9
    3f8c:	0186303a 	nor	r3,zero,r6
    3f90:	10c4703a 	and	r2,r2,r3
    3f94:	1204703a 	and	r2,r2,r8
    3f98:	103ff726 	beq	r2,zero,3f78 <strcpy+0x60>
    3f9c:	3807883a 	mov	r3,r7
    3fa0:	003fe106 	br	3f28 <strcpy+0x10>

00003fa4 <strlen>:
    3fa4:	208000cc 	andi	r2,r4,3
    3fa8:	2011883a 	mov	r8,r4
    3fac:	1000161e 	bne	r2,zero,4008 <strlen+0x64>
    3fb0:	20c00017 	ldw	r3,0(r4)
    3fb4:	017fbff4 	movhi	r5,65279
    3fb8:	297fbfc4 	addi	r5,r5,-257
    3fbc:	01e02074 	movhi	r7,32897
    3fc0:	39e02004 	addi	r7,r7,-32640
    3fc4:	1945883a 	add	r2,r3,r5
    3fc8:	11c4703a 	and	r2,r2,r7
    3fcc:	00c6303a 	nor	r3,zero,r3
    3fd0:	1886703a 	and	r3,r3,r2
    3fd4:	18000c1e 	bne	r3,zero,4008 <strlen+0x64>
    3fd8:	280d883a 	mov	r6,r5
    3fdc:	380b883a 	mov	r5,r7
    3fe0:	21000104 	addi	r4,r4,4
    3fe4:	20800017 	ldw	r2,0(r4)
    3fe8:	1187883a 	add	r3,r2,r6
    3fec:	1946703a 	and	r3,r3,r5
    3ff0:	0084303a 	nor	r2,zero,r2
    3ff4:	10c4703a 	and	r2,r2,r3
    3ff8:	103ff926 	beq	r2,zero,3fe0 <strlen+0x3c>
    3ffc:	20800007 	ldb	r2,0(r4)
    4000:	10000326 	beq	r2,zero,4010 <strlen+0x6c>
    4004:	21000044 	addi	r4,r4,1
    4008:	20800007 	ldb	r2,0(r4)
    400c:	103ffd1e 	bne	r2,zero,4004 <strlen+0x60>
    4010:	2205c83a 	sub	r2,r4,r8
    4014:	f800283a 	ret

00004018 <__sprint_r>:
    4018:	30800217 	ldw	r2,8(r6)
    401c:	defffe04 	addi	sp,sp,-8
    4020:	dc000015 	stw	r16,0(sp)
    4024:	dfc00115 	stw	ra,4(sp)
    4028:	3021883a 	mov	r16,r6
    402c:	0007883a 	mov	r3,zero
    4030:	1000061e 	bne	r2,zero,404c <__sprint_r+0x34>
    4034:	1805883a 	mov	r2,r3
    4038:	30000115 	stw	zero,4(r6)
    403c:	dfc00117 	ldw	ra,4(sp)
    4040:	dc000017 	ldw	r16,0(sp)
    4044:	dec00204 	addi	sp,sp,8
    4048:	f800283a 	ret
    404c:	0009a800 	call	9a80 <__sfvwrite_r>
    4050:	1007883a 	mov	r3,r2
    4054:	1805883a 	mov	r2,r3
    4058:	80000115 	stw	zero,4(r16)
    405c:	80000215 	stw	zero,8(r16)
    4060:	dfc00117 	ldw	ra,4(sp)
    4064:	dc000017 	ldw	r16,0(sp)
    4068:	dec00204 	addi	sp,sp,8
    406c:	f800283a 	ret

00004070 <___vfprintf_internal_r>:
    4070:	defea404 	addi	sp,sp,-1392
    4074:	dd815815 	stw	r22,1376(sp)
    4078:	dc015215 	stw	r16,1352(sp)
    407c:	d9c15115 	stw	r7,1348(sp)
    4080:	dfc15b15 	stw	ra,1388(sp)
    4084:	df015a15 	stw	fp,1384(sp)
    4088:	ddc15915 	stw	r23,1380(sp)
    408c:	dd415715 	stw	r21,1372(sp)
    4090:	dd015615 	stw	r20,1368(sp)
    4094:	dcc15515 	stw	r19,1364(sp)
    4098:	dc815415 	stw	r18,1360(sp)
    409c:	dc415315 	stw	r17,1356(sp)
    40a0:	282d883a 	mov	r22,r5
    40a4:	3021883a 	mov	r16,r6
    40a8:	d9014f15 	stw	r4,1340(sp)
    40ac:	0009f500 	call	9f50 <_localeconv_r>
    40b0:	10800017 	ldw	r2,0(r2)
    40b4:	d9c15117 	ldw	r7,1348(sp)
    40b8:	d8814915 	stw	r2,1316(sp)
    40bc:	d8814f17 	ldw	r2,1340(sp)
    40c0:	10000226 	beq	r2,zero,40cc <___vfprintf_internal_r+0x5c>
    40c4:	10800e17 	ldw	r2,56(r2)
    40c8:	10020d26 	beq	r2,zero,4900 <___vfprintf_internal_r+0x890>
    40cc:	b080030b 	ldhu	r2,12(r22)
    40d0:	1080020c 	andi	r2,r2,8
    40d4:	10020e26 	beq	r2,zero,4910 <___vfprintf_internal_r+0x8a0>
    40d8:	b0800417 	ldw	r2,16(r22)
    40dc:	10020c26 	beq	r2,zero,4910 <___vfprintf_internal_r+0x8a0>
    40e0:	b200030b 	ldhu	r8,12(r22)
    40e4:	00800284 	movi	r2,10
    40e8:	40c0068c 	andi	r3,r8,26
    40ec:	18802f1e 	bne	r3,r2,41ac <___vfprintf_internal_r+0x13c>
    40f0:	b080038f 	ldh	r2,14(r22)
    40f4:	10002d16 	blt	r2,zero,41ac <___vfprintf_internal_r+0x13c>
    40f8:	b240038b 	ldhu	r9,14(r22)
    40fc:	b2800717 	ldw	r10,28(r22)
    4100:	b2c00917 	ldw	r11,36(r22)
    4104:	d9014f17 	ldw	r4,1340(sp)
    4108:	dc402904 	addi	r17,sp,164
    410c:	d8804004 	addi	r2,sp,256
    4110:	00c10004 	movi	r3,1024
    4114:	423fff4c 	andi	r8,r8,65533
    4118:	800d883a 	mov	r6,r16
    411c:	880b883a 	mov	r5,r17
    4120:	da002c0d 	sth	r8,176(sp)
    4124:	da402c8d 	sth	r9,178(sp)
    4128:	da803015 	stw	r10,192(sp)
    412c:	dac03215 	stw	r11,200(sp)
    4130:	d8802d15 	stw	r2,180(sp)
    4134:	d8c02e15 	stw	r3,184(sp)
    4138:	d8802915 	stw	r2,164(sp)
    413c:	d8c02b15 	stw	r3,172(sp)
    4140:	d8002f15 	stw	zero,188(sp)
    4144:	00040700 	call	4070 <___vfprintf_internal_r>
    4148:	d8814b15 	stw	r2,1324(sp)
    414c:	10000416 	blt	r2,zero,4160 <___vfprintf_internal_r+0xf0>
    4150:	d9014f17 	ldw	r4,1340(sp)
    4154:	880b883a 	mov	r5,r17
    4158:	00091d40 	call	91d4 <_fflush_r>
    415c:	1002321e 	bne	r2,zero,4a28 <___vfprintf_internal_r+0x9b8>
    4160:	d8802c0b 	ldhu	r2,176(sp)
    4164:	1080100c 	andi	r2,r2,64
    4168:	10000326 	beq	r2,zero,4178 <___vfprintf_internal_r+0x108>
    416c:	b080030b 	ldhu	r2,12(r22)
    4170:	10801014 	ori	r2,r2,64
    4174:	b080030d 	sth	r2,12(r22)
    4178:	d8814b17 	ldw	r2,1324(sp)
    417c:	dfc15b17 	ldw	ra,1388(sp)
    4180:	df015a17 	ldw	fp,1384(sp)
    4184:	ddc15917 	ldw	r23,1380(sp)
    4188:	dd815817 	ldw	r22,1376(sp)
    418c:	dd415717 	ldw	r21,1372(sp)
    4190:	dd015617 	ldw	r20,1368(sp)
    4194:	dcc15517 	ldw	r19,1364(sp)
    4198:	dc815417 	ldw	r18,1360(sp)
    419c:	dc415317 	ldw	r17,1356(sp)
    41a0:	dc015217 	ldw	r16,1352(sp)
    41a4:	dec15c04 	addi	sp,sp,1392
    41a8:	f800283a 	ret
    41ac:	0005883a 	mov	r2,zero
    41b0:	0007883a 	mov	r3,zero
    41b4:	dd401904 	addi	r21,sp,100
    41b8:	d8814215 	stw	r2,1288(sp)
    41bc:	802f883a 	mov	r23,r16
    41c0:	d8c14315 	stw	r3,1292(sp)
    41c4:	d8014b15 	stw	zero,1324(sp)
    41c8:	d8014815 	stw	zero,1312(sp)
    41cc:	d8014415 	stw	zero,1296(sp)
    41d0:	d8014715 	stw	zero,1308(sp)
    41d4:	dd400c15 	stw	r21,48(sp)
    41d8:	d8000e15 	stw	zero,56(sp)
    41dc:	d8000d15 	stw	zero,52(sp)
    41e0:	b8800007 	ldb	r2,0(r23)
    41e4:	10001926 	beq	r2,zero,424c <___vfprintf_internal_r+0x1dc>
    41e8:	00c00944 	movi	r3,37
    41ec:	10c01726 	beq	r2,r3,424c <___vfprintf_internal_r+0x1dc>
    41f0:	b821883a 	mov	r16,r23
    41f4:	00000106 	br	41fc <___vfprintf_internal_r+0x18c>
    41f8:	10c00326 	beq	r2,r3,4208 <___vfprintf_internal_r+0x198>
    41fc:	84000044 	addi	r16,r16,1
    4200:	80800007 	ldb	r2,0(r16)
    4204:	103ffc1e 	bne	r2,zero,41f8 <___vfprintf_internal_r+0x188>
    4208:	85e7c83a 	sub	r19,r16,r23
    420c:	98000e26 	beq	r19,zero,4248 <___vfprintf_internal_r+0x1d8>
    4210:	dc800e17 	ldw	r18,56(sp)
    4214:	dc400d17 	ldw	r17,52(sp)
    4218:	008001c4 	movi	r2,7
    421c:	94e5883a 	add	r18,r18,r19
    4220:	8c400044 	addi	r17,r17,1
    4224:	adc00015 	stw	r23,0(r21)
    4228:	dc800e15 	stw	r18,56(sp)
    422c:	acc00115 	stw	r19,4(r21)
    4230:	dc400d15 	stw	r17,52(sp)
    4234:	14428b16 	blt	r2,r17,4c64 <___vfprintf_internal_r+0xbf4>
    4238:	ad400204 	addi	r21,r21,8
    423c:	d9014b17 	ldw	r4,1324(sp)
    4240:	24c9883a 	add	r4,r4,r19
    4244:	d9014b15 	stw	r4,1324(sp)
    4248:	802f883a 	mov	r23,r16
    424c:	b8800007 	ldb	r2,0(r23)
    4250:	10013c26 	beq	r2,zero,4744 <___vfprintf_internal_r+0x6d4>
    4254:	bdc00044 	addi	r23,r23,1
    4258:	d8000405 	stb	zero,16(sp)
    425c:	b8c00007 	ldb	r3,0(r23)
    4260:	04ffffc4 	movi	r19,-1
    4264:	d8014c15 	stw	zero,1328(sp)
    4268:	d8014a15 	stw	zero,1320(sp)
    426c:	d8c14d15 	stw	r3,1332(sp)
    4270:	bdc00044 	addi	r23,r23,1
    4274:	d9414d17 	ldw	r5,1332(sp)
    4278:	00801604 	movi	r2,88
    427c:	28fff804 	addi	r3,r5,-32
    4280:	10c06036 	bltu	r2,r3,4404 <___vfprintf_internal_r+0x394>
    4284:	18c5883a 	add	r2,r3,r3
    4288:	1085883a 	add	r2,r2,r2
    428c:	00c00034 	movhi	r3,0
    4290:	18d0a804 	addi	r3,r3,17056
    4294:	10c5883a 	add	r2,r2,r3
    4298:	11000017 	ldw	r4,0(r2)
    429c:	2000683a 	jmp	r4
    42a0:	00005214 	movui	zero,328
    42a4:	00004404 	movi	zero,272
    42a8:	00004404 	movi	zero,272
    42ac:	00005200 	call	520 <cam_track+0x48>
    42b0:	00004404 	movi	zero,272
    42b4:	00004404 	movi	zero,272
    42b8:	00004404 	movi	zero,272
    42bc:	00004404 	movi	zero,272
    42c0:	00004404 	movi	zero,272
    42c4:	00004404 	movi	zero,272
    42c8:	00004fe0 	cmpeqi	zero,zero,319
    42cc:	000051f0 	cmpltui	zero,zero,327
    42d0:	00004404 	movi	zero,272
    42d4:	00004ff8 	rdprs	zero,zero,319
    42d8:	0000528c 	andi	zero,zero,330
    42dc:	00004404 	movi	zero,272
    42e0:	00005278 	rdprs	zero,zero,329
    42e4:	00005240 	call	524 <cam_track+0x4c>
    42e8:	00005240 	call	524 <cam_track+0x4c>
    42ec:	00005240 	call	524 <cam_track+0x4c>
    42f0:	00005240 	call	524 <cam_track+0x4c>
    42f4:	00005240 	call	524 <cam_track+0x4c>
    42f8:	00005240 	call	524 <cam_track+0x4c>
    42fc:	00005240 	call	524 <cam_track+0x4c>
    4300:	00005240 	call	524 <cam_track+0x4c>
    4304:	00005240 	call	524 <cam_track+0x4c>
    4308:	00004404 	movi	zero,272
    430c:	00004404 	movi	zero,272
    4310:	00004404 	movi	zero,272
    4314:	00004404 	movi	zero,272
    4318:	00004404 	movi	zero,272
    431c:	00004404 	movi	zero,272
    4320:	00004404 	movi	zero,272
    4324:	00004404 	movi	zero,272
    4328:	00004404 	movi	zero,272
    432c:	00004404 	movi	zero,272
    4330:	00004a5c 	xori	zero,zero,297
    4334:	000050c8 	cmpgei	zero,zero,323
    4338:	00004404 	movi	zero,272
    433c:	000050c8 	cmpgei	zero,zero,323
    4340:	00004404 	movi	zero,272
    4344:	00004404 	movi	zero,272
    4348:	00004404 	movi	zero,272
    434c:	00004404 	movi	zero,272
    4350:	0000522c 	andhi	zero,zero,328
    4354:	00004404 	movi	zero,272
    4358:	00004404 	movi	zero,272
    435c:	00004b10 	cmplti	zero,zero,300
    4360:	00004404 	movi	zero,272
    4364:	00004404 	movi	zero,272
    4368:	00004404 	movi	zero,272
    436c:	00004404 	movi	zero,272
    4370:	00004404 	movi	zero,272
    4374:	00004b5c 	xori	zero,zero,301
    4378:	00004404 	movi	zero,272
    437c:	00004404 	movi	zero,272
    4380:	0000517c 	xorhi	zero,zero,325
    4384:	00004404 	movi	zero,272
    4388:	00004404 	movi	zero,272
    438c:	00004404 	movi	zero,272
    4390:	00004404 	movi	zero,272
    4394:	00004404 	movi	zero,272
    4398:	00004404 	movi	zero,272
    439c:	00004404 	movi	zero,272
    43a0:	00004404 	movi	zero,272
    43a4:	00004404 	movi	zero,272
    43a8:	00004404 	movi	zero,272
    43ac:	00005150 	cmplti	zero,zero,325
    43b0:	00004a68 	cmpgeui	zero,zero,297
    43b4:	000050c8 	cmpgei	zero,zero,323
    43b8:	000050c8 	cmpgei	zero,zero,323
    43bc:	000050c8 	cmpgei	zero,zero,323
    43c0:	000050b4 	movhi	zero,322
    43c4:	00004a68 	cmpgeui	zero,zero,297
    43c8:	00004404 	movi	zero,272
    43cc:	00004404 	movi	zero,272
    43d0:	0000503c 	xorhi	zero,zero,320
    43d4:	00004404 	movi	zero,272
    43d8:	0000500c 	andi	zero,zero,320
    43dc:	00004b1c 	xori	zero,zero,300
    43e0:	0000506c 	andhi	zero,zero,321
    43e4:	00005058 	cmpnei	zero,zero,321
    43e8:	00004404 	movi	zero,272
    43ec:	000052e8 	cmpgeui	zero,zero,331
    43f0:	00004404 	movi	zero,272
    43f4:	00004b68 	cmpgeui	zero,zero,301
    43f8:	00004404 	movi	zero,272
    43fc:	00004404 	movi	zero,272
    4400:	000051e0 	cmpeqi	zero,zero,327
    4404:	d9014d17 	ldw	r4,1332(sp)
    4408:	2000ce26 	beq	r4,zero,4744 <___vfprintf_internal_r+0x6d4>
    440c:	01400044 	movi	r5,1
    4410:	d9800f04 	addi	r6,sp,60
    4414:	d9c14015 	stw	r7,1280(sp)
    4418:	d9414515 	stw	r5,1300(sp)
    441c:	d9814115 	stw	r6,1284(sp)
    4420:	280f883a 	mov	r7,r5
    4424:	d9000f05 	stb	r4,60(sp)
    4428:	d8000405 	stb	zero,16(sp)
    442c:	d8014615 	stw	zero,1304(sp)
    4430:	d8c14c17 	ldw	r3,1328(sp)
    4434:	1880008c 	andi	r2,r3,2
    4438:	1005003a 	cmpeq	r2,r2,zero
    443c:	d8815015 	stw	r2,1344(sp)
    4440:	1000031e 	bne	r2,zero,4450 <___vfprintf_internal_r+0x3e0>
    4444:	d9014517 	ldw	r4,1300(sp)
    4448:	21000084 	addi	r4,r4,2
    444c:	d9014515 	stw	r4,1300(sp)
    4450:	d9414c17 	ldw	r5,1328(sp)
    4454:	2940210c 	andi	r5,r5,132
    4458:	d9414e15 	stw	r5,1336(sp)
    445c:	28002d1e 	bne	r5,zero,4514 <___vfprintf_internal_r+0x4a4>
    4460:	d9814a17 	ldw	r6,1320(sp)
    4464:	d8814517 	ldw	r2,1300(sp)
    4468:	30a1c83a 	sub	r16,r6,r2
    446c:	0400290e 	bge	zero,r16,4514 <___vfprintf_internal_r+0x4a4>
    4470:	00800404 	movi	r2,16
    4474:	1404580e 	bge	r2,r16,55d8 <___vfprintf_internal_r+0x1568>
    4478:	dc800e17 	ldw	r18,56(sp)
    447c:	dc400d17 	ldw	r17,52(sp)
    4480:	1027883a 	mov	r19,r2
    4484:	07000074 	movhi	fp,1
    4488:	e712fd84 	addi	fp,fp,19446
    448c:	050001c4 	movi	r20,7
    4490:	00000306 	br	44a0 <___vfprintf_internal_r+0x430>
    4494:	843ffc04 	addi	r16,r16,-16
    4498:	ad400204 	addi	r21,r21,8
    449c:	9c00130e 	bge	r19,r16,44ec <___vfprintf_internal_r+0x47c>
    44a0:	94800404 	addi	r18,r18,16
    44a4:	8c400044 	addi	r17,r17,1
    44a8:	af000015 	stw	fp,0(r21)
    44ac:	acc00115 	stw	r19,4(r21)
    44b0:	dc800e15 	stw	r18,56(sp)
    44b4:	dc400d15 	stw	r17,52(sp)
    44b8:	a47ff60e 	bge	r20,r17,4494 <___vfprintf_internal_r+0x424>
    44bc:	d9014f17 	ldw	r4,1340(sp)
    44c0:	b00b883a 	mov	r5,r22
    44c4:	d9800c04 	addi	r6,sp,48
    44c8:	d9c15115 	stw	r7,1348(sp)
    44cc:	00040180 	call	4018 <__sprint_r>
    44d0:	d9c15117 	ldw	r7,1348(sp)
    44d4:	10009e1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    44d8:	843ffc04 	addi	r16,r16,-16
    44dc:	dc800e17 	ldw	r18,56(sp)
    44e0:	dc400d17 	ldw	r17,52(sp)
    44e4:	dd401904 	addi	r21,sp,100
    44e8:	9c3fed16 	blt	r19,r16,44a0 <___vfprintf_internal_r+0x430>
    44ec:	9425883a 	add	r18,r18,r16
    44f0:	8c400044 	addi	r17,r17,1
    44f4:	008001c4 	movi	r2,7
    44f8:	af000015 	stw	fp,0(r21)
    44fc:	ac000115 	stw	r16,4(r21)
    4500:	dc800e15 	stw	r18,56(sp)
    4504:	dc400d15 	stw	r17,52(sp)
    4508:	1441f516 	blt	r2,r17,4ce0 <___vfprintf_internal_r+0xc70>
    450c:	ad400204 	addi	r21,r21,8
    4510:	00000206 	br	451c <___vfprintf_internal_r+0x4ac>
    4514:	dc800e17 	ldw	r18,56(sp)
    4518:	dc400d17 	ldw	r17,52(sp)
    451c:	d8800407 	ldb	r2,16(sp)
    4520:	10000b26 	beq	r2,zero,4550 <___vfprintf_internal_r+0x4e0>
    4524:	00800044 	movi	r2,1
    4528:	94800044 	addi	r18,r18,1
    452c:	8c400044 	addi	r17,r17,1
    4530:	a8800115 	stw	r2,4(r21)
    4534:	d8c00404 	addi	r3,sp,16
    4538:	008001c4 	movi	r2,7
    453c:	a8c00015 	stw	r3,0(r21)
    4540:	dc800e15 	stw	r18,56(sp)
    4544:	dc400d15 	stw	r17,52(sp)
    4548:	1441da16 	blt	r2,r17,4cb4 <___vfprintf_internal_r+0xc44>
    454c:	ad400204 	addi	r21,r21,8
    4550:	d9015017 	ldw	r4,1344(sp)
    4554:	20000b1e 	bne	r4,zero,4584 <___vfprintf_internal_r+0x514>
    4558:	d8800444 	addi	r2,sp,17
    455c:	94800084 	addi	r18,r18,2
    4560:	8c400044 	addi	r17,r17,1
    4564:	a8800015 	stw	r2,0(r21)
    4568:	00c00084 	movi	r3,2
    456c:	008001c4 	movi	r2,7
    4570:	a8c00115 	stw	r3,4(r21)
    4574:	dc800e15 	stw	r18,56(sp)
    4578:	dc400d15 	stw	r17,52(sp)
    457c:	1441c216 	blt	r2,r17,4c88 <___vfprintf_internal_r+0xc18>
    4580:	ad400204 	addi	r21,r21,8
    4584:	d9414e17 	ldw	r5,1336(sp)
    4588:	00802004 	movi	r2,128
    458c:	2880b126 	beq	r5,r2,4854 <___vfprintf_internal_r+0x7e4>
    4590:	d8c14617 	ldw	r3,1304(sp)
    4594:	19e1c83a 	sub	r16,r3,r7
    4598:	0400260e 	bge	zero,r16,4634 <___vfprintf_internal_r+0x5c4>
    459c:	00800404 	movi	r2,16
    45a0:	1403c90e 	bge	r2,r16,54c8 <___vfprintf_internal_r+0x1458>
    45a4:	1027883a 	mov	r19,r2
    45a8:	07000074 	movhi	fp,1
    45ac:	e712f984 	addi	fp,fp,19430
    45b0:	050001c4 	movi	r20,7
    45b4:	00000306 	br	45c4 <___vfprintf_internal_r+0x554>
    45b8:	843ffc04 	addi	r16,r16,-16
    45bc:	ad400204 	addi	r21,r21,8
    45c0:	9c00130e 	bge	r19,r16,4610 <___vfprintf_internal_r+0x5a0>
    45c4:	94800404 	addi	r18,r18,16
    45c8:	8c400044 	addi	r17,r17,1
    45cc:	af000015 	stw	fp,0(r21)
    45d0:	acc00115 	stw	r19,4(r21)
    45d4:	dc800e15 	stw	r18,56(sp)
    45d8:	dc400d15 	stw	r17,52(sp)
    45dc:	a47ff60e 	bge	r20,r17,45b8 <___vfprintf_internal_r+0x548>
    45e0:	d9014f17 	ldw	r4,1340(sp)
    45e4:	b00b883a 	mov	r5,r22
    45e8:	d9800c04 	addi	r6,sp,48
    45ec:	d9c15115 	stw	r7,1348(sp)
    45f0:	00040180 	call	4018 <__sprint_r>
    45f4:	d9c15117 	ldw	r7,1348(sp)
    45f8:	1000551e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    45fc:	843ffc04 	addi	r16,r16,-16
    4600:	dc800e17 	ldw	r18,56(sp)
    4604:	dc400d17 	ldw	r17,52(sp)
    4608:	dd401904 	addi	r21,sp,100
    460c:	9c3fed16 	blt	r19,r16,45c4 <___vfprintf_internal_r+0x554>
    4610:	9425883a 	add	r18,r18,r16
    4614:	8c400044 	addi	r17,r17,1
    4618:	008001c4 	movi	r2,7
    461c:	af000015 	stw	fp,0(r21)
    4620:	ac000115 	stw	r16,4(r21)
    4624:	dc800e15 	stw	r18,56(sp)
    4628:	dc400d15 	stw	r17,52(sp)
    462c:	14418216 	blt	r2,r17,4c38 <___vfprintf_internal_r+0xbc8>
    4630:	ad400204 	addi	r21,r21,8
    4634:	d9014c17 	ldw	r4,1328(sp)
    4638:	2080400c 	andi	r2,r4,256
    463c:	10004a1e 	bne	r2,zero,4768 <___vfprintf_internal_r+0x6f8>
    4640:	d9414117 	ldw	r5,1284(sp)
    4644:	91e5883a 	add	r18,r18,r7
    4648:	8c400044 	addi	r17,r17,1
    464c:	008001c4 	movi	r2,7
    4650:	a9400015 	stw	r5,0(r21)
    4654:	a9c00115 	stw	r7,4(r21)
    4658:	dc800e15 	stw	r18,56(sp)
    465c:	dc400d15 	stw	r17,52(sp)
    4660:	14416716 	blt	r2,r17,4c00 <___vfprintf_internal_r+0xb90>
    4664:	a8c00204 	addi	r3,r21,8
    4668:	d9814c17 	ldw	r6,1328(sp)
    466c:	3080010c 	andi	r2,r6,4
    4670:	10002826 	beq	r2,zero,4714 <___vfprintf_internal_r+0x6a4>
    4674:	d8814a17 	ldw	r2,1320(sp)
    4678:	d9014517 	ldw	r4,1300(sp)
    467c:	1121c83a 	sub	r16,r2,r4
    4680:	0400240e 	bge	zero,r16,4714 <___vfprintf_internal_r+0x6a4>
    4684:	00800404 	movi	r2,16
    4688:	14044f0e 	bge	r2,r16,57c8 <___vfprintf_internal_r+0x1758>
    468c:	dc400d17 	ldw	r17,52(sp)
    4690:	1027883a 	mov	r19,r2
    4694:	07000074 	movhi	fp,1
    4698:	e712fd84 	addi	fp,fp,19446
    469c:	050001c4 	movi	r20,7
    46a0:	00000306 	br	46b0 <___vfprintf_internal_r+0x640>
    46a4:	843ffc04 	addi	r16,r16,-16
    46a8:	18c00204 	addi	r3,r3,8
    46ac:	9c00110e 	bge	r19,r16,46f4 <___vfprintf_internal_r+0x684>
    46b0:	94800404 	addi	r18,r18,16
    46b4:	8c400044 	addi	r17,r17,1
    46b8:	1f000015 	stw	fp,0(r3)
    46bc:	1cc00115 	stw	r19,4(r3)
    46c0:	dc800e15 	stw	r18,56(sp)
    46c4:	dc400d15 	stw	r17,52(sp)
    46c8:	a47ff60e 	bge	r20,r17,46a4 <___vfprintf_internal_r+0x634>
    46cc:	d9014f17 	ldw	r4,1340(sp)
    46d0:	b00b883a 	mov	r5,r22
    46d4:	d9800c04 	addi	r6,sp,48
    46d8:	00040180 	call	4018 <__sprint_r>
    46dc:	10001c1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    46e0:	843ffc04 	addi	r16,r16,-16
    46e4:	dc800e17 	ldw	r18,56(sp)
    46e8:	dc400d17 	ldw	r17,52(sp)
    46ec:	d8c01904 	addi	r3,sp,100
    46f0:	9c3fef16 	blt	r19,r16,46b0 <___vfprintf_internal_r+0x640>
    46f4:	9425883a 	add	r18,r18,r16
    46f8:	8c400044 	addi	r17,r17,1
    46fc:	008001c4 	movi	r2,7
    4700:	1f000015 	stw	fp,0(r3)
    4704:	1c000115 	stw	r16,4(r3)
    4708:	dc800e15 	stw	r18,56(sp)
    470c:	dc400d15 	stw	r17,52(sp)
    4710:	1440cb16 	blt	r2,r17,4a40 <___vfprintf_internal_r+0x9d0>
    4714:	d8814a17 	ldw	r2,1320(sp)
    4718:	d9414517 	ldw	r5,1300(sp)
    471c:	1140010e 	bge	r2,r5,4724 <___vfprintf_internal_r+0x6b4>
    4720:	2805883a 	mov	r2,r5
    4724:	d9814b17 	ldw	r6,1324(sp)
    4728:	308d883a 	add	r6,r6,r2
    472c:	d9814b15 	stw	r6,1324(sp)
    4730:	90013b1e 	bne	r18,zero,4c20 <___vfprintf_internal_r+0xbb0>
    4734:	d9c14017 	ldw	r7,1280(sp)
    4738:	dd401904 	addi	r21,sp,100
    473c:	d8000d15 	stw	zero,52(sp)
    4740:	003ea706 	br	41e0 <___vfprintf_internal_r+0x170>
    4744:	d8800e17 	ldw	r2,56(sp)
    4748:	10053f1e 	bne	r2,zero,5c48 <___vfprintf_internal_r+0x1bd8>
    474c:	d8000d15 	stw	zero,52(sp)
    4750:	b080030b 	ldhu	r2,12(r22)
    4754:	1080100c 	andi	r2,r2,64
    4758:	103e8726 	beq	r2,zero,4178 <___vfprintf_internal_r+0x108>
    475c:	00bfffc4 	movi	r2,-1
    4760:	d8814b15 	stw	r2,1324(sp)
    4764:	003e8406 	br	4178 <___vfprintf_internal_r+0x108>
    4768:	d9814d17 	ldw	r6,1332(sp)
    476c:	00801944 	movi	r2,101
    4770:	11806e16 	blt	r2,r6,492c <___vfprintf_internal_r+0x8bc>
    4774:	d9414717 	ldw	r5,1308(sp)
    4778:	00c00044 	movi	r3,1
    477c:	1943430e 	bge	r3,r5,548c <___vfprintf_internal_r+0x141c>
    4780:	d8814117 	ldw	r2,1284(sp)
    4784:	94800044 	addi	r18,r18,1
    4788:	8c400044 	addi	r17,r17,1
    478c:	a8800015 	stw	r2,0(r21)
    4790:	008001c4 	movi	r2,7
    4794:	a8c00115 	stw	r3,4(r21)
    4798:	dc800e15 	stw	r18,56(sp)
    479c:	dc400d15 	stw	r17,52(sp)
    47a0:	1441ca16 	blt	r2,r17,4ecc <___vfprintf_internal_r+0xe5c>
    47a4:	a8c00204 	addi	r3,r21,8
    47a8:	d9014917 	ldw	r4,1316(sp)
    47ac:	00800044 	movi	r2,1
    47b0:	94800044 	addi	r18,r18,1
    47b4:	8c400044 	addi	r17,r17,1
    47b8:	18800115 	stw	r2,4(r3)
    47bc:	008001c4 	movi	r2,7
    47c0:	19000015 	stw	r4,0(r3)
    47c4:	dc800e15 	stw	r18,56(sp)
    47c8:	dc400d15 	stw	r17,52(sp)
    47cc:	1441b616 	blt	r2,r17,4ea8 <___vfprintf_internal_r+0xe38>
    47d0:	1cc00204 	addi	r19,r3,8
    47d4:	d9014217 	ldw	r4,1288(sp)
    47d8:	d9414317 	ldw	r5,1292(sp)
    47dc:	000d883a 	mov	r6,zero
    47e0:	000f883a 	mov	r7,zero
    47e4:	00109840 	call	10984 <__nedf2>
    47e8:	10017426 	beq	r2,zero,4dbc <___vfprintf_internal_r+0xd4c>
    47ec:	d9414717 	ldw	r5,1308(sp)
    47f0:	d9814117 	ldw	r6,1284(sp)
    47f4:	8c400044 	addi	r17,r17,1
    47f8:	2c85883a 	add	r2,r5,r18
    47fc:	14bfffc4 	addi	r18,r2,-1
    4800:	28bfffc4 	addi	r2,r5,-1
    4804:	30c00044 	addi	r3,r6,1
    4808:	98800115 	stw	r2,4(r19)
    480c:	008001c4 	movi	r2,7
    4810:	98c00015 	stw	r3,0(r19)
    4814:	dc800e15 	stw	r18,56(sp)
    4818:	dc400d15 	stw	r17,52(sp)
    481c:	14418e16 	blt	r2,r17,4e58 <___vfprintf_internal_r+0xde8>
    4820:	9cc00204 	addi	r19,r19,8
    4824:	d9414817 	ldw	r5,1312(sp)
    4828:	d8800804 	addi	r2,sp,32
    482c:	8c400044 	addi	r17,r17,1
    4830:	9165883a 	add	r18,r18,r5
    4834:	98800015 	stw	r2,0(r19)
    4838:	008001c4 	movi	r2,7
    483c:	99400115 	stw	r5,4(r19)
    4840:	dc800e15 	stw	r18,56(sp)
    4844:	dc400d15 	stw	r17,52(sp)
    4848:	1440ed16 	blt	r2,r17,4c00 <___vfprintf_internal_r+0xb90>
    484c:	98c00204 	addi	r3,r19,8
    4850:	003f8506 	br	4668 <___vfprintf_internal_r+0x5f8>
    4854:	d9814a17 	ldw	r6,1320(sp)
    4858:	d8814517 	ldw	r2,1300(sp)
    485c:	30a1c83a 	sub	r16,r6,r2
    4860:	043f4b0e 	bge	zero,r16,4590 <___vfprintf_internal_r+0x520>
    4864:	00800404 	movi	r2,16
    4868:	1404340e 	bge	r2,r16,593c <___vfprintf_internal_r+0x18cc>
    486c:	1027883a 	mov	r19,r2
    4870:	07000074 	movhi	fp,1
    4874:	e712f984 	addi	fp,fp,19430
    4878:	050001c4 	movi	r20,7
    487c:	00000306 	br	488c <___vfprintf_internal_r+0x81c>
    4880:	843ffc04 	addi	r16,r16,-16
    4884:	ad400204 	addi	r21,r21,8
    4888:	9c00130e 	bge	r19,r16,48d8 <___vfprintf_internal_r+0x868>
    488c:	94800404 	addi	r18,r18,16
    4890:	8c400044 	addi	r17,r17,1
    4894:	af000015 	stw	fp,0(r21)
    4898:	acc00115 	stw	r19,4(r21)
    489c:	dc800e15 	stw	r18,56(sp)
    48a0:	dc400d15 	stw	r17,52(sp)
    48a4:	a47ff60e 	bge	r20,r17,4880 <___vfprintf_internal_r+0x810>
    48a8:	d9014f17 	ldw	r4,1340(sp)
    48ac:	b00b883a 	mov	r5,r22
    48b0:	d9800c04 	addi	r6,sp,48
    48b4:	d9c15115 	stw	r7,1348(sp)
    48b8:	00040180 	call	4018 <__sprint_r>
    48bc:	d9c15117 	ldw	r7,1348(sp)
    48c0:	103fa31e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    48c4:	843ffc04 	addi	r16,r16,-16
    48c8:	dc800e17 	ldw	r18,56(sp)
    48cc:	dc400d17 	ldw	r17,52(sp)
    48d0:	dd401904 	addi	r21,sp,100
    48d4:	9c3fed16 	blt	r19,r16,488c <___vfprintf_internal_r+0x81c>
    48d8:	9425883a 	add	r18,r18,r16
    48dc:	8c400044 	addi	r17,r17,1
    48e0:	008001c4 	movi	r2,7
    48e4:	af000015 	stw	fp,0(r21)
    48e8:	ac000115 	stw	r16,4(r21)
    48ec:	dc800e15 	stw	r18,56(sp)
    48f0:	dc400d15 	stw	r17,52(sp)
    48f4:	14416116 	blt	r2,r17,4e7c <___vfprintf_internal_r+0xe0c>
    48f8:	ad400204 	addi	r21,r21,8
    48fc:	003f2406 	br	4590 <___vfprintf_internal_r+0x520>
    4900:	d9014f17 	ldw	r4,1340(sp)
    4904:	00029c40 	call	29c4 <__sinit>
    4908:	d9c15117 	ldw	r7,1348(sp)
    490c:	003def06 	br	40cc <___vfprintf_internal_r+0x5c>
    4910:	d9014f17 	ldw	r4,1340(sp)
    4914:	b00b883a 	mov	r5,r22
    4918:	d9c15115 	stw	r7,1348(sp)
    491c:	00077380 	call	7738 <__swsetup_r>
    4920:	d9c15117 	ldw	r7,1348(sp)
    4924:	103dee26 	beq	r2,zero,40e0 <___vfprintf_internal_r+0x70>
    4928:	003f8c06 	br	475c <___vfprintf_internal_r+0x6ec>
    492c:	d9014217 	ldw	r4,1288(sp)
    4930:	d9414317 	ldw	r5,1292(sp)
    4934:	000d883a 	mov	r6,zero
    4938:	000f883a 	mov	r7,zero
    493c:	00108fc0 	call	108fc <__eqdf2>
    4940:	1000f21e 	bne	r2,zero,4d0c <___vfprintf_internal_r+0xc9c>
    4944:	00800074 	movhi	r2,1
    4948:	1092f904 	addi	r2,r2,19428
    494c:	94800044 	addi	r18,r18,1
    4950:	8c400044 	addi	r17,r17,1
    4954:	a8800015 	stw	r2,0(r21)
    4958:	00c00044 	movi	r3,1
    495c:	008001c4 	movi	r2,7
    4960:	a8c00115 	stw	r3,4(r21)
    4964:	dc800e15 	stw	r18,56(sp)
    4968:	dc400d15 	stw	r17,52(sp)
    496c:	1442fa16 	blt	r2,r17,5558 <___vfprintf_internal_r+0x14e8>
    4970:	a8c00204 	addi	r3,r21,8
    4974:	d8800517 	ldw	r2,20(sp)
    4978:	d9014717 	ldw	r4,1308(sp)
    497c:	11015c0e 	bge	r2,r4,4ef0 <___vfprintf_internal_r+0xe80>
    4980:	dc400d17 	ldw	r17,52(sp)
    4984:	d9814917 	ldw	r6,1316(sp)
    4988:	00800044 	movi	r2,1
    498c:	94800044 	addi	r18,r18,1
    4990:	8c400044 	addi	r17,r17,1
    4994:	18800115 	stw	r2,4(r3)
    4998:	008001c4 	movi	r2,7
    499c:	19800015 	stw	r6,0(r3)
    49a0:	dc800e15 	stw	r18,56(sp)
    49a4:	dc400d15 	stw	r17,52(sp)
    49a8:	14431016 	blt	r2,r17,55ec <___vfprintf_internal_r+0x157c>
    49ac:	18c00204 	addi	r3,r3,8
    49b0:	d8814717 	ldw	r2,1308(sp)
    49b4:	143fffc4 	addi	r16,r2,-1
    49b8:	043f2b0e 	bge	zero,r16,4668 <___vfprintf_internal_r+0x5f8>
    49bc:	00800404 	movi	r2,16
    49c0:	1402a20e 	bge	r2,r16,544c <___vfprintf_internal_r+0x13dc>
    49c4:	dc400d17 	ldw	r17,52(sp)
    49c8:	1027883a 	mov	r19,r2
    49cc:	07000074 	movhi	fp,1
    49d0:	e712f984 	addi	fp,fp,19430
    49d4:	050001c4 	movi	r20,7
    49d8:	00000306 	br	49e8 <___vfprintf_internal_r+0x978>
    49dc:	18c00204 	addi	r3,r3,8
    49e0:	843ffc04 	addi	r16,r16,-16
    49e4:	9c029c0e 	bge	r19,r16,5458 <___vfprintf_internal_r+0x13e8>
    49e8:	94800404 	addi	r18,r18,16
    49ec:	8c400044 	addi	r17,r17,1
    49f0:	1f000015 	stw	fp,0(r3)
    49f4:	1cc00115 	stw	r19,4(r3)
    49f8:	dc800e15 	stw	r18,56(sp)
    49fc:	dc400d15 	stw	r17,52(sp)
    4a00:	a47ff60e 	bge	r20,r17,49dc <___vfprintf_internal_r+0x96c>
    4a04:	d9014f17 	ldw	r4,1340(sp)
    4a08:	b00b883a 	mov	r5,r22
    4a0c:	d9800c04 	addi	r6,sp,48
    4a10:	00040180 	call	4018 <__sprint_r>
    4a14:	103f4e1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4a18:	dc800e17 	ldw	r18,56(sp)
    4a1c:	dc400d17 	ldw	r17,52(sp)
    4a20:	d8c01904 	addi	r3,sp,100
    4a24:	003fee06 	br	49e0 <___vfprintf_internal_r+0x970>
    4a28:	d8802c0b 	ldhu	r2,176(sp)
    4a2c:	00ffffc4 	movi	r3,-1
    4a30:	d8c14b15 	stw	r3,1324(sp)
    4a34:	1080100c 	andi	r2,r2,64
    4a38:	103dcc1e 	bne	r2,zero,416c <___vfprintf_internal_r+0xfc>
    4a3c:	003dce06 	br	4178 <___vfprintf_internal_r+0x108>
    4a40:	d9014f17 	ldw	r4,1340(sp)
    4a44:	b00b883a 	mov	r5,r22
    4a48:	d9800c04 	addi	r6,sp,48
    4a4c:	00040180 	call	4018 <__sprint_r>
    4a50:	103f3f1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4a54:	dc800e17 	ldw	r18,56(sp)
    4a58:	003f2e06 	br	4714 <___vfprintf_internal_r+0x6a4>
    4a5c:	d9414c17 	ldw	r5,1328(sp)
    4a60:	29400414 	ori	r5,r5,16
    4a64:	d9414c15 	stw	r5,1328(sp)
    4a68:	d9814c17 	ldw	r6,1328(sp)
    4a6c:	3080080c 	andi	r2,r6,32
    4a70:	10014f1e 	bne	r2,zero,4fb0 <___vfprintf_internal_r+0xf40>
    4a74:	d8c14c17 	ldw	r3,1328(sp)
    4a78:	1880040c 	andi	r2,r3,16
    4a7c:	1002ea1e 	bne	r2,zero,5628 <___vfprintf_internal_r+0x15b8>
    4a80:	d9014c17 	ldw	r4,1328(sp)
    4a84:	2080100c 	andi	r2,r4,64
    4a88:	1002e726 	beq	r2,zero,5628 <___vfprintf_internal_r+0x15b8>
    4a8c:	3880000f 	ldh	r2,0(r7)
    4a90:	39c00104 	addi	r7,r7,4
    4a94:	d9c14015 	stw	r7,1280(sp)
    4a98:	1023d7fa 	srai	r17,r2,31
    4a9c:	1021883a 	mov	r16,r2
    4aa0:	88037216 	blt	r17,zero,586c <___vfprintf_internal_r+0x17fc>
    4aa4:	01000044 	movi	r4,1
    4aa8:	98000416 	blt	r19,zero,4abc <___vfprintf_internal_r+0xa4c>
    4aac:	d8c14c17 	ldw	r3,1328(sp)
    4ab0:	00bfdfc4 	movi	r2,-129
    4ab4:	1886703a 	and	r3,r3,r2
    4ab8:	d8c14c15 	stw	r3,1328(sp)
    4abc:	8444b03a 	or	r2,r16,r17
    4ac0:	1002261e 	bne	r2,zero,535c <___vfprintf_internal_r+0x12ec>
    4ac4:	9802251e 	bne	r19,zero,535c <___vfprintf_internal_r+0x12ec>
    4ac8:	20803fcc 	andi	r2,r4,255
    4acc:	10029b26 	beq	r2,zero,553c <___vfprintf_internal_r+0x14cc>
    4ad0:	d8c01904 	addi	r3,sp,100
    4ad4:	dd000f04 	addi	r20,sp,60
    4ad8:	d8c14115 	stw	r3,1284(sp)
    4adc:	d8c14117 	ldw	r3,1284(sp)
    4ae0:	dcc14515 	stw	r19,1300(sp)
    4ae4:	a0c5c83a 	sub	r2,r20,r3
    4ae8:	11c00a04 	addi	r7,r2,40
    4aec:	99c0010e 	bge	r19,r7,4af4 <___vfprintf_internal_r+0xa84>
    4af0:	d9c14515 	stw	r7,1300(sp)
    4af4:	dcc14615 	stw	r19,1304(sp)
    4af8:	d8800407 	ldb	r2,16(sp)
    4afc:	103e4c26 	beq	r2,zero,4430 <___vfprintf_internal_r+0x3c0>
    4b00:	d8814517 	ldw	r2,1300(sp)
    4b04:	10800044 	addi	r2,r2,1
    4b08:	d8814515 	stw	r2,1300(sp)
    4b0c:	003e4806 	br	4430 <___vfprintf_internal_r+0x3c0>
    4b10:	d9814c17 	ldw	r6,1328(sp)
    4b14:	31800414 	ori	r6,r6,16
    4b18:	d9814c15 	stw	r6,1328(sp)
    4b1c:	d8c14c17 	ldw	r3,1328(sp)
    4b20:	1880080c 	andi	r2,r3,32
    4b24:	1001271e 	bne	r2,zero,4fc4 <___vfprintf_internal_r+0xf54>
    4b28:	d9414c17 	ldw	r5,1328(sp)
    4b2c:	2880040c 	andi	r2,r5,16
    4b30:	1002b61e 	bne	r2,zero,560c <___vfprintf_internal_r+0x159c>
    4b34:	d9814c17 	ldw	r6,1328(sp)
    4b38:	3080100c 	andi	r2,r6,64
    4b3c:	1002b326 	beq	r2,zero,560c <___vfprintf_internal_r+0x159c>
    4b40:	3c00000b 	ldhu	r16,0(r7)
    4b44:	0009883a 	mov	r4,zero
    4b48:	39c00104 	addi	r7,r7,4
    4b4c:	0023883a 	mov	r17,zero
    4b50:	d9c14015 	stw	r7,1280(sp)
    4b54:	d8000405 	stb	zero,16(sp)
    4b58:	003fd306 	br	4aa8 <___vfprintf_internal_r+0xa38>
    4b5c:	d9014c17 	ldw	r4,1328(sp)
    4b60:	21000414 	ori	r4,r4,16
    4b64:	d9014c15 	stw	r4,1328(sp)
    4b68:	d9414c17 	ldw	r5,1328(sp)
    4b6c:	2880080c 	andi	r2,r5,32
    4b70:	1001081e 	bne	r2,zero,4f94 <___vfprintf_internal_r+0xf24>
    4b74:	d8c14c17 	ldw	r3,1328(sp)
    4b78:	1880040c 	andi	r2,r3,16
    4b7c:	1002b01e 	bne	r2,zero,5640 <___vfprintf_internal_r+0x15d0>
    4b80:	d9014c17 	ldw	r4,1328(sp)
    4b84:	2080100c 	andi	r2,r4,64
    4b88:	1002ad26 	beq	r2,zero,5640 <___vfprintf_internal_r+0x15d0>
    4b8c:	3c00000b 	ldhu	r16,0(r7)
    4b90:	01000044 	movi	r4,1
    4b94:	39c00104 	addi	r7,r7,4
    4b98:	0023883a 	mov	r17,zero
    4b9c:	d9c14015 	stw	r7,1280(sp)
    4ba0:	d8000405 	stb	zero,16(sp)
    4ba4:	003fc006 	br	4aa8 <___vfprintf_internal_r+0xa38>
    4ba8:	d9014f17 	ldw	r4,1340(sp)
    4bac:	b00b883a 	mov	r5,r22
    4bb0:	d9800c04 	addi	r6,sp,48
    4bb4:	00040180 	call	4018 <__sprint_r>
    4bb8:	103ee51e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4bbc:	dc800e17 	ldw	r18,56(sp)
    4bc0:	d8c01904 	addi	r3,sp,100
    4bc4:	d9814c17 	ldw	r6,1328(sp)
    4bc8:	3080004c 	andi	r2,r6,1
    4bcc:	1005003a 	cmpeq	r2,r2,zero
    4bd0:	103ea51e 	bne	r2,zero,4668 <___vfprintf_internal_r+0x5f8>
    4bd4:	00800044 	movi	r2,1
    4bd8:	dc400d17 	ldw	r17,52(sp)
    4bdc:	18800115 	stw	r2,4(r3)
    4be0:	d8814917 	ldw	r2,1316(sp)
    4be4:	94800044 	addi	r18,r18,1
    4be8:	8c400044 	addi	r17,r17,1
    4bec:	18800015 	stw	r2,0(r3)
    4bf0:	008001c4 	movi	r2,7
    4bf4:	dc800e15 	stw	r18,56(sp)
    4bf8:	dc400d15 	stw	r17,52(sp)
    4bfc:	14421e0e 	bge	r2,r17,5478 <___vfprintf_internal_r+0x1408>
    4c00:	d9014f17 	ldw	r4,1340(sp)
    4c04:	b00b883a 	mov	r5,r22
    4c08:	d9800c04 	addi	r6,sp,48
    4c0c:	00040180 	call	4018 <__sprint_r>
    4c10:	103ecf1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4c14:	dc800e17 	ldw	r18,56(sp)
    4c18:	d8c01904 	addi	r3,sp,100
    4c1c:	003e9206 	br	4668 <___vfprintf_internal_r+0x5f8>
    4c20:	d9014f17 	ldw	r4,1340(sp)
    4c24:	b00b883a 	mov	r5,r22
    4c28:	d9800c04 	addi	r6,sp,48
    4c2c:	00040180 	call	4018 <__sprint_r>
    4c30:	103ec026 	beq	r2,zero,4734 <___vfprintf_internal_r+0x6c4>
    4c34:	003ec606 	br	4750 <___vfprintf_internal_r+0x6e0>
    4c38:	d9014f17 	ldw	r4,1340(sp)
    4c3c:	b00b883a 	mov	r5,r22
    4c40:	d9800c04 	addi	r6,sp,48
    4c44:	d9c15115 	stw	r7,1348(sp)
    4c48:	00040180 	call	4018 <__sprint_r>
    4c4c:	d9c15117 	ldw	r7,1348(sp)
    4c50:	103ebf1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4c54:	dc800e17 	ldw	r18,56(sp)
    4c58:	dc400d17 	ldw	r17,52(sp)
    4c5c:	dd401904 	addi	r21,sp,100
    4c60:	003e7406 	br	4634 <___vfprintf_internal_r+0x5c4>
    4c64:	d9014f17 	ldw	r4,1340(sp)
    4c68:	b00b883a 	mov	r5,r22
    4c6c:	d9800c04 	addi	r6,sp,48
    4c70:	d9c15115 	stw	r7,1348(sp)
    4c74:	00040180 	call	4018 <__sprint_r>
    4c78:	d9c15117 	ldw	r7,1348(sp)
    4c7c:	103eb41e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4c80:	dd401904 	addi	r21,sp,100
    4c84:	003d6d06 	br	423c <___vfprintf_internal_r+0x1cc>
    4c88:	d9014f17 	ldw	r4,1340(sp)
    4c8c:	b00b883a 	mov	r5,r22
    4c90:	d9800c04 	addi	r6,sp,48
    4c94:	d9c15115 	stw	r7,1348(sp)
    4c98:	00040180 	call	4018 <__sprint_r>
    4c9c:	d9c15117 	ldw	r7,1348(sp)
    4ca0:	103eab1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4ca4:	dc800e17 	ldw	r18,56(sp)
    4ca8:	dc400d17 	ldw	r17,52(sp)
    4cac:	dd401904 	addi	r21,sp,100
    4cb0:	003e3406 	br	4584 <___vfprintf_internal_r+0x514>
    4cb4:	d9014f17 	ldw	r4,1340(sp)
    4cb8:	b00b883a 	mov	r5,r22
    4cbc:	d9800c04 	addi	r6,sp,48
    4cc0:	d9c15115 	stw	r7,1348(sp)
    4cc4:	00040180 	call	4018 <__sprint_r>
    4cc8:	d9c15117 	ldw	r7,1348(sp)
    4ccc:	103ea01e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4cd0:	dc800e17 	ldw	r18,56(sp)
    4cd4:	dc400d17 	ldw	r17,52(sp)
    4cd8:	dd401904 	addi	r21,sp,100
    4cdc:	003e1c06 	br	4550 <___vfprintf_internal_r+0x4e0>
    4ce0:	d9014f17 	ldw	r4,1340(sp)
    4ce4:	b00b883a 	mov	r5,r22
    4ce8:	d9800c04 	addi	r6,sp,48
    4cec:	d9c15115 	stw	r7,1348(sp)
    4cf0:	00040180 	call	4018 <__sprint_r>
    4cf4:	d9c15117 	ldw	r7,1348(sp)
    4cf8:	103e951e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4cfc:	dc800e17 	ldw	r18,56(sp)
    4d00:	dc400d17 	ldw	r17,52(sp)
    4d04:	dd401904 	addi	r21,sp,100
    4d08:	003e0406 	br	451c <___vfprintf_internal_r+0x4ac>
    4d0c:	d9000517 	ldw	r4,20(sp)
    4d10:	0102520e 	bge	zero,r4,565c <___vfprintf_internal_r+0x15ec>
    4d14:	d9814717 	ldw	r6,1308(sp)
    4d18:	21807a16 	blt	r4,r6,4f04 <___vfprintf_internal_r+0xe94>
    4d1c:	d8814117 	ldw	r2,1284(sp)
    4d20:	91a5883a 	add	r18,r18,r6
    4d24:	8c400044 	addi	r17,r17,1
    4d28:	a8800015 	stw	r2,0(r21)
    4d2c:	008001c4 	movi	r2,7
    4d30:	a9800115 	stw	r6,4(r21)
    4d34:	dc800e15 	stw	r18,56(sp)
    4d38:	dc400d15 	stw	r17,52(sp)
    4d3c:	1442f616 	blt	r2,r17,5918 <___vfprintf_internal_r+0x18a8>
    4d40:	a8c00204 	addi	r3,r21,8
    4d44:	d9414717 	ldw	r5,1308(sp)
    4d48:	2161c83a 	sub	r16,r4,r5
    4d4c:	043f9d0e 	bge	zero,r16,4bc4 <___vfprintf_internal_r+0xb54>
    4d50:	00800404 	movi	r2,16
    4d54:	1402130e 	bge	r2,r16,55a4 <___vfprintf_internal_r+0x1534>
    4d58:	dc400d17 	ldw	r17,52(sp)
    4d5c:	1027883a 	mov	r19,r2
    4d60:	07000074 	movhi	fp,1
    4d64:	e712f984 	addi	fp,fp,19430
    4d68:	050001c4 	movi	r20,7
    4d6c:	00000306 	br	4d7c <___vfprintf_internal_r+0xd0c>
    4d70:	18c00204 	addi	r3,r3,8
    4d74:	843ffc04 	addi	r16,r16,-16
    4d78:	9c020d0e 	bge	r19,r16,55b0 <___vfprintf_internal_r+0x1540>
    4d7c:	94800404 	addi	r18,r18,16
    4d80:	8c400044 	addi	r17,r17,1
    4d84:	1f000015 	stw	fp,0(r3)
    4d88:	1cc00115 	stw	r19,4(r3)
    4d8c:	dc800e15 	stw	r18,56(sp)
    4d90:	dc400d15 	stw	r17,52(sp)
    4d94:	a47ff60e 	bge	r20,r17,4d70 <___vfprintf_internal_r+0xd00>
    4d98:	d9014f17 	ldw	r4,1340(sp)
    4d9c:	b00b883a 	mov	r5,r22
    4da0:	d9800c04 	addi	r6,sp,48
    4da4:	00040180 	call	4018 <__sprint_r>
    4da8:	103e691e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4dac:	dc800e17 	ldw	r18,56(sp)
    4db0:	dc400d17 	ldw	r17,52(sp)
    4db4:	d8c01904 	addi	r3,sp,100
    4db8:	003fee06 	br	4d74 <___vfprintf_internal_r+0xd04>
    4dbc:	d8814717 	ldw	r2,1308(sp)
    4dc0:	143fffc4 	addi	r16,r2,-1
    4dc4:	043e970e 	bge	zero,r16,4824 <___vfprintf_internal_r+0x7b4>
    4dc8:	00800404 	movi	r2,16
    4dcc:	1400180e 	bge	r2,r16,4e30 <___vfprintf_internal_r+0xdc0>
    4dd0:	1029883a 	mov	r20,r2
    4dd4:	07000074 	movhi	fp,1
    4dd8:	e712f984 	addi	fp,fp,19430
    4ddc:	054001c4 	movi	r21,7
    4de0:	00000306 	br	4df0 <___vfprintf_internal_r+0xd80>
    4de4:	9cc00204 	addi	r19,r19,8
    4de8:	843ffc04 	addi	r16,r16,-16
    4dec:	a400120e 	bge	r20,r16,4e38 <___vfprintf_internal_r+0xdc8>
    4df0:	94800404 	addi	r18,r18,16
    4df4:	8c400044 	addi	r17,r17,1
    4df8:	9f000015 	stw	fp,0(r19)
    4dfc:	9d000115 	stw	r20,4(r19)
    4e00:	dc800e15 	stw	r18,56(sp)
    4e04:	dc400d15 	stw	r17,52(sp)
    4e08:	ac7ff60e 	bge	r21,r17,4de4 <___vfprintf_internal_r+0xd74>
    4e0c:	d9014f17 	ldw	r4,1340(sp)
    4e10:	b00b883a 	mov	r5,r22
    4e14:	d9800c04 	addi	r6,sp,48
    4e18:	00040180 	call	4018 <__sprint_r>
    4e1c:	103e4c1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4e20:	dc800e17 	ldw	r18,56(sp)
    4e24:	dc400d17 	ldw	r17,52(sp)
    4e28:	dcc01904 	addi	r19,sp,100
    4e2c:	003fee06 	br	4de8 <___vfprintf_internal_r+0xd78>
    4e30:	07000074 	movhi	fp,1
    4e34:	e712f984 	addi	fp,fp,19430
    4e38:	9425883a 	add	r18,r18,r16
    4e3c:	8c400044 	addi	r17,r17,1
    4e40:	008001c4 	movi	r2,7
    4e44:	9f000015 	stw	fp,0(r19)
    4e48:	9c000115 	stw	r16,4(r19)
    4e4c:	dc800e15 	stw	r18,56(sp)
    4e50:	dc400d15 	stw	r17,52(sp)
    4e54:	147e720e 	bge	r2,r17,4820 <___vfprintf_internal_r+0x7b0>
    4e58:	d9014f17 	ldw	r4,1340(sp)
    4e5c:	b00b883a 	mov	r5,r22
    4e60:	d9800c04 	addi	r6,sp,48
    4e64:	00040180 	call	4018 <__sprint_r>
    4e68:	103e391e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4e6c:	dc800e17 	ldw	r18,56(sp)
    4e70:	dc400d17 	ldw	r17,52(sp)
    4e74:	dcc01904 	addi	r19,sp,100
    4e78:	003e6a06 	br	4824 <___vfprintf_internal_r+0x7b4>
    4e7c:	d9014f17 	ldw	r4,1340(sp)
    4e80:	b00b883a 	mov	r5,r22
    4e84:	d9800c04 	addi	r6,sp,48
    4e88:	d9c15115 	stw	r7,1348(sp)
    4e8c:	00040180 	call	4018 <__sprint_r>
    4e90:	d9c15117 	ldw	r7,1348(sp)
    4e94:	103e2e1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4e98:	dc800e17 	ldw	r18,56(sp)
    4e9c:	dc400d17 	ldw	r17,52(sp)
    4ea0:	dd401904 	addi	r21,sp,100
    4ea4:	003dba06 	br	4590 <___vfprintf_internal_r+0x520>
    4ea8:	d9014f17 	ldw	r4,1340(sp)
    4eac:	b00b883a 	mov	r5,r22
    4eb0:	d9800c04 	addi	r6,sp,48
    4eb4:	00040180 	call	4018 <__sprint_r>
    4eb8:	103e251e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4ebc:	dc800e17 	ldw	r18,56(sp)
    4ec0:	dc400d17 	ldw	r17,52(sp)
    4ec4:	dcc01904 	addi	r19,sp,100
    4ec8:	003e4206 	br	47d4 <___vfprintf_internal_r+0x764>
    4ecc:	d9014f17 	ldw	r4,1340(sp)
    4ed0:	b00b883a 	mov	r5,r22
    4ed4:	d9800c04 	addi	r6,sp,48
    4ed8:	00040180 	call	4018 <__sprint_r>
    4edc:	103e1c1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    4ee0:	dc800e17 	ldw	r18,56(sp)
    4ee4:	dc400d17 	ldw	r17,52(sp)
    4ee8:	d8c01904 	addi	r3,sp,100
    4eec:	003e2e06 	br	47a8 <___vfprintf_internal_r+0x738>
    4ef0:	d9414c17 	ldw	r5,1328(sp)
    4ef4:	2880004c 	andi	r2,r5,1
    4ef8:	1005003a 	cmpeq	r2,r2,zero
    4efc:	103dda1e 	bne	r2,zero,4668 <___vfprintf_internal_r+0x5f8>
    4f00:	003e9f06 	br	4980 <___vfprintf_internal_r+0x910>
    4f04:	d8c14117 	ldw	r3,1284(sp)
    4f08:	9125883a 	add	r18,r18,r4
    4f0c:	8c400044 	addi	r17,r17,1
    4f10:	008001c4 	movi	r2,7
    4f14:	a8c00015 	stw	r3,0(r21)
    4f18:	a9000115 	stw	r4,4(r21)
    4f1c:	dc800e15 	stw	r18,56(sp)
    4f20:	dc400d15 	stw	r17,52(sp)
    4f24:	14426616 	blt	r2,r17,58c0 <___vfprintf_internal_r+0x1850>
    4f28:	a8c00204 	addi	r3,r21,8
    4f2c:	d9414917 	ldw	r5,1316(sp)
    4f30:	00800044 	movi	r2,1
    4f34:	94800044 	addi	r18,r18,1
    4f38:	8c400044 	addi	r17,r17,1
    4f3c:	18800115 	stw	r2,4(r3)
    4f40:	008001c4 	movi	r2,7
    4f44:	19400015 	stw	r5,0(r3)
    4f48:	dc800e15 	stw	r18,56(sp)
    4f4c:	dc400d15 	stw	r17,52(sp)
    4f50:	2021883a 	mov	r16,r4
    4f54:	14425016 	blt	r2,r17,5898 <___vfprintf_internal_r+0x1828>
    4f58:	19400204 	addi	r5,r3,8
    4f5c:	d9814717 	ldw	r6,1308(sp)
    4f60:	8c400044 	addi	r17,r17,1
    4f64:	dc400d15 	stw	r17,52(sp)
    4f68:	3107c83a 	sub	r3,r6,r4
    4f6c:	d9014117 	ldw	r4,1284(sp)
    4f70:	90e5883a 	add	r18,r18,r3
    4f74:	28c00115 	stw	r3,4(r5)
    4f78:	8105883a 	add	r2,r16,r4
    4f7c:	28800015 	stw	r2,0(r5)
    4f80:	008001c4 	movi	r2,7
    4f84:	dc800e15 	stw	r18,56(sp)
    4f88:	147f1d16 	blt	r2,r17,4c00 <___vfprintf_internal_r+0xb90>
    4f8c:	28c00204 	addi	r3,r5,8
    4f90:	003db506 	br	4668 <___vfprintf_internal_r+0x5f8>
    4f94:	3c000017 	ldw	r16,0(r7)
    4f98:	3c400117 	ldw	r17,4(r7)
    4f9c:	39800204 	addi	r6,r7,8
    4fa0:	01000044 	movi	r4,1
    4fa4:	d9814015 	stw	r6,1280(sp)
    4fa8:	d8000405 	stb	zero,16(sp)
    4fac:	003ebe06 	br	4aa8 <___vfprintf_internal_r+0xa38>
    4fb0:	3c000017 	ldw	r16,0(r7)
    4fb4:	3c400117 	ldw	r17,4(r7)
    4fb8:	38800204 	addi	r2,r7,8
    4fbc:	d8814015 	stw	r2,1280(sp)
    4fc0:	003eb706 	br	4aa0 <___vfprintf_internal_r+0xa30>
    4fc4:	3c000017 	ldw	r16,0(r7)
    4fc8:	3c400117 	ldw	r17,4(r7)
    4fcc:	39000204 	addi	r4,r7,8
    4fd0:	d9014015 	stw	r4,1280(sp)
    4fd4:	0009883a 	mov	r4,zero
    4fd8:	d8000405 	stb	zero,16(sp)
    4fdc:	003eb206 	br	4aa8 <___vfprintf_internal_r+0xa38>
    4fe0:	38c00017 	ldw	r3,0(r7)
    4fe4:	39c00104 	addi	r7,r7,4
    4fe8:	d8c14a15 	stw	r3,1320(sp)
    4fec:	1800d10e 	bge	r3,zero,5334 <___vfprintf_internal_r+0x12c4>
    4ff0:	00c7c83a 	sub	r3,zero,r3
    4ff4:	d8c14a15 	stw	r3,1320(sp)
    4ff8:	d9014c17 	ldw	r4,1328(sp)
    4ffc:	b8c00007 	ldb	r3,0(r23)
    5000:	21000114 	ori	r4,r4,4
    5004:	d9014c15 	stw	r4,1328(sp)
    5008:	003c9806 	br	426c <___vfprintf_internal_r+0x1fc>
    500c:	d9814c17 	ldw	r6,1328(sp)
    5010:	3080080c 	andi	r2,r6,32
    5014:	1001f026 	beq	r2,zero,57d8 <___vfprintf_internal_r+0x1768>
    5018:	d9014b17 	ldw	r4,1324(sp)
    501c:	38800017 	ldw	r2,0(r7)
    5020:	39c00104 	addi	r7,r7,4
    5024:	d9c14015 	stw	r7,1280(sp)
    5028:	2007d7fa 	srai	r3,r4,31
    502c:	d9c14017 	ldw	r7,1280(sp)
    5030:	11000015 	stw	r4,0(r2)
    5034:	10c00115 	stw	r3,4(r2)
    5038:	003c6906 	br	41e0 <___vfprintf_internal_r+0x170>
    503c:	b8c00007 	ldb	r3,0(r23)
    5040:	00801b04 	movi	r2,108
    5044:	18824f26 	beq	r3,r2,5984 <___vfprintf_internal_r+0x1914>
    5048:	d9414c17 	ldw	r5,1328(sp)
    504c:	29400414 	ori	r5,r5,16
    5050:	d9414c15 	stw	r5,1328(sp)
    5054:	003c8506 	br	426c <___vfprintf_internal_r+0x1fc>
    5058:	d9814c17 	ldw	r6,1328(sp)
    505c:	b8c00007 	ldb	r3,0(r23)
    5060:	31800814 	ori	r6,r6,32
    5064:	d9814c15 	stw	r6,1328(sp)
    5068:	003c8006 	br	426c <___vfprintf_internal_r+0x1fc>
    506c:	d8814c17 	ldw	r2,1328(sp)
    5070:	3c000017 	ldw	r16,0(r7)
    5074:	00c01e04 	movi	r3,120
    5078:	10800094 	ori	r2,r2,2
    507c:	d8814c15 	stw	r2,1328(sp)
    5080:	39c00104 	addi	r7,r7,4
    5084:	01400074 	movhi	r5,1
    5088:	2952e204 	addi	r5,r5,19336
    508c:	00800c04 	movi	r2,48
    5090:	0023883a 	mov	r17,zero
    5094:	01000084 	movi	r4,2
    5098:	d9c14015 	stw	r7,1280(sp)
    509c:	d8c14d15 	stw	r3,1332(sp)
    50a0:	d9414415 	stw	r5,1296(sp)
    50a4:	d8800445 	stb	r2,17(sp)
    50a8:	d8c00485 	stb	r3,18(sp)
    50ac:	d8000405 	stb	zero,16(sp)
    50b0:	003e7d06 	br	4aa8 <___vfprintf_internal_r+0xa38>
    50b4:	d8814c17 	ldw	r2,1328(sp)
    50b8:	b8c00007 	ldb	r3,0(r23)
    50bc:	10801014 	ori	r2,r2,64
    50c0:	d8814c15 	stw	r2,1328(sp)
    50c4:	003c6906 	br	426c <___vfprintf_internal_r+0x1fc>
    50c8:	d9414c17 	ldw	r5,1328(sp)
    50cc:	2880020c 	andi	r2,r5,8
    50d0:	1001df26 	beq	r2,zero,5850 <___vfprintf_internal_r+0x17e0>
    50d4:	39800017 	ldw	r6,0(r7)
    50d8:	38800204 	addi	r2,r7,8
    50dc:	d8814015 	stw	r2,1280(sp)
    50e0:	d9814215 	stw	r6,1288(sp)
    50e4:	39c00117 	ldw	r7,4(r7)
    50e8:	d9c14315 	stw	r7,1292(sp)
    50ec:	d9014217 	ldw	r4,1288(sp)
    50f0:	d9414317 	ldw	r5,1292(sp)
    50f4:	000bc440 	call	bc44 <__isinfd>
    50f8:	10021726 	beq	r2,zero,5958 <___vfprintf_internal_r+0x18e8>
    50fc:	d9014217 	ldw	r4,1288(sp)
    5100:	d9414317 	ldw	r5,1292(sp)
    5104:	000d883a 	mov	r6,zero
    5108:	000f883a 	mov	r7,zero
    510c:	0010b1c0 	call	10b1c <__ltdf2>
    5110:	1002ca16 	blt	r2,zero,5c3c <___vfprintf_internal_r+0x1bcc>
    5114:	d9414d17 	ldw	r5,1332(sp)
    5118:	008011c4 	movi	r2,71
    511c:	11420a16 	blt	r2,r5,5948 <___vfprintf_internal_r+0x18d8>
    5120:	01800074 	movhi	r6,1
    5124:	3192e704 	addi	r6,r6,19356
    5128:	d9814115 	stw	r6,1284(sp)
    512c:	d9014c17 	ldw	r4,1328(sp)
    5130:	00c000c4 	movi	r3,3
    5134:	00bfdfc4 	movi	r2,-129
    5138:	2088703a 	and	r4,r4,r2
    513c:	180f883a 	mov	r7,r3
    5140:	d8c14515 	stw	r3,1300(sp)
    5144:	d9014c15 	stw	r4,1328(sp)
    5148:	d8014615 	stw	zero,1304(sp)
    514c:	003e6a06 	br	4af8 <___vfprintf_internal_r+0xa88>
    5150:	38800017 	ldw	r2,0(r7)
    5154:	00c00044 	movi	r3,1
    5158:	39c00104 	addi	r7,r7,4
    515c:	d9c14015 	stw	r7,1280(sp)
    5160:	d9000f04 	addi	r4,sp,60
    5164:	180f883a 	mov	r7,r3
    5168:	d8c14515 	stw	r3,1300(sp)
    516c:	d9014115 	stw	r4,1284(sp)
    5170:	d8800f05 	stb	r2,60(sp)
    5174:	d8000405 	stb	zero,16(sp)
    5178:	003cac06 	br	442c <___vfprintf_internal_r+0x3bc>
    517c:	01400074 	movhi	r5,1
    5180:	2952ed04 	addi	r5,r5,19380
    5184:	d9414415 	stw	r5,1296(sp)
    5188:	d9814c17 	ldw	r6,1328(sp)
    518c:	3080080c 	andi	r2,r6,32
    5190:	1000f926 	beq	r2,zero,5578 <___vfprintf_internal_r+0x1508>
    5194:	3c000017 	ldw	r16,0(r7)
    5198:	3c400117 	ldw	r17,4(r7)
    519c:	38800204 	addi	r2,r7,8
    51a0:	d8814015 	stw	r2,1280(sp)
    51a4:	d9414c17 	ldw	r5,1328(sp)
    51a8:	2880004c 	andi	r2,r5,1
    51ac:	1005003a 	cmpeq	r2,r2,zero
    51b0:	1000b31e 	bne	r2,zero,5480 <___vfprintf_internal_r+0x1410>
    51b4:	8444b03a 	or	r2,r16,r17
    51b8:	1000b126 	beq	r2,zero,5480 <___vfprintf_internal_r+0x1410>
    51bc:	d9814d17 	ldw	r6,1332(sp)
    51c0:	29400094 	ori	r5,r5,2
    51c4:	00800c04 	movi	r2,48
    51c8:	01000084 	movi	r4,2
    51cc:	d9414c15 	stw	r5,1328(sp)
    51d0:	d8800445 	stb	r2,17(sp)
    51d4:	d9800485 	stb	r6,18(sp)
    51d8:	d8000405 	stb	zero,16(sp)
    51dc:	003e3206 	br	4aa8 <___vfprintf_internal_r+0xa38>
    51e0:	01800074 	movhi	r6,1
    51e4:	3192e204 	addi	r6,r6,19336
    51e8:	d9814415 	stw	r6,1296(sp)
    51ec:	003fe606 	br	5188 <___vfprintf_internal_r+0x1118>
    51f0:	00800ac4 	movi	r2,43
    51f4:	d8800405 	stb	r2,16(sp)
    51f8:	b8c00007 	ldb	r3,0(r23)
    51fc:	003c1b06 	br	426c <___vfprintf_internal_r+0x1fc>
    5200:	d8814c17 	ldw	r2,1328(sp)
    5204:	b8c00007 	ldb	r3,0(r23)
    5208:	10800054 	ori	r2,r2,1
    520c:	d8814c15 	stw	r2,1328(sp)
    5210:	003c1606 	br	426c <___vfprintf_internal_r+0x1fc>
    5214:	d8800407 	ldb	r2,16(sp)
    5218:	1000461e 	bne	r2,zero,5334 <___vfprintf_internal_r+0x12c4>
    521c:	00800804 	movi	r2,32
    5220:	d8800405 	stb	r2,16(sp)
    5224:	b8c00007 	ldb	r3,0(r23)
    5228:	003c1006 	br	426c <___vfprintf_internal_r+0x1fc>
    522c:	d9814c17 	ldw	r6,1328(sp)
    5230:	b8c00007 	ldb	r3,0(r23)
    5234:	31800214 	ori	r6,r6,8
    5238:	d9814c15 	stw	r6,1328(sp)
    523c:	003c0b06 	br	426c <___vfprintf_internal_r+0x1fc>
    5240:	0007883a 	mov	r3,zero
    5244:	01000244 	movi	r4,9
    5248:	188002a4 	muli	r2,r3,10
    524c:	b8c00007 	ldb	r3,0(r23)
    5250:	d9814d17 	ldw	r6,1332(sp)
    5254:	bdc00044 	addi	r23,r23,1
    5258:	d8c14d15 	stw	r3,1332(sp)
    525c:	d9414d17 	ldw	r5,1332(sp)
    5260:	3085883a 	add	r2,r6,r2
    5264:	10fff404 	addi	r3,r2,-48
    5268:	28bff404 	addi	r2,r5,-48
    526c:	20bff62e 	bgeu	r4,r2,5248 <___vfprintf_internal_r+0x11d8>
    5270:	d8c14a15 	stw	r3,1320(sp)
    5274:	003bff06 	br	4274 <___vfprintf_internal_r+0x204>
    5278:	d9414c17 	ldw	r5,1328(sp)
    527c:	b8c00007 	ldb	r3,0(r23)
    5280:	29402014 	ori	r5,r5,128
    5284:	d9414c15 	stw	r5,1328(sp)
    5288:	003bf806 	br	426c <___vfprintf_internal_r+0x1fc>
    528c:	b8c00007 	ldb	r3,0(r23)
    5290:	00800a84 	movi	r2,42
    5294:	bdc00044 	addi	r23,r23,1
    5298:	18831526 	beq	r3,r2,5ef0 <___vfprintf_internal_r+0x1e80>
    529c:	d8c14d15 	stw	r3,1332(sp)
    52a0:	18bff404 	addi	r2,r3,-48
    52a4:	00c00244 	movi	r3,9
    52a8:	18827836 	bltu	r3,r2,5c8c <___vfprintf_internal_r+0x1c1c>
    52ac:	000d883a 	mov	r6,zero
    52b0:	308002a4 	muli	r2,r6,10
    52b4:	b9800007 	ldb	r6,0(r23)
    52b8:	d9414d17 	ldw	r5,1332(sp)
    52bc:	bdc00044 	addi	r23,r23,1
    52c0:	d9814d15 	stw	r6,1332(sp)
    52c4:	d9014d17 	ldw	r4,1332(sp)
    52c8:	1145883a 	add	r2,r2,r5
    52cc:	11bff404 	addi	r6,r2,-48
    52d0:	20bff404 	addi	r2,r4,-48
    52d4:	18bff62e 	bgeu	r3,r2,52b0 <___vfprintf_internal_r+0x1240>
    52d8:	3027883a 	mov	r19,r6
    52dc:	303be50e 	bge	r6,zero,4274 <___vfprintf_internal_r+0x204>
    52e0:	04ffffc4 	movi	r19,-1
    52e4:	003be306 	br	4274 <___vfprintf_internal_r+0x204>
    52e8:	d8000405 	stb	zero,16(sp)
    52ec:	39800017 	ldw	r6,0(r7)
    52f0:	39c00104 	addi	r7,r7,4
    52f4:	d9c14015 	stw	r7,1280(sp)
    52f8:	d9814115 	stw	r6,1284(sp)
    52fc:	3001c926 	beq	r6,zero,5a24 <___vfprintf_internal_r+0x19b4>
    5300:	98000e16 	blt	r19,zero,533c <___vfprintf_internal_r+0x12cc>
    5304:	d9014117 	ldw	r4,1284(sp)
    5308:	000b883a 	mov	r5,zero
    530c:	980d883a 	mov	r6,r19
    5310:	00034dc0 	call	34dc <memchr>
    5314:	10025926 	beq	r2,zero,5c7c <___vfprintf_internal_r+0x1c0c>
    5318:	d8c14117 	ldw	r3,1284(sp)
    531c:	10cfc83a 	sub	r7,r2,r3
    5320:	99c19e16 	blt	r19,r7,599c <___vfprintf_internal_r+0x192c>
    5324:	d9c14515 	stw	r7,1300(sp)
    5328:	38000916 	blt	r7,zero,5350 <___vfprintf_internal_r+0x12e0>
    532c:	d8014615 	stw	zero,1304(sp)
    5330:	003df106 	br	4af8 <___vfprintf_internal_r+0xa88>
    5334:	b8c00007 	ldb	r3,0(r23)
    5338:	003bcc06 	br	426c <___vfprintf_internal_r+0x1fc>
    533c:	d9014117 	ldw	r4,1284(sp)
    5340:	0003fa40 	call	3fa4 <strlen>
    5344:	d8814515 	stw	r2,1300(sp)
    5348:	100f883a 	mov	r7,r2
    534c:	103ff70e 	bge	r2,zero,532c <___vfprintf_internal_r+0x12bc>
    5350:	d8014515 	stw	zero,1300(sp)
    5354:	d8014615 	stw	zero,1304(sp)
    5358:	003de706 	br	4af8 <___vfprintf_internal_r+0xa88>
    535c:	20c03fcc 	andi	r3,r4,255
    5360:	00800044 	movi	r2,1
    5364:	18802d26 	beq	r3,r2,541c <___vfprintf_internal_r+0x13ac>
    5368:	18800e36 	bltu	r3,r2,53a4 <___vfprintf_internal_r+0x1334>
    536c:	00800084 	movi	r2,2
    5370:	1880fa26 	beq	r3,r2,575c <___vfprintf_internal_r+0x16ec>
    5374:	01000074 	movhi	r4,1
    5378:	2112f204 	addi	r4,r4,19400
    537c:	0003fa40 	call	3fa4 <strlen>
    5380:	100f883a 	mov	r7,r2
    5384:	dcc14515 	stw	r19,1300(sp)
    5388:	9880010e 	bge	r19,r2,5390 <___vfprintf_internal_r+0x1320>
    538c:	d8814515 	stw	r2,1300(sp)
    5390:	00800074 	movhi	r2,1
    5394:	1092f204 	addi	r2,r2,19400
    5398:	dcc14615 	stw	r19,1304(sp)
    539c:	d8814115 	stw	r2,1284(sp)
    53a0:	003dd506 	br	4af8 <___vfprintf_internal_r+0xa88>
    53a4:	d9401904 	addi	r5,sp,100
    53a8:	dd000f04 	addi	r20,sp,60
    53ac:	d9414115 	stw	r5,1284(sp)
    53b0:	880a977a 	slli	r5,r17,29
    53b4:	d9814117 	ldw	r6,1284(sp)
    53b8:	8004d0fa 	srli	r2,r16,3
    53bc:	8806d0fa 	srli	r3,r17,3
    53c0:	810001cc 	andi	r4,r16,7
    53c4:	2884b03a 	or	r2,r5,r2
    53c8:	31bfffc4 	addi	r6,r6,-1
    53cc:	21000c04 	addi	r4,r4,48
    53d0:	d9814115 	stw	r6,1284(sp)
    53d4:	10cab03a 	or	r5,r2,r3
    53d8:	31000005 	stb	r4,0(r6)
    53dc:	1021883a 	mov	r16,r2
    53e0:	1823883a 	mov	r17,r3
    53e4:	283ff21e 	bne	r5,zero,53b0 <___vfprintf_internal_r+0x1340>
    53e8:	d8c14c17 	ldw	r3,1328(sp)
    53ec:	1880004c 	andi	r2,r3,1
    53f0:	1005003a 	cmpeq	r2,r2,zero
    53f4:	103db91e 	bne	r2,zero,4adc <___vfprintf_internal_r+0xa6c>
    53f8:	20803fcc 	andi	r2,r4,255
    53fc:	1080201c 	xori	r2,r2,128
    5400:	10bfe004 	addi	r2,r2,-128
    5404:	00c00c04 	movi	r3,48
    5408:	10fdb426 	beq	r2,r3,4adc <___vfprintf_internal_r+0xa6c>
    540c:	31bfffc4 	addi	r6,r6,-1
    5410:	d9814115 	stw	r6,1284(sp)
    5414:	30c00005 	stb	r3,0(r6)
    5418:	003db006 	br	4adc <___vfprintf_internal_r+0xa6c>
    541c:	88800068 	cmpgeui	r2,r17,1
    5420:	10002c1e 	bne	r2,zero,54d4 <___vfprintf_internal_r+0x1464>
    5424:	8800021e 	bne	r17,zero,5430 <___vfprintf_internal_r+0x13c0>
    5428:	00800244 	movi	r2,9
    542c:	14002936 	bltu	r2,r16,54d4 <___vfprintf_internal_r+0x1464>
    5430:	d90018c4 	addi	r4,sp,99
    5434:	dd000f04 	addi	r20,sp,60
    5438:	d9014115 	stw	r4,1284(sp)
    543c:	d9014117 	ldw	r4,1284(sp)
    5440:	80800c04 	addi	r2,r16,48
    5444:	20800005 	stb	r2,0(r4)
    5448:	003da406 	br	4adc <___vfprintf_internal_r+0xa6c>
    544c:	dc400d17 	ldw	r17,52(sp)
    5450:	07000074 	movhi	fp,1
    5454:	e712f984 	addi	fp,fp,19430
    5458:	9425883a 	add	r18,r18,r16
    545c:	8c400044 	addi	r17,r17,1
    5460:	008001c4 	movi	r2,7
    5464:	1f000015 	stw	fp,0(r3)
    5468:	1c000115 	stw	r16,4(r3)
    546c:	dc800e15 	stw	r18,56(sp)
    5470:	dc400d15 	stw	r17,52(sp)
    5474:	147de216 	blt	r2,r17,4c00 <___vfprintf_internal_r+0xb90>
    5478:	18c00204 	addi	r3,r3,8
    547c:	003c7a06 	br	4668 <___vfprintf_internal_r+0x5f8>
    5480:	01000084 	movi	r4,2
    5484:	d8000405 	stb	zero,16(sp)
    5488:	003d8706 	br	4aa8 <___vfprintf_internal_r+0xa38>
    548c:	d9814c17 	ldw	r6,1328(sp)
    5490:	30c4703a 	and	r2,r6,r3
    5494:	1005003a 	cmpeq	r2,r2,zero
    5498:	103cb926 	beq	r2,zero,4780 <___vfprintf_internal_r+0x710>
    549c:	d9014117 	ldw	r4,1284(sp)
    54a0:	94800044 	addi	r18,r18,1
    54a4:	8c400044 	addi	r17,r17,1
    54a8:	008001c4 	movi	r2,7
    54ac:	a9000015 	stw	r4,0(r21)
    54b0:	a8c00115 	stw	r3,4(r21)
    54b4:	dc800e15 	stw	r18,56(sp)
    54b8:	dc400d15 	stw	r17,52(sp)
    54bc:	147e6616 	blt	r2,r17,4e58 <___vfprintf_internal_r+0xde8>
    54c0:	acc00204 	addi	r19,r21,8
    54c4:	003cd706 	br	4824 <___vfprintf_internal_r+0x7b4>
    54c8:	07000074 	movhi	fp,1
    54cc:	e712f984 	addi	fp,fp,19430
    54d0:	003c4f06 	br	4610 <___vfprintf_internal_r+0x5a0>
    54d4:	dd000f04 	addi	r20,sp,60
    54d8:	dc801904 	addi	r18,sp,100
    54dc:	8009883a 	mov	r4,r16
    54e0:	880b883a 	mov	r5,r17
    54e4:	01800284 	movi	r6,10
    54e8:	000f883a 	mov	r7,zero
    54ec:	000f6c40 	call	f6c4 <__umoddi3>
    54f0:	12000c04 	addi	r8,r2,48
    54f4:	94bfffc4 	addi	r18,r18,-1
    54f8:	8009883a 	mov	r4,r16
    54fc:	880b883a 	mov	r5,r17
    5500:	01800284 	movi	r6,10
    5504:	000f883a 	mov	r7,zero
    5508:	92000005 	stb	r8,0(r18)
    550c:	000f0e80 	call	f0e8 <__udivdi3>
    5510:	1009883a 	mov	r4,r2
    5514:	1021883a 	mov	r16,r2
    5518:	18800068 	cmpgeui	r2,r3,1
    551c:	1823883a 	mov	r17,r3
    5520:	103fee1e 	bne	r2,zero,54dc <___vfprintf_internal_r+0x146c>
    5524:	1800021e 	bne	r3,zero,5530 <___vfprintf_internal_r+0x14c0>
    5528:	00800244 	movi	r2,9
    552c:	113feb36 	bltu	r2,r4,54dc <___vfprintf_internal_r+0x146c>
    5530:	94bfffc4 	addi	r18,r18,-1
    5534:	dc814115 	stw	r18,1284(sp)
    5538:	003fc006 	br	543c <___vfprintf_internal_r+0x13cc>
    553c:	d9014c17 	ldw	r4,1328(sp)
    5540:	2080004c 	andi	r2,r4,1
    5544:	10009a1e 	bne	r2,zero,57b0 <___vfprintf_internal_r+0x1740>
    5548:	d9401904 	addi	r5,sp,100
    554c:	dd000f04 	addi	r20,sp,60
    5550:	d9414115 	stw	r5,1284(sp)
    5554:	003d6106 	br	4adc <___vfprintf_internal_r+0xa6c>
    5558:	d9014f17 	ldw	r4,1340(sp)
    555c:	b00b883a 	mov	r5,r22
    5560:	d9800c04 	addi	r6,sp,48
    5564:	00040180 	call	4018 <__sprint_r>
    5568:	103c791e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    556c:	dc800e17 	ldw	r18,56(sp)
    5570:	d8c01904 	addi	r3,sp,100
    5574:	003cff06 	br	4974 <___vfprintf_internal_r+0x904>
    5578:	d8c14c17 	ldw	r3,1328(sp)
    557c:	1880040c 	andi	r2,r3,16
    5580:	1000711e 	bne	r2,zero,5748 <___vfprintf_internal_r+0x16d8>
    5584:	d9014c17 	ldw	r4,1328(sp)
    5588:	2080100c 	andi	r2,r4,64
    558c:	10006e26 	beq	r2,zero,5748 <___vfprintf_internal_r+0x16d8>
    5590:	3c00000b 	ldhu	r16,0(r7)
    5594:	0023883a 	mov	r17,zero
    5598:	39c00104 	addi	r7,r7,4
    559c:	d9c14015 	stw	r7,1280(sp)
    55a0:	003f0006 	br	51a4 <___vfprintf_internal_r+0x1134>
    55a4:	dc400d17 	ldw	r17,52(sp)
    55a8:	07000074 	movhi	fp,1
    55ac:	e712f984 	addi	fp,fp,19430
    55b0:	9425883a 	add	r18,r18,r16
    55b4:	8c400044 	addi	r17,r17,1
    55b8:	008001c4 	movi	r2,7
    55bc:	1f000015 	stw	fp,0(r3)
    55c0:	1c000115 	stw	r16,4(r3)
    55c4:	dc800e15 	stw	r18,56(sp)
    55c8:	dc400d15 	stw	r17,52(sp)
    55cc:	147d7616 	blt	r2,r17,4ba8 <___vfprintf_internal_r+0xb38>
    55d0:	18c00204 	addi	r3,r3,8
    55d4:	003d7b06 	br	4bc4 <___vfprintf_internal_r+0xb54>
    55d8:	dc800e17 	ldw	r18,56(sp)
    55dc:	dc400d17 	ldw	r17,52(sp)
    55e0:	07000074 	movhi	fp,1
    55e4:	e712fd84 	addi	fp,fp,19446
    55e8:	003bc006 	br	44ec <___vfprintf_internal_r+0x47c>
    55ec:	d9014f17 	ldw	r4,1340(sp)
    55f0:	b00b883a 	mov	r5,r22
    55f4:	d9800c04 	addi	r6,sp,48
    55f8:	00040180 	call	4018 <__sprint_r>
    55fc:	103c541e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    5600:	dc800e17 	ldw	r18,56(sp)
    5604:	d8c01904 	addi	r3,sp,100
    5608:	003ce906 	br	49b0 <___vfprintf_internal_r+0x940>
    560c:	3c000017 	ldw	r16,0(r7)
    5610:	0009883a 	mov	r4,zero
    5614:	39c00104 	addi	r7,r7,4
    5618:	0023883a 	mov	r17,zero
    561c:	d9c14015 	stw	r7,1280(sp)
    5620:	d8000405 	stb	zero,16(sp)
    5624:	003d2006 	br	4aa8 <___vfprintf_internal_r+0xa38>
    5628:	38800017 	ldw	r2,0(r7)
    562c:	39c00104 	addi	r7,r7,4
    5630:	d9c14015 	stw	r7,1280(sp)
    5634:	1023d7fa 	srai	r17,r2,31
    5638:	1021883a 	mov	r16,r2
    563c:	003d1806 	br	4aa0 <___vfprintf_internal_r+0xa30>
    5640:	3c000017 	ldw	r16,0(r7)
    5644:	01000044 	movi	r4,1
    5648:	39c00104 	addi	r7,r7,4
    564c:	0023883a 	mov	r17,zero
    5650:	d9c14015 	stw	r7,1280(sp)
    5654:	d8000405 	stb	zero,16(sp)
    5658:	003d1306 	br	4aa8 <___vfprintf_internal_r+0xa38>
    565c:	00800074 	movhi	r2,1
    5660:	1092f904 	addi	r2,r2,19428
    5664:	94800044 	addi	r18,r18,1
    5668:	8c400044 	addi	r17,r17,1
    566c:	a8800015 	stw	r2,0(r21)
    5670:	00c00044 	movi	r3,1
    5674:	008001c4 	movi	r2,7
    5678:	a8c00115 	stw	r3,4(r21)
    567c:	dc800e15 	stw	r18,56(sp)
    5680:	dc400d15 	stw	r17,52(sp)
    5684:	1440ca16 	blt	r2,r17,59b0 <___vfprintf_internal_r+0x1940>
    5688:	a8c00204 	addi	r3,r21,8
    568c:	2000061e 	bne	r4,zero,56a8 <___vfprintf_internal_r+0x1638>
    5690:	d9414717 	ldw	r5,1308(sp)
    5694:	2800041e 	bne	r5,zero,56a8 <___vfprintf_internal_r+0x1638>
    5698:	d9814c17 	ldw	r6,1328(sp)
    569c:	3080004c 	andi	r2,r6,1
    56a0:	1005003a 	cmpeq	r2,r2,zero
    56a4:	103bf01e 	bne	r2,zero,4668 <___vfprintf_internal_r+0x5f8>
    56a8:	00800044 	movi	r2,1
    56ac:	dc400d17 	ldw	r17,52(sp)
    56b0:	18800115 	stw	r2,4(r3)
    56b4:	d8814917 	ldw	r2,1316(sp)
    56b8:	94800044 	addi	r18,r18,1
    56bc:	8c400044 	addi	r17,r17,1
    56c0:	18800015 	stw	r2,0(r3)
    56c4:	008001c4 	movi	r2,7
    56c8:	dc800e15 	stw	r18,56(sp)
    56cc:	dc400d15 	stw	r17,52(sp)
    56d0:	1440ca16 	blt	r2,r17,59fc <___vfprintf_internal_r+0x198c>
    56d4:	18c00204 	addi	r3,r3,8
    56d8:	0121c83a 	sub	r16,zero,r4
    56dc:	0400500e 	bge	zero,r16,5820 <___vfprintf_internal_r+0x17b0>
    56e0:	00800404 	movi	r2,16
    56e4:	1400800e 	bge	r2,r16,58e8 <___vfprintf_internal_r+0x1878>
    56e8:	1027883a 	mov	r19,r2
    56ec:	07000074 	movhi	fp,1
    56f0:	e712f984 	addi	fp,fp,19430
    56f4:	050001c4 	movi	r20,7
    56f8:	00000306 	br	5708 <___vfprintf_internal_r+0x1698>
    56fc:	18c00204 	addi	r3,r3,8
    5700:	843ffc04 	addi	r16,r16,-16
    5704:	9c007a0e 	bge	r19,r16,58f0 <___vfprintf_internal_r+0x1880>
    5708:	94800404 	addi	r18,r18,16
    570c:	8c400044 	addi	r17,r17,1
    5710:	1f000015 	stw	fp,0(r3)
    5714:	1cc00115 	stw	r19,4(r3)
    5718:	dc800e15 	stw	r18,56(sp)
    571c:	dc400d15 	stw	r17,52(sp)
    5720:	a47ff60e 	bge	r20,r17,56fc <___vfprintf_internal_r+0x168c>
    5724:	d9014f17 	ldw	r4,1340(sp)
    5728:	b00b883a 	mov	r5,r22
    572c:	d9800c04 	addi	r6,sp,48
    5730:	00040180 	call	4018 <__sprint_r>
    5734:	103c061e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    5738:	dc800e17 	ldw	r18,56(sp)
    573c:	dc400d17 	ldw	r17,52(sp)
    5740:	d8c01904 	addi	r3,sp,100
    5744:	003fee06 	br	5700 <___vfprintf_internal_r+0x1690>
    5748:	3c000017 	ldw	r16,0(r7)
    574c:	0023883a 	mov	r17,zero
    5750:	39c00104 	addi	r7,r7,4
    5754:	d9c14015 	stw	r7,1280(sp)
    5758:	003e9206 	br	51a4 <___vfprintf_internal_r+0x1134>
    575c:	d9401904 	addi	r5,sp,100
    5760:	dd000f04 	addi	r20,sp,60
    5764:	d9414115 	stw	r5,1284(sp)
    5768:	d9814417 	ldw	r6,1296(sp)
    576c:	880a973a 	slli	r5,r17,28
    5770:	8004d13a 	srli	r2,r16,4
    5774:	810003cc 	andi	r4,r16,15
    5778:	3109883a 	add	r4,r6,r4
    577c:	2884b03a 	or	r2,r5,r2
    5780:	21400003 	ldbu	r5,0(r4)
    5784:	d9014117 	ldw	r4,1284(sp)
    5788:	8806d13a 	srli	r3,r17,4
    578c:	1021883a 	mov	r16,r2
    5790:	213fffc4 	addi	r4,r4,-1
    5794:	d9014115 	stw	r4,1284(sp)
    5798:	d9814117 	ldw	r6,1284(sp)
    579c:	10c8b03a 	or	r4,r2,r3
    57a0:	1823883a 	mov	r17,r3
    57a4:	31400005 	stb	r5,0(r6)
    57a8:	203fef1e 	bne	r4,zero,5768 <___vfprintf_internal_r+0x16f8>
    57ac:	003ccb06 	br	4adc <___vfprintf_internal_r+0xa6c>
    57b0:	00800c04 	movi	r2,48
    57b4:	d98018c4 	addi	r6,sp,99
    57b8:	dd000f04 	addi	r20,sp,60
    57bc:	d88018c5 	stb	r2,99(sp)
    57c0:	d9814115 	stw	r6,1284(sp)
    57c4:	003cc506 	br	4adc <___vfprintf_internal_r+0xa6c>
    57c8:	dc400d17 	ldw	r17,52(sp)
    57cc:	07000074 	movhi	fp,1
    57d0:	e712fd84 	addi	fp,fp,19446
    57d4:	003bc706 	br	46f4 <___vfprintf_internal_r+0x684>
    57d8:	d9414c17 	ldw	r5,1328(sp)
    57dc:	2880040c 	andi	r2,r5,16
    57e0:	10007c26 	beq	r2,zero,59d4 <___vfprintf_internal_r+0x1964>
    57e4:	38800017 	ldw	r2,0(r7)
    57e8:	39c00104 	addi	r7,r7,4
    57ec:	d9c14015 	stw	r7,1280(sp)
    57f0:	d9814b17 	ldw	r6,1324(sp)
    57f4:	d9c14017 	ldw	r7,1280(sp)
    57f8:	11800015 	stw	r6,0(r2)
    57fc:	003a7806 	br	41e0 <___vfprintf_internal_r+0x170>
    5800:	d9014f17 	ldw	r4,1340(sp)
    5804:	b00b883a 	mov	r5,r22
    5808:	d9800c04 	addi	r6,sp,48
    580c:	00040180 	call	4018 <__sprint_r>
    5810:	103bcf1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    5814:	dc800e17 	ldw	r18,56(sp)
    5818:	dc400d17 	ldw	r17,52(sp)
    581c:	d8c01904 	addi	r3,sp,100
    5820:	d9014717 	ldw	r4,1308(sp)
    5824:	d9414117 	ldw	r5,1284(sp)
    5828:	8c400044 	addi	r17,r17,1
    582c:	9125883a 	add	r18,r18,r4
    5830:	008001c4 	movi	r2,7
    5834:	19400015 	stw	r5,0(r3)
    5838:	19000115 	stw	r4,4(r3)
    583c:	dc800e15 	stw	r18,56(sp)
    5840:	dc400d15 	stw	r17,52(sp)
    5844:	147cee16 	blt	r2,r17,4c00 <___vfprintf_internal_r+0xb90>
    5848:	18c00204 	addi	r3,r3,8
    584c:	003b8606 	br	4668 <___vfprintf_internal_r+0x5f8>
    5850:	38c00017 	ldw	r3,0(r7)
    5854:	39000204 	addi	r4,r7,8
    5858:	d9014015 	stw	r4,1280(sp)
    585c:	d8c14215 	stw	r3,1288(sp)
    5860:	39c00117 	ldw	r7,4(r7)
    5864:	d9c14315 	stw	r7,1292(sp)
    5868:	003e2006 	br	50ec <___vfprintf_internal_r+0x107c>
    586c:	0005883a 	mov	r2,zero
    5870:	1409c83a 	sub	r4,r2,r16
    5874:	1105803a 	cmpltu	r2,r2,r4
    5878:	044bc83a 	sub	r5,zero,r17
    587c:	2885c83a 	sub	r2,r5,r2
    5880:	2021883a 	mov	r16,r4
    5884:	1023883a 	mov	r17,r2
    5888:	01000044 	movi	r4,1
    588c:	00800b44 	movi	r2,45
    5890:	d8800405 	stb	r2,16(sp)
    5894:	003c8406 	br	4aa8 <___vfprintf_internal_r+0xa38>
    5898:	d9014f17 	ldw	r4,1340(sp)
    589c:	b00b883a 	mov	r5,r22
    58a0:	d9800c04 	addi	r6,sp,48
    58a4:	00040180 	call	4018 <__sprint_r>
    58a8:	103ba91e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    58ac:	dc800e17 	ldw	r18,56(sp)
    58b0:	dc400d17 	ldw	r17,52(sp)
    58b4:	d9000517 	ldw	r4,20(sp)
    58b8:	d9401904 	addi	r5,sp,100
    58bc:	003da706 	br	4f5c <___vfprintf_internal_r+0xeec>
    58c0:	d9014f17 	ldw	r4,1340(sp)
    58c4:	b00b883a 	mov	r5,r22
    58c8:	d9800c04 	addi	r6,sp,48
    58cc:	00040180 	call	4018 <__sprint_r>
    58d0:	103b9f1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    58d4:	dc800e17 	ldw	r18,56(sp)
    58d8:	dc400d17 	ldw	r17,52(sp)
    58dc:	d9000517 	ldw	r4,20(sp)
    58e0:	d8c01904 	addi	r3,sp,100
    58e4:	003d9106 	br	4f2c <___vfprintf_internal_r+0xebc>
    58e8:	07000074 	movhi	fp,1
    58ec:	e712f984 	addi	fp,fp,19430
    58f0:	9425883a 	add	r18,r18,r16
    58f4:	8c400044 	addi	r17,r17,1
    58f8:	008001c4 	movi	r2,7
    58fc:	1f000015 	stw	fp,0(r3)
    5900:	1c000115 	stw	r16,4(r3)
    5904:	dc800e15 	stw	r18,56(sp)
    5908:	dc400d15 	stw	r17,52(sp)
    590c:	147fbc16 	blt	r2,r17,5800 <___vfprintf_internal_r+0x1790>
    5910:	18c00204 	addi	r3,r3,8
    5914:	003fc206 	br	5820 <___vfprintf_internal_r+0x17b0>
    5918:	d9014f17 	ldw	r4,1340(sp)
    591c:	b00b883a 	mov	r5,r22
    5920:	d9800c04 	addi	r6,sp,48
    5924:	00040180 	call	4018 <__sprint_r>
    5928:	103b891e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    592c:	dc800e17 	ldw	r18,56(sp)
    5930:	d9000517 	ldw	r4,20(sp)
    5934:	d8c01904 	addi	r3,sp,100
    5938:	003d0206 	br	4d44 <___vfprintf_internal_r+0xcd4>
    593c:	07000074 	movhi	fp,1
    5940:	e712f984 	addi	fp,fp,19430
    5944:	003be406 	br	48d8 <___vfprintf_internal_r+0x868>
    5948:	00800074 	movhi	r2,1
    594c:	1092e804 	addi	r2,r2,19360
    5950:	d8814115 	stw	r2,1284(sp)
    5954:	003df506 	br	512c <___vfprintf_internal_r+0x10bc>
    5958:	d9014217 	ldw	r4,1288(sp)
    595c:	d9414317 	ldw	r5,1292(sp)
    5960:	000bc840 	call	bc84 <__isnand>
    5964:	10003926 	beq	r2,zero,5a4c <___vfprintf_internal_r+0x19dc>
    5968:	d9414d17 	ldw	r5,1332(sp)
    596c:	008011c4 	movi	r2,71
    5970:	1140ce16 	blt	r2,r5,5cac <___vfprintf_internal_r+0x1c3c>
    5974:	01800074 	movhi	r6,1
    5978:	3192e904 	addi	r6,r6,19364
    597c:	d9814115 	stw	r6,1284(sp)
    5980:	003dea06 	br	512c <___vfprintf_internal_r+0x10bc>
    5984:	d9014c17 	ldw	r4,1328(sp)
    5988:	bdc00044 	addi	r23,r23,1
    598c:	b8c00007 	ldb	r3,0(r23)
    5990:	21000814 	ori	r4,r4,32
    5994:	d9014c15 	stw	r4,1328(sp)
    5998:	003a3406 	br	426c <___vfprintf_internal_r+0x1fc>
    599c:	dcc14515 	stw	r19,1300(sp)
    59a0:	98011016 	blt	r19,zero,5de4 <___vfprintf_internal_r+0x1d74>
    59a4:	980f883a 	mov	r7,r19
    59a8:	d8014615 	stw	zero,1304(sp)
    59ac:	003c5206 	br	4af8 <___vfprintf_internal_r+0xa88>
    59b0:	d9014f17 	ldw	r4,1340(sp)
    59b4:	b00b883a 	mov	r5,r22
    59b8:	d9800c04 	addi	r6,sp,48
    59bc:	00040180 	call	4018 <__sprint_r>
    59c0:	103b631e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    59c4:	dc800e17 	ldw	r18,56(sp)
    59c8:	d9000517 	ldw	r4,20(sp)
    59cc:	d8c01904 	addi	r3,sp,100
    59d0:	003f2e06 	br	568c <___vfprintf_internal_r+0x161c>
    59d4:	d8c14c17 	ldw	r3,1328(sp)
    59d8:	1880100c 	andi	r2,r3,64
    59dc:	1000a026 	beq	r2,zero,5c60 <___vfprintf_internal_r+0x1bf0>
    59e0:	38800017 	ldw	r2,0(r7)
    59e4:	39c00104 	addi	r7,r7,4
    59e8:	d9c14015 	stw	r7,1280(sp)
    59ec:	d9014b17 	ldw	r4,1324(sp)
    59f0:	d9c14017 	ldw	r7,1280(sp)
    59f4:	1100000d 	sth	r4,0(r2)
    59f8:	0039f906 	br	41e0 <___vfprintf_internal_r+0x170>
    59fc:	d9014f17 	ldw	r4,1340(sp)
    5a00:	b00b883a 	mov	r5,r22
    5a04:	d9800c04 	addi	r6,sp,48
    5a08:	00040180 	call	4018 <__sprint_r>
    5a0c:	103b501e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    5a10:	dc800e17 	ldw	r18,56(sp)
    5a14:	dc400d17 	ldw	r17,52(sp)
    5a18:	d9000517 	ldw	r4,20(sp)
    5a1c:	d8c01904 	addi	r3,sp,100
    5a20:	003f2d06 	br	56d8 <___vfprintf_internal_r+0x1668>
    5a24:	00800184 	movi	r2,6
    5a28:	14c09a36 	bltu	r2,r19,5c94 <___vfprintf_internal_r+0x1c24>
    5a2c:	dcc14515 	stw	r19,1300(sp)
    5a30:	9800010e 	bge	r19,zero,5a38 <___vfprintf_internal_r+0x19c8>
    5a34:	d8014515 	stw	zero,1300(sp)
    5a38:	00800074 	movhi	r2,1
    5a3c:	1092eb04 	addi	r2,r2,19372
    5a40:	980f883a 	mov	r7,r19
    5a44:	d8814115 	stw	r2,1284(sp)
    5a48:	003a7806 	br	442c <___vfprintf_internal_r+0x3bc>
    5a4c:	00bfffc4 	movi	r2,-1
    5a50:	9880e226 	beq	r19,r2,5ddc <___vfprintf_internal_r+0x1d6c>
    5a54:	d9414d17 	ldw	r5,1332(sp)
    5a58:	008019c4 	movi	r2,103
    5a5c:	2880dc26 	beq	r5,r2,5dd0 <___vfprintf_internal_r+0x1d60>
    5a60:	008011c4 	movi	r2,71
    5a64:	2880da26 	beq	r5,r2,5dd0 <___vfprintf_internal_r+0x1d60>
    5a68:	d9414c17 	ldw	r5,1328(sp)
    5a6c:	d9014317 	ldw	r4,1292(sp)
    5a70:	d9814217 	ldw	r6,1288(sp)
    5a74:	29404014 	ori	r5,r5,256
    5a78:	d9414c15 	stw	r5,1328(sp)
    5a7c:	2000cc16 	blt	r4,zero,5db0 <___vfprintf_internal_r+0x1d40>
    5a80:	3021883a 	mov	r16,r6
    5a84:	2023883a 	mov	r17,r4
    5a88:	0039883a 	mov	fp,zero
    5a8c:	d9414d17 	ldw	r5,1332(sp)
    5a90:	00801984 	movi	r2,102
    5a94:	2880b726 	beq	r5,r2,5d74 <___vfprintf_internal_r+0x1d04>
    5a98:	00801184 	movi	r2,70
    5a9c:	2880b526 	beq	r5,r2,5d74 <___vfprintf_internal_r+0x1d04>
    5aa0:	00801944 	movi	r2,101
    5aa4:	2880c826 	beq	r5,r2,5dc8 <___vfprintf_internal_r+0x1d58>
    5aa8:	00801144 	movi	r2,69
    5aac:	2880c626 	beq	r5,r2,5dc8 <___vfprintf_internal_r+0x1d58>
    5ab0:	9829883a 	mov	r20,r19
    5ab4:	d9014f17 	ldw	r4,1340(sp)
    5ab8:	d8800504 	addi	r2,sp,20
    5abc:	880d883a 	mov	r6,r17
    5ac0:	d8800115 	stw	r2,4(sp)
    5ac4:	d8c00604 	addi	r3,sp,24
    5ac8:	d8800704 	addi	r2,sp,28
    5acc:	800b883a 	mov	r5,r16
    5ad0:	01c00084 	movi	r7,2
    5ad4:	d8c00215 	stw	r3,8(sp)
    5ad8:	d8800315 	stw	r2,12(sp)
    5adc:	dd000015 	stw	r20,0(sp)
    5ae0:	0007afc0 	call	7afc <_dtoa_r>
    5ae4:	d9814d17 	ldw	r6,1332(sp)
    5ae8:	d8814115 	stw	r2,1284(sp)
    5aec:	008019c4 	movi	r2,103
    5af0:	30809526 	beq	r6,r2,5d48 <___vfprintf_internal_r+0x1cd8>
    5af4:	d8c14d17 	ldw	r3,1332(sp)
    5af8:	008011c4 	movi	r2,71
    5afc:	18809226 	beq	r3,r2,5d48 <___vfprintf_internal_r+0x1cd8>
    5b00:	d9414117 	ldw	r5,1284(sp)
    5b04:	d9814d17 	ldw	r6,1332(sp)
    5b08:	00801984 	movi	r2,102
    5b0c:	2d25883a 	add	r18,r5,r20
    5b10:	30808626 	beq	r6,r2,5d2c <___vfprintf_internal_r+0x1cbc>
    5b14:	00801184 	movi	r2,70
    5b18:	30808426 	beq	r6,r2,5d2c <___vfprintf_internal_r+0x1cbc>
    5b1c:	000d883a 	mov	r6,zero
    5b20:	000f883a 	mov	r7,zero
    5b24:	880b883a 	mov	r5,r17
    5b28:	8009883a 	mov	r4,r16
    5b2c:	00108fc0 	call	108fc <__eqdf2>
    5b30:	1000751e 	bne	r2,zero,5d08 <___vfprintf_internal_r+0x1c98>
    5b34:	9005883a 	mov	r2,r18
    5b38:	dc800715 	stw	r18,28(sp)
    5b3c:	d9014117 	ldw	r4,1284(sp)
    5b40:	d9414d17 	ldw	r5,1332(sp)
    5b44:	00c019c4 	movi	r3,103
    5b48:	1125c83a 	sub	r18,r2,r4
    5b4c:	28c06826 	beq	r5,r3,5cf0 <___vfprintf_internal_r+0x1c80>
    5b50:	008011c4 	movi	r2,71
    5b54:	28806626 	beq	r5,r2,5cf0 <___vfprintf_internal_r+0x1c80>
    5b58:	d9000517 	ldw	r4,20(sp)
    5b5c:	d8c14d17 	ldw	r3,1332(sp)
    5b60:	00801944 	movi	r2,101
    5b64:	10c05516 	blt	r2,r3,5cbc <___vfprintf_internal_r+0x1c4c>
    5b68:	213fffc4 	addi	r4,r4,-1
    5b6c:	d9000515 	stw	r4,20(sp)
    5b70:	d8c00805 	stb	r3,32(sp)
    5b74:	2021883a 	mov	r16,r4
    5b78:	2000c116 	blt	r4,zero,5e80 <___vfprintf_internal_r+0x1e10>
    5b7c:	00800ac4 	movi	r2,43
    5b80:	d8800845 	stb	r2,33(sp)
    5b84:	00800244 	movi	r2,9
    5b88:	1400af0e 	bge	r2,r16,5e48 <___vfprintf_internal_r+0x1dd8>
    5b8c:	1027883a 	mov	r19,r2
    5b90:	dc400b84 	addi	r17,sp,46
    5b94:	8009883a 	mov	r4,r16
    5b98:	01400284 	movi	r5,10
    5b9c:	00027800 	call	2780 <__modsi3>
    5ba0:	10800c04 	addi	r2,r2,48
    5ba4:	8c7fffc4 	addi	r17,r17,-1
    5ba8:	8009883a 	mov	r4,r16
    5bac:	01400284 	movi	r5,10
    5bb0:	88800005 	stb	r2,0(r17)
    5bb4:	00027200 	call	2720 <__divsi3>
    5bb8:	1021883a 	mov	r16,r2
    5bbc:	98bff516 	blt	r19,r2,5b94 <___vfprintf_internal_r+0x1b24>
    5bc0:	10c00c04 	addi	r3,r2,48
    5bc4:	d88009c4 	addi	r2,sp,39
    5bc8:	108001c4 	addi	r2,r2,7
    5bcc:	897fffc4 	addi	r5,r17,-1
    5bd0:	88ffffc5 	stb	r3,-1(r17)
    5bd4:	2880a72e 	bgeu	r5,r2,5e74 <___vfprintf_internal_r+0x1e04>
    5bd8:	1009883a 	mov	r4,r2
    5bdc:	d9800804 	addi	r6,sp,32
    5be0:	d8c00884 	addi	r3,sp,34
    5be4:	28800003 	ldbu	r2,0(r5)
    5be8:	29400044 	addi	r5,r5,1
    5bec:	18800005 	stb	r2,0(r3)
    5bf0:	18c00044 	addi	r3,r3,1
    5bf4:	293ffb36 	bltu	r5,r4,5be4 <___vfprintf_internal_r+0x1b74>
    5bf8:	1987c83a 	sub	r3,r3,r6
    5bfc:	00800044 	movi	r2,1
    5c00:	d8c14815 	stw	r3,1312(sp)
    5c04:	90cf883a 	add	r7,r18,r3
    5c08:	1480960e 	bge	r2,r18,5e64 <___vfprintf_internal_r+0x1df4>
    5c0c:	39c00044 	addi	r7,r7,1
    5c10:	d9c14515 	stw	r7,1300(sp)
    5c14:	38003416 	blt	r7,zero,5ce8 <___vfprintf_internal_r+0x1c78>
    5c18:	e0803fcc 	andi	r2,fp,255
    5c1c:	1080201c 	xori	r2,r2,128
    5c20:	10bfe004 	addi	r2,r2,-128
    5c24:	10004e26 	beq	r2,zero,5d60 <___vfprintf_internal_r+0x1cf0>
    5c28:	00800b44 	movi	r2,45
    5c2c:	dc814715 	stw	r18,1308(sp)
    5c30:	d8014615 	stw	zero,1304(sp)
    5c34:	d8800405 	stb	r2,16(sp)
    5c38:	003bb106 	br	4b00 <___vfprintf_internal_r+0xa90>
    5c3c:	00800b44 	movi	r2,45
    5c40:	d8800405 	stb	r2,16(sp)
    5c44:	003d3306 	br	5114 <___vfprintf_internal_r+0x10a4>
    5c48:	d9014f17 	ldw	r4,1340(sp)
    5c4c:	b00b883a 	mov	r5,r22
    5c50:	d9800c04 	addi	r6,sp,48
    5c54:	00040180 	call	4018 <__sprint_r>
    5c58:	103abd1e 	bne	r2,zero,4750 <___vfprintf_internal_r+0x6e0>
    5c5c:	003abb06 	br	474c <___vfprintf_internal_r+0x6dc>
    5c60:	38800017 	ldw	r2,0(r7)
    5c64:	39c00104 	addi	r7,r7,4
    5c68:	d9c14015 	stw	r7,1280(sp)
    5c6c:	d9414b17 	ldw	r5,1324(sp)
    5c70:	d9c14017 	ldw	r7,1280(sp)
    5c74:	11400015 	stw	r5,0(r2)
    5c78:	00395906 	br	41e0 <___vfprintf_internal_r+0x170>
    5c7c:	980f883a 	mov	r7,r19
    5c80:	dcc14515 	stw	r19,1300(sp)
    5c84:	d8014615 	stw	zero,1304(sp)
    5c88:	003b9b06 	br	4af8 <___vfprintf_internal_r+0xa88>
    5c8c:	0027883a 	mov	r19,zero
    5c90:	00397806 	br	4274 <___vfprintf_internal_r+0x204>
    5c94:	00c00074 	movhi	r3,1
    5c98:	18d2eb04 	addi	r3,r3,19372
    5c9c:	100f883a 	mov	r7,r2
    5ca0:	d8814515 	stw	r2,1300(sp)
    5ca4:	d8c14115 	stw	r3,1284(sp)
    5ca8:	0039e006 	br	442c <___vfprintf_internal_r+0x3bc>
    5cac:	00800074 	movhi	r2,1
    5cb0:	1092ea04 	addi	r2,r2,19368
    5cb4:	d8814115 	stw	r2,1284(sp)
    5cb8:	003d1c06 	br	512c <___vfprintf_internal_r+0x10bc>
    5cbc:	d9414d17 	ldw	r5,1332(sp)
    5cc0:	00801984 	movi	r2,102
    5cc4:	28804926 	beq	r5,r2,5dec <___vfprintf_internal_r+0x1d7c>
    5cc8:	200f883a 	mov	r7,r4
    5ccc:	24805716 	blt	r4,r18,5e2c <___vfprintf_internal_r+0x1dbc>
    5cd0:	d9414c17 	ldw	r5,1328(sp)
    5cd4:	2880004c 	andi	r2,r5,1
    5cd8:	10000126 	beq	r2,zero,5ce0 <___vfprintf_internal_r+0x1c70>
    5cdc:	21c00044 	addi	r7,r4,1
    5ce0:	d9c14515 	stw	r7,1300(sp)
    5ce4:	383fcc0e 	bge	r7,zero,5c18 <___vfprintf_internal_r+0x1ba8>
    5ce8:	d8014515 	stw	zero,1300(sp)
    5cec:	003fca06 	br	5c18 <___vfprintf_internal_r+0x1ba8>
    5cf0:	d9000517 	ldw	r4,20(sp)
    5cf4:	00bfff04 	movi	r2,-4
    5cf8:	1100480e 	bge	r2,r4,5e1c <___vfprintf_internal_r+0x1dac>
    5cfc:	99004716 	blt	r19,r4,5e1c <___vfprintf_internal_r+0x1dac>
    5d00:	d8c14d15 	stw	r3,1332(sp)
    5d04:	003ff006 	br	5cc8 <___vfprintf_internal_r+0x1c58>
    5d08:	d8800717 	ldw	r2,28(sp)
    5d0c:	14bf8b2e 	bgeu	r2,r18,5b3c <___vfprintf_internal_r+0x1acc>
    5d10:	9007883a 	mov	r3,r18
    5d14:	01000c04 	movi	r4,48
    5d18:	11000005 	stb	r4,0(r2)
    5d1c:	10800044 	addi	r2,r2,1
    5d20:	d8800715 	stw	r2,28(sp)
    5d24:	18bffc1e 	bne	r3,r2,5d18 <___vfprintf_internal_r+0x1ca8>
    5d28:	003f8406 	br	5b3c <___vfprintf_internal_r+0x1acc>
    5d2c:	d8814117 	ldw	r2,1284(sp)
    5d30:	10c00007 	ldb	r3,0(r2)
    5d34:	00800c04 	movi	r2,48
    5d38:	18805b26 	beq	r3,r2,5ea8 <___vfprintf_internal_r+0x1e38>
    5d3c:	d9000517 	ldw	r4,20(sp)
    5d40:	9125883a 	add	r18,r18,r4
    5d44:	003f7506 	br	5b1c <___vfprintf_internal_r+0x1aac>
    5d48:	d9014c17 	ldw	r4,1328(sp)
    5d4c:	2080004c 	andi	r2,r4,1
    5d50:	1005003a 	cmpeq	r2,r2,zero
    5d54:	103f6a26 	beq	r2,zero,5b00 <___vfprintf_internal_r+0x1a90>
    5d58:	d8800717 	ldw	r2,28(sp)
    5d5c:	003f7706 	br	5b3c <___vfprintf_internal_r+0x1acc>
    5d60:	d9c14515 	stw	r7,1300(sp)
    5d64:	38004d16 	blt	r7,zero,5e9c <___vfprintf_internal_r+0x1e2c>
    5d68:	dc814715 	stw	r18,1308(sp)
    5d6c:	d8014615 	stw	zero,1304(sp)
    5d70:	003b6106 	br	4af8 <___vfprintf_internal_r+0xa88>
    5d74:	d9014f17 	ldw	r4,1340(sp)
    5d78:	d8800504 	addi	r2,sp,20
    5d7c:	d8800115 	stw	r2,4(sp)
    5d80:	d8c00604 	addi	r3,sp,24
    5d84:	d8800704 	addi	r2,sp,28
    5d88:	800b883a 	mov	r5,r16
    5d8c:	880d883a 	mov	r6,r17
    5d90:	01c000c4 	movi	r7,3
    5d94:	d8c00215 	stw	r3,8(sp)
    5d98:	d8800315 	stw	r2,12(sp)
    5d9c:	dcc00015 	stw	r19,0(sp)
    5da0:	9829883a 	mov	r20,r19
    5da4:	0007afc0 	call	7afc <_dtoa_r>
    5da8:	d8814115 	stw	r2,1284(sp)
    5dac:	003f5106 	br	5af4 <___vfprintf_internal_r+0x1a84>
    5db0:	d8c14217 	ldw	r3,1288(sp)
    5db4:	d9014317 	ldw	r4,1292(sp)
    5db8:	07000b44 	movi	fp,45
    5dbc:	1821883a 	mov	r16,r3
    5dc0:	2460003c 	xorhi	r17,r4,32768
    5dc4:	003f3106 	br	5a8c <___vfprintf_internal_r+0x1a1c>
    5dc8:	9d000044 	addi	r20,r19,1
    5dcc:	003f3906 	br	5ab4 <___vfprintf_internal_r+0x1a44>
    5dd0:	983f251e 	bne	r19,zero,5a68 <___vfprintf_internal_r+0x19f8>
    5dd4:	04c00044 	movi	r19,1
    5dd8:	003f2306 	br	5a68 <___vfprintf_internal_r+0x19f8>
    5ddc:	04c00184 	movi	r19,6
    5de0:	003f2106 	br	5a68 <___vfprintf_internal_r+0x19f8>
    5de4:	d8014515 	stw	zero,1300(sp)
    5de8:	003eee06 	br	59a4 <___vfprintf_internal_r+0x1934>
    5dec:	200f883a 	mov	r7,r4
    5df0:	0100370e 	bge	zero,r4,5ed0 <___vfprintf_internal_r+0x1e60>
    5df4:	9800031e 	bne	r19,zero,5e04 <___vfprintf_internal_r+0x1d94>
    5df8:	d9814c17 	ldw	r6,1328(sp)
    5dfc:	3080004c 	andi	r2,r6,1
    5e00:	103fb726 	beq	r2,zero,5ce0 <___vfprintf_internal_r+0x1c70>
    5e04:	20800044 	addi	r2,r4,1
    5e08:	98a7883a 	add	r19,r19,r2
    5e0c:	dcc14515 	stw	r19,1300(sp)
    5e10:	980f883a 	mov	r7,r19
    5e14:	983f800e 	bge	r19,zero,5c18 <___vfprintf_internal_r+0x1ba8>
    5e18:	003fb306 	br	5ce8 <___vfprintf_internal_r+0x1c78>
    5e1c:	d9814d17 	ldw	r6,1332(sp)
    5e20:	31bfff84 	addi	r6,r6,-2
    5e24:	d9814d15 	stw	r6,1332(sp)
    5e28:	003f4c06 	br	5b5c <___vfprintf_internal_r+0x1aec>
    5e2c:	0100180e 	bge	zero,r4,5e90 <___vfprintf_internal_r+0x1e20>
    5e30:	00800044 	movi	r2,1
    5e34:	1485883a 	add	r2,r2,r18
    5e38:	d8814515 	stw	r2,1300(sp)
    5e3c:	100f883a 	mov	r7,r2
    5e40:	103f750e 	bge	r2,zero,5c18 <___vfprintf_internal_r+0x1ba8>
    5e44:	003fa806 	br	5ce8 <___vfprintf_internal_r+0x1c78>
    5e48:	80c00c04 	addi	r3,r16,48
    5e4c:	00800c04 	movi	r2,48
    5e50:	d8c008c5 	stb	r3,35(sp)
    5e54:	d9800804 	addi	r6,sp,32
    5e58:	d8c00904 	addi	r3,sp,36
    5e5c:	d8800885 	stb	r2,34(sp)
    5e60:	003f6506 	br	5bf8 <___vfprintf_internal_r+0x1b88>
    5e64:	d9014c17 	ldw	r4,1328(sp)
    5e68:	2084703a 	and	r2,r4,r2
    5e6c:	103f9c26 	beq	r2,zero,5ce0 <___vfprintf_internal_r+0x1c70>
    5e70:	003f6606 	br	5c0c <___vfprintf_internal_r+0x1b9c>
    5e74:	d9800804 	addi	r6,sp,32
    5e78:	d8c00884 	addi	r3,sp,34
    5e7c:	003f5e06 	br	5bf8 <___vfprintf_internal_r+0x1b88>
    5e80:	00800b44 	movi	r2,45
    5e84:	0121c83a 	sub	r16,zero,r4
    5e88:	d8800845 	stb	r2,33(sp)
    5e8c:	003f3d06 	br	5b84 <___vfprintf_internal_r+0x1b14>
    5e90:	00800084 	movi	r2,2
    5e94:	1105c83a 	sub	r2,r2,r4
    5e98:	003fe606 	br	5e34 <___vfprintf_internal_r+0x1dc4>
    5e9c:	d8014515 	stw	zero,1300(sp)
    5ea0:	dc814715 	stw	r18,1308(sp)
    5ea4:	003fb106 	br	5d6c <___vfprintf_internal_r+0x1cfc>
    5ea8:	000d883a 	mov	r6,zero
    5eac:	000f883a 	mov	r7,zero
    5eb0:	8009883a 	mov	r4,r16
    5eb4:	880b883a 	mov	r5,r17
    5eb8:	00109840 	call	10984 <__nedf2>
    5ebc:	103f9f26 	beq	r2,zero,5d3c <___vfprintf_internal_r+0x1ccc>
    5ec0:	00800044 	movi	r2,1
    5ec4:	1509c83a 	sub	r4,r2,r20
    5ec8:	d9000515 	stw	r4,20(sp)
    5ecc:	003f9b06 	br	5d3c <___vfprintf_internal_r+0x1ccc>
    5ed0:	98000d1e 	bne	r19,zero,5f08 <___vfprintf_internal_r+0x1e98>
    5ed4:	d8c14c17 	ldw	r3,1328(sp)
    5ed8:	1880004c 	andi	r2,r3,1
    5edc:	10000a1e 	bne	r2,zero,5f08 <___vfprintf_internal_r+0x1e98>
    5ee0:	01000044 	movi	r4,1
    5ee4:	200f883a 	mov	r7,r4
    5ee8:	d9014515 	stw	r4,1300(sp)
    5eec:	003f4a06 	br	5c18 <___vfprintf_internal_r+0x1ba8>
    5ef0:	3cc00017 	ldw	r19,0(r7)
    5ef4:	39c00104 	addi	r7,r7,4
    5ef8:	983d0e0e 	bge	r19,zero,5334 <___vfprintf_internal_r+0x12c4>
    5efc:	b8c00007 	ldb	r3,0(r23)
    5f00:	04ffffc4 	movi	r19,-1
    5f04:	0038d906 	br	426c <___vfprintf_internal_r+0x1fc>
    5f08:	9cc00084 	addi	r19,r19,2
    5f0c:	dcc14515 	stw	r19,1300(sp)
    5f10:	980f883a 	mov	r7,r19
    5f14:	983f400e 	bge	r19,zero,5c18 <___vfprintf_internal_r+0x1ba8>
    5f18:	003f7306 	br	5ce8 <___vfprintf_internal_r+0x1c78>

00005f1c <__vfprintf_internal>:
    5f1c:	00800074 	movhi	r2,1
    5f20:	109a7d04 	addi	r2,r2,27124
    5f24:	2013883a 	mov	r9,r4
    5f28:	11000017 	ldw	r4,0(r2)
    5f2c:	2805883a 	mov	r2,r5
    5f30:	300f883a 	mov	r7,r6
    5f34:	480b883a 	mov	r5,r9
    5f38:	100d883a 	mov	r6,r2
    5f3c:	00040701 	jmpi	4070 <___vfprintf_internal_r>

00005f40 <__svfscanf_r>:
    5f40:	deff4e04 	addi	sp,sp,-712
    5f44:	dd80ae15 	stw	r22,696(sp)
    5f48:	dd00ac15 	stw	r20,688(sp)
    5f4c:	dc40a915 	stw	r17,676(sp)
    5f50:	dc00a815 	stw	r16,672(sp)
    5f54:	dfc0b115 	stw	ra,708(sp)
    5f58:	df00b015 	stw	fp,704(sp)
    5f5c:	ddc0af15 	stw	r23,700(sp)
    5f60:	dd40ad15 	stw	r21,692(sp)
    5f64:	dcc0ab15 	stw	r19,684(sp)
    5f68:	dc80aa15 	stw	r18,680(sp)
    5f6c:	202d883a 	mov	r22,r4
    5f70:	2821883a 	mov	r16,r5
    5f74:	d9c0a415 	stw	r7,656(sp)
    5f78:	3029883a 	mov	r20,r6
    5f7c:	d800a215 	stw	zero,648(sp)
    5f80:	0023883a 	mov	r17,zero
    5f84:	d800a115 	stw	zero,644(sp)
    5f88:	d800a015 	stw	zero,640(sp)
    5f8c:	a1000007 	ldb	r4,0(r20)
    5f90:	d9000115 	stw	r4,4(sp)
    5f94:	20001f26 	beq	r4,zero,6014 <__svfscanf_r+0xd4>
    5f98:	04800074 	movhi	r18,1
    5f9c:	949a7c04 	addi	r18,r18,27120
    5fa0:	91800017 	ldw	r6,0(r18)
    5fa4:	a5000044 	addi	r20,r20,1
    5fa8:	3107883a 	add	r3,r6,r4
    5fac:	18800003 	ldbu	r2,0(r3)
    5fb0:	1080020c 	andi	r2,r2,8
    5fb4:	10002426 	beq	r2,zero,6048 <__svfscanf_r+0x108>
    5fb8:	80c00117 	ldw	r3,4(r16)
    5fbc:	00c00e0e 	bge	zero,r3,5ff8 <__svfscanf_r+0xb8>
    5fc0:	81400017 	ldw	r5,0(r16)
    5fc4:	90800017 	ldw	r2,0(r18)
    5fc8:	28c00003 	ldbu	r3,0(r5)
    5fcc:	1887883a 	add	r3,r3,r2
    5fd0:	19000003 	ldbu	r4,0(r3)
    5fd4:	2100020c 	andi	r4,r4,8
    5fd8:	203fec26 	beq	r4,zero,5f8c <__svfscanf_r+0x4c>
    5fdc:	80c00117 	ldw	r3,4(r16)
    5fe0:	29800044 	addi	r6,r5,1
    5fe4:	8c400044 	addi	r17,r17,1
    5fe8:	18ffffc4 	addi	r3,r3,-1
    5fec:	81800015 	stw	r6,0(r16)
    5ff0:	80c00115 	stw	r3,4(r16)
    5ff4:	00fff216 	blt	zero,r3,5fc0 <__svfscanf_r+0x80>
    5ff8:	b009883a 	mov	r4,r22
    5ffc:	800b883a 	mov	r5,r16
    6000:	00038480 	call	3848 <__srefill_r>
    6004:	103fee26 	beq	r2,zero,5fc0 <__svfscanf_r+0x80>
    6008:	a1000007 	ldb	r4,0(r20)
    600c:	d9000115 	stw	r4,4(sp)
    6010:	203fe11e 	bne	r4,zero,5f98 <__svfscanf_r+0x58>
    6014:	d880a217 	ldw	r2,648(sp)
    6018:	dfc0b117 	ldw	ra,708(sp)
    601c:	df00b017 	ldw	fp,704(sp)
    6020:	ddc0af17 	ldw	r23,700(sp)
    6024:	dd80ae17 	ldw	r22,696(sp)
    6028:	dd40ad17 	ldw	r21,692(sp)
    602c:	dd00ac17 	ldw	r20,688(sp)
    6030:	dcc0ab17 	ldw	r19,684(sp)
    6034:	dc80aa17 	ldw	r18,680(sp)
    6038:	dc40a917 	ldw	r17,676(sp)
    603c:	dc00a817 	ldw	r16,672(sp)
    6040:	dec0b204 	addi	sp,sp,712
    6044:	f800283a 	ret
    6048:	00800944 	movi	r2,37
    604c:	20801626 	beq	r4,r2,60a8 <__svfscanf_r+0x168>
    6050:	80800117 	ldw	r2,4(r16)
    6054:	00800b0e 	bge	zero,r2,6084 <__svfscanf_r+0x144>
    6058:	81000017 	ldw	r4,0(r16)
    605c:	a0ffffc7 	ldb	r3,-1(r20)
    6060:	20800003 	ldbu	r2,0(r4)
    6064:	10ffeb1e 	bne	r2,r3,6014 <__svfscanf_r+0xd4>
    6068:	80c00117 	ldw	r3,4(r16)
    606c:	21800044 	addi	r6,r4,1
    6070:	8c400044 	addi	r17,r17,1
    6074:	18ffffc4 	addi	r3,r3,-1
    6078:	80c00115 	stw	r3,4(r16)
    607c:	81800015 	stw	r6,0(r16)
    6080:	003fc206 	br	5f8c <__svfscanf_r+0x4c>
    6084:	b009883a 	mov	r4,r22
    6088:	800b883a 	mov	r5,r16
    608c:	00038480 	call	3848 <__srefill_r>
    6090:	103ff126 	beq	r2,zero,6058 <__svfscanf_r+0x118>
    6094:	d900a217 	ldw	r4,648(sp)
    6098:	2004c91e 	bne	r4,zero,73c0 <__svfscanf_r+0x1480>
    609c:	00bfffc4 	movi	r2,-1
    60a0:	d880a215 	stw	r2,648(sp)
    60a4:	003fdb06 	br	6014 <__svfscanf_r+0xd4>
    60a8:	d800a315 	stw	zero,652(sp)
    60ac:	0027883a 	mov	r19,zero
    60b0:	a0c00003 	ldbu	r3,0(r20)
    60b4:	00801e04 	movi	r2,120
    60b8:	a5000044 	addi	r20,r20,1
    60bc:	19403fcc 	andi	r5,r3,255
    60c0:	2940201c 	xori	r5,r5,128
    60c4:	297fe004 	addi	r5,r5,-128
    60c8:	10c08036 	bltu	r2,r3,62cc <__svfscanf_r+0x38c>
    60cc:	18c5883a 	add	r2,r3,r3
    60d0:	1085883a 	add	r2,r2,r2
    60d4:	00c00034 	movhi	r3,0
    60d8:	18d83a04 	addi	r3,r3,24808
    60dc:	10c5883a 	add	r2,r2,r3
    60e0:	11000017 	ldw	r4,0(r2)
    60e4:	2000683a 	jmp	r4
    60e8:	0000609c 	xori	zero,zero,386
    60ec:	000062cc 	andi	zero,zero,395
    60f0:	000062cc 	andi	zero,zero,395
    60f4:	000062cc 	andi	zero,zero,395
    60f8:	000062cc 	andi	zero,zero,395
    60fc:	000062cc 	andi	zero,zero,395
    6100:	000062cc 	andi	zero,zero,395
    6104:	000062cc 	andi	zero,zero,395
    6108:	000062cc 	andi	zero,zero,395
    610c:	000062cc 	andi	zero,zero,395
    6110:	000062cc 	andi	zero,zero,395
    6114:	000062cc 	andi	zero,zero,395
    6118:	000062cc 	andi	zero,zero,395
    611c:	000062cc 	andi	zero,zero,395
    6120:	000062cc 	andi	zero,zero,395
    6124:	000062cc 	andi	zero,zero,395
    6128:	000062cc 	andi	zero,zero,395
    612c:	000062cc 	andi	zero,zero,395
    6130:	000062cc 	andi	zero,zero,395
    6134:	000062cc 	andi	zero,zero,395
    6138:	000062cc 	andi	zero,zero,395
    613c:	000062cc 	andi	zero,zero,395
    6140:	000062cc 	andi	zero,zero,395
    6144:	000062cc 	andi	zero,zero,395
    6148:	000062cc 	andi	zero,zero,395
    614c:	000062cc 	andi	zero,zero,395
    6150:	000062cc 	andi	zero,zero,395
    6154:	000062cc 	andi	zero,zero,395
    6158:	000062cc 	andi	zero,zero,395
    615c:	000062cc 	andi	zero,zero,395
    6160:	000062cc 	andi	zero,zero,395
    6164:	000062cc 	andi	zero,zero,395
    6168:	000062cc 	andi	zero,zero,395
    616c:	000062cc 	andi	zero,zero,395
    6170:	000062cc 	andi	zero,zero,395
    6174:	000062cc 	andi	zero,zero,395
    6178:	000062cc 	andi	zero,zero,395
    617c:	00006050 	cmplti	zero,zero,385
    6180:	000062cc 	andi	zero,zero,395
    6184:	000062cc 	andi	zero,zero,395
    6188:	000062cc 	andi	zero,zero,395
    618c:	000062cc 	andi	zero,zero,395
    6190:	000072f0 	cmpltui	zero,zero,459
    6194:	000062cc 	andi	zero,zero,395
    6198:	000062cc 	andi	zero,zero,395
    619c:	000062cc 	andi	zero,zero,395
    61a0:	000062cc 	andi	zero,zero,395
    61a4:	000062cc 	andi	zero,zero,395
    61a8:	00006cec 	andhi	zero,zero,435
    61ac:	00006cec 	andhi	zero,zero,435
    61b0:	00006cec 	andhi	zero,zero,435
    61b4:	00006cec 	andhi	zero,zero,435
    61b8:	00006cec 	andhi	zero,zero,435
    61bc:	00006cec 	andhi	zero,zero,435
    61c0:	00006cec 	andhi	zero,zero,435
    61c4:	00006cec 	andhi	zero,zero,435
    61c8:	00006cec 	andhi	zero,zero,435
    61cc:	00006cec 	andhi	zero,zero,435
    61d0:	000062cc 	andi	zero,zero,395
    61d4:	000062cc 	andi	zero,zero,395
    61d8:	000062cc 	andi	zero,zero,395
    61dc:	000062cc 	andi	zero,zero,395
    61e0:	000062cc 	andi	zero,zero,395
    61e4:	000062cc 	andi	zero,zero,395
    61e8:	000062cc 	andi	zero,zero,395
    61ec:	000062cc 	andi	zero,zero,395
    61f0:	000062cc 	andi	zero,zero,395
    61f4:	000062cc 	andi	zero,zero,395
    61f8:	0000746c 	andhi	zero,zero,465
    61fc:	00007464 	muli	zero,zero,465
    6200:	000062cc 	andi	zero,zero,395
    6204:	00007464 	muli	zero,zero,465
    6208:	000062cc 	andi	zero,zero,395
    620c:	000062cc 	andi	zero,zero,395
    6210:	000062cc 	andi	zero,zero,395
    6214:	000062cc 	andi	zero,zero,395
    6218:	000074fc 	xorhi	zero,zero,467
    621c:	000062cc 	andi	zero,zero,395
    6220:	000062cc 	andi	zero,zero,395
    6224:	000074b4 	movhi	zero,466
    6228:	000062cc 	andi	zero,zero,395
    622c:	000062cc 	andi	zero,zero,395
    6230:	000062cc 	andi	zero,zero,395
    6234:	000062cc 	andi	zero,zero,395
    6238:	000062cc 	andi	zero,zero,395
    623c:	000062cc 	andi	zero,zero,395
    6240:	000062cc 	andi	zero,zero,395
    6244:	000062cc 	andi	zero,zero,395
    6248:	000072f8 	rdprs	zero,zero,459
    624c:	000062cc 	andi	zero,zero,395
    6250:	000062cc 	andi	zero,zero,395
    6254:	00007498 	cmpnei	zero,zero,466
    6258:	000062cc 	andi	zero,zero,395
    625c:	000062cc 	andi	zero,zero,395
    6260:	000062cc 	andi	zero,zero,395
    6264:	000062cc 	andi	zero,zero,395
    6268:	000062cc 	andi	zero,zero,395
    626c:	000062cc 	andi	zero,zero,395
    6270:	000062cc 	andi	zero,zero,395
    6274:	0000748c 	andi	zero,zero,466
    6278:	00007470 	cmpltui	zero,zero,465
    627c:	00007464 	muli	zero,zero,465
    6280:	00007464 	muli	zero,zero,465
    6284:	00007464 	muli	zero,zero,465
    6288:	0000745c 	xori	zero,zero,465
    628c:	00007550 	cmplti	zero,zero,469
    6290:	000062cc 	andi	zero,zero,395
    6294:	000062cc 	andi	zero,zero,395
    6298:	0000753c 	xorhi	zero,zero,468
    629c:	000062cc 	andi	zero,zero,395
    62a0:	000074d4 	movui	zero,467
    62a4:	000074b8 	rdprs	zero,zero,466
    62a8:	0000750c 	andi	zero,zero,468
    62ac:	000062cc 	andi	zero,zero,395
    62b0:	000062cc 	andi	zero,zero,395
    62b4:	00007504 	movi	zero,468
    62b8:	000062cc 	andi	zero,zero,395
    62bc:	0000683c 	xorhi	zero,zero,416
    62c0:	000062cc 	andi	zero,zero,395
    62c4:	000062cc 	andi	zero,zero,395
    62c8:	000072f8 	rdprs	zero,zero,459
    62cc:	2987883a 	add	r3,r5,r6
    62d0:	18800003 	ldbu	r2,0(r3)
    62d4:	1080004c 	andi	r2,r2,1
    62d8:	1005003a 	cmpeq	r2,r2,zero
    62dc:	10002c26 	beq	r2,zero,6390 <__svfscanf_r+0x450>
    62e0:	01000074 	movhi	r4,1
    62e4:	2134fa04 	addi	r4,r4,-11288
    62e8:	00800284 	movi	r2,10
    62ec:	d900a015 	stw	r4,640(sp)
    62f0:	054000c4 	movi	r21,3
    62f4:	d880a115 	stw	r2,644(sp)
    62f8:	80c00117 	ldw	r3,4(r16)
    62fc:	00c14a0e 	bge	zero,r3,6828 <__svfscanf_r+0x8e8>
    6300:	9880100c 	andi	r2,r19,64
    6304:	10001326 	beq	r2,zero,6354 <__svfscanf_r+0x414>
    6308:	00800104 	movi	r2,4
    630c:	157f1f36 	bltu	r2,r21,5f8c <__svfscanf_r+0x4c>
    6310:	ad45883a 	add	r2,r21,r21
    6314:	1085883a 	add	r2,r2,r2
    6318:	00c00034 	movhi	r3,0
    631c:	18d8cb04 	addi	r3,r3,25388
    6320:	10c5883a 	add	r2,r2,r3
    6324:	11000017 	ldw	r4,0(r2)
    6328:	2000683a 	jmp	r4
    632c:	00006398 	cmpnei	zero,zero,398
    6330:	000064a4 	muli	zero,zero,402
    6334:	00006518 	cmpnei	zero,zero,404
    6338:	00006804 	movi	zero,416
    633c:	00006650 	cmplti	zero,zero,409
    6340:	b009883a 	mov	r4,r22
    6344:	800b883a 	mov	r5,r16
    6348:	00038480 	call	3848 <__srefill_r>
    634c:	103f511e 	bne	r2,zero,6094 <__svfscanf_r+0x154>
    6350:	8c400044 	addi	r17,r17,1
    6354:	81400017 	ldw	r5,0(r16)
    6358:	90800017 	ldw	r2,0(r18)
    635c:	28c00003 	ldbu	r3,0(r5)
    6360:	1887883a 	add	r3,r3,r2
    6364:	19000003 	ldbu	r4,0(r3)
    6368:	2100020c 	andi	r4,r4,8
    636c:	203fe626 	beq	r4,zero,6308 <__svfscanf_r+0x3c8>
    6370:	80c00117 	ldw	r3,4(r16)
    6374:	18ffffc4 	addi	r3,r3,-1
    6378:	80c00115 	stw	r3,4(r16)
    637c:	00fff00e 	bge	zero,r3,6340 <__svfscanf_r+0x400>
    6380:	29800044 	addi	r6,r5,1
    6384:	8c400044 	addi	r17,r17,1
    6388:	81800015 	stw	r6,0(r16)
    638c:	003ff106 	br	6354 <__svfscanf_r+0x414>
    6390:	9cc00054 	ori	r19,r19,1
    6394:	003fd206 	br	62e0 <__svfscanf_r+0x3a0>
    6398:	d8c0a317 	ldw	r3,652(sp)
    639c:	1800021e 	bne	r3,zero,63a8 <__svfscanf_r+0x468>
    63a0:	01000044 	movi	r4,1
    63a4:	d900a315 	stw	r4,652(sp)
    63a8:	9880004c 	andi	r2,r19,1
    63ac:	1005003a 	cmpeq	r2,r2,zero
    63b0:	1003d91e 	bne	r2,zero,7318 <__svfscanf_r+0x13d8>
    63b4:	9d40040c 	andi	r21,r19,16
    63b8:	a839003a 	cmpeq	fp,r21,zero
    63bc:	e0042526 	beq	fp,zero,7454 <__svfscanf_r+0x1514>
    63c0:	d880a417 	ldw	r2,656(sp)
    63c4:	14c00017 	ldw	r19,0(r2)
    63c8:	10800104 	addi	r2,r2,4
    63cc:	d880a415 	stw	r2,656(sp)
    63d0:	d8c0a317 	ldw	r3,652(sp)
    63d4:	18041a26 	beq	r3,zero,7440 <__svfscanf_r+0x1500>
    63d8:	01000074 	movhi	r4,1
    63dc:	211a8104 	addi	r4,r4,27140
    63e0:	20800017 	ldw	r2,0(r4)
    63e4:	103f2b26 	beq	r2,zero,6094 <__svfscanf_r+0x154>
    63e8:	d8804404 	addi	r2,sp,272
    63ec:	0025883a 	mov	r18,zero
    63f0:	d880a615 	stw	r2,664(sp)
    63f4:	05ffffc4 	movi	r23,-1
    63f8:	80800017 	ldw	r2,0(r16)
    63fc:	80c00117 	ldw	r3,4(r16)
    6400:	d900a617 	ldw	r4,664(sp)
    6404:	12000003 	ldbu	r8,0(r2)
    6408:	18ffffc4 	addi	r3,r3,-1
    640c:	11800044 	addi	r6,r2,1
    6410:	248f883a 	add	r7,r4,r18
    6414:	80c00115 	stw	r3,4(r16)
    6418:	81800015 	stw	r6,0(r16)
    641c:	3a000005 	stb	r8,0(r7)
    6420:	d9000204 	addi	r4,sp,8
    6424:	000b883a 	mov	r5,zero
    6428:	01800204 	movi	r6,8
    642c:	00036600 	call	3660 <memset>
    6430:	d980a617 	ldw	r6,664(sp)
    6434:	94800044 	addi	r18,r18,1
    6438:	d8800204 	addi	r2,sp,8
    643c:	b009883a 	mov	r4,r22
    6440:	980b883a 	mov	r5,r19
    6444:	900f883a 	mov	r7,r18
    6448:	d8800015 	stw	r2,0(sp)
    644c:	000a2180 	call	a218 <_mbrtowc_r>
    6450:	1007883a 	mov	r3,r2
    6454:	15ff0f26 	beq	r2,r23,6094 <__svfscanf_r+0x154>
    6458:	1003f11e 	bne	r2,zero,7420 <__svfscanf_r+0x14e0>
    645c:	a800011e 	bne	r21,zero,6464 <__svfscanf_r+0x524>
    6460:	98000015 	stw	zero,0(r19)
    6464:	d8c0a317 	ldw	r3,652(sp)
    6468:	8ca3883a 	add	r17,r17,r18
    646c:	18ffffc4 	addi	r3,r3,-1
    6470:	d8c0a315 	stw	r3,652(sp)
    6474:	e0000126 	beq	fp,zero,647c <__svfscanf_r+0x53c>
    6478:	9cc00104 	addi	r19,r19,4
    647c:	0025883a 	mov	r18,zero
    6480:	80c00117 	ldw	r3,4(r16)
    6484:	00c3e90e 	bge	zero,r3,742c <__svfscanf_r+0x14ec>
    6488:	d900a317 	ldw	r4,652(sp)
    648c:	2003ec26 	beq	r4,zero,7440 <__svfscanf_r+0x1500>
    6490:	00c00074 	movhi	r3,1
    6494:	18da8104 	addi	r3,r3,27140
    6498:	18800017 	ldw	r2,0(r3)
    649c:	90bfd61e 	bne	r18,r2,63f8 <__svfscanf_r+0x4b8>
    64a0:	003efc06 	br	6094 <__svfscanf_r+0x154>
    64a4:	d880a317 	ldw	r2,652(sp)
    64a8:	1000021e 	bne	r2,zero,64b4 <__svfscanf_r+0x574>
    64ac:	00ffffc4 	movi	r3,-1
    64b0:	d8c0a315 	stw	r3,652(sp)
    64b4:	9880040c 	andi	r2,r19,16
    64b8:	10036526 	beq	r2,zero,7250 <__svfscanf_r+0x1310>
    64bc:	0027883a 	mov	r19,zero
    64c0:	dd400404 	addi	r21,sp,16
    64c4:	81000017 	ldw	r4,0(r16)
    64c8:	20800003 	ldbu	r2,0(r4)
    64cc:	a885883a 	add	r2,r21,r2
    64d0:	10c00007 	ldb	r3,0(r2)
    64d4:	1803be26 	beq	r3,zero,73d0 <__svfscanf_r+0x1490>
    64d8:	80c00117 	ldw	r3,4(r16)
    64dc:	21800044 	addi	r6,r4,1
    64e0:	d900a317 	ldw	r4,652(sp)
    64e4:	18ffffc4 	addi	r3,r3,-1
    64e8:	9cc00044 	addi	r19,r19,1
    64ec:	81800015 	stw	r6,0(r16)
    64f0:	80c00115 	stw	r3,4(r16)
    64f4:	24c3b626 	beq	r4,r19,73d0 <__svfscanf_r+0x1490>
    64f8:	00fff216 	blt	zero,r3,64c4 <__svfscanf_r+0x584>
    64fc:	b009883a 	mov	r4,r22
    6500:	800b883a 	mov	r5,r16
    6504:	00038480 	call	3848 <__srefill_r>
    6508:	103fee26 	beq	r2,zero,64c4 <__svfscanf_r+0x584>
    650c:	983ee126 	beq	r19,zero,6094 <__svfscanf_r+0x154>
    6510:	8ce3883a 	add	r17,r17,r19
    6514:	003e9d06 	br	5f8c <__svfscanf_r+0x4c>
    6518:	d900a317 	ldw	r4,652(sp)
    651c:	2000021e 	bne	r4,zero,6528 <__svfscanf_r+0x5e8>
    6520:	00bfffc4 	movi	r2,-1
    6524:	d880a315 	stw	r2,652(sp)
    6528:	9880004c 	andi	r2,r19,1
    652c:	1005003a 	cmpeq	r2,r2,zero
    6530:	1001f41e 	bne	r2,zero,6d04 <__svfscanf_r+0xdc4>
    6534:	9dc0040c 	andi	r23,r19,16
    6538:	b807003a 	cmpeq	r3,r23,zero
    653c:	d8c0a515 	stw	r3,660(sp)
    6540:	1803b21e 	bne	r3,zero,740c <__svfscanf_r+0x14cc>
    6544:	dd400104 	addi	r21,sp,4
    6548:	0027883a 	mov	r19,zero
    654c:	073fffc4 	movi	fp,-1
    6550:	81400017 	ldw	r5,0(r16)
    6554:	90800017 	ldw	r2,0(r18)
    6558:	29c00003 	ldbu	r7,0(r5)
    655c:	38c03fcc 	andi	r3,r7,255
    6560:	1887883a 	add	r3,r3,r2
    6564:	19000003 	ldbu	r4,0(r3)
    6568:	2100020c 	andi	r4,r4,8
    656c:	2000321e 	bne	r4,zero,6638 <__svfscanf_r+0x6f8>
    6570:	d8c0a317 	ldw	r3,652(sp)
    6574:	18003026 	beq	r3,zero,6638 <__svfscanf_r+0x6f8>
    6578:	00800074 	movhi	r2,1
    657c:	109a8104 	addi	r2,r2,27140
    6580:	10c00017 	ldw	r3,0(r2)
    6584:	98fec326 	beq	r19,r3,6094 <__svfscanf_r+0x154>
    6588:	d8c04404 	addi	r3,sp,272
    658c:	80800117 	ldw	r2,4(r16)
    6590:	d8c0a615 	stw	r3,664(sp)
    6594:	d900a617 	ldw	r4,664(sp)
    6598:	10ffffc4 	addi	r3,r2,-1
    659c:	29800044 	addi	r6,r5,1
    65a0:	80c00115 	stw	r3,4(r16)
    65a4:	24c5883a 	add	r2,r4,r19
    65a8:	81800015 	stw	r6,0(r16)
    65ac:	d9000204 	addi	r4,sp,8
    65b0:	000b883a 	mov	r5,zero
    65b4:	01800204 	movi	r6,8
    65b8:	11c00005 	stb	r7,0(r2)
    65bc:	00036600 	call	3660 <memset>
    65c0:	d980a617 	ldw	r6,664(sp)
    65c4:	9cc00044 	addi	r19,r19,1
    65c8:	d8800204 	addi	r2,sp,8
    65cc:	b009883a 	mov	r4,r22
    65d0:	a80b883a 	mov	r5,r21
    65d4:	980f883a 	mov	r7,r19
    65d8:	d8800015 	stw	r2,0(sp)
    65dc:	000a2180 	call	a218 <_mbrtowc_r>
    65e0:	1007883a 	mov	r3,r2
    65e4:	173eab26 	beq	r2,fp,6094 <__svfscanf_r+0x154>
    65e8:	1003851e 	bne	r2,zero,7400 <__svfscanf_r+0x14c0>
    65ec:	a8000015 	stw	zero,0(r21)
    65f0:	a9000017 	ldw	r4,0(r21)
    65f4:	0009f1c0 	call	9f1c <iswspace>
    65f8:	1003781e 	bne	r2,zero,73dc <__svfscanf_r+0x149c>
    65fc:	d900a317 	ldw	r4,652(sp)
    6600:	d880a517 	ldw	r2,660(sp)
    6604:	8ce3883a 	add	r17,r17,r19
    6608:	213fffc4 	addi	r4,r4,-1
    660c:	d900a315 	stw	r4,652(sp)
    6610:	10000126 	beq	r2,zero,6618 <__svfscanf_r+0x6d8>
    6614:	ad400104 	addi	r21,r21,4
    6618:	0027883a 	mov	r19,zero
    661c:	80c00117 	ldw	r3,4(r16)
    6620:	00ffcb16 	blt	zero,r3,6550 <__svfscanf_r+0x610>
    6624:	b009883a 	mov	r4,r22
    6628:	800b883a 	mov	r5,r16
    662c:	00038480 	call	3848 <__srefill_r>
    6630:	103fc726 	beq	r2,zero,6550 <__svfscanf_r+0x610>
    6634:	983e971e 	bne	r19,zero,6094 <__svfscanf_r+0x154>
    6638:	b83e541e 	bne	r23,zero,5f8c <__svfscanf_r+0x4c>
    663c:	d900a217 	ldw	r4,648(sp)
    6640:	a8000015 	stw	zero,0(r21)
    6644:	21000044 	addi	r4,r4,1
    6648:	d900a215 	stw	r4,648(sp)
    664c:	003e4f06 	br	5f8c <__svfscanf_r+0x4c>
    6650:	d900a317 	ldw	r4,652(sp)
    6654:	00805704 	movi	r2,348
    6658:	20ffffc4 	addi	r3,r4,-1
    665c:	10c1ed2e 	bgeu	r2,r3,6e14 <__svfscanf_r+0xed4>
    6660:	00805744 	movi	r2,349
    6664:	21bfa8c4 	addi	r6,r4,-349
    6668:	9d41e014 	ori	r21,r19,1920
    666c:	d880a315 	stw	r2,652(sp)
    6670:	d8c04404 	addi	r3,sp,272
    6674:	d8c0a615 	stw	r3,664(sp)
    6678:	182f883a 	mov	r23,r3
    667c:	d8009f15 	stw	zero,636(sp)
    6680:	d8009e15 	stw	zero,632(sp)
    6684:	d8009d15 	stw	zero,628(sp)
    6688:	d8009c15 	stw	zero,624(sp)
    668c:	0039883a 	mov	fp,zero
    6690:	0025883a 	mov	r18,zero
    6694:	80800017 	ldw	r2,0(r16)
    6698:	11400003 	ldbu	r5,0(r2)
    669c:	00801384 	movi	r2,78
    66a0:	28fff544 	addi	r3,r5,-43
    66a4:	18c03fcc 	andi	r3,r3,255
    66a8:	10c07d36 	bltu	r2,r3,68a0 <__svfscanf_r+0x960>
    66ac:	18c5883a 	add	r2,r3,r3
    66b0:	1085883a 	add	r2,r2,r2
    66b4:	00c00034 	movhi	r3,0
    66b8:	18d9b204 	addi	r3,r3,26312
    66bc:	10c5883a 	add	r2,r2,r3
    66c0:	11000017 	ldw	r4,0(r2)
    66c4:	2000683a 	jmp	r4
    66c8:	00006858 	cmpnei	zero,zero,417
    66cc:	000068a0 	cmpeqi	zero,zero,418
    66d0:	00006858 	cmpnei	zero,zero,417
    66d4:	000069ec 	andhi	zero,zero,423
    66d8:	000068a0 	cmpeqi	zero,zero,418
    66dc:	00006a24 	muli	zero,zero,424
    66e0:	00006a58 	cmpnei	zero,zero,425
    66e4:	00006a58 	cmpnei	zero,zero,425
    66e8:	00006a58 	cmpnei	zero,zero,425
    66ec:	00006a58 	cmpnei	zero,zero,425
    66f0:	00006a58 	cmpnei	zero,zero,425
    66f4:	00006a58 	cmpnei	zero,zero,425
    66f8:	00006a58 	cmpnei	zero,zero,425
    66fc:	00006a58 	cmpnei	zero,zero,425
    6700:	00006a58 	cmpnei	zero,zero,425
    6704:	000068a0 	cmpeqi	zero,zero,418
    6708:	000068a0 	cmpeqi	zero,zero,418
    670c:	000068a0 	cmpeqi	zero,zero,418
    6710:	000068a0 	cmpeqi	zero,zero,418
    6714:	000068a0 	cmpeqi	zero,zero,418
    6718:	000068a0 	cmpeqi	zero,zero,418
    671c:	000068a0 	cmpeqi	zero,zero,418
    6720:	00006a78 	rdprs	zero,zero,425
    6724:	000068a0 	cmpeqi	zero,zero,418
    6728:	000068a0 	cmpeqi	zero,zero,418
    672c:	000068a0 	cmpeqi	zero,zero,418
    6730:	00006a88 	cmpgei	zero,zero,426
    6734:	00006b24 	muli	zero,zero,428
    6738:	000068a0 	cmpeqi	zero,zero,418
    673c:	000068a0 	cmpeqi	zero,zero,418
    6740:	00006b40 	call	6b4 <cam_track+0x1dc>
    6744:	000068a0 	cmpeqi	zero,zero,418
    6748:	000068a0 	cmpeqi	zero,zero,418
    674c:	000068a0 	cmpeqi	zero,zero,418
    6750:	000068a0 	cmpeqi	zero,zero,418
    6754:	00006b6c 	andhi	zero,zero,429
    6758:	000068a0 	cmpeqi	zero,zero,418
    675c:	000068a0 	cmpeqi	zero,zero,418
    6760:	000068a0 	cmpeqi	zero,zero,418
    6764:	000068a0 	cmpeqi	zero,zero,418
    6768:	000068a0 	cmpeqi	zero,zero,418
    676c:	00006bc0 	call	6bc <cam_track+0x1e4>
    6770:	000068a0 	cmpeqi	zero,zero,418
    6774:	000068a0 	cmpeqi	zero,zero,418
    6778:	000068a0 	cmpeqi	zero,zero,418
    677c:	000068a0 	cmpeqi	zero,zero,418
    6780:	00006cd0 	cmplti	zero,zero,435
    6784:	000068a0 	cmpeqi	zero,zero,418
    6788:	000068a0 	cmpeqi	zero,zero,418
    678c:	000068a0 	cmpeqi	zero,zero,418
    6790:	000068a0 	cmpeqi	zero,zero,418
    6794:	000068a0 	cmpeqi	zero,zero,418
    6798:	000068a0 	cmpeqi	zero,zero,418
    679c:	000068a0 	cmpeqi	zero,zero,418
    67a0:	00006a78 	rdprs	zero,zero,425
    67a4:	000068a0 	cmpeqi	zero,zero,418
    67a8:	000068a0 	cmpeqi	zero,zero,418
    67ac:	000068a0 	cmpeqi	zero,zero,418
    67b0:	00006a88 	cmpgei	zero,zero,426
    67b4:	00006b24 	muli	zero,zero,428
    67b8:	000068a0 	cmpeqi	zero,zero,418
    67bc:	000068a0 	cmpeqi	zero,zero,418
    67c0:	00006b40 	call	6b4 <cam_track+0x1dc>
    67c4:	000068a0 	cmpeqi	zero,zero,418
    67c8:	000068a0 	cmpeqi	zero,zero,418
    67cc:	000068a0 	cmpeqi	zero,zero,418
    67d0:	000068a0 	cmpeqi	zero,zero,418
    67d4:	00006b6c 	andhi	zero,zero,429
    67d8:	000068a0 	cmpeqi	zero,zero,418
    67dc:	000068a0 	cmpeqi	zero,zero,418
    67e0:	000068a0 	cmpeqi	zero,zero,418
    67e4:	000068a0 	cmpeqi	zero,zero,418
    67e8:	000068a0 	cmpeqi	zero,zero,418
    67ec:	00006bc0 	call	6bc <cam_track+0x1e4>
    67f0:	000068a0 	cmpeqi	zero,zero,418
    67f4:	000068a0 	cmpeqi	zero,zero,418
    67f8:	000068a0 	cmpeqi	zero,zero,418
    67fc:	000068a0 	cmpeqi	zero,zero,418
    6800:	00006cd0 	cmplti	zero,zero,435
    6804:	d900a317 	ldw	r4,652(sp)
    6808:	00805704 	movi	r2,348
    680c:	20ffffc4 	addi	r3,r4,-1
    6810:	10c18c2e 	bgeu	r2,r3,6e44 <__svfscanf_r+0xf04>
    6814:	00805744 	movi	r2,349
    6818:	257fa8c4 	addi	r21,r4,-349
    681c:	9c836014 	ori	r18,r19,3456
    6820:	d880a315 	stw	r2,652(sp)
    6824:	0001a106 	br	6eac <__svfscanf_r+0xf6c>
    6828:	b009883a 	mov	r4,r22
    682c:	800b883a 	mov	r5,r16
    6830:	00038480 	call	3848 <__srefill_r>
    6834:	103eb226 	beq	r2,zero,6300 <__svfscanf_r+0x3c0>
    6838:	003e1606 	br	6094 <__svfscanf_r+0x154>
    683c:	01000284 	movi	r4,10
    6840:	00800074 	movhi	r2,1
    6844:	10b65a04 	addi	r2,r2,-9880
    6848:	054000c4 	movi	r21,3
    684c:	d900a115 	stw	r4,644(sp)
    6850:	d880a015 	stw	r2,640(sp)
    6854:	003ea806 	br	62f8 <__svfscanf_r+0x3b8>
    6858:	a880200c 	andi	r2,r21,128
    685c:	10001026 	beq	r2,zero,68a0 <__svfscanf_r+0x960>
    6860:	00bfdfc4 	movi	r2,-129
    6864:	a8aa703a 	and	r21,r21,r2
    6868:	b9400005 	stb	r5,0(r23)
    686c:	bdc00044 	addi	r23,r23,1
    6870:	80c00117 	ldw	r3,4(r16)
    6874:	8c400044 	addi	r17,r17,1
    6878:	18bfffc4 	addi	r2,r3,-1
    687c:	80800115 	stw	r2,4(r16)
    6880:	0080610e 	bge	zero,r2,6a08 <__svfscanf_r+0xac8>
    6884:	80800017 	ldw	r2,0(r16)
    6888:	10800044 	addi	r2,r2,1
    688c:	80800015 	stw	r2,0(r16)
    6890:	d880a317 	ldw	r2,652(sp)
    6894:	10bfffc4 	addi	r2,r2,-1
    6898:	d880a315 	stw	r2,652(sp)
    689c:	103f7d1e 	bne	r2,zero,6694 <__svfscanf_r+0x754>
    68a0:	d8c09e17 	ldw	r3,632(sp)
    68a4:	18000226 	beq	r3,zero,68b0 <__svfscanf_r+0x970>
    68a8:	00bfbfc4 	movi	r2,-257
    68ac:	a8aa703a 	and	r21,r21,r2
    68b0:	90ffffc4 	addi	r3,r18,-1
    68b4:	00800044 	movi	r2,1
    68b8:	10c0cd2e 	bgeu	r2,r3,6bf0 <__svfscanf_r+0xcb0>
    68bc:	e1003fcc 	andi	r4,fp,255
    68c0:	2100201c 	xori	r4,r4,128
    68c4:	213fe004 	addi	r4,r4,-128
    68c8:	20ffffc4 	addi	r3,r4,-1
    68cc:	00800184 	movi	r2,6
    68d0:	10c01736 	bltu	r2,r3,6930 <__svfscanf_r+0x9f0>
    68d4:	00c00084 	movi	r3,2
    68d8:	1900880e 	bge	r3,r4,6afc <__svfscanf_r+0xbbc>
    68dc:	008000c4 	movi	r2,3
    68e0:	1100130e 	bge	r2,r4,6930 <__svfscanf_r+0x9f0>
    68e4:	e4ffffc4 	addi	r19,fp,-1
    68e8:	b825883a 	mov	r18,r23
    68ec:	94bfffc4 	addi	r18,r18,-1
    68f0:	91400007 	ldb	r5,0(r18)
    68f4:	b009883a 	mov	r4,r22
    68f8:	800d883a 	mov	r6,r16
    68fc:	000df880 	call	df88 <_ungetc_r>
    6900:	9cffffc4 	addi	r19,r19,-1
    6904:	98c03fcc 	andi	r3,r19,255
    6908:	18c0201c 	xori	r3,r3,128
    690c:	18ffe004 	addi	r3,r3,-128
    6910:	00800084 	movi	r2,2
    6914:	18bff51e 	bne	r3,r2,68ec <__svfscanf_r+0x9ac>
    6918:	e0bfff04 	addi	r2,fp,-4
    691c:	10803fcc 	andi	r2,r2,255
    6920:	b887c83a 	sub	r3,r23,r2
    6924:	8885c83a 	sub	r2,r17,r2
    6928:	147fffc4 	addi	r17,r2,-1
    692c:	1dffffc4 	addi	r23,r3,-1
    6930:	a880400c 	andi	r2,r21,256
    6934:	10001226 	beq	r2,zero,6980 <__svfscanf_r+0xa40>
    6938:	a881000c 	andi	r2,r21,1024
    693c:	1000651e 	bne	r2,zero,6ad4 <__svfscanf_r+0xb94>
    6940:	bdffffc4 	addi	r23,r23,-1
    6944:	b9400007 	ldb	r5,0(r23)
    6948:	00801944 	movi	r2,101
    694c:	8c7fffc4 	addi	r17,r17,-1
    6950:	28800826 	beq	r5,r2,6974 <__svfscanf_r+0xa34>
    6954:	00801144 	movi	r2,69
    6958:	28800626 	beq	r5,r2,6974 <__svfscanf_r+0xa34>
    695c:	bdffffc4 	addi	r23,r23,-1
    6960:	b009883a 	mov	r4,r22
    6964:	800d883a 	mov	r6,r16
    6968:	000df880 	call	df88 <_ungetc_r>
    696c:	b9400007 	ldb	r5,0(r23)
    6970:	8c7fffc4 	addi	r17,r17,-1
    6974:	b009883a 	mov	r4,r22
    6978:	800d883a 	mov	r6,r16
    697c:	000df880 	call	df88 <_ungetc_r>
    6980:	a880040c 	andi	r2,r21,16
    6984:	103d811e 	bne	r2,zero,5f8c <__svfscanf_r+0x4c>
    6988:	a8c1800c 	andi	r3,r21,1536
    698c:	00810004 	movi	r2,1024
    6990:	b8000005 	stb	zero,0(r23)
    6994:	1880bb26 	beq	r3,r2,6c84 <__svfscanf_r+0xd44>
    6998:	d8809d17 	ldw	r2,628(sp)
    699c:	1000a61e 	bne	r2,zero,6c38 <__svfscanf_r+0xcf8>
    69a0:	d940a617 	ldw	r5,664(sp)
    69a4:	b009883a 	mov	r4,r22
    69a8:	000d883a 	mov	r6,zero
    69ac:	000bdc40 	call	bdc4 <_strtod_r>
    69b0:	a900004c 	andi	r4,r21,1
    69b4:	2009003a 	cmpeq	r4,r4,zero
    69b8:	1025883a 	mov	r18,r2
    69bc:	1827883a 	mov	r19,r3
    69c0:	2000951e 	bne	r4,zero,6c18 <__svfscanf_r+0xcd8>
    69c4:	d8c0a417 	ldw	r3,656(sp)
    69c8:	18800017 	ldw	r2,0(r3)
    69cc:	1d400104 	addi	r21,r3,4
    69d0:	14c00115 	stw	r19,4(r2)
    69d4:	14800015 	stw	r18,0(r2)
    69d8:	d8c0a217 	ldw	r3,648(sp)
    69dc:	dd40a415 	stw	r21,656(sp)
    69e0:	18c00044 	addi	r3,r3,1
    69e4:	d8c0a215 	stw	r3,648(sp)
    69e8:	003d6806 	br	5f8c <__svfscanf_r+0x4c>
    69ec:	a880800c 	andi	r2,r21,512
    69f0:	103fab26 	beq	r2,zero,68a0 <__svfscanf_r+0x960>
    69f4:	d9009e17 	ldw	r4,632(sp)
    69f8:	00bf5fc4 	movi	r2,-641
    69fc:	a8aa703a 	and	r21,r21,r2
    6a00:	d9009f15 	stw	r4,636(sp)
    6a04:	003f9806 	br	6868 <__svfscanf_r+0x928>
    6a08:	b009883a 	mov	r4,r22
    6a0c:	800b883a 	mov	r5,r16
    6a10:	d980a715 	stw	r6,668(sp)
    6a14:	00038480 	call	3848 <__srefill_r>
    6a18:	d980a717 	ldw	r6,668(sp)
    6a1c:	103f9c26 	beq	r2,zero,6890 <__svfscanf_r+0x950>
    6a20:	003f9f06 	br	68a0 <__svfscanf_r+0x960>
    6a24:	a880400c 	andi	r2,r21,256
    6a28:	10000b26 	beq	r2,zero,6a58 <__svfscanf_r+0xb18>
    6a2c:	00bfdfc4 	movi	r2,-129
    6a30:	a8aa703a 	and	r21,r21,r2
    6a34:	d8809e17 	ldw	r2,632(sp)
    6a38:	10800044 	addi	r2,r2,1
    6a3c:	d8809e15 	stw	r2,632(sp)
    6a40:	303f8b26 	beq	r6,zero,6870 <__svfscanf_r+0x930>
    6a44:	d8c0a317 	ldw	r3,652(sp)
    6a48:	31bfffc4 	addi	r6,r6,-1
    6a4c:	18c00044 	addi	r3,r3,1
    6a50:	d8c0a315 	stw	r3,652(sp)
    6a54:	003f8606 	br	6870 <__svfscanf_r+0x930>
    6a58:	e0803fcc 	andi	r2,fp,255
    6a5c:	1080201c 	xori	r2,r2,128
    6a60:	10bfe004 	addi	r2,r2,-128
    6a64:	9085883a 	add	r2,r18,r2
    6a68:	103f8d1e 	bne	r2,zero,68a0 <__svfscanf_r+0x960>
    6a6c:	00bf9fc4 	movi	r2,-385
    6a70:	a8aa703a 	and	r21,r21,r2
    6a74:	003f7c06 	br	6868 <__svfscanf_r+0x928>
    6a78:	00800044 	movi	r2,1
    6a7c:	90bf881e 	bne	r18,r2,68a0 <__svfscanf_r+0x960>
    6a80:	04800084 	movi	r18,2
    6a84:	003f7806 	br	6868 <__svfscanf_r+0x928>
    6a88:	a8c1400c 	andi	r3,r21,1280
    6a8c:	00810004 	movi	r2,1024
    6a90:	18800426 	beq	r3,r2,6aa4 <__svfscanf_r+0xb64>
    6a94:	a884703a 	and	r2,r21,r2
    6a98:	103f8126 	beq	r2,zero,68a0 <__svfscanf_r+0x960>
    6a9c:	d8809e17 	ldw	r2,632(sp)
    6aa0:	103f8326 	beq	r2,zero,68b0 <__svfscanf_r+0x970>
    6aa4:	a880800c 	andi	r2,r21,512
    6aa8:	1000051e 	bne	r2,zero,6ac0 <__svfscanf_r+0xb80>
    6aac:	d8c09e17 	ldw	r3,632(sp)
    6ab0:	d9009f17 	ldw	r4,636(sp)
    6ab4:	ddc09c15 	stw	r23,624(sp)
    6ab8:	1907c83a 	sub	r3,r3,r4
    6abc:	d8c09d15 	stw	r3,628(sp)
    6ac0:	00be7fc4 	movi	r2,-1537
    6ac4:	a884703a 	and	r2,r21,r2
    6ac8:	15406014 	ori	r21,r2,384
    6acc:	d8009e15 	stw	zero,632(sp)
    6ad0:	003f6506 	br	6868 <__svfscanf_r+0x928>
    6ad4:	d900a617 	ldw	r4,664(sp)
    6ad8:	25fd4e2e 	bgeu	r4,r23,6014 <__svfscanf_r+0xd4>
    6adc:	bdffffc4 	addi	r23,r23,-1
    6ae0:	b9400007 	ldb	r5,0(r23)
    6ae4:	b009883a 	mov	r4,r22
    6ae8:	800d883a 	mov	r6,r16
    6aec:	000df880 	call	df88 <_ungetc_r>
    6af0:	d880a617 	ldw	r2,664(sp)
    6af4:	15fff936 	bltu	r2,r23,6adc <__svfscanf_r+0xb9c>
    6af8:	003d4606 	br	6014 <__svfscanf_r+0xd4>
    6afc:	d900a617 	ldw	r4,664(sp)
    6b00:	25fd442e 	bgeu	r4,r23,6014 <__svfscanf_r+0xd4>
    6b04:	bdffffc4 	addi	r23,r23,-1
    6b08:	b9400007 	ldb	r5,0(r23)
    6b0c:	b009883a 	mov	r4,r22
    6b10:	800d883a 	mov	r6,r16
    6b14:	000df880 	call	df88 <_ungetc_r>
    6b18:	d8c0a617 	ldw	r3,664(sp)
    6b1c:	1dfff936 	bltu	r3,r23,6b04 <__svfscanf_r+0xbc4>
    6b20:	003d3c06 	br	6014 <__svfscanf_r+0xd4>
    6b24:	e0c03fcc 	andi	r3,fp,255
    6b28:	18c0201c 	xori	r3,r3,128
    6b2c:	18ffe004 	addi	r3,r3,-128
    6b30:	00800084 	movi	r2,2
    6b34:	18bf5a1e 	bne	r3,r2,68a0 <__svfscanf_r+0x960>
    6b38:	070000c4 	movi	fp,3
    6b3c:	003f4a06 	br	6868 <__svfscanf_r+0x928>
    6b40:	e0c03fcc 	andi	r3,fp,255
    6b44:	18c0201c 	xori	r3,r3,128
    6b48:	18ffe004 	addi	r3,r3,-128
    6b4c:	1800231e 	bne	r3,zero,6bdc <__svfscanf_r+0xc9c>
    6b50:	a8c1c00c 	andi	r3,r21,1792
    6b54:	0081c004 	movi	r2,1792
    6b58:	18bf511e 	bne	r3,r2,68a0 <__svfscanf_r+0x960>
    6b5c:	00be1fc4 	movi	r2,-1921
    6b60:	a8aa703a 	and	r21,r21,r2
    6b64:	07000044 	movi	fp,1
    6b68:	003f3f06 	br	6868 <__svfscanf_r+0x928>
    6b6c:	9000101e 	bne	r18,zero,6bb0 <__svfscanf_r+0xc70>
    6b70:	a8c1c00c 	andi	r3,r21,1792
    6b74:	0081c004 	movi	r2,1792
    6b78:	18800926 	beq	r3,r2,6ba0 <__svfscanf_r+0xc60>
    6b7c:	e0c03fcc 	andi	r3,fp,255
    6b80:	18c0201c 	xori	r3,r3,128
    6b84:	18ffe004 	addi	r3,r3,-128
    6b88:	00800044 	movi	r2,1
    6b8c:	18800226 	beq	r3,r2,6b98 <__svfscanf_r+0xc58>
    6b90:	00800104 	movi	r2,4
    6b94:	18bf421e 	bne	r3,r2,68a0 <__svfscanf_r+0x960>
    6b98:	e7000044 	addi	fp,fp,1
    6b9c:	003f3206 	br	6868 <__svfscanf_r+0x928>
    6ba0:	00be1fc4 	movi	r2,-1921
    6ba4:	a8aa703a 	and	r21,r21,r2
    6ba8:	04800044 	movi	r18,1
    6bac:	003f2e06 	br	6868 <__svfscanf_r+0x928>
    6bb0:	00800084 	movi	r2,2
    6bb4:	90bff11e 	bne	r18,r2,6b7c <__svfscanf_r+0xc3c>
    6bb8:	048000c4 	movi	r18,3
    6bbc:	003f2a06 	br	6868 <__svfscanf_r+0x928>
    6bc0:	e0c03fcc 	andi	r3,fp,255
    6bc4:	18c0201c 	xori	r3,r3,128
    6bc8:	18ffe004 	addi	r3,r3,-128
    6bcc:	00800184 	movi	r2,6
    6bd0:	18bf331e 	bne	r3,r2,68a0 <__svfscanf_r+0x960>
    6bd4:	070001c4 	movi	fp,7
    6bd8:	003f2306 	br	6868 <__svfscanf_r+0x928>
    6bdc:	008000c4 	movi	r2,3
    6be0:	18bfed26 	beq	r3,r2,6b98 <__svfscanf_r+0xc58>
    6be4:	00800144 	movi	r2,5
    6be8:	18bfeb26 	beq	r3,r2,6b98 <__svfscanf_r+0xc58>
    6bec:	003f2c06 	br	68a0 <__svfscanf_r+0x960>
    6bf0:	d900a617 	ldw	r4,664(sp)
    6bf4:	25fd072e 	bgeu	r4,r23,6014 <__svfscanf_r+0xd4>
    6bf8:	bdffffc4 	addi	r23,r23,-1
    6bfc:	b9400007 	ldb	r5,0(r23)
    6c00:	b009883a 	mov	r4,r22
    6c04:	800d883a 	mov	r6,r16
    6c08:	000df880 	call	df88 <_ungetc_r>
    6c0c:	d880a617 	ldw	r2,664(sp)
    6c10:	15fff936 	bltu	r2,r23,6bf8 <__svfscanf_r+0xcb8>
    6c14:	003cff06 	br	6014 <__svfscanf_r+0xd4>
    6c18:	a880008c 	andi	r2,r21,2
    6c1c:	10002026 	beq	r2,zero,6ca0 <__svfscanf_r+0xd60>
    6c20:	d900a417 	ldw	r4,656(sp)
    6c24:	20800017 	ldw	r2,0(r4)
    6c28:	25400104 	addi	r21,r4,4
    6c2c:	10c00115 	stw	r3,4(r2)
    6c30:	14800015 	stw	r18,0(r2)
    6c34:	003f6806 	br	69d8 <__svfscanf_r+0xa98>
    6c38:	d8c09c17 	ldw	r3,624(sp)
    6c3c:	b009883a 	mov	r4,r22
    6c40:	000d883a 	mov	r6,zero
    6c44:	19400044 	addi	r5,r3,1
    6c48:	01c00284 	movi	r7,10
    6c4c:	000d3e80 	call	d3e8 <_strtol_r>
    6c50:	d9009d17 	ldw	r4,628(sp)
    6c54:	110dc83a 	sub	r6,r2,r4
    6c58:	d8c0a617 	ldw	r3,664(sp)
    6c5c:	d9009c17 	ldw	r4,624(sp)
    6c60:	188054c4 	addi	r2,r3,339
    6c64:	20800236 	bltu	r4,r2,6c70 <__svfscanf_r+0xd30>
    6c68:	18805484 	addi	r2,r3,338
    6c6c:	d8809c15 	stw	r2,624(sp)
    6c70:	d9009c17 	ldw	r4,624(sp)
    6c74:	01400074 	movhi	r5,1
    6c78:	29530204 	addi	r5,r5,19464
    6c7c:	0003a980 	call	3a98 <sprintf>
    6c80:	003f4706 	br	69a0 <__svfscanf_r+0xa60>
    6c84:	d8c09e17 	ldw	r3,632(sp)
    6c88:	d9009f17 	ldw	r4,636(sp)
    6c8c:	1905c83a 	sub	r2,r3,r4
    6c90:	103f4326 	beq	r2,zero,69a0 <__svfscanf_r+0xa60>
    6c94:	008dc83a 	sub	r6,zero,r2
    6c98:	ddc09c15 	stw	r23,624(sp)
    6c9c:	003fee06 	br	6c58 <__svfscanf_r+0xd18>
    6ca0:	d880a417 	ldw	r2,656(sp)
    6ca4:	9009883a 	mov	r4,r18
    6ca8:	180b883a 	mov	r5,r3
    6cac:	15c00017 	ldw	r23,0(r2)
    6cb0:	15400104 	addi	r21,r2,4
    6cb4:	000bc840 	call	bc84 <__isnand>
    6cb8:	10021c1e 	bne	r2,zero,752c <__svfscanf_r+0x15ec>
    6cbc:	980b883a 	mov	r5,r19
    6cc0:	9009883a 	mov	r4,r18
    6cc4:	0010dfc0 	call	10dfc <__truncdfsf2>
    6cc8:	b8800015 	stw	r2,0(r23)
    6ccc:	003f4206 	br	69d8 <__svfscanf_r+0xa98>
    6cd0:	e0c03fcc 	andi	r3,fp,255
    6cd4:	18c0201c 	xori	r3,r3,128
    6cd8:	18ffe004 	addi	r3,r3,-128
    6cdc:	008001c4 	movi	r2,7
    6ce0:	18beef1e 	bne	r3,r2,68a0 <__svfscanf_r+0x960>
    6ce4:	07000204 	movi	fp,8
    6ce8:	003edf06 	br	6868 <__svfscanf_r+0x928>
    6cec:	d900a317 	ldw	r4,652(sp)
    6cf0:	208002a4 	muli	r2,r4,10
    6cf4:	1145883a 	add	r2,r2,r5
    6cf8:	10bff404 	addi	r2,r2,-48
    6cfc:	d880a315 	stw	r2,652(sp)
    6d00:	003ceb06 	br	60b0 <__svfscanf_r+0x170>
    6d04:	9880040c 	andi	r2,r19,16
    6d08:	10001426 	beq	r2,zero,6d5c <__svfscanf_r+0xe1c>
    6d0c:	0027883a 	mov	r19,zero
    6d10:	00000906 	br	6d38 <__svfscanf_r+0xdf8>
    6d14:	80c00117 	ldw	r3,4(r16)
    6d18:	d880a317 	ldw	r2,652(sp)
    6d1c:	29800044 	addi	r6,r5,1
    6d20:	18ffffc4 	addi	r3,r3,-1
    6d24:	9cc00044 	addi	r19,r19,1
    6d28:	81800015 	stw	r6,0(r16)
    6d2c:	80c00115 	stw	r3,4(r16)
    6d30:	14fdf726 	beq	r2,r19,6510 <__svfscanf_r+0x5d0>
    6d34:	00c02c0e 	bge	zero,r3,6de8 <__svfscanf_r+0xea8>
    6d38:	81400017 	ldw	r5,0(r16)
    6d3c:	90800017 	ldw	r2,0(r18)
    6d40:	28c00003 	ldbu	r3,0(r5)
    6d44:	1887883a 	add	r3,r3,r2
    6d48:	19000003 	ldbu	r4,0(r3)
    6d4c:	2100020c 	andi	r4,r4,8
    6d50:	203ff026 	beq	r4,zero,6d14 <__svfscanf_r+0xdd4>
    6d54:	8ce3883a 	add	r17,r17,r19
    6d58:	003c8c06 	br	5f8c <__svfscanf_r+0x4c>
    6d5c:	d8c0a417 	ldw	r3,656(sp)
    6d60:	1d400017 	ldw	r21,0(r3)
    6d64:	a827883a 	mov	r19,r21
    6d68:	00000e06 	br	6da4 <__svfscanf_r+0xe64>
    6d6c:	80800117 	ldw	r2,4(r16)
    6d70:	d900a317 	ldw	r4,652(sp)
    6d74:	29800044 	addi	r6,r5,1
    6d78:	10ffffc4 	addi	r3,r2,-1
    6d7c:	213fffc4 	addi	r4,r4,-1
    6d80:	d900a315 	stw	r4,652(sp)
    6d84:	80c00115 	stw	r3,4(r16)
    6d88:	28800003 	ldbu	r2,0(r5)
    6d8c:	98800005 	stb	r2,0(r19)
    6d90:	81800015 	stw	r6,0(r16)
    6d94:	9cc00044 	addi	r19,r19,1
    6d98:	20000926 	beq	r4,zero,6dc0 <__svfscanf_r+0xe80>
    6d9c:	80800117 	ldw	r2,4(r16)
    6da0:	0080170e 	bge	zero,r2,6e00 <__svfscanf_r+0xec0>
    6da4:	81400017 	ldw	r5,0(r16)
    6da8:	90800017 	ldw	r2,0(r18)
    6dac:	28c00003 	ldbu	r3,0(r5)
    6db0:	1887883a 	add	r3,r3,r2
    6db4:	19000003 	ldbu	r4,0(r3)
    6db8:	2100020c 	andi	r4,r4,8
    6dbc:	203feb26 	beq	r4,zero,6d6c <__svfscanf_r+0xe2c>
    6dc0:	9d45c83a 	sub	r2,r19,r21
    6dc4:	d8c0a217 	ldw	r3,648(sp)
    6dc8:	88a3883a 	add	r17,r17,r2
    6dcc:	d880a417 	ldw	r2,656(sp)
    6dd0:	18c00044 	addi	r3,r3,1
    6dd4:	d8c0a215 	stw	r3,648(sp)
    6dd8:	10800104 	addi	r2,r2,4
    6ddc:	d880a415 	stw	r2,656(sp)
    6de0:	98000005 	stb	zero,0(r19)
    6de4:	003c6906 	br	5f8c <__svfscanf_r+0x4c>
    6de8:	b009883a 	mov	r4,r22
    6dec:	800b883a 	mov	r5,r16
    6df0:	00038480 	call	3848 <__srefill_r>
    6df4:	103fd026 	beq	r2,zero,6d38 <__svfscanf_r+0xdf8>
    6df8:	8ce3883a 	add	r17,r17,r19
    6dfc:	003c6306 	br	5f8c <__svfscanf_r+0x4c>
    6e00:	b009883a 	mov	r4,r22
    6e04:	800b883a 	mov	r5,r16
    6e08:	00038480 	call	3848 <__srefill_r>
    6e0c:	103fe526 	beq	r2,zero,6da4 <__svfscanf_r+0xe64>
    6e10:	003feb06 	br	6dc0 <__svfscanf_r+0xe80>
    6e14:	d900a317 	ldw	r4,652(sp)
    6e18:	9d41e014 	ori	r21,r19,1920
    6e1c:	2000821e 	bne	r4,zero,7028 <__svfscanf_r+0x10e8>
    6e20:	d8c04404 	addi	r3,sp,272
    6e24:	182f883a 	mov	r23,r3
    6e28:	0039883a 	mov	fp,zero
    6e2c:	d8c0a615 	stw	r3,664(sp)
    6e30:	d8009c15 	stw	zero,624(sp)
    6e34:	d8009d15 	stw	zero,628(sp)
    6e38:	d8009f15 	stw	zero,636(sp)
    6e3c:	d8009e15 	stw	zero,632(sp)
    6e40:	003e9e06 	br	68bc <__svfscanf_r+0x97c>
    6e44:	d900a317 	ldw	r4,652(sp)
    6e48:	9c836014 	ori	r18,r19,3456
    6e4c:	2000161e 	bne	r4,zero,6ea8 <__svfscanf_r+0xf68>
    6e50:	d8804404 	addi	r2,sp,272
    6e54:	d880a615 	stw	r2,664(sp)
    6e58:	002f883a 	mov	r23,zero
    6e5c:	1027883a 	mov	r19,r2
    6e60:	9080400c 	andi	r2,r18,256
    6e64:	10000926 	beq	r2,zero,6e8c <__svfscanf_r+0xf4c>
    6e68:	d8c0a617 	ldw	r3,664(sp)
    6e6c:	1cc0052e 	bgeu	r3,r19,6e84 <__svfscanf_r+0xf44>
    6e70:	9cffffc4 	addi	r19,r19,-1
    6e74:	99400007 	ldb	r5,0(r19)
    6e78:	b009883a 	mov	r4,r22
    6e7c:	800d883a 	mov	r6,r16
    6e80:	000df880 	call	df88 <_ungetc_r>
    6e84:	d900a617 	ldw	r4,664(sp)
    6e88:	24fc6226 	beq	r4,r19,6014 <__svfscanf_r+0xd4>
    6e8c:	9080040c 	andi	r2,r18,16
    6e90:	10006726 	beq	r2,zero,7030 <__svfscanf_r+0x10f0>
    6e94:	d8c0a617 	ldw	r3,664(sp)
    6e98:	98c5c83a 	sub	r2,r19,r3
    6e9c:	b885883a 	add	r2,r23,r2
    6ea0:	88a3883a 	add	r17,r17,r2
    6ea4:	003c3906 	br	5f8c <__svfscanf_r+0x4c>
    6ea8:	002b883a 	mov	r21,zero
    6eac:	d8c04404 	addi	r3,sp,272
    6eb0:	d8c0a615 	stw	r3,664(sp)
    6eb4:	002f883a 	mov	r23,zero
    6eb8:	1827883a 	mov	r19,r3
    6ebc:	81800017 	ldw	r6,0(r16)
    6ec0:	00c01344 	movi	r3,77
    6ec4:	31400003 	ldbu	r5,0(r6)
    6ec8:	28bff544 	addi	r2,r5,-43
    6ecc:	10803fcc 	andi	r2,r2,255
    6ed0:	18bfe336 	bltu	r3,r2,6e60 <__svfscanf_r+0xf20>
    6ed4:	1085883a 	add	r2,r2,r2
    6ed8:	1085883a 	add	r2,r2,r2
    6edc:	00c00034 	movhi	r3,0
    6ee0:	18dbbc04 	addi	r3,r3,28400
    6ee4:	10c5883a 	add	r2,r2,r3
    6ee8:	11000017 	ldw	r4,0(r2)
    6eec:	2000683a 	jmp	r4
    6ef0:	00007084 	movi	zero,450
    6ef4:	00006e60 	cmpeqi	zero,zero,441
    6ef8:	00007084 	movi	zero,450
    6efc:	00006e60 	cmpeqi	zero,zero,441
    6f00:	00006e60 	cmpeqi	zero,zero,441
    6f04:	000070c8 	cmpgei	zero,zero,451
    6f08:	000071c4 	movi	zero,455
    6f0c:	000071c4 	movi	zero,455
    6f10:	000071c4 	movi	zero,455
    6f14:	000071c4 	movi	zero,455
    6f18:	000071c4 	movi	zero,455
    6f1c:	000071c4 	movi	zero,455
    6f20:	000071c4 	movi	zero,455
    6f24:	000071ec 	andhi	zero,zero,455
    6f28:	000071ec 	andhi	zero,zero,455
    6f2c:	00006e60 	cmpeqi	zero,zero,441
    6f30:	00006e60 	cmpeqi	zero,zero,441
    6f34:	00006e60 	cmpeqi	zero,zero,441
    6f38:	00006e60 	cmpeqi	zero,zero,441
    6f3c:	00006e60 	cmpeqi	zero,zero,441
    6f40:	00006e60 	cmpeqi	zero,zero,441
    6f44:	00006e60 	cmpeqi	zero,zero,441
    6f48:	0000721c 	xori	zero,zero,456
    6f4c:	0000721c 	xori	zero,zero,456
    6f50:	0000721c 	xori	zero,zero,456
    6f54:	0000721c 	xori	zero,zero,456
    6f58:	0000721c 	xori	zero,zero,456
    6f5c:	0000721c 	xori	zero,zero,456
    6f60:	00006e60 	cmpeqi	zero,zero,441
    6f64:	00006e60 	cmpeqi	zero,zero,441
    6f68:	00006e60 	cmpeqi	zero,zero,441
    6f6c:	00006e60 	cmpeqi	zero,zero,441
    6f70:	00006e60 	cmpeqi	zero,zero,441
    6f74:	00006e60 	cmpeqi	zero,zero,441
    6f78:	00006e60 	cmpeqi	zero,zero,441
    6f7c:	00006e60 	cmpeqi	zero,zero,441
    6f80:	00006e60 	cmpeqi	zero,zero,441
    6f84:	00006e60 	cmpeqi	zero,zero,441
    6f88:	00006e60 	cmpeqi	zero,zero,441
    6f8c:	00006e60 	cmpeqi	zero,zero,441
    6f90:	00006e60 	cmpeqi	zero,zero,441
    6f94:	00006e60 	cmpeqi	zero,zero,441
    6f98:	00006e60 	cmpeqi	zero,zero,441
    6f9c:	00006e60 	cmpeqi	zero,zero,441
    6fa0:	00006e60 	cmpeqi	zero,zero,441
    6fa4:	0000722c 	andhi	zero,zero,456
    6fa8:	00006e60 	cmpeqi	zero,zero,441
    6fac:	00006e60 	cmpeqi	zero,zero,441
    6fb0:	00006e60 	cmpeqi	zero,zero,441
    6fb4:	00006e60 	cmpeqi	zero,zero,441
    6fb8:	00006e60 	cmpeqi	zero,zero,441
    6fbc:	00006e60 	cmpeqi	zero,zero,441
    6fc0:	00006e60 	cmpeqi	zero,zero,441
    6fc4:	00006e60 	cmpeqi	zero,zero,441
    6fc8:	0000721c 	xori	zero,zero,456
    6fcc:	0000721c 	xori	zero,zero,456
    6fd0:	0000721c 	xori	zero,zero,456
    6fd4:	0000721c 	xori	zero,zero,456
    6fd8:	0000721c 	xori	zero,zero,456
    6fdc:	0000721c 	xori	zero,zero,456
    6fe0:	00006e60 	cmpeqi	zero,zero,441
    6fe4:	00006e60 	cmpeqi	zero,zero,441
    6fe8:	00006e60 	cmpeqi	zero,zero,441
    6fec:	00006e60 	cmpeqi	zero,zero,441
    6ff0:	00006e60 	cmpeqi	zero,zero,441
    6ff4:	00006e60 	cmpeqi	zero,zero,441
    6ff8:	00006e60 	cmpeqi	zero,zero,441
    6ffc:	00006e60 	cmpeqi	zero,zero,441
    7000:	00006e60 	cmpeqi	zero,zero,441
    7004:	00006e60 	cmpeqi	zero,zero,441
    7008:	00006e60 	cmpeqi	zero,zero,441
    700c:	00006e60 	cmpeqi	zero,zero,441
    7010:	00006e60 	cmpeqi	zero,zero,441
    7014:	00006e60 	cmpeqi	zero,zero,441
    7018:	00006e60 	cmpeqi	zero,zero,441
    701c:	00006e60 	cmpeqi	zero,zero,441
    7020:	00006e60 	cmpeqi	zero,zero,441
    7024:	0000722c 	andhi	zero,zero,456
    7028:	000d883a 	mov	r6,zero
    702c:	003d9006 	br	6670 <__svfscanf_r+0x730>
    7030:	98000005 	stb	zero,0(r19)
    7034:	d8c0a017 	ldw	r3,640(sp)
    7038:	d940a617 	ldw	r5,664(sp)
    703c:	d9c0a117 	ldw	r7,644(sp)
    7040:	b009883a 	mov	r4,r22
    7044:	000d883a 	mov	r6,zero
    7048:	183ee83a 	callr	r3
    704c:	1007883a 	mov	r3,r2
    7050:	9080080c 	andi	r2,r18,32
    7054:	10004d1e 	bne	r2,zero,718c <__svfscanf_r+0x124c>
    7058:	9080010c 	andi	r2,r18,4
    705c:	10003426 	beq	r2,zero,7130 <__svfscanf_r+0x11f0>
    7060:	d900a417 	ldw	r4,656(sp)
    7064:	20800017 	ldw	r2,0(r4)
    7068:	21000104 	addi	r4,r4,4
    706c:	d900a415 	stw	r4,656(sp)
    7070:	10c0000d 	sth	r3,0(r2)
    7074:	d880a217 	ldw	r2,648(sp)
    7078:	10800044 	addi	r2,r2,1
    707c:	d880a215 	stw	r2,648(sp)
    7080:	003f8406 	br	6e94 <__svfscanf_r+0xf54>
    7084:	9080200c 	andi	r2,r18,128
    7088:	103f7526 	beq	r2,zero,6e60 <__svfscanf_r+0xf20>
    708c:	00bfdfc4 	movi	r2,-129
    7090:	90a4703a 	and	r18,r18,r2
    7094:	99400005 	stb	r5,0(r19)
    7098:	9cc00044 	addi	r19,r19,1
    709c:	80c00117 	ldw	r3,4(r16)
    70a0:	18ffffc4 	addi	r3,r3,-1
    70a4:	80c00115 	stw	r3,4(r16)
    70a8:	00c0130e 	bge	zero,r3,70f8 <__svfscanf_r+0x11b8>
    70ac:	31800044 	addi	r6,r6,1
    70b0:	81800015 	stw	r6,0(r16)
    70b4:	d880a317 	ldw	r2,652(sp)
    70b8:	10bfffc4 	addi	r2,r2,-1
    70bc:	d880a315 	stw	r2,652(sp)
    70c0:	103f7e1e 	bne	r2,zero,6ebc <__svfscanf_r+0xf7c>
    70c4:	003f6606 	br	6e60 <__svfscanf_r+0xf20>
    70c8:	9082000c 	andi	r2,r18,2048
    70cc:	103ff126 	beq	r2,zero,7094 <__svfscanf_r+0x1154>
    70d0:	d8c0a117 	ldw	r3,644(sp)
    70d4:	1800031e 	bne	r3,zero,70e4 <__svfscanf_r+0x11a4>
    70d8:	01000204 	movi	r4,8
    70dc:	94808014 	ori	r18,r18,512
    70e0:	d900a115 	stw	r4,644(sp)
    70e4:	9081000c 	andi	r2,r18,1024
    70e8:	10000826 	beq	r2,zero,710c <__svfscanf_r+0x11cc>
    70ec:	00be9fc4 	movi	r2,-1409
    70f0:	90a4703a 	and	r18,r18,r2
    70f4:	003fe706 	br	7094 <__svfscanf_r+0x1154>
    70f8:	b009883a 	mov	r4,r22
    70fc:	800b883a 	mov	r5,r16
    7100:	00038480 	call	3848 <__srefill_r>
    7104:	103feb26 	beq	r2,zero,70b4 <__svfscanf_r+0x1174>
    7108:	003f5506 	br	6e60 <__svfscanf_r+0xf20>
    710c:	a8000426 	beq	r21,zero,7120 <__svfscanf_r+0x11e0>
    7110:	d880a317 	ldw	r2,652(sp)
    7114:	ad7fffc4 	addi	r21,r21,-1
    7118:	10800044 	addi	r2,r2,1
    711c:	d880a315 	stw	r2,652(sp)
    7120:	00bf1fc4 	movi	r2,-897
    7124:	90a4703a 	and	r18,r18,r2
    7128:	bdc00044 	addi	r23,r23,1
    712c:	003fdb06 	br	709c <__svfscanf_r+0x115c>
    7130:	9080004c 	andi	r2,r18,1
    7134:	1005003a 	cmpeq	r2,r2,zero
    7138:	10001426 	beq	r2,zero,718c <__svfscanf_r+0x124c>
    713c:	9080008c 	andi	r2,r18,2
    7140:	10001226 	beq	r2,zero,718c <__svfscanf_r+0x124c>
    7144:	d8c0a017 	ldw	r3,640(sp)
    7148:	00800074 	movhi	r2,1
    714c:	10b65a04 	addi	r2,r2,-9880
    7150:	18801426 	beq	r3,r2,71a4 <__svfscanf_r+0x1264>
    7154:	d9c0a117 	ldw	r7,644(sp)
    7158:	d940a617 	ldw	r5,664(sp)
    715c:	000d883a 	mov	r6,zero
    7160:	b009883a 	mov	r4,r22
    7164:	000d6500 	call	d650 <_strtoll_r>
    7168:	100d883a 	mov	r6,r2
    716c:	180f883a 	mov	r7,r3
    7170:	d900a417 	ldw	r4,656(sp)
    7174:	20800017 	ldw	r2,0(r4)
    7178:	21000104 	addi	r4,r4,4
    717c:	d900a415 	stw	r4,656(sp)
    7180:	11c00115 	stw	r7,4(r2)
    7184:	11800015 	stw	r6,0(r2)
    7188:	003fba06 	br	7074 <__svfscanf_r+0x1134>
    718c:	d900a417 	ldw	r4,656(sp)
    7190:	20800017 	ldw	r2,0(r4)
    7194:	21000104 	addi	r4,r4,4
    7198:	d900a415 	stw	r4,656(sp)
    719c:	10c00015 	stw	r3,0(r2)
    71a0:	003fb406 	br	7074 <__svfscanf_r+0x1134>
    71a4:	d9c0a117 	ldw	r7,644(sp)
    71a8:	d940a617 	ldw	r5,664(sp)
    71ac:	000d883a 	mov	r6,zero
    71b0:	b009883a 	mov	r4,r22
    71b4:	000dbbc0 	call	dbbc <_strtoull_r>
    71b8:	100d883a 	mov	r6,r2
    71bc:	180f883a 	mov	r7,r3
    71c0:	003feb06 	br	7170 <__svfscanf_r+0x1230>
    71c4:	d8c0a117 	ldw	r3,644(sp)
    71c8:	18c5883a 	add	r2,r3,r3
    71cc:	00c00074 	movhi	r3,1
    71d0:	18d30384 	addi	r3,r3,19470
    71d4:	10c5883a 	add	r2,r2,r3
    71d8:	1080000f 	ldh	r2,0(r2)
    71dc:	00fd1fc4 	movi	r3,-2945
    71e0:	90e4703a 	and	r18,r18,r3
    71e4:	d880a115 	stw	r2,644(sp)
    71e8:	003faa06 	br	7094 <__svfscanf_r+0x1154>
    71ec:	d900a117 	ldw	r4,644(sp)
    71f0:	00c00074 	movhi	r3,1
    71f4:	18d30384 	addi	r3,r3,19470
    71f8:	2105883a 	add	r2,r4,r4
    71fc:	10c5883a 	add	r2,r2,r3
    7200:	1080000f 	ldh	r2,0(r2)
    7204:	00c00204 	movi	r3,8
    7208:	d880a115 	stw	r2,644(sp)
    720c:	18bf140e 	bge	r3,r2,6e60 <__svfscanf_r+0xf20>
    7210:	00bd1fc4 	movi	r2,-2945
    7214:	90a4703a 	and	r18,r18,r2
    7218:	003f9e06 	br	7094 <__svfscanf_r+0x1154>
    721c:	d8c0a117 	ldw	r3,644(sp)
    7220:	00800284 	movi	r2,10
    7224:	10fffa16 	blt	r2,r3,7210 <__svfscanf_r+0x12d0>
    7228:	003f0d06 	br	6e60 <__svfscanf_r+0xf20>
    722c:	90c1800c 	andi	r3,r18,1536
    7230:	00808004 	movi	r2,512
    7234:	18bf0a1e 	bne	r3,r2,6e60 <__svfscanf_r+0xf20>
    7238:	00bf7fc4 	movi	r2,-513
    723c:	9084703a 	and	r2,r18,r2
    7240:	01000404 	movi	r4,16
    7244:	14814014 	ori	r18,r2,1280
    7248:	d900a115 	stw	r4,644(sp)
    724c:	003f9106 	br	7094 <__svfscanf_r+0x1154>
    7250:	d880a417 	ldw	r2,656(sp)
    7254:	dd400404 	addi	r21,sp,16
    7258:	14800017 	ldw	r18,0(r2)
    725c:	9027883a 	mov	r19,r18
    7260:	81000017 	ldw	r4,0(r16)
    7264:	20800003 	ldbu	r2,0(r4)
    7268:	a885883a 	add	r2,r21,r2
    726c:	10c00007 	ldb	r3,0(r2)
    7270:	18001426 	beq	r3,zero,72c4 <__svfscanf_r+0x1384>
    7274:	d8c0a317 	ldw	r3,652(sp)
    7278:	80800117 	ldw	r2,4(r16)
    727c:	21800044 	addi	r6,r4,1
    7280:	18ffffc4 	addi	r3,r3,-1
    7284:	d8c0a315 	stw	r3,652(sp)
    7288:	10ffffc4 	addi	r3,r2,-1
    728c:	80c00115 	stw	r3,4(r16)
    7290:	20800003 	ldbu	r2,0(r4)
    7294:	90800005 	stb	r2,0(r18)
    7298:	d900a317 	ldw	r4,652(sp)
    729c:	81800015 	stw	r6,0(r16)
    72a0:	94800044 	addi	r18,r18,1
    72a4:	20000726 	beq	r4,zero,72c4 <__svfscanf_r+0x1384>
    72a8:	80800117 	ldw	r2,4(r16)
    72ac:	00bfec16 	blt	zero,r2,7260 <__svfscanf_r+0x1320>
    72b0:	b009883a 	mov	r4,r22
    72b4:	800b883a 	mov	r5,r16
    72b8:	00038480 	call	3848 <__srefill_r>
    72bc:	103fe826 	beq	r2,zero,7260 <__svfscanf_r+0x1320>
    72c0:	9cbb7426 	beq	r19,r18,6094 <__svfscanf_r+0x154>
    72c4:	94e7c83a 	sub	r19,r18,r19
    72c8:	983b5226 	beq	r19,zero,6014 <__svfscanf_r+0xd4>
    72cc:	90000005 	stb	zero,0(r18)
    72d0:	d880a417 	ldw	r2,656(sp)
    72d4:	d8c0a217 	ldw	r3,648(sp)
    72d8:	8ce3883a 	add	r17,r17,r19
    72dc:	10800104 	addi	r2,r2,4
    72e0:	18c00044 	addi	r3,r3,1
    72e4:	d880a415 	stw	r2,656(sp)
    72e8:	d8c0a215 	stw	r3,648(sp)
    72ec:	003b2706 	br	5f8c <__svfscanf_r+0x4c>
    72f0:	9cc00414 	ori	r19,r19,16
    72f4:	003b6e06 	br	60b0 <__svfscanf_r+0x170>
    72f8:	00c00404 	movi	r3,16
    72fc:	01000074 	movhi	r4,1
    7300:	21365a04 	addi	r4,r4,-9880
    7304:	9cc08014 	ori	r19,r19,512
    7308:	054000c4 	movi	r21,3
    730c:	d8c0a115 	stw	r3,644(sp)
    7310:	d900a015 	stw	r4,640(sp)
    7314:	003bf806 	br	62f8 <__svfscanf_r+0x3b8>
    7318:	9880040c 	andi	r2,r19,16
    731c:	10001926 	beq	r2,zero,7384 <__svfscanf_r+0x1444>
    7320:	0027883a 	mov	r19,zero
    7324:	00000b06 	br	7354 <__svfscanf_r+0x1414>
    7328:	80800017 	ldw	r2,0(r16)
    732c:	b009883a 	mov	r4,r22
    7330:	800b883a 	mov	r5,r16
    7334:	148d883a 	add	r6,r2,r18
    7338:	81800015 	stw	r6,0(r16)
    733c:	9ca7883a 	add	r19,r19,r18
    7340:	00038480 	call	3848 <__srefill_r>
    7344:	103c711e 	bne	r2,zero,650c <__svfscanf_r+0x5cc>
    7348:	d900a317 	ldw	r4,652(sp)
    734c:	2489c83a 	sub	r4,r4,r18
    7350:	d900a315 	stw	r4,652(sp)
    7354:	84800117 	ldw	r18,4(r16)
    7358:	d8c0a317 	ldw	r3,652(sp)
    735c:	90fff216 	blt	r18,r3,7328 <__svfscanf_r+0x13e8>
    7360:	d900a317 	ldw	r4,652(sp)
    7364:	80800017 	ldw	r2,0(r16)
    7368:	9927883a 	add	r19,r19,r4
    736c:	9107c83a 	sub	r3,r18,r4
    7370:	110d883a 	add	r6,r2,r4
    7374:	8ce3883a 	add	r17,r17,r19
    7378:	80c00115 	stw	r3,4(r16)
    737c:	81800015 	stw	r6,0(r16)
    7380:	003b0206 	br	5f8c <__svfscanf_r+0x4c>
    7384:	d880a417 	ldw	r2,656(sp)
    7388:	d980a317 	ldw	r6,652(sp)
    738c:	01400044 	movi	r5,1
    7390:	11000017 	ldw	r4,0(r2)
    7394:	800f883a 	mov	r7,r16
    7398:	00096000 	call	9600 <fread>
    739c:	103b3d26 	beq	r2,zero,6094 <__svfscanf_r+0x154>
    73a0:	d8c0a417 	ldw	r3,656(sp)
    73a4:	d900a217 	ldw	r4,648(sp)
    73a8:	88a3883a 	add	r17,r17,r2
    73ac:	18c00104 	addi	r3,r3,4
    73b0:	21000044 	addi	r4,r4,1
    73b4:	d8c0a415 	stw	r3,656(sp)
    73b8:	d900a215 	stw	r4,648(sp)
    73bc:	003af306 	br	5f8c <__svfscanf_r+0x4c>
    73c0:	8080030b 	ldhu	r2,12(r16)
    73c4:	1080100c 	andi	r2,r2,64
    73c8:	103b1226 	beq	r2,zero,6014 <__svfscanf_r+0xd4>
    73cc:	003b3306 	br	609c <__svfscanf_r+0x15c>
    73d0:	983b1026 	beq	r19,zero,6014 <__svfscanf_r+0xd4>
    73d4:	8ce3883a 	add	r17,r17,r19
    73d8:	003aec06 	br	5f8c <__svfscanf_r+0x4c>
    73dc:	983c9626 	beq	r19,zero,6638 <__svfscanf_r+0x6f8>
    73e0:	9cffffc4 	addi	r19,r19,-1
    73e4:	d8c04404 	addi	r3,sp,272
    73e8:	1cc5883a 	add	r2,r3,r19
    73ec:	11400003 	ldbu	r5,0(r2)
    73f0:	b009883a 	mov	r4,r22
    73f4:	800d883a 	mov	r6,r16
    73f8:	000df880 	call	df88 <_ungetc_r>
    73fc:	003ff706 	br	73dc <__svfscanf_r+0x149c>
    7400:	00bfff84 	movi	r2,-2
    7404:	18bc7a1e 	bne	r3,r2,65f0 <__svfscanf_r+0x6b0>
    7408:	003c8406 	br	661c <__svfscanf_r+0x6dc>
    740c:	d900a417 	ldw	r4,656(sp)
    7410:	25400017 	ldw	r21,0(r4)
    7414:	21000104 	addi	r4,r4,4
    7418:	d900a415 	stw	r4,656(sp)
    741c:	003c4a06 	br	6548 <__svfscanf_r+0x608>
    7420:	00bfff84 	movi	r2,-2
    7424:	18bc0f1e 	bne	r3,r2,6464 <__svfscanf_r+0x524>
    7428:	003c1506 	br	6480 <__svfscanf_r+0x540>
    742c:	b009883a 	mov	r4,r22
    7430:	800b883a 	mov	r5,r16
    7434:	00038480 	call	3848 <__srefill_r>
    7438:	103c1326 	beq	r2,zero,6488 <__svfscanf_r+0x548>
    743c:	903b151e 	bne	r18,zero,6094 <__svfscanf_r+0x154>
    7440:	a83ad21e 	bne	r21,zero,5f8c <__svfscanf_r+0x4c>
    7444:	d880a217 	ldw	r2,648(sp)
    7448:	10800044 	addi	r2,r2,1
    744c:	d880a215 	stw	r2,648(sp)
    7450:	003ace06 	br	5f8c <__svfscanf_r+0x4c>
    7454:	0027883a 	mov	r19,zero
    7458:	003bdd06 	br	63d0 <__svfscanf_r+0x490>
    745c:	9cc00114 	ori	r19,r19,4
    7460:	003b1306 	br	60b0 <__svfscanf_r+0x170>
    7464:	05400104 	movi	r21,4
    7468:	003ba306 	br	62f8 <__svfscanf_r+0x3b8>
    746c:	9cc00054 	ori	r19,r19,1
    7470:	00800074 	movhi	r2,1
    7474:	10b4fa04 	addi	r2,r2,-11288
    7478:	00c00284 	movi	r3,10
    747c:	054000c4 	movi	r21,3
    7480:	d880a015 	stw	r2,640(sp)
    7484:	d8c0a115 	stw	r3,644(sp)
    7488:	003b9b06 	br	62f8 <__svfscanf_r+0x3b8>
    748c:	9cc01014 	ori	r19,r19,64
    7490:	002b883a 	mov	r21,zero
    7494:	003b9806 	br	62f8 <__svfscanf_r+0x3b8>
    7498:	a00b883a 	mov	r5,r20
    749c:	d9000404 	addi	r4,sp,16
    74a0:	000bcb40 	call	bcb4 <__sccl>
    74a4:	1029883a 	mov	r20,r2
    74a8:	9cc01014 	ori	r19,r19,64
    74ac:	05400044 	movi	r21,1
    74b0:	003b9106 	br	62f8 <__svfscanf_r+0x3b8>
    74b4:	9cc00054 	ori	r19,r19,1
    74b8:	00800204 	movi	r2,8
    74bc:	00c00074 	movhi	r3,1
    74c0:	18f65a04 	addi	r3,r3,-9880
    74c4:	054000c4 	movi	r21,3
    74c8:	d880a115 	stw	r2,644(sp)
    74cc:	d8c0a015 	stw	r3,640(sp)
    74d0:	003b8906 	br	62f8 <__svfscanf_r+0x3b8>
    74d4:	9880040c 	andi	r2,r19,16
    74d8:	103aac1e 	bne	r2,zero,5f8c <__svfscanf_r+0x4c>
    74dc:	9880010c 	andi	r2,r19,4
    74e0:	10002426 	beq	r2,zero,7574 <__svfscanf_r+0x1634>
    74e4:	d900a417 	ldw	r4,656(sp)
    74e8:	20800017 	ldw	r2,0(r4)
    74ec:	21000104 	addi	r4,r4,4
    74f0:	d900a415 	stw	r4,656(sp)
    74f4:	1440000d 	sth	r17,0(r2)
    74f8:	003aa406 	br	5f8c <__svfscanf_r+0x4c>
    74fc:	9cc00094 	ori	r19,r19,2
    7500:	003aeb06 	br	60b0 <__svfscanf_r+0x170>
    7504:	05400084 	movi	r21,2
    7508:	003b7b06 	br	62f8 <__svfscanf_r+0x3b8>
    750c:	00800404 	movi	r2,16
    7510:	00c00074 	movhi	r3,1
    7514:	18f65a04 	addi	r3,r3,-9880
    7518:	9cc08814 	ori	r19,r19,544
    751c:	054000c4 	movi	r21,3
    7520:	d880a115 	stw	r2,644(sp)
    7524:	d8c0a015 	stw	r3,640(sp)
    7528:	003b7306 	br	62f8 <__svfscanf_r+0x3b8>
    752c:	0009883a 	mov	r4,zero
    7530:	000bd740 	call	bd74 <nanf>
    7534:	b8800015 	stw	r2,0(r23)
    7538:	003d2706 	br	69d8 <__svfscanf_r+0xa98>
    753c:	a0c00007 	ldb	r3,0(r20)
    7540:	00801b04 	movi	r2,108
    7544:	18800826 	beq	r3,r2,7568 <__svfscanf_r+0x1628>
    7548:	9cc00054 	ori	r19,r19,1
    754c:	003ad806 	br	60b0 <__svfscanf_r+0x170>
    7550:	01000074 	movhi	r4,1
    7554:	2134fa04 	addi	r4,r4,-11288
    7558:	054000c4 	movi	r21,3
    755c:	d900a015 	stw	r4,640(sp)
    7560:	d800a115 	stw	zero,644(sp)
    7564:	003b6406 	br	62f8 <__svfscanf_r+0x3b8>
    7568:	a5000044 	addi	r20,r20,1
    756c:	9cc00094 	ori	r19,r19,2
    7570:	003acf06 	br	60b0 <__svfscanf_r+0x170>
    7574:	9880004c 	andi	r2,r19,1
    7578:	1005003a 	cmpeq	r2,r2,zero
    757c:	10000a26 	beq	r2,zero,75a8 <__svfscanf_r+0x1668>
    7580:	9880008c 	andi	r2,r19,2
    7584:	10000826 	beq	r2,zero,75a8 <__svfscanf_r+0x1668>
    7588:	d900a417 	ldw	r4,656(sp)
    758c:	8807d7fa 	srai	r3,r17,31
    7590:	20800017 	ldw	r2,0(r4)
    7594:	21000104 	addi	r4,r4,4
    7598:	d900a415 	stw	r4,656(sp)
    759c:	14400015 	stw	r17,0(r2)
    75a0:	10c00115 	stw	r3,4(r2)
    75a4:	003a7906 	br	5f8c <__svfscanf_r+0x4c>
    75a8:	d8c0a417 	ldw	r3,656(sp)
    75ac:	18800017 	ldw	r2,0(r3)
    75b0:	18c00104 	addi	r3,r3,4
    75b4:	d8c0a415 	stw	r3,656(sp)
    75b8:	14400015 	stw	r17,0(r2)
    75bc:	003a7306 	br	5f8c <__svfscanf_r+0x4c>

000075c0 <__svfscanf>:
    75c0:	00800074 	movhi	r2,1
    75c4:	109a7d04 	addi	r2,r2,27124
    75c8:	2013883a 	mov	r9,r4
    75cc:	11000017 	ldw	r4,0(r2)
    75d0:	2805883a 	mov	r2,r5
    75d4:	300f883a 	mov	r7,r6
    75d8:	480b883a 	mov	r5,r9
    75dc:	100d883a 	mov	r6,r2
    75e0:	0005f401 	jmpi	5f40 <__svfscanf_r>

000075e4 <_vfscanf_r>:
    75e4:	defffb04 	addi	sp,sp,-20
    75e8:	dcc00315 	stw	r19,12(sp)
    75ec:	dc800215 	stw	r18,8(sp)
    75f0:	dc400115 	stw	r17,4(sp)
    75f4:	dc000015 	stw	r16,0(sp)
    75f8:	dfc00415 	stw	ra,16(sp)
    75fc:	2021883a 	mov	r16,r4
    7600:	2823883a 	mov	r17,r5
    7604:	3025883a 	mov	r18,r6
    7608:	3827883a 	mov	r19,r7
    760c:	20000226 	beq	r4,zero,7618 <_vfscanf_r+0x34>
    7610:	20800e17 	ldw	r2,56(r4)
    7614:	10000b26 	beq	r2,zero,7644 <_vfscanf_r+0x60>
    7618:	8009883a 	mov	r4,r16
    761c:	880b883a 	mov	r5,r17
    7620:	900d883a 	mov	r6,r18
    7624:	980f883a 	mov	r7,r19
    7628:	dfc00417 	ldw	ra,16(sp)
    762c:	dcc00317 	ldw	r19,12(sp)
    7630:	dc800217 	ldw	r18,8(sp)
    7634:	dc400117 	ldw	r17,4(sp)
    7638:	dc000017 	ldw	r16,0(sp)
    763c:	dec00504 	addi	sp,sp,20
    7640:	0005f401 	jmpi	5f40 <__svfscanf_r>
    7644:	00029c40 	call	29c4 <__sinit>
    7648:	003ff306 	br	7618 <_vfscanf_r+0x34>

0000764c <vfscanf>:
    764c:	defffb04 	addi	sp,sp,-20
    7650:	dcc00315 	stw	r19,12(sp)
    7654:	04c00074 	movhi	r19,1
    7658:	9cda7d04 	addi	r19,r19,27124
    765c:	98c00017 	ldw	r3,0(r19)
    7660:	dc800215 	stw	r18,8(sp)
    7664:	dc400115 	stw	r17,4(sp)
    7668:	dc000015 	stw	r16,0(sp)
    766c:	dfc00415 	stw	ra,16(sp)
    7670:	2021883a 	mov	r16,r4
    7674:	2823883a 	mov	r17,r5
    7678:	3025883a 	mov	r18,r6
    767c:	18000326 	beq	r3,zero,768c <vfscanf+0x40>
    7680:	18800e17 	ldw	r2,56(r3)
    7684:	1809883a 	mov	r4,r3
    7688:	10000b26 	beq	r2,zero,76b8 <vfscanf+0x6c>
    768c:	99000017 	ldw	r4,0(r19)
    7690:	800b883a 	mov	r5,r16
    7694:	880d883a 	mov	r6,r17
    7698:	900f883a 	mov	r7,r18
    769c:	dfc00417 	ldw	ra,16(sp)
    76a0:	dcc00317 	ldw	r19,12(sp)
    76a4:	dc800217 	ldw	r18,8(sp)
    76a8:	dc400117 	ldw	r17,4(sp)
    76ac:	dc000017 	ldw	r16,0(sp)
    76b0:	dec00504 	addi	sp,sp,20
    76b4:	0005f401 	jmpi	5f40 <__svfscanf_r>
    76b8:	00029c40 	call	29c4 <__sinit>
    76bc:	003ff306 	br	768c <vfscanf+0x40>

000076c0 <_write_r>:
    76c0:	defffd04 	addi	sp,sp,-12
    76c4:	dc000015 	stw	r16,0(sp)
    76c8:	040000b4 	movhi	r16,2
    76cc:	84214e04 	addi	r16,r16,-31432
    76d0:	dc400115 	stw	r17,4(sp)
    76d4:	80000015 	stw	zero,0(r16)
    76d8:	2023883a 	mov	r17,r4
    76dc:	2809883a 	mov	r4,r5
    76e0:	300b883a 	mov	r5,r6
    76e4:	380d883a 	mov	r6,r7
    76e8:	dfc00215 	stw	ra,8(sp)
    76ec:	00121f40 	call	121f4 <write>
    76f0:	1007883a 	mov	r3,r2
    76f4:	00bfffc4 	movi	r2,-1
    76f8:	18800626 	beq	r3,r2,7714 <_write_r+0x54>
    76fc:	1805883a 	mov	r2,r3
    7700:	dfc00217 	ldw	ra,8(sp)
    7704:	dc400117 	ldw	r17,4(sp)
    7708:	dc000017 	ldw	r16,0(sp)
    770c:	dec00304 	addi	sp,sp,12
    7710:	f800283a 	ret
    7714:	80800017 	ldw	r2,0(r16)
    7718:	103ff826 	beq	r2,zero,76fc <_write_r+0x3c>
    771c:	88800015 	stw	r2,0(r17)
    7720:	1805883a 	mov	r2,r3
    7724:	dfc00217 	ldw	ra,8(sp)
    7728:	dc400117 	ldw	r17,4(sp)
    772c:	dc000017 	ldw	r16,0(sp)
    7730:	dec00304 	addi	sp,sp,12
    7734:	f800283a 	ret

00007738 <__swsetup_r>:
    7738:	00800074 	movhi	r2,1
    773c:	109a7d04 	addi	r2,r2,27124
    7740:	10c00017 	ldw	r3,0(r2)
    7744:	defffd04 	addi	sp,sp,-12
    7748:	dc400115 	stw	r17,4(sp)
    774c:	dc000015 	stw	r16,0(sp)
    7750:	dfc00215 	stw	ra,8(sp)
    7754:	2023883a 	mov	r17,r4
    7758:	2821883a 	mov	r16,r5
    775c:	18000226 	beq	r3,zero,7768 <__swsetup_r+0x30>
    7760:	18800e17 	ldw	r2,56(r3)
    7764:	10001f26 	beq	r2,zero,77e4 <__swsetup_r+0xac>
    7768:	8100030b 	ldhu	r4,12(r16)
    776c:	2080020c 	andi	r2,r4,8
    7770:	10002826 	beq	r2,zero,7814 <__swsetup_r+0xdc>
    7774:	81400417 	ldw	r5,16(r16)
    7778:	28001d26 	beq	r5,zero,77f0 <__swsetup_r+0xb8>
    777c:	2080004c 	andi	r2,r4,1
    7780:	1005003a 	cmpeq	r2,r2,zero
    7784:	10000b26 	beq	r2,zero,77b4 <__swsetup_r+0x7c>
    7788:	2080008c 	andi	r2,r4,2
    778c:	10001226 	beq	r2,zero,77d8 <__swsetup_r+0xa0>
    7790:	0005883a 	mov	r2,zero
    7794:	80800215 	stw	r2,8(r16)
    7798:	28000b26 	beq	r5,zero,77c8 <__swsetup_r+0x90>
    779c:	0005883a 	mov	r2,zero
    77a0:	dfc00217 	ldw	ra,8(sp)
    77a4:	dc400117 	ldw	r17,4(sp)
    77a8:	dc000017 	ldw	r16,0(sp)
    77ac:	dec00304 	addi	sp,sp,12
    77b0:	f800283a 	ret
    77b4:	80800517 	ldw	r2,20(r16)
    77b8:	80000215 	stw	zero,8(r16)
    77bc:	0085c83a 	sub	r2,zero,r2
    77c0:	80800615 	stw	r2,24(r16)
    77c4:	283ff51e 	bne	r5,zero,779c <__swsetup_r+0x64>
    77c8:	2080200c 	andi	r2,r4,128
    77cc:	103ff326 	beq	r2,zero,779c <__swsetup_r+0x64>
    77d0:	00bfffc4 	movi	r2,-1
    77d4:	003ff206 	br	77a0 <__swsetup_r+0x68>
    77d8:	80800517 	ldw	r2,20(r16)
    77dc:	80800215 	stw	r2,8(r16)
    77e0:	003fed06 	br	7798 <__swsetup_r+0x60>
    77e4:	1809883a 	mov	r4,r3
    77e8:	00029c40 	call	29c4 <__sinit>
    77ec:	003fde06 	br	7768 <__swsetup_r+0x30>
    77f0:	20c0a00c 	andi	r3,r4,640
    77f4:	00808004 	movi	r2,512
    77f8:	18bfe026 	beq	r3,r2,777c <__swsetup_r+0x44>
    77fc:	8809883a 	mov	r4,r17
    7800:	800b883a 	mov	r5,r16
    7804:	000a0840 	call	a084 <__smakebuf_r>
    7808:	8100030b 	ldhu	r4,12(r16)
    780c:	81400417 	ldw	r5,16(r16)
    7810:	003fda06 	br	777c <__swsetup_r+0x44>
    7814:	2080040c 	andi	r2,r4,16
    7818:	103fed26 	beq	r2,zero,77d0 <__swsetup_r+0x98>
    781c:	2080010c 	andi	r2,r4,4
    7820:	10001226 	beq	r2,zero,786c <__swsetup_r+0x134>
    7824:	81400c17 	ldw	r5,48(r16)
    7828:	28000526 	beq	r5,zero,7840 <__swsetup_r+0x108>
    782c:	80801004 	addi	r2,r16,64
    7830:	28800226 	beq	r5,r2,783c <__swsetup_r+0x104>
    7834:	8809883a 	mov	r4,r17
    7838:	000976c0 	call	976c <_free_r>
    783c:	80000c15 	stw	zero,48(r16)
    7840:	8080030b 	ldhu	r2,12(r16)
    7844:	81400417 	ldw	r5,16(r16)
    7848:	80000115 	stw	zero,4(r16)
    784c:	10bff6cc 	andi	r2,r2,65499
    7850:	8080030d 	sth	r2,12(r16)
    7854:	81400015 	stw	r5,0(r16)
    7858:	8080030b 	ldhu	r2,12(r16)
    785c:	10800214 	ori	r2,r2,8
    7860:	113fffcc 	andi	r4,r2,65535
    7864:	8080030d 	sth	r2,12(r16)
    7868:	003fc306 	br	7778 <__swsetup_r+0x40>
    786c:	81400417 	ldw	r5,16(r16)
    7870:	003ff906 	br	7858 <__swsetup_r+0x120>

00007874 <_close_r>:
    7874:	defffd04 	addi	sp,sp,-12
    7878:	dc000015 	stw	r16,0(sp)
    787c:	040000b4 	movhi	r16,2
    7880:	84214e04 	addi	r16,r16,-31432
    7884:	dc400115 	stw	r17,4(sp)
    7888:	80000015 	stw	zero,0(r16)
    788c:	2023883a 	mov	r17,r4
    7890:	2809883a 	mov	r4,r5
    7894:	dfc00215 	stw	ra,8(sp)
    7898:	00118940 	call	11894 <close>
    789c:	1007883a 	mov	r3,r2
    78a0:	00bfffc4 	movi	r2,-1
    78a4:	18800626 	beq	r3,r2,78c0 <_close_r+0x4c>
    78a8:	1805883a 	mov	r2,r3
    78ac:	dfc00217 	ldw	ra,8(sp)
    78b0:	dc400117 	ldw	r17,4(sp)
    78b4:	dc000017 	ldw	r16,0(sp)
    78b8:	dec00304 	addi	sp,sp,12
    78bc:	f800283a 	ret
    78c0:	80800017 	ldw	r2,0(r16)
    78c4:	103ff826 	beq	r2,zero,78a8 <_close_r+0x34>
    78c8:	88800015 	stw	r2,0(r17)
    78cc:	1805883a 	mov	r2,r3
    78d0:	dfc00217 	ldw	ra,8(sp)
    78d4:	dc400117 	ldw	r17,4(sp)
    78d8:	dc000017 	ldw	r16,0(sp)
    78dc:	dec00304 	addi	sp,sp,12
    78e0:	f800283a 	ret

000078e4 <quorem>:
    78e4:	28c00417 	ldw	r3,16(r5)
    78e8:	20800417 	ldw	r2,16(r4)
    78ec:	defff604 	addi	sp,sp,-40
    78f0:	ddc00715 	stw	r23,28(sp)
    78f4:	dd400515 	stw	r21,20(sp)
    78f8:	dfc00915 	stw	ra,36(sp)
    78fc:	df000815 	stw	fp,32(sp)
    7900:	dd800615 	stw	r22,24(sp)
    7904:	dd000415 	stw	r20,16(sp)
    7908:	dcc00315 	stw	r19,12(sp)
    790c:	dc800215 	stw	r18,8(sp)
    7910:	dc400115 	stw	r17,4(sp)
    7914:	dc000015 	stw	r16,0(sp)
    7918:	202f883a 	mov	r23,r4
    791c:	282b883a 	mov	r21,r5
    7920:	10c07416 	blt	r2,r3,7af4 <quorem+0x210>
    7924:	1c7fffc4 	addi	r17,r3,-1
    7928:	8c45883a 	add	r2,r17,r17
    792c:	1085883a 	add	r2,r2,r2
    7930:	2c000504 	addi	r16,r5,20
    7934:	24c00504 	addi	r19,r4,20
    7938:	14ed883a 	add	r22,r2,r19
    793c:	80a5883a 	add	r18,r16,r2
    7940:	b7000017 	ldw	fp,0(r22)
    7944:	91400017 	ldw	r5,0(r18)
    7948:	e009883a 	mov	r4,fp
    794c:	29400044 	addi	r5,r5,1
    7950:	00027e00 	call	27e0 <__udivsi3>
    7954:	1029883a 	mov	r20,r2
    7958:	10003c1e 	bne	r2,zero,7a4c <quorem+0x168>
    795c:	a80b883a 	mov	r5,r21
    7960:	b809883a 	mov	r4,r23
    7964:	000a5540 	call	a554 <__mcmp>
    7968:	10002b16 	blt	r2,zero,7a18 <quorem+0x134>
    796c:	a5000044 	addi	r20,r20,1
    7970:	980f883a 	mov	r7,r19
    7974:	0011883a 	mov	r8,zero
    7978:	0009883a 	mov	r4,zero
    797c:	81400017 	ldw	r5,0(r16)
    7980:	38c00017 	ldw	r3,0(r7)
    7984:	84000104 	addi	r16,r16,4
    7988:	28bfffcc 	andi	r2,r5,65535
    798c:	2085883a 	add	r2,r4,r2
    7990:	11bfffcc 	andi	r6,r2,65535
    7994:	193fffcc 	andi	r4,r3,65535
    7998:	1004d43a 	srli	r2,r2,16
    799c:	280ad43a 	srli	r5,r5,16
    79a0:	2189c83a 	sub	r4,r4,r6
    79a4:	2209883a 	add	r4,r4,r8
    79a8:	1806d43a 	srli	r3,r3,16
    79ac:	288b883a 	add	r5,r5,r2
    79b0:	200dd43a 	srai	r6,r4,16
    79b4:	28bfffcc 	andi	r2,r5,65535
    79b8:	1887c83a 	sub	r3,r3,r2
    79bc:	1987883a 	add	r3,r3,r6
    79c0:	3900000d 	sth	r4,0(r7)
    79c4:	38c0008d 	sth	r3,2(r7)
    79c8:	2808d43a 	srli	r4,r5,16
    79cc:	39c00104 	addi	r7,r7,4
    79d0:	1811d43a 	srai	r8,r3,16
    79d4:	943fe92e 	bgeu	r18,r16,797c <quorem+0x98>
    79d8:	8c45883a 	add	r2,r17,r17
    79dc:	1085883a 	add	r2,r2,r2
    79e0:	9885883a 	add	r2,r19,r2
    79e4:	10c00017 	ldw	r3,0(r2)
    79e8:	18000b1e 	bne	r3,zero,7a18 <quorem+0x134>
    79ec:	113fff04 	addi	r4,r2,-4
    79f0:	9900082e 	bgeu	r19,r4,7a14 <quorem+0x130>
    79f4:	10bfff17 	ldw	r2,-4(r2)
    79f8:	10000326 	beq	r2,zero,7a08 <quorem+0x124>
    79fc:	00000506 	br	7a14 <quorem+0x130>
    7a00:	20800017 	ldw	r2,0(r4)
    7a04:	1000031e 	bne	r2,zero,7a14 <quorem+0x130>
    7a08:	213fff04 	addi	r4,r4,-4
    7a0c:	8c7fffc4 	addi	r17,r17,-1
    7a10:	993ffb36 	bltu	r19,r4,7a00 <quorem+0x11c>
    7a14:	bc400415 	stw	r17,16(r23)
    7a18:	a005883a 	mov	r2,r20
    7a1c:	dfc00917 	ldw	ra,36(sp)
    7a20:	df000817 	ldw	fp,32(sp)
    7a24:	ddc00717 	ldw	r23,28(sp)
    7a28:	dd800617 	ldw	r22,24(sp)
    7a2c:	dd400517 	ldw	r21,20(sp)
    7a30:	dd000417 	ldw	r20,16(sp)
    7a34:	dcc00317 	ldw	r19,12(sp)
    7a38:	dc800217 	ldw	r18,8(sp)
    7a3c:	dc400117 	ldw	r17,4(sp)
    7a40:	dc000017 	ldw	r16,0(sp)
    7a44:	dec00a04 	addi	sp,sp,40
    7a48:	f800283a 	ret
    7a4c:	980f883a 	mov	r7,r19
    7a50:	8011883a 	mov	r8,r16
    7a54:	0013883a 	mov	r9,zero
    7a58:	000d883a 	mov	r6,zero
    7a5c:	40c00017 	ldw	r3,0(r8)
    7a60:	39000017 	ldw	r4,0(r7)
    7a64:	42000104 	addi	r8,r8,4
    7a68:	18bfffcc 	andi	r2,r3,65535
    7a6c:	a085383a 	mul	r2,r20,r2
    7a70:	1806d43a 	srli	r3,r3,16
    7a74:	217fffcc 	andi	r5,r4,65535
    7a78:	3085883a 	add	r2,r6,r2
    7a7c:	11bfffcc 	andi	r6,r2,65535
    7a80:	a0c7383a 	mul	r3,r20,r3
    7a84:	1004d43a 	srli	r2,r2,16
    7a88:	298bc83a 	sub	r5,r5,r6
    7a8c:	2a4b883a 	add	r5,r5,r9
    7a90:	2008d43a 	srli	r4,r4,16
    7a94:	1887883a 	add	r3,r3,r2
    7a98:	280dd43a 	srai	r6,r5,16
    7a9c:	18bfffcc 	andi	r2,r3,65535
    7aa0:	2089c83a 	sub	r4,r4,r2
    7aa4:	2189883a 	add	r4,r4,r6
    7aa8:	3900008d 	sth	r4,2(r7)
    7aac:	3940000d 	sth	r5,0(r7)
    7ab0:	180cd43a 	srli	r6,r3,16
    7ab4:	39c00104 	addi	r7,r7,4
    7ab8:	2013d43a 	srai	r9,r4,16
    7abc:	923fe72e 	bgeu	r18,r8,7a5c <quorem+0x178>
    7ac0:	e03fa61e 	bne	fp,zero,795c <quorem+0x78>
    7ac4:	b0ffff04 	addi	r3,r22,-4
    7ac8:	98c0082e 	bgeu	r19,r3,7aec <quorem+0x208>
    7acc:	b0bfff17 	ldw	r2,-4(r22)
    7ad0:	10000326 	beq	r2,zero,7ae0 <quorem+0x1fc>
    7ad4:	00000506 	br	7aec <quorem+0x208>
    7ad8:	18800017 	ldw	r2,0(r3)
    7adc:	1000031e 	bne	r2,zero,7aec <quorem+0x208>
    7ae0:	18ffff04 	addi	r3,r3,-4
    7ae4:	8c7fffc4 	addi	r17,r17,-1
    7ae8:	98fffb36 	bltu	r19,r3,7ad8 <quorem+0x1f4>
    7aec:	bc400415 	stw	r17,16(r23)
    7af0:	003f9a06 	br	795c <quorem+0x78>
    7af4:	0005883a 	mov	r2,zero
    7af8:	003fc806 	br	7a1c <quorem+0x138>

00007afc <_dtoa_r>:
    7afc:	22001017 	ldw	r8,64(r4)
    7b00:	deffda04 	addi	sp,sp,-152
    7b04:	dd402115 	stw	r21,132(sp)
    7b08:	dd002015 	stw	r20,128(sp)
    7b0c:	dc801e15 	stw	r18,120(sp)
    7b10:	dc401d15 	stw	r17,116(sp)
    7b14:	dfc02515 	stw	ra,148(sp)
    7b18:	df002415 	stw	fp,144(sp)
    7b1c:	ddc02315 	stw	r23,140(sp)
    7b20:	dd802215 	stw	r22,136(sp)
    7b24:	dcc01f15 	stw	r19,124(sp)
    7b28:	dc001c15 	stw	r16,112(sp)
    7b2c:	d9001615 	stw	r4,88(sp)
    7b30:	3023883a 	mov	r17,r6
    7b34:	2829883a 	mov	r20,r5
    7b38:	d9c01715 	stw	r7,92(sp)
    7b3c:	dc802817 	ldw	r18,160(sp)
    7b40:	302b883a 	mov	r21,r6
    7b44:	40000a26 	beq	r8,zero,7b70 <_dtoa_r+0x74>
    7b48:	20801117 	ldw	r2,68(r4)
    7b4c:	400b883a 	mov	r5,r8
    7b50:	40800115 	stw	r2,4(r8)
    7b54:	20c01117 	ldw	r3,68(r4)
    7b58:	00800044 	movi	r2,1
    7b5c:	10c4983a 	sll	r2,r2,r3
    7b60:	40800215 	stw	r2,8(r8)
    7b64:	000a3f80 	call	a3f8 <_Bfree>
    7b68:	d8c01617 	ldw	r3,88(sp)
    7b6c:	18001015 	stw	zero,64(r3)
    7b70:	8800a316 	blt	r17,zero,7e00 <_dtoa_r+0x304>
    7b74:	90000015 	stw	zero,0(r18)
    7b78:	a8dffc2c 	andhi	r3,r21,32752
    7b7c:	009ffc34 	movhi	r2,32752
    7b80:	18809126 	beq	r3,r2,7dc8 <_dtoa_r+0x2cc>
    7b84:	000d883a 	mov	r6,zero
    7b88:	000f883a 	mov	r7,zero
    7b8c:	a009883a 	mov	r4,r20
    7b90:	a80b883a 	mov	r5,r21
    7b94:	dd001215 	stw	r20,72(sp)
    7b98:	dd401315 	stw	r21,76(sp)
    7b9c:	00109840 	call	10984 <__nedf2>
    7ba0:	1000171e 	bne	r2,zero,7c00 <_dtoa_r+0x104>
    7ba4:	d9802717 	ldw	r6,156(sp)
    7ba8:	00800044 	movi	r2,1
    7bac:	30800015 	stw	r2,0(r6)
    7bb0:	d8802917 	ldw	r2,164(sp)
    7bb4:	10029b26 	beq	r2,zero,8624 <_dtoa_r+0xb28>
    7bb8:	d9002917 	ldw	r4,164(sp)
    7bbc:	00800074 	movhi	r2,1
    7bc0:	1092f944 	addi	r2,r2,19429
    7bc4:	10ffffc4 	addi	r3,r2,-1
    7bc8:	20800015 	stw	r2,0(r4)
    7bcc:	1805883a 	mov	r2,r3
    7bd0:	dfc02517 	ldw	ra,148(sp)
    7bd4:	df002417 	ldw	fp,144(sp)
    7bd8:	ddc02317 	ldw	r23,140(sp)
    7bdc:	dd802217 	ldw	r22,136(sp)
    7be0:	dd402117 	ldw	r21,132(sp)
    7be4:	dd002017 	ldw	r20,128(sp)
    7be8:	dcc01f17 	ldw	r19,124(sp)
    7bec:	dc801e17 	ldw	r18,120(sp)
    7bf0:	dc401d17 	ldw	r17,116(sp)
    7bf4:	dc001c17 	ldw	r16,112(sp)
    7bf8:	dec02604 	addi	sp,sp,152
    7bfc:	f800283a 	ret
    7c00:	d9001617 	ldw	r4,88(sp)
    7c04:	d9401217 	ldw	r5,72(sp)
    7c08:	d8800104 	addi	r2,sp,4
    7c0c:	a80d883a 	mov	r6,r21
    7c10:	d9c00204 	addi	r7,sp,8
    7c14:	d8800015 	stw	r2,0(sp)
    7c18:	000aa340 	call	aa34 <__d2b>
    7c1c:	d8800715 	stw	r2,28(sp)
    7c20:	a804d53a 	srli	r2,r21,20
    7c24:	1101ffcc 	andi	r4,r2,2047
    7c28:	20008626 	beq	r4,zero,7e44 <_dtoa_r+0x348>
    7c2c:	d8c01217 	ldw	r3,72(sp)
    7c30:	00800434 	movhi	r2,16
    7c34:	10bfffc4 	addi	r2,r2,-1
    7c38:	ddc00117 	ldw	r23,4(sp)
    7c3c:	a884703a 	and	r2,r21,r2
    7c40:	1811883a 	mov	r8,r3
    7c44:	124ffc34 	orhi	r9,r2,16368
    7c48:	25bf0044 	addi	r22,r4,-1023
    7c4c:	d8000815 	stw	zero,32(sp)
    7c50:	0005883a 	mov	r2,zero
    7c54:	00cffe34 	movhi	r3,16376
    7c58:	480b883a 	mov	r5,r9
    7c5c:	4009883a 	mov	r4,r8
    7c60:	180f883a 	mov	r7,r3
    7c64:	100d883a 	mov	r6,r2
    7c68:	00101ec0 	call	101ec <__subdf3>
    7c6c:	0218dbf4 	movhi	r8,25455
    7c70:	4210d844 	addi	r8,r8,17249
    7c74:	024ff4f4 	movhi	r9,16339
    7c78:	4a61e9c4 	addi	r9,r9,-30809
    7c7c:	480f883a 	mov	r7,r9
    7c80:	400d883a 	mov	r6,r8
    7c84:	180b883a 	mov	r5,r3
    7c88:	1009883a 	mov	r4,r2
    7c8c:	00102e00 	call	102e0 <__muldf3>
    7c90:	0222d874 	movhi	r8,35681
    7c94:	42322cc4 	addi	r8,r8,-14157
    7c98:	024ff1f4 	movhi	r9,16327
    7c9c:	4a628a04 	addi	r9,r9,-30168
    7ca0:	480f883a 	mov	r7,r9
    7ca4:	400d883a 	mov	r6,r8
    7ca8:	180b883a 	mov	r5,r3
    7cac:	1009883a 	mov	r4,r2
    7cb0:	001026c0 	call	1026c <__adddf3>
    7cb4:	b009883a 	mov	r4,r22
    7cb8:	1021883a 	mov	r16,r2
    7cbc:	1823883a 	mov	r17,r3
    7cc0:	0010c2c0 	call	10c2c <__floatsidf>
    7cc4:	021427f4 	movhi	r8,20639
    7cc8:	421e7ec4 	addi	r8,r8,31227
    7ccc:	024ff4f4 	movhi	r9,16339
    7cd0:	4a5104c4 	addi	r9,r9,17427
    7cd4:	480f883a 	mov	r7,r9
    7cd8:	400d883a 	mov	r6,r8
    7cdc:	180b883a 	mov	r5,r3
    7ce0:	1009883a 	mov	r4,r2
    7ce4:	00102e00 	call	102e0 <__muldf3>
    7ce8:	180f883a 	mov	r7,r3
    7cec:	880b883a 	mov	r5,r17
    7cf0:	100d883a 	mov	r6,r2
    7cf4:	8009883a 	mov	r4,r16
    7cf8:	001026c0 	call	1026c <__adddf3>
    7cfc:	1009883a 	mov	r4,r2
    7d00:	180b883a 	mov	r5,r3
    7d04:	1021883a 	mov	r16,r2
    7d08:	1823883a 	mov	r17,r3
    7d0c:	0010d240 	call	10d24 <__fixdfsi>
    7d10:	000d883a 	mov	r6,zero
    7d14:	000f883a 	mov	r7,zero
    7d18:	8009883a 	mov	r4,r16
    7d1c:	880b883a 	mov	r5,r17
    7d20:	d8800d15 	stw	r2,52(sp)
    7d24:	0010b1c0 	call	10b1c <__ltdf2>
    7d28:	10031716 	blt	r2,zero,8988 <_dtoa_r+0xe8c>
    7d2c:	d8c00d17 	ldw	r3,52(sp)
    7d30:	00800584 	movi	r2,22
    7d34:	10c1482e 	bgeu	r2,r3,8258 <_dtoa_r+0x75c>
    7d38:	01000044 	movi	r4,1
    7d3c:	d9000c15 	stw	r4,48(sp)
    7d40:	bd85c83a 	sub	r2,r23,r22
    7d44:	11bfffc4 	addi	r6,r2,-1
    7d48:	30030b16 	blt	r6,zero,8978 <_dtoa_r+0xe7c>
    7d4c:	d9800a15 	stw	r6,40(sp)
    7d50:	d8001115 	stw	zero,68(sp)
    7d54:	d8c00d17 	ldw	r3,52(sp)
    7d58:	1802ff16 	blt	r3,zero,8958 <_dtoa_r+0xe5c>
    7d5c:	d9000a17 	ldw	r4,40(sp)
    7d60:	d8c00915 	stw	r3,36(sp)
    7d64:	d8001015 	stw	zero,64(sp)
    7d68:	20c9883a 	add	r4,r4,r3
    7d6c:	d9000a15 	stw	r4,40(sp)
    7d70:	d9001717 	ldw	r4,92(sp)
    7d74:	00800244 	movi	r2,9
    7d78:	11004636 	bltu	r2,r4,7e94 <_dtoa_r+0x398>
    7d7c:	00800144 	movi	r2,5
    7d80:	11020416 	blt	r2,r4,8594 <_dtoa_r+0xa98>
    7d84:	04400044 	movi	r17,1
    7d88:	d8c01717 	ldw	r3,92(sp)
    7d8c:	00800144 	movi	r2,5
    7d90:	10c1ed36 	bltu	r2,r3,8548 <_dtoa_r+0xa4c>
    7d94:	18c5883a 	add	r2,r3,r3
    7d98:	1085883a 	add	r2,r2,r2
    7d9c:	00c00034 	movhi	r3,0
    7da0:	18df6c04 	addi	r3,r3,32176
    7da4:	10c5883a 	add	r2,r2,r3
    7da8:	11000017 	ldw	r4,0(r2)
    7dac:	2000683a 	jmp	r4
    7db0:	00007e9c 	xori	zero,zero,506
    7db4:	00007e9c 	xori	zero,zero,506
    7db8:	0000889c 	xori	zero,zero,546
    7dbc:	00008874 	movhi	zero,545
    7dc0:	000088b8 	rdprs	zero,zero,546
    7dc4:	000088c4 	movi	zero,547
    7dc8:	d9002717 	ldw	r4,156(sp)
    7dcc:	0089c3c4 	movi	r2,9999
    7dd0:	20800015 	stw	r2,0(r4)
    7dd4:	a0001026 	beq	r20,zero,7e18 <_dtoa_r+0x31c>
    7dd8:	00c00074 	movhi	r3,1
    7ddc:	18d30f04 	addi	r3,r3,19516
    7de0:	d9802917 	ldw	r6,164(sp)
    7de4:	303f7926 	beq	r6,zero,7bcc <_dtoa_r+0xd0>
    7de8:	188000c7 	ldb	r2,3(r3)
    7dec:	190000c4 	addi	r4,r3,3
    7df0:	1000101e 	bne	r2,zero,7e34 <_dtoa_r+0x338>
    7df4:	d8802917 	ldw	r2,164(sp)
    7df8:	11000015 	stw	r4,0(r2)
    7dfc:	003f7306 	br	7bcc <_dtoa_r+0xd0>
    7e00:	00a00034 	movhi	r2,32768
    7e04:	10bfffc4 	addi	r2,r2,-1
    7e08:	00c00044 	movi	r3,1
    7e0c:	88aa703a 	and	r21,r17,r2
    7e10:	90c00015 	stw	r3,0(r18)
    7e14:	003f5806 	br	7b78 <_dtoa_r+0x7c>
    7e18:	00800434 	movhi	r2,16
    7e1c:	10bfffc4 	addi	r2,r2,-1
    7e20:	a884703a 	and	r2,r21,r2
    7e24:	103fec1e 	bne	r2,zero,7dd8 <_dtoa_r+0x2dc>
    7e28:	00c00074 	movhi	r3,1
    7e2c:	18d30c04 	addi	r3,r3,19504
    7e30:	003feb06 	br	7de0 <_dtoa_r+0x2e4>
    7e34:	d8802917 	ldw	r2,164(sp)
    7e38:	19000204 	addi	r4,r3,8
    7e3c:	11000015 	stw	r4,0(r2)
    7e40:	003f6206 	br	7bcc <_dtoa_r+0xd0>
    7e44:	ddc00117 	ldw	r23,4(sp)
    7e48:	d8800217 	ldw	r2,8(sp)
    7e4c:	01000804 	movi	r4,32
    7e50:	b8c10c84 	addi	r3,r23,1074
    7e54:	18a3883a 	add	r17,r3,r2
    7e58:	2441b80e 	bge	r4,r17,853c <_dtoa_r+0xa40>
    7e5c:	00c01004 	movi	r3,64
    7e60:	1c47c83a 	sub	r3,r3,r17
    7e64:	88bff804 	addi	r2,r17,-32
    7e68:	a8c6983a 	sll	r3,r21,r3
    7e6c:	a084d83a 	srl	r2,r20,r2
    7e70:	1888b03a 	or	r4,r3,r2
    7e74:	0010e700 	call	10e70 <__floatunsidf>
    7e78:	1011883a 	mov	r8,r2
    7e7c:	00bf8434 	movhi	r2,65040
    7e80:	01000044 	movi	r4,1
    7e84:	10d3883a 	add	r9,r2,r3
    7e88:	8dbef344 	addi	r22,r17,-1075
    7e8c:	d9000815 	stw	r4,32(sp)
    7e90:	003f6f06 	br	7c50 <_dtoa_r+0x154>
    7e94:	d8001715 	stw	zero,92(sp)
    7e98:	04400044 	movi	r17,1
    7e9c:	00bfffc4 	movi	r2,-1
    7ea0:	00c00044 	movi	r3,1
    7ea4:	d8800e15 	stw	r2,56(sp)
    7ea8:	d8002615 	stw	zero,152(sp)
    7eac:	d8800f15 	stw	r2,60(sp)
    7eb0:	d8c00b15 	stw	r3,44(sp)
    7eb4:	1021883a 	mov	r16,r2
    7eb8:	d8801617 	ldw	r2,88(sp)
    7ebc:	10001115 	stw	zero,68(r2)
    7ec0:	d8801617 	ldw	r2,88(sp)
    7ec4:	11401117 	ldw	r5,68(r2)
    7ec8:	1009883a 	mov	r4,r2
    7ecc:	000a9780 	call	a978 <_Balloc>
    7ed0:	d8c01617 	ldw	r3,88(sp)
    7ed4:	d8800515 	stw	r2,20(sp)
    7ed8:	18801015 	stw	r2,64(r3)
    7edc:	00800384 	movi	r2,14
    7ee0:	14006836 	bltu	r2,r16,8084 <_dtoa_r+0x588>
    7ee4:	8805003a 	cmpeq	r2,r17,zero
    7ee8:	1000661e 	bne	r2,zero,8084 <_dtoa_r+0x588>
    7eec:	d9000d17 	ldw	r4,52(sp)
    7ef0:	0102300e 	bge	zero,r4,87b4 <_dtoa_r+0xcb8>
    7ef4:	208003cc 	andi	r2,r4,15
    7ef8:	100490fa 	slli	r2,r2,3
    7efc:	2025d13a 	srai	r18,r4,4
    7f00:	00c00074 	movhi	r3,1
    7f04:	18d32004 	addi	r3,r3,19584
    7f08:	10c5883a 	add	r2,r2,r3
    7f0c:	90c0040c 	andi	r3,r18,16
    7f10:	14000017 	ldw	r16,0(r2)
    7f14:	14400117 	ldw	r17,4(r2)
    7f18:	18036a1e 	bne	r3,zero,8cc4 <_dtoa_r+0x11c8>
    7f1c:	05800084 	movi	r22,2
    7f20:	90001026 	beq	r18,zero,7f64 <_dtoa_r+0x468>
    7f24:	04c00074 	movhi	r19,1
    7f28:	9cd35204 	addi	r19,r19,19784
    7f2c:	9080004c 	andi	r2,r18,1
    7f30:	1005003a 	cmpeq	r2,r2,zero
    7f34:	1000081e 	bne	r2,zero,7f58 <_dtoa_r+0x45c>
    7f38:	99800017 	ldw	r6,0(r19)
    7f3c:	99c00117 	ldw	r7,4(r19)
    7f40:	880b883a 	mov	r5,r17
    7f44:	8009883a 	mov	r4,r16
    7f48:	00102e00 	call	102e0 <__muldf3>
    7f4c:	1021883a 	mov	r16,r2
    7f50:	b5800044 	addi	r22,r22,1
    7f54:	1823883a 	mov	r17,r3
    7f58:	9025d07a 	srai	r18,r18,1
    7f5c:	9cc00204 	addi	r19,r19,8
    7f60:	903ff21e 	bne	r18,zero,7f2c <_dtoa_r+0x430>
    7f64:	a80b883a 	mov	r5,r21
    7f68:	a009883a 	mov	r4,r20
    7f6c:	880f883a 	mov	r7,r17
    7f70:	800d883a 	mov	r6,r16
    7f74:	00106a40 	call	106a4 <__divdf3>
    7f78:	1029883a 	mov	r20,r2
    7f7c:	182b883a 	mov	r21,r3
    7f80:	d8c00c17 	ldw	r3,48(sp)
    7f84:	1805003a 	cmpeq	r2,r3,zero
    7f88:	1000081e 	bne	r2,zero,7fac <_dtoa_r+0x4b0>
    7f8c:	0005883a 	mov	r2,zero
    7f90:	00cffc34 	movhi	r3,16368
    7f94:	180f883a 	mov	r7,r3
    7f98:	a009883a 	mov	r4,r20
    7f9c:	a80b883a 	mov	r5,r21
    7fa0:	100d883a 	mov	r6,r2
    7fa4:	0010b1c0 	call	10b1c <__ltdf2>
    7fa8:	1003fe16 	blt	r2,zero,8fa4 <_dtoa_r+0x14a8>
    7fac:	b009883a 	mov	r4,r22
    7fb0:	0010c2c0 	call	10c2c <__floatsidf>
    7fb4:	180b883a 	mov	r5,r3
    7fb8:	1009883a 	mov	r4,r2
    7fbc:	a00d883a 	mov	r6,r20
    7fc0:	a80f883a 	mov	r7,r21
    7fc4:	00102e00 	call	102e0 <__muldf3>
    7fc8:	0011883a 	mov	r8,zero
    7fcc:	02500734 	movhi	r9,16412
    7fd0:	1009883a 	mov	r4,r2
    7fd4:	180b883a 	mov	r5,r3
    7fd8:	480f883a 	mov	r7,r9
    7fdc:	400d883a 	mov	r6,r8
    7fe0:	001026c0 	call	1026c <__adddf3>
    7fe4:	d9000f17 	ldw	r4,60(sp)
    7fe8:	102d883a 	mov	r22,r2
    7fec:	00bf3034 	movhi	r2,64704
    7ff0:	18b9883a 	add	fp,r3,r2
    7ff4:	e02f883a 	mov	r23,fp
    7ff8:	20028f1e 	bne	r4,zero,8a38 <_dtoa_r+0xf3c>
    7ffc:	0005883a 	mov	r2,zero
    8000:	00d00534 	movhi	r3,16404
    8004:	a009883a 	mov	r4,r20
    8008:	a80b883a 	mov	r5,r21
    800c:	180f883a 	mov	r7,r3
    8010:	100d883a 	mov	r6,r2
    8014:	00101ec0 	call	101ec <__subdf3>
    8018:	1009883a 	mov	r4,r2
    801c:	e00f883a 	mov	r7,fp
    8020:	180b883a 	mov	r5,r3
    8024:	b00d883a 	mov	r6,r22
    8028:	1025883a 	mov	r18,r2
    802c:	1827883a 	mov	r19,r3
    8030:	0010a0c0 	call	10a0c <__gtdf2>
    8034:	00834f16 	blt	zero,r2,8d74 <_dtoa_r+0x1278>
    8038:	e0e0003c 	xorhi	r3,fp,32768
    803c:	9009883a 	mov	r4,r18
    8040:	980b883a 	mov	r5,r19
    8044:	180f883a 	mov	r7,r3
    8048:	b00d883a 	mov	r6,r22
    804c:	0010b1c0 	call	10b1c <__ltdf2>
    8050:	1000080e 	bge	r2,zero,8074 <_dtoa_r+0x578>
    8054:	0027883a 	mov	r19,zero
    8058:	0025883a 	mov	r18,zero
    805c:	d8802617 	ldw	r2,152(sp)
    8060:	df000517 	ldw	fp,20(sp)
    8064:	d8000615 	stw	zero,24(sp)
    8068:	0084303a 	nor	r2,zero,r2
    806c:	d8800d15 	stw	r2,52(sp)
    8070:	00019b06 	br	86e0 <_dtoa_r+0xbe4>
    8074:	d9801217 	ldw	r6,72(sp)
    8078:	d8801317 	ldw	r2,76(sp)
    807c:	3029883a 	mov	r20,r6
    8080:	102b883a 	mov	r21,r2
    8084:	d8c00217 	ldw	r3,8(sp)
    8088:	18008516 	blt	r3,zero,82a0 <_dtoa_r+0x7a4>
    808c:	d9000d17 	ldw	r4,52(sp)
    8090:	00800384 	movi	r2,14
    8094:	11008216 	blt	r2,r4,82a0 <_dtoa_r+0x7a4>
    8098:	200490fa 	slli	r2,r4,3
    809c:	d9802617 	ldw	r6,152(sp)
    80a0:	00c00074 	movhi	r3,1
    80a4:	18d32004 	addi	r3,r3,19584
    80a8:	10c5883a 	add	r2,r2,r3
    80ac:	14800017 	ldw	r18,0(r2)
    80b0:	14c00117 	ldw	r19,4(r2)
    80b4:	30031e16 	blt	r6,zero,8d30 <_dtoa_r+0x1234>
    80b8:	d9000517 	ldw	r4,20(sp)
    80bc:	d8c00f17 	ldw	r3,60(sp)
    80c0:	a823883a 	mov	r17,r21
    80c4:	a021883a 	mov	r16,r20
    80c8:	192b883a 	add	r21,r3,r4
    80cc:	2039883a 	mov	fp,r4
    80d0:	00000f06 	br	8110 <_dtoa_r+0x614>
    80d4:	0005883a 	mov	r2,zero
    80d8:	00d00934 	movhi	r3,16420
    80dc:	5009883a 	mov	r4,r10
    80e0:	580b883a 	mov	r5,r11
    80e4:	180f883a 	mov	r7,r3
    80e8:	100d883a 	mov	r6,r2
    80ec:	00102e00 	call	102e0 <__muldf3>
    80f0:	180b883a 	mov	r5,r3
    80f4:	000d883a 	mov	r6,zero
    80f8:	000f883a 	mov	r7,zero
    80fc:	1009883a 	mov	r4,r2
    8100:	1021883a 	mov	r16,r2
    8104:	1823883a 	mov	r17,r3
    8108:	00109840 	call	10984 <__nedf2>
    810c:	10004526 	beq	r2,zero,8224 <_dtoa_r+0x728>
    8110:	900d883a 	mov	r6,r18
    8114:	980f883a 	mov	r7,r19
    8118:	8009883a 	mov	r4,r16
    811c:	880b883a 	mov	r5,r17
    8120:	00106a40 	call	106a4 <__divdf3>
    8124:	180b883a 	mov	r5,r3
    8128:	1009883a 	mov	r4,r2
    812c:	0010d240 	call	10d24 <__fixdfsi>
    8130:	1009883a 	mov	r4,r2
    8134:	1029883a 	mov	r20,r2
    8138:	0010c2c0 	call	10c2c <__floatsidf>
    813c:	180f883a 	mov	r7,r3
    8140:	9009883a 	mov	r4,r18
    8144:	980b883a 	mov	r5,r19
    8148:	100d883a 	mov	r6,r2
    814c:	00102e00 	call	102e0 <__muldf3>
    8150:	180f883a 	mov	r7,r3
    8154:	880b883a 	mov	r5,r17
    8158:	8009883a 	mov	r4,r16
    815c:	100d883a 	mov	r6,r2
    8160:	00101ec0 	call	101ec <__subdf3>
    8164:	1015883a 	mov	r10,r2
    8168:	a0800c04 	addi	r2,r20,48
    816c:	e0800005 	stb	r2,0(fp)
    8170:	e7000044 	addi	fp,fp,1
    8174:	1817883a 	mov	r11,r3
    8178:	e57fd61e 	bne	fp,r21,80d4 <_dtoa_r+0x5d8>
    817c:	500d883a 	mov	r6,r10
    8180:	180f883a 	mov	r7,r3
    8184:	5009883a 	mov	r4,r10
    8188:	180b883a 	mov	r5,r3
    818c:	001026c0 	call	1026c <__adddf3>
    8190:	100d883a 	mov	r6,r2
    8194:	9009883a 	mov	r4,r18
    8198:	980b883a 	mov	r5,r19
    819c:	180f883a 	mov	r7,r3
    81a0:	1021883a 	mov	r16,r2
    81a4:	1823883a 	mov	r17,r3
    81a8:	0010b1c0 	call	10b1c <__ltdf2>
    81ac:	10000816 	blt	r2,zero,81d0 <_dtoa_r+0x6d4>
    81b0:	980b883a 	mov	r5,r19
    81b4:	800d883a 	mov	r6,r16
    81b8:	880f883a 	mov	r7,r17
    81bc:	9009883a 	mov	r4,r18
    81c0:	00108fc0 	call	108fc <__eqdf2>
    81c4:	1000171e 	bne	r2,zero,8224 <_dtoa_r+0x728>
    81c8:	a080004c 	andi	r2,r20,1
    81cc:	10001526 	beq	r2,zero,8224 <_dtoa_r+0x728>
    81d0:	d8800d17 	ldw	r2,52(sp)
    81d4:	d8800415 	stw	r2,16(sp)
    81d8:	e009883a 	mov	r4,fp
    81dc:	213fffc4 	addi	r4,r4,-1
    81e0:	20c00007 	ldb	r3,0(r4)
    81e4:	00800e44 	movi	r2,57
    81e8:	1880081e 	bne	r3,r2,820c <_dtoa_r+0x710>
    81ec:	d8800517 	ldw	r2,20(sp)
    81f0:	113ffa1e 	bne	r2,r4,81dc <_dtoa_r+0x6e0>
    81f4:	d8c00417 	ldw	r3,16(sp)
    81f8:	d9800517 	ldw	r6,20(sp)
    81fc:	00800c04 	movi	r2,48
    8200:	18c00044 	addi	r3,r3,1
    8204:	d8c00415 	stw	r3,16(sp)
    8208:	30800005 	stb	r2,0(r6)
    820c:	20800003 	ldbu	r2,0(r4)
    8210:	d8c00417 	ldw	r3,16(sp)
    8214:	27000044 	addi	fp,r4,1
    8218:	10800044 	addi	r2,r2,1
    821c:	d8c00d15 	stw	r3,52(sp)
    8220:	20800005 	stb	r2,0(r4)
    8224:	d9001617 	ldw	r4,88(sp)
    8228:	d9400717 	ldw	r5,28(sp)
    822c:	000a3f80 	call	a3f8 <_Bfree>
    8230:	e0000005 	stb	zero,0(fp)
    8234:	d9800d17 	ldw	r6,52(sp)
    8238:	d8c02717 	ldw	r3,156(sp)
    823c:	d9002917 	ldw	r4,164(sp)
    8240:	30800044 	addi	r2,r6,1
    8244:	18800015 	stw	r2,0(r3)
    8248:	20029c26 	beq	r4,zero,8cbc <_dtoa_r+0x11c0>
    824c:	d8c00517 	ldw	r3,20(sp)
    8250:	27000015 	stw	fp,0(r4)
    8254:	003e5d06 	br	7bcc <_dtoa_r+0xd0>
    8258:	d9800d17 	ldw	r6,52(sp)
    825c:	00c00074 	movhi	r3,1
    8260:	18d32004 	addi	r3,r3,19584
    8264:	d9001217 	ldw	r4,72(sp)
    8268:	300490fa 	slli	r2,r6,3
    826c:	d9401317 	ldw	r5,76(sp)
    8270:	10c5883a 	add	r2,r2,r3
    8274:	12000017 	ldw	r8,0(r2)
    8278:	12400117 	ldw	r9,4(r2)
    827c:	400d883a 	mov	r6,r8
    8280:	480f883a 	mov	r7,r9
    8284:	0010b1c0 	call	10b1c <__ltdf2>
    8288:	1000030e 	bge	r2,zero,8298 <_dtoa_r+0x79c>
    828c:	d8800d17 	ldw	r2,52(sp)
    8290:	10bfffc4 	addi	r2,r2,-1
    8294:	d8800d15 	stw	r2,52(sp)
    8298:	d8000c15 	stw	zero,48(sp)
    829c:	003ea806 	br	7d40 <_dtoa_r+0x244>
    82a0:	d9000b17 	ldw	r4,44(sp)
    82a4:	202cc03a 	cmpne	r22,r4,zero
    82a8:	b000c71e 	bne	r22,zero,85c8 <_dtoa_r+0xacc>
    82ac:	dc001117 	ldw	r16,68(sp)
    82b0:	dc801017 	ldw	r18,64(sp)
    82b4:	0027883a 	mov	r19,zero
    82b8:	04000b0e 	bge	zero,r16,82e8 <_dtoa_r+0x7ec>
    82bc:	d8c00a17 	ldw	r3,40(sp)
    82c0:	00c0090e 	bge	zero,r3,82e8 <_dtoa_r+0x7ec>
    82c4:	8005883a 	mov	r2,r16
    82c8:	1c011316 	blt	r3,r16,8718 <_dtoa_r+0xc1c>
    82cc:	d9000a17 	ldw	r4,40(sp)
    82d0:	d9801117 	ldw	r6,68(sp)
    82d4:	80a1c83a 	sub	r16,r16,r2
    82d8:	2089c83a 	sub	r4,r4,r2
    82dc:	308dc83a 	sub	r6,r6,r2
    82e0:	d9000a15 	stw	r4,40(sp)
    82e4:	d9801115 	stw	r6,68(sp)
    82e8:	d8801017 	ldw	r2,64(sp)
    82ec:	0080150e 	bge	zero,r2,8344 <_dtoa_r+0x848>
    82f0:	d8c00b17 	ldw	r3,44(sp)
    82f4:	1805003a 	cmpeq	r2,r3,zero
    82f8:	1001c91e 	bne	r2,zero,8a20 <_dtoa_r+0xf24>
    82fc:	04800e0e 	bge	zero,r18,8338 <_dtoa_r+0x83c>
    8300:	d9001617 	ldw	r4,88(sp)
    8304:	980b883a 	mov	r5,r19
    8308:	900d883a 	mov	r6,r18
    830c:	000b1ac0 	call	b1ac <__pow5mult>
    8310:	d9001617 	ldw	r4,88(sp)
    8314:	d9800717 	ldw	r6,28(sp)
    8318:	100b883a 	mov	r5,r2
    831c:	1027883a 	mov	r19,r2
    8320:	000ae880 	call	ae88 <__multiply>
    8324:	d9001617 	ldw	r4,88(sp)
    8328:	d9400717 	ldw	r5,28(sp)
    832c:	1023883a 	mov	r17,r2
    8330:	000a3f80 	call	a3f8 <_Bfree>
    8334:	dc400715 	stw	r17,28(sp)
    8338:	d9001017 	ldw	r4,64(sp)
    833c:	248dc83a 	sub	r6,r4,r18
    8340:	30010e1e 	bne	r6,zero,877c <_dtoa_r+0xc80>
    8344:	d9001617 	ldw	r4,88(sp)
    8348:	04400044 	movi	r17,1
    834c:	880b883a 	mov	r5,r17
    8350:	000b0700 	call	b070 <__i2b>
    8354:	d9800917 	ldw	r6,36(sp)
    8358:	1025883a 	mov	r18,r2
    835c:	0180040e 	bge	zero,r6,8370 <_dtoa_r+0x874>
    8360:	d9001617 	ldw	r4,88(sp)
    8364:	100b883a 	mov	r5,r2
    8368:	000b1ac0 	call	b1ac <__pow5mult>
    836c:	1025883a 	mov	r18,r2
    8370:	d8801717 	ldw	r2,92(sp)
    8374:	8880f30e 	bge	r17,r2,8744 <_dtoa_r+0xc48>
    8378:	0023883a 	mov	r17,zero
    837c:	d9800917 	ldw	r6,36(sp)
    8380:	30019e1e 	bne	r6,zero,89fc <_dtoa_r+0xf00>
    8384:	00c00044 	movi	r3,1
    8388:	d9000a17 	ldw	r4,40(sp)
    838c:	20c5883a 	add	r2,r4,r3
    8390:	10c007cc 	andi	r3,r2,31
    8394:	1800841e 	bne	r3,zero,85a8 <_dtoa_r+0xaac>
    8398:	00800704 	movi	r2,28
    839c:	d9000a17 	ldw	r4,40(sp)
    83a0:	d9801117 	ldw	r6,68(sp)
    83a4:	80a1883a 	add	r16,r16,r2
    83a8:	2089883a 	add	r4,r4,r2
    83ac:	308d883a 	add	r6,r6,r2
    83b0:	d9000a15 	stw	r4,40(sp)
    83b4:	d9801115 	stw	r6,68(sp)
    83b8:	d8801117 	ldw	r2,68(sp)
    83bc:	0080050e 	bge	zero,r2,83d4 <_dtoa_r+0x8d8>
    83c0:	d9400717 	ldw	r5,28(sp)
    83c4:	d9001617 	ldw	r4,88(sp)
    83c8:	100d883a 	mov	r6,r2
    83cc:	000ad3c0 	call	ad3c <__lshift>
    83d0:	d8800715 	stw	r2,28(sp)
    83d4:	d8c00a17 	ldw	r3,40(sp)
    83d8:	00c0050e 	bge	zero,r3,83f0 <_dtoa_r+0x8f4>
    83dc:	d9001617 	ldw	r4,88(sp)
    83e0:	900b883a 	mov	r5,r18
    83e4:	180d883a 	mov	r6,r3
    83e8:	000ad3c0 	call	ad3c <__lshift>
    83ec:	1025883a 	mov	r18,r2
    83f0:	d9000c17 	ldw	r4,48(sp)
    83f4:	2005003a 	cmpeq	r2,r4,zero
    83f8:	10016f26 	beq	r2,zero,89b8 <_dtoa_r+0xebc>
    83fc:	d9000f17 	ldw	r4,60(sp)
    8400:	0102170e 	bge	zero,r4,8c60 <_dtoa_r+0x1164>
    8404:	d9800b17 	ldw	r6,44(sp)
    8408:	3005003a 	cmpeq	r2,r6,zero
    840c:	1000881e 	bne	r2,zero,8630 <_dtoa_r+0xb34>
    8410:	0400050e 	bge	zero,r16,8428 <_dtoa_r+0x92c>
    8414:	d9001617 	ldw	r4,88(sp)
    8418:	980b883a 	mov	r5,r19
    841c:	800d883a 	mov	r6,r16
    8420:	000ad3c0 	call	ad3c <__lshift>
    8424:	1027883a 	mov	r19,r2
    8428:	8804c03a 	cmpne	r2,r17,zero
    842c:	1002541e 	bne	r2,zero,8d80 <_dtoa_r+0x1284>
    8430:	980b883a 	mov	r5,r19
    8434:	dd800517 	ldw	r22,20(sp)
    8438:	dcc00615 	stw	r19,24(sp)
    843c:	a700004c 	andi	fp,r20,1
    8440:	2827883a 	mov	r19,r5
    8444:	d9000717 	ldw	r4,28(sp)
    8448:	900b883a 	mov	r5,r18
    844c:	00078e40 	call	78e4 <quorem>
    8450:	d9000717 	ldw	r4,28(sp)
    8454:	d9400617 	ldw	r5,24(sp)
    8458:	1023883a 	mov	r17,r2
    845c:	8dc00c04 	addi	r23,r17,48
    8460:	000a5540 	call	a554 <__mcmp>
    8464:	d9001617 	ldw	r4,88(sp)
    8468:	900b883a 	mov	r5,r18
    846c:	980d883a 	mov	r6,r19
    8470:	1029883a 	mov	r20,r2
    8474:	000abb00 	call	abb0 <__mdiff>
    8478:	102b883a 	mov	r21,r2
    847c:	10800317 	ldw	r2,12(r2)
    8480:	1001281e 	bne	r2,zero,8924 <_dtoa_r+0xe28>
    8484:	d9000717 	ldw	r4,28(sp)
    8488:	a80b883a 	mov	r5,r21
    848c:	000a5540 	call	a554 <__mcmp>
    8490:	d9001617 	ldw	r4,88(sp)
    8494:	1021883a 	mov	r16,r2
    8498:	a80b883a 	mov	r5,r21
    849c:	000a3f80 	call	a3f8 <_Bfree>
    84a0:	8000041e 	bne	r16,zero,84b4 <_dtoa_r+0x9b8>
    84a4:	d8801717 	ldw	r2,92(sp)
    84a8:	1000021e 	bne	r2,zero,84b4 <_dtoa_r+0x9b8>
    84ac:	e004c03a 	cmpne	r2,fp,zero
    84b0:	10011726 	beq	r2,zero,8910 <_dtoa_r+0xe14>
    84b4:	a0010616 	blt	r20,zero,88d0 <_dtoa_r+0xdd4>
    84b8:	a000041e 	bne	r20,zero,84cc <_dtoa_r+0x9d0>
    84bc:	d8c01717 	ldw	r3,92(sp)
    84c0:	1800021e 	bne	r3,zero,84cc <_dtoa_r+0x9d0>
    84c4:	e004c03a 	cmpne	r2,fp,zero
    84c8:	10010126 	beq	r2,zero,88d0 <_dtoa_r+0xdd4>
    84cc:	04023d16 	blt	zero,r16,8dc4 <_dtoa_r+0x12c8>
    84d0:	b5c00005 	stb	r23,0(r22)
    84d4:	d9800517 	ldw	r6,20(sp)
    84d8:	d9000f17 	ldw	r4,60(sp)
    84dc:	b5800044 	addi	r22,r22,1
    84e0:	3105883a 	add	r2,r6,r4
    84e4:	b0806526 	beq	r22,r2,867c <_dtoa_r+0xb80>
    84e8:	d9400717 	ldw	r5,28(sp)
    84ec:	d9001617 	ldw	r4,88(sp)
    84f0:	01800284 	movi	r6,10
    84f4:	000f883a 	mov	r7,zero
    84f8:	000b0ac0 	call	b0ac <__multadd>
    84fc:	d8800715 	stw	r2,28(sp)
    8500:	d8800617 	ldw	r2,24(sp)
    8504:	14c10c26 	beq	r2,r19,8938 <_dtoa_r+0xe3c>
    8508:	d9400617 	ldw	r5,24(sp)
    850c:	d9001617 	ldw	r4,88(sp)
    8510:	01800284 	movi	r6,10
    8514:	000f883a 	mov	r7,zero
    8518:	000b0ac0 	call	b0ac <__multadd>
    851c:	d9001617 	ldw	r4,88(sp)
    8520:	980b883a 	mov	r5,r19
    8524:	01800284 	movi	r6,10
    8528:	000f883a 	mov	r7,zero
    852c:	d8800615 	stw	r2,24(sp)
    8530:	000b0ac0 	call	b0ac <__multadd>
    8534:	1027883a 	mov	r19,r2
    8538:	003fc206 	br	8444 <_dtoa_r+0x948>
    853c:	2445c83a 	sub	r2,r4,r17
    8540:	a088983a 	sll	r4,r20,r2
    8544:	003e4b06 	br	7e74 <_dtoa_r+0x378>
    8548:	01bfffc4 	movi	r6,-1
    854c:	00800044 	movi	r2,1
    8550:	d9800e15 	stw	r6,56(sp)
    8554:	d9800f15 	stw	r6,60(sp)
    8558:	d8800b15 	stw	r2,44(sp)
    855c:	d8c01617 	ldw	r3,88(sp)
    8560:	008005c4 	movi	r2,23
    8564:	18001115 	stw	zero,68(r3)
    8568:	1580082e 	bgeu	r2,r22,858c <_dtoa_r+0xa90>
    856c:	00c00104 	movi	r3,4
    8570:	0009883a 	mov	r4,zero
    8574:	18c7883a 	add	r3,r3,r3
    8578:	18800504 	addi	r2,r3,20
    857c:	21000044 	addi	r4,r4,1
    8580:	b0bffc2e 	bgeu	r22,r2,8574 <_dtoa_r+0xa78>
    8584:	d9801617 	ldw	r6,88(sp)
    8588:	31001115 	stw	r4,68(r6)
    858c:	dc000f17 	ldw	r16,60(sp)
    8590:	003e4b06 	br	7ec0 <_dtoa_r+0x3c4>
    8594:	d9801717 	ldw	r6,92(sp)
    8598:	0023883a 	mov	r17,zero
    859c:	31bfff04 	addi	r6,r6,-4
    85a0:	d9801715 	stw	r6,92(sp)
    85a4:	003df806 	br	7d88 <_dtoa_r+0x28c>
    85a8:	00800804 	movi	r2,32
    85ac:	10c9c83a 	sub	r4,r2,r3
    85b0:	00c00104 	movi	r3,4
    85b4:	19005a16 	blt	r3,r4,8720 <_dtoa_r+0xc24>
    85b8:	008000c4 	movi	r2,3
    85bc:	113f7e16 	blt	r2,r4,83b8 <_dtoa_r+0x8bc>
    85c0:	20800704 	addi	r2,r4,28
    85c4:	003f7506 	br	839c <_dtoa_r+0x8a0>
    85c8:	d9801717 	ldw	r6,92(sp)
    85cc:	00800044 	movi	r2,1
    85d0:	1180a10e 	bge	r2,r6,8858 <_dtoa_r+0xd5c>
    85d4:	d9800f17 	ldw	r6,60(sp)
    85d8:	d8c01017 	ldw	r3,64(sp)
    85dc:	30bfffc4 	addi	r2,r6,-1
    85e0:	1881c616 	blt	r3,r2,8cfc <_dtoa_r+0x1200>
    85e4:	18a5c83a 	sub	r18,r3,r2
    85e8:	d8800f17 	ldw	r2,60(sp)
    85ec:	10026216 	blt	r2,zero,8f78 <_dtoa_r+0x147c>
    85f0:	dc001117 	ldw	r16,68(sp)
    85f4:	1007883a 	mov	r3,r2
    85f8:	d9800a17 	ldw	r6,40(sp)
    85fc:	d8801117 	ldw	r2,68(sp)
    8600:	d9001617 	ldw	r4,88(sp)
    8604:	30cd883a 	add	r6,r6,r3
    8608:	10c5883a 	add	r2,r2,r3
    860c:	01400044 	movi	r5,1
    8610:	d9800a15 	stw	r6,40(sp)
    8614:	d8801115 	stw	r2,68(sp)
    8618:	000b0700 	call	b070 <__i2b>
    861c:	1027883a 	mov	r19,r2
    8620:	003f2506 	br	82b8 <_dtoa_r+0x7bc>
    8624:	00c00074 	movhi	r3,1
    8628:	18d2f904 	addi	r3,r3,19428
    862c:	003d6706 	br	7bcc <_dtoa_r+0xd0>
    8630:	dd800517 	ldw	r22,20(sp)
    8634:	04000044 	movi	r16,1
    8638:	00000706 	br	8658 <_dtoa_r+0xb5c>
    863c:	d9400717 	ldw	r5,28(sp)
    8640:	d9001617 	ldw	r4,88(sp)
    8644:	01800284 	movi	r6,10
    8648:	000f883a 	mov	r7,zero
    864c:	000b0ac0 	call	b0ac <__multadd>
    8650:	d8800715 	stw	r2,28(sp)
    8654:	84000044 	addi	r16,r16,1
    8658:	d9000717 	ldw	r4,28(sp)
    865c:	900b883a 	mov	r5,r18
    8660:	00078e40 	call	78e4 <quorem>
    8664:	15c00c04 	addi	r23,r2,48
    8668:	b5c00005 	stb	r23,0(r22)
    866c:	d8c00f17 	ldw	r3,60(sp)
    8670:	b5800044 	addi	r22,r22,1
    8674:	80fff116 	blt	r16,r3,863c <_dtoa_r+0xb40>
    8678:	d8000615 	stw	zero,24(sp)
    867c:	d9400717 	ldw	r5,28(sp)
    8680:	d9001617 	ldw	r4,88(sp)
    8684:	01800044 	movi	r6,1
    8688:	000ad3c0 	call	ad3c <__lshift>
    868c:	1009883a 	mov	r4,r2
    8690:	900b883a 	mov	r5,r18
    8694:	d8800715 	stw	r2,28(sp)
    8698:	000a5540 	call	a554 <__mcmp>
    869c:	00803c0e 	bge	zero,r2,8790 <_dtoa_r+0xc94>
    86a0:	b009883a 	mov	r4,r22
    86a4:	213fffc4 	addi	r4,r4,-1
    86a8:	21400003 	ldbu	r5,0(r4)
    86ac:	00800e44 	movi	r2,57
    86b0:	28c03fcc 	andi	r3,r5,255
    86b4:	18c0201c 	xori	r3,r3,128
    86b8:	18ffe004 	addi	r3,r3,-128
    86bc:	1881981e 	bne	r3,r2,8d20 <_dtoa_r+0x1224>
    86c0:	d9800517 	ldw	r6,20(sp)
    86c4:	21bff71e 	bne	r4,r6,86a4 <_dtoa_r+0xba8>
    86c8:	d8800d17 	ldw	r2,52(sp)
    86cc:	37000044 	addi	fp,r6,1
    86d0:	10800044 	addi	r2,r2,1
    86d4:	d8800d15 	stw	r2,52(sp)
    86d8:	00800c44 	movi	r2,49
    86dc:	30800005 	stb	r2,0(r6)
    86e0:	d9001617 	ldw	r4,88(sp)
    86e4:	900b883a 	mov	r5,r18
    86e8:	000a3f80 	call	a3f8 <_Bfree>
    86ec:	983ecd26 	beq	r19,zero,8224 <_dtoa_r+0x728>
    86f0:	d8c00617 	ldw	r3,24(sp)
    86f4:	18000426 	beq	r3,zero,8708 <_dtoa_r+0xc0c>
    86f8:	1cc00326 	beq	r3,r19,8708 <_dtoa_r+0xc0c>
    86fc:	d9001617 	ldw	r4,88(sp)
    8700:	180b883a 	mov	r5,r3
    8704:	000a3f80 	call	a3f8 <_Bfree>
    8708:	d9001617 	ldw	r4,88(sp)
    870c:	980b883a 	mov	r5,r19
    8710:	000a3f80 	call	a3f8 <_Bfree>
    8714:	003ec306 	br	8224 <_dtoa_r+0x728>
    8718:	1805883a 	mov	r2,r3
    871c:	003eeb06 	br	82cc <_dtoa_r+0x7d0>
    8720:	d9800a17 	ldw	r6,40(sp)
    8724:	d8c01117 	ldw	r3,68(sp)
    8728:	20bfff04 	addi	r2,r4,-4
    872c:	308d883a 	add	r6,r6,r2
    8730:	1887883a 	add	r3,r3,r2
    8734:	80a1883a 	add	r16,r16,r2
    8738:	d9800a15 	stw	r6,40(sp)
    873c:	d8c01115 	stw	r3,68(sp)
    8740:	003f1d06 	br	83b8 <_dtoa_r+0x8bc>
    8744:	a03f0c1e 	bne	r20,zero,8378 <_dtoa_r+0x87c>
    8748:	00800434 	movhi	r2,16
    874c:	10bfffc4 	addi	r2,r2,-1
    8750:	a884703a 	and	r2,r21,r2
    8754:	103f081e 	bne	r2,zero,8378 <_dtoa_r+0x87c>
    8758:	a89ffc2c 	andhi	r2,r21,32752
    875c:	103f0626 	beq	r2,zero,8378 <_dtoa_r+0x87c>
    8760:	d8c01117 	ldw	r3,68(sp)
    8764:	d9000a17 	ldw	r4,40(sp)
    8768:	18c00044 	addi	r3,r3,1
    876c:	21000044 	addi	r4,r4,1
    8770:	d8c01115 	stw	r3,68(sp)
    8774:	d9000a15 	stw	r4,40(sp)
    8778:	003f0006 	br	837c <_dtoa_r+0x880>
    877c:	d9400717 	ldw	r5,28(sp)
    8780:	d9001617 	ldw	r4,88(sp)
    8784:	000b1ac0 	call	b1ac <__pow5mult>
    8788:	d8800715 	stw	r2,28(sp)
    878c:	003eed06 	br	8344 <_dtoa_r+0x848>
    8790:	1000021e 	bne	r2,zero,879c <_dtoa_r+0xca0>
    8794:	b880004c 	andi	r2,r23,1
    8798:	103fc11e 	bne	r2,zero,86a0 <_dtoa_r+0xba4>
    879c:	b5bfffc4 	addi	r22,r22,-1
    87a0:	b0c00007 	ldb	r3,0(r22)
    87a4:	00800c04 	movi	r2,48
    87a8:	18bffc26 	beq	r3,r2,879c <_dtoa_r+0xca0>
    87ac:	b7000044 	addi	fp,r22,1
    87b0:	003fcb06 	br	86e0 <_dtoa_r+0xbe4>
    87b4:	d9800d17 	ldw	r6,52(sp)
    87b8:	018fc83a 	sub	r7,zero,r6
    87bc:	3801f726 	beq	r7,zero,8f9c <_dtoa_r+0x14a0>
    87c0:	398003cc 	andi	r6,r7,15
    87c4:	300c90fa 	slli	r6,r6,3
    87c8:	01400074 	movhi	r5,1
    87cc:	29532004 	addi	r5,r5,19584
    87d0:	d9001217 	ldw	r4,72(sp)
    87d4:	314d883a 	add	r6,r6,r5
    87d8:	30c00117 	ldw	r3,4(r6)
    87dc:	30800017 	ldw	r2,0(r6)
    87e0:	d9401317 	ldw	r5,76(sp)
    87e4:	3821d13a 	srai	r16,r7,4
    87e8:	100d883a 	mov	r6,r2
    87ec:	180f883a 	mov	r7,r3
    87f0:	00102e00 	call	102e0 <__muldf3>
    87f4:	1011883a 	mov	r8,r2
    87f8:	1813883a 	mov	r9,r3
    87fc:	1029883a 	mov	r20,r2
    8800:	182b883a 	mov	r21,r3
    8804:	8001e526 	beq	r16,zero,8f9c <_dtoa_r+0x14a0>
    8808:	05800084 	movi	r22,2
    880c:	04400074 	movhi	r17,1
    8810:	8c535204 	addi	r17,r17,19784
    8814:	8080004c 	andi	r2,r16,1
    8818:	1005003a 	cmpeq	r2,r2,zero
    881c:	1000081e 	bne	r2,zero,8840 <_dtoa_r+0xd44>
    8820:	89800017 	ldw	r6,0(r17)
    8824:	89c00117 	ldw	r7,4(r17)
    8828:	480b883a 	mov	r5,r9
    882c:	4009883a 	mov	r4,r8
    8830:	00102e00 	call	102e0 <__muldf3>
    8834:	1011883a 	mov	r8,r2
    8838:	b5800044 	addi	r22,r22,1
    883c:	1813883a 	mov	r9,r3
    8840:	8021d07a 	srai	r16,r16,1
    8844:	8c400204 	addi	r17,r17,8
    8848:	803ff21e 	bne	r16,zero,8814 <_dtoa_r+0xd18>
    884c:	4029883a 	mov	r20,r8
    8850:	482b883a 	mov	r21,r9
    8854:	003dca06 	br	7f80 <_dtoa_r+0x484>
    8858:	d9000817 	ldw	r4,32(sp)
    885c:	2005003a 	cmpeq	r2,r4,zero
    8860:	1001f61e 	bne	r2,zero,903c <_dtoa_r+0x1540>
    8864:	dc001117 	ldw	r16,68(sp)
    8868:	dc801017 	ldw	r18,64(sp)
    886c:	18c10cc4 	addi	r3,r3,1075
    8870:	003f6106 	br	85f8 <_dtoa_r+0xafc>
    8874:	d8000b15 	stw	zero,44(sp)
    8878:	d9802617 	ldw	r6,152(sp)
    887c:	d8c00d17 	ldw	r3,52(sp)
    8880:	30800044 	addi	r2,r6,1
    8884:	18ad883a 	add	r22,r3,r2
    8888:	b13fffc4 	addi	r4,r22,-1
    888c:	d9000e15 	stw	r4,56(sp)
    8890:	0581f60e 	bge	zero,r22,906c <_dtoa_r+0x1570>
    8894:	dd800f15 	stw	r22,60(sp)
    8898:	003f3006 	br	855c <_dtoa_r+0xa60>
    889c:	d8000b15 	stw	zero,44(sp)
    88a0:	d9002617 	ldw	r4,152(sp)
    88a4:	0101eb0e 	bge	zero,r4,9054 <_dtoa_r+0x1558>
    88a8:	202d883a 	mov	r22,r4
    88ac:	d9000e15 	stw	r4,56(sp)
    88b0:	d9000f15 	stw	r4,60(sp)
    88b4:	003f2906 	br	855c <_dtoa_r+0xa60>
    88b8:	01800044 	movi	r6,1
    88bc:	d9800b15 	stw	r6,44(sp)
    88c0:	003ff706 	br	88a0 <_dtoa_r+0xda4>
    88c4:	01000044 	movi	r4,1
    88c8:	d9000b15 	stw	r4,44(sp)
    88cc:	003fea06 	br	8878 <_dtoa_r+0xd7c>
    88d0:	04000c0e 	bge	zero,r16,8904 <_dtoa_r+0xe08>
    88d4:	d9400717 	ldw	r5,28(sp)
    88d8:	d9001617 	ldw	r4,88(sp)
    88dc:	01800044 	movi	r6,1
    88e0:	000ad3c0 	call	ad3c <__lshift>
    88e4:	1009883a 	mov	r4,r2
    88e8:	900b883a 	mov	r5,r18
    88ec:	d8800715 	stw	r2,28(sp)
    88f0:	000a5540 	call	a554 <__mcmp>
    88f4:	0081e00e 	bge	zero,r2,9078 <_dtoa_r+0x157c>
    88f8:	bdc00044 	addi	r23,r23,1
    88fc:	00800e84 	movi	r2,58
    8900:	b881a226 	beq	r23,r2,8f8c <_dtoa_r+0x1490>
    8904:	b7000044 	addi	fp,r22,1
    8908:	b5c00005 	stb	r23,0(r22)
    890c:	003f7406 	br	86e0 <_dtoa_r+0xbe4>
    8910:	00800e44 	movi	r2,57
    8914:	b8819d26 	beq	r23,r2,8f8c <_dtoa_r+0x1490>
    8918:	053ffa0e 	bge	zero,r20,8904 <_dtoa_r+0xe08>
    891c:	8dc00c44 	addi	r23,r17,49
    8920:	003ff806 	br	8904 <_dtoa_r+0xe08>
    8924:	d9001617 	ldw	r4,88(sp)
    8928:	a80b883a 	mov	r5,r21
    892c:	04000044 	movi	r16,1
    8930:	000a3f80 	call	a3f8 <_Bfree>
    8934:	003edf06 	br	84b4 <_dtoa_r+0x9b8>
    8938:	d9001617 	ldw	r4,88(sp)
    893c:	980b883a 	mov	r5,r19
    8940:	01800284 	movi	r6,10
    8944:	000f883a 	mov	r7,zero
    8948:	000b0ac0 	call	b0ac <__multadd>
    894c:	1027883a 	mov	r19,r2
    8950:	d8800615 	stw	r2,24(sp)
    8954:	003ebb06 	br	8444 <_dtoa_r+0x948>
    8958:	d9801117 	ldw	r6,68(sp)
    895c:	d8800d17 	ldw	r2,52(sp)
    8960:	d8000915 	stw	zero,36(sp)
    8964:	308dc83a 	sub	r6,r6,r2
    8968:	0087c83a 	sub	r3,zero,r2
    896c:	d9801115 	stw	r6,68(sp)
    8970:	d8c01015 	stw	r3,64(sp)
    8974:	003cfe06 	br	7d70 <_dtoa_r+0x274>
    8978:	018dc83a 	sub	r6,zero,r6
    897c:	d9801115 	stw	r6,68(sp)
    8980:	d8000a15 	stw	zero,40(sp)
    8984:	003cf306 	br	7d54 <_dtoa_r+0x258>
    8988:	d9000d17 	ldw	r4,52(sp)
    898c:	0010c2c0 	call	10c2c <__floatsidf>
    8990:	880b883a 	mov	r5,r17
    8994:	8009883a 	mov	r4,r16
    8998:	180f883a 	mov	r7,r3
    899c:	100d883a 	mov	r6,r2
    89a0:	00109840 	call	10984 <__nedf2>
    89a4:	103ce126 	beq	r2,zero,7d2c <_dtoa_r+0x230>
    89a8:	d9800d17 	ldw	r6,52(sp)
    89ac:	31bfffc4 	addi	r6,r6,-1
    89b0:	d9800d15 	stw	r6,52(sp)
    89b4:	003cdd06 	br	7d2c <_dtoa_r+0x230>
    89b8:	d9000717 	ldw	r4,28(sp)
    89bc:	900b883a 	mov	r5,r18
    89c0:	000a5540 	call	a554 <__mcmp>
    89c4:	103e8d0e 	bge	r2,zero,83fc <_dtoa_r+0x900>
    89c8:	d9400717 	ldw	r5,28(sp)
    89cc:	d9001617 	ldw	r4,88(sp)
    89d0:	01800284 	movi	r6,10
    89d4:	000f883a 	mov	r7,zero
    89d8:	000b0ac0 	call	b0ac <__multadd>
    89dc:	d9800d17 	ldw	r6,52(sp)
    89e0:	d8800715 	stw	r2,28(sp)
    89e4:	31bfffc4 	addi	r6,r6,-1
    89e8:	d9800d15 	stw	r6,52(sp)
    89ec:	b001a71e 	bne	r22,zero,908c <_dtoa_r+0x1590>
    89f0:	d8800e17 	ldw	r2,56(sp)
    89f4:	d8800f15 	stw	r2,60(sp)
    89f8:	003e8006 	br	83fc <_dtoa_r+0x900>
    89fc:	90800417 	ldw	r2,16(r18)
    8a00:	1085883a 	add	r2,r2,r2
    8a04:	1085883a 	add	r2,r2,r2
    8a08:	1485883a 	add	r2,r2,r18
    8a0c:	11000417 	ldw	r4,16(r2)
    8a10:	000a4200 	call	a420 <__hi0bits>
    8a14:	00c00804 	movi	r3,32
    8a18:	1887c83a 	sub	r3,r3,r2
    8a1c:	003e5a06 	br	8388 <_dtoa_r+0x88c>
    8a20:	d9400717 	ldw	r5,28(sp)
    8a24:	d9801017 	ldw	r6,64(sp)
    8a28:	d9001617 	ldw	r4,88(sp)
    8a2c:	000b1ac0 	call	b1ac <__pow5mult>
    8a30:	d8800715 	stw	r2,28(sp)
    8a34:	003e4306 	br	8344 <_dtoa_r+0x848>
    8a38:	d9800f17 	ldw	r6,60(sp)
    8a3c:	d8800d17 	ldw	r2,52(sp)
    8a40:	d9800315 	stw	r6,12(sp)
    8a44:	d8800415 	stw	r2,16(sp)
    8a48:	d8c00b17 	ldw	r3,44(sp)
    8a4c:	1805003a 	cmpeq	r2,r3,zero
    8a50:	1000e21e 	bne	r2,zero,8ddc <_dtoa_r+0x12e0>
    8a54:	d9000317 	ldw	r4,12(sp)
    8a58:	0005883a 	mov	r2,zero
    8a5c:	00cff834 	movhi	r3,16352
    8a60:	200c90fa 	slli	r6,r4,3
    8a64:	01000074 	movhi	r4,1
    8a68:	21132004 	addi	r4,r4,19584
    8a6c:	180b883a 	mov	r5,r3
    8a70:	310d883a 	add	r6,r6,r4
    8a74:	327fff17 	ldw	r9,-4(r6)
    8a78:	323ffe17 	ldw	r8,-8(r6)
    8a7c:	1009883a 	mov	r4,r2
    8a80:	480f883a 	mov	r7,r9
    8a84:	400d883a 	mov	r6,r8
    8a88:	00106a40 	call	106a4 <__divdf3>
    8a8c:	180b883a 	mov	r5,r3
    8a90:	b00d883a 	mov	r6,r22
    8a94:	b80f883a 	mov	r7,r23
    8a98:	1009883a 	mov	r4,r2
    8a9c:	00101ec0 	call	101ec <__subdf3>
    8aa0:	a80b883a 	mov	r5,r21
    8aa4:	a009883a 	mov	r4,r20
    8aa8:	d8c01915 	stw	r3,100(sp)
    8aac:	d8801815 	stw	r2,96(sp)
    8ab0:	0010d240 	call	10d24 <__fixdfsi>
    8ab4:	1009883a 	mov	r4,r2
    8ab8:	1027883a 	mov	r19,r2
    8abc:	0010c2c0 	call	10c2c <__floatsidf>
    8ac0:	a80b883a 	mov	r5,r21
    8ac4:	a009883a 	mov	r4,r20
    8ac8:	180f883a 	mov	r7,r3
    8acc:	100d883a 	mov	r6,r2
    8ad0:	00101ec0 	call	101ec <__subdf3>
    8ad4:	d9801817 	ldw	r6,96(sp)
    8ad8:	1823883a 	mov	r17,r3
    8adc:	d8801415 	stw	r2,80(sp)
    8ae0:	302d883a 	mov	r22,r6
    8ae4:	d9800517 	ldw	r6,20(sp)
    8ae8:	9cc00c04 	addi	r19,r19,48
    8aec:	dc401515 	stw	r17,84(sp)
    8af0:	d8c01917 	ldw	r3,100(sp)
    8af4:	34c00005 	stb	r19,0(r6)
    8af8:	d8800517 	ldw	r2,20(sp)
    8afc:	d9401917 	ldw	r5,100(sp)
    8b00:	d9801417 	ldw	r6,80(sp)
    8b04:	b009883a 	mov	r4,r22
    8b08:	880f883a 	mov	r7,r17
    8b0c:	182f883a 	mov	r23,r3
    8b10:	17000044 	addi	fp,r2,1
    8b14:	0010a0c0 	call	10a0c <__gtdf2>
    8b18:	00804e16 	blt	zero,r2,8c54 <_dtoa_r+0x1158>
    8b1c:	d9801417 	ldw	r6,80(sp)
    8b20:	0005883a 	mov	r2,zero
    8b24:	00cffc34 	movhi	r3,16368
    8b28:	180b883a 	mov	r5,r3
    8b2c:	880f883a 	mov	r7,r17
    8b30:	1009883a 	mov	r4,r2
    8b34:	00101ec0 	call	101ec <__subdf3>
    8b38:	d9401917 	ldw	r5,100(sp)
    8b3c:	180f883a 	mov	r7,r3
    8b40:	b009883a 	mov	r4,r22
    8b44:	100d883a 	mov	r6,r2
    8b48:	0010a0c0 	call	10a0c <__gtdf2>
    8b4c:	00bda216 	blt	zero,r2,81d8 <_dtoa_r+0x6dc>
    8b50:	d8c00317 	ldw	r3,12(sp)
    8b54:	00800044 	movi	r2,1
    8b58:	10c01216 	blt	r2,r3,8ba4 <_dtoa_r+0x10a8>
    8b5c:	003d4506 	br	8074 <_dtoa_r+0x578>
    8b60:	d9801417 	ldw	r6,80(sp)
    8b64:	0005883a 	mov	r2,zero
    8b68:	00cffc34 	movhi	r3,16368
    8b6c:	180b883a 	mov	r5,r3
    8b70:	880f883a 	mov	r7,r17
    8b74:	1009883a 	mov	r4,r2
    8b78:	00101ec0 	call	101ec <__subdf3>
    8b7c:	d9c01b17 	ldw	r7,108(sp)
    8b80:	180b883a 	mov	r5,r3
    8b84:	1009883a 	mov	r4,r2
    8b88:	b00d883a 	mov	r6,r22
    8b8c:	0010b1c0 	call	10b1c <__ltdf2>
    8b90:	103d9116 	blt	r2,zero,81d8 <_dtoa_r+0x6dc>
    8b94:	d9800517 	ldw	r6,20(sp)
    8b98:	d9000317 	ldw	r4,12(sp)
    8b9c:	3105883a 	add	r2,r6,r4
    8ba0:	e0bd3426 	beq	fp,r2,8074 <_dtoa_r+0x578>
    8ba4:	04500934 	movhi	r17,16420
    8ba8:	0021883a 	mov	r16,zero
    8bac:	b80b883a 	mov	r5,r23
    8bb0:	b009883a 	mov	r4,r22
    8bb4:	800d883a 	mov	r6,r16
    8bb8:	880f883a 	mov	r7,r17
    8bbc:	00102e00 	call	102e0 <__muldf3>
    8bc0:	d9401517 	ldw	r5,84(sp)
    8bc4:	d9001417 	ldw	r4,80(sp)
    8bc8:	880f883a 	mov	r7,r17
    8bcc:	000d883a 	mov	r6,zero
    8bd0:	d8801a15 	stw	r2,104(sp)
    8bd4:	d8c01b15 	stw	r3,108(sp)
    8bd8:	00102e00 	call	102e0 <__muldf3>
    8bdc:	180b883a 	mov	r5,r3
    8be0:	1009883a 	mov	r4,r2
    8be4:	1823883a 	mov	r17,r3
    8be8:	1021883a 	mov	r16,r2
    8bec:	0010d240 	call	10d24 <__fixdfsi>
    8bf0:	1009883a 	mov	r4,r2
    8bf4:	102b883a 	mov	r21,r2
    8bf8:	0010c2c0 	call	10c2c <__floatsidf>
    8bfc:	880b883a 	mov	r5,r17
    8c00:	8009883a 	mov	r4,r16
    8c04:	180f883a 	mov	r7,r3
    8c08:	100d883a 	mov	r6,r2
    8c0c:	00101ec0 	call	101ec <__subdf3>
    8c10:	1021883a 	mov	r16,r2
    8c14:	d9001b17 	ldw	r4,108(sp)
    8c18:	1823883a 	mov	r17,r3
    8c1c:	dc001415 	stw	r16,80(sp)
    8c20:	ad400c04 	addi	r21,r21,48
    8c24:	dc401515 	stw	r17,84(sp)
    8c28:	d8801a17 	ldw	r2,104(sp)
    8c2c:	e5400005 	stb	r21,0(fp)
    8c30:	202f883a 	mov	r23,r4
    8c34:	d9c01b17 	ldw	r7,108(sp)
    8c38:	d9001417 	ldw	r4,80(sp)
    8c3c:	880b883a 	mov	r5,r17
    8c40:	100d883a 	mov	r6,r2
    8c44:	102d883a 	mov	r22,r2
    8c48:	e7000044 	addi	fp,fp,1
    8c4c:	0010b1c0 	call	10b1c <__ltdf2>
    8c50:	103fc30e 	bge	r2,zero,8b60 <_dtoa_r+0x1064>
    8c54:	d9000417 	ldw	r4,16(sp)
    8c58:	d9000d15 	stw	r4,52(sp)
    8c5c:	003d7106 	br	8224 <_dtoa_r+0x728>
    8c60:	d9801717 	ldw	r6,92(sp)
    8c64:	00800084 	movi	r2,2
    8c68:	11bde60e 	bge	r2,r6,8404 <_dtoa_r+0x908>
    8c6c:	203cfb1e 	bne	r4,zero,805c <_dtoa_r+0x560>
    8c70:	d9001617 	ldw	r4,88(sp)
    8c74:	900b883a 	mov	r5,r18
    8c78:	01800144 	movi	r6,5
    8c7c:	000f883a 	mov	r7,zero
    8c80:	000b0ac0 	call	b0ac <__multadd>
    8c84:	d9000717 	ldw	r4,28(sp)
    8c88:	100b883a 	mov	r5,r2
    8c8c:	1025883a 	mov	r18,r2
    8c90:	000a5540 	call	a554 <__mcmp>
    8c94:	00bcf10e 	bge	zero,r2,805c <_dtoa_r+0x560>
    8c98:	d8c00d17 	ldw	r3,52(sp)
    8c9c:	d9000517 	ldw	r4,20(sp)
    8ca0:	d8000615 	stw	zero,24(sp)
    8ca4:	18c00044 	addi	r3,r3,1
    8ca8:	d8c00d15 	stw	r3,52(sp)
    8cac:	00800c44 	movi	r2,49
    8cb0:	27000044 	addi	fp,r4,1
    8cb4:	20800005 	stb	r2,0(r4)
    8cb8:	003e8906 	br	86e0 <_dtoa_r+0xbe4>
    8cbc:	d8c00517 	ldw	r3,20(sp)
    8cc0:	003bc206 	br	7bcc <_dtoa_r+0xd0>
    8cc4:	01800074 	movhi	r6,1
    8cc8:	31935204 	addi	r6,r6,19784
    8ccc:	30c00917 	ldw	r3,36(r6)
    8cd0:	30800817 	ldw	r2,32(r6)
    8cd4:	d9001217 	ldw	r4,72(sp)
    8cd8:	d9401317 	ldw	r5,76(sp)
    8cdc:	180f883a 	mov	r7,r3
    8ce0:	100d883a 	mov	r6,r2
    8ce4:	00106a40 	call	106a4 <__divdf3>
    8ce8:	948003cc 	andi	r18,r18,15
    8cec:	058000c4 	movi	r22,3
    8cf0:	1029883a 	mov	r20,r2
    8cf4:	182b883a 	mov	r21,r3
    8cf8:	003c8906 	br	7f20 <_dtoa_r+0x424>
    8cfc:	d9001017 	ldw	r4,64(sp)
    8d00:	d9800917 	ldw	r6,36(sp)
    8d04:	0025883a 	mov	r18,zero
    8d08:	1105c83a 	sub	r2,r2,r4
    8d0c:	2089883a 	add	r4,r4,r2
    8d10:	308d883a 	add	r6,r6,r2
    8d14:	d9001015 	stw	r4,64(sp)
    8d18:	d9800915 	stw	r6,36(sp)
    8d1c:	003e3206 	br	85e8 <_dtoa_r+0xaec>
    8d20:	28800044 	addi	r2,r5,1
    8d24:	27000044 	addi	fp,r4,1
    8d28:	20800005 	stb	r2,0(r4)
    8d2c:	003e6c06 	br	86e0 <_dtoa_r+0xbe4>
    8d30:	d8800f17 	ldw	r2,60(sp)
    8d34:	00bce016 	blt	zero,r2,80b8 <_dtoa_r+0x5bc>
    8d38:	d9800f17 	ldw	r6,60(sp)
    8d3c:	303cc51e 	bne	r6,zero,8054 <_dtoa_r+0x558>
    8d40:	0005883a 	mov	r2,zero
    8d44:	00d00534 	movhi	r3,16404
    8d48:	980b883a 	mov	r5,r19
    8d4c:	180f883a 	mov	r7,r3
    8d50:	9009883a 	mov	r4,r18
    8d54:	100d883a 	mov	r6,r2
    8d58:	00102e00 	call	102e0 <__muldf3>
    8d5c:	180b883a 	mov	r5,r3
    8d60:	a80f883a 	mov	r7,r21
    8d64:	1009883a 	mov	r4,r2
    8d68:	a00d883a 	mov	r6,r20
    8d6c:	0010a940 	call	10a94 <__gedf2>
    8d70:	103cb80e 	bge	r2,zero,8054 <_dtoa_r+0x558>
    8d74:	0027883a 	mov	r19,zero
    8d78:	0025883a 	mov	r18,zero
    8d7c:	003fc606 	br	8c98 <_dtoa_r+0x119c>
    8d80:	99400117 	ldw	r5,4(r19)
    8d84:	d9001617 	ldw	r4,88(sp)
    8d88:	000a9780 	call	a978 <_Balloc>
    8d8c:	99800417 	ldw	r6,16(r19)
    8d90:	11000304 	addi	r4,r2,12
    8d94:	99400304 	addi	r5,r19,12
    8d98:	318d883a 	add	r6,r6,r6
    8d9c:	318d883a 	add	r6,r6,r6
    8da0:	31800204 	addi	r6,r6,8
    8da4:	1023883a 	mov	r17,r2
    8da8:	00035c00 	call	35c0 <memcpy>
    8dac:	d9001617 	ldw	r4,88(sp)
    8db0:	880b883a 	mov	r5,r17
    8db4:	01800044 	movi	r6,1
    8db8:	000ad3c0 	call	ad3c <__lshift>
    8dbc:	100b883a 	mov	r5,r2
    8dc0:	003d9c06 	br	8434 <_dtoa_r+0x938>
    8dc4:	00800e44 	movi	r2,57
    8dc8:	b8807026 	beq	r23,r2,8f8c <_dtoa_r+0x1490>
    8dcc:	b8800044 	addi	r2,r23,1
    8dd0:	b7000044 	addi	fp,r22,1
    8dd4:	b0800005 	stb	r2,0(r22)
    8dd8:	003e4106 	br	86e0 <_dtoa_r+0xbe4>
    8ddc:	d8800317 	ldw	r2,12(sp)
    8de0:	01800074 	movhi	r6,1
    8de4:	31932004 	addi	r6,r6,19584
    8de8:	b009883a 	mov	r4,r22
    8dec:	100e90fa 	slli	r7,r2,3
    8df0:	b80b883a 	mov	r5,r23
    8df4:	398f883a 	add	r7,r7,r6
    8df8:	38bffe17 	ldw	r2,-8(r7)
    8dfc:	d9800517 	ldw	r6,20(sp)
    8e00:	38ffff17 	ldw	r3,-4(r7)
    8e04:	37000044 	addi	fp,r6,1
    8e08:	180f883a 	mov	r7,r3
    8e0c:	100d883a 	mov	r6,r2
    8e10:	00102e00 	call	102e0 <__muldf3>
    8e14:	a80b883a 	mov	r5,r21
    8e18:	a009883a 	mov	r4,r20
    8e1c:	182f883a 	mov	r23,r3
    8e20:	102d883a 	mov	r22,r2
    8e24:	0010d240 	call	10d24 <__fixdfsi>
    8e28:	1009883a 	mov	r4,r2
    8e2c:	1027883a 	mov	r19,r2
    8e30:	0010c2c0 	call	10c2c <__floatsidf>
    8e34:	a80b883a 	mov	r5,r21
    8e38:	a009883a 	mov	r4,r20
    8e3c:	180f883a 	mov	r7,r3
    8e40:	100d883a 	mov	r6,r2
    8e44:	00101ec0 	call	101ec <__subdf3>
    8e48:	180b883a 	mov	r5,r3
    8e4c:	d8c00517 	ldw	r3,20(sp)
    8e50:	9cc00c04 	addi	r19,r19,48
    8e54:	1009883a 	mov	r4,r2
    8e58:	1cc00005 	stb	r19,0(r3)
    8e5c:	2021883a 	mov	r16,r4
    8e60:	d9000317 	ldw	r4,12(sp)
    8e64:	00800044 	movi	r2,1
    8e68:	2823883a 	mov	r17,r5
    8e6c:	20802226 	beq	r4,r2,8ef8 <_dtoa_r+0x13fc>
    8e70:	1029883a 	mov	r20,r2
    8e74:	0005883a 	mov	r2,zero
    8e78:	00d00934 	movhi	r3,16420
    8e7c:	180f883a 	mov	r7,r3
    8e80:	100d883a 	mov	r6,r2
    8e84:	880b883a 	mov	r5,r17
    8e88:	8009883a 	mov	r4,r16
    8e8c:	00102e00 	call	102e0 <__muldf3>
    8e90:	180b883a 	mov	r5,r3
    8e94:	1009883a 	mov	r4,r2
    8e98:	1823883a 	mov	r17,r3
    8e9c:	1021883a 	mov	r16,r2
    8ea0:	0010d240 	call	10d24 <__fixdfsi>
    8ea4:	1009883a 	mov	r4,r2
    8ea8:	102b883a 	mov	r21,r2
    8eac:	0010c2c0 	call	10c2c <__floatsidf>
    8eb0:	880b883a 	mov	r5,r17
    8eb4:	8009883a 	mov	r4,r16
    8eb8:	180f883a 	mov	r7,r3
    8ebc:	100d883a 	mov	r6,r2
    8ec0:	00101ec0 	call	101ec <__subdf3>
    8ec4:	180b883a 	mov	r5,r3
    8ec8:	d8c00517 	ldw	r3,20(sp)
    8ecc:	1009883a 	mov	r4,r2
    8ed0:	ad400c04 	addi	r21,r21,48
    8ed4:	1d05883a 	add	r2,r3,r20
    8ed8:	15400005 	stb	r21,0(r2)
    8edc:	2021883a 	mov	r16,r4
    8ee0:	d9000317 	ldw	r4,12(sp)
    8ee4:	a5000044 	addi	r20,r20,1
    8ee8:	2823883a 	mov	r17,r5
    8eec:	a13fe11e 	bne	r20,r4,8e74 <_dtoa_r+0x1378>
    8ef0:	e505883a 	add	r2,fp,r20
    8ef4:	173fffc4 	addi	fp,r2,-1
    8ef8:	0025883a 	mov	r18,zero
    8efc:	04cff834 	movhi	r19,16352
    8f00:	b009883a 	mov	r4,r22
    8f04:	b80b883a 	mov	r5,r23
    8f08:	900d883a 	mov	r6,r18
    8f0c:	980f883a 	mov	r7,r19
    8f10:	001026c0 	call	1026c <__adddf3>
    8f14:	180b883a 	mov	r5,r3
    8f18:	1009883a 	mov	r4,r2
    8f1c:	800d883a 	mov	r6,r16
    8f20:	880f883a 	mov	r7,r17
    8f24:	0010b1c0 	call	10b1c <__ltdf2>
    8f28:	103cab16 	blt	r2,zero,81d8 <_dtoa_r+0x6dc>
    8f2c:	0009883a 	mov	r4,zero
    8f30:	980b883a 	mov	r5,r19
    8f34:	b80f883a 	mov	r7,r23
    8f38:	b00d883a 	mov	r6,r22
    8f3c:	00101ec0 	call	101ec <__subdf3>
    8f40:	180b883a 	mov	r5,r3
    8f44:	880f883a 	mov	r7,r17
    8f48:	1009883a 	mov	r4,r2
    8f4c:	800d883a 	mov	r6,r16
    8f50:	0010a0c0 	call	10a0c <__gtdf2>
    8f54:	00bc470e 	bge	zero,r2,8074 <_dtoa_r+0x578>
    8f58:	00c00c04 	movi	r3,48
    8f5c:	e73fffc4 	addi	fp,fp,-1
    8f60:	e0800007 	ldb	r2,0(fp)
    8f64:	10fffd26 	beq	r2,r3,8f5c <_dtoa_r+0x1460>
    8f68:	d9800417 	ldw	r6,16(sp)
    8f6c:	e7000044 	addi	fp,fp,1
    8f70:	d9800d15 	stw	r6,52(sp)
    8f74:	003cab06 	br	8224 <_dtoa_r+0x728>
    8f78:	d8c00f17 	ldw	r3,60(sp)
    8f7c:	d9001117 	ldw	r4,68(sp)
    8f80:	20e1c83a 	sub	r16,r4,r3
    8f84:	0007883a 	mov	r3,zero
    8f88:	003d9b06 	br	85f8 <_dtoa_r+0xafc>
    8f8c:	00800e44 	movi	r2,57
    8f90:	b0800005 	stb	r2,0(r22)
    8f94:	b5800044 	addi	r22,r22,1
    8f98:	003dc106 	br	86a0 <_dtoa_r+0xba4>
    8f9c:	05800084 	movi	r22,2
    8fa0:	003bf706 	br	7f80 <_dtoa_r+0x484>
    8fa4:	d9000f17 	ldw	r4,60(sp)
    8fa8:	013c000e 	bge	zero,r4,7fac <_dtoa_r+0x4b0>
    8fac:	d9800e17 	ldw	r6,56(sp)
    8fb0:	01bc300e 	bge	zero,r6,8074 <_dtoa_r+0x578>
    8fb4:	0005883a 	mov	r2,zero
    8fb8:	00d00934 	movhi	r3,16420
    8fbc:	a80b883a 	mov	r5,r21
    8fc0:	180f883a 	mov	r7,r3
    8fc4:	a009883a 	mov	r4,r20
    8fc8:	100d883a 	mov	r6,r2
    8fcc:	00102e00 	call	102e0 <__muldf3>
    8fd0:	b1000044 	addi	r4,r22,1
    8fd4:	1021883a 	mov	r16,r2
    8fd8:	1823883a 	mov	r17,r3
    8fdc:	0010c2c0 	call	10c2c <__floatsidf>
    8fe0:	880b883a 	mov	r5,r17
    8fe4:	8009883a 	mov	r4,r16
    8fe8:	180f883a 	mov	r7,r3
    8fec:	100d883a 	mov	r6,r2
    8ff0:	00102e00 	call	102e0 <__muldf3>
    8ff4:	0011883a 	mov	r8,zero
    8ff8:	02500734 	movhi	r9,16412
    8ffc:	180b883a 	mov	r5,r3
    9000:	480f883a 	mov	r7,r9
    9004:	1009883a 	mov	r4,r2
    9008:	400d883a 	mov	r6,r8
    900c:	001026c0 	call	1026c <__adddf3>
    9010:	102d883a 	mov	r22,r2
    9014:	00bf3034 	movhi	r2,64704
    9018:	10ef883a 	add	r23,r2,r3
    901c:	d8800d17 	ldw	r2,52(sp)
    9020:	d8c00e17 	ldw	r3,56(sp)
    9024:	8029883a 	mov	r20,r16
    9028:	10bfffc4 	addi	r2,r2,-1
    902c:	882b883a 	mov	r21,r17
    9030:	d8800415 	stw	r2,16(sp)
    9034:	d8c00315 	stw	r3,12(sp)
    9038:	003e8306 	br	8a48 <_dtoa_r+0xf4c>
    903c:	d8800117 	ldw	r2,4(sp)
    9040:	dc001117 	ldw	r16,68(sp)
    9044:	dc801017 	ldw	r18,64(sp)
    9048:	00c00d84 	movi	r3,54
    904c:	1887c83a 	sub	r3,r3,r2
    9050:	003d6906 	br	85f8 <_dtoa_r+0xafc>
    9054:	01800044 	movi	r6,1
    9058:	3021883a 	mov	r16,r6
    905c:	d9800f15 	stw	r6,60(sp)
    9060:	d9802615 	stw	r6,152(sp)
    9064:	d9800e15 	stw	r6,56(sp)
    9068:	003b9306 	br	7eb8 <_dtoa_r+0x3bc>
    906c:	b021883a 	mov	r16,r22
    9070:	dd800f15 	stw	r22,60(sp)
    9074:	003b9006 	br	7eb8 <_dtoa_r+0x3bc>
    9078:	103e221e 	bne	r2,zero,8904 <_dtoa_r+0xe08>
    907c:	b880004c 	andi	r2,r23,1
    9080:	1005003a 	cmpeq	r2,r2,zero
    9084:	103e1f1e 	bne	r2,zero,8904 <_dtoa_r+0xe08>
    9088:	003e1b06 	br	88f8 <_dtoa_r+0xdfc>
    908c:	d9001617 	ldw	r4,88(sp)
    9090:	980b883a 	mov	r5,r19
    9094:	01800284 	movi	r6,10
    9098:	000f883a 	mov	r7,zero
    909c:	000b0ac0 	call	b0ac <__multadd>
    90a0:	d8c00e17 	ldw	r3,56(sp)
    90a4:	1027883a 	mov	r19,r2
    90a8:	d8c00f15 	stw	r3,60(sp)
    90ac:	003cd306 	br	83fc <_dtoa_r+0x900>

000090b0 <_fclose_r>:
    90b0:	defffc04 	addi	sp,sp,-16
    90b4:	dc400115 	stw	r17,4(sp)
    90b8:	dc000015 	stw	r16,0(sp)
    90bc:	dfc00315 	stw	ra,12(sp)
    90c0:	dc800215 	stw	r18,8(sp)
    90c4:	2821883a 	mov	r16,r5
    90c8:	2023883a 	mov	r17,r4
    90cc:	28002926 	beq	r5,zero,9174 <_fclose_r+0xc4>
    90d0:	00029b40 	call	29b4 <__sfp_lock_acquire>
    90d4:	88000226 	beq	r17,zero,90e0 <_fclose_r+0x30>
    90d8:	88800e17 	ldw	r2,56(r17)
    90dc:	10002d26 	beq	r2,zero,9194 <_fclose_r+0xe4>
    90e0:	8080030f 	ldh	r2,12(r16)
    90e4:	10002226 	beq	r2,zero,9170 <_fclose_r+0xc0>
    90e8:	8809883a 	mov	r4,r17
    90ec:	800b883a 	mov	r5,r16
    90f0:	00091d40 	call	91d4 <_fflush_r>
    90f4:	1025883a 	mov	r18,r2
    90f8:	80800b17 	ldw	r2,44(r16)
    90fc:	10000426 	beq	r2,zero,9110 <_fclose_r+0x60>
    9100:	81400717 	ldw	r5,28(r16)
    9104:	8809883a 	mov	r4,r17
    9108:	103ee83a 	callr	r2
    910c:	10002a16 	blt	r2,zero,91b8 <_fclose_r+0x108>
    9110:	8080030b 	ldhu	r2,12(r16)
    9114:	1080200c 	andi	r2,r2,128
    9118:	1000231e 	bne	r2,zero,91a8 <_fclose_r+0xf8>
    911c:	81400c17 	ldw	r5,48(r16)
    9120:	28000526 	beq	r5,zero,9138 <_fclose_r+0x88>
    9124:	80801004 	addi	r2,r16,64
    9128:	28800226 	beq	r5,r2,9134 <_fclose_r+0x84>
    912c:	8809883a 	mov	r4,r17
    9130:	000976c0 	call	976c <_free_r>
    9134:	80000c15 	stw	zero,48(r16)
    9138:	81401117 	ldw	r5,68(r16)
    913c:	28000326 	beq	r5,zero,914c <_fclose_r+0x9c>
    9140:	8809883a 	mov	r4,r17
    9144:	000976c0 	call	976c <_free_r>
    9148:	80001115 	stw	zero,68(r16)
    914c:	8000030d 	sth	zero,12(r16)
    9150:	00029b80 	call	29b8 <__sfp_lock_release>
    9154:	9005883a 	mov	r2,r18
    9158:	dfc00317 	ldw	ra,12(sp)
    915c:	dc800217 	ldw	r18,8(sp)
    9160:	dc400117 	ldw	r17,4(sp)
    9164:	dc000017 	ldw	r16,0(sp)
    9168:	dec00404 	addi	sp,sp,16
    916c:	f800283a 	ret
    9170:	00029b80 	call	29b8 <__sfp_lock_release>
    9174:	0025883a 	mov	r18,zero
    9178:	9005883a 	mov	r2,r18
    917c:	dfc00317 	ldw	ra,12(sp)
    9180:	dc800217 	ldw	r18,8(sp)
    9184:	dc400117 	ldw	r17,4(sp)
    9188:	dc000017 	ldw	r16,0(sp)
    918c:	dec00404 	addi	sp,sp,16
    9190:	f800283a 	ret
    9194:	8809883a 	mov	r4,r17
    9198:	00029c40 	call	29c4 <__sinit>
    919c:	8080030f 	ldh	r2,12(r16)
    91a0:	103fd11e 	bne	r2,zero,90e8 <_fclose_r+0x38>
    91a4:	003ff206 	br	9170 <_fclose_r+0xc0>
    91a8:	81400417 	ldw	r5,16(r16)
    91ac:	8809883a 	mov	r4,r17
    91b0:	000976c0 	call	976c <_free_r>
    91b4:	003fd906 	br	911c <_fclose_r+0x6c>
    91b8:	04bfffc4 	movi	r18,-1
    91bc:	003fd406 	br	9110 <_fclose_r+0x60>

000091c0 <fclose>:
    91c0:	00800074 	movhi	r2,1
    91c4:	109a7d04 	addi	r2,r2,27124
    91c8:	200b883a 	mov	r5,r4
    91cc:	11000017 	ldw	r4,0(r2)
    91d0:	00090b01 	jmpi	90b0 <_fclose_r>

000091d4 <_fflush_r>:
    91d4:	defffb04 	addi	sp,sp,-20
    91d8:	dcc00315 	stw	r19,12(sp)
    91dc:	dc800215 	stw	r18,8(sp)
    91e0:	dfc00415 	stw	ra,16(sp)
    91e4:	dc400115 	stw	r17,4(sp)
    91e8:	dc000015 	stw	r16,0(sp)
    91ec:	2027883a 	mov	r19,r4
    91f0:	2825883a 	mov	r18,r5
    91f4:	20000226 	beq	r4,zero,9200 <_fflush_r+0x2c>
    91f8:	20800e17 	ldw	r2,56(r4)
    91fc:	10005626 	beq	r2,zero,9358 <_fflush_r+0x184>
    9200:	9100030b 	ldhu	r4,12(r18)
    9204:	20ffffcc 	andi	r3,r4,65535
    9208:	18e0001c 	xori	r3,r3,32768
    920c:	18e00004 	addi	r3,r3,-32768
    9210:	1880020c 	andi	r2,r3,8
    9214:	1000261e 	bne	r2,zero,92b0 <_fflush_r+0xdc>
    9218:	90c00117 	ldw	r3,4(r18)
    921c:	20820014 	ori	r2,r4,2048
    9220:	9080030d 	sth	r2,12(r18)
    9224:	1009883a 	mov	r4,r2
    9228:	00c0400e 	bge	zero,r3,932c <_fflush_r+0x158>
    922c:	92000a17 	ldw	r8,40(r18)
    9230:	40004026 	beq	r8,zero,9334 <_fflush_r+0x160>
    9234:	2084000c 	andi	r2,r4,4096
    9238:	10005326 	beq	r2,zero,9388 <_fflush_r+0x1b4>
    923c:	94001417 	ldw	r16,80(r18)
    9240:	9080030b 	ldhu	r2,12(r18)
    9244:	1080010c 	andi	r2,r2,4
    9248:	1000481e 	bne	r2,zero,936c <_fflush_r+0x198>
    924c:	91400717 	ldw	r5,28(r18)
    9250:	9809883a 	mov	r4,r19
    9254:	800d883a 	mov	r6,r16
    9258:	000f883a 	mov	r7,zero
    925c:	403ee83a 	callr	r8
    9260:	8080261e 	bne	r16,r2,92fc <_fflush_r+0x128>
    9264:	9080030b 	ldhu	r2,12(r18)
    9268:	91000417 	ldw	r4,16(r18)
    926c:	90000115 	stw	zero,4(r18)
    9270:	10bdffcc 	andi	r2,r2,63487
    9274:	10ffffcc 	andi	r3,r2,65535
    9278:	18c4000c 	andi	r3,r3,4096
    927c:	9080030d 	sth	r2,12(r18)
    9280:	91000015 	stw	r4,0(r18)
    9284:	18002b26 	beq	r3,zero,9334 <_fflush_r+0x160>
    9288:	0007883a 	mov	r3,zero
    928c:	1805883a 	mov	r2,r3
    9290:	94001415 	stw	r16,80(r18)
    9294:	dfc00417 	ldw	ra,16(sp)
    9298:	dcc00317 	ldw	r19,12(sp)
    929c:	dc800217 	ldw	r18,8(sp)
    92a0:	dc400117 	ldw	r17,4(sp)
    92a4:	dc000017 	ldw	r16,0(sp)
    92a8:	dec00504 	addi	sp,sp,20
    92ac:	f800283a 	ret
    92b0:	94400417 	ldw	r17,16(r18)
    92b4:	88001f26 	beq	r17,zero,9334 <_fflush_r+0x160>
    92b8:	90800017 	ldw	r2,0(r18)
    92bc:	18c000cc 	andi	r3,r3,3
    92c0:	94400015 	stw	r17,0(r18)
    92c4:	1461c83a 	sub	r16,r2,r17
    92c8:	18002526 	beq	r3,zero,9360 <_fflush_r+0x18c>
    92cc:	0005883a 	mov	r2,zero
    92d0:	90800215 	stw	r2,8(r18)
    92d4:	0400170e 	bge	zero,r16,9334 <_fflush_r+0x160>
    92d8:	90c00917 	ldw	r3,36(r18)
    92dc:	91400717 	ldw	r5,28(r18)
    92e0:	880d883a 	mov	r6,r17
    92e4:	800f883a 	mov	r7,r16
    92e8:	9809883a 	mov	r4,r19
    92ec:	183ee83a 	callr	r3
    92f0:	88a3883a 	add	r17,r17,r2
    92f4:	80a1c83a 	sub	r16,r16,r2
    92f8:	00bff616 	blt	zero,r2,92d4 <_fflush_r+0x100>
    92fc:	9080030b 	ldhu	r2,12(r18)
    9300:	00ffffc4 	movi	r3,-1
    9304:	10801014 	ori	r2,r2,64
    9308:	9080030d 	sth	r2,12(r18)
    930c:	1805883a 	mov	r2,r3
    9310:	dfc00417 	ldw	ra,16(sp)
    9314:	dcc00317 	ldw	r19,12(sp)
    9318:	dc800217 	ldw	r18,8(sp)
    931c:	dc400117 	ldw	r17,4(sp)
    9320:	dc000017 	ldw	r16,0(sp)
    9324:	dec00504 	addi	sp,sp,20
    9328:	f800283a 	ret
    932c:	90800f17 	ldw	r2,60(r18)
    9330:	00bfbe16 	blt	zero,r2,922c <_fflush_r+0x58>
    9334:	0007883a 	mov	r3,zero
    9338:	1805883a 	mov	r2,r3
    933c:	dfc00417 	ldw	ra,16(sp)
    9340:	dcc00317 	ldw	r19,12(sp)
    9344:	dc800217 	ldw	r18,8(sp)
    9348:	dc400117 	ldw	r17,4(sp)
    934c:	dc000017 	ldw	r16,0(sp)
    9350:	dec00504 	addi	sp,sp,20
    9354:	f800283a 	ret
    9358:	00029c40 	call	29c4 <__sinit>
    935c:	003fa806 	br	9200 <_fflush_r+0x2c>
    9360:	90800517 	ldw	r2,20(r18)
    9364:	90800215 	stw	r2,8(r18)
    9368:	003fda06 	br	92d4 <_fflush_r+0x100>
    936c:	90800117 	ldw	r2,4(r18)
    9370:	90c00c17 	ldw	r3,48(r18)
    9374:	80a1c83a 	sub	r16,r16,r2
    9378:	183fb426 	beq	r3,zero,924c <_fflush_r+0x78>
    937c:	90800f17 	ldw	r2,60(r18)
    9380:	80a1c83a 	sub	r16,r16,r2
    9384:	003fb106 	br	924c <_fflush_r+0x78>
    9388:	91400717 	ldw	r5,28(r18)
    938c:	9809883a 	mov	r4,r19
    9390:	000d883a 	mov	r6,zero
    9394:	01c00044 	movi	r7,1
    9398:	403ee83a 	callr	r8
    939c:	1021883a 	mov	r16,r2
    93a0:	00bfffc4 	movi	r2,-1
    93a4:	80800226 	beq	r16,r2,93b0 <_fflush_r+0x1dc>
    93a8:	92000a17 	ldw	r8,40(r18)
    93ac:	003fa406 	br	9240 <_fflush_r+0x6c>
    93b0:	98c00017 	ldw	r3,0(r19)
    93b4:	00800744 	movi	r2,29
    93b8:	18bfde26 	beq	r3,r2,9334 <_fflush_r+0x160>
    93bc:	9080030b 	ldhu	r2,12(r18)
    93c0:	8007883a 	mov	r3,r16
    93c4:	10801014 	ori	r2,r2,64
    93c8:	9080030d 	sth	r2,12(r18)
    93cc:	003fcf06 	br	930c <_fflush_r+0x138>

000093d0 <fflush>:
    93d0:	01400074 	movhi	r5,1
    93d4:	29647504 	addi	r5,r5,-28204
    93d8:	2007883a 	mov	r3,r4
    93dc:	20000526 	beq	r4,zero,93f4 <fflush+0x24>
    93e0:	00800074 	movhi	r2,1
    93e4:	109a7d04 	addi	r2,r2,27124
    93e8:	11000017 	ldw	r4,0(r2)
    93ec:	180b883a 	mov	r5,r3
    93f0:	00091d41 	jmpi	91d4 <_fflush_r>
    93f4:	00800074 	movhi	r2,1
    93f8:	109a7e04 	addi	r2,r2,27128
    93fc:	11000017 	ldw	r4,0(r2)
    9400:	0002c1c1 	jmpi	2c1c <_fwalk_reent>

00009404 <_fread_r>:
    9404:	defff504 	addi	sp,sp,-44
    9408:	ddc00815 	stw	r23,32(sp)
    940c:	39af383a 	mul	r23,r7,r6
    9410:	df000915 	stw	fp,36(sp)
    9414:	dd800715 	stw	r22,28(sp)
    9418:	dcc00415 	stw	r19,16(sp)
    941c:	dc000115 	stw	r16,4(sp)
    9420:	dfc00a15 	stw	ra,40(sp)
    9424:	dd400615 	stw	r21,24(sp)
    9428:	dd000515 	stw	r20,20(sp)
    942c:	dc800315 	stw	r18,12(sp)
    9430:	dc400215 	stw	r17,8(sp)
    9434:	d9800015 	stw	r6,0(sp)
    9438:	3839883a 	mov	fp,r7
    943c:	2821883a 	mov	r16,r5
    9440:	202d883a 	mov	r22,r4
    9444:	dcc00b17 	ldw	r19,44(sp)
    9448:	b8005926 	beq	r23,zero,95b0 <_fread_r+0x1ac>
    944c:	20000226 	beq	r4,zero,9458 <_fread_r+0x54>
    9450:	20800e17 	ldw	r2,56(r4)
    9454:	10005826 	beq	r2,zero,95b8 <_fread_r+0x1b4>
    9458:	9c400117 	ldw	r17,4(r19)
    945c:	88005916 	blt	r17,zero,95c4 <_fread_r+0x1c0>
    9460:	9880030b 	ldhu	r2,12(r19)
    9464:	8029883a 	mov	r20,r16
    9468:	1080008c 	andi	r2,r2,2
    946c:	1000221e 	bne	r2,zero,94f8 <_fread_r+0xf4>
    9470:	b825883a 	mov	r18,r23
    9474:	00000106 	br	947c <_fread_r+0x78>
    9478:	9c400117 	ldw	r17,4(r19)
    947c:	a009883a 	mov	r4,r20
    9480:	880d883a 	mov	r6,r17
    9484:	8c80542e 	bgeu	r17,r18,95d8 <_fread_r+0x1d4>
    9488:	99400017 	ldw	r5,0(r19)
    948c:	a469883a 	add	r20,r20,r17
    9490:	9465c83a 	sub	r18,r18,r17
    9494:	00035c00 	call	35c0 <memcpy>
    9498:	98800017 	ldw	r2,0(r19)
    949c:	b009883a 	mov	r4,r22
    94a0:	980b883a 	mov	r5,r19
    94a4:	1461883a 	add	r16,r2,r17
    94a8:	9c000015 	stw	r16,0(r19)
    94ac:	00038480 	call	3848 <__srefill_r>
    94b0:	103ff126 	beq	r2,zero,9478 <_fread_r+0x74>
    94b4:	d9400017 	ldw	r5,0(sp)
    94b8:	bc89c83a 	sub	r4,r23,r18
    94bc:	00027e00 	call	27e0 <__udivsi3>
    94c0:	1039883a 	mov	fp,r2
    94c4:	e005883a 	mov	r2,fp
    94c8:	dfc00a17 	ldw	ra,40(sp)
    94cc:	df000917 	ldw	fp,36(sp)
    94d0:	ddc00817 	ldw	r23,32(sp)
    94d4:	dd800717 	ldw	r22,28(sp)
    94d8:	dd400617 	ldw	r21,24(sp)
    94dc:	dd000517 	ldw	r20,20(sp)
    94e0:	dcc00417 	ldw	r19,16(sp)
    94e4:	dc800317 	ldw	r18,12(sp)
    94e8:	dc400217 	ldw	r17,8(sp)
    94ec:	dc000117 	ldw	r16,4(sp)
    94f0:	dec00b04 	addi	sp,sp,44
    94f4:	f800283a 	ret
    94f8:	b825883a 	mov	r18,r23
    94fc:	8dc03436 	bltu	r17,r23,95d0 <_fread_r+0x1cc>
    9500:	99400017 	ldw	r5,0(r19)
    9504:	a009883a 	mov	r4,r20
    9508:	900d883a 	mov	r6,r18
    950c:	00035c00 	call	35c0 <memcpy>
    9510:	9c000017 	ldw	r16,0(r19)
    9514:	98800117 	ldw	r2,4(r19)
    9518:	99400c17 	ldw	r5,48(r19)
    951c:	84a1883a 	add	r16,r16,r18
    9520:	14a3c83a 	sub	r17,r2,r18
    9524:	a4ab883a 	add	r21,r20,r18
    9528:	9c400115 	stw	r17,4(r19)
    952c:	9c000015 	stw	r16,0(r19)
    9530:	bca9c83a 	sub	r20,r23,r18
    9534:	28000826 	beq	r5,zero,9558 <_fread_r+0x154>
    9538:	a03fe226 	beq	r20,zero,94c4 <_fread_r+0xc0>
    953c:	98801004 	addi	r2,r19,64
    9540:	28800326 	beq	r5,r2,9550 <_fread_r+0x14c>
    9544:	b009883a 	mov	r4,r22
    9548:	000976c0 	call	976c <_free_r>
    954c:	9c000017 	ldw	r16,0(r19)
    9550:	98000c15 	stw	zero,48(r19)
    9554:	00000106 	br	955c <_fread_r+0x158>
    9558:	a03fda26 	beq	r20,zero,94c4 <_fread_r+0xc0>
    955c:	9c800417 	ldw	r18,16(r19)
    9560:	9c400517 	ldw	r17,20(r19)
    9564:	9d400015 	stw	r21,0(r19)
    9568:	9d400415 	stw	r21,16(r19)
    956c:	9d000515 	stw	r20,20(r19)
    9570:	b009883a 	mov	r4,r22
    9574:	980b883a 	mov	r5,r19
    9578:	00038480 	call	3848 <__srefill_r>
    957c:	98c00117 	ldw	r3,4(r19)
    9580:	9c800415 	stw	r18,16(r19)
    9584:	9c400515 	stw	r17,20(r19)
    9588:	a8eb883a 	add	r21,r21,r3
    958c:	9c000015 	stw	r16,0(r19)
    9590:	a0e9c83a 	sub	r20,r20,r3
    9594:	98000115 	stw	zero,4(r19)
    9598:	103fef26 	beq	r2,zero,9558 <_fread_r+0x154>
    959c:	d9400017 	ldw	r5,0(sp)
    95a0:	bd09c83a 	sub	r4,r23,r20
    95a4:	00027e00 	call	27e0 <__udivsi3>
    95a8:	1039883a 	mov	fp,r2
    95ac:	003fc506 	br	94c4 <_fread_r+0xc0>
    95b0:	0039883a 	mov	fp,zero
    95b4:	003fc306 	br	94c4 <_fread_r+0xc0>
    95b8:	00029c40 	call	29c4 <__sinit>
    95bc:	9c400117 	ldw	r17,4(r19)
    95c0:	883fa70e 	bge	r17,zero,9460 <_fread_r+0x5c>
    95c4:	0023883a 	mov	r17,zero
    95c8:	98000115 	stw	zero,4(r19)
    95cc:	003fa406 	br	9460 <_fread_r+0x5c>
    95d0:	8825883a 	mov	r18,r17
    95d4:	003fca06 	br	9500 <_fread_r+0xfc>
    95d8:	99400017 	ldw	r5,0(r19)
    95dc:	900d883a 	mov	r6,r18
    95e0:	00035c00 	call	35c0 <memcpy>
    95e4:	98c00117 	ldw	r3,4(r19)
    95e8:	98800017 	ldw	r2,0(r19)
    95ec:	1c87c83a 	sub	r3,r3,r18
    95f0:	1485883a 	add	r2,r2,r18
    95f4:	98800015 	stw	r2,0(r19)
    95f8:	98c00115 	stw	r3,4(r19)
    95fc:	003fb106 	br	94c4 <_fread_r+0xc0>

00009600 <fread>:
    9600:	00800074 	movhi	r2,1
    9604:	109a7d04 	addi	r2,r2,27124
    9608:	2017883a 	mov	r11,r4
    960c:	11000017 	ldw	r4,0(r2)
    9610:	defffe04 	addi	sp,sp,-8
    9614:	3013883a 	mov	r9,r6
    9618:	2805883a 	mov	r2,r5
    961c:	d9c00015 	stw	r7,0(sp)
    9620:	580b883a 	mov	r5,r11
    9624:	100d883a 	mov	r6,r2
    9628:	480f883a 	mov	r7,r9
    962c:	dfc00115 	stw	ra,4(sp)
    9630:	00094040 	call	9404 <_fread_r>
    9634:	dfc00117 	ldw	ra,4(sp)
    9638:	dec00204 	addi	sp,sp,8
    963c:	f800283a 	ret

00009640 <_malloc_trim_r>:
    9640:	defffb04 	addi	sp,sp,-20
    9644:	dcc00315 	stw	r19,12(sp)
    9648:	04c00074 	movhi	r19,1
    964c:	9cd4eb04 	addi	r19,r19,21420
    9650:	dc800215 	stw	r18,8(sp)
    9654:	dc400115 	stw	r17,4(sp)
    9658:	dc000015 	stw	r16,0(sp)
    965c:	2823883a 	mov	r17,r5
    9660:	2025883a 	mov	r18,r4
    9664:	dfc00415 	stw	ra,16(sp)
    9668:	0011f180 	call	11f18 <__malloc_lock>
    966c:	98800217 	ldw	r2,8(r19)
    9670:	9009883a 	mov	r4,r18
    9674:	000b883a 	mov	r5,zero
    9678:	10c00117 	ldw	r3,4(r2)
    967c:	00bfff04 	movi	r2,-4
    9680:	18a0703a 	and	r16,r3,r2
    9684:	8463c83a 	sub	r17,r16,r17
    9688:	8c43fbc4 	addi	r17,r17,4079
    968c:	8822d33a 	srli	r17,r17,12
    9690:	0083ffc4 	movi	r2,4095
    9694:	8c7fffc4 	addi	r17,r17,-1
    9698:	8822933a 	slli	r17,r17,12
    969c:	1440060e 	bge	r2,r17,96b8 <_malloc_trim_r+0x78>
    96a0:	0003a280 	call	3a28 <_sbrk_r>
    96a4:	98c00217 	ldw	r3,8(r19)
    96a8:	9009883a 	mov	r4,r18
    96ac:	044bc83a 	sub	r5,zero,r17
    96b0:	80c7883a 	add	r3,r16,r3
    96b4:	10c00926 	beq	r2,r3,96dc <_malloc_trim_r+0x9c>
    96b8:	0011f380 	call	11f38 <__malloc_unlock>
    96bc:	0005883a 	mov	r2,zero
    96c0:	dfc00417 	ldw	ra,16(sp)
    96c4:	dcc00317 	ldw	r19,12(sp)
    96c8:	dc800217 	ldw	r18,8(sp)
    96cc:	dc400117 	ldw	r17,4(sp)
    96d0:	dc000017 	ldw	r16,0(sp)
    96d4:	dec00504 	addi	sp,sp,20
    96d8:	f800283a 	ret
    96dc:	9009883a 	mov	r4,r18
    96e0:	0003a280 	call	3a28 <_sbrk_r>
    96e4:	844dc83a 	sub	r6,r16,r17
    96e8:	00ffffc4 	movi	r3,-1
    96ec:	9009883a 	mov	r4,r18
    96f0:	000b883a 	mov	r5,zero
    96f4:	01c000b4 	movhi	r7,2
    96f8:	39e18904 	addi	r7,r7,-31196
    96fc:	31800054 	ori	r6,r6,1
    9700:	10c00926 	beq	r2,r3,9728 <_malloc_trim_r+0xe8>
    9704:	38800017 	ldw	r2,0(r7)
    9708:	98c00217 	ldw	r3,8(r19)
    970c:	9009883a 	mov	r4,r18
    9710:	1445c83a 	sub	r2,r2,r17
    9714:	38800015 	stw	r2,0(r7)
    9718:	19800115 	stw	r6,4(r3)
    971c:	0011f380 	call	11f38 <__malloc_unlock>
    9720:	00800044 	movi	r2,1
    9724:	003fe606 	br	96c0 <_malloc_trim_r+0x80>
    9728:	0003a280 	call	3a28 <_sbrk_r>
    972c:	99800217 	ldw	r6,8(r19)
    9730:	100f883a 	mov	r7,r2
    9734:	9009883a 	mov	r4,r18
    9738:	1187c83a 	sub	r3,r2,r6
    973c:	008003c4 	movi	r2,15
    9740:	19400054 	ori	r5,r3,1
    9744:	10ffdc0e 	bge	r2,r3,96b8 <_malloc_trim_r+0x78>
    9748:	00800074 	movhi	r2,1
    974c:	109a8004 	addi	r2,r2,27136
    9750:	10c00017 	ldw	r3,0(r2)
    9754:	008000b4 	movhi	r2,2
    9758:	10a18904 	addi	r2,r2,-31196
    975c:	31400115 	stw	r5,4(r6)
    9760:	38c7c83a 	sub	r3,r7,r3
    9764:	10c00015 	stw	r3,0(r2)
    9768:	003fd306 	br	96b8 <_malloc_trim_r+0x78>

0000976c <_free_r>:
    976c:	defffd04 	addi	sp,sp,-12
    9770:	dc400115 	stw	r17,4(sp)
    9774:	dc000015 	stw	r16,0(sp)
    9778:	dfc00215 	stw	ra,8(sp)
    977c:	2821883a 	mov	r16,r5
    9780:	2023883a 	mov	r17,r4
    9784:	28005a26 	beq	r5,zero,98f0 <_free_r+0x184>
    9788:	0011f180 	call	11f18 <__malloc_lock>
    978c:	823ffe04 	addi	r8,r16,-8
    9790:	41400117 	ldw	r5,4(r8)
    9794:	00bfff84 	movi	r2,-2
    9798:	02800074 	movhi	r10,1
    979c:	5294eb04 	addi	r10,r10,21420
    97a0:	288e703a 	and	r7,r5,r2
    97a4:	41cd883a 	add	r6,r8,r7
    97a8:	30c00117 	ldw	r3,4(r6)
    97ac:	51000217 	ldw	r4,8(r10)
    97b0:	00bfff04 	movi	r2,-4
    97b4:	1892703a 	and	r9,r3,r2
    97b8:	5017883a 	mov	r11,r10
    97bc:	31006726 	beq	r6,r4,995c <_free_r+0x1f0>
    97c0:	2880004c 	andi	r2,r5,1
    97c4:	1005003a 	cmpeq	r2,r2,zero
    97c8:	32400115 	stw	r9,4(r6)
    97cc:	10001a1e 	bne	r2,zero,9838 <_free_r+0xcc>
    97d0:	000b883a 	mov	r5,zero
    97d4:	3247883a 	add	r3,r6,r9
    97d8:	18800117 	ldw	r2,4(r3)
    97dc:	1080004c 	andi	r2,r2,1
    97e0:	1000231e 	bne	r2,zero,9870 <_free_r+0x104>
    97e4:	280ac03a 	cmpne	r5,r5,zero
    97e8:	3a4f883a 	add	r7,r7,r9
    97ec:	2800451e 	bne	r5,zero,9904 <_free_r+0x198>
    97f0:	31000217 	ldw	r4,8(r6)
    97f4:	00800074 	movhi	r2,1
    97f8:	1094ed04 	addi	r2,r2,21428
    97fc:	20807b26 	beq	r4,r2,99ec <_free_r+0x280>
    9800:	30800317 	ldw	r2,12(r6)
    9804:	3a07883a 	add	r3,r7,r8
    9808:	19c00015 	stw	r7,0(r3)
    980c:	11000215 	stw	r4,8(r2)
    9810:	20800315 	stw	r2,12(r4)
    9814:	38800054 	ori	r2,r7,1
    9818:	40800115 	stw	r2,4(r8)
    981c:	28001a26 	beq	r5,zero,9888 <_free_r+0x11c>
    9820:	8809883a 	mov	r4,r17
    9824:	dfc00217 	ldw	ra,8(sp)
    9828:	dc400117 	ldw	r17,4(sp)
    982c:	dc000017 	ldw	r16,0(sp)
    9830:	dec00304 	addi	sp,sp,12
    9834:	0011f381 	jmpi	11f38 <__malloc_unlock>
    9838:	80bffe17 	ldw	r2,-8(r16)
    983c:	50c00204 	addi	r3,r10,8
    9840:	4091c83a 	sub	r8,r8,r2
    9844:	41000217 	ldw	r4,8(r8)
    9848:	388f883a 	add	r7,r7,r2
    984c:	20c06126 	beq	r4,r3,99d4 <_free_r+0x268>
    9850:	40800317 	ldw	r2,12(r8)
    9854:	3247883a 	add	r3,r6,r9
    9858:	000b883a 	mov	r5,zero
    985c:	11000215 	stw	r4,8(r2)
    9860:	20800315 	stw	r2,12(r4)
    9864:	18800117 	ldw	r2,4(r3)
    9868:	1080004c 	andi	r2,r2,1
    986c:	103fdd26 	beq	r2,zero,97e4 <_free_r+0x78>
    9870:	38800054 	ori	r2,r7,1
    9874:	3a07883a 	add	r3,r7,r8
    9878:	280ac03a 	cmpne	r5,r5,zero
    987c:	40800115 	stw	r2,4(r8)
    9880:	19c00015 	stw	r7,0(r3)
    9884:	283fe61e 	bne	r5,zero,9820 <_free_r+0xb4>
    9888:	00807fc4 	movi	r2,511
    988c:	11c01f2e 	bgeu	r2,r7,990c <_free_r+0x1a0>
    9890:	3806d27a 	srli	r3,r7,9
    9894:	1800481e 	bne	r3,zero,99b8 <_free_r+0x24c>
    9898:	3804d0fa 	srli	r2,r7,3
    989c:	100690fa 	slli	r3,r2,3
    98a0:	1acd883a 	add	r6,r3,r11
    98a4:	31400217 	ldw	r5,8(r6)
    98a8:	31405926 	beq	r6,r5,9a10 <_free_r+0x2a4>
    98ac:	28800117 	ldw	r2,4(r5)
    98b0:	00ffff04 	movi	r3,-4
    98b4:	10c4703a 	and	r2,r2,r3
    98b8:	3880022e 	bgeu	r7,r2,98c4 <_free_r+0x158>
    98bc:	29400217 	ldw	r5,8(r5)
    98c0:	317ffa1e 	bne	r6,r5,98ac <_free_r+0x140>
    98c4:	29800317 	ldw	r6,12(r5)
    98c8:	41800315 	stw	r6,12(r8)
    98cc:	41400215 	stw	r5,8(r8)
    98d0:	8809883a 	mov	r4,r17
    98d4:	2a000315 	stw	r8,12(r5)
    98d8:	32000215 	stw	r8,8(r6)
    98dc:	dfc00217 	ldw	ra,8(sp)
    98e0:	dc400117 	ldw	r17,4(sp)
    98e4:	dc000017 	ldw	r16,0(sp)
    98e8:	dec00304 	addi	sp,sp,12
    98ec:	0011f381 	jmpi	11f38 <__malloc_unlock>
    98f0:	dfc00217 	ldw	ra,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	31000217 	ldw	r4,8(r6)
    9908:	003fbd06 	br	9800 <_free_r+0x94>
    990c:	3806d0fa 	srli	r3,r7,3
    9910:	00800044 	movi	r2,1
    9914:	51400117 	ldw	r5,4(r10)
    9918:	180890fa 	slli	r4,r3,3
    991c:	1807d0ba 	srai	r3,r3,2
    9920:	22c9883a 	add	r4,r4,r11
    9924:	21800217 	ldw	r6,8(r4)
    9928:	10c4983a 	sll	r2,r2,r3
    992c:	41000315 	stw	r4,12(r8)
    9930:	41800215 	stw	r6,8(r8)
    9934:	288ab03a 	or	r5,r5,r2
    9938:	22000215 	stw	r8,8(r4)
    993c:	8809883a 	mov	r4,r17
    9940:	51400115 	stw	r5,4(r10)
    9944:	32000315 	stw	r8,12(r6)
    9948:	dfc00217 	ldw	ra,8(sp)
    994c:	dc400117 	ldw	r17,4(sp)
    9950:	dc000017 	ldw	r16,0(sp)
    9954:	dec00304 	addi	sp,sp,12
    9958:	0011f381 	jmpi	11f38 <__malloc_unlock>
    995c:	2880004c 	andi	r2,r5,1
    9960:	3a4d883a 	add	r6,r7,r9
    9964:	1000071e 	bne	r2,zero,9984 <_free_r+0x218>
    9968:	80bffe17 	ldw	r2,-8(r16)
    996c:	4091c83a 	sub	r8,r8,r2
    9970:	41000317 	ldw	r4,12(r8)
    9974:	40c00217 	ldw	r3,8(r8)
    9978:	308d883a 	add	r6,r6,r2
    997c:	20c00215 	stw	r3,8(r4)
    9980:	19000315 	stw	r4,12(r3)
    9984:	00800074 	movhi	r2,1
    9988:	109a7f04 	addi	r2,r2,27132
    998c:	11000017 	ldw	r4,0(r2)
    9990:	30c00054 	ori	r3,r6,1
    9994:	52000215 	stw	r8,8(r10)
    9998:	40c00115 	stw	r3,4(r8)
    999c:	313fa036 	bltu	r6,r4,9820 <_free_r+0xb4>
    99a0:	008000b4 	movhi	r2,2
    99a4:	10a14b04 	addi	r2,r2,-31444
    99a8:	11400017 	ldw	r5,0(r2)
    99ac:	8809883a 	mov	r4,r17
    99b0:	00096400 	call	9640 <_malloc_trim_r>
    99b4:	003f9a06 	br	9820 <_free_r+0xb4>
    99b8:	00800104 	movi	r2,4
    99bc:	10c0072e 	bgeu	r2,r3,99dc <_free_r+0x270>
    99c0:	00800504 	movi	r2,20
    99c4:	10c01936 	bltu	r2,r3,9a2c <_free_r+0x2c0>
    99c8:	188016c4 	addi	r2,r3,91
    99cc:	100690fa 	slli	r3,r2,3
    99d0:	003fb306 	br	98a0 <_free_r+0x134>
    99d4:	01400044 	movi	r5,1
    99d8:	003f7e06 	br	97d4 <_free_r+0x68>
    99dc:	3804d1ba 	srli	r2,r7,6
    99e0:	10800e04 	addi	r2,r2,56
    99e4:	100690fa 	slli	r3,r2,3
    99e8:	003fad06 	br	98a0 <_free_r+0x134>
    99ec:	22000315 	stw	r8,12(r4)
    99f0:	22000215 	stw	r8,8(r4)
    99f4:	3a05883a 	add	r2,r7,r8
    99f8:	38c00054 	ori	r3,r7,1
    99fc:	11c00015 	stw	r7,0(r2)
    9a00:	41000215 	stw	r4,8(r8)
    9a04:	40c00115 	stw	r3,4(r8)
    9a08:	41000315 	stw	r4,12(r8)
    9a0c:	003f8406 	br	9820 <_free_r+0xb4>
    9a10:	1005d0ba 	srai	r2,r2,2
    9a14:	00c00044 	movi	r3,1
    9a18:	51000117 	ldw	r4,4(r10)
    9a1c:	1886983a 	sll	r3,r3,r2
    9a20:	20c8b03a 	or	r4,r4,r3
    9a24:	51000115 	stw	r4,4(r10)
    9a28:	003fa706 	br	98c8 <_free_r+0x15c>
    9a2c:	00801504 	movi	r2,84
    9a30:	10c00436 	bltu	r2,r3,9a44 <_free_r+0x2d8>
    9a34:	3804d33a 	srli	r2,r7,12
    9a38:	10801b84 	addi	r2,r2,110
    9a3c:	100690fa 	slli	r3,r2,3
    9a40:	003f9706 	br	98a0 <_free_r+0x134>
    9a44:	00805504 	movi	r2,340
    9a48:	10c00436 	bltu	r2,r3,9a5c <_free_r+0x2f0>
    9a4c:	3804d3fa 	srli	r2,r7,15
    9a50:	10801dc4 	addi	r2,r2,119
    9a54:	100690fa 	slli	r3,r2,3
    9a58:	003f9106 	br	98a0 <_free_r+0x134>
    9a5c:	00815504 	movi	r2,1364
    9a60:	10c0032e 	bgeu	r2,r3,9a70 <_free_r+0x304>
    9a64:	00801f84 	movi	r2,126
    9a68:	00c0fc04 	movi	r3,1008
    9a6c:	003f8c06 	br	98a0 <_free_r+0x134>
    9a70:	3804d4ba 	srli	r2,r7,18
    9a74:	10801f04 	addi	r2,r2,124
    9a78:	100690fa 	slli	r3,r2,3
    9a7c:	003f8806 	br	98a0 <_free_r+0x134>

00009a80 <__sfvwrite_r>:
    9a80:	30800217 	ldw	r2,8(r6)
    9a84:	defff504 	addi	sp,sp,-44
    9a88:	df000915 	stw	fp,36(sp)
    9a8c:	dd800715 	stw	r22,28(sp)
    9a90:	dc800315 	stw	r18,12(sp)
    9a94:	dfc00a15 	stw	ra,40(sp)
    9a98:	ddc00815 	stw	r23,32(sp)
    9a9c:	dd400615 	stw	r21,24(sp)
    9aa0:	dd000515 	stw	r20,20(sp)
    9aa4:	dcc00415 	stw	r19,16(sp)
    9aa8:	dc400215 	stw	r17,8(sp)
    9aac:	dc000115 	stw	r16,4(sp)
    9ab0:	302d883a 	mov	r22,r6
    9ab4:	2039883a 	mov	fp,r4
    9ab8:	2825883a 	mov	r18,r5
    9abc:	10001c26 	beq	r2,zero,9b30 <__sfvwrite_r+0xb0>
    9ac0:	29c0030b 	ldhu	r7,12(r5)
    9ac4:	3880020c 	andi	r2,r7,8
    9ac8:	10002726 	beq	r2,zero,9b68 <__sfvwrite_r+0xe8>
    9acc:	28800417 	ldw	r2,16(r5)
    9ad0:	10002526 	beq	r2,zero,9b68 <__sfvwrite_r+0xe8>
    9ad4:	3880008c 	andi	r2,r7,2
    9ad8:	b5400017 	ldw	r21,0(r22)
    9adc:	10002826 	beq	r2,zero,9b80 <__sfvwrite_r+0x100>
    9ae0:	0021883a 	mov	r16,zero
    9ae4:	0023883a 	mov	r17,zero
    9ae8:	880d883a 	mov	r6,r17
    9aec:	e009883a 	mov	r4,fp
    9af0:	00810004 	movi	r2,1024
    9af4:	80006e26 	beq	r16,zero,9cb0 <__sfvwrite_r+0x230>
    9af8:	800f883a 	mov	r7,r16
    9afc:	91400717 	ldw	r5,28(r18)
    9b00:	1400012e 	bgeu	r2,r16,9b08 <__sfvwrite_r+0x88>
    9b04:	100f883a 	mov	r7,r2
    9b08:	90c00917 	ldw	r3,36(r18)
    9b0c:	183ee83a 	callr	r3
    9b10:	1007883a 	mov	r3,r2
    9b14:	80a1c83a 	sub	r16,r16,r2
    9b18:	88a3883a 	add	r17,r17,r2
    9b1c:	00806d0e 	bge	zero,r2,9cd4 <__sfvwrite_r+0x254>
    9b20:	b0800217 	ldw	r2,8(r22)
    9b24:	10c5c83a 	sub	r2,r2,r3
    9b28:	b0800215 	stw	r2,8(r22)
    9b2c:	103fee1e 	bne	r2,zero,9ae8 <__sfvwrite_r+0x68>
    9b30:	0009883a 	mov	r4,zero
    9b34:	2005883a 	mov	r2,r4
    9b38:	dfc00a17 	ldw	ra,40(sp)
    9b3c:	df000917 	ldw	fp,36(sp)
    9b40:	ddc00817 	ldw	r23,32(sp)
    9b44:	dd800717 	ldw	r22,28(sp)
    9b48:	dd400617 	ldw	r21,24(sp)
    9b4c:	dd000517 	ldw	r20,20(sp)
    9b50:	dcc00417 	ldw	r19,16(sp)
    9b54:	dc800317 	ldw	r18,12(sp)
    9b58:	dc400217 	ldw	r17,8(sp)
    9b5c:	dc000117 	ldw	r16,4(sp)
    9b60:	dec00b04 	addi	sp,sp,44
    9b64:	f800283a 	ret
    9b68:	00077380 	call	7738 <__swsetup_r>
    9b6c:	1000e41e 	bne	r2,zero,9f00 <__sfvwrite_r+0x480>
    9b70:	91c0030b 	ldhu	r7,12(r18)
    9b74:	b5400017 	ldw	r21,0(r22)
    9b78:	3880008c 	andi	r2,r7,2
    9b7c:	103fd81e 	bne	r2,zero,9ae0 <__sfvwrite_r+0x60>
    9b80:	3880004c 	andi	r2,r7,1
    9b84:	1005003a 	cmpeq	r2,r2,zero
    9b88:	10005726 	beq	r2,zero,9ce8 <__sfvwrite_r+0x268>
    9b8c:	0029883a 	mov	r20,zero
    9b90:	002f883a 	mov	r23,zero
    9b94:	a0004226 	beq	r20,zero,9ca0 <__sfvwrite_r+0x220>
    9b98:	3880800c 	andi	r2,r7,512
    9b9c:	94000217 	ldw	r16,8(r18)
    9ba0:	10008b26 	beq	r2,zero,9dd0 <__sfvwrite_r+0x350>
    9ba4:	800d883a 	mov	r6,r16
    9ba8:	a400a536 	bltu	r20,r16,9e40 <__sfvwrite_r+0x3c0>
    9bac:	3881200c 	andi	r2,r7,1152
    9bb0:	10002726 	beq	r2,zero,9c50 <__sfvwrite_r+0x1d0>
    9bb4:	90800517 	ldw	r2,20(r18)
    9bb8:	92000417 	ldw	r8,16(r18)
    9bbc:	91400017 	ldw	r5,0(r18)
    9bc0:	1087883a 	add	r3,r2,r2
    9bc4:	1887883a 	add	r3,r3,r2
    9bc8:	1808d7fa 	srli	r4,r3,31
    9bcc:	2a21c83a 	sub	r16,r5,r8
    9bd0:	80800044 	addi	r2,r16,1
    9bd4:	20c9883a 	add	r4,r4,r3
    9bd8:	2027d07a 	srai	r19,r4,1
    9bdc:	a085883a 	add	r2,r20,r2
    9be0:	980d883a 	mov	r6,r19
    9be4:	9880022e 	bgeu	r19,r2,9bf0 <__sfvwrite_r+0x170>
    9be8:	1027883a 	mov	r19,r2
    9bec:	100d883a 	mov	r6,r2
    9bf0:	3881000c 	andi	r2,r7,1024
    9bf4:	1000b826 	beq	r2,zero,9ed8 <__sfvwrite_r+0x458>
    9bf8:	300b883a 	mov	r5,r6
    9bfc:	e009883a 	mov	r4,fp
    9c00:	0002d9c0 	call	2d9c <_malloc_r>
    9c04:	10003126 	beq	r2,zero,9ccc <__sfvwrite_r+0x24c>
    9c08:	91400417 	ldw	r5,16(r18)
    9c0c:	1009883a 	mov	r4,r2
    9c10:	800d883a 	mov	r6,r16
    9c14:	1023883a 	mov	r17,r2
    9c18:	00035c00 	call	35c0 <memcpy>
    9c1c:	90c0030b 	ldhu	r3,12(r18)
    9c20:	00beffc4 	movi	r2,-1025
    9c24:	1886703a 	and	r3,r3,r2
    9c28:	18c02014 	ori	r3,r3,128
    9c2c:	90c0030d 	sth	r3,12(r18)
    9c30:	9c07c83a 	sub	r3,r19,r16
    9c34:	8c05883a 	add	r2,r17,r16
    9c38:	a00d883a 	mov	r6,r20
    9c3c:	a021883a 	mov	r16,r20
    9c40:	90800015 	stw	r2,0(r18)
    9c44:	90c00215 	stw	r3,8(r18)
    9c48:	94400415 	stw	r17,16(r18)
    9c4c:	94c00515 	stw	r19,20(r18)
    9c50:	91000017 	ldw	r4,0(r18)
    9c54:	b80b883a 	mov	r5,r23
    9c58:	a023883a 	mov	r17,r20
    9c5c:	000a3180 	call	a318 <memmove>
    9c60:	90c00217 	ldw	r3,8(r18)
    9c64:	90800017 	ldw	r2,0(r18)
    9c68:	a027883a 	mov	r19,r20
    9c6c:	1c07c83a 	sub	r3,r3,r16
    9c70:	1405883a 	add	r2,r2,r16
    9c74:	90c00215 	stw	r3,8(r18)
    9c78:	a021883a 	mov	r16,r20
    9c7c:	90800015 	stw	r2,0(r18)
    9c80:	b0800217 	ldw	r2,8(r22)
    9c84:	1405c83a 	sub	r2,r2,r16
    9c88:	b0800215 	stw	r2,8(r22)
    9c8c:	103fa826 	beq	r2,zero,9b30 <__sfvwrite_r+0xb0>
    9c90:	a469c83a 	sub	r20,r20,r17
    9c94:	91c0030b 	ldhu	r7,12(r18)
    9c98:	bcef883a 	add	r23,r23,r19
    9c9c:	a03fbe1e 	bne	r20,zero,9b98 <__sfvwrite_r+0x118>
    9ca0:	adc00017 	ldw	r23,0(r21)
    9ca4:	ad000117 	ldw	r20,4(r21)
    9ca8:	ad400204 	addi	r21,r21,8
    9cac:	003fb906 	br	9b94 <__sfvwrite_r+0x114>
    9cb0:	ac400017 	ldw	r17,0(r21)
    9cb4:	ac000117 	ldw	r16,4(r21)
    9cb8:	ad400204 	addi	r21,r21,8
    9cbc:	003f8a06 	br	9ae8 <__sfvwrite_r+0x68>
    9cc0:	91400417 	ldw	r5,16(r18)
    9cc4:	e009883a 	mov	r4,fp
    9cc8:	000976c0 	call	976c <_free_r>
    9ccc:	00800304 	movi	r2,12
    9cd0:	e0800015 	stw	r2,0(fp)
    9cd4:	9080030b 	ldhu	r2,12(r18)
    9cd8:	013fffc4 	movi	r4,-1
    9cdc:	10801014 	ori	r2,r2,64
    9ce0:	9080030d 	sth	r2,12(r18)
    9ce4:	003f9306 	br	9b34 <__sfvwrite_r+0xb4>
    9ce8:	0027883a 	mov	r19,zero
    9cec:	002f883a 	mov	r23,zero
    9cf0:	d8000015 	stw	zero,0(sp)
    9cf4:	0029883a 	mov	r20,zero
    9cf8:	98001e26 	beq	r19,zero,9d74 <__sfvwrite_r+0x2f4>
    9cfc:	d8c00017 	ldw	r3,0(sp)
    9d00:	1804c03a 	cmpne	r2,r3,zero
    9d04:	10005e26 	beq	r2,zero,9e80 <__sfvwrite_r+0x400>
    9d08:	9821883a 	mov	r16,r19
    9d0c:	a4c0012e 	bgeu	r20,r19,9d14 <__sfvwrite_r+0x294>
    9d10:	a021883a 	mov	r16,r20
    9d14:	91000017 	ldw	r4,0(r18)
    9d18:	90800417 	ldw	r2,16(r18)
    9d1c:	91800217 	ldw	r6,8(r18)
    9d20:	91c00517 	ldw	r7,20(r18)
    9d24:	1100022e 	bgeu	r2,r4,9d30 <__sfvwrite_r+0x2b0>
    9d28:	31e3883a 	add	r17,r6,r7
    9d2c:	8c001616 	blt	r17,r16,9d88 <__sfvwrite_r+0x308>
    9d30:	81c03816 	blt	r16,r7,9e14 <__sfvwrite_r+0x394>
    9d34:	90c00917 	ldw	r3,36(r18)
    9d38:	91400717 	ldw	r5,28(r18)
    9d3c:	e009883a 	mov	r4,fp
    9d40:	b80d883a 	mov	r6,r23
    9d44:	183ee83a 	callr	r3
    9d48:	1023883a 	mov	r17,r2
    9d4c:	00bfe10e 	bge	zero,r2,9cd4 <__sfvwrite_r+0x254>
    9d50:	a469c83a 	sub	r20,r20,r17
    9d54:	a0001826 	beq	r20,zero,9db8 <__sfvwrite_r+0x338>
    9d58:	b0800217 	ldw	r2,8(r22)
    9d5c:	1445c83a 	sub	r2,r2,r17
    9d60:	b0800215 	stw	r2,8(r22)
    9d64:	103f7226 	beq	r2,zero,9b30 <__sfvwrite_r+0xb0>
    9d68:	9c67c83a 	sub	r19,r19,r17
    9d6c:	bc6f883a 	add	r23,r23,r17
    9d70:	983fe21e 	bne	r19,zero,9cfc <__sfvwrite_r+0x27c>
    9d74:	adc00017 	ldw	r23,0(r21)
    9d78:	acc00117 	ldw	r19,4(r21)
    9d7c:	ad400204 	addi	r21,r21,8
    9d80:	d8000015 	stw	zero,0(sp)
    9d84:	003fdc06 	br	9cf8 <__sfvwrite_r+0x278>
    9d88:	b80b883a 	mov	r5,r23
    9d8c:	880d883a 	mov	r6,r17
    9d90:	000a3180 	call	a318 <memmove>
    9d94:	90c00017 	ldw	r3,0(r18)
    9d98:	e009883a 	mov	r4,fp
    9d9c:	900b883a 	mov	r5,r18
    9da0:	1c47883a 	add	r3,r3,r17
    9da4:	90c00015 	stw	r3,0(r18)
    9da8:	00091d40 	call	91d4 <_fflush_r>
    9dac:	103fc91e 	bne	r2,zero,9cd4 <__sfvwrite_r+0x254>
    9db0:	a469c83a 	sub	r20,r20,r17
    9db4:	a03fe81e 	bne	r20,zero,9d58 <__sfvwrite_r+0x2d8>
    9db8:	e009883a 	mov	r4,fp
    9dbc:	900b883a 	mov	r5,r18
    9dc0:	00091d40 	call	91d4 <_fflush_r>
    9dc4:	103fc31e 	bne	r2,zero,9cd4 <__sfvwrite_r+0x254>
    9dc8:	d8000015 	stw	zero,0(sp)
    9dcc:	003fe206 	br	9d58 <__sfvwrite_r+0x2d8>
    9dd0:	91000017 	ldw	r4,0(r18)
    9dd4:	90800417 	ldw	r2,16(r18)
    9dd8:	1100022e 	bgeu	r2,r4,9de4 <__sfvwrite_r+0x364>
    9ddc:	8023883a 	mov	r17,r16
    9de0:	85003136 	bltu	r16,r20,9ea8 <__sfvwrite_r+0x428>
    9de4:	91c00517 	ldw	r7,20(r18)
    9de8:	a1c01836 	bltu	r20,r7,9e4c <__sfvwrite_r+0x3cc>
    9dec:	90c00917 	ldw	r3,36(r18)
    9df0:	91400717 	ldw	r5,28(r18)
    9df4:	e009883a 	mov	r4,fp
    9df8:	b80d883a 	mov	r6,r23
    9dfc:	183ee83a 	callr	r3
    9e00:	1021883a 	mov	r16,r2
    9e04:	00bfb30e 	bge	zero,r2,9cd4 <__sfvwrite_r+0x254>
    9e08:	1023883a 	mov	r17,r2
    9e0c:	1027883a 	mov	r19,r2
    9e10:	003f9b06 	br	9c80 <__sfvwrite_r+0x200>
    9e14:	b80b883a 	mov	r5,r23
    9e18:	800d883a 	mov	r6,r16
    9e1c:	000a3180 	call	a318 <memmove>
    9e20:	90c00217 	ldw	r3,8(r18)
    9e24:	90800017 	ldw	r2,0(r18)
    9e28:	8023883a 	mov	r17,r16
    9e2c:	1c07c83a 	sub	r3,r3,r16
    9e30:	1405883a 	add	r2,r2,r16
    9e34:	90c00215 	stw	r3,8(r18)
    9e38:	90800015 	stw	r2,0(r18)
    9e3c:	003fc406 	br	9d50 <__sfvwrite_r+0x2d0>
    9e40:	a00d883a 	mov	r6,r20
    9e44:	a021883a 	mov	r16,r20
    9e48:	003f8106 	br	9c50 <__sfvwrite_r+0x1d0>
    9e4c:	b80b883a 	mov	r5,r23
    9e50:	a00d883a 	mov	r6,r20
    9e54:	000a3180 	call	a318 <memmove>
    9e58:	90c00217 	ldw	r3,8(r18)
    9e5c:	90800017 	ldw	r2,0(r18)
    9e60:	a021883a 	mov	r16,r20
    9e64:	1d07c83a 	sub	r3,r3,r20
    9e68:	1505883a 	add	r2,r2,r20
    9e6c:	a023883a 	mov	r17,r20
    9e70:	a027883a 	mov	r19,r20
    9e74:	90c00215 	stw	r3,8(r18)
    9e78:	90800015 	stw	r2,0(r18)
    9e7c:	003f8006 	br	9c80 <__sfvwrite_r+0x200>
    9e80:	b809883a 	mov	r4,r23
    9e84:	01400284 	movi	r5,10
    9e88:	980d883a 	mov	r6,r19
    9e8c:	00034dc0 	call	34dc <memchr>
    9e90:	10001726 	beq	r2,zero,9ef0 <__sfvwrite_r+0x470>
    9e94:	15c5c83a 	sub	r2,r2,r23
    9e98:	15000044 	addi	r20,r2,1
    9e9c:	00800044 	movi	r2,1
    9ea0:	d8800015 	stw	r2,0(sp)
    9ea4:	003f9806 	br	9d08 <__sfvwrite_r+0x288>
    9ea8:	b80b883a 	mov	r5,r23
    9eac:	800d883a 	mov	r6,r16
    9eb0:	000a3180 	call	a318 <memmove>
    9eb4:	90c00017 	ldw	r3,0(r18)
    9eb8:	e009883a 	mov	r4,fp
    9ebc:	900b883a 	mov	r5,r18
    9ec0:	1c07883a 	add	r3,r3,r16
    9ec4:	90c00015 	stw	r3,0(r18)
    9ec8:	8027883a 	mov	r19,r16
    9ecc:	00091d40 	call	91d4 <_fflush_r>
    9ed0:	103f6b26 	beq	r2,zero,9c80 <__sfvwrite_r+0x200>
    9ed4:	003f7f06 	br	9cd4 <__sfvwrite_r+0x254>
    9ed8:	400b883a 	mov	r5,r8
    9edc:	e009883a 	mov	r4,fp
    9ee0:	000b6500 	call	b650 <_realloc_r>
    9ee4:	103f7626 	beq	r2,zero,9cc0 <__sfvwrite_r+0x240>
    9ee8:	1023883a 	mov	r17,r2
    9eec:	003f5006 	br	9c30 <__sfvwrite_r+0x1b0>
    9ef0:	00c00044 	movi	r3,1
    9ef4:	9d000044 	addi	r20,r19,1
    9ef8:	d8c00015 	stw	r3,0(sp)
    9efc:	003f8206 	br	9d08 <__sfvwrite_r+0x288>
    9f00:	9080030b 	ldhu	r2,12(r18)
    9f04:	00c00244 	movi	r3,9
    9f08:	013fffc4 	movi	r4,-1
    9f0c:	10801014 	ori	r2,r2,64
    9f10:	9080030d 	sth	r2,12(r18)
    9f14:	e0c00015 	stw	r3,0(fp)
    9f18:	003f0606 	br	9b34 <__sfvwrite_r+0xb4>

00009f1c <iswspace>:
    9f1c:	00803fc4 	movi	r2,255
    9f20:	0007883a 	mov	r3,zero
    9f24:	11000636 	bltu	r2,r4,9f40 <iswspace+0x24>
    9f28:	00800074 	movhi	r2,1
    9f2c:	109a7c04 	addi	r2,r2,27120
    9f30:	10c00017 	ldw	r3,0(r2)
    9f34:	1907883a 	add	r3,r3,r4
    9f38:	18800003 	ldbu	r2,0(r3)
    9f3c:	10c0020c 	andi	r3,r2,8
    9f40:	1805883a 	mov	r2,r3
    9f44:	f800283a 	ret

00009f48 <__locale_charset>:
    9f48:	d0a00617 	ldw	r2,-32744(gp)
    9f4c:	f800283a 	ret

00009f50 <_localeconv_r>:
    9f50:	00800074 	movhi	r2,1
    9f54:	10931404 	addi	r2,r2,19536
    9f58:	f800283a 	ret

00009f5c <localeconv>:
    9f5c:	00800074 	movhi	r2,1
    9f60:	109a7d04 	addi	r2,r2,27124
    9f64:	11000017 	ldw	r4,0(r2)
    9f68:	0009f501 	jmpi	9f50 <_localeconv_r>

00009f6c <_setlocale_r>:
    9f6c:	defffc04 	addi	sp,sp,-16
    9f70:	00c00074 	movhi	r3,1
    9f74:	18d2e004 	addi	r3,r3,19328
    9f78:	dc800215 	stw	r18,8(sp)
    9f7c:	dc400115 	stw	r17,4(sp)
    9f80:	dc000015 	stw	r16,0(sp)
    9f84:	2023883a 	mov	r17,r4
    9f88:	2825883a 	mov	r18,r5
    9f8c:	dfc00315 	stw	ra,12(sp)
    9f90:	3021883a 	mov	r16,r6
    9f94:	3009883a 	mov	r4,r6
    9f98:	180b883a 	mov	r5,r3
    9f9c:	30000926 	beq	r6,zero,9fc4 <_setlocale_r+0x58>
    9fa0:	0003e5c0 	call	3e5c <strcmp>
    9fa4:	8009883a 	mov	r4,r16
    9fa8:	01400074 	movhi	r5,1
    9fac:	2952f104 	addi	r5,r5,19396
    9fb0:	10000b1e 	bne	r2,zero,9fe0 <_setlocale_r+0x74>
    9fb4:	8c000d15 	stw	r16,52(r17)
    9fb8:	8c800c15 	stw	r18,48(r17)
    9fbc:	00c00074 	movhi	r3,1
    9fc0:	18d2e004 	addi	r3,r3,19328
    9fc4:	1805883a 	mov	r2,r3
    9fc8:	dfc00317 	ldw	ra,12(sp)
    9fcc:	dc800217 	ldw	r18,8(sp)
    9fd0:	dc400117 	ldw	r17,4(sp)
    9fd4:	dc000017 	ldw	r16,0(sp)
    9fd8:	dec00404 	addi	sp,sp,16
    9fdc:	f800283a 	ret
    9fe0:	0003e5c0 	call	3e5c <strcmp>
    9fe4:	0007883a 	mov	r3,zero
    9fe8:	103ff226 	beq	r2,zero,9fb4 <_setlocale_r+0x48>
    9fec:	003ff506 	br	9fc4 <_setlocale_r+0x58>

00009ff0 <setlocale>:
    9ff0:	01800074 	movhi	r6,1
    9ff4:	319a7d04 	addi	r6,r6,27124
    9ff8:	2007883a 	mov	r3,r4
    9ffc:	31000017 	ldw	r4,0(r6)
    a000:	280d883a 	mov	r6,r5
    a004:	180b883a 	mov	r5,r3
    a008:	0009f6c1 	jmpi	9f6c <_setlocale_r>

0000a00c <_lseek_r>:
    a00c:	defffd04 	addi	sp,sp,-12
    a010:	dc000015 	stw	r16,0(sp)
    a014:	040000b4 	movhi	r16,2
    a018:	84214e04 	addi	r16,r16,-31432
    a01c:	dc400115 	stw	r17,4(sp)
    a020:	80000015 	stw	zero,0(r16)
    a024:	2023883a 	mov	r17,r4
    a028:	2809883a 	mov	r4,r5
    a02c:	300b883a 	mov	r5,r6
    a030:	380d883a 	mov	r6,r7
    a034:	dfc00215 	stw	ra,8(sp)
    a038:	0011d5c0 	call	11d5c <lseek>
    a03c:	1007883a 	mov	r3,r2
    a040:	00bfffc4 	movi	r2,-1
    a044:	18800626 	beq	r3,r2,a060 <_lseek_r+0x54>
    a048:	1805883a 	mov	r2,r3
    a04c:	dfc00217 	ldw	ra,8(sp)
    a050:	dc400117 	ldw	r17,4(sp)
    a054:	dc000017 	ldw	r16,0(sp)
    a058:	dec00304 	addi	sp,sp,12
    a05c:	f800283a 	ret
    a060:	80800017 	ldw	r2,0(r16)
    a064:	103ff826 	beq	r2,zero,a048 <_lseek_r+0x3c>
    a068:	88800015 	stw	r2,0(r17)
    a06c:	1805883a 	mov	r2,r3
    a070:	dfc00217 	ldw	ra,8(sp)
    a074:	dc400117 	ldw	r17,4(sp)
    a078:	dc000017 	ldw	r16,0(sp)
    a07c:	dec00304 	addi	sp,sp,12
    a080:	f800283a 	ret

0000a084 <__smakebuf_r>:
    a084:	2880030b 	ldhu	r2,12(r5)
    a088:	deffed04 	addi	sp,sp,-76
    a08c:	dc401015 	stw	r17,64(sp)
    a090:	1080008c 	andi	r2,r2,2
    a094:	dc000f15 	stw	r16,60(sp)
    a098:	dfc01215 	stw	ra,72(sp)
    a09c:	dc801115 	stw	r18,68(sp)
    a0a0:	2821883a 	mov	r16,r5
    a0a4:	2023883a 	mov	r17,r4
    a0a8:	10000b26 	beq	r2,zero,a0d8 <__smakebuf_r+0x54>
    a0ac:	28c010c4 	addi	r3,r5,67
    a0b0:	00800044 	movi	r2,1
    a0b4:	28800515 	stw	r2,20(r5)
    a0b8:	28c00415 	stw	r3,16(r5)
    a0bc:	28c00015 	stw	r3,0(r5)
    a0c0:	dfc01217 	ldw	ra,72(sp)
    a0c4:	dc801117 	ldw	r18,68(sp)
    a0c8:	dc401017 	ldw	r17,64(sp)
    a0cc:	dc000f17 	ldw	r16,60(sp)
    a0d0:	dec01304 	addi	sp,sp,76
    a0d4:	f800283a 	ret
    a0d8:	2940038f 	ldh	r5,14(r5)
    a0dc:	28002116 	blt	r5,zero,a164 <__smakebuf_r+0xe0>
    a0e0:	d80d883a 	mov	r6,sp
    a0e4:	000e3400 	call	e340 <_fstat_r>
    a0e8:	10001e16 	blt	r2,zero,a164 <__smakebuf_r+0xe0>
    a0ec:	d8800117 	ldw	r2,4(sp)
    a0f0:	00e00014 	movui	r3,32768
    a0f4:	113c000c 	andi	r4,r2,61440
    a0f8:	20c03126 	beq	r4,r3,a1c0 <__smakebuf_r+0x13c>
    a0fc:	8080030b 	ldhu	r2,12(r16)
    a100:	00c80004 	movi	r3,8192
    a104:	10820014 	ori	r2,r2,2048
    a108:	8080030d 	sth	r2,12(r16)
    a10c:	20c01e26 	beq	r4,r3,a188 <__smakebuf_r+0x104>
    a110:	04810004 	movi	r18,1024
    a114:	8809883a 	mov	r4,r17
    a118:	900b883a 	mov	r5,r18
    a11c:	0002d9c0 	call	2d9c <_malloc_r>
    a120:	1009883a 	mov	r4,r2
    a124:	10003126 	beq	r2,zero,a1ec <__smakebuf_r+0x168>
    a128:	80c0030b 	ldhu	r3,12(r16)
    a12c:	00800034 	movhi	r2,0
    a130:	108aaa04 	addi	r2,r2,10920
    a134:	88800f15 	stw	r2,60(r17)
    a138:	18c02014 	ori	r3,r3,128
    a13c:	84800515 	stw	r18,20(r16)
    a140:	80c0030d 	sth	r3,12(r16)
    a144:	81000415 	stw	r4,16(r16)
    a148:	81000015 	stw	r4,0(r16)
    a14c:	dfc01217 	ldw	ra,72(sp)
    a150:	dc801117 	ldw	r18,68(sp)
    a154:	dc401017 	ldw	r17,64(sp)
    a158:	dc000f17 	ldw	r16,60(sp)
    a15c:	dec01304 	addi	sp,sp,76
    a160:	f800283a 	ret
    a164:	80c0030b 	ldhu	r3,12(r16)
    a168:	1880200c 	andi	r2,r3,128
    a16c:	10000426 	beq	r2,zero,a180 <__smakebuf_r+0xfc>
    a170:	04801004 	movi	r18,64
    a174:	18820014 	ori	r2,r3,2048
    a178:	8080030d 	sth	r2,12(r16)
    a17c:	003fe506 	br	a114 <__smakebuf_r+0x90>
    a180:	04810004 	movi	r18,1024
    a184:	003ffb06 	br	a174 <__smakebuf_r+0xf0>
    a188:	8140038f 	ldh	r5,14(r16)
    a18c:	8809883a 	mov	r4,r17
    a190:	000ef3c0 	call	ef3c <_isatty_r>
    a194:	103fde26 	beq	r2,zero,a110 <__smakebuf_r+0x8c>
    a198:	8080030b 	ldhu	r2,12(r16)
    a19c:	80c010c4 	addi	r3,r16,67
    a1a0:	04810004 	movi	r18,1024
    a1a4:	10800054 	ori	r2,r2,1
    a1a8:	8080030d 	sth	r2,12(r16)
    a1ac:	00800044 	movi	r2,1
    a1b0:	80c00415 	stw	r3,16(r16)
    a1b4:	80800515 	stw	r2,20(r16)
    a1b8:	80c00015 	stw	r3,0(r16)
    a1bc:	003fd506 	br	a114 <__smakebuf_r+0x90>
    a1c0:	80c00a17 	ldw	r3,40(r16)
    a1c4:	00800034 	movhi	r2,0
    a1c8:	108f2204 	addi	r2,r2,15496
    a1cc:	18bfcb1e 	bne	r3,r2,a0fc <__smakebuf_r+0x78>
    a1d0:	8080030b 	ldhu	r2,12(r16)
    a1d4:	00c10004 	movi	r3,1024
    a1d8:	1825883a 	mov	r18,r3
    a1dc:	10c4b03a 	or	r2,r2,r3
    a1e0:	8080030d 	sth	r2,12(r16)
    a1e4:	80c01315 	stw	r3,76(r16)
    a1e8:	003fca06 	br	a114 <__smakebuf_r+0x90>
    a1ec:	8100030b 	ldhu	r4,12(r16)
    a1f0:	2080800c 	andi	r2,r4,512
    a1f4:	103fb21e 	bne	r2,zero,a0c0 <__smakebuf_r+0x3c>
    a1f8:	80c010c4 	addi	r3,r16,67
    a1fc:	21000094 	ori	r4,r4,2
    a200:	00800044 	movi	r2,1
    a204:	80800515 	stw	r2,20(r16)
    a208:	8100030d 	sth	r4,12(r16)
    a20c:	80c00415 	stw	r3,16(r16)
    a210:	80c00015 	stw	r3,0(r16)
    a214:	003faa06 	br	a0c0 <__smakebuf_r+0x3c>

0000a218 <_mbrtowc_r>:
    a218:	defffc04 	addi	sp,sp,-16
    a21c:	dc400215 	stw	r17,8(sp)
    a220:	dc000115 	stw	r16,4(sp)
    a224:	dfc00315 	stw	ra,12(sp)
    a228:	dc000417 	ldw	r16,16(sp)
    a22c:	2023883a 	mov	r17,r4
    a230:	30000f26 	beq	r6,zero,a270 <_mbrtowc_r+0x58>
    a234:	dc000015 	stw	r16,0(sp)
    a238:	000a2d80 	call	a2d8 <_mbtowc_r>
    a23c:	1007883a 	mov	r3,r2
    a240:	00bfffc4 	movi	r2,-1
    a244:	1809883a 	mov	r4,r3
    a248:	1880111e 	bne	r3,r2,a290 <_mbrtowc_r+0x78>
    a24c:	80000015 	stw	zero,0(r16)
    a250:	00802284 	movi	r2,138
    a254:	88800015 	stw	r2,0(r17)
    a258:	2005883a 	mov	r2,r4
    a25c:	dfc00317 	ldw	ra,12(sp)
    a260:	dc400217 	ldw	r17,8(sp)
    a264:	dc000117 	ldw	r16,4(sp)
    a268:	dec00404 	addi	sp,sp,16
    a26c:	f800283a 	ret
    a270:	000b883a 	mov	r5,zero
    a274:	01800074 	movhi	r6,1
    a278:	3192f104 	addi	r6,r6,19396
    a27c:	01c00044 	movi	r7,1
    a280:	dc000015 	stw	r16,0(sp)
    a284:	000a2d80 	call	a2d8 <_mbtowc_r>
    a288:	1007883a 	mov	r3,r2
    a28c:	003fec06 	br	a240 <_mbrtowc_r+0x28>
    a290:	1809883a 	mov	r4,r3
    a294:	003ff006 	br	a258 <_mbrtowc_r+0x40>

0000a298 <mbrtowc>:
    a298:	00800074 	movhi	r2,1
    a29c:	109a7d04 	addi	r2,r2,27124
    a2a0:	2017883a 	mov	r11,r4
    a2a4:	11000017 	ldw	r4,0(r2)
    a2a8:	defffe04 	addi	sp,sp,-8
    a2ac:	3013883a 	mov	r9,r6
    a2b0:	2805883a 	mov	r2,r5
    a2b4:	d9c00015 	stw	r7,0(sp)
    a2b8:	580b883a 	mov	r5,r11
    a2bc:	100d883a 	mov	r6,r2
    a2c0:	480f883a 	mov	r7,r9
    a2c4:	dfc00115 	stw	ra,4(sp)
    a2c8:	000a2180 	call	a218 <_mbrtowc_r>
    a2cc:	dfc00117 	ldw	ra,4(sp)
    a2d0:	dec00204 	addi	sp,sp,8
    a2d4:	f800283a 	ret

0000a2d8 <_mbtowc_r>:
    a2d8:	deffff04 	addi	sp,sp,-4
    a2dc:	0005883a 	mov	r2,zero
    a2e0:	28000326 	beq	r5,zero,a2f0 <_mbtowc_r+0x18>
    a2e4:	3000041e 	bne	r6,zero,a2f8 <_mbtowc_r+0x20>
    a2e8:	dec00104 	addi	sp,sp,4
    a2ec:	f800283a 	ret
    a2f0:	d80b883a 	mov	r5,sp
    a2f4:	303ffc26 	beq	r6,zero,a2e8 <_mbtowc_r+0x10>
    a2f8:	00bfff84 	movi	r2,-2
    a2fc:	383ffa26 	beq	r7,zero,a2e8 <_mbtowc_r+0x10>
    a300:	30800003 	ldbu	r2,0(r6)
    a304:	28800015 	stw	r2,0(r5)
    a308:	30c00003 	ldbu	r3,0(r6)
    a30c:	1804c03a 	cmpne	r2,r3,zero
    a310:	dec00104 	addi	sp,sp,4
    a314:	f800283a 	ret

0000a318 <memmove>:
    a318:	2807883a 	mov	r3,r5
    a31c:	2011883a 	mov	r8,r4
    a320:	29000c2e 	bgeu	r5,r4,a354 <memmove+0x3c>
    a324:	298f883a 	add	r7,r5,r6
    a328:	21c00a2e 	bgeu	r4,r7,a354 <memmove+0x3c>
    a32c:	30000726 	beq	r6,zero,a34c <memmove+0x34>
    a330:	2187883a 	add	r3,r4,r6
    a334:	198dc83a 	sub	r6,r3,r6
    a338:	39ffffc4 	addi	r7,r7,-1
    a33c:	38800003 	ldbu	r2,0(r7)
    a340:	18ffffc4 	addi	r3,r3,-1
    a344:	18800005 	stb	r2,0(r3)
    a348:	19bffb1e 	bne	r3,r6,a338 <memmove+0x20>
    a34c:	2005883a 	mov	r2,r4
    a350:	f800283a 	ret
    a354:	01c003c4 	movi	r7,15
    a358:	39800a36 	bltu	r7,r6,a384 <memmove+0x6c>
    a35c:	303ffb26 	beq	r6,zero,a34c <memmove+0x34>
    a360:	400f883a 	mov	r7,r8
    a364:	320d883a 	add	r6,r6,r8
    a368:	28800003 	ldbu	r2,0(r5)
    a36c:	29400044 	addi	r5,r5,1
    a370:	38800005 	stb	r2,0(r7)
    a374:	39c00044 	addi	r7,r7,1
    a378:	39bffb1e 	bne	r7,r6,a368 <memmove+0x50>
    a37c:	2005883a 	mov	r2,r4
    a380:	f800283a 	ret
    a384:	1904b03a 	or	r2,r3,r4
    a388:	108000cc 	andi	r2,r2,3
    a38c:	103ff31e 	bne	r2,zero,a35c <memmove+0x44>
    a390:	3811883a 	mov	r8,r7
    a394:	180b883a 	mov	r5,r3
    a398:	200f883a 	mov	r7,r4
    a39c:	28c00017 	ldw	r3,0(r5)
    a3a0:	31bffc04 	addi	r6,r6,-16
    a3a4:	38c00015 	stw	r3,0(r7)
    a3a8:	28800117 	ldw	r2,4(r5)
    a3ac:	38800115 	stw	r2,4(r7)
    a3b0:	28c00217 	ldw	r3,8(r5)
    a3b4:	38c00215 	stw	r3,8(r7)
    a3b8:	28800317 	ldw	r2,12(r5)
    a3bc:	29400404 	addi	r5,r5,16
    a3c0:	38800315 	stw	r2,12(r7)
    a3c4:	39c00404 	addi	r7,r7,16
    a3c8:	41bff436 	bltu	r8,r6,a39c <memmove+0x84>
    a3cc:	008000c4 	movi	r2,3
    a3d0:	1180072e 	bgeu	r2,r6,a3f0 <memmove+0xd8>
    a3d4:	1007883a 	mov	r3,r2
    a3d8:	28800017 	ldw	r2,0(r5)
    a3dc:	31bfff04 	addi	r6,r6,-4
    a3e0:	29400104 	addi	r5,r5,4
    a3e4:	38800015 	stw	r2,0(r7)
    a3e8:	39c00104 	addi	r7,r7,4
    a3ec:	19bffa36 	bltu	r3,r6,a3d8 <memmove+0xc0>
    a3f0:	3811883a 	mov	r8,r7
    a3f4:	003fd906 	br	a35c <memmove+0x44>

0000a3f8 <_Bfree>:
    a3f8:	28000826 	beq	r5,zero,a41c <_Bfree+0x24>
    a3fc:	28800117 	ldw	r2,4(r5)
    a400:	21001317 	ldw	r4,76(r4)
    a404:	1085883a 	add	r2,r2,r2
    a408:	1085883a 	add	r2,r2,r2
    a40c:	1105883a 	add	r2,r2,r4
    a410:	10c00017 	ldw	r3,0(r2)
    a414:	28c00015 	stw	r3,0(r5)
    a418:	11400015 	stw	r5,0(r2)
    a41c:	f800283a 	ret

0000a420 <__hi0bits>:
    a420:	20bfffec 	andhi	r2,r4,65535
    a424:	10001426 	beq	r2,zero,a478 <__hi0bits+0x58>
    a428:	0007883a 	mov	r3,zero
    a42c:	20bfc02c 	andhi	r2,r4,65280
    a430:	1000021e 	bne	r2,zero,a43c <__hi0bits+0x1c>
    a434:	2008923a 	slli	r4,r4,8
    a438:	18c00204 	addi	r3,r3,8
    a43c:	20bc002c 	andhi	r2,r4,61440
    a440:	1000021e 	bne	r2,zero,a44c <__hi0bits+0x2c>
    a444:	2008913a 	slli	r4,r4,4
    a448:	18c00104 	addi	r3,r3,4
    a44c:	20b0002c 	andhi	r2,r4,49152
    a450:	1000031e 	bne	r2,zero,a460 <__hi0bits+0x40>
    a454:	2105883a 	add	r2,r4,r4
    a458:	18c00084 	addi	r3,r3,2
    a45c:	1089883a 	add	r4,r2,r2
    a460:	20000316 	blt	r4,zero,a470 <__hi0bits+0x50>
    a464:	2090002c 	andhi	r2,r4,16384
    a468:	10000626 	beq	r2,zero,a484 <__hi0bits+0x64>
    a46c:	18c00044 	addi	r3,r3,1
    a470:	1805883a 	mov	r2,r3
    a474:	f800283a 	ret
    a478:	2008943a 	slli	r4,r4,16
    a47c:	00c00404 	movi	r3,16
    a480:	003fea06 	br	a42c <__hi0bits+0xc>
    a484:	00c00804 	movi	r3,32
    a488:	1805883a 	mov	r2,r3
    a48c:	f800283a 	ret

0000a490 <__lo0bits>:
    a490:	20c00017 	ldw	r3,0(r4)
    a494:	188001cc 	andi	r2,r3,7
    a498:	10000a26 	beq	r2,zero,a4c4 <__lo0bits+0x34>
    a49c:	1880004c 	andi	r2,r3,1
    a4a0:	1005003a 	cmpeq	r2,r2,zero
    a4a4:	10002126 	beq	r2,zero,a52c <__lo0bits+0x9c>
    a4a8:	1880008c 	andi	r2,r3,2
    a4ac:	1000251e 	bne	r2,zero,a544 <__lo0bits+0xb4>
    a4b0:	1804d0ba 	srli	r2,r3,2
    a4b4:	01400084 	movi	r5,2
    a4b8:	20800015 	stw	r2,0(r4)
    a4bc:	2805883a 	mov	r2,r5
    a4c0:	f800283a 	ret
    a4c4:	18bfffcc 	andi	r2,r3,65535
    a4c8:	10001526 	beq	r2,zero,a520 <__lo0bits+0x90>
    a4cc:	000b883a 	mov	r5,zero
    a4d0:	18803fcc 	andi	r2,r3,255
    a4d4:	1000021e 	bne	r2,zero,a4e0 <__lo0bits+0x50>
    a4d8:	1806d23a 	srli	r3,r3,8
    a4dc:	29400204 	addi	r5,r5,8
    a4e0:	188003cc 	andi	r2,r3,15
    a4e4:	1000021e 	bne	r2,zero,a4f0 <__lo0bits+0x60>
    a4e8:	1806d13a 	srli	r3,r3,4
    a4ec:	29400104 	addi	r5,r5,4
    a4f0:	188000cc 	andi	r2,r3,3
    a4f4:	1000021e 	bne	r2,zero,a500 <__lo0bits+0x70>
    a4f8:	1806d0ba 	srli	r3,r3,2
    a4fc:	29400084 	addi	r5,r5,2
    a500:	1880004c 	andi	r2,r3,1
    a504:	1000031e 	bne	r2,zero,a514 <__lo0bits+0x84>
    a508:	1806d07a 	srli	r3,r3,1
    a50c:	18000a26 	beq	r3,zero,a538 <__lo0bits+0xa8>
    a510:	29400044 	addi	r5,r5,1
    a514:	2805883a 	mov	r2,r5
    a518:	20c00015 	stw	r3,0(r4)
    a51c:	f800283a 	ret
    a520:	1806d43a 	srli	r3,r3,16
    a524:	01400404 	movi	r5,16
    a528:	003fe906 	br	a4d0 <__lo0bits+0x40>
    a52c:	000b883a 	mov	r5,zero
    a530:	2805883a 	mov	r2,r5
    a534:	f800283a 	ret
    a538:	01400804 	movi	r5,32
    a53c:	2805883a 	mov	r2,r5
    a540:	f800283a 	ret
    a544:	1804d07a 	srli	r2,r3,1
    a548:	01400044 	movi	r5,1
    a54c:	20800015 	stw	r2,0(r4)
    a550:	003fda06 	br	a4bc <__lo0bits+0x2c>

0000a554 <__mcmp>:
    a554:	20800417 	ldw	r2,16(r4)
    a558:	28c00417 	ldw	r3,16(r5)
    a55c:	10cfc83a 	sub	r7,r2,r3
    a560:	38000c1e 	bne	r7,zero,a594 <__mcmp+0x40>
    a564:	18c5883a 	add	r2,r3,r3
    a568:	1085883a 	add	r2,r2,r2
    a56c:	10c00504 	addi	r3,r2,20
    a570:	21000504 	addi	r4,r4,20
    a574:	28cb883a 	add	r5,r5,r3
    a578:	2085883a 	add	r2,r4,r2
    a57c:	10bfff04 	addi	r2,r2,-4
    a580:	297fff04 	addi	r5,r5,-4
    a584:	11800017 	ldw	r6,0(r2)
    a588:	28c00017 	ldw	r3,0(r5)
    a58c:	30c0031e 	bne	r6,r3,a59c <__mcmp+0x48>
    a590:	20bffa36 	bltu	r4,r2,a57c <__mcmp+0x28>
    a594:	3805883a 	mov	r2,r7
    a598:	f800283a 	ret
    a59c:	30c00336 	bltu	r6,r3,a5ac <__mcmp+0x58>
    a5a0:	01c00044 	movi	r7,1
    a5a4:	3805883a 	mov	r2,r7
    a5a8:	f800283a 	ret
    a5ac:	01ffffc4 	movi	r7,-1
    a5b0:	003ff806 	br	a594 <__mcmp+0x40>

0000a5b4 <__ulp>:
    a5b4:	295ffc2c 	andhi	r5,r5,32752
    a5b8:	013f3034 	movhi	r4,64704
    a5bc:	290b883a 	add	r5,r5,r4
    a5c0:	0145c83a 	sub	r2,zero,r5
    a5c4:	1007d53a 	srai	r3,r2,20
    a5c8:	000d883a 	mov	r6,zero
    a5cc:	0140040e 	bge	zero,r5,a5e0 <__ulp+0x2c>
    a5d0:	280f883a 	mov	r7,r5
    a5d4:	3807883a 	mov	r3,r7
    a5d8:	3005883a 	mov	r2,r6
    a5dc:	f800283a 	ret
    a5e0:	008004c4 	movi	r2,19
    a5e4:	193ffb04 	addi	r4,r3,-20
    a5e8:	10c00c0e 	bge	r2,r3,a61c <__ulp+0x68>
    a5ec:	008007c4 	movi	r2,31
    a5f0:	1107c83a 	sub	r3,r2,r4
    a5f4:	00800784 	movi	r2,30
    a5f8:	01400044 	movi	r5,1
    a5fc:	11000216 	blt	r2,r4,a608 <__ulp+0x54>
    a600:	00800044 	movi	r2,1
    a604:	10ca983a 	sll	r5,r2,r3
    a608:	000f883a 	mov	r7,zero
    a60c:	280d883a 	mov	r6,r5
    a610:	3807883a 	mov	r3,r7
    a614:	3005883a 	mov	r2,r6
    a618:	f800283a 	ret
    a61c:	00800234 	movhi	r2,8
    a620:	10cfd83a 	sra	r7,r2,r3
    a624:	000d883a 	mov	r6,zero
    a628:	3005883a 	mov	r2,r6
    a62c:	3807883a 	mov	r3,r7
    a630:	f800283a 	ret

0000a634 <__b2d>:
    a634:	20800417 	ldw	r2,16(r4)
    a638:	defff904 	addi	sp,sp,-28
    a63c:	dd000415 	stw	r20,16(sp)
    a640:	1085883a 	add	r2,r2,r2
    a644:	25000504 	addi	r20,r4,20
    a648:	1085883a 	add	r2,r2,r2
    a64c:	dc000015 	stw	r16,0(sp)
    a650:	a0a1883a 	add	r16,r20,r2
    a654:	dd400515 	stw	r21,20(sp)
    a658:	857fff17 	ldw	r21,-4(r16)
    a65c:	dc400115 	stw	r17,4(sp)
    a660:	dfc00615 	stw	ra,24(sp)
    a664:	a809883a 	mov	r4,r21
    a668:	2823883a 	mov	r17,r5
    a66c:	dcc00315 	stw	r19,12(sp)
    a670:	dc800215 	stw	r18,8(sp)
    a674:	000a4200 	call	a420 <__hi0bits>
    a678:	100b883a 	mov	r5,r2
    a67c:	00800804 	movi	r2,32
    a680:	1145c83a 	sub	r2,r2,r5
    a684:	88800015 	stw	r2,0(r17)
    a688:	00800284 	movi	r2,10
    a68c:	80ffff04 	addi	r3,r16,-4
    a690:	11401416 	blt	r2,r5,a6e4 <__b2d+0xb0>
    a694:	008002c4 	movi	r2,11
    a698:	1149c83a 	sub	r4,r2,r5
    a69c:	a0c02736 	bltu	r20,r3,a73c <__b2d+0x108>
    a6a0:	000d883a 	mov	r6,zero
    a6a4:	28800544 	addi	r2,r5,21
    a6a8:	a906d83a 	srl	r3,r21,r4
    a6ac:	a884983a 	sll	r2,r21,r2
    a6b0:	1ccffc34 	orhi	r19,r3,16368
    a6b4:	11a4b03a 	or	r18,r2,r6
    a6b8:	9005883a 	mov	r2,r18
    a6bc:	9807883a 	mov	r3,r19
    a6c0:	dfc00617 	ldw	ra,24(sp)
    a6c4:	dd400517 	ldw	r21,20(sp)
    a6c8:	dd000417 	ldw	r20,16(sp)
    a6cc:	dcc00317 	ldw	r19,12(sp)
    a6d0:	dc800217 	ldw	r18,8(sp)
    a6d4:	dc400117 	ldw	r17,4(sp)
    a6d8:	dc000017 	ldw	r16,0(sp)
    a6dc:	dec00704 	addi	sp,sp,28
    a6e0:	f800283a 	ret
    a6e4:	a0c00e36 	bltu	r20,r3,a720 <__b2d+0xec>
    a6e8:	293ffd44 	addi	r4,r5,-11
    a6ec:	000d883a 	mov	r6,zero
    a6f0:	20000f26 	beq	r4,zero,a730 <__b2d+0xfc>
    a6f4:	00800804 	movi	r2,32
    a6f8:	110bc83a 	sub	r5,r2,r4
    a6fc:	a0c01236 	bltu	r20,r3,a748 <__b2d+0x114>
    a700:	000f883a 	mov	r7,zero
    a704:	a904983a 	sll	r2,r21,r4
    a708:	3146d83a 	srl	r3,r6,r5
    a70c:	3108983a 	sll	r4,r6,r4
    a710:	108ffc34 	orhi	r2,r2,16368
    a714:	18a6b03a 	or	r19,r3,r2
    a718:	3924b03a 	or	r18,r7,r4
    a71c:	003fe606 	br	a6b8 <__b2d+0x84>
    a720:	293ffd44 	addi	r4,r5,-11
    a724:	81bffe17 	ldw	r6,-8(r16)
    a728:	80fffe04 	addi	r3,r16,-8
    a72c:	203ff11e 	bne	r4,zero,a6f4 <__b2d+0xc0>
    a730:	accffc34 	orhi	r19,r21,16368
    a734:	3025883a 	mov	r18,r6
    a738:	003fdf06 	br	a6b8 <__b2d+0x84>
    a73c:	18bfff17 	ldw	r2,-4(r3)
    a740:	110cd83a 	srl	r6,r2,r4
    a744:	003fd706 	br	a6a4 <__b2d+0x70>
    a748:	18bfff17 	ldw	r2,-4(r3)
    a74c:	114ed83a 	srl	r7,r2,r5
    a750:	003fec06 	br	a704 <__b2d+0xd0>

0000a754 <__ratio>:
    a754:	defff904 	addi	sp,sp,-28
    a758:	dc400215 	stw	r17,8(sp)
    a75c:	2823883a 	mov	r17,r5
    a760:	d80b883a 	mov	r5,sp
    a764:	dfc00615 	stw	ra,24(sp)
    a768:	dd000515 	stw	r20,20(sp)
    a76c:	dcc00415 	stw	r19,16(sp)
    a770:	dc800315 	stw	r18,12(sp)
    a774:	2025883a 	mov	r18,r4
    a778:	000a6340 	call	a634 <__b2d>
    a77c:	8809883a 	mov	r4,r17
    a780:	d9400104 	addi	r5,sp,4
    a784:	1027883a 	mov	r19,r2
    a788:	1829883a 	mov	r20,r3
    a78c:	000a6340 	call	a634 <__b2d>
    a790:	89000417 	ldw	r4,16(r17)
    a794:	91c00417 	ldw	r7,16(r18)
    a798:	d9800117 	ldw	r6,4(sp)
    a79c:	180b883a 	mov	r5,r3
    a7a0:	390fc83a 	sub	r7,r7,r4
    a7a4:	1009883a 	mov	r4,r2
    a7a8:	d8800017 	ldw	r2,0(sp)
    a7ac:	380e917a 	slli	r7,r7,5
    a7b0:	2011883a 	mov	r8,r4
    a7b4:	1185c83a 	sub	r2,r2,r6
    a7b8:	11c5883a 	add	r2,r2,r7
    a7bc:	1006953a 	slli	r3,r2,20
    a7c0:	2813883a 	mov	r9,r5
    a7c4:	00800d0e 	bge	zero,r2,a7fc <__ratio+0xa8>
    a7c8:	1d29883a 	add	r20,r3,r20
    a7cc:	a00b883a 	mov	r5,r20
    a7d0:	480f883a 	mov	r7,r9
    a7d4:	9809883a 	mov	r4,r19
    a7d8:	400d883a 	mov	r6,r8
    a7dc:	00106a40 	call	106a4 <__divdf3>
    a7e0:	dfc00617 	ldw	ra,24(sp)
    a7e4:	dd000517 	ldw	r20,20(sp)
    a7e8:	dcc00417 	ldw	r19,16(sp)
    a7ec:	dc800317 	ldw	r18,12(sp)
    a7f0:	dc400217 	ldw	r17,8(sp)
    a7f4:	dec00704 	addi	sp,sp,28
    a7f8:	f800283a 	ret
    a7fc:	28d3c83a 	sub	r9,r5,r3
    a800:	003ff206 	br	a7cc <__ratio+0x78>

0000a804 <_mprec_log10>:
    a804:	defffe04 	addi	sp,sp,-8
    a808:	008005c4 	movi	r2,23
    a80c:	dc000015 	stw	r16,0(sp)
    a810:	dfc00115 	stw	ra,4(sp)
    a814:	2021883a 	mov	r16,r4
    a818:	11000c16 	blt	r2,r4,a84c <_mprec_log10+0x48>
    a81c:	200490fa 	slli	r2,r4,3
    a820:	00c00074 	movhi	r3,1
    a824:	18d32004 	addi	r3,r3,19584
    a828:	10c5883a 	add	r2,r2,r3
    a82c:	12400117 	ldw	r9,4(r2)
    a830:	12000017 	ldw	r8,0(r2)
    a834:	4807883a 	mov	r3,r9
    a838:	4005883a 	mov	r2,r8
    a83c:	dfc00117 	ldw	ra,4(sp)
    a840:	dc000017 	ldw	r16,0(sp)
    a844:	dec00204 	addi	sp,sp,8
    a848:	f800283a 	ret
    a84c:	0011883a 	mov	r8,zero
    a850:	024ffc34 	movhi	r9,16368
    a854:	0005883a 	mov	r2,zero
    a858:	00d00934 	movhi	r3,16420
    a85c:	480b883a 	mov	r5,r9
    a860:	4009883a 	mov	r4,r8
    a864:	180f883a 	mov	r7,r3
    a868:	100d883a 	mov	r6,r2
    a86c:	00102e00 	call	102e0 <__muldf3>
    a870:	843fffc4 	addi	r16,r16,-1
    a874:	1011883a 	mov	r8,r2
    a878:	1813883a 	mov	r9,r3
    a87c:	803ff51e 	bne	r16,zero,a854 <_mprec_log10+0x50>
    a880:	4005883a 	mov	r2,r8
    a884:	4807883a 	mov	r3,r9
    a888:	dfc00117 	ldw	ra,4(sp)
    a88c:	dc000017 	ldw	r16,0(sp)
    a890:	dec00204 	addi	sp,sp,8
    a894:	f800283a 	ret

0000a898 <__copybits>:
    a898:	297fffc4 	addi	r5,r5,-1
    a89c:	30800417 	ldw	r2,16(r6)
    a8a0:	280bd17a 	srai	r5,r5,5
    a8a4:	31800504 	addi	r6,r6,20
    a8a8:	1085883a 	add	r2,r2,r2
    a8ac:	294b883a 	add	r5,r5,r5
    a8b0:	294b883a 	add	r5,r5,r5
    a8b4:	1085883a 	add	r2,r2,r2
    a8b8:	290b883a 	add	r5,r5,r4
    a8bc:	3087883a 	add	r3,r6,r2
    a8c0:	29400104 	addi	r5,r5,4
    a8c4:	30c0052e 	bgeu	r6,r3,a8dc <__copybits+0x44>
    a8c8:	30800017 	ldw	r2,0(r6)
    a8cc:	31800104 	addi	r6,r6,4
    a8d0:	20800015 	stw	r2,0(r4)
    a8d4:	21000104 	addi	r4,r4,4
    a8d8:	30fffb36 	bltu	r6,r3,a8c8 <__copybits+0x30>
    a8dc:	2140032e 	bgeu	r4,r5,a8ec <__copybits+0x54>
    a8e0:	20000015 	stw	zero,0(r4)
    a8e4:	21000104 	addi	r4,r4,4
    a8e8:	217ffd36 	bltu	r4,r5,a8e0 <__copybits+0x48>
    a8ec:	f800283a 	ret

0000a8f0 <__any_on>:
    a8f0:	20800417 	ldw	r2,16(r4)
    a8f4:	2807d17a 	srai	r3,r5,5
    a8f8:	21000504 	addi	r4,r4,20
    a8fc:	10c00d0e 	bge	r2,r3,a934 <__any_on+0x44>
    a900:	1085883a 	add	r2,r2,r2
    a904:	1085883a 	add	r2,r2,r2
    a908:	208d883a 	add	r6,r4,r2
    a90c:	2180182e 	bgeu	r4,r6,a970 <__any_on+0x80>
    a910:	30bfff17 	ldw	r2,-4(r6)
    a914:	30ffff04 	addi	r3,r6,-4
    a918:	1000041e 	bne	r2,zero,a92c <__any_on+0x3c>
    a91c:	20c0142e 	bgeu	r4,r3,a970 <__any_on+0x80>
    a920:	18ffff04 	addi	r3,r3,-4
    a924:	18800017 	ldw	r2,0(r3)
    a928:	103ffc26 	beq	r2,zero,a91c <__any_on+0x2c>
    a92c:	00800044 	movi	r2,1
    a930:	f800283a 	ret
    a934:	18800a0e 	bge	r3,r2,a960 <__any_on+0x70>
    a938:	294007cc 	andi	r5,r5,31
    a93c:	28000826 	beq	r5,zero,a960 <__any_on+0x70>
    a940:	18c5883a 	add	r2,r3,r3
    a944:	1085883a 	add	r2,r2,r2
    a948:	208d883a 	add	r6,r4,r2
    a94c:	30c00017 	ldw	r3,0(r6)
    a950:	1944d83a 	srl	r2,r3,r5
    a954:	1144983a 	sll	r2,r2,r5
    a958:	18bff41e 	bne	r3,r2,a92c <__any_on+0x3c>
    a95c:	003feb06 	br	a90c <__any_on+0x1c>
    a960:	18c5883a 	add	r2,r3,r3
    a964:	1085883a 	add	r2,r2,r2
    a968:	208d883a 	add	r6,r4,r2
    a96c:	003fe706 	br	a90c <__any_on+0x1c>
    a970:	0005883a 	mov	r2,zero
    a974:	f800283a 	ret

0000a978 <_Balloc>:
    a978:	20c01317 	ldw	r3,76(r4)
    a97c:	defffb04 	addi	sp,sp,-20
    a980:	dcc00315 	stw	r19,12(sp)
    a984:	dc800215 	stw	r18,8(sp)
    a988:	dfc00415 	stw	ra,16(sp)
    a98c:	2825883a 	mov	r18,r5
    a990:	dc400115 	stw	r17,4(sp)
    a994:	dc000015 	stw	r16,0(sp)
    a998:	2027883a 	mov	r19,r4
    a99c:	01800404 	movi	r6,16
    a9a0:	01400104 	movi	r5,4
    a9a4:	18001726 	beq	r3,zero,aa04 <_Balloc+0x8c>
    a9a8:	01400044 	movi	r5,1
    a9ac:	9485883a 	add	r2,r18,r18
    a9b0:	2ca2983a 	sll	r17,r5,r18
    a9b4:	1085883a 	add	r2,r2,r2
    a9b8:	10c7883a 	add	r3,r2,r3
    a9bc:	1c000017 	ldw	r16,0(r3)
    a9c0:	8c4d883a 	add	r6,r17,r17
    a9c4:	318d883a 	add	r6,r6,r6
    a9c8:	9809883a 	mov	r4,r19
    a9cc:	31800504 	addi	r6,r6,20
    a9d0:	80001226 	beq	r16,zero,aa1c <_Balloc+0xa4>
    a9d4:	80800017 	ldw	r2,0(r16)
    a9d8:	18800015 	stw	r2,0(r3)
    a9dc:	80000415 	stw	zero,16(r16)
    a9e0:	80000315 	stw	zero,12(r16)
    a9e4:	8005883a 	mov	r2,r16
    a9e8:	dfc00417 	ldw	ra,16(sp)
    a9ec:	dcc00317 	ldw	r19,12(sp)
    a9f0:	dc800217 	ldw	r18,8(sp)
    a9f4:	dc400117 	ldw	r17,4(sp)
    a9f8:	dc000017 	ldw	r16,0(sp)
    a9fc:	dec00504 	addi	sp,sp,20
    aa00:	f800283a 	ret
    aa04:	000e28c0 	call	e28c <_calloc_r>
    aa08:	1007883a 	mov	r3,r2
    aa0c:	0021883a 	mov	r16,zero
    aa10:	98801315 	stw	r2,76(r19)
    aa14:	103fe41e 	bne	r2,zero,a9a8 <_Balloc+0x30>
    aa18:	003ff206 	br	a9e4 <_Balloc+0x6c>
    aa1c:	000e28c0 	call	e28c <_calloc_r>
    aa20:	103ff026 	beq	r2,zero,a9e4 <_Balloc+0x6c>
    aa24:	1021883a 	mov	r16,r2
    aa28:	14800115 	stw	r18,4(r2)
    aa2c:	14400215 	stw	r17,8(r2)
    aa30:	003fea06 	br	a9dc <_Balloc+0x64>

0000aa34 <__d2b>:
    aa34:	defff504 	addi	sp,sp,-44
    aa38:	dcc00515 	stw	r19,20(sp)
    aa3c:	04c00044 	movi	r19,1
    aa40:	dc000215 	stw	r16,8(sp)
    aa44:	2821883a 	mov	r16,r5
    aa48:	980b883a 	mov	r5,r19
    aa4c:	ddc00915 	stw	r23,36(sp)
    aa50:	dd800815 	stw	r22,32(sp)
    aa54:	dd400715 	stw	r21,28(sp)
    aa58:	dd000615 	stw	r20,24(sp)
    aa5c:	dc800415 	stw	r18,16(sp)
    aa60:	dc400315 	stw	r17,12(sp)
    aa64:	dfc00a15 	stw	ra,40(sp)
    aa68:	3023883a 	mov	r17,r6
    aa6c:	382d883a 	mov	r22,r7
    aa70:	ddc00b17 	ldw	r23,44(sp)
    aa74:	000a9780 	call	a978 <_Balloc>
    aa78:	1025883a 	mov	r18,r2
    aa7c:	00a00034 	movhi	r2,32768
    aa80:	10bfffc4 	addi	r2,r2,-1
    aa84:	8888703a 	and	r4,r17,r2
    aa88:	202ad53a 	srli	r21,r4,20
    aa8c:	00800434 	movhi	r2,16
    aa90:	10bfffc4 	addi	r2,r2,-1
    aa94:	8886703a 	and	r3,r17,r2
    aa98:	a829003a 	cmpeq	r20,r21,zero
    aa9c:	800b883a 	mov	r5,r16
    aaa0:	d8c00115 	stw	r3,4(sp)
    aaa4:	94000504 	addi	r16,r18,20
    aaa8:	a000021e 	bne	r20,zero,aab4 <__d2b+0x80>
    aaac:	18c00434 	orhi	r3,r3,16
    aab0:	d8c00115 	stw	r3,4(sp)
    aab4:	28002726 	beq	r5,zero,ab54 <__d2b+0x120>
    aab8:	d809883a 	mov	r4,sp
    aabc:	d9400015 	stw	r5,0(sp)
    aac0:	000a4900 	call	a490 <__lo0bits>
    aac4:	100d883a 	mov	r6,r2
    aac8:	10003526 	beq	r2,zero,aba0 <__d2b+0x16c>
    aacc:	d8c00117 	ldw	r3,4(sp)
    aad0:	00800804 	movi	r2,32
    aad4:	1185c83a 	sub	r2,r2,r6
    aad8:	d9000017 	ldw	r4,0(sp)
    aadc:	1886983a 	sll	r3,r3,r2
    aae0:	1906b03a 	or	r3,r3,r4
    aae4:	90c00515 	stw	r3,20(r18)
    aae8:	d8c00117 	ldw	r3,4(sp)
    aaec:	1986d83a 	srl	r3,r3,r6
    aaf0:	d8c00115 	stw	r3,4(sp)
    aaf4:	180b003a 	cmpeq	r5,r3,zero
    aaf8:	00800084 	movi	r2,2
    aafc:	114bc83a 	sub	r5,r2,r5
    ab00:	80c00115 	stw	r3,4(r16)
    ab04:	91400415 	stw	r5,16(r18)
    ab08:	a0001a1e 	bne	r20,zero,ab74 <__d2b+0x140>
    ab0c:	3545883a 	add	r2,r6,r21
    ab10:	10bef344 	addi	r2,r2,-1075
    ab14:	00c00d44 	movi	r3,53
    ab18:	b0800015 	stw	r2,0(r22)
    ab1c:	1987c83a 	sub	r3,r3,r6
    ab20:	b8c00015 	stw	r3,0(r23)
    ab24:	9005883a 	mov	r2,r18
    ab28:	dfc00a17 	ldw	ra,40(sp)
    ab2c:	ddc00917 	ldw	r23,36(sp)
    ab30:	dd800817 	ldw	r22,32(sp)
    ab34:	dd400717 	ldw	r21,28(sp)
    ab38:	dd000617 	ldw	r20,24(sp)
    ab3c:	dcc00517 	ldw	r19,20(sp)
    ab40:	dc800417 	ldw	r18,16(sp)
    ab44:	dc400317 	ldw	r17,12(sp)
    ab48:	dc000217 	ldw	r16,8(sp)
    ab4c:	dec00b04 	addi	sp,sp,44
    ab50:	f800283a 	ret
    ab54:	d9000104 	addi	r4,sp,4
    ab58:	000a4900 	call	a490 <__lo0bits>
    ab5c:	11800804 	addi	r6,r2,32
    ab60:	d8800117 	ldw	r2,4(sp)
    ab64:	94c00415 	stw	r19,16(r18)
    ab68:	980b883a 	mov	r5,r19
    ab6c:	90800515 	stw	r2,20(r18)
    ab70:	a03fe626 	beq	r20,zero,ab0c <__d2b+0xd8>
    ab74:	2945883a 	add	r2,r5,r5
    ab78:	1085883a 	add	r2,r2,r2
    ab7c:	1405883a 	add	r2,r2,r16
    ab80:	113fff17 	ldw	r4,-4(r2)
    ab84:	30fef384 	addi	r3,r6,-1074
    ab88:	2820917a 	slli	r16,r5,5
    ab8c:	b0c00015 	stw	r3,0(r22)
    ab90:	000a4200 	call	a420 <__hi0bits>
    ab94:	80a1c83a 	sub	r16,r16,r2
    ab98:	bc000015 	stw	r16,0(r23)
    ab9c:	003fe106 	br	ab24 <__d2b+0xf0>
    aba0:	d8800017 	ldw	r2,0(sp)
    aba4:	90800515 	stw	r2,20(r18)
    aba8:	d8c00117 	ldw	r3,4(sp)
    abac:	003fd106 	br	aaf4 <__d2b+0xc0>

0000abb0 <__mdiff>:
    abb0:	defffb04 	addi	sp,sp,-20
    abb4:	dc000015 	stw	r16,0(sp)
    abb8:	2821883a 	mov	r16,r5
    abbc:	dc800215 	stw	r18,8(sp)
    abc0:	300b883a 	mov	r5,r6
    abc4:	2025883a 	mov	r18,r4
    abc8:	8009883a 	mov	r4,r16
    abcc:	dc400115 	stw	r17,4(sp)
    abd0:	dfc00415 	stw	ra,16(sp)
    abd4:	dcc00315 	stw	r19,12(sp)
    abd8:	3023883a 	mov	r17,r6
    abdc:	000a5540 	call	a554 <__mcmp>
    abe0:	10004226 	beq	r2,zero,acec <__mdiff+0x13c>
    abe4:	10005016 	blt	r2,zero,ad28 <__mdiff+0x178>
    abe8:	0027883a 	mov	r19,zero
    abec:	81400117 	ldw	r5,4(r16)
    abf0:	9009883a 	mov	r4,r18
    abf4:	000a9780 	call	a978 <_Balloc>
    abf8:	1019883a 	mov	r12,r2
    abfc:	82800417 	ldw	r10,16(r16)
    ac00:	88800417 	ldw	r2,16(r17)
    ac04:	81800504 	addi	r6,r16,20
    ac08:	5287883a 	add	r3,r10,r10
    ac0c:	1085883a 	add	r2,r2,r2
    ac10:	18c7883a 	add	r3,r3,r3
    ac14:	1085883a 	add	r2,r2,r2
    ac18:	8a000504 	addi	r8,r17,20
    ac1c:	64c00315 	stw	r19,12(r12)
    ac20:	30db883a 	add	r13,r6,r3
    ac24:	4097883a 	add	r11,r8,r2
    ac28:	61c00504 	addi	r7,r12,20
    ac2c:	0013883a 	mov	r9,zero
    ac30:	31000017 	ldw	r4,0(r6)
    ac34:	41400017 	ldw	r5,0(r8)
    ac38:	42000104 	addi	r8,r8,4
    ac3c:	20bfffcc 	andi	r2,r4,65535
    ac40:	28ffffcc 	andi	r3,r5,65535
    ac44:	10c5c83a 	sub	r2,r2,r3
    ac48:	1245883a 	add	r2,r2,r9
    ac4c:	2008d43a 	srli	r4,r4,16
    ac50:	280ad43a 	srli	r5,r5,16
    ac54:	1007d43a 	srai	r3,r2,16
    ac58:	3880000d 	sth	r2,0(r7)
    ac5c:	2149c83a 	sub	r4,r4,r5
    ac60:	20c9883a 	add	r4,r4,r3
    ac64:	3900008d 	sth	r4,2(r7)
    ac68:	31800104 	addi	r6,r6,4
    ac6c:	39c00104 	addi	r7,r7,4
    ac70:	2013d43a 	srai	r9,r4,16
    ac74:	42ffee36 	bltu	r8,r11,ac30 <__mdiff+0x80>
    ac78:	33400c2e 	bgeu	r6,r13,acac <__mdiff+0xfc>
    ac7c:	30800017 	ldw	r2,0(r6)
    ac80:	31800104 	addi	r6,r6,4
    ac84:	10ffffcc 	andi	r3,r2,65535
    ac88:	1a47883a 	add	r3,r3,r9
    ac8c:	1004d43a 	srli	r2,r2,16
    ac90:	1809d43a 	srai	r4,r3,16
    ac94:	38c0000d 	sth	r3,0(r7)
    ac98:	1105883a 	add	r2,r2,r4
    ac9c:	3880008d 	sth	r2,2(r7)
    aca0:	1013d43a 	srai	r9,r2,16
    aca4:	39c00104 	addi	r7,r7,4
    aca8:	337ff436 	bltu	r6,r13,ac7c <__mdiff+0xcc>
    acac:	38bfff17 	ldw	r2,-4(r7)
    acb0:	38ffff04 	addi	r3,r7,-4
    acb4:	1000041e 	bne	r2,zero,acc8 <__mdiff+0x118>
    acb8:	18ffff04 	addi	r3,r3,-4
    acbc:	18800017 	ldw	r2,0(r3)
    acc0:	52bfffc4 	addi	r10,r10,-1
    acc4:	103ffc26 	beq	r2,zero,acb8 <__mdiff+0x108>
    acc8:	6005883a 	mov	r2,r12
    accc:	62800415 	stw	r10,16(r12)
    acd0:	dfc00417 	ldw	ra,16(sp)
    acd4:	dcc00317 	ldw	r19,12(sp)
    acd8:	dc800217 	ldw	r18,8(sp)
    acdc:	dc400117 	ldw	r17,4(sp)
    ace0:	dc000017 	ldw	r16,0(sp)
    ace4:	dec00504 	addi	sp,sp,20
    ace8:	f800283a 	ret
    acec:	9009883a 	mov	r4,r18
    acf0:	000b883a 	mov	r5,zero
    acf4:	000a9780 	call	a978 <_Balloc>
    acf8:	1019883a 	mov	r12,r2
    acfc:	00800044 	movi	r2,1
    ad00:	60800415 	stw	r2,16(r12)
    ad04:	6005883a 	mov	r2,r12
    ad08:	60000515 	stw	zero,20(r12)
    ad0c:	dfc00417 	ldw	ra,16(sp)
    ad10:	dcc00317 	ldw	r19,12(sp)
    ad14:	dc800217 	ldw	r18,8(sp)
    ad18:	dc400117 	ldw	r17,4(sp)
    ad1c:	dc000017 	ldw	r16,0(sp)
    ad20:	dec00504 	addi	sp,sp,20
    ad24:	f800283a 	ret
    ad28:	880d883a 	mov	r6,r17
    ad2c:	04c00044 	movi	r19,1
    ad30:	8023883a 	mov	r17,r16
    ad34:	3021883a 	mov	r16,r6
    ad38:	003fac06 	br	abec <__mdiff+0x3c>

0000ad3c <__lshift>:
    ad3c:	defff904 	addi	sp,sp,-28
    ad40:	28800417 	ldw	r2,16(r5)
    ad44:	dc000015 	stw	r16,0(sp)
    ad48:	3021d17a 	srai	r16,r6,5
    ad4c:	28c00217 	ldw	r3,8(r5)
    ad50:	10800044 	addi	r2,r2,1
    ad54:	dc400115 	stw	r17,4(sp)
    ad58:	80a3883a 	add	r17,r16,r2
    ad5c:	dd400515 	stw	r21,20(sp)
    ad60:	dd000415 	stw	r20,16(sp)
    ad64:	dc800215 	stw	r18,8(sp)
    ad68:	dfc00615 	stw	ra,24(sp)
    ad6c:	2825883a 	mov	r18,r5
    ad70:	dcc00315 	stw	r19,12(sp)
    ad74:	3029883a 	mov	r20,r6
    ad78:	202b883a 	mov	r21,r4
    ad7c:	29400117 	ldw	r5,4(r5)
    ad80:	1c40030e 	bge	r3,r17,ad90 <__lshift+0x54>
    ad84:	18c7883a 	add	r3,r3,r3
    ad88:	29400044 	addi	r5,r5,1
    ad8c:	1c7ffd16 	blt	r3,r17,ad84 <__lshift+0x48>
    ad90:	a809883a 	mov	r4,r21
    ad94:	000a9780 	call	a978 <_Balloc>
    ad98:	1027883a 	mov	r19,r2
    ad9c:	11400504 	addi	r5,r2,20
    ada0:	0400090e 	bge	zero,r16,adc8 <__lshift+0x8c>
    ada4:	2805883a 	mov	r2,r5
    ada8:	0007883a 	mov	r3,zero
    adac:	18c00044 	addi	r3,r3,1
    adb0:	10000015 	stw	zero,0(r2)
    adb4:	10800104 	addi	r2,r2,4
    adb8:	80fffc1e 	bne	r16,r3,adac <__lshift+0x70>
    adbc:	8405883a 	add	r2,r16,r16
    adc0:	1085883a 	add	r2,r2,r2
    adc4:	288b883a 	add	r5,r5,r2
    adc8:	90800417 	ldw	r2,16(r18)
    adcc:	91000504 	addi	r4,r18,20
    add0:	a18007cc 	andi	r6,r20,31
    add4:	1085883a 	add	r2,r2,r2
    add8:	1085883a 	add	r2,r2,r2
    addc:	208f883a 	add	r7,r4,r2
    ade0:	30001e26 	beq	r6,zero,ae5c <__lshift+0x120>
    ade4:	00800804 	movi	r2,32
    ade8:	1191c83a 	sub	r8,r2,r6
    adec:	0007883a 	mov	r3,zero
    adf0:	20800017 	ldw	r2,0(r4)
    adf4:	1184983a 	sll	r2,r2,r6
    adf8:	1884b03a 	or	r2,r3,r2
    adfc:	28800015 	stw	r2,0(r5)
    ae00:	20c00017 	ldw	r3,0(r4)
    ae04:	21000104 	addi	r4,r4,4
    ae08:	29400104 	addi	r5,r5,4
    ae0c:	1a06d83a 	srl	r3,r3,r8
    ae10:	21fff736 	bltu	r4,r7,adf0 <__lshift+0xb4>
    ae14:	28c00015 	stw	r3,0(r5)
    ae18:	18000126 	beq	r3,zero,ae20 <__lshift+0xe4>
    ae1c:	8c400044 	addi	r17,r17,1
    ae20:	88bfffc4 	addi	r2,r17,-1
    ae24:	98800415 	stw	r2,16(r19)
    ae28:	a809883a 	mov	r4,r21
    ae2c:	900b883a 	mov	r5,r18
    ae30:	000a3f80 	call	a3f8 <_Bfree>
    ae34:	9805883a 	mov	r2,r19
    ae38:	dfc00617 	ldw	ra,24(sp)
    ae3c:	dd400517 	ldw	r21,20(sp)
    ae40:	dd000417 	ldw	r20,16(sp)
    ae44:	dcc00317 	ldw	r19,12(sp)
    ae48:	dc800217 	ldw	r18,8(sp)
    ae4c:	dc400117 	ldw	r17,4(sp)
    ae50:	dc000017 	ldw	r16,0(sp)
    ae54:	dec00704 	addi	sp,sp,28
    ae58:	f800283a 	ret
    ae5c:	20800017 	ldw	r2,0(r4)
    ae60:	21000104 	addi	r4,r4,4
    ae64:	28800015 	stw	r2,0(r5)
    ae68:	29400104 	addi	r5,r5,4
    ae6c:	21ffec2e 	bgeu	r4,r7,ae20 <__lshift+0xe4>
    ae70:	20800017 	ldw	r2,0(r4)
    ae74:	21000104 	addi	r4,r4,4
    ae78:	28800015 	stw	r2,0(r5)
    ae7c:	29400104 	addi	r5,r5,4
    ae80:	21fff636 	bltu	r4,r7,ae5c <__lshift+0x120>
    ae84:	003fe606 	br	ae20 <__lshift+0xe4>

0000ae88 <__multiply>:
    ae88:	defff904 	addi	sp,sp,-28
    ae8c:	dcc00315 	stw	r19,12(sp)
    ae90:	dc800215 	stw	r18,8(sp)
    ae94:	2cc00417 	ldw	r19,16(r5)
    ae98:	34800417 	ldw	r18,16(r6)
    ae9c:	dd000415 	stw	r20,16(sp)
    aea0:	dc400115 	stw	r17,4(sp)
    aea4:	dfc00615 	stw	ra,24(sp)
    aea8:	dd400515 	stw	r21,20(sp)
    aeac:	dc000015 	stw	r16,0(sp)
    aeb0:	2823883a 	mov	r17,r5
    aeb4:	3029883a 	mov	r20,r6
    aeb8:	9c80040e 	bge	r19,r18,aecc <__multiply+0x44>
    aebc:	9027883a 	mov	r19,r18
    aec0:	2c800417 	ldw	r18,16(r5)
    aec4:	2829883a 	mov	r20,r5
    aec8:	3023883a 	mov	r17,r6
    aecc:	88800217 	ldw	r2,8(r17)
    aed0:	9ca1883a 	add	r16,r19,r18
    aed4:	89400117 	ldw	r5,4(r17)
    aed8:	1400010e 	bge	r2,r16,aee0 <__multiply+0x58>
    aedc:	29400044 	addi	r5,r5,1
    aee0:	000a9780 	call	a978 <_Balloc>
    aee4:	102b883a 	mov	r21,r2
    aee8:	8405883a 	add	r2,r16,r16
    aeec:	1085883a 	add	r2,r2,r2
    aef0:	a9000504 	addi	r4,r21,20
    aef4:	209d883a 	add	r14,r4,r2
    aef8:	2380042e 	bgeu	r4,r14,af0c <__multiply+0x84>
    aefc:	2005883a 	mov	r2,r4
    af00:	10000015 	stw	zero,0(r2)
    af04:	10800104 	addi	r2,r2,4
    af08:	13bffd36 	bltu	r2,r14,af00 <__multiply+0x78>
    af0c:	9485883a 	add	r2,r18,r18
    af10:	9cc7883a 	add	r3,r19,r19
    af14:	a1800504 	addi	r6,r20,20
    af18:	1085883a 	add	r2,r2,r2
    af1c:	8b400504 	addi	r13,r17,20
    af20:	18c7883a 	add	r3,r3,r3
    af24:	309f883a 	add	r15,r6,r2
    af28:	68d7883a 	add	r11,r13,r3
    af2c:	33c03b2e 	bgeu	r6,r15,b01c <__multiply+0x194>
    af30:	2019883a 	mov	r12,r4
    af34:	30800017 	ldw	r2,0(r6)
    af38:	127fffcc 	andi	r9,r2,65535
    af3c:	48001826 	beq	r9,zero,afa0 <__multiply+0x118>
    af40:	6811883a 	mov	r8,r13
    af44:	600f883a 	mov	r7,r12
    af48:	0015883a 	mov	r10,zero
    af4c:	40c00017 	ldw	r3,0(r8)
    af50:	39400017 	ldw	r5,0(r7)
    af54:	42000104 	addi	r8,r8,4
    af58:	193fffcc 	andi	r4,r3,65535
    af5c:	4909383a 	mul	r4,r9,r4
    af60:	1806d43a 	srli	r3,r3,16
    af64:	28bfffcc 	andi	r2,r5,65535
    af68:	5085883a 	add	r2,r10,r2
    af6c:	2089883a 	add	r4,r4,r2
    af70:	48c7383a 	mul	r3,r9,r3
    af74:	280ad43a 	srli	r5,r5,16
    af78:	2004d43a 	srli	r2,r4,16
    af7c:	3900000d 	sth	r4,0(r7)
    af80:	1947883a 	add	r3,r3,r5
    af84:	10c5883a 	add	r2,r2,r3
    af88:	3880008d 	sth	r2,2(r7)
    af8c:	1014d43a 	srli	r10,r2,16
    af90:	39c00104 	addi	r7,r7,4
    af94:	42ffed36 	bltu	r8,r11,af4c <__multiply+0xc4>
    af98:	3a800015 	stw	r10,0(r7)
    af9c:	30800017 	ldw	r2,0(r6)
    afa0:	1012d43a 	srli	r9,r2,16
    afa4:	48001926 	beq	r9,zero,b00c <__multiply+0x184>
    afa8:	60800017 	ldw	r2,0(r12)
    afac:	6811883a 	mov	r8,r13
    afb0:	600f883a 	mov	r7,r12
    afb4:	0015883a 	mov	r10,zero
    afb8:	100b883a 	mov	r5,r2
    afbc:	41000017 	ldw	r4,0(r8)
    afc0:	2806d43a 	srli	r3,r5,16
    afc4:	3880000d 	sth	r2,0(r7)
    afc8:	20bfffcc 	andi	r2,r4,65535
    afcc:	4885383a 	mul	r2,r9,r2
    afd0:	50c7883a 	add	r3,r10,r3
    afd4:	2008d43a 	srli	r4,r4,16
    afd8:	10c5883a 	add	r2,r2,r3
    afdc:	3880008d 	sth	r2,2(r7)
    afe0:	39c00104 	addi	r7,r7,4
    afe4:	39400017 	ldw	r5,0(r7)
    afe8:	4909383a 	mul	r4,r9,r4
    afec:	1004d43a 	srli	r2,r2,16
    aff0:	28ffffcc 	andi	r3,r5,65535
    aff4:	20c9883a 	add	r4,r4,r3
    aff8:	1105883a 	add	r2,r2,r4
    affc:	42000104 	addi	r8,r8,4
    b000:	1014d43a 	srli	r10,r2,16
    b004:	42ffed36 	bltu	r8,r11,afbc <__multiply+0x134>
    b008:	38800015 	stw	r2,0(r7)
    b00c:	31800104 	addi	r6,r6,4
    b010:	33c0022e 	bgeu	r6,r15,b01c <__multiply+0x194>
    b014:	63000104 	addi	r12,r12,4
    b018:	003fc606 	br	af34 <__multiply+0xac>
    b01c:	0400090e 	bge	zero,r16,b044 <__multiply+0x1bc>
    b020:	70bfff17 	ldw	r2,-4(r14)
    b024:	70ffff04 	addi	r3,r14,-4
    b028:	10000326 	beq	r2,zero,b038 <__multiply+0x1b0>
    b02c:	00000506 	br	b044 <__multiply+0x1bc>
    b030:	18800017 	ldw	r2,0(r3)
    b034:	1000031e 	bne	r2,zero,b044 <__multiply+0x1bc>
    b038:	843fffc4 	addi	r16,r16,-1
    b03c:	18ffff04 	addi	r3,r3,-4
    b040:	803ffb1e 	bne	r16,zero,b030 <__multiply+0x1a8>
    b044:	a805883a 	mov	r2,r21
    b048:	ac000415 	stw	r16,16(r21)
    b04c:	dfc00617 	ldw	ra,24(sp)
    b050:	dd400517 	ldw	r21,20(sp)
    b054:	dd000417 	ldw	r20,16(sp)
    b058:	dcc00317 	ldw	r19,12(sp)
    b05c:	dc800217 	ldw	r18,8(sp)
    b060:	dc400117 	ldw	r17,4(sp)
    b064:	dc000017 	ldw	r16,0(sp)
    b068:	dec00704 	addi	sp,sp,28
    b06c:	f800283a 	ret

0000b070 <__i2b>:
    b070:	defffd04 	addi	sp,sp,-12
    b074:	dc000015 	stw	r16,0(sp)
    b078:	04000044 	movi	r16,1
    b07c:	dc800115 	stw	r18,4(sp)
    b080:	2825883a 	mov	r18,r5
    b084:	800b883a 	mov	r5,r16
    b088:	dfc00215 	stw	ra,8(sp)
    b08c:	000a9780 	call	a978 <_Balloc>
    b090:	14000415 	stw	r16,16(r2)
    b094:	14800515 	stw	r18,20(r2)
    b098:	dfc00217 	ldw	ra,8(sp)
    b09c:	dc800117 	ldw	r18,4(sp)
    b0a0:	dc000017 	ldw	r16,0(sp)
    b0a4:	dec00304 	addi	sp,sp,12
    b0a8:	f800283a 	ret

0000b0ac <__multadd>:
    b0ac:	defffa04 	addi	sp,sp,-24
    b0b0:	dc800215 	stw	r18,8(sp)
    b0b4:	2c800417 	ldw	r18,16(r5)
    b0b8:	dd000415 	stw	r20,16(sp)
    b0bc:	dcc00315 	stw	r19,12(sp)
    b0c0:	dc000015 	stw	r16,0(sp)
    b0c4:	dfc00515 	stw	ra,20(sp)
    b0c8:	3821883a 	mov	r16,r7
    b0cc:	dc400115 	stw	r17,4(sp)
    b0d0:	2827883a 	mov	r19,r5
    b0d4:	2029883a 	mov	r20,r4
    b0d8:	2a000504 	addi	r8,r5,20
    b0dc:	000f883a 	mov	r7,zero
    b0e0:	40800017 	ldw	r2,0(r8)
    b0e4:	39c00044 	addi	r7,r7,1
    b0e8:	10ffffcc 	andi	r3,r2,65535
    b0ec:	1987383a 	mul	r3,r3,r6
    b0f0:	1004d43a 	srli	r2,r2,16
    b0f4:	1c07883a 	add	r3,r3,r16
    b0f8:	180ad43a 	srli	r5,r3,16
    b0fc:	1185383a 	mul	r2,r2,r6
    b100:	18ffffcc 	andi	r3,r3,65535
    b104:	1145883a 	add	r2,r2,r5
    b108:	1008943a 	slli	r4,r2,16
    b10c:	1020d43a 	srli	r16,r2,16
    b110:	20c9883a 	add	r4,r4,r3
    b114:	41000015 	stw	r4,0(r8)
    b118:	42000104 	addi	r8,r8,4
    b11c:	3cbff016 	blt	r7,r18,b0e0 <__multadd+0x34>
    b120:	80000826 	beq	r16,zero,b144 <__multadd+0x98>
    b124:	98800217 	ldw	r2,8(r19)
    b128:	90800f0e 	bge	r18,r2,b168 <__multadd+0xbc>
    b12c:	9485883a 	add	r2,r18,r18
    b130:	1085883a 	add	r2,r2,r2
    b134:	14c5883a 	add	r2,r2,r19
    b138:	90c00044 	addi	r3,r18,1
    b13c:	14000515 	stw	r16,20(r2)
    b140:	98c00415 	stw	r3,16(r19)
    b144:	9805883a 	mov	r2,r19
    b148:	dfc00517 	ldw	ra,20(sp)
    b14c:	dd000417 	ldw	r20,16(sp)
    b150:	dcc00317 	ldw	r19,12(sp)
    b154:	dc800217 	ldw	r18,8(sp)
    b158:	dc400117 	ldw	r17,4(sp)
    b15c:	dc000017 	ldw	r16,0(sp)
    b160:	dec00604 	addi	sp,sp,24
    b164:	f800283a 	ret
    b168:	99400117 	ldw	r5,4(r19)
    b16c:	a009883a 	mov	r4,r20
    b170:	29400044 	addi	r5,r5,1
    b174:	000a9780 	call	a978 <_Balloc>
    b178:	99800417 	ldw	r6,16(r19)
    b17c:	99400304 	addi	r5,r19,12
    b180:	11000304 	addi	r4,r2,12
    b184:	318d883a 	add	r6,r6,r6
    b188:	318d883a 	add	r6,r6,r6
    b18c:	31800204 	addi	r6,r6,8
    b190:	1023883a 	mov	r17,r2
    b194:	00035c00 	call	35c0 <memcpy>
    b198:	980b883a 	mov	r5,r19
    b19c:	a009883a 	mov	r4,r20
    b1a0:	000a3f80 	call	a3f8 <_Bfree>
    b1a4:	8827883a 	mov	r19,r17
    b1a8:	003fe006 	br	b12c <__multadd+0x80>

0000b1ac <__pow5mult>:
    b1ac:	defffa04 	addi	sp,sp,-24
    b1b0:	308000cc 	andi	r2,r6,3
    b1b4:	dd000415 	stw	r20,16(sp)
    b1b8:	dcc00315 	stw	r19,12(sp)
    b1bc:	dc000015 	stw	r16,0(sp)
    b1c0:	dfc00515 	stw	ra,20(sp)
    b1c4:	dc800215 	stw	r18,8(sp)
    b1c8:	dc400115 	stw	r17,4(sp)
    b1cc:	3021883a 	mov	r16,r6
    b1d0:	2027883a 	mov	r19,r4
    b1d4:	2829883a 	mov	r20,r5
    b1d8:	10002b1e 	bne	r2,zero,b288 <__pow5mult+0xdc>
    b1dc:	8025d0ba 	srai	r18,r16,2
    b1e0:	90001b26 	beq	r18,zero,b250 <__pow5mult+0xa4>
    b1e4:	9c001217 	ldw	r16,72(r19)
    b1e8:	8000081e 	bne	r16,zero,b20c <__pow5mult+0x60>
    b1ec:	00003006 	br	b2b0 <__pow5mult+0x104>
    b1f0:	800b883a 	mov	r5,r16
    b1f4:	800d883a 	mov	r6,r16
    b1f8:	9809883a 	mov	r4,r19
    b1fc:	90001426 	beq	r18,zero,b250 <__pow5mult+0xa4>
    b200:	80800017 	ldw	r2,0(r16)
    b204:	10001b26 	beq	r2,zero,b274 <__pow5mult+0xc8>
    b208:	1021883a 	mov	r16,r2
    b20c:	9080004c 	andi	r2,r18,1
    b210:	1005003a 	cmpeq	r2,r2,zero
    b214:	9025d07a 	srai	r18,r18,1
    b218:	800d883a 	mov	r6,r16
    b21c:	9809883a 	mov	r4,r19
    b220:	a00b883a 	mov	r5,r20
    b224:	103ff21e 	bne	r2,zero,b1f0 <__pow5mult+0x44>
    b228:	000ae880 	call	ae88 <__multiply>
    b22c:	a00b883a 	mov	r5,r20
    b230:	9809883a 	mov	r4,r19
    b234:	1023883a 	mov	r17,r2
    b238:	000a3f80 	call	a3f8 <_Bfree>
    b23c:	8829883a 	mov	r20,r17
    b240:	800b883a 	mov	r5,r16
    b244:	800d883a 	mov	r6,r16
    b248:	9809883a 	mov	r4,r19
    b24c:	903fec1e 	bne	r18,zero,b200 <__pow5mult+0x54>
    b250:	a005883a 	mov	r2,r20
    b254:	dfc00517 	ldw	ra,20(sp)
    b258:	dd000417 	ldw	r20,16(sp)
    b25c:	dcc00317 	ldw	r19,12(sp)
    b260:	dc800217 	ldw	r18,8(sp)
    b264:	dc400117 	ldw	r17,4(sp)
    b268:	dc000017 	ldw	r16,0(sp)
    b26c:	dec00604 	addi	sp,sp,24
    b270:	f800283a 	ret
    b274:	000ae880 	call	ae88 <__multiply>
    b278:	80800015 	stw	r2,0(r16)
    b27c:	1021883a 	mov	r16,r2
    b280:	10000015 	stw	zero,0(r2)
    b284:	003fe106 	br	b20c <__pow5mult+0x60>
    b288:	1085883a 	add	r2,r2,r2
    b28c:	00c00074 	movhi	r3,1
    b290:	18d36604 	addi	r3,r3,19864
    b294:	1085883a 	add	r2,r2,r2
    b298:	10c5883a 	add	r2,r2,r3
    b29c:	11bfff17 	ldw	r6,-4(r2)
    b2a0:	000f883a 	mov	r7,zero
    b2a4:	000b0ac0 	call	b0ac <__multadd>
    b2a8:	1029883a 	mov	r20,r2
    b2ac:	003fcb06 	br	b1dc <__pow5mult+0x30>
    b2b0:	9809883a 	mov	r4,r19
    b2b4:	01409c44 	movi	r5,625
    b2b8:	000b0700 	call	b070 <__i2b>
    b2bc:	98801215 	stw	r2,72(r19)
    b2c0:	1021883a 	mov	r16,r2
    b2c4:	10000015 	stw	zero,0(r2)
    b2c8:	003fd006 	br	b20c <__pow5mult+0x60>

0000b2cc <__s2b>:
    b2cc:	defff904 	addi	sp,sp,-28
    b2d0:	dcc00315 	stw	r19,12(sp)
    b2d4:	dc800215 	stw	r18,8(sp)
    b2d8:	2827883a 	mov	r19,r5
    b2dc:	2025883a 	mov	r18,r4
    b2e0:	01400244 	movi	r5,9
    b2e4:	39000204 	addi	r4,r7,8
    b2e8:	dd000415 	stw	r20,16(sp)
    b2ec:	dc400115 	stw	r17,4(sp)
    b2f0:	dfc00615 	stw	ra,24(sp)
    b2f4:	dd400515 	stw	r21,20(sp)
    b2f8:	dc000015 	stw	r16,0(sp)
    b2fc:	3829883a 	mov	r20,r7
    b300:	3023883a 	mov	r17,r6
    b304:	00027200 	call	2720 <__divsi3>
    b308:	00c00044 	movi	r3,1
    b30c:	1880350e 	bge	r3,r2,b3e4 <__s2b+0x118>
    b310:	000b883a 	mov	r5,zero
    b314:	18c7883a 	add	r3,r3,r3
    b318:	29400044 	addi	r5,r5,1
    b31c:	18bffd16 	blt	r3,r2,b314 <__s2b+0x48>
    b320:	9009883a 	mov	r4,r18
    b324:	000a9780 	call	a978 <_Balloc>
    b328:	1011883a 	mov	r8,r2
    b32c:	d8800717 	ldw	r2,28(sp)
    b330:	00c00044 	movi	r3,1
    b334:	01800244 	movi	r6,9
    b338:	40800515 	stw	r2,20(r8)
    b33c:	40c00415 	stw	r3,16(r8)
    b340:	3440260e 	bge	r6,r17,b3dc <__s2b+0x110>
    b344:	3021883a 	mov	r16,r6
    b348:	99ab883a 	add	r21,r19,r6
    b34c:	9c05883a 	add	r2,r19,r16
    b350:	11c00007 	ldb	r7,0(r2)
    b354:	400b883a 	mov	r5,r8
    b358:	9009883a 	mov	r4,r18
    b35c:	39fff404 	addi	r7,r7,-48
    b360:	01800284 	movi	r6,10
    b364:	000b0ac0 	call	b0ac <__multadd>
    b368:	84000044 	addi	r16,r16,1
    b36c:	1011883a 	mov	r8,r2
    b370:	8c3ff61e 	bne	r17,r16,b34c <__s2b+0x80>
    b374:	ac45883a 	add	r2,r21,r17
    b378:	117ffe04 	addi	r5,r2,-8
    b37c:	880d883a 	mov	r6,r17
    b380:	35000c0e 	bge	r6,r20,b3b4 <__s2b+0xe8>
    b384:	a185c83a 	sub	r2,r20,r6
    b388:	2821883a 	mov	r16,r5
    b38c:	28a3883a 	add	r17,r5,r2
    b390:	81c00007 	ldb	r7,0(r16)
    b394:	400b883a 	mov	r5,r8
    b398:	9009883a 	mov	r4,r18
    b39c:	39fff404 	addi	r7,r7,-48
    b3a0:	01800284 	movi	r6,10
    b3a4:	000b0ac0 	call	b0ac <__multadd>
    b3a8:	84000044 	addi	r16,r16,1
    b3ac:	1011883a 	mov	r8,r2
    b3b0:	847ff71e 	bne	r16,r17,b390 <__s2b+0xc4>
    b3b4:	4005883a 	mov	r2,r8
    b3b8:	dfc00617 	ldw	ra,24(sp)
    b3bc:	dd400517 	ldw	r21,20(sp)
    b3c0:	dd000417 	ldw	r20,16(sp)
    b3c4:	dcc00317 	ldw	r19,12(sp)
    b3c8:	dc800217 	ldw	r18,8(sp)
    b3cc:	dc400117 	ldw	r17,4(sp)
    b3d0:	dc000017 	ldw	r16,0(sp)
    b3d4:	dec00704 	addi	sp,sp,28
    b3d8:	f800283a 	ret
    b3dc:	99400284 	addi	r5,r19,10
    b3e0:	003fe706 	br	b380 <__s2b+0xb4>
    b3e4:	000b883a 	mov	r5,zero
    b3e8:	003fcd06 	br	b320 <__s2b+0x54>

0000b3ec <putc>:
    b3ec:	defffc04 	addi	sp,sp,-16
    b3f0:	dc800215 	stw	r18,8(sp)
    b3f4:	04800074 	movhi	r18,1
    b3f8:	949a7d04 	addi	r18,r18,27124
    b3fc:	90c00017 	ldw	r3,0(r18)
    b400:	dc400115 	stw	r17,4(sp)
    b404:	dc000015 	stw	r16,0(sp)
    b408:	dfc00315 	stw	ra,12(sp)
    b40c:	2023883a 	mov	r17,r4
    b410:	2821883a 	mov	r16,r5
    b414:	18000226 	beq	r3,zero,b420 <putc+0x34>
    b418:	18800e17 	ldw	r2,56(r3)
    b41c:	10001126 	beq	r2,zero,b464 <putc+0x78>
    b420:	80800217 	ldw	r2,8(r16)
    b424:	10ffffc4 	addi	r3,r2,-1
    b428:	80c00215 	stw	r3,8(r16)
    b42c:	18001316 	blt	r3,zero,b47c <putc+0x90>
    b430:	80800017 	ldw	r2,0(r16)
    b434:	14400005 	stb	r17,0(r2)
    b438:	80c00017 	ldw	r3,0(r16)
    b43c:	18800044 	addi	r2,r3,1
    b440:	18c00003 	ldbu	r3,0(r3)
    b444:	80800015 	stw	r2,0(r16)
    b448:	1805883a 	mov	r2,r3
    b44c:	dfc00317 	ldw	ra,12(sp)
    b450:	dc800217 	ldw	r18,8(sp)
    b454:	dc400117 	ldw	r17,4(sp)
    b458:	dc000017 	ldw	r16,0(sp)
    b45c:	dec00404 	addi	sp,sp,16
    b460:	f800283a 	ret
    b464:	1809883a 	mov	r4,r3
    b468:	00029c40 	call	29c4 <__sinit>
    b46c:	80800217 	ldw	r2,8(r16)
    b470:	10ffffc4 	addi	r3,r2,-1
    b474:	80c00215 	stw	r3,8(r16)
    b478:	183fed0e 	bge	r3,zero,b430 <putc+0x44>
    b47c:	80800617 	ldw	r2,24(r16)
    b480:	18800f16 	blt	r3,r2,b4c0 <putc+0xd4>
    b484:	80800017 	ldw	r2,0(r16)
    b488:	14400005 	stb	r17,0(r2)
    b48c:	81000017 	ldw	r4,0(r16)
    b490:	00800284 	movi	r2,10
    b494:	20c00003 	ldbu	r3,0(r4)
    b498:	18801226 	beq	r3,r2,b4e4 <putc+0xf8>
    b49c:	20800044 	addi	r2,r4,1
    b4a0:	80800015 	stw	r2,0(r16)
    b4a4:	1805883a 	mov	r2,r3
    b4a8:	dfc00317 	ldw	ra,12(sp)
    b4ac:	dc800217 	ldw	r18,8(sp)
    b4b0:	dc400117 	ldw	r17,4(sp)
    b4b4:	dc000017 	ldw	r16,0(sp)
    b4b8:	dec00404 	addi	sp,sp,16
    b4bc:	f800283a 	ret
    b4c0:	91000017 	ldw	r4,0(r18)
    b4c4:	880b883a 	mov	r5,r17
    b4c8:	800d883a 	mov	r6,r16
    b4cc:	dfc00317 	ldw	ra,12(sp)
    b4d0:	dc800217 	ldw	r18,8(sp)
    b4d4:	dc400117 	ldw	r17,4(sp)
    b4d8:	dc000017 	ldw	r16,0(sp)
    b4dc:	dec00404 	addi	sp,sp,16
    b4e0:	000e1401 	jmpi	e140 <__swbuf_r>
    b4e4:	91000017 	ldw	r4,0(r18)
    b4e8:	180b883a 	mov	r5,r3
    b4ec:	003ff606 	br	b4c8 <putc+0xdc>

0000b4f0 <_putc_r>:
    b4f0:	defffc04 	addi	sp,sp,-16
    b4f4:	dc400215 	stw	r17,8(sp)
    b4f8:	dc000115 	stw	r16,4(sp)
    b4fc:	dfc00315 	stw	ra,12(sp)
    b500:	2021883a 	mov	r16,r4
    b504:	2823883a 	mov	r17,r5
    b508:	20000226 	beq	r4,zero,b514 <_putc_r+0x24>
    b50c:	20800e17 	ldw	r2,56(r4)
    b510:	10001026 	beq	r2,zero,b554 <_putc_r+0x64>
    b514:	30800217 	ldw	r2,8(r6)
    b518:	10ffffc4 	addi	r3,r2,-1
    b51c:	30c00215 	stw	r3,8(r6)
    b520:	18001316 	blt	r3,zero,b570 <_putc_r+0x80>
    b524:	30800017 	ldw	r2,0(r6)
    b528:	14400005 	stb	r17,0(r2)
    b52c:	30c00017 	ldw	r3,0(r6)
    b530:	18800044 	addi	r2,r3,1
    b534:	18c00003 	ldbu	r3,0(r3)
    b538:	30800015 	stw	r2,0(r6)
    b53c:	1805883a 	mov	r2,r3
    b540:	dfc00317 	ldw	ra,12(sp)
    b544:	dc400217 	ldw	r17,8(sp)
    b548:	dc000117 	ldw	r16,4(sp)
    b54c:	dec00404 	addi	sp,sp,16
    b550:	f800283a 	ret
    b554:	d9800015 	stw	r6,0(sp)
    b558:	00029c40 	call	29c4 <__sinit>
    b55c:	d9800017 	ldw	r6,0(sp)
    b560:	30800217 	ldw	r2,8(r6)
    b564:	10ffffc4 	addi	r3,r2,-1
    b568:	30c00215 	stw	r3,8(r6)
    b56c:	183fed0e 	bge	r3,zero,b524 <_putc_r+0x34>
    b570:	30800617 	ldw	r2,24(r6)
    b574:	18800e16 	blt	r3,r2,b5b0 <_putc_r+0xc0>
    b578:	30800017 	ldw	r2,0(r6)
    b57c:	14400005 	stb	r17,0(r2)
    b580:	31000017 	ldw	r4,0(r6)
    b584:	00800284 	movi	r2,10
    b588:	20c00003 	ldbu	r3,0(r4)
    b58c:	18800f26 	beq	r3,r2,b5cc <_putc_r+0xdc>
    b590:	20800044 	addi	r2,r4,1
    b594:	30800015 	stw	r2,0(r6)
    b598:	1805883a 	mov	r2,r3
    b59c:	dfc00317 	ldw	ra,12(sp)
    b5a0:	dc400217 	ldw	r17,8(sp)
    b5a4:	dc000117 	ldw	r16,4(sp)
    b5a8:	dec00404 	addi	sp,sp,16
    b5ac:	f800283a 	ret
    b5b0:	8009883a 	mov	r4,r16
    b5b4:	880b883a 	mov	r5,r17
    b5b8:	dfc00317 	ldw	ra,12(sp)
    b5bc:	dc400217 	ldw	r17,8(sp)
    b5c0:	dc000117 	ldw	r16,4(sp)
    b5c4:	dec00404 	addi	sp,sp,16
    b5c8:	000e1401 	jmpi	e140 <__swbuf_r>
    b5cc:	8009883a 	mov	r4,r16
    b5d0:	180b883a 	mov	r5,r3
    b5d4:	003ff806 	br	b5b8 <_putc_r+0xc8>

0000b5d8 <_read_r>:
    b5d8:	defffd04 	addi	sp,sp,-12
    b5dc:	dc000015 	stw	r16,0(sp)
    b5e0:	040000b4 	movhi	r16,2
    b5e4:	84214e04 	addi	r16,r16,-31432
    b5e8:	dc400115 	stw	r17,4(sp)
    b5ec:	80000015 	stw	zero,0(r16)
    b5f0:	2023883a 	mov	r17,r4
    b5f4:	2809883a 	mov	r4,r5
    b5f8:	300b883a 	mov	r5,r6
    b5fc:	380d883a 	mov	r6,r7
    b600:	dfc00215 	stw	ra,8(sp)
    b604:	0011f580 	call	11f58 <read>
    b608:	1007883a 	mov	r3,r2
    b60c:	00bfffc4 	movi	r2,-1
    b610:	18800626 	beq	r3,r2,b62c <_read_r+0x54>
    b614:	1805883a 	mov	r2,r3
    b618:	dfc00217 	ldw	ra,8(sp)
    b61c:	dc400117 	ldw	r17,4(sp)
    b620:	dc000017 	ldw	r16,0(sp)
    b624:	dec00304 	addi	sp,sp,12
    b628:	f800283a 	ret
    b62c:	80800017 	ldw	r2,0(r16)
    b630:	103ff826 	beq	r2,zero,b614 <_read_r+0x3c>
    b634:	88800015 	stw	r2,0(r17)
    b638:	1805883a 	mov	r2,r3
    b63c:	dfc00217 	ldw	ra,8(sp)
    b640:	dc400117 	ldw	r17,4(sp)
    b644:	dc000017 	ldw	r16,0(sp)
    b648:	dec00304 	addi	sp,sp,12
    b64c:	f800283a 	ret

0000b650 <_realloc_r>:
    b650:	defff404 	addi	sp,sp,-48
    b654:	dd800815 	stw	r22,32(sp)
    b658:	dc800415 	stw	r18,16(sp)
    b65c:	dc400315 	stw	r17,12(sp)
    b660:	dfc00b15 	stw	ra,44(sp)
    b664:	df000a15 	stw	fp,40(sp)
    b668:	ddc00915 	stw	r23,36(sp)
    b66c:	dd400715 	stw	r21,28(sp)
    b670:	dd000615 	stw	r20,24(sp)
    b674:	dcc00515 	stw	r19,20(sp)
    b678:	dc000215 	stw	r16,8(sp)
    b67c:	2825883a 	mov	r18,r5
    b680:	3023883a 	mov	r17,r6
    b684:	202d883a 	mov	r22,r4
    b688:	2800c926 	beq	r5,zero,b9b0 <_realloc_r+0x360>
    b68c:	0011f180 	call	11f18 <__malloc_lock>
    b690:	943ffe04 	addi	r16,r18,-8
    b694:	88c002c4 	addi	r3,r17,11
    b698:	00800584 	movi	r2,22
    b69c:	82000117 	ldw	r8,4(r16)
    b6a0:	10c01b2e 	bgeu	r2,r3,b710 <_realloc_r+0xc0>
    b6a4:	00bffe04 	movi	r2,-8
    b6a8:	188e703a 	and	r7,r3,r2
    b6ac:	3839883a 	mov	fp,r7
    b6b0:	38001a16 	blt	r7,zero,b71c <_realloc_r+0xcc>
    b6b4:	e4401936 	bltu	fp,r17,b71c <_realloc_r+0xcc>
    b6b8:	013fff04 	movi	r4,-4
    b6bc:	4126703a 	and	r19,r8,r4
    b6c0:	99c02616 	blt	r19,r7,b75c <_realloc_r+0x10c>
    b6c4:	802b883a 	mov	r21,r16
    b6c8:	9829883a 	mov	r20,r19
    b6cc:	84000204 	addi	r16,r16,8
    b6d0:	a80f883a 	mov	r7,r21
    b6d4:	a70dc83a 	sub	r6,r20,fp
    b6d8:	008003c4 	movi	r2,15
    b6dc:	1180c136 	bltu	r2,r6,b9e4 <_realloc_r+0x394>
    b6e0:	38800117 	ldw	r2,4(r7)
    b6e4:	a549883a 	add	r4,r20,r21
    b6e8:	1080004c 	andi	r2,r2,1
    b6ec:	a084b03a 	or	r2,r20,r2
    b6f0:	38800115 	stw	r2,4(r7)
    b6f4:	20c00117 	ldw	r3,4(r4)
    b6f8:	18c00054 	ori	r3,r3,1
    b6fc:	20c00115 	stw	r3,4(r4)
    b700:	b009883a 	mov	r4,r22
    b704:	0011f380 	call	11f38 <__malloc_unlock>
    b708:	8023883a 	mov	r17,r16
    b70c:	00000606 	br	b728 <_realloc_r+0xd8>
    b710:	01c00404 	movi	r7,16
    b714:	3839883a 	mov	fp,r7
    b718:	e47fe72e 	bgeu	fp,r17,b6b8 <_realloc_r+0x68>
    b71c:	00800304 	movi	r2,12
    b720:	0023883a 	mov	r17,zero
    b724:	b0800015 	stw	r2,0(r22)
    b728:	8805883a 	mov	r2,r17
    b72c:	dfc00b17 	ldw	ra,44(sp)
    b730:	df000a17 	ldw	fp,40(sp)
    b734:	ddc00917 	ldw	r23,36(sp)
    b738:	dd800817 	ldw	r22,32(sp)
    b73c:	dd400717 	ldw	r21,28(sp)
    b740:	dd000617 	ldw	r20,24(sp)
    b744:	dcc00517 	ldw	r19,20(sp)
    b748:	dc800417 	ldw	r18,16(sp)
    b74c:	dc400317 	ldw	r17,12(sp)
    b750:	dc000217 	ldw	r16,8(sp)
    b754:	dec00c04 	addi	sp,sp,48
    b758:	f800283a 	ret
    b75c:	00800074 	movhi	r2,1
    b760:	1094eb04 	addi	r2,r2,21420
    b764:	12400217 	ldw	r9,8(r2)
    b768:	84cd883a 	add	r6,r16,r19
    b76c:	802b883a 	mov	r21,r16
    b770:	3240b926 	beq	r6,r9,ba58 <_realloc_r+0x408>
    b774:	31400117 	ldw	r5,4(r6)
    b778:	00bfff84 	movi	r2,-2
    b77c:	2884703a 	and	r2,r5,r2
    b780:	1185883a 	add	r2,r2,r6
    b784:	10c00117 	ldw	r3,4(r2)
    b788:	18c0004c 	andi	r3,r3,1
    b78c:	1807003a 	cmpeq	r3,r3,zero
    b790:	1800a326 	beq	r3,zero,ba20 <_realloc_r+0x3d0>
    b794:	2908703a 	and	r4,r5,r4
    b798:	9929883a 	add	r20,r19,r4
    b79c:	a1c0a30e 	bge	r20,r7,ba2c <_realloc_r+0x3dc>
    b7a0:	4080004c 	andi	r2,r8,1
    b7a4:	1000551e 	bne	r2,zero,b8fc <_realloc_r+0x2ac>
    b7a8:	80800017 	ldw	r2,0(r16)
    b7ac:	80afc83a 	sub	r23,r16,r2
    b7b0:	b8c00117 	ldw	r3,4(r23)
    b7b4:	00bfff04 	movi	r2,-4
    b7b8:	1884703a 	and	r2,r3,r2
    b7bc:	30002e26 	beq	r6,zero,b878 <_realloc_r+0x228>
    b7c0:	3240b926 	beq	r6,r9,baa8 <_realloc_r+0x458>
    b7c4:	98a9883a 	add	r20,r19,r2
    b7c8:	2509883a 	add	r4,r4,r20
    b7cc:	d9000015 	stw	r4,0(sp)
    b7d0:	21c02a16 	blt	r4,r7,b87c <_realloc_r+0x22c>
    b7d4:	30800317 	ldw	r2,12(r6)
    b7d8:	30c00217 	ldw	r3,8(r6)
    b7dc:	01400904 	movi	r5,36
    b7e0:	99bfff04 	addi	r6,r19,-4
    b7e4:	18800315 	stw	r2,12(r3)
    b7e8:	10c00215 	stw	r3,8(r2)
    b7ec:	b9000317 	ldw	r4,12(r23)
    b7f0:	b8800217 	ldw	r2,8(r23)
    b7f4:	b82b883a 	mov	r21,r23
    b7f8:	bc000204 	addi	r16,r23,8
    b7fc:	20800215 	stw	r2,8(r4)
    b800:	11000315 	stw	r4,12(r2)
    b804:	2980e436 	bltu	r5,r6,bb98 <_realloc_r+0x548>
    b808:	008004c4 	movi	r2,19
    b80c:	9009883a 	mov	r4,r18
    b810:	8011883a 	mov	r8,r16
    b814:	11800f2e 	bgeu	r2,r6,b854 <_realloc_r+0x204>
    b818:	90800017 	ldw	r2,0(r18)
    b81c:	ba000404 	addi	r8,r23,16
    b820:	91000204 	addi	r4,r18,8
    b824:	b8800215 	stw	r2,8(r23)
    b828:	90c00117 	ldw	r3,4(r18)
    b82c:	008006c4 	movi	r2,27
    b830:	b8c00315 	stw	r3,12(r23)
    b834:	1180072e 	bgeu	r2,r6,b854 <_realloc_r+0x204>
    b838:	90c00217 	ldw	r3,8(r18)
    b83c:	ba000604 	addi	r8,r23,24
    b840:	91000404 	addi	r4,r18,16
    b844:	b8c00415 	stw	r3,16(r23)
    b848:	90800317 	ldw	r2,12(r18)
    b84c:	b8800515 	stw	r2,20(r23)
    b850:	3140e726 	beq	r6,r5,bbf0 <_realloc_r+0x5a0>
    b854:	20800017 	ldw	r2,0(r4)
    b858:	dd000017 	ldw	r20,0(sp)
    b85c:	b80f883a 	mov	r7,r23
    b860:	40800015 	stw	r2,0(r8)
    b864:	20c00117 	ldw	r3,4(r4)
    b868:	40c00115 	stw	r3,4(r8)
    b86c:	20800217 	ldw	r2,8(r4)
    b870:	40800215 	stw	r2,8(r8)
    b874:	003f9706 	br	b6d4 <_realloc_r+0x84>
    b878:	98a9883a 	add	r20,r19,r2
    b87c:	a1c01f16 	blt	r20,r7,b8fc <_realloc_r+0x2ac>
    b880:	b8c00317 	ldw	r3,12(r23)
    b884:	b8800217 	ldw	r2,8(r23)
    b888:	99bfff04 	addi	r6,r19,-4
    b88c:	01400904 	movi	r5,36
    b890:	b82b883a 	mov	r21,r23
    b894:	18800215 	stw	r2,8(r3)
    b898:	10c00315 	stw	r3,12(r2)
    b89c:	bc000204 	addi	r16,r23,8
    b8a0:	2980c336 	bltu	r5,r6,bbb0 <_realloc_r+0x560>
    b8a4:	008004c4 	movi	r2,19
    b8a8:	9009883a 	mov	r4,r18
    b8ac:	8011883a 	mov	r8,r16
    b8b0:	11800f2e 	bgeu	r2,r6,b8f0 <_realloc_r+0x2a0>
    b8b4:	90800017 	ldw	r2,0(r18)
    b8b8:	ba000404 	addi	r8,r23,16
    b8bc:	91000204 	addi	r4,r18,8
    b8c0:	b8800215 	stw	r2,8(r23)
    b8c4:	90c00117 	ldw	r3,4(r18)
    b8c8:	008006c4 	movi	r2,27
    b8cc:	b8c00315 	stw	r3,12(r23)
    b8d0:	1180072e 	bgeu	r2,r6,b8f0 <_realloc_r+0x2a0>
    b8d4:	90c00217 	ldw	r3,8(r18)
    b8d8:	ba000604 	addi	r8,r23,24
    b8dc:	91000404 	addi	r4,r18,16
    b8e0:	b8c00415 	stw	r3,16(r23)
    b8e4:	90800317 	ldw	r2,12(r18)
    b8e8:	b8800515 	stw	r2,20(r23)
    b8ec:	3140c726 	beq	r6,r5,bc0c <_realloc_r+0x5bc>
    b8f0:	20800017 	ldw	r2,0(r4)
    b8f4:	b80f883a 	mov	r7,r23
    b8f8:	003fd906 	br	b860 <_realloc_r+0x210>
    b8fc:	880b883a 	mov	r5,r17
    b900:	b009883a 	mov	r4,r22
    b904:	0002d9c0 	call	2d9c <_malloc_r>
    b908:	1023883a 	mov	r17,r2
    b90c:	10002526 	beq	r2,zero,b9a4 <_realloc_r+0x354>
    b910:	80800117 	ldw	r2,4(r16)
    b914:	00ffff84 	movi	r3,-2
    b918:	893ffe04 	addi	r4,r17,-8
    b91c:	10c4703a 	and	r2,r2,r3
    b920:	8085883a 	add	r2,r16,r2
    b924:	20809526 	beq	r4,r2,bb7c <_realloc_r+0x52c>
    b928:	99bfff04 	addi	r6,r19,-4
    b92c:	01c00904 	movi	r7,36
    b930:	39804536 	bltu	r7,r6,ba48 <_realloc_r+0x3f8>
    b934:	008004c4 	movi	r2,19
    b938:	9009883a 	mov	r4,r18
    b93c:	880b883a 	mov	r5,r17
    b940:	11800f2e 	bgeu	r2,r6,b980 <_realloc_r+0x330>
    b944:	90800017 	ldw	r2,0(r18)
    b948:	89400204 	addi	r5,r17,8
    b94c:	91000204 	addi	r4,r18,8
    b950:	88800015 	stw	r2,0(r17)
    b954:	90c00117 	ldw	r3,4(r18)
    b958:	008006c4 	movi	r2,27
    b95c:	88c00115 	stw	r3,4(r17)
    b960:	1180072e 	bgeu	r2,r6,b980 <_realloc_r+0x330>
    b964:	90c00217 	ldw	r3,8(r18)
    b968:	89400404 	addi	r5,r17,16
    b96c:	91000404 	addi	r4,r18,16
    b970:	88c00215 	stw	r3,8(r17)
    b974:	90800317 	ldw	r2,12(r18)
    b978:	88800315 	stw	r2,12(r17)
    b97c:	31c09126 	beq	r6,r7,bbc4 <_realloc_r+0x574>
    b980:	20800017 	ldw	r2,0(r4)
    b984:	28800015 	stw	r2,0(r5)
    b988:	20c00117 	ldw	r3,4(r4)
    b98c:	28c00115 	stw	r3,4(r5)
    b990:	20800217 	ldw	r2,8(r4)
    b994:	28800215 	stw	r2,8(r5)
    b998:	900b883a 	mov	r5,r18
    b99c:	b009883a 	mov	r4,r22
    b9a0:	000976c0 	call	976c <_free_r>
    b9a4:	b009883a 	mov	r4,r22
    b9a8:	0011f380 	call	11f38 <__malloc_unlock>
    b9ac:	003f5e06 	br	b728 <_realloc_r+0xd8>
    b9b0:	300b883a 	mov	r5,r6
    b9b4:	dfc00b17 	ldw	ra,44(sp)
    b9b8:	df000a17 	ldw	fp,40(sp)
    b9bc:	ddc00917 	ldw	r23,36(sp)
    b9c0:	dd800817 	ldw	r22,32(sp)
    b9c4:	dd400717 	ldw	r21,28(sp)
    b9c8:	dd000617 	ldw	r20,24(sp)
    b9cc:	dcc00517 	ldw	r19,20(sp)
    b9d0:	dc800417 	ldw	r18,16(sp)
    b9d4:	dc400317 	ldw	r17,12(sp)
    b9d8:	dc000217 	ldw	r16,8(sp)
    b9dc:	dec00c04 	addi	sp,sp,48
    b9e0:	0002d9c1 	jmpi	2d9c <_malloc_r>
    b9e4:	38800117 	ldw	r2,4(r7)
    b9e8:	e54b883a 	add	r5,fp,r21
    b9ec:	31000054 	ori	r4,r6,1
    b9f0:	1080004c 	andi	r2,r2,1
    b9f4:	1704b03a 	or	r2,r2,fp
    b9f8:	38800115 	stw	r2,4(r7)
    b9fc:	29000115 	stw	r4,4(r5)
    ba00:	2987883a 	add	r3,r5,r6
    ba04:	18800117 	ldw	r2,4(r3)
    ba08:	29400204 	addi	r5,r5,8
    ba0c:	b009883a 	mov	r4,r22
    ba10:	10800054 	ori	r2,r2,1
    ba14:	18800115 	stw	r2,4(r3)
    ba18:	000976c0 	call	976c <_free_r>
    ba1c:	003f3806 	br	b700 <_realloc_r+0xb0>
    ba20:	000d883a 	mov	r6,zero
    ba24:	0009883a 	mov	r4,zero
    ba28:	003f5d06 	br	b7a0 <_realloc_r+0x150>
    ba2c:	30c00217 	ldw	r3,8(r6)
    ba30:	30800317 	ldw	r2,12(r6)
    ba34:	800f883a 	mov	r7,r16
    ba38:	84000204 	addi	r16,r16,8
    ba3c:	10c00215 	stw	r3,8(r2)
    ba40:	18800315 	stw	r2,12(r3)
    ba44:	003f2306 	br	b6d4 <_realloc_r+0x84>
    ba48:	8809883a 	mov	r4,r17
    ba4c:	900b883a 	mov	r5,r18
    ba50:	000a3180 	call	a318 <memmove>
    ba54:	003fd006 	br	b998 <_realloc_r+0x348>
    ba58:	30800117 	ldw	r2,4(r6)
    ba5c:	e0c00404 	addi	r3,fp,16
    ba60:	1108703a 	and	r4,r2,r4
    ba64:	9905883a 	add	r2,r19,r4
    ba68:	10ff4d16 	blt	r2,r3,b7a0 <_realloc_r+0x150>
    ba6c:	1705c83a 	sub	r2,r2,fp
    ba70:	870b883a 	add	r5,r16,fp
    ba74:	10800054 	ori	r2,r2,1
    ba78:	28800115 	stw	r2,4(r5)
    ba7c:	80c00117 	ldw	r3,4(r16)
    ba80:	00800074 	movhi	r2,1
    ba84:	1094eb04 	addi	r2,r2,21420
    ba88:	b009883a 	mov	r4,r22
    ba8c:	18c0004c 	andi	r3,r3,1
    ba90:	e0c6b03a 	or	r3,fp,r3
    ba94:	11400215 	stw	r5,8(r2)
    ba98:	80c00115 	stw	r3,4(r16)
    ba9c:	0011f380 	call	11f38 <__malloc_unlock>
    baa0:	84400204 	addi	r17,r16,8
    baa4:	003f2006 	br	b728 <_realloc_r+0xd8>
    baa8:	98a9883a 	add	r20,r19,r2
    baac:	2509883a 	add	r4,r4,r20
    bab0:	e0800404 	addi	r2,fp,16
    bab4:	d9000115 	stw	r4,4(sp)
    bab8:	20bf7016 	blt	r4,r2,b87c <_realloc_r+0x22c>
    babc:	b8c00317 	ldw	r3,12(r23)
    bac0:	b8800217 	ldw	r2,8(r23)
    bac4:	99bfff04 	addi	r6,r19,-4
    bac8:	01400904 	movi	r5,36
    bacc:	18800215 	stw	r2,8(r3)
    bad0:	10c00315 	stw	r3,12(r2)
    bad4:	bc400204 	addi	r17,r23,8
    bad8:	29804136 	bltu	r5,r6,bbe0 <_realloc_r+0x590>
    badc:	008004c4 	movi	r2,19
    bae0:	9009883a 	mov	r4,r18
    bae4:	880f883a 	mov	r7,r17
    bae8:	11800f2e 	bgeu	r2,r6,bb28 <_realloc_r+0x4d8>
    baec:	90800017 	ldw	r2,0(r18)
    baf0:	b9c00404 	addi	r7,r23,16
    baf4:	91000204 	addi	r4,r18,8
    baf8:	b8800215 	stw	r2,8(r23)
    bafc:	90c00117 	ldw	r3,4(r18)
    bb00:	008006c4 	movi	r2,27
    bb04:	b8c00315 	stw	r3,12(r23)
    bb08:	1180072e 	bgeu	r2,r6,bb28 <_realloc_r+0x4d8>
    bb0c:	90c00217 	ldw	r3,8(r18)
    bb10:	b9c00604 	addi	r7,r23,24
    bb14:	91000404 	addi	r4,r18,16
    bb18:	b8c00415 	stw	r3,16(r23)
    bb1c:	90800317 	ldw	r2,12(r18)
    bb20:	b8800515 	stw	r2,20(r23)
    bb24:	31404026 	beq	r6,r5,bc28 <_realloc_r+0x5d8>
    bb28:	20800017 	ldw	r2,0(r4)
    bb2c:	38800015 	stw	r2,0(r7)
    bb30:	20c00117 	ldw	r3,4(r4)
    bb34:	38c00115 	stw	r3,4(r7)
    bb38:	20800217 	ldw	r2,8(r4)
    bb3c:	38800215 	stw	r2,8(r7)
    bb40:	d8c00117 	ldw	r3,4(sp)
    bb44:	bf0b883a 	add	r5,r23,fp
    bb48:	b009883a 	mov	r4,r22
    bb4c:	1f05c83a 	sub	r2,r3,fp
    bb50:	10800054 	ori	r2,r2,1
    bb54:	28800115 	stw	r2,4(r5)
    bb58:	b8c00117 	ldw	r3,4(r23)
    bb5c:	00800074 	movhi	r2,1
    bb60:	1094eb04 	addi	r2,r2,21420
    bb64:	11400215 	stw	r5,8(r2)
    bb68:	18c0004c 	andi	r3,r3,1
    bb6c:	e0c6b03a 	or	r3,fp,r3
    bb70:	b8c00115 	stw	r3,4(r23)
    bb74:	0011f380 	call	11f38 <__malloc_unlock>
    bb78:	003eeb06 	br	b728 <_realloc_r+0xd8>
    bb7c:	20800117 	ldw	r2,4(r4)
    bb80:	00ffff04 	movi	r3,-4
    bb84:	800f883a 	mov	r7,r16
    bb88:	10c4703a 	and	r2,r2,r3
    bb8c:	98a9883a 	add	r20,r19,r2
    bb90:	84000204 	addi	r16,r16,8
    bb94:	003ecf06 	br	b6d4 <_realloc_r+0x84>
    bb98:	900b883a 	mov	r5,r18
    bb9c:	8009883a 	mov	r4,r16
    bba0:	000a3180 	call	a318 <memmove>
    bba4:	dd000017 	ldw	r20,0(sp)
    bba8:	b80f883a 	mov	r7,r23
    bbac:	003ec906 	br	b6d4 <_realloc_r+0x84>
    bbb0:	900b883a 	mov	r5,r18
    bbb4:	8009883a 	mov	r4,r16
    bbb8:	000a3180 	call	a318 <memmove>
    bbbc:	b80f883a 	mov	r7,r23
    bbc0:	003ec406 	br	b6d4 <_realloc_r+0x84>
    bbc4:	90c00417 	ldw	r3,16(r18)
    bbc8:	89400604 	addi	r5,r17,24
    bbcc:	91000604 	addi	r4,r18,24
    bbd0:	88c00415 	stw	r3,16(r17)
    bbd4:	90800517 	ldw	r2,20(r18)
    bbd8:	88800515 	stw	r2,20(r17)
    bbdc:	003f6806 	br	b980 <_realloc_r+0x330>
    bbe0:	900b883a 	mov	r5,r18
    bbe4:	8809883a 	mov	r4,r17
    bbe8:	000a3180 	call	a318 <memmove>
    bbec:	003fd406 	br	bb40 <_realloc_r+0x4f0>
    bbf0:	90c00417 	ldw	r3,16(r18)
    bbf4:	91000604 	addi	r4,r18,24
    bbf8:	ba000804 	addi	r8,r23,32
    bbfc:	b8c00615 	stw	r3,24(r23)
    bc00:	90800517 	ldw	r2,20(r18)
    bc04:	b8800715 	stw	r2,28(r23)
    bc08:	003f1206 	br	b854 <_realloc_r+0x204>
    bc0c:	90c00417 	ldw	r3,16(r18)
    bc10:	91000604 	addi	r4,r18,24
    bc14:	ba000804 	addi	r8,r23,32
    bc18:	b8c00615 	stw	r3,24(r23)
    bc1c:	90800517 	ldw	r2,20(r18)
    bc20:	b8800715 	stw	r2,28(r23)
    bc24:	003f3206 	br	b8f0 <_realloc_r+0x2a0>
    bc28:	90c00417 	ldw	r3,16(r18)
    bc2c:	91000604 	addi	r4,r18,24
    bc30:	b9c00804 	addi	r7,r23,32
    bc34:	b8c00615 	stw	r3,24(r23)
    bc38:	90800517 	ldw	r2,20(r18)
    bc3c:	b8800715 	stw	r2,28(r23)
    bc40:	003fb906 	br	bb28 <_realloc_r+0x4d8>

0000bc44 <__isinfd>:
    bc44:	200d883a 	mov	r6,r4
    bc48:	0109c83a 	sub	r4,zero,r4
    bc4c:	2188b03a 	or	r4,r4,r6
    bc50:	2008d7fa 	srli	r4,r4,31
    bc54:	00a00034 	movhi	r2,32768
    bc58:	10bfffc4 	addi	r2,r2,-1
    bc5c:	1144703a 	and	r2,r2,r5
    bc60:	2088b03a 	or	r4,r4,r2
    bc64:	009ffc34 	movhi	r2,32752
    bc68:	1105c83a 	sub	r2,r2,r4
    bc6c:	0087c83a 	sub	r3,zero,r2
    bc70:	10c4b03a 	or	r2,r2,r3
    bc74:	1004d7fa 	srli	r2,r2,31
    bc78:	00c00044 	movi	r3,1
    bc7c:	1885c83a 	sub	r2,r3,r2
    bc80:	f800283a 	ret

0000bc84 <__isnand>:
    bc84:	200d883a 	mov	r6,r4
    bc88:	0109c83a 	sub	r4,zero,r4
    bc8c:	2188b03a 	or	r4,r4,r6
    bc90:	2008d7fa 	srli	r4,r4,31
    bc94:	00a00034 	movhi	r2,32768
    bc98:	10bfffc4 	addi	r2,r2,-1
    bc9c:	1144703a 	and	r2,r2,r5
    bca0:	2088b03a 	or	r4,r4,r2
    bca4:	009ffc34 	movhi	r2,32752
    bca8:	1105c83a 	sub	r2,r2,r4
    bcac:	1004d7fa 	srli	r2,r2,31
    bcb0:	f800283a 	ret

0000bcb4 <__sccl>:
    bcb4:	28c00003 	ldbu	r3,0(r5)
    bcb8:	00801784 	movi	r2,94
    bcbc:	2a000044 	addi	r8,r5,1
    bcc0:	18802526 	beq	r3,r2,bd58 <__sccl+0xa4>
    bcc4:	180f883a 	mov	r7,r3
    bcc8:	0013883a 	mov	r9,zero
    bccc:	000d883a 	mov	r6,zero
    bcd0:	0007883a 	mov	r3,zero
    bcd4:	01404004 	movi	r5,256
    bcd8:	1905883a 	add	r2,r3,r4
    bcdc:	18c00044 	addi	r3,r3,1
    bce0:	11800005 	stb	r6,0(r2)
    bce4:	197ffc1e 	bne	r3,r5,bcd8 <__sccl+0x24>
    bce8:	38000c26 	beq	r7,zero,bd1c <__sccl+0x68>
    bcec:	00800044 	movi	r2,1
    bcf0:	124dc83a 	sub	r6,r2,r9
    bcf4:	3905883a 	add	r2,r7,r4
    bcf8:	11800005 	stb	r6,0(r2)
    bcfc:	41400044 	addi	r5,r8,1
    bd00:	02400b44 	movi	r9,45
    bd04:	02801744 	movi	r10,93
    bd08:	28bfffc3 	ldbu	r2,-1(r5)
    bd0c:	2811883a 	mov	r8,r5
    bd10:	12400726 	beq	r2,r9,bd30 <__sccl+0x7c>
    bd14:	12800226 	beq	r2,r10,bd20 <__sccl+0x6c>
    bd18:	1000031e 	bne	r2,zero,bd28 <__sccl+0x74>
    bd1c:	423fffc4 	addi	r8,r8,-1
    bd20:	4005883a 	mov	r2,r8
    bd24:	f800283a 	ret
    bd28:	100f883a 	mov	r7,r2
    bd2c:	003ff106 	br	bcf4 <__sccl+0x40>
    bd30:	28c00003 	ldbu	r3,0(r5)
    bd34:	1a800d26 	beq	r3,r10,bd6c <__sccl+0xb8>
    bd38:	19c00c16 	blt	r3,r7,bd6c <__sccl+0xb8>
    bd3c:	21c5883a 	add	r2,r4,r7
    bd40:	39c00044 	addi	r7,r7,1
    bd44:	11800045 	stb	r6,1(r2)
    bd48:	10800044 	addi	r2,r2,1
    bd4c:	38fffc16 	blt	r7,r3,bd40 <__sccl+0x8c>
    bd50:	29400084 	addi	r5,r5,2
    bd54:	003fec06 	br	bd08 <__sccl+0x54>
    bd58:	29c00043 	ldbu	r7,1(r5)
    bd5c:	02400044 	movi	r9,1
    bd60:	2a000084 	addi	r8,r5,2
    bd64:	480d883a 	mov	r6,r9
    bd68:	003fd906 	br	bcd0 <__sccl+0x1c>
    bd6c:	01c00b44 	movi	r7,45
    bd70:	003fe006 	br	bcf4 <__sccl+0x40>

0000bd74 <nanf>:
    bd74:	009ff034 	movhi	r2,32704
    bd78:	f800283a 	ret

0000bd7c <match>:
    bd7c:	21800017 	ldw	r6,0(r4)
    bd80:	01c01004 	movi	r7,64
    bd84:	02001684 	movi	r8,90
    bd88:	28800007 	ldb	r2,0(r5)
    bd8c:	29400044 	addi	r5,r5,1
    bd90:	10000826 	beq	r2,zero,bdb4 <match+0x38>
    bd94:	31800044 	addi	r6,r6,1
    bd98:	30c00007 	ldb	r3,0(r6)
    bd9c:	38c0020e 	bge	r7,r3,bda8 <match+0x2c>
    bda0:	40c00116 	blt	r8,r3,bda8 <match+0x2c>
    bda4:	18c00804 	addi	r3,r3,32
    bda8:	18bff726 	beq	r3,r2,bd88 <match+0xc>
    bdac:	0005883a 	mov	r2,zero
    bdb0:	f800283a 	ret
    bdb4:	30800044 	addi	r2,r6,1
    bdb8:	20800015 	stw	r2,0(r4)
    bdbc:	00800044 	movi	r2,1
    bdc0:	f800283a 	ret

0000bdc4 <_strtod_r>:
    bdc4:	deffde04 	addi	sp,sp,-136
    bdc8:	df002015 	stw	fp,128(sp)
    bdcc:	dd401d15 	stw	r21,116(sp)
    bdd0:	dc401915 	stw	r17,100(sp)
    bdd4:	dfc02115 	stw	ra,132(sp)
    bdd8:	ddc01f15 	stw	r23,124(sp)
    bddc:	dd801e15 	stw	r22,120(sp)
    bde0:	dd001c15 	stw	r20,112(sp)
    bde4:	dcc01b15 	stw	r19,108(sp)
    bde8:	dc801a15 	stw	r18,104(sp)
    bdec:	dc001815 	stw	r16,96(sp)
    bdf0:	2823883a 	mov	r17,r5
    bdf4:	202b883a 	mov	r21,r4
    bdf8:	d9801515 	stw	r6,84(sp)
    bdfc:	d8000915 	stw	zero,36(sp)
    be00:	d8000a15 	stw	zero,40(sp)
    be04:	d9400415 	stw	r5,16(sp)
    be08:	df000904 	addi	fp,sp,36
    be0c:	da000417 	ldw	r8,16(sp)
    be10:	00800b44 	movi	r2,45
    be14:	40c00003 	ldbu	r3,0(r8)
    be18:	10c03536 	bltu	r2,r3,bef0 <_strtod_r+0x12c>
    be1c:	18c5883a 	add	r2,r3,r3
    be20:	1085883a 	add	r2,r2,r2
    be24:	00c00074 	movhi	r3,1
    be28:	18ef8e04 	addi	r3,r3,-16840
    be2c:	10c5883a 	add	r2,r2,r3
    be30:	11000017 	ldw	r4,0(r2)
    be34:	2000683a 	jmp	r4
    be38:	0000c02c 	andhi	zero,zero,768
    be3c:	0000bef0 	cmpltui	zero,zero,763
    be40:	0000bef0 	cmpltui	zero,zero,763
    be44:	0000bef0 	cmpltui	zero,zero,763
    be48:	0000bef0 	cmpltui	zero,zero,763
    be4c:	0000bef0 	cmpltui	zero,zero,763
    be50:	0000bef0 	cmpltui	zero,zero,763
    be54:	0000bef0 	cmpltui	zero,zero,763
    be58:	0000bef0 	cmpltui	zero,zero,763
    be5c:	0000c344 	movi	zero,781
    be60:	0000c344 	movi	zero,781
    be64:	0000c344 	movi	zero,781
    be68:	0000c344 	movi	zero,781
    be6c:	0000c344 	movi	zero,781
    be70:	0000bef0 	cmpltui	zero,zero,763
    be74:	0000bef0 	cmpltui	zero,zero,763
    be78:	0000bef0 	cmpltui	zero,zero,763
    be7c:	0000bef0 	cmpltui	zero,zero,763
    be80:	0000bef0 	cmpltui	zero,zero,763
    be84:	0000bef0 	cmpltui	zero,zero,763
    be88:	0000bef0 	cmpltui	zero,zero,763
    be8c:	0000bef0 	cmpltui	zero,zero,763
    be90:	0000bef0 	cmpltui	zero,zero,763
    be94:	0000bef0 	cmpltui	zero,zero,763
    be98:	0000bef0 	cmpltui	zero,zero,763
    be9c:	0000bef0 	cmpltui	zero,zero,763
    bea0:	0000bef0 	cmpltui	zero,zero,763
    bea4:	0000bef0 	cmpltui	zero,zero,763
    bea8:	0000bef0 	cmpltui	zero,zero,763
    beac:	0000bef0 	cmpltui	zero,zero,763
    beb0:	0000bef0 	cmpltui	zero,zero,763
    beb4:	0000bef0 	cmpltui	zero,zero,763
    beb8:	0000c344 	movi	zero,781
    bebc:	0000bef0 	cmpltui	zero,zero,763
    bec0:	0000bef0 	cmpltui	zero,zero,763
    bec4:	0000bef0 	cmpltui	zero,zero,763
    bec8:	0000bef0 	cmpltui	zero,zero,763
    becc:	0000bef0 	cmpltui	zero,zero,763
    bed0:	0000bef0 	cmpltui	zero,zero,763
    bed4:	0000bef0 	cmpltui	zero,zero,763
    bed8:	0000bef0 	cmpltui	zero,zero,763
    bedc:	0000bef0 	cmpltui	zero,zero,763
    bee0:	0000bef0 	cmpltui	zero,zero,763
    bee4:	0000c324 	muli	zero,zero,780
    bee8:	0000bef0 	cmpltui	zero,zero,763
    beec:	0000c350 	cmplti	zero,zero,781
    bef0:	d8001115 	stw	zero,68(sp)
    bef4:	40c00007 	ldb	r3,0(r8)
    bef8:	00800c04 	movi	r2,48
    befc:	1880d026 	beq	r3,r2,c240 <_strtod_r+0x47c>
    bf00:	001f883a 	mov	r15,zero
    bf04:	41000007 	ldb	r4,0(r8)
    bf08:	00c00bc4 	movi	r3,47
    bf0c:	402d883a 	mov	r22,r8
    bf10:	1903470e 	bge	r3,r4,cc30 <_strtod_r+0xe6c>
    bf14:	00800e44 	movi	r2,57
    bf18:	11034516 	blt	r2,r4,cc30 <_strtod_r+0xe6c>
    bf1c:	180f883a 	mov	r7,r3
    bf20:	1013883a 	mov	r9,r2
    bf24:	4007883a 	mov	r3,r8
    bf28:	000d883a 	mov	r6,zero
    bf2c:	0029883a 	mov	r20,zero
    bf30:	0021883a 	mov	r16,zero
    bf34:	01400204 	movi	r5,8
    bf38:	028003c4 	movi	r10,15
    bf3c:	29803116 	blt	r5,r6,c004 <_strtod_r+0x240>
    bf40:	a08002a4 	muli	r2,r20,10
    bf44:	1105883a 	add	r2,r2,r4
    bf48:	153ff404 	addi	r20,r2,-48
    bf4c:	1a000044 	addi	r8,r3,1
    bf50:	da000415 	stw	r8,16(sp)
    bf54:	41000007 	ldb	r4,0(r8)
    bf58:	31800044 	addi	r6,r6,1
    bf5c:	4007883a 	mov	r3,r8
    bf60:	3900010e 	bge	r7,r4,bf68 <_strtod_r+0x1a4>
    bf64:	493ff50e 	bge	r9,r4,bf3c <_strtod_r+0x178>
    bf68:	00800b84 	movi	r2,46
    bf6c:	2080c126 	beq	r4,r2,c274 <_strtod_r+0x4b0>
    bf70:	3027883a 	mov	r19,r6
    bf74:	0025883a 	mov	r18,zero
    bf78:	0015883a 	mov	r10,zero
    bf7c:	000f883a 	mov	r7,zero
    bf80:	00801944 	movi	r2,101
    bf84:	20802426 	beq	r4,r2,c018 <_strtod_r+0x254>
    bf88:	00801144 	movi	r2,69
    bf8c:	20802226 	beq	r4,r2,c018 <_strtod_r+0x254>
    bf90:	9816c03a 	cmpne	r11,r19,zero
    bf94:	000b883a 	mov	r5,zero
    bf98:	5800631e 	bne	r11,zero,c128 <_strtod_r+0x364>
    bf9c:	3800c126 	beq	r7,zero,c2a4 <_strtod_r+0x4e0>
    bfa0:	d8c01517 	ldw	r3,84(sp)
    bfa4:	18000226 	beq	r3,zero,bfb0 <_strtod_r+0x1ec>
    bfa8:	d8800417 	ldw	r2,16(sp)
    bfac:	18800015 	stw	r2,0(r3)
    bfb0:	d9001117 	ldw	r4,68(sp)
    bfb4:	2005003a 	cmpeq	r2,r4,zero
    bfb8:	10001f1e 	bne	r2,zero,c038 <_strtod_r+0x274>
    bfbc:	e0800017 	ldw	r2,0(fp)
    bfc0:	e0c00117 	ldw	r3,4(fp)
    bfc4:	1009883a 	mov	r4,r2
    bfc8:	1960003c 	xorhi	r5,r3,32768
    bfcc:	2005883a 	mov	r2,r4
    bfd0:	2807883a 	mov	r3,r5
    bfd4:	dfc02117 	ldw	ra,132(sp)
    bfd8:	df002017 	ldw	fp,128(sp)
    bfdc:	ddc01f17 	ldw	r23,124(sp)
    bfe0:	dd801e17 	ldw	r22,120(sp)
    bfe4:	dd401d17 	ldw	r21,116(sp)
    bfe8:	dd001c17 	ldw	r20,112(sp)
    bfec:	dcc01b17 	ldw	r19,108(sp)
    bff0:	dc801a17 	ldw	r18,104(sp)
    bff4:	dc401917 	ldw	r17,100(sp)
    bff8:	dc001817 	ldw	r16,96(sp)
    bffc:	dec02204 	addi	sp,sp,136
    c000:	f800283a 	ret
    c004:	51bfd116 	blt	r10,r6,bf4c <_strtod_r+0x188>
    c008:	808002a4 	muli	r2,r16,10
    c00c:	1105883a 	add	r2,r2,r4
    c010:	143ff404 	addi	r16,r2,-48
    c014:	003fcd06 	br	bf4c <_strtod_r+0x188>
    c018:	9816c03a 	cmpne	r11,r19,zero
    c01c:	5800091e 	bne	r11,zero,c044 <_strtod_r+0x280>
    c020:	3800081e 	bne	r7,zero,c044 <_strtod_r+0x280>
    c024:	7805003a 	cmpeq	r2,r15,zero
    c028:	10000626 	beq	r2,zero,c044 <_strtod_r+0x280>
    c02c:	d8001115 	stw	zero,68(sp)
    c030:	dc400415 	stw	r17,16(sp)
    c034:	003fda06 	br	bfa0 <_strtod_r+0x1dc>
    c038:	e1000017 	ldw	r4,0(fp)
    c03c:	e1400117 	ldw	r5,4(fp)
    c040:	003fe206 	br	bfcc <_strtod_r+0x208>
    c044:	dc400417 	ldw	r17,16(sp)
    c048:	00800ac4 	movi	r2,43
    c04c:	8a000044 	addi	r8,r17,1
    c050:	da000415 	stw	r8,16(sp)
    c054:	88c00047 	ldb	r3,1(r17)
    c058:	4009883a 	mov	r4,r8
    c05c:	1880bf26 	beq	r3,r2,c35c <_strtod_r+0x598>
    c060:	00800b44 	movi	r2,45
    c064:	18834526 	beq	r3,r2,cd7c <_strtod_r+0xfb8>
    c068:	1809883a 	mov	r4,r3
    c06c:	20fff404 	addi	r3,r4,-48
    c070:	00800244 	movi	r2,9
    c074:	001d883a 	mov	r14,zero
    c078:	10c0bf36 	bltu	r2,r3,c378 <_strtod_r+0x5b4>
    c07c:	00800c04 	movi	r2,48
    c080:	2080061e 	bne	r4,r2,c09c <_strtod_r+0x2d8>
    c084:	da000417 	ldw	r8,16(sp)
    c088:	2005883a 	mov	r2,r4
    c08c:	42000044 	addi	r8,r8,1
    c090:	da000415 	stw	r8,16(sp)
    c094:	41000007 	ldb	r4,0(r8)
    c098:	20bffc26 	beq	r4,r2,c08c <_strtod_r+0x2c8>
    c09c:	20fff3c4 	addi	r3,r4,-49
    c0a0:	00800204 	movi	r2,8
    c0a4:	10ffbb36 	bltu	r2,r3,bf94 <_strtod_r+0x1d0>
    c0a8:	da000417 	ldw	r8,16(sp)
    c0ac:	227ff404 	addi	r9,r4,-48
    c0b0:	03000bc4 	movi	r12,47
    c0b4:	4007883a 	mov	r3,r8
    c0b8:	42000044 	addi	r8,r8,1
    c0bc:	da000415 	stw	r8,16(sp)
    c0c0:	41000007 	ldb	r4,0(r8)
    c0c4:	61000d0e 	bge	r12,r4,c0fc <_strtod_r+0x338>
    c0c8:	00800e44 	movi	r2,57
    c0cc:	11000b16 	blt	r2,r4,c0fc <_strtod_r+0x338>
    c0d0:	601b883a 	mov	r13,r12
    c0d4:	1019883a 	mov	r12,r2
    c0d8:	00000106 	br	c0e0 <_strtod_r+0x31c>
    c0dc:	61000716 	blt	r12,r4,c0fc <_strtod_r+0x338>
    c0e0:	488002a4 	muli	r2,r9,10
    c0e4:	42000044 	addi	r8,r8,1
    c0e8:	da000415 	stw	r8,16(sp)
    c0ec:	2085883a 	add	r2,r4,r2
    c0f0:	41000007 	ldb	r4,0(r8)
    c0f4:	127ff404 	addi	r9,r2,-48
    c0f8:	693ff816 	blt	r13,r4,c0dc <_strtod_r+0x318>
    c0fc:	40c7c83a 	sub	r3,r8,r3
    c100:	00800204 	movi	r2,8
    c104:	10c2e416 	blt	r2,r3,cc98 <_strtod_r+0xed4>
    c108:	009387c4 	movi	r2,19999
    c10c:	480b883a 	mov	r5,r9
    c110:	1240010e 	bge	r2,r9,c118 <_strtod_r+0x354>
    c114:	100b883a 	mov	r5,r2
    c118:	7005003a 	cmpeq	r2,r14,zero
    c11c:	103f9e1e 	bne	r2,zero,bf98 <_strtod_r+0x1d4>
    c120:	014bc83a 	sub	r5,zero,r5
    c124:	583f9d26 	beq	r11,zero,bf9c <_strtod_r+0x1d8>
    c128:	2a8bc83a 	sub	r5,r5,r10
    c12c:	d9400f15 	stw	r5,60(sp)
    c130:	30007a1e 	bne	r6,zero,c31c <_strtod_r+0x558>
    c134:	dcc01215 	stw	r19,72(sp)
    c138:	00800404 	movi	r2,16
    c13c:	9825883a 	mov	r18,r19
    c140:	14c0010e 	bge	r2,r19,c148 <_strtod_r+0x384>
    c144:	1025883a 	mov	r18,r2
    c148:	a009883a 	mov	r4,r20
    c14c:	0010e700 	call	10e70 <__floatunsidf>
    c150:	100f883a 	mov	r7,r2
    c154:	e0800015 	stw	r2,0(fp)
    c158:	00800244 	movi	r2,9
    c15c:	e0c00115 	stw	r3,4(fp)
    c160:	1480160e 	bge	r2,r18,c1bc <_strtod_r+0x3f8>
    c164:	900c90fa 	slli	r6,r18,3
    c168:	01000074 	movhi	r4,1
    c16c:	21132004 	addi	r4,r4,19584
    c170:	180b883a 	mov	r5,r3
    c174:	310d883a 	add	r6,r6,r4
    c178:	30ffef17 	ldw	r3,-68(r6)
    c17c:	30bfee17 	ldw	r2,-72(r6)
    c180:	3809883a 	mov	r4,r7
    c184:	180f883a 	mov	r7,r3
    c188:	100d883a 	mov	r6,r2
    c18c:	00102e00 	call	102e0 <__muldf3>
    c190:	8009883a 	mov	r4,r16
    c194:	1823883a 	mov	r17,r3
    c198:	1021883a 	mov	r16,r2
    c19c:	0010e700 	call	10e70 <__floatunsidf>
    c1a0:	880b883a 	mov	r5,r17
    c1a4:	180f883a 	mov	r7,r3
    c1a8:	8009883a 	mov	r4,r16
    c1ac:	100d883a 	mov	r6,r2
    c1b0:	001026c0 	call	1026c <__adddf3>
    c1b4:	e0c00115 	stw	r3,4(fp)
    c1b8:	e0800015 	stw	r2,0(fp)
    c1bc:	010003c4 	movi	r4,15
    c1c0:	24c09816 	blt	r4,r19,c424 <_strtod_r+0x660>
    c1c4:	d9800f17 	ldw	r6,60(sp)
    c1c8:	303f7526 	beq	r6,zero,bfa0 <_strtod_r+0x1dc>
    c1cc:	0183be0e 	bge	zero,r6,d0c8 <_strtod_r+0x1304>
    c1d0:	00800584 	movi	r2,22
    c1d4:	1182b20e 	bge	r2,r6,cca0 <_strtod_r+0xedc>
    c1d8:	d8c00f17 	ldw	r3,60(sp)
    c1dc:	24e3c83a 	sub	r17,r4,r19
    c1e0:	88800584 	addi	r2,r17,22
    c1e4:	10c08f16 	blt	r2,r3,c424 <_strtod_r+0x660>
    c1e8:	880890fa 	slli	r4,r17,3
    c1ec:	04000074 	movhi	r16,1
    c1f0:	84132004 	addi	r16,r16,19584
    c1f4:	e0800017 	ldw	r2,0(fp)
    c1f8:	2409883a 	add	r4,r4,r16
    c1fc:	22000017 	ldw	r8,0(r4)
    c200:	22400117 	ldw	r9,4(r4)
    c204:	e0c00117 	ldw	r3,4(fp)
    c208:	1009883a 	mov	r4,r2
    c20c:	480f883a 	mov	r7,r9
    c210:	180b883a 	mov	r5,r3
    c214:	400d883a 	mov	r6,r8
    c218:	00102e00 	call	102e0 <__muldf3>
    c21c:	d9000f17 	ldw	r4,60(sp)
    c220:	180b883a 	mov	r5,r3
    c224:	2455c83a 	sub	r10,r4,r17
    c228:	501490fa 	slli	r10,r10,3
    c22c:	1009883a 	mov	r4,r2
    c230:	5415883a 	add	r10,r10,r16
    c234:	52000017 	ldw	r8,0(r10)
    c238:	52400117 	ldw	r9,4(r10)
    c23c:	0002a206 	br	ccc8 <_strtod_r+0xf04>
    c240:	40c00047 	ldb	r3,1(r8)
    c244:	00801604 	movi	r2,88
    c248:	18804e26 	beq	r3,r2,c384 <_strtod_r+0x5c0>
    c24c:	00801e04 	movi	r2,120
    c250:	18804c26 	beq	r3,r2,c384 <_strtod_r+0x5c0>
    c254:	42000044 	addi	r8,r8,1
    c258:	da000415 	stw	r8,16(sp)
    c25c:	40c00007 	ldb	r3,0(r8)
    c260:	00800c04 	movi	r2,48
    c264:	18bffb26 	beq	r3,r2,c254 <_strtod_r+0x490>
    c268:	183f4d26 	beq	r3,zero,bfa0 <_strtod_r+0x1dc>
    c26c:	03c00044 	movi	r15,1
    c270:	003f2406 	br	bf04 <_strtod_r+0x140>
    c274:	42000044 	addi	r8,r8,1
    c278:	da000415 	stw	r8,16(sp)
    c27c:	19000047 	ldb	r4,1(r3)
    c280:	3000b726 	beq	r6,zero,c560 <_strtod_r+0x79c>
    c284:	3027883a 	mov	r19,r6
    c288:	0015883a 	mov	r10,zero
    c28c:	000f883a 	mov	r7,zero
    c290:	227ff404 	addi	r9,r4,-48
    c294:	00800244 	movi	r2,9
    c298:	1242592e 	bgeu	r2,r9,cc00 <_strtod_r+0xe3c>
    c29c:	04800044 	movi	r18,1
    c2a0:	003f3706 	br	bf80 <_strtod_r+0x1bc>
    c2a4:	7804c03a 	cmpne	r2,r15,zero
    c2a8:	103f3d1e 	bne	r2,zero,bfa0 <_strtod_r+0x1dc>
    c2ac:	9004c03a 	cmpne	r2,r18,zero
    c2b0:	103f5e1e 	bne	r2,zero,c02c <_strtod_r+0x268>
    c2b4:	00801384 	movi	r2,78
    c2b8:	2083a226 	beq	r4,r2,d144 <_strtod_r+0x1380>
    c2bc:	11039d16 	blt	r2,r4,d134 <_strtod_r+0x1370>
    c2c0:	00801244 	movi	r2,73
    c2c4:	20bf591e 	bne	r4,r2,c02c <_strtod_r+0x268>
    c2c8:	dc000404 	addi	r16,sp,16
    c2cc:	8009883a 	mov	r4,r16
    c2d0:	01400074 	movhi	r5,1
    c2d4:	29536904 	addi	r5,r5,19876
    c2d8:	000bd7c0 	call	bd7c <match>
    c2dc:	103f5326 	beq	r2,zero,c02c <_strtod_r+0x268>
    c2e0:	d8800417 	ldw	r2,16(sp)
    c2e4:	8009883a 	mov	r4,r16
    c2e8:	01400074 	movhi	r5,1
    c2ec:	29536a04 	addi	r5,r5,19880
    c2f0:	123fffc4 	addi	r8,r2,-1
    c2f4:	da000415 	stw	r8,16(sp)
    c2f8:	000bd7c0 	call	bd7c <match>
    c2fc:	1000031e 	bne	r2,zero,c30c <_strtod_r+0x548>
    c300:	d8800417 	ldw	r2,16(sp)
    c304:	12000044 	addi	r8,r2,1
    c308:	da000415 	stw	r8,16(sp)
    c30c:	019ffc34 	movhi	r6,32752
    c310:	e1800115 	stw	r6,4(fp)
    c314:	e0000015 	stw	zero,0(fp)
    c318:	003f2106 	br	bfa0 <_strtod_r+0x1dc>
    c31c:	d9801215 	stw	r6,72(sp)
    c320:	003f8506 	br	c138 <_strtod_r+0x374>
    c324:	d8001115 	stw	zero,68(sp)
    c328:	42000044 	addi	r8,r8,1
    c32c:	da000415 	stw	r8,16(sp)
    c330:	40800007 	ldb	r2,0(r8)
    c334:	103eef1e 	bne	r2,zero,bef4 <_strtod_r+0x130>
    c338:	d8001115 	stw	zero,68(sp)
    c33c:	dc400415 	stw	r17,16(sp)
    c340:	003f1706 	br	bfa0 <_strtod_r+0x1dc>
    c344:	42000044 	addi	r8,r8,1
    c348:	da000415 	stw	r8,16(sp)
    c34c:	003eaf06 	br	be0c <_strtod_r+0x48>
    c350:	00800044 	movi	r2,1
    c354:	d8801115 	stw	r2,68(sp)
    c358:	003ff306 	br	c328 <_strtod_r+0x564>
    c35c:	001d883a 	mov	r14,zero
    c360:	42000044 	addi	r8,r8,1
    c364:	da000415 	stw	r8,16(sp)
    c368:	21000047 	ldb	r4,1(r4)
    c36c:	00800244 	movi	r2,9
    c370:	20fff404 	addi	r3,r4,-48
    c374:	10ff412e 	bgeu	r2,r3,c07c <_strtod_r+0x2b8>
    c378:	000b883a 	mov	r5,zero
    c37c:	dc400415 	stw	r17,16(sp)
    c380:	003f0506 	br	bf98 <_strtod_r+0x1d4>
    c384:	d8c01117 	ldw	r3,68(sp)
    c388:	04800074 	movhi	r18,1
    c38c:	9495f504 	addi	r18,r18,22484
    c390:	d8800504 	addi	r2,sp,20
    c394:	a809883a 	mov	r4,r21
    c398:	d9400404 	addi	r5,sp,16
    c39c:	900d883a 	mov	r6,r18
    c3a0:	d9c00604 	addi	r7,sp,24
    c3a4:	d8800015 	stw	r2,0(sp)
    c3a8:	d8c00115 	stw	r3,4(sp)
    c3ac:	000e4f00 	call	e4f0 <__gethex>
    c3b0:	140001cc 	andi	r16,r2,7
    c3b4:	1027883a 	mov	r19,r2
    c3b8:	803ef926 	beq	r16,zero,bfa0 <_strtod_r+0x1dc>
    c3bc:	05000184 	movi	r20,6
    c3c0:	853f1a26 	beq	r16,r20,c02c <_strtod_r+0x268>
    c3c4:	d9800517 	ldw	r6,20(sp)
    c3c8:	30000626 	beq	r6,zero,c3e4 <_strtod_r+0x620>
    c3cc:	91400017 	ldw	r5,0(r18)
    c3d0:	d9000d04 	addi	r4,sp,52
    c3d4:	000a8980 	call	a898 <__copybits>
    c3d8:	d9400517 	ldw	r5,20(sp)
    c3dc:	a809883a 	mov	r4,r21
    c3e0:	000a3f80 	call	a3f8 <_Bfree>
    c3e4:	d9400617 	ldw	r5,24(sp)
    c3e8:	a4024136 	bltu	r20,r16,ccf0 <_strtod_r+0xf2c>
    c3ec:	8405883a 	add	r2,r16,r16
    c3f0:	1085883a 	add	r2,r2,r2
    c3f4:	00c00074 	movhi	r3,1
    c3f8:	18f10204 	addi	r3,r3,-15352
    c3fc:	10c5883a 	add	r2,r2,r3
    c400:	11000017 	ldw	r4,0(r2)
    c404:	2000683a 	jmp	r4
    c408:	0000cd30 	cmpltui	zero,zero,820
    c40c:	0000cd3c 	xorhi	zero,zero,820
    c410:	0000cce0 	cmpeqi	zero,zero,819
    c414:	0000cd08 	cmpgei	zero,zero,820
    c418:	0000cd18 	cmpnei	zero,zero,820
    c41c:	0000cd3c 	xorhi	zero,zero,820
    c420:	0000cd30 	cmpltui	zero,zero,820
    c424:	d8c00f17 	ldw	r3,60(sp)
    c428:	9c85c83a 	sub	r2,r19,r18
    c42c:	18a1883a 	add	r16,r3,r2
    c430:	0402d00e 	bge	zero,r16,cf74 <_strtod_r+0x11b0>
    c434:	814003cc 	andi	r5,r16,15
    c438:	28000f26 	beq	r5,zero,c478 <_strtod_r+0x6b4>
    c43c:	280a90fa 	slli	r5,r5,3
    c440:	01000074 	movhi	r4,1
    c444:	21132004 	addi	r4,r4,19584
    c448:	e0800017 	ldw	r2,0(fp)
    c44c:	290b883a 	add	r5,r5,r4
    c450:	2a000017 	ldw	r8,0(r5)
    c454:	e0c00117 	ldw	r3,4(fp)
    c458:	2a400117 	ldw	r9,4(r5)
    c45c:	1009883a 	mov	r4,r2
    c460:	180b883a 	mov	r5,r3
    c464:	480f883a 	mov	r7,r9
    c468:	400d883a 	mov	r6,r8
    c46c:	00102e00 	call	102e0 <__muldf3>
    c470:	e0c00115 	stw	r3,4(fp)
    c474:	e0800015 	stw	r2,0(fp)
    c478:	00bffc04 	movi	r2,-16
    c47c:	808c703a 	and	r6,r16,r2
    c480:	30005b26 	beq	r6,zero,c5f0 <_strtod_r+0x82c>
    c484:	00804d04 	movi	r2,308
    c488:	1181fd16 	blt	r2,r6,cc80 <_strtod_r+0xebc>
    c48c:	3021d13a 	srai	r16,r6,4
    c490:	00800044 	movi	r2,1
    c494:	1403610e 	bge	r2,r16,d21c <_strtod_r+0x1458>
    c498:	102f883a 	mov	r23,r2
    c49c:	0025883a 	mov	r18,zero
    c4a0:	04400074 	movhi	r17,1
    c4a4:	8c535204 	addi	r17,r17,19784
    c4a8:	8080004c 	andi	r2,r16,1
    c4ac:	1005003a 	cmpeq	r2,r2,zero
    c4b0:	1000091e 	bne	r2,zero,c4d8 <_strtod_r+0x714>
    c4b4:	e0800017 	ldw	r2,0(fp)
    c4b8:	e0c00117 	ldw	r3,4(fp)
    c4bc:	89800017 	ldw	r6,0(r17)
    c4c0:	89c00117 	ldw	r7,4(r17)
    c4c4:	180b883a 	mov	r5,r3
    c4c8:	1009883a 	mov	r4,r2
    c4cc:	00102e00 	call	102e0 <__muldf3>
    c4d0:	e0c00115 	stw	r3,4(fp)
    c4d4:	e0800015 	stw	r2,0(fp)
    c4d8:	8021d07a 	srai	r16,r16,1
    c4dc:	94800044 	addi	r18,r18,1
    c4e0:	8c400204 	addi	r17,r17,8
    c4e4:	bc3ff016 	blt	r23,r16,c4a8 <_strtod_r+0x6e4>
    c4e8:	900e90fa 	slli	r7,r18,3
    c4ec:	01800074 	movhi	r6,1
    c4f0:	31935204 	addi	r6,r6,19784
    c4f4:	e2000117 	ldw	r8,4(fp)
    c4f8:	398f883a 	add	r7,r7,r6
    c4fc:	38800017 	ldw	r2,0(r7)
    c500:	38c00117 	ldw	r3,4(r7)
    c504:	e1000017 	ldw	r4,0(fp)
    c508:	01bf2c34 	movhi	r6,64688
    c50c:	418d883a 	add	r6,r8,r6
    c510:	300b883a 	mov	r5,r6
    c514:	180f883a 	mov	r7,r3
    c518:	100d883a 	mov	r6,r2
    c51c:	00102e00 	call	102e0 <__muldf3>
    c520:	1009883a 	mov	r4,r2
    c524:	180b883a 	mov	r5,r3
    c528:	199ffc2c 	andhi	r6,r3,32752
    c52c:	009f2834 	movhi	r2,31904
    c530:	e1000015 	stw	r4,0(fp)
    c534:	e1400115 	stw	r5,4(fp)
    c538:	1181d136 	bltu	r2,r6,cc80 <_strtod_r+0xebc>
    c53c:	009f2434 	movhi	r2,31888
    c540:	1183202e 	bgeu	r2,r6,d1c4 <_strtod_r+0x1400>
    c544:	d8001415 	stw	zero,80(sp)
    c548:	019ffc34 	movhi	r6,32752
    c54c:	31bfffc4 	addi	r6,r6,-1
    c550:	01ffffc4 	movi	r7,-1
    c554:	e1800115 	stw	r6,4(fp)
    c558:	e1c00015 	stw	r7,0(fp)
    c55c:	00002506 	br	c5f4 <_strtod_r+0x830>
    c560:	00800c04 	movi	r2,48
    c564:	2083151e 	bne	r4,r2,d1bc <_strtod_r+0x13f8>
    c568:	2005883a 	mov	r2,r4
    c56c:	000f883a 	mov	r7,zero
    c570:	42000044 	addi	r8,r8,1
    c574:	da000415 	stw	r8,16(sp)
    c578:	41000007 	ldb	r4,0(r8)
    c57c:	39c00044 	addi	r7,r7,1
    c580:	20bffb26 	beq	r4,r2,c570 <_strtod_r+0x7ac>
    c584:	20fff3c4 	addi	r3,r4,-49
    c588:	00800204 	movi	r2,8
    c58c:	10c1b836 	bltu	r2,r3,cc70 <_strtod_r+0xeac>
    c590:	dd800417 	ldw	r22,16(sp)
    c594:	3815883a 	mov	r10,r7
    c598:	227ff404 	addi	r9,r4,-48
    c59c:	b011883a 	mov	r8,r22
    c5a0:	0027883a 	mov	r19,zero
    c5a4:	01c00044 	movi	r7,1
    c5a8:	4801fe26 	beq	r9,zero,cda4 <_strtod_r+0xfe0>
    c5ac:	00800044 	movi	r2,1
    c5b0:	51d5883a 	add	r10,r10,r7
    c5b4:	11c31f0e 	bge	r2,r7,d234 <_strtod_r+0x1470>
    c5b8:	1009883a 	mov	r4,r2
    c5bc:	9807883a 	mov	r3,r19
    c5c0:	02c00204 	movi	r11,8
    c5c4:	03000404 	movi	r12,16
    c5c8:	00000306 	br	c5d8 <_strtod_r+0x814>
    c5cc:	a50002a4 	muli	r20,r20,10
    c5d0:	21000044 	addi	r4,r4,1
    c5d4:	21c1eb26 	beq	r4,r7,cd84 <_strtod_r+0xfc0>
    c5d8:	18c00044 	addi	r3,r3,1
    c5dc:	18bfffc4 	addi	r2,r3,-1
    c5e0:	58bffa0e 	bge	r11,r2,c5cc <_strtod_r+0x808>
    c5e4:	60fffa16 	blt	r12,r3,c5d0 <_strtod_r+0x80c>
    c5e8:	840002a4 	muli	r16,r16,10
    c5ec:	003ff806 	br	c5d0 <_strtod_r+0x80c>
    c5f0:	d8001415 	stw	zero,80(sp)
    c5f4:	d9801217 	ldw	r6,72(sp)
    c5f8:	a809883a 	mov	r4,r21
    c5fc:	b00b883a 	mov	r5,r22
    c600:	980f883a 	mov	r7,r19
    c604:	dd000015 	stw	r20,0(sp)
    c608:	000b2cc0 	call	b2cc <__s2b>
    c60c:	d9800f17 	ldw	r6,60(sp)
    c610:	11000304 	addi	r4,r2,12
    c614:	d8801015 	stw	r2,64(sp)
    c618:	300c803a 	cmplt	r6,r6,zero
    c61c:	d9001715 	stw	r4,92(sp)
    c620:	d9801615 	stw	r6,88(sp)
    c624:	d8801017 	ldw	r2,64(sp)
    c628:	a809883a 	mov	r4,r21
    c62c:	11400117 	ldw	r5,4(r2)
    c630:	000a9780 	call	a978 <_Balloc>
    c634:	d8c01017 	ldw	r3,64(sp)
    c638:	d9401717 	ldw	r5,92(sp)
    c63c:	11000304 	addi	r4,r2,12
    c640:	19800417 	ldw	r6,16(r3)
    c644:	102f883a 	mov	r23,r2
    c648:	318d883a 	add	r6,r6,r6
    c64c:	318d883a 	add	r6,r6,r6
    c650:	31800204 	addi	r6,r6,8
    c654:	00035c00 	call	35c0 <memcpy>
    c658:	e2000017 	ldw	r8,0(fp)
    c65c:	e2400117 	ldw	r9,4(fp)
    c660:	d9800304 	addi	r6,sp,12
    c664:	400b883a 	mov	r5,r8
    c668:	a809883a 	mov	r4,r21
    c66c:	d9c00204 	addi	r7,sp,8
    c670:	d9800015 	stw	r6,0(sp)
    c674:	480d883a 	mov	r6,r9
    c678:	000aa340 	call	aa34 <__d2b>
    c67c:	a809883a 	mov	r4,r21
    c680:	01400044 	movi	r5,1
    c684:	d8800515 	stw	r2,20(sp)
    c688:	000b0700 	call	b070 <__i2b>
    c68c:	102d883a 	mov	r22,r2
    c690:	d8801617 	ldw	r2,88(sp)
    c694:	1001051e 	bne	r2,zero,caac <_strtod_r+0xce8>
    c698:	dd000f17 	ldw	r20,60(sp)
    c69c:	000f883a 	mov	r7,zero
    c6a0:	0013883a 	mov	r9,zero
    c6a4:	a011883a 	mov	r8,r20
    c6a8:	d8800217 	ldw	r2,8(sp)
    c6ac:	1000fd16 	blt	r2,zero,caa4 <_strtod_r+0xce0>
    c6b0:	388f883a 	add	r7,r7,r2
    c6b4:	d9801417 	ldw	r6,80(sp)
    c6b8:	d9400317 	ldw	r5,12(sp)
    c6bc:	00ff0084 	movi	r3,-1022
    c6c0:	1189c83a 	sub	r4,r2,r6
    c6c4:	2145883a 	add	r2,r4,r5
    c6c8:	10bfffc4 	addi	r2,r2,-1
    c6cc:	10c09f0e 	bge	r2,r3,c94c <_strtod_r+0xb88>
    c6d0:	21810cc4 	addi	r6,r4,1075
    c6d4:	d8c01417 	ldw	r3,80(sp)
    c6d8:	4185883a 	add	r2,r8,r6
    c6dc:	39a1883a 	add	r16,r7,r6
    c6e0:	18a5883a 	add	r18,r3,r2
    c6e4:	3807883a 	mov	r3,r7
    c6e8:	81c0010e 	bge	r16,r7,c6f0 <_strtod_r+0x92c>
    c6ec:	8007883a 	mov	r3,r16
    c6f0:	9005883a 	mov	r2,r18
    c6f4:	1c80010e 	bge	r3,r18,c6fc <_strtod_r+0x938>
    c6f8:	1805883a 	mov	r2,r3
    c6fc:	0080e70e 	bge	zero,r2,ca9c <_strtod_r+0xcd8>
    c700:	38a7c83a 	sub	r19,r7,r2
    c704:	80a1c83a 	sub	r16,r16,r2
    c708:	90a5c83a 	sub	r18,r18,r2
    c70c:	02400e0e 	bge	zero,r9,c748 <_strtod_r+0x984>
    c710:	480d883a 	mov	r6,r9
    c714:	b00b883a 	mov	r5,r22
    c718:	a809883a 	mov	r4,r21
    c71c:	000b1ac0 	call	b1ac <__pow5mult>
    c720:	d9800517 	ldw	r6,20(sp)
    c724:	a809883a 	mov	r4,r21
    c728:	100b883a 	mov	r5,r2
    c72c:	102d883a 	mov	r22,r2
    c730:	000ae880 	call	ae88 <__multiply>
    c734:	d9400517 	ldw	r5,20(sp)
    c738:	1023883a 	mov	r17,r2
    c73c:	a809883a 	mov	r4,r21
    c740:	000a3f80 	call	a3f8 <_Bfree>
    c744:	dc400515 	stw	r17,20(sp)
    c748:	0400050e 	bge	zero,r16,c760 <_strtod_r+0x99c>
    c74c:	d9400517 	ldw	r5,20(sp)
    c750:	800d883a 	mov	r6,r16
    c754:	a809883a 	mov	r4,r21
    c758:	000ad3c0 	call	ad3c <__lshift>
    c75c:	d8800515 	stw	r2,20(sp)
    c760:	a000741e 	bne	r20,zero,c934 <_strtod_r+0xb70>
    c764:	0480050e 	bge	zero,r18,c77c <_strtod_r+0x9b8>
    c768:	b80b883a 	mov	r5,r23
    c76c:	900d883a 	mov	r6,r18
    c770:	a809883a 	mov	r4,r21
    c774:	000ad3c0 	call	ad3c <__lshift>
    c778:	102f883a 	mov	r23,r2
    c77c:	04c0050e 	bge	zero,r19,c794 <_strtod_r+0x9d0>
    c780:	b00b883a 	mov	r5,r22
    c784:	980d883a 	mov	r6,r19
    c788:	a809883a 	mov	r4,r21
    c78c:	000ad3c0 	call	ad3c <__lshift>
    c790:	102d883a 	mov	r22,r2
    c794:	d9400517 	ldw	r5,20(sp)
    c798:	a809883a 	mov	r4,r21
    c79c:	b80d883a 	mov	r6,r23
    c7a0:	000abb00 	call	abb0 <__mdiff>
    c7a4:	11000317 	ldw	r4,12(r2)
    c7a8:	b00b883a 	mov	r5,r22
    c7ac:	10000315 	stw	zero,12(r2)
    c7b0:	d9001315 	stw	r4,76(sp)
    c7b4:	1009883a 	mov	r4,r2
    c7b8:	1029883a 	mov	r20,r2
    c7bc:	000a5540 	call	a554 <__mcmp>
    c7c0:	10017c16 	blt	r2,zero,cdb4 <_strtod_r+0xff0>
    c7c4:	1001af26 	beq	r2,zero,ce84 <_strtod_r+0x10c0>
    c7c8:	a009883a 	mov	r4,r20
    c7cc:	b00b883a 	mov	r5,r22
    c7d0:	000a7540 	call	a754 <__ratio>
    c7d4:	0011883a 	mov	r8,zero
    c7d8:	02500034 	movhi	r9,16384
    c7dc:	480f883a 	mov	r7,r9
    c7e0:	1009883a 	mov	r4,r2
    c7e4:	180b883a 	mov	r5,r3
    c7e8:	400d883a 	mov	r6,r8
    c7ec:	1021883a 	mov	r16,r2
    c7f0:	1823883a 	mov	r17,r3
    c7f4:	0010ba40 	call	10ba4 <__ledf2>
    c7f8:	00805716 	blt	zero,r2,c958 <_strtod_r+0xb94>
    c7fc:	d9801317 	ldw	r6,76(sp)
    c800:	3025003a 	cmpeq	r18,r6,zero
    c804:	90008b1e 	bne	r18,zero,ca34 <_strtod_r+0xc70>
    c808:	008ffc34 	movhi	r2,16368
    c80c:	0021883a 	mov	r16,zero
    c810:	1023883a 	mov	r17,r2
    c814:	d8000715 	stw	zero,28(sp)
    c818:	d8800815 	stw	r2,32(sp)
    c81c:	e1c00117 	ldw	r7,4(fp)
    c820:	009ff834 	movhi	r2,32736
    c824:	3cdffc2c 	andhi	r19,r7,32752
    c828:	98805e26 	beq	r19,r2,c9a4 <_strtod_r+0xbe0>
    c82c:	d8801417 	ldw	r2,80(sp)
    c830:	10001b26 	beq	r2,zero,c8a0 <_strtod_r+0xadc>
    c834:	0081a834 	movhi	r2,1696
    c838:	14c01936 	bltu	r2,r19,c8a0 <_strtod_r+0xadc>
    c83c:	00bff034 	movhi	r2,65472
    c840:	00d07834 	movhi	r3,16864
    c844:	18ffffc4 	addi	r3,r3,-1
    c848:	180f883a 	mov	r7,r3
    c84c:	8009883a 	mov	r4,r16
    c850:	880b883a 	mov	r5,r17
    c854:	100d883a 	mov	r6,r2
    c858:	0010ba40 	call	10ba4 <__ledf2>
    c85c:	00800b16 	blt	zero,r2,c88c <_strtod_r+0xac8>
    c860:	880b883a 	mov	r5,r17
    c864:	8009883a 	mov	r4,r16
    c868:	000f0440 	call	f044 <__fixunsdfsi>
    c86c:	1000df1e 	bne	r2,zero,cbec <_strtod_r+0xe28>
    c870:	0021883a 	mov	r16,zero
    c874:	044ffc34 	movhi	r17,16368
    c878:	9000d91e 	bne	r18,zero,cbe0 <_strtod_r+0xe1c>
    c87c:	8005883a 	mov	r2,r16
    c880:	8807883a 	mov	r3,r17
    c884:	d8c00815 	stw	r3,32(sp)
    c888:	d8800715 	stw	r2,28(sp)
    c88c:	d8800817 	ldw	r2,32(sp)
    c890:	00c1ac34 	movhi	r3,1712
    c894:	14c5c83a 	sub	r2,r2,r19
    c898:	10c5883a 	add	r2,r2,r3
    c89c:	d8800815 	stw	r2,32(sp)
    c8a0:	e0800017 	ldw	r2,0(fp)
    c8a4:	e0c00117 	ldw	r3,4(fp)
    c8a8:	1009883a 	mov	r4,r2
    c8ac:	180b883a 	mov	r5,r3
    c8b0:	000a5b40 	call	a5b4 <__ulp>
    c8b4:	d9800717 	ldw	r6,28(sp)
    c8b8:	d9c00817 	ldw	r7,32(sp)
    c8bc:	180b883a 	mov	r5,r3
    c8c0:	1009883a 	mov	r4,r2
    c8c4:	00102e00 	call	102e0 <__muldf3>
    c8c8:	e2000017 	ldw	r8,0(fp)
    c8cc:	e2400117 	ldw	r9,4(fp)
    c8d0:	180b883a 	mov	r5,r3
    c8d4:	1009883a 	mov	r4,r2
    c8d8:	480f883a 	mov	r7,r9
    c8dc:	400d883a 	mov	r6,r8
    c8e0:	001026c0 	call	1026c <__adddf3>
    c8e4:	e0c00115 	stw	r3,4(fp)
    c8e8:	e0800015 	stw	r2,0(fp)
    c8ec:	d8c01417 	ldw	r3,80(sp)
    c8f0:	e4800117 	ldw	r18,4(fp)
    c8f4:	1800021e 	bne	r3,zero,c900 <_strtod_r+0xb3c>
    c8f8:	909ffc2c 	andhi	r2,r18,32752
    c8fc:	98807b26 	beq	r19,r2,caec <_strtod_r+0xd28>
    c900:	d9400517 	ldw	r5,20(sp)
    c904:	a809883a 	mov	r4,r21
    c908:	000a3f80 	call	a3f8 <_Bfree>
    c90c:	a809883a 	mov	r4,r21
    c910:	b80b883a 	mov	r5,r23
    c914:	000a3f80 	call	a3f8 <_Bfree>
    c918:	a809883a 	mov	r4,r21
    c91c:	b00b883a 	mov	r5,r22
    c920:	000a3f80 	call	a3f8 <_Bfree>
    c924:	a809883a 	mov	r4,r21
    c928:	a00b883a 	mov	r5,r20
    c92c:	000a3f80 	call	a3f8 <_Bfree>
    c930:	003f3c06 	br	c624 <_strtod_r+0x860>
    c934:	b80b883a 	mov	r5,r23
    c938:	a00d883a 	mov	r6,r20
    c93c:	a809883a 	mov	r4,r21
    c940:	000b1ac0 	call	b1ac <__pow5mult>
    c944:	102f883a 	mov	r23,r2
    c948:	003f8606 	br	c764 <_strtod_r+0x9a0>
    c94c:	00800d84 	movi	r2,54
    c950:	114dc83a 	sub	r6,r2,r5
    c954:	003f5f06 	br	c6d4 <_strtod_r+0x910>
    c958:	0005883a 	mov	r2,zero
    c95c:	00cff834 	movhi	r3,16352
    c960:	880b883a 	mov	r5,r17
    c964:	8009883a 	mov	r4,r16
    c968:	100d883a 	mov	r6,r2
    c96c:	180f883a 	mov	r7,r3
    c970:	00102e00 	call	102e0 <__muldf3>
    c974:	d9801317 	ldw	r6,76(sp)
    c978:	1021883a 	mov	r16,r2
    c97c:	1823883a 	mov	r17,r3
    c980:	3025003a 	cmpeq	r18,r6,zero
    c984:	90000126 	beq	r18,zero,c98c <_strtod_r+0xbc8>
    c988:	18e0003c 	xorhi	r3,r3,32768
    c98c:	d8800715 	stw	r2,28(sp)
    c990:	d8c00815 	stw	r3,32(sp)
    c994:	e1c00117 	ldw	r7,4(fp)
    c998:	009ff834 	movhi	r2,32736
    c99c:	3cdffc2c 	andhi	r19,r7,32752
    c9a0:	98bfa21e 	bne	r19,r2,c82c <_strtod_r+0xa68>
    c9a4:	e1000017 	ldw	r4,0(fp)
    c9a8:	01bf2c34 	movhi	r6,64688
    c9ac:	398d883a 	add	r6,r7,r6
    c9b0:	d9000b15 	stw	r4,44(sp)
    c9b4:	d9c00c15 	stw	r7,48(sp)
    c9b8:	300b883a 	mov	r5,r6
    c9bc:	e1800115 	stw	r6,4(fp)
    c9c0:	000a5b40 	call	a5b4 <__ulp>
    c9c4:	d9800717 	ldw	r6,28(sp)
    c9c8:	d9c00817 	ldw	r7,32(sp)
    c9cc:	180b883a 	mov	r5,r3
    c9d0:	1009883a 	mov	r4,r2
    c9d4:	00102e00 	call	102e0 <__muldf3>
    c9d8:	e2000017 	ldw	r8,0(fp)
    c9dc:	e2400117 	ldw	r9,4(fp)
    c9e0:	180b883a 	mov	r5,r3
    c9e4:	1009883a 	mov	r4,r2
    c9e8:	480f883a 	mov	r7,r9
    c9ec:	400d883a 	mov	r6,r8
    c9f0:	001026c0 	call	1026c <__adddf3>
    c9f4:	1009883a 	mov	r4,r2
    c9f8:	180b883a 	mov	r5,r3
    c9fc:	009f2834 	movhi	r2,31904
    ca00:	10bfffc4 	addi	r2,r2,-1
    ca04:	18dffc2c 	andhi	r3,r3,32752
    ca08:	e1000015 	stw	r4,0(fp)
    ca0c:	e1400115 	stw	r5,4(fp)
    ca10:	10c06f2e 	bgeu	r2,r3,cbd0 <_strtod_r+0xe0c>
    ca14:	d8800c17 	ldw	r2,48(sp)
    ca18:	011ffc34 	movhi	r4,32752
    ca1c:	213fffc4 	addi	r4,r4,-1
    ca20:	11007a26 	beq	r2,r4,cc0c <_strtod_r+0xe48>
    ca24:	01ffffc4 	movi	r7,-1
    ca28:	e1000115 	stw	r4,4(fp)
    ca2c:	e1c00015 	stw	r7,0(fp)
    ca30:	003fb306 	br	c900 <_strtod_r+0xb3c>
    ca34:	e0c00017 	ldw	r3,0(fp)
    ca38:	1800221e 	bne	r3,zero,cac4 <_strtod_r+0xd00>
    ca3c:	e0800117 	ldw	r2,4(fp)
    ca40:	00c00434 	movhi	r3,16
    ca44:	18ffffc4 	addi	r3,r3,-1
    ca48:	10c4703a 	and	r2,r2,r3
    ca4c:	1000211e 	bne	r2,zero,cad4 <_strtod_r+0xd10>
    ca50:	0005883a 	mov	r2,zero
    ca54:	00cffc34 	movhi	r3,16368
    ca58:	180f883a 	mov	r7,r3
    ca5c:	8009883a 	mov	r4,r16
    ca60:	880b883a 	mov	r5,r17
    ca64:	100d883a 	mov	r6,r2
    ca68:	0010b1c0 	call	10b1c <__ltdf2>
    ca6c:	10013c16 	blt	r2,zero,cf60 <_strtod_r+0x119c>
    ca70:	0005883a 	mov	r2,zero
    ca74:	00cff834 	movhi	r3,16352
    ca78:	880b883a 	mov	r5,r17
    ca7c:	8009883a 	mov	r4,r16
    ca80:	180f883a 	mov	r7,r3
    ca84:	100d883a 	mov	r6,r2
    ca88:	00102e00 	call	102e0 <__muldf3>
    ca8c:	1823883a 	mov	r17,r3
    ca90:	1021883a 	mov	r16,r2
    ca94:	18e0003c 	xorhi	r3,r3,32768
    ca98:	003fbc06 	br	c98c <_strtod_r+0xbc8>
    ca9c:	3827883a 	mov	r19,r7
    caa0:	003f1a06 	br	c70c <_strtod_r+0x948>
    caa4:	4091c83a 	sub	r8,r8,r2
    caa8:	003f0206 	br	c6b4 <_strtod_r+0x8f0>
    caac:	d8c00f17 	ldw	r3,60(sp)
    cab0:	0011883a 	mov	r8,zero
    cab4:	0029883a 	mov	r20,zero
    cab8:	00d3c83a 	sub	r9,zero,r3
    cabc:	480f883a 	mov	r7,r9
    cac0:	003ef906 	br	c6a8 <_strtod_r+0x8e4>
    cac4:	00800044 	movi	r2,1
    cac8:	1880021e 	bne	r3,r2,cad4 <_strtod_r+0xd10>
    cacc:	e0800117 	ldw	r2,4(fp)
    cad0:	1000a526 	beq	r2,zero,cd68 <_strtod_r+0xfa4>
    cad4:	00affc34 	movhi	r2,49136
    cad8:	0021883a 	mov	r16,zero
    cadc:	044ffc34 	movhi	r17,16368
    cae0:	d8800815 	stw	r2,32(sp)
    cae4:	d8000715 	stw	zero,28(sp)
    cae8:	003f4c06 	br	c81c <_strtod_r+0xa58>
    caec:	880b883a 	mov	r5,r17
    caf0:	8009883a 	mov	r4,r16
    caf4:	0010d240 	call	10d24 <__fixdfsi>
    caf8:	1009883a 	mov	r4,r2
    cafc:	0010c2c0 	call	10c2c <__floatsidf>
    cb00:	880b883a 	mov	r5,r17
    cb04:	8009883a 	mov	r4,r16
    cb08:	100d883a 	mov	r6,r2
    cb0c:	180f883a 	mov	r7,r3
    cb10:	00101ec0 	call	101ec <__subdf3>
    cb14:	d9001317 	ldw	r4,76(sp)
    cb18:	100b883a 	mov	r5,r2
    cb1c:	180d883a 	mov	r6,r3
    cb20:	1021883a 	mov	r16,r2
    cb24:	1823883a 	mov	r17,r3
    cb28:	2000061e 	bne	r4,zero,cb44 <_strtod_r+0xd80>
    cb2c:	e0800017 	ldw	r2,0(fp)
    cb30:	1000041e 	bne	r2,zero,cb44 <_strtod_r+0xd80>
    cb34:	00c00434 	movhi	r3,16
    cb38:	18ffffc4 	addi	r3,r3,-1
    cb3c:	90c4703a 	and	r2,r18,r3
    cb40:	10004026 	beq	r2,zero,cc44 <_strtod_r+0xe80>
    cb44:	00a52834 	movhi	r2,38048
    cb48:	108d6544 	addi	r2,r2,13717
    cb4c:	00cff834 	movhi	r3,16352
    cb50:	18ffffc4 	addi	r3,r3,-1
    cb54:	180f883a 	mov	r7,r3
    cb58:	8009883a 	mov	r4,r16
    cb5c:	880b883a 	mov	r5,r17
    cb60:	100d883a 	mov	r6,r2
    cb64:	0010b1c0 	call	10b1c <__ltdf2>
    cb68:	10000916 	blt	r2,zero,cb90 <_strtod_r+0xdcc>
    cb6c:	008d6c34 	movhi	r2,13744
    cb70:	10b94d44 	addi	r2,r2,-6859
    cb74:	00cff834 	movhi	r3,16352
    cb78:	880b883a 	mov	r5,r17
    cb7c:	180f883a 	mov	r7,r3
    cb80:	8009883a 	mov	r4,r16
    cb84:	100d883a 	mov	r6,r2
    cb88:	0010a0c0 	call	10a0c <__gtdf2>
    cb8c:	00bf5c0e 	bge	zero,r2,c900 <_strtod_r+0xb3c>
    cb90:	d9400517 	ldw	r5,20(sp)
    cb94:	a809883a 	mov	r4,r21
    cb98:	000a3f80 	call	a3f8 <_Bfree>
    cb9c:	a809883a 	mov	r4,r21
    cba0:	b80b883a 	mov	r5,r23
    cba4:	000a3f80 	call	a3f8 <_Bfree>
    cba8:	a809883a 	mov	r4,r21
    cbac:	b00b883a 	mov	r5,r22
    cbb0:	000a3f80 	call	a3f8 <_Bfree>
    cbb4:	d9401017 	ldw	r5,64(sp)
    cbb8:	a809883a 	mov	r4,r21
    cbbc:	000a3f80 	call	a3f8 <_Bfree>
    cbc0:	a809883a 	mov	r4,r21
    cbc4:	a00b883a 	mov	r5,r20
    cbc8:	000a3f80 	call	a3f8 <_Bfree>
    cbcc:	003cf406 	br	bfa0 <_strtod_r+0x1dc>
    cbd0:	0080d434 	movhi	r2,848
    cbd4:	288d883a 	add	r6,r5,r2
    cbd8:	e1800115 	stw	r6,4(fp)
    cbdc:	003f4306 	br	c8ec <_strtod_r+0xb28>
    cbe0:	8005883a 	mov	r2,r16
    cbe4:	88e0003c 	xorhi	r3,r17,32768
    cbe8:	003f2606 	br	c884 <_strtod_r+0xac0>
    cbec:	1009883a 	mov	r4,r2
    cbf0:	0010e700 	call	10e70 <__floatunsidf>
    cbf4:	1021883a 	mov	r16,r2
    cbf8:	1823883a 	mov	r17,r3
    cbfc:	003f1e06 	br	c878 <_strtod_r+0xab4>
    cc00:	da000417 	ldw	r8,16(sp)
    cc04:	39c00044 	addi	r7,r7,1
    cc08:	003e6706 	br	c5a8 <_strtod_r+0x7e4>
    cc0c:	d8c00b17 	ldw	r3,44(sp)
    cc10:	00bfffc4 	movi	r2,-1
    cc14:	18bf831e 	bne	r3,r2,ca24 <_strtod_r+0xc60>
    cc18:	00c00884 	movi	r3,34
    cc1c:	a8c00015 	stw	r3,0(r21)
    cc20:	009ffc34 	movhi	r2,32752
    cc24:	e0800115 	stw	r2,4(fp)
    cc28:	e0000015 	stw	zero,0(fp)
    cc2c:	003fd806 	br	cb90 <_strtod_r+0xdcc>
    cc30:	4007883a 	mov	r3,r8
    cc34:	000d883a 	mov	r6,zero
    cc38:	0029883a 	mov	r20,zero
    cc3c:	0021883a 	mov	r16,zero
    cc40:	003cc906 	br	bf68 <_strtod_r+0x1a4>
    cc44:	00a52834 	movhi	r2,38048
    cc48:	108d6544 	addi	r2,r2,13717
    cc4c:	00cff434 	movhi	r3,16336
    cc50:	18ffffc4 	addi	r3,r3,-1
    cc54:	2809883a 	mov	r4,r5
    cc58:	180f883a 	mov	r7,r3
    cc5c:	300b883a 	mov	r5,r6
    cc60:	100d883a 	mov	r6,r2
    cc64:	0010b1c0 	call	10b1c <__ltdf2>
    cc68:	103f250e 	bge	r2,zero,c900 <_strtod_r+0xb3c>
    cc6c:	003fc806 	br	cb90 <_strtod_r+0xdcc>
    cc70:	0027883a 	mov	r19,zero
    cc74:	04800044 	movi	r18,1
    cc78:	0015883a 	mov	r10,zero
    cc7c:	003cc006 	br	bf80 <_strtod_r+0x1bc>
    cc80:	00800884 	movi	r2,34
    cc84:	a8800015 	stw	r2,0(r21)
    cc88:	019ffc34 	movhi	r6,32752
    cc8c:	e1800115 	stw	r6,4(fp)
    cc90:	e0000015 	stw	zero,0(fp)
    cc94:	003cc206 	br	bfa0 <_strtod_r+0x1dc>
    cc98:	015387c4 	movi	r5,19999
    cc9c:	003d1e06 	br	c118 <_strtod_r+0x354>
    cca0:	300a90fa 	slli	r5,r6,3
    cca4:	e0800017 	ldw	r2,0(fp)
    cca8:	e0c00117 	ldw	r3,4(fp)
    ccac:	01000074 	movhi	r4,1
    ccb0:	21132004 	addi	r4,r4,19584
    ccb4:	290b883a 	add	r5,r5,r4
    ccb8:	2a000017 	ldw	r8,0(r5)
    ccbc:	2a400117 	ldw	r9,4(r5)
    ccc0:	1009883a 	mov	r4,r2
    ccc4:	180b883a 	mov	r5,r3
    ccc8:	480f883a 	mov	r7,r9
    cccc:	400d883a 	mov	r6,r8
    ccd0:	00102e00 	call	102e0 <__muldf3>
    ccd4:	e0c00115 	stw	r3,4(fp)
    ccd8:	e0800015 	stw	r2,0(fp)
    ccdc:	003cb006 	br	bfa0 <_strtod_r+0x1dc>
    cce0:	d8800d17 	ldw	r2,52(sp)
    cce4:	e0800015 	stw	r2,0(fp)
    cce8:	d8c00e17 	ldw	r3,56(sp)
    ccec:	e0c00115 	stw	r3,4(fp)
    ccf0:	9880020c 	andi	r2,r19,8
    ccf4:	103caa26 	beq	r2,zero,bfa0 <_strtod_r+0x1dc>
    ccf8:	e0800117 	ldw	r2,4(fp)
    ccfc:	10a00034 	orhi	r2,r2,32768
    cd00:	e0800115 	stw	r2,4(fp)
    cd04:	003ca606 	br	bfa0 <_strtod_r+0x1dc>
    cd08:	009ffc34 	movhi	r2,32752
    cd0c:	e0800115 	stw	r2,4(fp)
    cd10:	e0000015 	stw	zero,0(fp)
    cd14:	003ff606 	br	ccf0 <_strtod_r+0xf2c>
    cd18:	00a00034 	movhi	r2,32768
    cd1c:	10bfffc4 	addi	r2,r2,-1
    cd20:	00ffffc4 	movi	r3,-1
    cd24:	e0800115 	stw	r2,4(fp)
    cd28:	e0c00015 	stw	r3,0(fp)
    cd2c:	003ff006 	br	ccf0 <_strtod_r+0xf2c>
    cd30:	e0000115 	stw	zero,4(fp)
    cd34:	e0000015 	stw	zero,0(fp)
    cd38:	003fed06 	br	ccf0 <_strtod_r+0xf2c>
    cd3c:	d8800e17 	ldw	r2,56(sp)
    cd40:	29010cc4 	addi	r4,r5,1075
    cd44:	00fffc34 	movhi	r3,65520
    cd48:	18ffffc4 	addi	r3,r3,-1
    cd4c:	2008953a 	slli	r4,r4,20
    cd50:	10c4703a 	and	r2,r2,r3
    cd54:	d8c00d17 	ldw	r3,52(sp)
    cd58:	1104b03a 	or	r2,r2,r4
    cd5c:	e0800115 	stw	r2,4(fp)
    cd60:	e0c00015 	stw	r3,0(fp)
    cd64:	003fe206 	br	ccf0 <_strtod_r+0xf2c>
    cd68:	00800884 	movi	r2,34
    cd6c:	a8800015 	stw	r2,0(r21)
    cd70:	e0000015 	stw	zero,0(fp)
    cd74:	e0000115 	stw	zero,4(fp)
    cd78:	003f8506 	br	cb90 <_strtod_r+0xdcc>
    cd7c:	03800044 	movi	r14,1
    cd80:	003d7706 	br	c360 <_strtod_r+0x59c>
    cd84:	99c5883a 	add	r2,r19,r7
    cd88:	11ffffc4 	addi	r7,r2,-1
    cd8c:	00800204 	movi	r2,8
    cd90:	3cc00044 	addi	r19,r7,1
    cd94:	11c0df16 	blt	r2,r7,d114 <_strtod_r+0x1350>
    cd98:	a08002a4 	muli	r2,r20,10
    cd9c:	000f883a 	mov	r7,zero
    cda0:	1269883a 	add	r20,r2,r9
    cda4:	42000044 	addi	r8,r8,1
    cda8:	da000415 	stw	r8,16(sp)
    cdac:	41000007 	ldb	r4,0(r8)
    cdb0:	003d3706 	br	c290 <_strtod_r+0x4cc>
    cdb4:	d9801317 	ldw	r6,76(sp)
    cdb8:	3000511e 	bne	r6,zero,cf00 <_strtod_r+0x113c>
    cdbc:	e0800017 	ldw	r2,0(fp)
    cdc0:	1000d81e 	bne	r2,zero,d124 <_strtod_r+0x1360>
    cdc4:	e0c00117 	ldw	r3,4(fp)
    cdc8:	01000434 	movhi	r4,16
    cdcc:	213fffc4 	addi	r4,r4,-1
    cdd0:	1904703a 	and	r2,r3,r4
    cdd4:	1000b01e 	bne	r2,zero,d098 <_strtod_r+0x12d4>
    cdd8:	18dffc2c 	andhi	r3,r3,32752
    cddc:	0081ac34 	movhi	r2,1712
    cde0:	10c1102e 	bgeu	r2,r3,d224 <_strtod_r+0x1460>
    cde4:	a0800517 	ldw	r2,20(r20)
    cde8:	1000031e 	bne	r2,zero,cdf8 <_strtod_r+0x1034>
    cdec:	a0c00417 	ldw	r3,16(r20)
    cdf0:	00800044 	movi	r2,1
    cdf4:	10c0420e 	bge	r2,r3,cf00 <_strtod_r+0x113c>
    cdf8:	a00b883a 	mov	r5,r20
    cdfc:	a809883a 	mov	r4,r21
    ce00:	01800044 	movi	r6,1
    ce04:	000ad3c0 	call	ad3c <__lshift>
    ce08:	1009883a 	mov	r4,r2
    ce0c:	b00b883a 	mov	r5,r22
    ce10:	1029883a 	mov	r20,r2
    ce14:	000a5540 	call	a554 <__mcmp>
    ce18:	0080c20e 	bge	zero,r2,d124 <_strtod_r+0x1360>
    ce1c:	e1800117 	ldw	r6,4(fp)
    ce20:	d9001417 	ldw	r4,80(sp)
    ce24:	2013003a 	cmpeq	r9,r4,zero
    ce28:	4800ef1e 	bne	r9,zero,d1e8 <_strtod_r+0x1424>
    ce2c:	30dffc2c 	andhi	r3,r6,32752
    ce30:	0081ac34 	movhi	r2,1712
    ce34:	10c0ec36 	bltu	r2,r3,d1e8 <_strtod_r+0x1424>
    ce38:	0080dc34 	movhi	r2,880
    ce3c:	10ffca2e 	bgeu	r2,r3,cd68 <_strtod_r+0xfa4>
    ce40:	e0800017 	ldw	r2,0(fp)
    ce44:	e0c00117 	ldw	r3,4(fp)
    ce48:	020e5434 	movhi	r8,14672
    ce4c:	000d883a 	mov	r6,zero
    ce50:	400f883a 	mov	r7,r8
    ce54:	180b883a 	mov	r5,r3
    ce58:	1009883a 	mov	r4,r2
    ce5c:	da000c15 	stw	r8,48(sp)
    ce60:	d8000b15 	stw	zero,44(sp)
    ce64:	00102e00 	call	102e0 <__muldf3>
    ce68:	e0800015 	stw	r2,0(fp)
    ce6c:	e0c00115 	stw	r3,4(fp)
    ce70:	183f471e 	bne	r3,zero,cb90 <_strtod_r+0xdcc>
    ce74:	103f461e 	bne	r2,zero,cb90 <_strtod_r+0xdcc>
    ce78:	00800884 	movi	r2,34
    ce7c:	a8800015 	stw	r2,0(r21)
    ce80:	003f4306 	br	cb90 <_strtod_r+0xdcc>
    ce84:	d8801317 	ldw	r2,76(sp)
    ce88:	1025003a 	cmpeq	r18,r2,zero
    ce8c:	9000861e 	bne	r18,zero,d0a8 <_strtod_r+0x12e4>
    ce90:	e1400117 	ldw	r5,4(fp)
    ce94:	00c00434 	movhi	r3,16
    ce98:	18ffffc4 	addi	r3,r3,-1
    ce9c:	28c4703a 	and	r2,r5,r3
    cea0:	10c01b26 	beq	r2,r3,cf10 <_strtod_r+0x114c>
    cea4:	e1c00017 	ldw	r7,0(fp)
    cea8:	3880004c 	andi	r2,r7,1
    ceac:	1005003a 	cmpeq	r2,r2,zero
    ceb0:	1000791e 	bne	r2,zero,d098 <_strtod_r+0x12d4>
    ceb4:	9000b126 	beq	r18,zero,d17c <_strtod_r+0x13b8>
    ceb8:	e4400117 	ldw	r17,4(fp)
    cebc:	3809883a 	mov	r4,r7
    cec0:	3821883a 	mov	r16,r7
    cec4:	880b883a 	mov	r5,r17
    cec8:	000a5b40 	call	a5b4 <__ulp>
    cecc:	180f883a 	mov	r7,r3
    ced0:	880b883a 	mov	r5,r17
    ced4:	8009883a 	mov	r4,r16
    ced8:	100d883a 	mov	r6,r2
    cedc:	00101ec0 	call	101ec <__subdf3>
    cee0:	1009883a 	mov	r4,r2
    cee4:	000d883a 	mov	r6,zero
    cee8:	000f883a 	mov	r7,zero
    ceec:	180b883a 	mov	r5,r3
    cef0:	e0800015 	stw	r2,0(fp)
    cef4:	e0c00115 	stw	r3,4(fp)
    cef8:	00109840 	call	10984 <__nedf2>
    cefc:	103f9a26 	beq	r2,zero,cd68 <_strtod_r+0xfa4>
    cf00:	d9001417 	ldw	r4,80(sp)
    cf04:	2013003a 	cmpeq	r9,r4,zero
    cf08:	483f211e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    cf0c:	003fcc06 	br	ce40 <_strtod_r+0x107c>
    cf10:	d9001417 	ldw	r4,80(sp)
    cf14:	e1c00017 	ldw	r7,0(fp)
    cf18:	2013003a 	cmpeq	r9,r4,zero
    cf1c:	4800bd1e 	bne	r9,zero,d214 <_strtod_r+0x1450>
    cf20:	28dffc2c 	andhi	r3,r5,32752
    cf24:	0081a834 	movhi	r2,1696
    cf28:	10c0ba36 	bltu	r2,r3,d214 <_strtod_r+0x1450>
    cf2c:	1804d53a 	srli	r2,r3,20
    cf30:	00c01ac4 	movi	r3,107
    cf34:	013fffc4 	movi	r4,-1
    cf38:	1887c83a 	sub	r3,r3,r2
    cf3c:	20c4983a 	sll	r2,r4,r3
    cf40:	11ffd91e 	bne	r2,r7,cea8 <_strtod_r+0x10e4>
    cf44:	28dffc2c 	andhi	r3,r5,32752
    cf48:	00800434 	movhi	r2,16
    cf4c:	188d883a 	add	r6,r3,r2
    cf50:	e1800115 	stw	r6,4(fp)
    cf54:	e0000015 	stw	zero,0(fp)
    cf58:	483f0d1e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    cf5c:	003fb806 	br	ce40 <_strtod_r+0x107c>
    cf60:	0021883a 	mov	r16,zero
    cf64:	0005883a 	mov	r2,zero
    cf68:	044ff834 	movhi	r17,16352
    cf6c:	00eff834 	movhi	r3,49120
    cf70:	003e8606 	br	c98c <_strtod_r+0xbc8>
    cf74:	803d9e26 	beq	r16,zero,c5f0 <_strtod_r+0x82c>
    cf78:	0421c83a 	sub	r16,zero,r16
    cf7c:	814003cc 	andi	r5,r16,15
    cf80:	28000f26 	beq	r5,zero,cfc0 <_strtod_r+0x11fc>
    cf84:	280a90fa 	slli	r5,r5,3
    cf88:	01000074 	movhi	r4,1
    cf8c:	21132004 	addi	r4,r4,19584
    cf90:	e0800017 	ldw	r2,0(fp)
    cf94:	290b883a 	add	r5,r5,r4
    cf98:	2a000017 	ldw	r8,0(r5)
    cf9c:	e0c00117 	ldw	r3,4(fp)
    cfa0:	2a400117 	ldw	r9,4(r5)
    cfa4:	1009883a 	mov	r4,r2
    cfa8:	180b883a 	mov	r5,r3
    cfac:	480f883a 	mov	r7,r9
    cfb0:	400d883a 	mov	r6,r8
    cfb4:	00106a40 	call	106a4 <__divdf3>
    cfb8:	e0c00115 	stw	r3,4(fp)
    cfbc:	e0800015 	stw	r2,0(fp)
    cfc0:	8021d13a 	srai	r16,r16,4
    cfc4:	803d8a26 	beq	r16,zero,c5f0 <_strtod_r+0x82c>
    cfc8:	008007c4 	movi	r2,31
    cfcc:	14002d16 	blt	r2,r16,d084 <_strtod_r+0x12c0>
    cfd0:	8080040c 	andi	r2,r16,16
    cfd4:	10009926 	beq	r2,zero,d23c <_strtod_r+0x1478>
    cfd8:	00801a84 	movi	r2,106
    cfdc:	d8801415 	stw	r2,80(sp)
    cfe0:	0400110e 	bge	zero,r16,d028 <_strtod_r+0x1264>
    cfe4:	04400074 	movhi	r17,1
    cfe8:	8c536d04 	addi	r17,r17,19892
    cfec:	8080004c 	andi	r2,r16,1
    cff0:	1005003a 	cmpeq	r2,r2,zero
    cff4:	1000091e 	bne	r2,zero,d01c <_strtod_r+0x1258>
    cff8:	e0800017 	ldw	r2,0(fp)
    cffc:	e0c00117 	ldw	r3,4(fp)
    d000:	89800017 	ldw	r6,0(r17)
    d004:	89c00117 	ldw	r7,4(r17)
    d008:	180b883a 	mov	r5,r3
    d00c:	1009883a 	mov	r4,r2
    d010:	00102e00 	call	102e0 <__muldf3>
    d014:	e0c00115 	stw	r3,4(fp)
    d018:	e0800015 	stw	r2,0(fp)
    d01c:	8021d07a 	srai	r16,r16,1
    d020:	8c400204 	addi	r17,r17,8
    d024:	043ff116 	blt	zero,r16,cfec <_strtod_r+0x1228>
    d028:	d8c01417 	ldw	r3,80(sp)
    d02c:	18000d26 	beq	r3,zero,d064 <_strtod_r+0x12a0>
    d030:	e1000117 	ldw	r4,4(fp)
    d034:	00c01ac4 	movi	r3,107
    d038:	209ffc2c 	andhi	r2,r4,32752
    d03c:	1004d53a 	srli	r2,r2,20
    d040:	1887c83a 	sub	r3,r3,r2
    d044:	00c0070e 	bge	zero,r3,d064 <_strtod_r+0x12a0>
    d048:	008007c4 	movi	r2,31
    d04c:	10c0900e 	bge	r2,r3,d290 <_strtod_r+0x14cc>
    d050:	00800d04 	movi	r2,52
    d054:	e0000015 	stw	zero,0(fp)
    d058:	10c0870e 	bge	r2,r3,d278 <_strtod_r+0x14b4>
    d05c:	0180dc34 	movhi	r6,880
    d060:	e1800115 	stw	r6,4(fp)
    d064:	e0800017 	ldw	r2,0(fp)
    d068:	e0c00117 	ldw	r3,4(fp)
    d06c:	000d883a 	mov	r6,zero
    d070:	000f883a 	mov	r7,zero
    d074:	180b883a 	mov	r5,r3
    d078:	1009883a 	mov	r4,r2
    d07c:	00109840 	call	10984 <__nedf2>
    d080:	103d5c1e 	bne	r2,zero,c5f4 <_strtod_r+0x830>
    d084:	00800884 	movi	r2,34
    d088:	a8800015 	stw	r2,0(r21)
    d08c:	e0000015 	stw	zero,0(fp)
    d090:	e0000115 	stw	zero,4(fp)
    d094:	003bc206 	br	bfa0 <_strtod_r+0x1dc>
    d098:	d8801417 	ldw	r2,80(sp)
    d09c:	1013003a 	cmpeq	r9,r2,zero
    d0a0:	483ebb1e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    d0a4:	003f6606 	br	ce40 <_strtod_r+0x107c>
    d0a8:	e1800117 	ldw	r6,4(fp)
    d0ac:	00c00434 	movhi	r3,16
    d0b0:	18ffffc4 	addi	r3,r3,-1
    d0b4:	30c4703a 	and	r2,r6,r3
    d0b8:	103f7a1e 	bne	r2,zero,cea4 <_strtod_r+0x10e0>
    d0bc:	e1c00017 	ldw	r7,0(fp)
    d0c0:	383f791e 	bne	r7,zero,cea8 <_strtod_r+0x10e4>
    d0c4:	003f5606 	br	ce20 <_strtod_r+0x105c>
    d0c8:	d9800f17 	ldw	r6,60(sp)
    d0cc:	00bffa84 	movi	r2,-22
    d0d0:	30bcd416 	blt	r6,r2,c424 <_strtod_r+0x660>
    d0d4:	317ffe24 	muli	r5,r6,-8
    d0d8:	01000074 	movhi	r4,1
    d0dc:	21132004 	addi	r4,r4,19584
    d0e0:	e0800017 	ldw	r2,0(fp)
    d0e4:	290b883a 	add	r5,r5,r4
    d0e8:	2a000017 	ldw	r8,0(r5)
    d0ec:	e0c00117 	ldw	r3,4(fp)
    d0f0:	2a400117 	ldw	r9,4(r5)
    d0f4:	1009883a 	mov	r4,r2
    d0f8:	180b883a 	mov	r5,r3
    d0fc:	480f883a 	mov	r7,r9
    d100:	400d883a 	mov	r6,r8
    d104:	00106a40 	call	106a4 <__divdf3>
    d108:	e0c00115 	stw	r3,4(fp)
    d10c:	e0800015 	stw	r2,0(fp)
    d110:	003ba306 	br	bfa0 <_strtod_r+0x1dc>
    d114:	00800404 	movi	r2,16
    d118:	14c02f0e 	bge	r2,r19,d1d8 <_strtod_r+0x1414>
    d11c:	000f883a 	mov	r7,zero
    d120:	003f2006 	br	cda4 <_strtod_r+0xfe0>
    d124:	d9801417 	ldw	r6,80(sp)
    d128:	3013003a 	cmpeq	r9,r6,zero
    d12c:	483e981e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    d130:	003f4306 	br	ce40 <_strtod_r+0x107c>
    d134:	00801a44 	movi	r2,105
    d138:	20bc6326 	beq	r4,r2,c2c8 <_strtod_r+0x504>
    d13c:	00801b84 	movi	r2,110
    d140:	20bbba1e 	bne	r4,r2,c02c <_strtod_r+0x268>
    d144:	dc000404 	addi	r16,sp,16
    d148:	8009883a 	mov	r4,r16
    d14c:	01400074 	movhi	r5,1
    d150:	29536c04 	addi	r5,r5,19888
    d154:	000bd7c0 	call	bd7c <match>
    d158:	103bb426 	beq	r2,zero,c02c <_strtod_r+0x268>
    d15c:	d8800417 	ldw	r2,16(sp)
    d160:	00c00a04 	movi	r3,40
    d164:	11000007 	ldb	r4,0(r2)
    d168:	20c03626 	beq	r4,r3,d244 <_strtod_r+0x1480>
    d16c:	01bffe34 	movhi	r6,65528
    d170:	e1800115 	stw	r6,4(fp)
    d174:	e0000015 	stw	zero,0(fp)
    d178:	003b8906 	br	bfa0 <_strtod_r+0x1dc>
    d17c:	e4400117 	ldw	r17,4(fp)
    d180:	3809883a 	mov	r4,r7
    d184:	3821883a 	mov	r16,r7
    d188:	880b883a 	mov	r5,r17
    d18c:	000a5b40 	call	a5b4 <__ulp>
    d190:	100d883a 	mov	r6,r2
    d194:	880b883a 	mov	r5,r17
    d198:	180f883a 	mov	r7,r3
    d19c:	8009883a 	mov	r4,r16
    d1a0:	001026c0 	call	1026c <__adddf3>
    d1a4:	d9801417 	ldw	r6,80(sp)
    d1a8:	e0c00115 	stw	r3,4(fp)
    d1ac:	e0800015 	stw	r2,0(fp)
    d1b0:	3013003a 	cmpeq	r9,r6,zero
    d1b4:	483e761e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    d1b8:	003f2106 	br	ce40 <_strtod_r+0x107c>
    d1bc:	000f883a 	mov	r7,zero
    d1c0:	003cf006 	br	c584 <_strtod_r+0x7c0>
    d1c4:	0080d434 	movhi	r2,848
    d1c8:	188d883a 	add	r6,r3,r2
    d1cc:	d8001415 	stw	zero,80(sp)
    d1d0:	e1800115 	stw	r6,4(fp)
    d1d4:	003d0706 	br	c5f4 <_strtod_r+0x830>
    d1d8:	808002a4 	muli	r2,r16,10
    d1dc:	000f883a 	mov	r7,zero
    d1e0:	1261883a 	add	r16,r2,r9
    d1e4:	003eef06 	br	cda4 <_strtod_r+0xfe0>
    d1e8:	309ffc2c 	andhi	r2,r6,32752
    d1ec:	00fffc34 	movhi	r3,65520
    d1f0:	10c5883a 	add	r2,r2,r3
    d1f4:	00c00434 	movhi	r3,16
    d1f8:	18ffffc4 	addi	r3,r3,-1
    d1fc:	10ccb03a 	or	r6,r2,r3
    d200:	01ffffc4 	movi	r7,-1
    d204:	e1800115 	stw	r6,4(fp)
    d208:	e1c00015 	stw	r7,0(fp)
    d20c:	483e601e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    d210:	003f0b06 	br	ce40 <_strtod_r+0x107c>
    d214:	00bfffc4 	movi	r2,-1
    d218:	003f4906 	br	cf40 <_strtod_r+0x117c>
    d21c:	0025883a 	mov	r18,zero
    d220:	003cb106 	br	c4e8 <_strtod_r+0x724>
    d224:	d8c01417 	ldw	r3,80(sp)
    d228:	1813003a 	cmpeq	r9,r3,zero
    d22c:	483e581e 	bne	r9,zero,cb90 <_strtod_r+0xdcc>
    d230:	003f0306 	br	ce40 <_strtod_r+0x107c>
    d234:	980f883a 	mov	r7,r19
    d238:	003ed406 	br	cd8c <_strtod_r+0xfc8>
    d23c:	d8001415 	stw	zero,80(sp)
    d240:	003f6706 	br	cfe0 <_strtod_r+0x121c>
    d244:	8009883a 	mov	r4,r16
    d248:	01400074 	movhi	r5,1
    d24c:	2955f004 	addi	r5,r5,22464
    d250:	d9800d04 	addi	r6,sp,52
    d254:	000ecf40 	call	ecf4 <__hexnan>
    d258:	00c00144 	movi	r3,5
    d25c:	10ffc31e 	bne	r2,r3,d16c <_strtod_r+0x13a8>
    d260:	d8800e17 	ldw	r2,56(sp)
    d264:	d9c00d17 	ldw	r7,52(sp)
    d268:	119ffc34 	orhi	r6,r2,32752
    d26c:	e1800115 	stw	r6,4(fp)
    d270:	e1c00015 	stw	r7,0(fp)
    d274:	003b4a06 	br	bfa0 <_strtod_r+0x1dc>
    d278:	18fff804 	addi	r3,r3,-32
    d27c:	00bfffc4 	movi	r2,-1
    d280:	10c4983a 	sll	r2,r2,r3
    d284:	208c703a 	and	r6,r4,r2
    d288:	e1800115 	stw	r6,4(fp)
    d28c:	003f7506 	br	d064 <_strtod_r+0x12a0>
    d290:	00bfffc4 	movi	r2,-1
    d294:	10c4983a 	sll	r2,r2,r3
    d298:	e0c00017 	ldw	r3,0(fp)
    d29c:	188e703a 	and	r7,r3,r2
    d2a0:	e1c00015 	stw	r7,0(fp)
    d2a4:	003f6f06 	br	d064 <_strtod_r+0x12a0>

0000d2a8 <strtof>:
    d2a8:	defffa04 	addi	sp,sp,-24
    d2ac:	dd000415 	stw	r20,16(sp)
    d2b0:	05000074 	movhi	r20,1
    d2b4:	a51a7d04 	addi	r20,r20,27124
    d2b8:	2007883a 	mov	r3,r4
    d2bc:	a1000017 	ldw	r4,0(r20)
    d2c0:	280d883a 	mov	r6,r5
    d2c4:	180b883a 	mov	r5,r3
    d2c8:	dfc00515 	stw	ra,20(sp)
    d2cc:	dcc00315 	stw	r19,12(sp)
    d2d0:	dc800215 	stw	r18,8(sp)
    d2d4:	dc400115 	stw	r17,4(sp)
    d2d8:	dc000015 	stw	r16,0(sp)
    d2dc:	000bdc40 	call	bdc4 <_strtod_r>
    d2e0:	180b883a 	mov	r5,r3
    d2e4:	1009883a 	mov	r4,r2
    d2e8:	1823883a 	mov	r17,r3
    d2ec:	1021883a 	mov	r16,r2
    d2f0:	0010dfc0 	call	10dfc <__truncdfsf2>
    d2f4:	1009883a 	mov	r4,r2
    d2f8:	000b883a 	mov	r5,zero
    d2fc:	1025883a 	mov	r18,r2
    d300:	1027883a 	mov	r19,r2
    d304:	000fc740 	call	fc74 <__nesf2>
    d308:	000d883a 	mov	r6,zero
    d30c:	000f883a 	mov	r7,zero
    d310:	8009883a 	mov	r4,r16
    d314:	880b883a 	mov	r5,r17
    d318:	10000e1e 	bne	r2,zero,d354 <strtof+0xac>
    d31c:	00109840 	call	10984 <__nedf2>
    d320:	10000c26 	beq	r2,zero,d354 <strtof+0xac>
    d324:	a0c00017 	ldw	r3,0(r20)
    d328:	00800884 	movi	r2,34
    d32c:	18800015 	stw	r2,0(r3)
    d330:	9805883a 	mov	r2,r19
    d334:	dfc00517 	ldw	ra,20(sp)
    d338:	dd000417 	ldw	r20,16(sp)
    d33c:	dcc00317 	ldw	r19,12(sp)
    d340:	dc800217 	ldw	r18,8(sp)
    d344:	dc400117 	ldw	r17,4(sp)
    d348:	dc000017 	ldw	r16,0(sp)
    d34c:	dec00604 	addi	sp,sp,24
    d350:	f800283a 	ret
    d354:	9009883a 	mov	r4,r18
    d358:	015fe034 	movhi	r5,32640
    d35c:	297fffc4 	addi	r5,r5,-1
    d360:	000fcec0 	call	fcec <__gtsf2>
    d364:	00ffffc4 	movi	r3,-1
    d368:	011ffc34 	movhi	r4,32752
    d36c:	213fffc4 	addi	r4,r4,-1
    d370:	200f883a 	mov	r7,r4
    d374:	180d883a 	mov	r6,r3
    d378:	8009883a 	mov	r4,r16
    d37c:	880b883a 	mov	r5,r17
    d380:	00800f16 	blt	zero,r2,d3c0 <strtof+0x118>
    d384:	9009883a 	mov	r4,r18
    d388:	017fe034 	movhi	r5,65408
    d38c:	297fffc4 	addi	r5,r5,-1
    d390:	000fd640 	call	fd64 <__ltsf2>
    d394:	023fffc4 	movi	r8,-1
    d398:	027ffc34 	movhi	r9,65520
    d39c:	4a7fffc4 	addi	r9,r9,-1
    d3a0:	880b883a 	mov	r5,r17
    d3a4:	480f883a 	mov	r7,r9
    d3a8:	8009883a 	mov	r4,r16
    d3ac:	400d883a 	mov	r6,r8
    d3b0:	103fdf0e 	bge	r2,zero,d330 <strtof+0x88>
    d3b4:	0010b1c0 	call	10b1c <__ltdf2>
    d3b8:	103fda0e 	bge	r2,zero,d324 <strtof+0x7c>
    d3bc:	003fdc06 	br	d330 <strtof+0x88>
    d3c0:	0010a0c0 	call	10a0c <__gtdf2>
    d3c4:	00bfd70e 	bge	zero,r2,d324 <strtof+0x7c>
    d3c8:	003fee06 	br	d384 <strtof+0xdc>

0000d3cc <strtod>:
    d3cc:	01800074 	movhi	r6,1
    d3d0:	319a7d04 	addi	r6,r6,27124
    d3d4:	2007883a 	mov	r3,r4
    d3d8:	31000017 	ldw	r4,0(r6)
    d3dc:	280d883a 	mov	r6,r5
    d3e0:	180b883a 	mov	r5,r3
    d3e4:	000bdc41 	jmpi	bdc4 <_strtod_r>

0000d3e8 <_strtol_r>:
    d3e8:	defff304 	addi	sp,sp,-52
    d3ec:	00800074 	movhi	r2,1
    d3f0:	109a7c04 	addi	r2,r2,27120
    d3f4:	dcc00615 	stw	r19,24(sp)
    d3f8:	14c00017 	ldw	r19,0(r2)
    d3fc:	ddc00a15 	stw	r23,40(sp)
    d400:	dc000315 	stw	r16,12(sp)
    d404:	dfc00c15 	stw	ra,48(sp)
    d408:	df000b15 	stw	fp,44(sp)
    d40c:	dd800915 	stw	r22,36(sp)
    d410:	dd400815 	stw	r21,32(sp)
    d414:	dd000715 	stw	r20,28(sp)
    d418:	dc800515 	stw	r18,20(sp)
    d41c:	dc400415 	stw	r17,16(sp)
    d420:	282f883a 	mov	r23,r5
    d424:	d9000015 	stw	r4,0(sp)
    d428:	d9800115 	stw	r6,4(sp)
    d42c:	2821883a 	mov	r16,r5
    d430:	84400007 	ldb	r17,0(r16)
    d434:	84000044 	addi	r16,r16,1
    d438:	9c47883a 	add	r3,r19,r17
    d43c:	18800003 	ldbu	r2,0(r3)
    d440:	1080020c 	andi	r2,r2,8
    d444:	103ffa1e 	bne	r2,zero,d430 <_strtol_r+0x48>
    d448:	00800b44 	movi	r2,45
    d44c:	88805c26 	beq	r17,r2,d5c0 <_strtol_r+0x1d8>
    d450:	00800ac4 	movi	r2,43
    d454:	88805726 	beq	r17,r2,d5b4 <_strtol_r+0x1cc>
    d458:	0039883a 	mov	fp,zero
    d45c:	3807003a 	cmpeq	r3,r7,zero
    d460:	1800431e 	bne	r3,zero,d570 <_strtol_r+0x188>
    d464:	00800404 	movi	r2,16
    d468:	38804126 	beq	r7,r2,d570 <_strtol_r+0x188>
    d46c:	3829883a 	mov	r20,r7
    d470:	e02cc03a 	cmpne	r22,fp,zero
    d474:	b0004b1e 	bne	r22,zero,d5a4 <_strtol_r+0x1bc>
    d478:	04a00034 	movhi	r18,32768
    d47c:	94bfffc4 	addi	r18,r18,-1
    d480:	9009883a 	mov	r4,r18
    d484:	a00b883a 	mov	r5,r20
    d488:	d9c00215 	stw	r7,8(sp)
    d48c:	00027e80 	call	27e8 <__umodsi3>
    d490:	9009883a 	mov	r4,r18
    d494:	a00b883a 	mov	r5,r20
    d498:	102b883a 	mov	r21,r2
    d49c:	00027e00 	call	27e0 <__udivsi3>
    d4a0:	1011883a 	mov	r8,r2
    d4a4:	9c45883a 	add	r2,r19,r17
    d4a8:	11000003 	ldbu	r4,0(r2)
    d4ac:	000b883a 	mov	r5,zero
    d4b0:	000d883a 	mov	r6,zero
    d4b4:	20c0010c 	andi	r3,r4,4
    d4b8:	d9c00217 	ldw	r7,8(sp)
    d4bc:	18000e26 	beq	r3,zero,d4f8 <_strtol_r+0x110>
    d4c0:	88fff404 	addi	r3,r17,-48
    d4c4:	19c0140e 	bge	r3,r7,d518 <_strtol_r+0x130>
    d4c8:	30003116 	blt	r6,zero,d590 <_strtol_r+0x1a8>
    d4cc:	41403036 	bltu	r8,r5,d590 <_strtol_r+0x1a8>
    d4d0:	2a002e26 	beq	r5,r8,d58c <_strtol_r+0x1a4>
    d4d4:	2d05383a 	mul	r2,r5,r20
    d4d8:	01800044 	movi	r6,1
    d4dc:	10cb883a 	add	r5,r2,r3
    d4e0:	84400007 	ldb	r17,0(r16)
    d4e4:	84000044 	addi	r16,r16,1
    d4e8:	9c45883a 	add	r2,r19,r17
    d4ec:	11000003 	ldbu	r4,0(r2)
    d4f0:	20c0010c 	andi	r3,r4,4
    d4f4:	183ff21e 	bne	r3,zero,d4c0 <_strtol_r+0xd8>
    d4f8:	208000cc 	andi	r2,r4,3
    d4fc:	10000626 	beq	r2,zero,d518 <_strtol_r+0x130>
    d500:	2080004c 	andi	r2,r4,1
    d504:	1005003a 	cmpeq	r2,r2,zero
    d508:	1000231e 	bne	r2,zero,d598 <_strtol_r+0x1b0>
    d50c:	00800dc4 	movi	r2,55
    d510:	8887c83a 	sub	r3,r17,r2
    d514:	19ffec16 	blt	r3,r7,d4c8 <_strtol_r+0xe0>
    d518:	30002d16 	blt	r6,zero,d5d0 <_strtol_r+0x1e8>
    d51c:	b000231e 	bne	r22,zero,d5ac <_strtol_r+0x1c4>
    d520:	2807883a 	mov	r3,r5
    d524:	d8800117 	ldw	r2,4(sp)
    d528:	10000426 	beq	r2,zero,d53c <_strtol_r+0x154>
    d52c:	30000126 	beq	r6,zero,d534 <_strtol_r+0x14c>
    d530:	85ffffc4 	addi	r23,r16,-1
    d534:	d9000117 	ldw	r4,4(sp)
    d538:	25c00015 	stw	r23,0(r4)
    d53c:	1805883a 	mov	r2,r3
    d540:	dfc00c17 	ldw	ra,48(sp)
    d544:	df000b17 	ldw	fp,44(sp)
    d548:	ddc00a17 	ldw	r23,40(sp)
    d54c:	dd800917 	ldw	r22,36(sp)
    d550:	dd400817 	ldw	r21,32(sp)
    d554:	dd000717 	ldw	r20,28(sp)
    d558:	dcc00617 	ldw	r19,24(sp)
    d55c:	dc800517 	ldw	r18,20(sp)
    d560:	dc400417 	ldw	r17,16(sp)
    d564:	dc000317 	ldw	r16,12(sp)
    d568:	dec00d04 	addi	sp,sp,52
    d56c:	f800283a 	ret
    d570:	00800c04 	movi	r2,48
    d574:	88801d26 	beq	r17,r2,d5ec <_strtol_r+0x204>
    d578:	183fbc26 	beq	r3,zero,d46c <_strtol_r+0x84>
    d57c:	00800c04 	movi	r2,48
    d580:	88802726 	beq	r17,r2,d620 <_strtol_r+0x238>
    d584:	01c00284 	movi	r7,10
    d588:	003fb806 	br	d46c <_strtol_r+0x84>
    d58c:	a8ffd10e 	bge	r21,r3,d4d4 <_strtol_r+0xec>
    d590:	01bfffc4 	movi	r6,-1
    d594:	003fd206 	br	d4e0 <_strtol_r+0xf8>
    d598:	008015c4 	movi	r2,87
    d59c:	8887c83a 	sub	r3,r17,r2
    d5a0:	003fdc06 	br	d514 <_strtol_r+0x12c>
    d5a4:	04a00034 	movhi	r18,32768
    d5a8:	003fb506 	br	d480 <_strtol_r+0x98>
    d5ac:	0147c83a 	sub	r3,zero,r5
    d5b0:	003fdc06 	br	d524 <_strtol_r+0x13c>
    d5b4:	84400007 	ldb	r17,0(r16)
    d5b8:	84000044 	addi	r16,r16,1
    d5bc:	003fa606 	br	d458 <_strtol_r+0x70>
    d5c0:	84400007 	ldb	r17,0(r16)
    d5c4:	07000044 	movi	fp,1
    d5c8:	84000044 	addi	r16,r16,1
    d5cc:	003fa306 	br	d45c <_strtol_r+0x74>
    d5d0:	e005003a 	cmpeq	r2,fp,zero
    d5d4:	10000f1e 	bne	r2,zero,d614 <_strtol_r+0x22c>
    d5d8:	00e00034 	movhi	r3,32768
    d5dc:	d9000017 	ldw	r4,0(sp)
    d5e0:	00800884 	movi	r2,34
    d5e4:	20800015 	stw	r2,0(r4)
    d5e8:	003fce06 	br	d524 <_strtol_r+0x13c>
    d5ec:	81000007 	ldb	r4,0(r16)
    d5f0:	00801e04 	movi	r2,120
    d5f4:	20800226 	beq	r4,r2,d600 <_strtol_r+0x218>
    d5f8:	00801604 	movi	r2,88
    d5fc:	20bfde1e 	bne	r4,r2,d578 <_strtol_r+0x190>
    d600:	84400047 	ldb	r17,1(r16)
    d604:	01c00404 	movi	r7,16
    d608:	84000084 	addi	r16,r16,2
    d60c:	3829883a 	mov	r20,r7
    d610:	003f9706 	br	d470 <_strtol_r+0x88>
    d614:	00e00034 	movhi	r3,32768
    d618:	18ffffc4 	addi	r3,r3,-1
    d61c:	003fef06 	br	d5dc <_strtol_r+0x1f4>
    d620:	01c00204 	movi	r7,8
    d624:	3829883a 	mov	r20,r7
    d628:	003f9106 	br	d470 <_strtol_r+0x88>

0000d62c <strtol>:
    d62c:	00800074 	movhi	r2,1
    d630:	109a7d04 	addi	r2,r2,27124
    d634:	2013883a 	mov	r9,r4
    d638:	11000017 	ldw	r4,0(r2)
    d63c:	2805883a 	mov	r2,r5
    d640:	300f883a 	mov	r7,r6
    d644:	480b883a 	mov	r5,r9
    d648:	100d883a 	mov	r6,r2
    d64c:	000d3e81 	jmpi	d3e8 <_strtol_r>

0000d650 <_strtoll_r>:
    d650:	defff004 	addi	sp,sp,-64
    d654:	00800074 	movhi	r2,1
    d658:	109a7c04 	addi	r2,r2,27120
    d65c:	df000e15 	stw	fp,56(sp)
    d660:	17000017 	ldw	fp,0(r2)
    d664:	ddc00d15 	stw	r23,52(sp)
    d668:	dd000a15 	stw	r20,40(sp)
    d66c:	dfc00f15 	stw	ra,60(sp)
    d670:	dd800c15 	stw	r22,48(sp)
    d674:	dd400b15 	stw	r21,44(sp)
    d678:	dcc00915 	stw	r19,36(sp)
    d67c:	dc800815 	stw	r18,32(sp)
    d680:	dc400715 	stw	r17,28(sp)
    d684:	dc000615 	stw	r16,24(sp)
    d688:	d9400315 	stw	r5,12(sp)
    d68c:	d9000215 	stw	r4,8(sp)
    d690:	d9800415 	stw	r6,16(sp)
    d694:	382f883a 	mov	r23,r7
    d698:	2829883a 	mov	r20,r5
    d69c:	a4c00007 	ldb	r19,0(r20)
    d6a0:	a5000044 	addi	r20,r20,1
    d6a4:	e4c7883a 	add	r3,fp,r19
    d6a8:	18800003 	ldbu	r2,0(r3)
    d6ac:	1080020c 	andi	r2,r2,8
    d6b0:	103ffa1e 	bne	r2,zero,d69c <_strtoll_r+0x4c>
    d6b4:	00800b44 	movi	r2,45
    d6b8:	98808826 	beq	r19,r2,d8dc <_strtoll_r+0x28c>
    d6bc:	00800ac4 	movi	r2,43
    d6c0:	98808326 	beq	r19,r2,d8d0 <_strtoll_r+0x280>
    d6c4:	d8000115 	stw	zero,4(sp)
    d6c8:	b807003a 	cmpeq	r3,r23,zero
    d6cc:	18005f1e 	bne	r3,zero,d84c <_strtoll_r+0x1fc>
    d6d0:	00800404 	movi	r2,16
    d6d4:	b8805d26 	beq	r23,r2,d84c <_strtoll_r+0x1fc>
    d6d8:	b82dd7fa 	srai	r22,r23,31
    d6dc:	b82b883a 	mov	r21,r23
    d6e0:	d8c00117 	ldw	r3,4(sp)
    d6e4:	1806c03a 	cmpne	r3,r3,zero
    d6e8:	d8c00515 	stw	r3,20(sp)
    d6ec:	1800631e 	bne	r3,zero,d87c <_strtoll_r+0x22c>
    d6f0:	043fffc4 	movi	r16,-1
    d6f4:	04600034 	movhi	r17,32768
    d6f8:	8c7fffc4 	addi	r17,r17,-1
    d6fc:	880b883a 	mov	r5,r17
    d700:	8009883a 	mov	r4,r16
    d704:	a80d883a 	mov	r6,r21
    d708:	b00f883a 	mov	r7,r22
    d70c:	000f6c40 	call	f6c4 <__umoddi3>
    d710:	880b883a 	mov	r5,r17
    d714:	8009883a 	mov	r4,r16
    d718:	b00f883a 	mov	r7,r22
    d71c:	a80d883a 	mov	r6,r21
    d720:	d8800015 	stw	r2,0(sp)
    d724:	000f0e80 	call	f0e8 <__udivdi3>
    d728:	1023883a 	mov	r17,r2
    d72c:	e4c5883a 	add	r2,fp,r19
    d730:	11000003 	ldbu	r4,0(r2)
    d734:	1825883a 	mov	r18,r3
    d738:	0015883a 	mov	r10,zero
    d73c:	20c0010c 	andi	r3,r4,4
    d740:	0017883a 	mov	r11,zero
    d744:	000f883a 	mov	r7,zero
    d748:	18001a26 	beq	r3,zero,d7b4 <_strtoll_r+0x164>
    d74c:	9c3ff404 	addi	r16,r19,-48
    d750:	85c0200e 	bge	r16,r23,d7d4 <_strtoll_r+0x184>
    d754:	38003b16 	blt	r7,zero,d844 <_strtoll_r+0x1f4>
    d758:	92c03a36 	bltu	r18,r11,d844 <_strtoll_r+0x1f4>
    d75c:	5c803826 	beq	r11,r18,d840 <_strtoll_r+0x1f0>
    d760:	54404c26 	beq	r10,r17,d894 <_strtoll_r+0x244>
    d764:	580b883a 	mov	r5,r11
    d768:	5009883a 	mov	r4,r10
    d76c:	a80d883a 	mov	r6,r21
    d770:	b00f883a 	mov	r7,r22
    d774:	000efac0 	call	efac <__muldi3>
    d778:	8013d7fa 	srai	r9,r16,31
    d77c:	100d883a 	mov	r6,r2
    d780:	1405883a 	add	r2,r2,r16
    d784:	118d803a 	cmpltu	r6,r2,r6
    d788:	1a47883a 	add	r3,r3,r9
    d78c:	30cd883a 	add	r6,r6,r3
    d790:	1015883a 	mov	r10,r2
    d794:	3017883a 	mov	r11,r6
    d798:	01c00044 	movi	r7,1
    d79c:	a4c00007 	ldb	r19,0(r20)
    d7a0:	a5000044 	addi	r20,r20,1
    d7a4:	e4c5883a 	add	r2,fp,r19
    d7a8:	11000003 	ldbu	r4,0(r2)
    d7ac:	20c0010c 	andi	r3,r4,4
    d7b0:	183fe61e 	bne	r3,zero,d74c <_strtoll_r+0xfc>
    d7b4:	208000cc 	andi	r2,r4,3
    d7b8:	10000626 	beq	r2,zero,d7d4 <_strtoll_r+0x184>
    d7bc:	2080004c 	andi	r2,r4,1
    d7c0:	1005003a 	cmpeq	r2,r2,zero
    d7c4:	1000301e 	bne	r2,zero,d888 <_strtoll_r+0x238>
    d7c8:	02000dc4 	movi	r8,55
    d7cc:	9a21c83a 	sub	r16,r19,r8
    d7d0:	85ffe016 	blt	r16,r23,d754 <_strtoll_r+0x104>
    d7d4:	38004616 	blt	r7,zero,d8f0 <_strtoll_r+0x2a0>
    d7d8:	d8800517 	ldw	r2,20(sp)
    d7dc:	1000341e 	bne	r2,zero,d8b0 <_strtoll_r+0x260>
    d7e0:	500b883a 	mov	r5,r10
    d7e4:	580d883a 	mov	r6,r11
    d7e8:	d8c00417 	ldw	r3,16(sp)
    d7ec:	18000626 	beq	r3,zero,d808 <_strtoll_r+0x1b8>
    d7f0:	38000226 	beq	r7,zero,d7fc <_strtoll_r+0x1ac>
    d7f4:	a53fffc4 	addi	r20,r20,-1
    d7f8:	dd000315 	stw	r20,12(sp)
    d7fc:	d8c00317 	ldw	r3,12(sp)
    d800:	d8800417 	ldw	r2,16(sp)
    d804:	10c00015 	stw	r3,0(r2)
    d808:	2805883a 	mov	r2,r5
    d80c:	3007883a 	mov	r3,r6
    d810:	dfc00f17 	ldw	ra,60(sp)
    d814:	df000e17 	ldw	fp,56(sp)
    d818:	ddc00d17 	ldw	r23,52(sp)
    d81c:	dd800c17 	ldw	r22,48(sp)
    d820:	dd400b17 	ldw	r21,44(sp)
    d824:	dd000a17 	ldw	r20,40(sp)
    d828:	dcc00917 	ldw	r19,36(sp)
    d82c:	dc800817 	ldw	r18,32(sp)
    d830:	dc400717 	ldw	r17,28(sp)
    d834:	dc000617 	ldw	r16,24(sp)
    d838:	dec01004 	addi	sp,sp,64
    d83c:	f800283a 	ret
    d840:	8abfc72e 	bgeu	r17,r10,d760 <_strtoll_r+0x110>
    d844:	01ffffc4 	movi	r7,-1
    d848:	003fd406 	br	d79c <_strtoll_r+0x14c>
    d84c:	00800c04 	movi	r2,48
    d850:	98803226 	beq	r19,r2,d91c <_strtoll_r+0x2cc>
    d854:	183fa026 	beq	r3,zero,d6d8 <_strtoll_r+0x88>
    d858:	00800c04 	movi	r2,48
    d85c:	98803e26 	beq	r19,r2,d958 <_strtoll_r+0x308>
    d860:	d8c00117 	ldw	r3,4(sp)
    d864:	05c00284 	movi	r23,10
    d868:	b82b883a 	mov	r21,r23
    d86c:	1806c03a 	cmpne	r3,r3,zero
    d870:	002d883a 	mov	r22,zero
    d874:	d8c00515 	stw	r3,20(sp)
    d878:	183f9d26 	beq	r3,zero,d6f0 <_strtoll_r+0xa0>
    d87c:	0021883a 	mov	r16,zero
    d880:	04600034 	movhi	r17,32768
    d884:	003f9d06 	br	d6fc <_strtoll_r+0xac>
    d888:	020015c4 	movi	r8,87
    d88c:	9a21c83a 	sub	r16,r19,r8
    d890:	003fcf06 	br	d7d0 <_strtoll_r+0x180>
    d894:	5cbfb31e 	bne	r11,r18,d764 <_strtoll_r+0x114>
    d898:	d8800017 	ldw	r2,0(sp)
    d89c:	143fb10e 	bge	r2,r16,d764 <_strtoll_r+0x114>
    d8a0:	8815883a 	mov	r10,r17
    d8a4:	9017883a 	mov	r11,r18
    d8a8:	01ffffc4 	movi	r7,-1
    d8ac:	003fbb06 	br	d79c <_strtoll_r+0x14c>
    d8b0:	0009883a 	mov	r4,zero
    d8b4:	2285c83a 	sub	r2,r4,r10
    d8b8:	2089803a 	cmpltu	r4,r4,r2
    d8bc:	02c7c83a 	sub	r3,zero,r11
    d8c0:	1909c83a 	sub	r4,r3,r4
    d8c4:	100b883a 	mov	r5,r2
    d8c8:	200d883a 	mov	r6,r4
    d8cc:	003fc606 	br	d7e8 <_strtoll_r+0x198>
    d8d0:	a4c00007 	ldb	r19,0(r20)
    d8d4:	a5000044 	addi	r20,r20,1
    d8d8:	003f7a06 	br	d6c4 <_strtoll_r+0x74>
    d8dc:	a4c00007 	ldb	r19,0(r20)
    d8e0:	00800044 	movi	r2,1
    d8e4:	a5000044 	addi	r20,r20,1
    d8e8:	d8800115 	stw	r2,4(sp)
    d8ec:	003f7606 	br	d6c8 <_strtoll_r+0x78>
    d8f0:	d8c00117 	ldw	r3,4(sp)
    d8f4:	1805003a 	cmpeq	r2,r3,zero
    d8f8:	1000131e 	bne	r2,zero,d948 <_strtoll_r+0x2f8>
    d8fc:	0005883a 	mov	r2,zero
    d900:	00e00034 	movhi	r3,32768
    d904:	100b883a 	mov	r5,r2
    d908:	180d883a 	mov	r6,r3
    d90c:	d8c00217 	ldw	r3,8(sp)
    d910:	00800884 	movi	r2,34
    d914:	18800015 	stw	r2,0(r3)
    d918:	003fb306 	br	d7e8 <_strtoll_r+0x198>
    d91c:	a1000007 	ldb	r4,0(r20)
    d920:	00801e04 	movi	r2,120
    d924:	20800226 	beq	r4,r2,d930 <_strtoll_r+0x2e0>
    d928:	00801604 	movi	r2,88
    d92c:	20bfc91e 	bne	r4,r2,d854 <_strtoll_r+0x204>
    d930:	a4c00047 	ldb	r19,1(r20)
    d934:	05c00404 	movi	r23,16
    d938:	b82b883a 	mov	r21,r23
    d93c:	a5000084 	addi	r20,r20,2
    d940:	002d883a 	mov	r22,zero
    d944:	003f6606 	br	d6e0 <_strtoll_r+0x90>
    d948:	017fffc4 	movi	r5,-1
    d94c:	01a00034 	movhi	r6,32768
    d950:	31bfffc4 	addi	r6,r6,-1
    d954:	003fed06 	br	d90c <_strtoll_r+0x2bc>
    d958:	05c00204 	movi	r23,8
    d95c:	b82b883a 	mov	r21,r23
    d960:	002d883a 	mov	r22,zero
    d964:	003f5e06 	br	d6e0 <_strtoll_r+0x90>

0000d968 <_strtoul_r>:
    d968:	defff604 	addi	sp,sp,-40
    d96c:	00800074 	movhi	r2,1
    d970:	109a7c04 	addi	r2,r2,27120
    d974:	dd000415 	stw	r20,16(sp)
    d978:	15000017 	ldw	r20,0(r2)
    d97c:	ddc00715 	stw	r23,28(sp)
    d980:	dd800615 	stw	r22,24(sp)
    d984:	dd400515 	stw	r21,20(sp)
    d988:	dc800215 	stw	r18,8(sp)
    d98c:	dc000015 	stw	r16,0(sp)
    d990:	dfc00915 	stw	ra,36(sp)
    d994:	df000815 	stw	fp,32(sp)
    d998:	dcc00315 	stw	r19,12(sp)
    d99c:	dc400115 	stw	r17,4(sp)
    d9a0:	282b883a 	mov	r21,r5
    d9a4:	202f883a 	mov	r23,r4
    d9a8:	302d883a 	mov	r22,r6
    d9ac:	3825883a 	mov	r18,r7
    d9b0:	2821883a 	mov	r16,r5
    d9b4:	84400007 	ldb	r17,0(r16)
    d9b8:	84000044 	addi	r16,r16,1
    d9bc:	a447883a 	add	r3,r20,r17
    d9c0:	18800003 	ldbu	r2,0(r3)
    d9c4:	1080020c 	andi	r2,r2,8
    d9c8:	103ffa1e 	bne	r2,zero,d9b4 <_strtoul_r+0x4c>
    d9cc:	00800b44 	movi	r2,45
    d9d0:	88805626 	beq	r17,r2,db2c <_strtoul_r+0x1c4>
    d9d4:	00800ac4 	movi	r2,43
    d9d8:	88805126 	beq	r17,r2,db20 <_strtoul_r+0x1b8>
    d9dc:	0039883a 	mov	fp,zero
    d9e0:	9007003a 	cmpeq	r3,r18,zero
    d9e4:	18003b1e 	bne	r3,zero,dad4 <_strtoul_r+0x16c>
    d9e8:	00800404 	movi	r2,16
    d9ec:	90803926 	beq	r18,r2,dad4 <_strtoul_r+0x16c>
    d9f0:	013fffc4 	movi	r4,-1
    d9f4:	900b883a 	mov	r5,r18
    d9f8:	00027e00 	call	27e0 <__udivsi3>
    d9fc:	013fffc4 	movi	r4,-1
    da00:	900b883a 	mov	r5,r18
    da04:	1027883a 	mov	r19,r2
    da08:	00027e80 	call	27e8 <__umodsi3>
    da0c:	1011883a 	mov	r8,r2
    da10:	900f883a 	mov	r7,r18
    da14:	a445883a 	add	r2,r20,r17
    da18:	11000003 	ldbu	r4,0(r2)
    da1c:	000b883a 	mov	r5,zero
    da20:	000d883a 	mov	r6,zero
    da24:	20c0010c 	andi	r3,r4,4
    da28:	18000e26 	beq	r3,zero,da64 <_strtoul_r+0xfc>
    da2c:	88fff404 	addi	r3,r17,-48
    da30:	1c80140e 	bge	r3,r18,da84 <_strtoul_r+0x11c>
    da34:	30003316 	blt	r6,zero,db04 <_strtoul_r+0x19c>
    da38:	99403236 	bltu	r19,r5,db04 <_strtoul_r+0x19c>
    da3c:	2cc03026 	beq	r5,r19,db00 <_strtoul_r+0x198>
    da40:	29c5383a 	mul	r2,r5,r7
    da44:	01800044 	movi	r6,1
    da48:	10cb883a 	add	r5,r2,r3
    da4c:	84400007 	ldb	r17,0(r16)
    da50:	84000044 	addi	r16,r16,1
    da54:	a445883a 	add	r2,r20,r17
    da58:	11000003 	ldbu	r4,0(r2)
    da5c:	20c0010c 	andi	r3,r4,4
    da60:	183ff21e 	bne	r3,zero,da2c <_strtoul_r+0xc4>
    da64:	208000cc 	andi	r2,r4,3
    da68:	10000626 	beq	r2,zero,da84 <_strtoul_r+0x11c>
    da6c:	2080004c 	andi	r2,r4,1
    da70:	1005003a 	cmpeq	r2,r2,zero
    da74:	1000251e 	bne	r2,zero,db0c <_strtoul_r+0x1a4>
    da78:	00800dc4 	movi	r2,55
    da7c:	8887c83a 	sub	r3,r17,r2
    da80:	1cbfec16 	blt	r3,r18,da34 <_strtoul_r+0xcc>
    da84:	3000400e 	bge	r6,zero,db88 <_strtoul_r+0x220>
    da88:	00800884 	movi	r2,34
    da8c:	017fffc4 	movi	r5,-1
    da90:	b8800015 	stw	r2,0(r23)
    da94:	b0000226 	beq	r22,zero,daa0 <_strtoul_r+0x138>
    da98:	30001f1e 	bne	r6,zero,db18 <_strtoul_r+0x1b0>
    da9c:	b5400015 	stw	r21,0(r22)
    daa0:	2805883a 	mov	r2,r5
    daa4:	dfc00917 	ldw	ra,36(sp)
    daa8:	df000817 	ldw	fp,32(sp)
    daac:	ddc00717 	ldw	r23,28(sp)
    dab0:	dd800617 	ldw	r22,24(sp)
    dab4:	dd400517 	ldw	r21,20(sp)
    dab8:	dd000417 	ldw	r20,16(sp)
    dabc:	dcc00317 	ldw	r19,12(sp)
    dac0:	dc800217 	ldw	r18,8(sp)
    dac4:	dc400117 	ldw	r17,4(sp)
    dac8:	dc000017 	ldw	r16,0(sp)
    dacc:	dec00a04 	addi	sp,sp,40
    dad0:	f800283a 	ret
    dad4:	00800c04 	movi	r2,48
    dad8:	88801826 	beq	r17,r2,db3c <_strtoul_r+0x1d4>
    dadc:	183fc426 	beq	r3,zero,d9f0 <_strtoul_r+0x88>
    dae0:	00800c04 	movi	r2,48
    dae4:	88802226 	beq	r17,r2,db70 <_strtoul_r+0x208>
    dae8:	04800284 	movi	r18,10
    daec:	900f883a 	mov	r7,r18
    daf0:	04c666b4 	movhi	r19,6554
    daf4:	9ce66644 	addi	r19,r19,-26215
    daf8:	02000144 	movi	r8,5
    dafc:	003fc506 	br	da14 <_strtoul_r+0xac>
    db00:	40ffcf0e 	bge	r8,r3,da40 <_strtoul_r+0xd8>
    db04:	01bfffc4 	movi	r6,-1
    db08:	003fd006 	br	da4c <_strtoul_r+0xe4>
    db0c:	008015c4 	movi	r2,87
    db10:	8887c83a 	sub	r3,r17,r2
    db14:	003fda06 	br	da80 <_strtoul_r+0x118>
    db18:	857fffc4 	addi	r21,r16,-1
    db1c:	003fdf06 	br	da9c <_strtoul_r+0x134>
    db20:	84400007 	ldb	r17,0(r16)
    db24:	84000044 	addi	r16,r16,1
    db28:	003fac06 	br	d9dc <_strtoul_r+0x74>
    db2c:	84400007 	ldb	r17,0(r16)
    db30:	07000044 	movi	fp,1
    db34:	84000044 	addi	r16,r16,1
    db38:	003fa906 	br	d9e0 <_strtoul_r+0x78>
    db3c:	81000007 	ldb	r4,0(r16)
    db40:	00801e04 	movi	r2,120
    db44:	20800226 	beq	r4,r2,db50 <_strtoul_r+0x1e8>
    db48:	00801604 	movi	r2,88
    db4c:	20bfe31e 	bne	r4,r2,dadc <_strtoul_r+0x174>
    db50:	84400047 	ldb	r17,1(r16)
    db54:	04800404 	movi	r18,16
    db58:	84000084 	addi	r16,r16,2
    db5c:	900f883a 	mov	r7,r18
    db60:	04c40034 	movhi	r19,4096
    db64:	9cffffc4 	addi	r19,r19,-1
    db68:	020003c4 	movi	r8,15
    db6c:	003fa906 	br	da14 <_strtoul_r+0xac>
    db70:	04800204 	movi	r18,8
    db74:	900f883a 	mov	r7,r18
    db78:	04c80034 	movhi	r19,8192
    db7c:	9cffffc4 	addi	r19,r19,-1
    db80:	020001c4 	movi	r8,7
    db84:	003fa306 	br	da14 <_strtoul_r+0xac>
    db88:	e005003a 	cmpeq	r2,fp,zero
    db8c:	103fc11e 	bne	r2,zero,da94 <_strtoul_r+0x12c>
    db90:	014bc83a 	sub	r5,zero,r5
    db94:	003fbf06 	br	da94 <_strtoul_r+0x12c>

0000db98 <strtoul>:
    db98:	00800074 	movhi	r2,1
    db9c:	109a7d04 	addi	r2,r2,27124
    dba0:	2013883a 	mov	r9,r4
    dba4:	11000017 	ldw	r4,0(r2)
    dba8:	2805883a 	mov	r2,r5
    dbac:	300f883a 	mov	r7,r6
    dbb0:	480b883a 	mov	r5,r9
    dbb4:	100d883a 	mov	r6,r2
    dbb8:	000d9681 	jmpi	d968 <_strtoul_r>

0000dbbc <_strtoull_r>:
    dbbc:	defff104 	addi	sp,sp,-60
    dbc0:	00800074 	movhi	r2,1
    dbc4:	109a7c04 	addi	r2,r2,27120
    dbc8:	df000d15 	stw	fp,52(sp)
    dbcc:	17000017 	ldw	fp,0(r2)
    dbd0:	ddc00c15 	stw	r23,48(sp)
    dbd4:	dcc00815 	stw	r19,32(sp)
    dbd8:	dfc00e15 	stw	ra,56(sp)
    dbdc:	dd800b15 	stw	r22,44(sp)
    dbe0:	dd400a15 	stw	r21,40(sp)
    dbe4:	dd000915 	stw	r20,36(sp)
    dbe8:	dc800715 	stw	r18,28(sp)
    dbec:	dc400615 	stw	r17,24(sp)
    dbf0:	dc000515 	stw	r16,20(sp)
    dbf4:	d9400215 	stw	r5,8(sp)
    dbf8:	d9000115 	stw	r4,4(sp)
    dbfc:	d9800315 	stw	r6,12(sp)
    dc00:	382f883a 	mov	r23,r7
    dc04:	2827883a 	mov	r19,r5
    dc08:	9d000007 	ldb	r20,0(r19)
    dc0c:	9cc00044 	addi	r19,r19,1
    dc10:	e507883a 	add	r3,fp,r20
    dc14:	18800003 	ldbu	r2,0(r3)
    dc18:	1080020c 	andi	r2,r2,8
    dc1c:	103ffa1e 	bne	r2,zero,dc08 <_strtoull_r+0x4c>
    dc20:	00800b44 	movi	r2,45
    dc24:	a0807a26 	beq	r20,r2,de10 <_strtoull_r+0x254>
    dc28:	00800ac4 	movi	r2,43
    dc2c:	a0807526 	beq	r20,r2,de04 <_strtoull_r+0x248>
    dc30:	d8000015 	stw	zero,0(sp)
    dc34:	b807003a 	cmpeq	r3,r23,zero
    dc38:	18005a1e 	bne	r3,zero,dda4 <_strtoull_r+0x1e8>
    dc3c:	00800404 	movi	r2,16
    dc40:	b8805826 	beq	r23,r2,dda4 <_strtoull_r+0x1e8>
    dc44:	b82dd7fa 	srai	r22,r23,31
    dc48:	043fffc4 	movi	r16,-1
    dc4c:	8009883a 	mov	r4,r16
    dc50:	800b883a 	mov	r5,r16
    dc54:	b80d883a 	mov	r6,r23
    dc58:	b00f883a 	mov	r7,r22
    dc5c:	000f0e80 	call	f0e8 <__udivdi3>
    dc60:	8009883a 	mov	r4,r16
    dc64:	800b883a 	mov	r5,r16
    dc68:	b80d883a 	mov	r6,r23
    dc6c:	b00f883a 	mov	r7,r22
    dc70:	1023883a 	mov	r17,r2
    dc74:	1825883a 	mov	r18,r3
    dc78:	000f6c40 	call	f6c4 <__umoddi3>
    dc7c:	b82b883a 	mov	r21,r23
    dc80:	1019883a 	mov	r12,r2
    dc84:	e505883a 	add	r2,fp,r20
    dc88:	11000003 	ldbu	r4,0(r2)
    dc8c:	0015883a 	mov	r10,zero
    dc90:	0017883a 	mov	r11,zero
    dc94:	20c0010c 	andi	r3,r4,4
    dc98:	000d883a 	mov	r6,zero
    dc9c:	18001c26 	beq	r3,zero,dd10 <_strtoull_r+0x154>
    dca0:	a43ff404 	addi	r16,r20,-48
    dca4:	85c0220e 	bge	r16,r23,dd30 <_strtoull_r+0x174>
    dca8:	30003c16 	blt	r6,zero,dd9c <_strtoull_r+0x1e0>
    dcac:	92c03b36 	bltu	r18,r11,dd9c <_strtoull_r+0x1e0>
    dcb0:	5c803926 	beq	r11,r18,dd98 <_strtoull_r+0x1dc>
    dcb4:	54404c26 	beq	r10,r17,dde8 <_strtoull_r+0x22c>
    dcb8:	580b883a 	mov	r5,r11
    dcbc:	5009883a 	mov	r4,r10
    dcc0:	a80d883a 	mov	r6,r21
    dcc4:	b00f883a 	mov	r7,r22
    dcc8:	db000415 	stw	r12,16(sp)
    dccc:	000efac0 	call	efac <__muldi3>
    dcd0:	8013d7fa 	srai	r9,r16,31
    dcd4:	100d883a 	mov	r6,r2
    dcd8:	1405883a 	add	r2,r2,r16
    dcdc:	118d803a 	cmpltu	r6,r2,r6
    dce0:	1a47883a 	add	r3,r3,r9
    dce4:	db000417 	ldw	r12,16(sp)
    dce8:	30cd883a 	add	r6,r6,r3
    dcec:	3017883a 	mov	r11,r6
    dcf0:	1015883a 	mov	r10,r2
    dcf4:	01800044 	movi	r6,1
    dcf8:	9d000007 	ldb	r20,0(r19)
    dcfc:	9cc00044 	addi	r19,r19,1
    dd00:	e505883a 	add	r2,fp,r20
    dd04:	11000003 	ldbu	r4,0(r2)
    dd08:	20c0010c 	andi	r3,r4,4
    dd0c:	183fe41e 	bne	r3,zero,dca0 <_strtoull_r+0xe4>
    dd10:	208000cc 	andi	r2,r4,3
    dd14:	10000626 	beq	r2,zero,dd30 <_strtoull_r+0x174>
    dd18:	2080004c 	andi	r2,r4,1
    dd1c:	1005003a 	cmpeq	r2,r2,zero
    dd20:	10002e1e 	bne	r2,zero,dddc <_strtoull_r+0x220>
    dd24:	02000dc4 	movi	r8,55
    dd28:	a221c83a 	sub	r16,r20,r8
    dd2c:	85ffde16 	blt	r16,r23,dca8 <_strtoull_r+0xec>
    dd30:	3000530e 	bge	r6,zero,de80 <_strtoull_r+0x2c4>
    dd34:	d8c00117 	ldw	r3,4(sp)
    dd38:	02bfffc4 	movi	r10,-1
    dd3c:	00800884 	movi	r2,34
    dd40:	5017883a 	mov	r11,r10
    dd44:	18800015 	stw	r2,0(r3)
    dd48:	d8800317 	ldw	r2,12(sp)
    dd4c:	10000426 	beq	r2,zero,dd60 <_strtoull_r+0x1a4>
    dd50:	3000291e 	bne	r6,zero,ddf8 <_strtoull_r+0x23c>
    dd54:	d8800217 	ldw	r2,8(sp)
    dd58:	d8c00317 	ldw	r3,12(sp)
    dd5c:	18800015 	stw	r2,0(r3)
    dd60:	5005883a 	mov	r2,r10
    dd64:	5807883a 	mov	r3,r11
    dd68:	dfc00e17 	ldw	ra,56(sp)
    dd6c:	df000d17 	ldw	fp,52(sp)
    dd70:	ddc00c17 	ldw	r23,48(sp)
    dd74:	dd800b17 	ldw	r22,44(sp)
    dd78:	dd400a17 	ldw	r21,40(sp)
    dd7c:	dd000917 	ldw	r20,36(sp)
    dd80:	dcc00817 	ldw	r19,32(sp)
    dd84:	dc800717 	ldw	r18,28(sp)
    dd88:	dc400617 	ldw	r17,24(sp)
    dd8c:	dc000517 	ldw	r16,20(sp)
    dd90:	dec00f04 	addi	sp,sp,60
    dd94:	f800283a 	ret
    dd98:	8abfc62e 	bgeu	r17,r10,dcb4 <_strtoull_r+0xf8>
    dd9c:	01bfffc4 	movi	r6,-1
    dda0:	003fd506 	br	dcf8 <_strtoull_r+0x13c>
    dda4:	00800c04 	movi	r2,48
    dda8:	a0801e26 	beq	r20,r2,de24 <_strtoull_r+0x268>
    ddac:	183fa526 	beq	r3,zero,dc44 <_strtoull_r+0x88>
    ddb0:	00800c04 	movi	r2,48
    ddb4:	a0802a26 	beq	r20,r2,de60 <_strtoull_r+0x2a4>
    ddb8:	05c00284 	movi	r23,10
    ddbc:	b82b883a 	mov	r21,r23
    ddc0:	046666b4 	movhi	r17,39322
    ddc4:	8c666644 	addi	r17,r17,-26215
    ddc8:	002d883a 	mov	r22,zero
    ddcc:	048666b4 	movhi	r18,6554
    ddd0:	94a66644 	addi	r18,r18,-26215
    ddd4:	03000144 	movi	r12,5
    ddd8:	003faa06 	br	dc84 <_strtoull_r+0xc8>
    dddc:	020015c4 	movi	r8,87
    dde0:	a221c83a 	sub	r16,r20,r8
    dde4:	003fd106 	br	dd2c <_strtoull_r+0x170>
    dde8:	5cbfb31e 	bne	r11,r18,dcb8 <_strtoull_r+0xfc>
    ddec:	643fb20e 	bge	r12,r16,dcb8 <_strtoull_r+0xfc>
    ddf0:	01bfffc4 	movi	r6,-1
    ddf4:	003fc006 	br	dcf8 <_strtoull_r+0x13c>
    ddf8:	9cffffc4 	addi	r19,r19,-1
    ddfc:	dcc00215 	stw	r19,8(sp)
    de00:	003fd406 	br	dd54 <_strtoull_r+0x198>
    de04:	9d000007 	ldb	r20,0(r19)
    de08:	9cc00044 	addi	r19,r19,1
    de0c:	003f8806 	br	dc30 <_strtoull_r+0x74>
    de10:	9d000007 	ldb	r20,0(r19)
    de14:	00800044 	movi	r2,1
    de18:	9cc00044 	addi	r19,r19,1
    de1c:	d8800015 	stw	r2,0(sp)
    de20:	003f8406 	br	dc34 <_strtoull_r+0x78>
    de24:	99000007 	ldb	r4,0(r19)
    de28:	00801e04 	movi	r2,120
    de2c:	20800226 	beq	r4,r2,de38 <_strtoull_r+0x27c>
    de30:	00801604 	movi	r2,88
    de34:	20bfdd1e 	bne	r4,r2,ddac <_strtoull_r+0x1f0>
    de38:	9d000047 	ldb	r20,1(r19)
    de3c:	05c00404 	movi	r23,16
    de40:	b82b883a 	mov	r21,r23
    de44:	047fffc4 	movi	r17,-1
    de48:	9cc00084 	addi	r19,r19,2
    de4c:	002d883a 	mov	r22,zero
    de50:	04840034 	movhi	r18,4096
    de54:	94bfffc4 	addi	r18,r18,-1
    de58:	030003c4 	movi	r12,15
    de5c:	003f8906 	br	dc84 <_strtoull_r+0xc8>
    de60:	05c00204 	movi	r23,8
    de64:	b82b883a 	mov	r21,r23
    de68:	047fffc4 	movi	r17,-1
    de6c:	002d883a 	mov	r22,zero
    de70:	04880034 	movhi	r18,8192
    de74:	94bfffc4 	addi	r18,r18,-1
    de78:	030001c4 	movi	r12,7
    de7c:	003f8106 	br	dc84 <_strtoull_r+0xc8>
    de80:	d8c00017 	ldw	r3,0(sp)
    de84:	1805003a 	cmpeq	r2,r3,zero
    de88:	103faf1e 	bne	r2,zero,dd48 <_strtoull_r+0x18c>
    de8c:	0009883a 	mov	r4,zero
    de90:	2285c83a 	sub	r2,r4,r10
    de94:	02c7c83a 	sub	r3,zero,r11
    de98:	2089803a 	cmpltu	r4,r4,r2
    de9c:	1909c83a 	sub	r4,r3,r4
    dea0:	1015883a 	mov	r10,r2
    dea4:	2017883a 	mov	r11,r4
    dea8:	003fa706 	br	dd48 <_strtoull_r+0x18c>

0000deac <__submore>:
    deac:	defffa04 	addi	sp,sp,-24
    deb0:	28c00c17 	ldw	r3,48(r5)
    deb4:	dc800215 	stw	r18,8(sp)
    deb8:	2825883a 	mov	r18,r5
    debc:	dc000015 	stw	r16,0(sp)
    dec0:	90801004 	addi	r2,r18,64
    dec4:	04010004 	movi	r16,1024
    dec8:	dfc00515 	stw	ra,20(sp)
    decc:	dd000415 	stw	r20,16(sp)
    ded0:	dcc00315 	stw	r19,12(sp)
    ded4:	dc400115 	stw	r17,4(sp)
    ded8:	800b883a 	mov	r5,r16
    dedc:	18801b26 	beq	r3,r2,df4c <__submore+0xa0>
    dee0:	94400d17 	ldw	r17,52(r18)
    dee4:	180b883a 	mov	r5,r3
    dee8:	8c69883a 	add	r20,r17,r17
    deec:	a00d883a 	mov	r6,r20
    def0:	000b6500 	call	b650 <_realloc_r>
    def4:	1467883a 	add	r19,r2,r17
    def8:	1021883a 	mov	r16,r2
    defc:	880d883a 	mov	r6,r17
    df00:	9809883a 	mov	r4,r19
    df04:	100b883a 	mov	r5,r2
    df08:	10000e26 	beq	r2,zero,df44 <__submore+0x98>
    df0c:	00035c00 	call	35c0 <memcpy>
    df10:	000d883a 	mov	r6,zero
    df14:	95000d15 	stw	r20,52(r18)
    df18:	94c00015 	stw	r19,0(r18)
    df1c:	94000c15 	stw	r16,48(r18)
    df20:	3005883a 	mov	r2,r6
    df24:	dfc00517 	ldw	ra,20(sp)
    df28:	dd000417 	ldw	r20,16(sp)
    df2c:	dcc00317 	ldw	r19,12(sp)
    df30:	dc800217 	ldw	r18,8(sp)
    df34:	dc400117 	ldw	r17,4(sp)
    df38:	dc000017 	ldw	r16,0(sp)
    df3c:	dec00604 	addi	sp,sp,24
    df40:	f800283a 	ret
    df44:	01bfffc4 	movi	r6,-1
    df48:	003ff506 	br	df20 <__submore+0x74>
    df4c:	0002d9c0 	call	2d9c <_malloc_r>
    df50:	1009883a 	mov	r4,r2
    df54:	1140ff44 	addi	r5,r2,1021
    df58:	000d883a 	mov	r6,zero
    df5c:	103ff926 	beq	r2,zero,df44 <__submore+0x98>
    df60:	90801083 	ldbu	r2,66(r18)
    df64:	94000d15 	stw	r16,52(r18)
    df68:	91000c15 	stw	r4,48(r18)
    df6c:	28800085 	stb	r2,2(r5)
    df70:	90c01043 	ldbu	r3,65(r18)
    df74:	28c00045 	stb	r3,1(r5)
    df78:	90801003 	ldbu	r2,64(r18)
    df7c:	2080ff45 	stb	r2,1021(r4)
    df80:	91400015 	stw	r5,0(r18)
    df84:	003fe606 	br	df20 <__submore+0x74>

0000df88 <_ungetc_r>:
    df88:	defffc04 	addi	sp,sp,-16
    df8c:	00bfffc4 	movi	r2,-1
    df90:	dc400215 	stw	r17,8(sp)
    df94:	dc000115 	stw	r16,4(sp)
    df98:	dfc00315 	stw	ra,12(sp)
    df9c:	2821883a 	mov	r16,r5
    dfa0:	2023883a 	mov	r17,r4
    dfa4:	28801826 	beq	r5,r2,e008 <_ungetc_r+0x80>
    dfa8:	20000226 	beq	r4,zero,dfb4 <_ungetc_r+0x2c>
    dfac:	20800e17 	ldw	r2,56(r4)
    dfb0:	10001b26 	beq	r2,zero,e020 <_ungetc_r+0x98>
    dfb4:	3100030b 	ldhu	r4,12(r6)
    dfb8:	00bff7c4 	movi	r2,-33
    dfbc:	2084703a 	and	r2,r4,r2
    dfc0:	117fffcc 	andi	r5,r2,65535
    dfc4:	28c0010c 	andi	r3,r5,4
    dfc8:	1009883a 	mov	r4,r2
    dfcc:	3080030d 	sth	r2,12(r6)
    dfd0:	18003526 	beq	r3,zero,e0a8 <_ungetc_r+0x120>
    dfd4:	30800c17 	ldw	r2,48(r6)
    dfd8:	84003fcc 	andi	r16,r16,255
    dfdc:	10001426 	beq	r2,zero,e030 <_ungetc_r+0xa8>
    dfe0:	30c00117 	ldw	r3,4(r6)
    dfe4:	30800d17 	ldw	r2,52(r6)
    dfe8:	1880380e 	bge	r3,r2,e0cc <_ungetc_r+0x144>
    dfec:	30c00017 	ldw	r3,0(r6)
    dff0:	19ffffc4 	addi	r7,r3,-1
    dff4:	31c00015 	stw	r7,0(r6)
    dff8:	1c3fffc5 	stb	r16,-1(r3)
    dffc:	30800117 	ldw	r2,4(r6)
    e000:	10800044 	addi	r2,r2,1
    e004:	30800115 	stw	r2,4(r6)
    e008:	8005883a 	mov	r2,r16
    e00c:	dfc00317 	ldw	ra,12(sp)
    e010:	dc400217 	ldw	r17,8(sp)
    e014:	dc000117 	ldw	r16,4(sp)
    e018:	dec00404 	addi	sp,sp,16
    e01c:	f800283a 	ret
    e020:	d9800015 	stw	r6,0(sp)
    e024:	00029c40 	call	29c4 <__sinit>
    e028:	d9800017 	ldw	r6,0(sp)
    e02c:	003fe106 	br	dfb4 <_ungetc_r+0x2c>
    e030:	30800417 	ldw	r2,16(r6)
    e034:	10002326 	beq	r2,zero,e0c4 <_ungetc_r+0x13c>
    e038:	31c00017 	ldw	r7,0(r6)
    e03c:	11c0022e 	bgeu	r2,r7,e048 <_ungetc_r+0xc0>
    e040:	38bfffc3 	ldbu	r2,-1(r7)
    e044:	80801226 	beq	r16,r2,e090 <_ungetc_r+0x108>
    e048:	30c00117 	ldw	r3,4(r6)
    e04c:	00800044 	movi	r2,1
    e050:	30800115 	stw	r2,4(r6)
    e054:	008000c4 	movi	r2,3
    e058:	31001004 	addi	r4,r6,64
    e05c:	31401084 	addi	r5,r6,66
    e060:	30800d15 	stw	r2,52(r6)
    e064:	8005883a 	mov	r2,r16
    e068:	30c00f15 	stw	r3,60(r6)
    e06c:	31c00e15 	stw	r7,56(r6)
    e070:	31000c15 	stw	r4,48(r6)
    e074:	31400015 	stw	r5,0(r6)
    e078:	34001085 	stb	r16,66(r6)
    e07c:	dfc00317 	ldw	ra,12(sp)
    e080:	dc400217 	ldw	r17,8(sp)
    e084:	dc000117 	ldw	r16,4(sp)
    e088:	dec00404 	addi	sp,sp,16
    e08c:	f800283a 	ret
    e090:	30800117 	ldw	r2,4(r6)
    e094:	39ffffc4 	addi	r7,r7,-1
    e098:	31c00015 	stw	r7,0(r6)
    e09c:	10800044 	addi	r2,r2,1
    e0a0:	30800115 	stw	r2,4(r6)
    e0a4:	003fd806 	br	e008 <_ungetc_r+0x80>
    e0a8:	2880040c 	andi	r2,r5,16
    e0ac:	10000d26 	beq	r2,zero,e0e4 <_ungetc_r+0x15c>
    e0b0:	2880020c 	andi	r2,r5,8
    e0b4:	10000d1e 	bne	r2,zero,e0ec <_ungetc_r+0x164>
    e0b8:	20800114 	ori	r2,r4,4
    e0bc:	3080030d 	sth	r2,12(r6)
    e0c0:	003fc406 	br	dfd4 <_ungetc_r+0x4c>
    e0c4:	31c00017 	ldw	r7,0(r6)
    e0c8:	003fdf06 	br	e048 <_ungetc_r+0xc0>
    e0cc:	300b883a 	mov	r5,r6
    e0d0:	8809883a 	mov	r4,r17
    e0d4:	d9800015 	stw	r6,0(sp)
    e0d8:	000deac0 	call	deac <__submore>
    e0dc:	d9800017 	ldw	r6,0(sp)
    e0e0:	103fc226 	beq	r2,zero,dfec <_ungetc_r+0x64>
    e0e4:	043fffc4 	movi	r16,-1
    e0e8:	003fc706 	br	e008 <_ungetc_r+0x80>
    e0ec:	300b883a 	mov	r5,r6
    e0f0:	8809883a 	mov	r4,r17
    e0f4:	d9800015 	stw	r6,0(sp)
    e0f8:	00091d40 	call	91d4 <_fflush_r>
    e0fc:	d9800017 	ldw	r6,0(sp)
    e100:	103ff81e 	bne	r2,zero,e0e4 <_ungetc_r+0x15c>
    e104:	3100030b 	ldhu	r4,12(r6)
    e108:	00bffdc4 	movi	r2,-9
    e10c:	30000215 	stw	zero,8(r6)
    e110:	2084703a 	and	r2,r4,r2
    e114:	1009883a 	mov	r4,r2
    e118:	3080030d 	sth	r2,12(r6)
    e11c:	30000615 	stw	zero,24(r6)
    e120:	003fe506 	br	e0b8 <_ungetc_r+0x130>

0000e124 <ungetc>:
    e124:	01800074 	movhi	r6,1
    e128:	319a7d04 	addi	r6,r6,27124
    e12c:	2007883a 	mov	r3,r4
    e130:	31000017 	ldw	r4,0(r6)
    e134:	280d883a 	mov	r6,r5
    e138:	180b883a 	mov	r5,r3
    e13c:	000df881 	jmpi	df88 <_ungetc_r>

0000e140 <__swbuf_r>:
    e140:	defffc04 	addi	sp,sp,-16
    e144:	dc400215 	stw	r17,8(sp)
    e148:	dc000115 	stw	r16,4(sp)
    e14c:	dfc00315 	stw	ra,12(sp)
    e150:	2023883a 	mov	r17,r4
    e154:	2821883a 	mov	r16,r5
    e158:	20000226 	beq	r4,zero,e164 <__swbuf_r+0x24>
    e15c:	20800e17 	ldw	r2,56(r4)
    e160:	10002f26 	beq	r2,zero,e220 <__swbuf_r+0xe0>
    e164:	3080030b 	ldhu	r2,12(r6)
    e168:	30c00617 	ldw	r3,24(r6)
    e16c:	1080020c 	andi	r2,r2,8
    e170:	30c00215 	stw	r3,8(r6)
    e174:	10002226 	beq	r2,zero,e200 <__swbuf_r+0xc0>
    e178:	30c00417 	ldw	r3,16(r6)
    e17c:	18002026 	beq	r3,zero,e200 <__swbuf_r+0xc0>
    e180:	31000017 	ldw	r4,0(r6)
    e184:	30800517 	ldw	r2,20(r6)
    e188:	20c7c83a 	sub	r3,r4,r3
    e18c:	18802f0e 	bge	r3,r2,e24c <__swbuf_r+0x10c>
    e190:	19400044 	addi	r5,r3,1
    e194:	30800217 	ldw	r2,8(r6)
    e198:	84003fcc 	andi	r16,r16,255
    e19c:	20c00044 	addi	r3,r4,1
    e1a0:	10bfffc4 	addi	r2,r2,-1
    e1a4:	30800215 	stw	r2,8(r6)
    e1a8:	24000005 	stb	r16,0(r4)
    e1ac:	30800517 	ldw	r2,20(r6)
    e1b0:	30c00015 	stw	r3,0(r6)
    e1b4:	11400c26 	beq	r2,r5,e1e8 <__swbuf_r+0xa8>
    e1b8:	3080030b 	ldhu	r2,12(r6)
    e1bc:	1080004c 	andi	r2,r2,1
    e1c0:	1005003a 	cmpeq	r2,r2,zero
    e1c4:	10000626 	beq	r2,zero,e1e0 <__swbuf_r+0xa0>
    e1c8:	8005883a 	mov	r2,r16
    e1cc:	dfc00317 	ldw	ra,12(sp)
    e1d0:	dc400217 	ldw	r17,8(sp)
    e1d4:	dc000117 	ldw	r16,4(sp)
    e1d8:	dec00404 	addi	sp,sp,16
    e1dc:	f800283a 	ret
    e1e0:	00800284 	movi	r2,10
    e1e4:	80bff81e 	bne	r16,r2,e1c8 <__swbuf_r+0x88>
    e1e8:	8809883a 	mov	r4,r17
    e1ec:	300b883a 	mov	r5,r6
    e1f0:	00091d40 	call	91d4 <_fflush_r>
    e1f4:	103ff426 	beq	r2,zero,e1c8 <__swbuf_r+0x88>
    e1f8:	043fffc4 	movi	r16,-1
    e1fc:	003ff206 	br	e1c8 <__swbuf_r+0x88>
    e200:	300b883a 	mov	r5,r6
    e204:	8809883a 	mov	r4,r17
    e208:	d9800015 	stw	r6,0(sp)
    e20c:	00077380 	call	7738 <__swsetup_r>
    e210:	d9800017 	ldw	r6,0(sp)
    e214:	1000061e 	bne	r2,zero,e230 <__swbuf_r+0xf0>
    e218:	30c00417 	ldw	r3,16(r6)
    e21c:	003fd806 	br	e180 <__swbuf_r+0x40>
    e220:	d9800015 	stw	r6,0(sp)
    e224:	00029c40 	call	29c4 <__sinit>
    e228:	d9800017 	ldw	r6,0(sp)
    e22c:	003fcd06 	br	e164 <__swbuf_r+0x24>
    e230:	3080030b 	ldhu	r2,12(r6)
    e234:	00c00244 	movi	r3,9
    e238:	043fffc4 	movi	r16,-1
    e23c:	10801014 	ori	r2,r2,64
    e240:	3080030d 	sth	r2,12(r6)
    e244:	88c00015 	stw	r3,0(r17)
    e248:	003fdf06 	br	e1c8 <__swbuf_r+0x88>
    e24c:	300b883a 	mov	r5,r6
    e250:	8809883a 	mov	r4,r17
    e254:	d9800015 	stw	r6,0(sp)
    e258:	00091d40 	call	91d4 <_fflush_r>
    e25c:	d9800017 	ldw	r6,0(sp)
    e260:	103fe51e 	bne	r2,zero,e1f8 <__swbuf_r+0xb8>
    e264:	31000017 	ldw	r4,0(r6)
    e268:	01400044 	movi	r5,1
    e26c:	003fc906 	br	e194 <__swbuf_r+0x54>

0000e270 <__swbuf>:
    e270:	01800074 	movhi	r6,1
    e274:	319a7d04 	addi	r6,r6,27124
    e278:	2007883a 	mov	r3,r4
    e27c:	31000017 	ldw	r4,0(r6)
    e280:	280d883a 	mov	r6,r5
    e284:	180b883a 	mov	r5,r3
    e288:	000e1401 	jmpi	e140 <__swbuf_r>

0000e28c <_calloc_r>:
    e28c:	298b383a 	mul	r5,r5,r6
    e290:	defffe04 	addi	sp,sp,-8
    e294:	dc000015 	stw	r16,0(sp)
    e298:	dfc00115 	stw	ra,4(sp)
    e29c:	0002d9c0 	call	2d9c <_malloc_r>
    e2a0:	1021883a 	mov	r16,r2
    e2a4:	01c00904 	movi	r7,36
    e2a8:	10000d26 	beq	r2,zero,e2e0 <_calloc_r+0x54>
    e2ac:	10ffff17 	ldw	r3,-4(r2)
    e2b0:	1009883a 	mov	r4,r2
    e2b4:	00bfff04 	movi	r2,-4
    e2b8:	1886703a 	and	r3,r3,r2
    e2bc:	1887883a 	add	r3,r3,r2
    e2c0:	180d883a 	mov	r6,r3
    e2c4:	000b883a 	mov	r5,zero
    e2c8:	38c01736 	bltu	r7,r3,e328 <_calloc_r+0x9c>
    e2cc:	008004c4 	movi	r2,19
    e2d0:	10c00836 	bltu	r2,r3,e2f4 <_calloc_r+0x68>
    e2d4:	20000215 	stw	zero,8(r4)
    e2d8:	20000015 	stw	zero,0(r4)
    e2dc:	20000115 	stw	zero,4(r4)
    e2e0:	8005883a 	mov	r2,r16
    e2e4:	dfc00117 	ldw	ra,4(sp)
    e2e8:	dc000017 	ldw	r16,0(sp)
    e2ec:	dec00204 	addi	sp,sp,8
    e2f0:	f800283a 	ret
    e2f4:	008006c4 	movi	r2,27
    e2f8:	80000015 	stw	zero,0(r16)
    e2fc:	80000115 	stw	zero,4(r16)
    e300:	81000204 	addi	r4,r16,8
    e304:	10fff32e 	bgeu	r2,r3,e2d4 <_calloc_r+0x48>
    e308:	80000215 	stw	zero,8(r16)
    e30c:	80000315 	stw	zero,12(r16)
    e310:	81000404 	addi	r4,r16,16
    e314:	19ffef1e 	bne	r3,r7,e2d4 <_calloc_r+0x48>
    e318:	81000604 	addi	r4,r16,24
    e31c:	80000415 	stw	zero,16(r16)
    e320:	80000515 	stw	zero,20(r16)
    e324:	003feb06 	br	e2d4 <_calloc_r+0x48>
    e328:	00036600 	call	3660 <memset>
    e32c:	8005883a 	mov	r2,r16
    e330:	dfc00117 	ldw	ra,4(sp)
    e334:	dc000017 	ldw	r16,0(sp)
    e338:	dec00204 	addi	sp,sp,8
    e33c:	f800283a 	ret

0000e340 <_fstat_r>:
    e340:	defffd04 	addi	sp,sp,-12
    e344:	dc000015 	stw	r16,0(sp)
    e348:	040000b4 	movhi	r16,2
    e34c:	84214e04 	addi	r16,r16,-31432
    e350:	dc400115 	stw	r17,4(sp)
    e354:	80000015 	stw	zero,0(r16)
    e358:	2023883a 	mov	r17,r4
    e35c:	2809883a 	mov	r4,r5
    e360:	300b883a 	mov	r5,r6
    e364:	dfc00215 	stw	ra,8(sp)
    e368:	0011a1c0 	call	11a1c <fstat>
    e36c:	1007883a 	mov	r3,r2
    e370:	00bfffc4 	movi	r2,-1
    e374:	18800626 	beq	r3,r2,e390 <_fstat_r+0x50>
    e378:	1805883a 	mov	r2,r3
    e37c:	dfc00217 	ldw	ra,8(sp)
    e380:	dc400117 	ldw	r17,4(sp)
    e384:	dc000017 	ldw	r16,0(sp)
    e388:	dec00304 	addi	sp,sp,12
    e38c:	f800283a 	ret
    e390:	80800017 	ldw	r2,0(r16)
    e394:	103ff826 	beq	r2,zero,e378 <_fstat_r+0x38>
    e398:	88800015 	stw	r2,0(r17)
    e39c:	1805883a 	mov	r2,r3
    e3a0:	dfc00217 	ldw	ra,8(sp)
    e3a4:	dc400117 	ldw	r17,4(sp)
    e3a8:	dc000017 	ldw	r16,0(sp)
    e3ac:	dec00304 	addi	sp,sp,12
    e3b0:	f800283a 	ret

0000e3b4 <htinit>:
    e3b4:	28800003 	ldbu	r2,0(r5)
    e3b8:	10000626 	beq	r2,zero,e3d4 <htinit+0x20>
    e3bc:	1105883a 	add	r2,r2,r4
    e3c0:	11800005 	stb	r6,0(r2)
    e3c4:	28800043 	ldbu	r2,1(r5)
    e3c8:	31800044 	addi	r6,r6,1
    e3cc:	29400044 	addi	r5,r5,1
    e3d0:	103ffa1e 	bne	r2,zero,e3bc <htinit+0x8>
    e3d4:	f800283a 	ret

0000e3d8 <__hexdig_init>:
    e3d8:	defffd04 	addi	sp,sp,-12
    e3dc:	dc400015 	stw	r17,0(sp)
    e3e0:	044000b4 	movhi	r17,2
    e3e4:	8c619304 	addi	r17,r17,-31156
    e3e8:	dcc00115 	stw	r19,4(sp)
    e3ec:	8809883a 	mov	r4,r17
    e3f0:	04c00684 	movi	r19,26
    e3f4:	01400074 	movhi	r5,1
    e3f8:	29537704 	addi	r5,r5,19932
    e3fc:	01800404 	movi	r6,16
    e400:	dfc00215 	stw	ra,8(sp)
    e404:	000e3b40 	call	e3b4 <htinit>
    e408:	980d883a 	mov	r6,r19
    e40c:	8809883a 	mov	r4,r17
    e410:	01400074 	movhi	r5,1
    e414:	29537a04 	addi	r5,r5,19944
    e418:	000e3b40 	call	e3b4 <htinit>
    e41c:	8809883a 	mov	r4,r17
    e420:	980d883a 	mov	r6,r19
    e424:	01400074 	movhi	r5,1
    e428:	29537c04 	addi	r5,r5,19952
    e42c:	dfc00217 	ldw	ra,8(sp)
    e430:	dcc00117 	ldw	r19,4(sp)
    e434:	dc400017 	ldw	r17,0(sp)
    e438:	dec00304 	addi	sp,sp,12
    e43c:	000e3b41 	jmpi	e3b4 <htinit>

0000e440 <rshift>:
    e440:	2807d17a 	srai	r3,r5,5
    e444:	20800417 	ldw	r2,16(r4)
    e448:	22400504 	addi	r9,r4,20
    e44c:	480f883a 	mov	r7,r9
    e450:	1880190e 	bge	r3,r2,e4b8 <rshift+0x78>
    e454:	1085883a 	add	r2,r2,r2
    e458:	18c7883a 	add	r3,r3,r3
    e45c:	1085883a 	add	r2,r2,r2
    e460:	18c7883a 	add	r3,r3,r3
    e464:	294007cc 	andi	r5,r5,31
    e468:	4891883a 	add	r8,r9,r2
    e46c:	48cd883a 	add	r6,r9,r3
    e470:	28001726 	beq	r5,zero,e4d0 <rshift+0x90>
    e474:	30c00017 	ldw	r3,0(r6)
    e478:	00800804 	movi	r2,32
    e47c:	31800104 	addi	r6,r6,4
    e480:	1155c83a 	sub	r10,r2,r5
    e484:	1946d83a 	srl	r3,r3,r5
    e488:	3200092e 	bgeu	r6,r8,e4b0 <rshift+0x70>
    e48c:	30800017 	ldw	r2,0(r6)
    e490:	1284983a 	sll	r2,r2,r10
    e494:	10c4b03a 	or	r2,r2,r3
    e498:	38800015 	stw	r2,0(r7)
    e49c:	30c00017 	ldw	r3,0(r6)
    e4a0:	31800104 	addi	r6,r6,4
    e4a4:	39c00104 	addi	r7,r7,4
    e4a8:	1946d83a 	srl	r3,r3,r5
    e4ac:	323ff736 	bltu	r6,r8,e48c <rshift+0x4c>
    e4b0:	38c00015 	stw	r3,0(r7)
    e4b4:	18000c1e 	bne	r3,zero,e4e8 <rshift+0xa8>
    e4b8:	3a45c83a 	sub	r2,r7,r9
    e4bc:	1005d0ba 	srai	r2,r2,2
    e4c0:	20800415 	stw	r2,16(r4)
    e4c4:	1000011e 	bne	r2,zero,e4cc <rshift+0x8c>
    e4c8:	20000515 	stw	zero,20(r4)
    e4cc:	f800283a 	ret
    e4d0:	323ff92e 	bgeu	r6,r8,e4b8 <rshift+0x78>
    e4d4:	30800017 	ldw	r2,0(r6)
    e4d8:	31800104 	addi	r6,r6,4
    e4dc:	38800015 	stw	r2,0(r7)
    e4e0:	39c00104 	addi	r7,r7,4
    e4e4:	003ffa06 	br	e4d0 <rshift+0x90>
    e4e8:	39c00104 	addi	r7,r7,4
    e4ec:	003ff206 	br	e4b8 <rshift+0x78>

0000e4f0 <__gethex>:
    e4f0:	defff304 	addi	sp,sp,-52
    e4f4:	dd400815 	stw	r21,32(sp)
    e4f8:	dd000715 	stw	r20,28(sp)
    e4fc:	dcc00615 	stw	r19,24(sp)
    e500:	dc400415 	stw	r17,16(sp)
    e504:	dfc00c15 	stw	ra,48(sp)
    e508:	df000b15 	stw	fp,44(sp)
    e50c:	ddc00a15 	stw	r23,40(sp)
    e510:	dd800915 	stw	r22,36(sp)
    e514:	dc800515 	stw	r18,20(sp)
    e518:	dc000315 	stw	r16,12(sp)
    e51c:	044000b4 	movhi	r17,2
    e520:	8c619304 	addi	r17,r17,-31156
    e524:	88800c03 	ldbu	r2,48(r17)
    e528:	202b883a 	mov	r21,r4
    e52c:	2827883a 	mov	r19,r5
    e530:	3029883a 	mov	r20,r6
    e534:	d9c00115 	stw	r7,4(sp)
    e538:	10006e26 	beq	r2,zero,e6f4 <__gethex+0x204>
    e53c:	99800017 	ldw	r6,0(r19)
    e540:	00800c04 	movi	r2,48
    e544:	31000083 	ldbu	r4,2(r6)
    e548:	30c00084 	addi	r3,r6,2
    e54c:	20806f1e 	bne	r4,r2,e70c <__gethex+0x21c>
    e550:	200b883a 	mov	r5,r4
    e554:	3007883a 	mov	r3,r6
    e558:	188000c3 	ldbu	r2,3(r3)
    e55c:	18c00044 	addi	r3,r3,1
    e560:	1009883a 	mov	r4,r2
    e564:	117ffc26 	beq	r2,r5,e558 <__gethex+0x68>
    e568:	1997c83a 	sub	r11,r3,r6
    e56c:	19400084 	addi	r5,r3,2
    e570:	2445883a 	add	r2,r4,r17
    e574:	10c00003 	ldbu	r3,0(r2)
    e578:	18002d26 	beq	r3,zero,e630 <__gethex+0x140>
    e57c:	29000003 	ldbu	r4,0(r5)
    e580:	2825883a 	mov	r18,r5
    e584:	000d883a 	mov	r6,zero
    e588:	0013883a 	mov	r9,zero
    e58c:	21003fcc 	andi	r4,r4,255
    e590:	2445883a 	add	r2,r4,r17
    e594:	10c00003 	ldbu	r3,0(r2)
    e598:	18000526 	beq	r3,zero,e5b0 <__gethex+0xc0>
    e59c:	29400044 	addi	r5,r5,1
    e5a0:	29000003 	ldbu	r4,0(r5)
    e5a4:	2445883a 	add	r2,r4,r17
    e5a8:	10c00003 	ldbu	r3,0(r2)
    e5ac:	183ffb1e 	bne	r3,zero,e59c <__gethex+0xac>
    e5b0:	00800b84 	movi	r2,46
    e5b4:	20805826 	beq	r4,r2,e718 <__gethex+0x228>
    e5b8:	30007a26 	beq	r6,zero,e7a4 <__gethex+0x2b4>
    e5bc:	2985c83a 	sub	r2,r5,r6
    e5c0:	1085883a 	add	r2,r2,r2
    e5c4:	1085883a 	add	r2,r2,r2
    e5c8:	00adc83a 	sub	r22,zero,r2
    e5cc:	2821883a 	mov	r16,r5
    e5d0:	80c00003 	ldbu	r3,0(r16)
    e5d4:	00801404 	movi	r2,80
    e5d8:	18801e26 	beq	r3,r2,e654 <__gethex+0x164>
    e5dc:	00801c04 	movi	r2,112
    e5e0:	18801c26 	beq	r3,r2,e654 <__gethex+0x164>
    e5e4:	800d883a 	mov	r6,r16
    e5e8:	4805003a 	cmpeq	r2,r9,zero
    e5ec:	99800015 	stw	r6,0(r19)
    e5f0:	1000861e 	bne	r2,zero,e80c <__gethex+0x31c>
    e5f4:	58003d26 	beq	r11,zero,e6ec <__gethex+0x1fc>
    e5f8:	0025883a 	mov	r18,zero
    e5fc:	9005883a 	mov	r2,r18
    e600:	dfc00c17 	ldw	ra,48(sp)
    e604:	df000b17 	ldw	fp,44(sp)
    e608:	ddc00a17 	ldw	r23,40(sp)
    e60c:	dd800917 	ldw	r22,36(sp)
    e610:	dd400817 	ldw	r21,32(sp)
    e614:	dd000717 	ldw	r20,28(sp)
    e618:	dcc00617 	ldw	r19,24(sp)
    e61c:	dc800517 	ldw	r18,20(sp)
    e620:	dc400417 	ldw	r17,16(sp)
    e624:	dc000317 	ldw	r16,12(sp)
    e628:	dec00d04 	addi	sp,sp,52
    e62c:	f800283a 	ret
    e630:	00800b84 	movi	r2,46
    e634:	20804a26 	beq	r4,r2,e760 <__gethex+0x270>
    e638:	2821883a 	mov	r16,r5
    e63c:	80c00003 	ldbu	r3,0(r16)
    e640:	00801404 	movi	r2,80
    e644:	2825883a 	mov	r18,r5
    e648:	02400044 	movi	r9,1
    e64c:	002d883a 	mov	r22,zero
    e650:	18bfe21e 	bne	r3,r2,e5dc <__gethex+0xec>
    e654:	80c00043 	ldbu	r3,1(r16)
    e658:	00800ac4 	movi	r2,43
    e65c:	81000044 	addi	r4,r16,1
    e660:	18804a26 	beq	r3,r2,e78c <__gethex+0x29c>
    e664:	00800b44 	movi	r2,45
    e668:	18804c26 	beq	r3,r2,e79c <__gethex+0x2ac>
    e66c:	0015883a 	mov	r10,zero
    e670:	1c45883a 	add	r2,r3,r17
    e674:	10800003 	ldbu	r2,0(r2)
    e678:	103fda26 	beq	r2,zero,e5e4 <__gethex+0xf4>
    e67c:	02000644 	movi	r8,25
    e680:	40bfd816 	blt	r8,r2,e5e4 <__gethex+0xf4>
    e684:	20c00043 	ldbu	r3,1(r4)
    e688:	11fffc04 	addi	r7,r2,-16
    e68c:	008000b4 	movhi	r2,2
    e690:	10a19304 	addi	r2,r2,-31156
    e694:	1887883a 	add	r3,r3,r2
    e698:	18800003 	ldbu	r2,0(r3)
    e69c:	21800044 	addi	r6,r4,1
    e6a0:	10000d26 	beq	r2,zero,e6d8 <__gethex+0x1e8>
    e6a4:	100b883a 	mov	r5,r2
    e6a8:	4080020e 	bge	r8,r2,e6b4 <__gethex+0x1c4>
    e6ac:	00000a06 	br	e6d8 <__gethex+0x1e8>
    e6b0:	41000916 	blt	r8,r4,e6d8 <__gethex+0x1e8>
    e6b4:	31800044 	addi	r6,r6,1
    e6b8:	30800003 	ldbu	r2,0(r6)
    e6bc:	38c002a4 	muli	r3,r7,10
    e6c0:	1445883a 	add	r2,r2,r17
    e6c4:	11000003 	ldbu	r4,0(r2)
    e6c8:	1947883a 	add	r3,r3,r5
    e6cc:	19fffc04 	addi	r7,r3,-16
    e6d0:	200b883a 	mov	r5,r4
    e6d4:	203ff61e 	bne	r4,zero,e6b0 <__gethex+0x1c0>
    e6d8:	5005003a 	cmpeq	r2,r10,zero
    e6dc:	1000011e 	bne	r2,zero,e6e4 <__gethex+0x1f4>
    e6e0:	01cfc83a 	sub	r7,zero,r7
    e6e4:	b1ed883a 	add	r22,r22,r7
    e6e8:	003fbf06 	br	e5e8 <__gethex+0xf8>
    e6ec:	04800184 	movi	r18,6
    e6f0:	003fc206 	br	e5fc <__gethex+0x10c>
    e6f4:	000e3d80 	call	e3d8 <__hexdig_init>
    e6f8:	99800017 	ldw	r6,0(r19)
    e6fc:	00800c04 	movi	r2,48
    e700:	31000083 	ldbu	r4,2(r6)
    e704:	30c00084 	addi	r3,r6,2
    e708:	20bf9126 	beq	r4,r2,e550 <__gethex+0x60>
    e70c:	180b883a 	mov	r5,r3
    e710:	0017883a 	mov	r11,zero
    e714:	003f9606 	br	e570 <__gethex+0x80>
    e718:	303fa81e 	bne	r6,zero,e5bc <__gethex+0xcc>
    e71c:	29400044 	addi	r5,r5,1
    e720:	28800003 	ldbu	r2,0(r5)
    e724:	1445883a 	add	r2,r2,r17
    e728:	10c00003 	ldbu	r3,0(r2)
    e72c:	1800ad26 	beq	r3,zero,e9e4 <__gethex+0x4f4>
    e730:	2809883a 	mov	r4,r5
    e734:	21000044 	addi	r4,r4,1
    e738:	20800003 	ldbu	r2,0(r4)
    e73c:	1445883a 	add	r2,r2,r17
    e740:	10c00003 	ldbu	r3,0(r2)
    e744:	183ffb1e 	bne	r3,zero,e734 <__gethex+0x244>
    e748:	2145c83a 	sub	r2,r4,r5
    e74c:	1085883a 	add	r2,r2,r2
    e750:	1085883a 	add	r2,r2,r2
    e754:	00adc83a 	sub	r22,zero,r2
    e758:	200b883a 	mov	r5,r4
    e75c:	003f9b06 	br	e5cc <__gethex+0xdc>
    e760:	29000043 	ldbu	r4,1(r5)
    e764:	008000b4 	movhi	r2,2
    e768:	10a19304 	addi	r2,r2,-31156
    e76c:	2c000044 	addi	r16,r5,1
    e770:	2085883a 	add	r2,r4,r2
    e774:	10c00003 	ldbu	r3,0(r2)
    e778:	18000d1e 	bne	r3,zero,e7b0 <__gethex+0x2c0>
    e77c:	2825883a 	mov	r18,r5
    e780:	02400044 	movi	r9,1
    e784:	002d883a 	mov	r22,zero
    e788:	003f9106 	br	e5d0 <__gethex+0xe0>
    e78c:	0015883a 	mov	r10,zero
    e790:	21000044 	addi	r4,r4,1
    e794:	20c00003 	ldbu	r3,0(r4)
    e798:	003fb506 	br	e670 <__gethex+0x180>
    e79c:	02800044 	movi	r10,1
    e7a0:	003ffb06 	br	e790 <__gethex+0x2a0>
    e7a4:	2821883a 	mov	r16,r5
    e7a8:	002d883a 	mov	r22,zero
    e7ac:	003f8806 	br	e5d0 <__gethex+0xe0>
    e7b0:	00800c04 	movi	r2,48
    e7b4:	20800e1e 	bne	r4,r2,e7f0 <__gethex+0x300>
    e7b8:	2007883a 	mov	r3,r4
    e7bc:	800b883a 	mov	r5,r16
    e7c0:	29400044 	addi	r5,r5,1
    e7c4:	29000003 	ldbu	r4,0(r5)
    e7c8:	20803fcc 	andi	r2,r4,255
    e7cc:	10fffc26 	beq	r2,r3,e7c0 <__gethex+0x2d0>
    e7d0:	1445883a 	add	r2,r2,r17
    e7d4:	10c00003 	ldbu	r3,0(r2)
    e7d8:	1800071e 	bne	r3,zero,e7f8 <__gethex+0x308>
    e7dc:	02c00044 	movi	r11,1
    e7e0:	800d883a 	mov	r6,r16
    e7e4:	2825883a 	mov	r18,r5
    e7e8:	5813883a 	mov	r9,r11
    e7ec:	003f6706 	br	e58c <__gethex+0x9c>
    e7f0:	81000003 	ldbu	r4,0(r16)
    e7f4:	800b883a 	mov	r5,r16
    e7f8:	800d883a 	mov	r6,r16
    e7fc:	2825883a 	mov	r18,r5
    e800:	02c00044 	movi	r11,1
    e804:	0013883a 	mov	r9,zero
    e808:	003f6006 	br	e58c <__gethex+0x9c>
    e80c:	8485c83a 	sub	r2,r16,r18
    e810:	10bfffc4 	addi	r2,r2,-1
    e814:	00c001c4 	movi	r3,7
    e818:	1880700e 	bge	r3,r2,e9dc <__gethex+0x4ec>
    e81c:	000b883a 	mov	r5,zero
    e820:	1005d07a 	srai	r2,r2,1
    e824:	29400044 	addi	r5,r5,1
    e828:	18bffd16 	blt	r3,r2,e820 <__gethex+0x330>
    e82c:	a809883a 	mov	r4,r21
    e830:	000a9780 	call	a978 <_Balloc>
    e834:	1027883a 	mov	r19,r2
    e838:	10800504 	addi	r2,r2,20
    e83c:	d8800215 	stw	r2,8(sp)
    e840:	9400522e 	bgeu	r18,r16,e98c <__gethex+0x49c>
    e844:	da000217 	ldw	r8,8(sp)
    e848:	800b883a 	mov	r5,r16
    e84c:	000f883a 	mov	r7,zero
    e850:	0009883a 	mov	r4,zero
    e854:	02400b84 	movi	r9,46
    e858:	02800804 	movi	r10,32
    e85c:	297fffc4 	addi	r5,r5,-1
    e860:	28c00003 	ldbu	r3,0(r5)
    e864:	1a400826 	beq	r3,r9,e888 <__gethex+0x398>
    e868:	380d883a 	mov	r6,r7
    e86c:	3a802726 	beq	r7,r10,e90c <__gethex+0x41c>
    e870:	39c00104 	addi	r7,r7,4
    e874:	1c47883a 	add	r3,r3,r17
    e878:	18800003 	ldbu	r2,0(r3)
    e87c:	108003cc 	andi	r2,r2,15
    e880:	1184983a 	sll	r2,r2,r6
    e884:	2088b03a 	or	r4,r4,r2
    e888:	917ff436 	bltu	r18,r5,e85c <__gethex+0x36c>
    e88c:	d8c00217 	ldw	r3,8(sp)
    e890:	40800104 	addi	r2,r8,4
    e894:	41000015 	stw	r4,0(r8)
    e898:	10c5c83a 	sub	r2,r2,r3
    e89c:	1021d0ba 	srai	r16,r2,2
    e8a0:	9c000415 	stw	r16,16(r19)
    e8a4:	000a4200 	call	a420 <__hi0bits>
    e8a8:	8006917a 	slli	r3,r16,5
    e8ac:	a5c00017 	ldw	r23,0(r20)
    e8b0:	1885c83a 	sub	r2,r3,r2
    e8b4:	b8801c16 	blt	r23,r2,e928 <__gethex+0x438>
    e8b8:	15c00a16 	blt	r2,r23,e8e4 <__gethex+0x3f4>
    e8bc:	0039883a 	mov	fp,zero
    e8c0:	a0800217 	ldw	r2,8(r20)
    e8c4:	1580340e 	bge	r2,r22,e998 <__gethex+0x4a8>
    e8c8:	a809883a 	mov	r4,r21
    e8cc:	980b883a 	mov	r5,r19
    e8d0:	000a3f80 	call	a3f8 <_Bfree>
    e8d4:	d8c00d17 	ldw	r3,52(sp)
    e8d8:	048028c4 	movi	r18,163
    e8dc:	18000015 	stw	zero,0(r3)
    e8e0:	003f4606 	br	e5fc <__gethex+0x10c>
    e8e4:	b8a1c83a 	sub	r16,r23,r2
    e8e8:	980b883a 	mov	r5,r19
    e8ec:	a809883a 	mov	r4,r21
    e8f0:	800d883a 	mov	r6,r16
    e8f4:	000ad3c0 	call	ad3c <__lshift>
    e8f8:	1027883a 	mov	r19,r2
    e8fc:	b42dc83a 	sub	r22,r22,r16
    e900:	10800504 	addi	r2,r2,20
    e904:	d8800215 	stw	r2,8(sp)
    e908:	003fec06 	br	e8bc <__gethex+0x3cc>
    e90c:	41000015 	stw	r4,0(r8)
    e910:	28c00003 	ldbu	r3,0(r5)
    e914:	01c00104 	movi	r7,4
    e918:	000d883a 	mov	r6,zero
    e91c:	41d1883a 	add	r8,r8,r7
    e920:	0009883a 	mov	r4,zero
    e924:	003fd306 	br	e874 <__gethex+0x384>
    e928:	15e1c83a 	sub	r16,r2,r23
    e92c:	9809883a 	mov	r4,r19
    e930:	800b883a 	mov	r5,r16
    e934:	000a8f00 	call	a8f0 <__any_on>
    e938:	1000061e 	bne	r2,zero,e954 <__gethex+0x464>
    e93c:	0039883a 	mov	fp,zero
    e940:	9809883a 	mov	r4,r19
    e944:	800b883a 	mov	r5,r16
    e948:	000e4400 	call	e440 <rshift>
    e94c:	b42d883a 	add	r22,r22,r16
    e950:	003fdb06 	br	e8c0 <__gethex+0x3d0>
    e954:	817fffc4 	addi	r5,r16,-1
    e958:	2805d17a 	srai	r2,r5,5
    e95c:	d8c00217 	ldw	r3,8(sp)
    e960:	290007cc 	andi	r4,r5,31
    e964:	1085883a 	add	r2,r2,r2
    e968:	1085883a 	add	r2,r2,r2
    e96c:	01800044 	movi	r6,1
    e970:	10c5883a 	add	r2,r2,r3
    e974:	3108983a 	sll	r4,r6,r4
    e978:	10c00017 	ldw	r3,0(r2)
    e97c:	20c8703a 	and	r4,r4,r3
    e980:	20001a1e 	bne	r4,zero,e9ec <__gethex+0x4fc>
    e984:	3039883a 	mov	fp,r6
    e988:	003fed06 	br	e940 <__gethex+0x450>
    e98c:	1011883a 	mov	r8,r2
    e990:	0009883a 	mov	r4,zero
    e994:	003fbd06 	br	e88c <__gethex+0x39c>
    e998:	a1000117 	ldw	r4,4(r20)
    e99c:	b1001a16 	blt	r22,r4,ea08 <__gethex+0x518>
    e9a0:	04800044 	movi	r18,1
    e9a4:	e0000826 	beq	fp,zero,e9c8 <__gethex+0x4d8>
    e9a8:	a1000317 	ldw	r4,12(r20)
    e9ac:	00800084 	movi	r2,2
    e9b0:	20809426 	beq	r4,r2,ec04 <__gethex+0x714>
    e9b4:	008000c4 	movi	r2,3
    e9b8:	20805826 	beq	r4,r2,eb1c <__gethex+0x62c>
    e9bc:	00800044 	movi	r2,1
    e9c0:	20803f26 	beq	r4,r2,eac0 <__gethex+0x5d0>
    e9c4:	94800414 	ori	r18,r18,16
    e9c8:	d8800d17 	ldw	r2,52(sp)
    e9cc:	d8c00117 	ldw	r3,4(sp)
    e9d0:	14c00015 	stw	r19,0(r2)
    e9d4:	1d800015 	stw	r22,0(r3)
    e9d8:	003f0806 	br	e5fc <__gethex+0x10c>
    e9dc:	000b883a 	mov	r5,zero
    e9e0:	003f9206 	br	e82c <__gethex+0x33c>
    e9e4:	002d883a 	mov	r22,zero
    e9e8:	003ef806 	br	e5cc <__gethex+0xdc>
    e9ec:	3140160e 	bge	r6,r5,ea48 <__gethex+0x558>
    e9f0:	9809883a 	mov	r4,r19
    e9f4:	817fff84 	addi	r5,r16,-2
    e9f8:	000a8f00 	call	a8f0 <__any_on>
    e9fc:	10001226 	beq	r2,zero,ea48 <__gethex+0x558>
    ea00:	070000c4 	movi	fp,3
    ea04:	003fce06 	br	e940 <__gethex+0x450>
    ea08:	25a3c83a 	sub	r17,r4,r22
    ea0c:	8dc01016 	blt	r17,r23,ea50 <__gethex+0x560>
    ea10:	a0c00317 	ldw	r3,12(r20)
    ea14:	00800084 	movi	r2,2
    ea18:	18809326 	beq	r3,r2,ec68 <__gethex+0x778>
    ea1c:	008000c4 	movi	r2,3
    ea20:	18808e26 	beq	r3,r2,ec5c <__gethex+0x76c>
    ea24:	00800044 	movi	r2,1
    ea28:	18807b26 	beq	r3,r2,ec18 <__gethex+0x728>
    ea2c:	a809883a 	mov	r4,r21
    ea30:	980b883a 	mov	r5,r19
    ea34:	000a3f80 	call	a3f8 <_Bfree>
    ea38:	d8c00d17 	ldw	r3,52(sp)
    ea3c:	04801404 	movi	r18,80
    ea40:	18000015 	stw	zero,0(r3)
    ea44:	003eed06 	br	e5fc <__gethex+0x10c>
    ea48:	07000084 	movi	fp,2
    ea4c:	003fbc06 	br	e940 <__gethex+0x450>
    ea50:	8c3fffc4 	addi	r16,r17,-1
    ea54:	e0001426 	beq	fp,zero,eaa8 <__gethex+0x5b8>
    ea58:	07000044 	movi	fp,1
    ea5c:	8005d17a 	srai	r2,r16,5
    ea60:	d8c00217 	ldw	r3,8(sp)
    ea64:	814007cc 	andi	r5,r16,31
    ea68:	1085883a 	add	r2,r2,r2
    ea6c:	1085883a 	add	r2,r2,r2
    ea70:	10c5883a 	add	r2,r2,r3
    ea74:	00c00044 	movi	r3,1
    ea78:	1946983a 	sll	r3,r3,r5
    ea7c:	11000017 	ldw	r4,0(r2)
    ea80:	1906703a 	and	r3,r3,r4
    ea84:	18000126 	beq	r3,zero,ea8c <__gethex+0x59c>
    ea88:	e7000094 	ori	fp,fp,2
    ea8c:	880b883a 	mov	r5,r17
    ea90:	9809883a 	mov	r4,r19
    ea94:	000e4400 	call	e440 <rshift>
    ea98:	a5800117 	ldw	r22,4(r20)
    ea9c:	bc6fc83a 	sub	r23,r23,r17
    eaa0:	04800084 	movi	r18,2
    eaa4:	003fbf06 	br	e9a4 <__gethex+0x4b4>
    eaa8:	043fec0e 	bge	zero,r16,ea5c <__gethex+0x56c>
    eaac:	9809883a 	mov	r4,r19
    eab0:	800b883a 	mov	r5,r16
    eab4:	000a8f00 	call	a8f0 <__any_on>
    eab8:	1039883a 	mov	fp,r2
    eabc:	003fe706 	br	ea5c <__gethex+0x56c>
    eac0:	e080008c 	andi	r2,fp,2
    eac4:	103fbf26 	beq	r2,zero,e9c4 <__gethex+0x4d4>
    eac8:	d8c00217 	ldw	r3,8(sp)
    eacc:	18800017 	ldw	r2,0(r3)
    ead0:	e084b03a 	or	r2,fp,r2
    ead4:	1104703a 	and	r2,r2,r4
    ead8:	103fba26 	beq	r2,zero,e9c4 <__gethex+0x4d4>
    eadc:	9c000417 	ldw	r16,16(r19)
    eae0:	d8c00217 	ldw	r3,8(sp)
    eae4:	017fffc4 	movi	r5,-1
    eae8:	8405883a 	add	r2,r16,r16
    eaec:	10b9883a 	add	fp,r2,r2
    eaf0:	1f09883a 	add	r4,r3,fp
    eaf4:	dc000015 	stw	r16,0(sp)
    eaf8:	00000306 	br	eb08 <__gethex+0x618>
    eafc:	18000015 	stw	zero,0(r3)
    eb00:	18c00104 	addi	r3,r3,4
    eb04:	1900082e 	bgeu	r3,r4,eb28 <__gethex+0x638>
    eb08:	18800017 	ldw	r2,0(r3)
    eb0c:	117ffb26 	beq	r2,r5,eafc <__gethex+0x60c>
    eb10:	10800044 	addi	r2,r2,1
    eb14:	18800015 	stw	r2,0(r3)
    eb18:	00001f06 	br	eb98 <__gethex+0x6a8>
    eb1c:	d8800e17 	ldw	r2,56(sp)
    eb20:	103fa826 	beq	r2,zero,e9c4 <__gethex+0x4d4>
    eb24:	003fed06 	br	eadc <__gethex+0x5ec>
    eb28:	98800217 	ldw	r2,8(r19)
    eb2c:	80801316 	blt	r16,r2,eb7c <__gethex+0x68c>
    eb30:	99400117 	ldw	r5,4(r19)
    eb34:	a809883a 	mov	r4,r21
    eb38:	29400044 	addi	r5,r5,1
    eb3c:	000a9780 	call	a978 <_Balloc>
    eb40:	99800417 	ldw	r6,16(r19)
    eb44:	99400304 	addi	r5,r19,12
    eb48:	11000304 	addi	r4,r2,12
    eb4c:	318d883a 	add	r6,r6,r6
    eb50:	318d883a 	add	r6,r6,r6
    eb54:	31800204 	addi	r6,r6,8
    eb58:	1023883a 	mov	r17,r2
    eb5c:	00035c00 	call	35c0 <memcpy>
    eb60:	980b883a 	mov	r5,r19
    eb64:	a809883a 	mov	r4,r21
    eb68:	000a3f80 	call	a3f8 <_Bfree>
    eb6c:	8c000417 	ldw	r16,16(r17)
    eb70:	88800504 	addi	r2,r17,20
    eb74:	8827883a 	mov	r19,r17
    eb78:	d8800215 	stw	r2,8(sp)
    eb7c:	8405883a 	add	r2,r16,r16
    eb80:	1085883a 	add	r2,r2,r2
    eb84:	14c5883a 	add	r2,r2,r19
    eb88:	84000044 	addi	r16,r16,1
    eb8c:	00c00044 	movi	r3,1
    eb90:	10c00515 	stw	r3,20(r2)
    eb94:	9c000415 	stw	r16,16(r19)
    eb98:	00800084 	movi	r2,2
    eb9c:	90801426 	beq	r18,r2,ebf0 <__gethex+0x700>
    eba0:	d8800017 	ldw	r2,0(sp)
    eba4:	14000b16 	blt	r2,r16,ebd4 <__gethex+0x6e4>
    eba8:	bc0007cc 	andi	r16,r23,31
    ebac:	8000021e 	bne	r16,zero,ebb8 <__gethex+0x6c8>
    ebb0:	94800814 	ori	r18,r18,32
    ebb4:	003f8406 	br	e9c8 <__gethex+0x4d8>
    ebb8:	d8c00217 	ldw	r3,8(sp)
    ebbc:	1f05883a 	add	r2,r3,fp
    ebc0:	113fff17 	ldw	r4,-4(r2)
    ebc4:	000a4200 	call	a420 <__hi0bits>
    ebc8:	00c00804 	movi	r3,32
    ebcc:	1c07c83a 	sub	r3,r3,r16
    ebd0:	10fff70e 	bge	r2,r3,ebb0 <__gethex+0x6c0>
    ebd4:	9809883a 	mov	r4,r19
    ebd8:	01400044 	movi	r5,1
    ebdc:	000e4400 	call	e440 <rshift>
    ebe0:	a0800217 	ldw	r2,8(r20)
    ebe4:	b5800044 	addi	r22,r22,1
    ebe8:	15bf3716 	blt	r2,r22,e8c8 <__gethex+0x3d8>
    ebec:	003ff006 	br	ebb0 <__gethex+0x6c0>
    ebf0:	a0800017 	ldw	r2,0(r20)
    ebf4:	10bfffc4 	addi	r2,r2,-1
    ebf8:	b8801e26 	beq	r23,r2,ec74 <__gethex+0x784>
    ebfc:	04800884 	movi	r18,34
    ec00:	003f7106 	br	e9c8 <__gethex+0x4d8>
    ec04:	d8c00e17 	ldw	r3,56(sp)
    ec08:	00800044 	movi	r2,1
    ec0c:	10c5c83a 	sub	r2,r2,r3
    ec10:	103f6c26 	beq	r2,zero,e9c4 <__gethex+0x4d4>
    ec14:	003fb106 	br	eadc <__gethex+0x5ec>
    ec18:	bc7f841e 	bne	r23,r17,ea2c <__gethex+0x53c>
    ec1c:	1dc0050e 	bge	r3,r23,ec34 <__gethex+0x744>
    ec20:	b8cbc83a 	sub	r5,r23,r3
    ec24:	9809883a 	mov	r4,r19
    ec28:	000a8f00 	call	a8f0 <__any_on>
    ec2c:	103f7f26 	beq	r2,zero,ea2c <__gethex+0x53c>
    ec30:	a1000117 	ldw	r4,4(r20)
    ec34:	d8800117 	ldw	r2,4(sp)
    ec38:	d8c00217 	ldw	r3,8(sp)
    ec3c:	04000044 	movi	r16,1
    ec40:	11000015 	stw	r4,0(r2)
    ec44:	d8800d17 	ldw	r2,52(sp)
    ec48:	04801884 	movi	r18,98
    ec4c:	1c000015 	stw	r16,0(r3)
    ec50:	14c00015 	stw	r19,0(r2)
    ec54:	9c000415 	stw	r16,16(r19)
    ec58:	003e6806 	br	e5fc <__gethex+0x10c>
    ec5c:	d8c00e17 	ldw	r3,56(sp)
    ec60:	183f7226 	beq	r3,zero,ea2c <__gethex+0x53c>
    ec64:	003ff306 	br	ec34 <__gethex+0x744>
    ec68:	d8800e17 	ldw	r2,56(sp)
    ec6c:	103ff126 	beq	r2,zero,ec34 <__gethex+0x744>
    ec70:	003f6e06 	br	ea2c <__gethex+0x53c>
    ec74:	b805d17a 	srai	r2,r23,5
    ec78:	d8c00217 	ldw	r3,8(sp)
    ec7c:	b94007cc 	andi	r5,r23,31
    ec80:	1085883a 	add	r2,r2,r2
    ec84:	1085883a 	add	r2,r2,r2
    ec88:	10c5883a 	add	r2,r2,r3
    ec8c:	00c00044 	movi	r3,1
    ec90:	1946983a 	sll	r3,r3,r5
    ec94:	11000017 	ldw	r4,0(r2)
    ec98:	1906703a 	and	r3,r3,r4
    ec9c:	183fd726 	beq	r3,zero,ebfc <__gethex+0x70c>
    eca0:	04800844 	movi	r18,33
    eca4:	003f4806 	br	e9c8 <__gethex+0x4d8>

0000eca8 <L_shift>:
    eca8:	00800204 	movi	r2,8
    ecac:	1185c83a 	sub	r2,r2,r6
    ecb0:	1085883a 	add	r2,r2,r2
    ecb4:	21c00017 	ldw	r7,0(r4)
    ecb8:	1093883a 	add	r9,r2,r2
    ecbc:	00800804 	movi	r2,32
    ecc0:	200d883a 	mov	r6,r4
    ecc4:	1251c83a 	sub	r8,r2,r9
    ecc8:	31800104 	addi	r6,r6,4
    eccc:	3805883a 	mov	r2,r7
    ecd0:	31c00017 	ldw	r7,0(r6)
    ecd4:	3a08983a 	sll	r4,r7,r8
    ecd8:	3a46d83a 	srl	r3,r7,r9
    ecdc:	1104b03a 	or	r2,r2,r4
    ece0:	180f883a 	mov	r7,r3
    ece4:	30bfff15 	stw	r2,-4(r6)
    ece8:	30c00015 	stw	r3,0(r6)
    ecec:	317ff636 	bltu	r6,r5,ecc8 <L_shift+0x20>
    ecf0:	f800283a 	ret

0000ecf4 <__hexnan>:
    ecf4:	defff404 	addi	sp,sp,-48
    ecf8:	dd800815 	stw	r22,32(sp)
    ecfc:	058000b4 	movhi	r22,2
    ed00:	b5a19304 	addi	r22,r22,-31156
    ed04:	b0800c03 	ldbu	r2,48(r22)
    ed08:	dcc00515 	stw	r19,20(sp)
    ed0c:	dc000215 	stw	r16,8(sp)
    ed10:	dfc00b15 	stw	ra,44(sp)
    ed14:	df000a15 	stw	fp,40(sp)
    ed18:	ddc00915 	stw	r23,36(sp)
    ed1c:	dd400715 	stw	r21,28(sp)
    ed20:	dd000615 	stw	r20,24(sp)
    ed24:	dc800415 	stw	r18,16(sp)
    ed28:	dc400315 	stw	r17,12(sp)
    ed2c:	d9000115 	stw	r4,4(sp)
    ed30:	2821883a 	mov	r16,r5
    ed34:	3027883a 	mov	r19,r6
    ed38:	10007426 	beq	r2,zero,ef0c <__hexnan+0x218>
    ed3c:	80c00017 	ldw	r3,0(r16)
    ed40:	1805d17a 	srai	r2,r3,5
    ed44:	18c007cc 	andi	r3,r3,31
    ed48:	1839003a 	cmpeq	fp,r3,zero
    ed4c:	1085883a 	add	r2,r2,r2
    ed50:	1085883a 	add	r2,r2,r2
    ed54:	d8c00015 	stw	r3,0(sp)
    ed58:	14c5883a 	add	r2,r2,r19
    ed5c:	e000011e 	bne	fp,zero,ed64 <__hexnan+0x70>
    ed60:	10800104 	addi	r2,r2,4
    ed64:	d8c00117 	ldw	r3,4(sp)
    ed68:	153fff04 	addi	r20,r2,-4
    ed6c:	a021883a 	mov	r16,r20
    ed70:	1c400017 	ldw	r17,0(r3)
    ed74:	a02b883a 	mov	r21,r20
    ed78:	0025883a 	mov	r18,zero
    ed7c:	002f883a 	mov	r23,zero
    ed80:	000d883a 	mov	r6,zero
    ed84:	103fff15 	stw	zero,-4(r2)
    ed88:	8c400044 	addi	r17,r17,1
    ed8c:	89000003 	ldbu	r4,0(r17)
    ed90:	20000e26 	beq	r4,zero,edcc <__hexnan+0xd8>
    ed94:	2585883a 	add	r2,r4,r22
    ed98:	10c00003 	ldbu	r3,0(r2)
    ed9c:	18002e1e 	bne	r3,zero,ee58 <__hexnan+0x164>
    eda0:	00800804 	movi	r2,32
    eda4:	11005536 	bltu	r2,r4,eefc <__hexnan+0x208>
    eda8:	bcbff70e 	bge	r23,r18,ed88 <__hexnan+0x94>
    edac:	8540022e 	bgeu	r16,r21,edb8 <__hexnan+0xc4>
    edb0:	008001c4 	movi	r2,7
    edb4:	11803c0e 	bge	r2,r6,eea8 <__hexnan+0x1b4>
    edb8:	9c003536 	bltu	r19,r16,ee90 <__hexnan+0x19c>
    edbc:	8c400044 	addi	r17,r17,1
    edc0:	89000003 	ldbu	r4,0(r17)
    edc4:	01800204 	movi	r6,8
    edc8:	203ff21e 	bne	r4,zero,ed94 <__hexnan+0xa0>
    edcc:	90004d26 	beq	r18,zero,ef04 <__hexnan+0x210>
    edd0:	85404336 	bltu	r16,r21,eee0 <__hexnan+0x1ec>
    edd4:	9c00382e 	bgeu	r19,r16,eeb8 <__hexnan+0x1c4>
    edd8:	9807883a 	mov	r3,r19
    eddc:	80800017 	ldw	r2,0(r16)
    ede0:	84000104 	addi	r16,r16,4
    ede4:	18800015 	stw	r2,0(r3)
    ede8:	18c00104 	addi	r3,r3,4
    edec:	a43ffb2e 	bgeu	r20,r16,eddc <__hexnan+0xe8>
    edf0:	18000015 	stw	zero,0(r3)
    edf4:	18c00104 	addi	r3,r3,4
    edf8:	a0fffd2e 	bgeu	r20,r3,edf0 <__hexnan+0xfc>
    edfc:	a0800017 	ldw	r2,0(r20)
    ee00:	1000071e 	bne	r2,zero,ee20 <__hexnan+0x12c>
    ee04:	9d004326 	beq	r19,r20,ef14 <__hexnan+0x220>
    ee08:	a007883a 	mov	r3,r20
    ee0c:	00000106 	br	ee14 <__hexnan+0x120>
    ee10:	98c04026 	beq	r19,r3,ef14 <__hexnan+0x220>
    ee14:	18ffff04 	addi	r3,r3,-4
    ee18:	18800017 	ldw	r2,0(r3)
    ee1c:	103ffc26 	beq	r2,zero,ee10 <__hexnan+0x11c>
    ee20:	00c00144 	movi	r3,5
    ee24:	1805883a 	mov	r2,r3
    ee28:	dfc00b17 	ldw	ra,44(sp)
    ee2c:	df000a17 	ldw	fp,40(sp)
    ee30:	ddc00917 	ldw	r23,36(sp)
    ee34:	dd800817 	ldw	r22,32(sp)
    ee38:	dd400717 	ldw	r21,28(sp)
    ee3c:	dd000617 	ldw	r20,24(sp)
    ee40:	dcc00517 	ldw	r19,20(sp)
    ee44:	dc800417 	ldw	r18,16(sp)
    ee48:	dc400317 	ldw	r17,12(sp)
    ee4c:	dc000217 	ldw	r16,8(sp)
    ee50:	dec00c04 	addi	sp,sp,48
    ee54:	f800283a 	ret
    ee58:	31800044 	addi	r6,r6,1
    ee5c:	00800204 	movi	r2,8
    ee60:	94800044 	addi	r18,r18,1
    ee64:	1180040e 	bge	r2,r6,ee78 <__hexnan+0x184>
    ee68:	9c3fc72e 	bgeu	r19,r16,ed88 <__hexnan+0x94>
    ee6c:	843fff04 	addi	r16,r16,-4
    ee70:	80000015 	stw	zero,0(r16)
    ee74:	01800044 	movi	r6,1
    ee78:	80800017 	ldw	r2,0(r16)
    ee7c:	18c003cc 	andi	r3,r3,15
    ee80:	1004913a 	slli	r2,r2,4
    ee84:	10c4b03a 	or	r2,r2,r3
    ee88:	80800015 	stw	r2,0(r16)
    ee8c:	003fbe06 	br	ed88 <__hexnan+0x94>
    ee90:	843fff04 	addi	r16,r16,-4
    ee94:	802b883a 	mov	r21,r16
    ee98:	902f883a 	mov	r23,r18
    ee9c:	000d883a 	mov	r6,zero
    eea0:	80000015 	stw	zero,0(r16)
    eea4:	003fb806 	br	ed88 <__hexnan+0x94>
    eea8:	8009883a 	mov	r4,r16
    eeac:	a80b883a 	mov	r5,r21
    eeb0:	000eca80 	call	eca8 <L_shift>
    eeb4:	003fc006 	br	edb8 <__hexnan+0xc4>
    eeb8:	e03fd01e 	bne	fp,zero,edfc <__hexnan+0x108>
    eebc:	d8c00017 	ldw	r3,0(sp)
    eec0:	00800804 	movi	r2,32
    eec4:	10c5c83a 	sub	r2,r2,r3
    eec8:	00ffffc4 	movi	r3,-1
    eecc:	1886d83a 	srl	r3,r3,r2
    eed0:	a0800017 	ldw	r2,0(r20)
    eed4:	10c4703a 	and	r2,r2,r3
    eed8:	a0800015 	stw	r2,0(r20)
    eedc:	003fc806 	br	ee00 <__hexnan+0x10c>
    eee0:	008001c4 	movi	r2,7
    eee4:	11bfbb16 	blt	r2,r6,edd4 <__hexnan+0xe0>
    eee8:	a80b883a 	mov	r5,r21
    eeec:	8009883a 	mov	r4,r16
    eef0:	000eca80 	call	eca8 <L_shift>
    eef4:	9c3ff02e 	bgeu	r19,r16,eeb8 <__hexnan+0x1c4>
    eef8:	003fb706 	br	edd8 <__hexnan+0xe4>
    eefc:	00800a44 	movi	r2,41
    ef00:	20800826 	beq	r4,r2,ef24 <__hexnan+0x230>
    ef04:	00c00104 	movi	r3,4
    ef08:	003fc606 	br	ee24 <__hexnan+0x130>
    ef0c:	000e3d80 	call	e3d8 <__hexdig_init>
    ef10:	003f8a06 	br	ed3c <__hexnan+0x48>
    ef14:	00800044 	movi	r2,1
    ef18:	00c00144 	movi	r3,5
    ef1c:	98800015 	stw	r2,0(r19)
    ef20:	003fc006 	br	ee24 <__hexnan+0x130>
    ef24:	903ff726 	beq	r18,zero,ef04 <__hexnan+0x210>
    ef28:	d8c00117 	ldw	r3,4(sp)
    ef2c:	88800044 	addi	r2,r17,1
    ef30:	18800015 	stw	r2,0(r3)
    ef34:	857fa72e 	bgeu	r16,r21,edd4 <__hexnan+0xe0>
    ef38:	003fe906 	br	eee0 <__hexnan+0x1ec>

0000ef3c <_isatty_r>:
    ef3c:	defffd04 	addi	sp,sp,-12
    ef40:	dc000015 	stw	r16,0(sp)
    ef44:	040000b4 	movhi	r16,2
    ef48:	84214e04 	addi	r16,r16,-31432
    ef4c:	dc400115 	stw	r17,4(sp)
    ef50:	80000015 	stw	zero,0(r16)
    ef54:	2023883a 	mov	r17,r4
    ef58:	2809883a 	mov	r4,r5
    ef5c:	dfc00215 	stw	ra,8(sp)
    ef60:	0011b500 	call	11b50 <isatty>
    ef64:	1007883a 	mov	r3,r2
    ef68:	00bfffc4 	movi	r2,-1
    ef6c:	18800626 	beq	r3,r2,ef88 <_isatty_r+0x4c>
    ef70:	1805883a 	mov	r2,r3
    ef74:	dfc00217 	ldw	ra,8(sp)
    ef78:	dc400117 	ldw	r17,4(sp)
    ef7c:	dc000017 	ldw	r16,0(sp)
    ef80:	dec00304 	addi	sp,sp,12
    ef84:	f800283a 	ret
    ef88:	80800017 	ldw	r2,0(r16)
    ef8c:	103ff826 	beq	r2,zero,ef70 <_isatty_r+0x34>
    ef90:	88800015 	stw	r2,0(r17)
    ef94:	1805883a 	mov	r2,r3
    ef98:	dfc00217 	ldw	ra,8(sp)
    ef9c:	dc400117 	ldw	r17,4(sp)
    efa0:	dc000017 	ldw	r16,0(sp)
    efa4:	dec00304 	addi	sp,sp,12
    efa8:	f800283a 	ret

0000efac <__muldi3>:
    efac:	2011883a 	mov	r8,r4
    efb0:	427fffcc 	andi	r9,r8,65535
    efb4:	4018d43a 	srli	r12,r8,16
    efb8:	32bfffcc 	andi	r10,r6,65535
    efbc:	3016d43a 	srli	r11,r6,16
    efc0:	4a85383a 	mul	r2,r9,r10
    efc4:	6295383a 	mul	r10,r12,r10
    efc8:	4ad3383a 	mul	r9,r9,r11
    efcc:	113fffcc 	andi	r4,r2,65535
    efd0:	1004d43a 	srli	r2,r2,16
    efd4:	4a93883a 	add	r9,r9,r10
    efd8:	3807883a 	mov	r3,r7
    efdc:	1245883a 	add	r2,r2,r9
    efe0:	280f883a 	mov	r7,r5
    efe4:	180b883a 	mov	r5,r3
    efe8:	1006943a 	slli	r3,r2,16
    efec:	defffd04 	addi	sp,sp,-12
    eff0:	dc800215 	stw	r18,8(sp)
    eff4:	1907883a 	add	r3,r3,r4
    eff8:	dc400115 	stw	r17,4(sp)
    effc:	dc000015 	stw	r16,0(sp)
    f000:	4165383a 	mul	r18,r8,r5
    f004:	31e3383a 	mul	r17,r6,r7
    f008:	1012d43a 	srli	r9,r2,16
    f00c:	62d9383a 	mul	r12,r12,r11
    f010:	181f883a 	mov	r15,r3
    f014:	1280022e 	bgeu	r2,r10,f020 <__muldi3+0x74>
    f018:	00800074 	movhi	r2,1
    f01c:	6099883a 	add	r12,r12,r2
    f020:	624d883a 	add	r6,r12,r9
    f024:	9187883a 	add	r3,r18,r6
    f028:	88c7883a 	add	r3,r17,r3
    f02c:	7805883a 	mov	r2,r15
    f030:	dc800217 	ldw	r18,8(sp)
    f034:	dc400117 	ldw	r17,4(sp)
    f038:	dc000017 	ldw	r16,0(sp)
    f03c:	dec00304 	addi	sp,sp,12
    f040:	f800283a 	ret

0000f044 <__fixunsdfsi>:
    f044:	defffb04 	addi	sp,sp,-20
    f048:	dc400115 	stw	r17,4(sp)
    f04c:	dc000015 	stw	r16,0(sp)
    f050:	04507834 	movhi	r17,16864
    f054:	0021883a 	mov	r16,zero
    f058:	800d883a 	mov	r6,r16
    f05c:	880f883a 	mov	r7,r17
    f060:	dcc00315 	stw	r19,12(sp)
    f064:	dc800215 	stw	r18,8(sp)
    f068:	2827883a 	mov	r19,r5
    f06c:	2025883a 	mov	r18,r4
    f070:	dfc00415 	stw	ra,16(sp)
    f074:	0010a940 	call	10a94 <__gedf2>
    f078:	000d883a 	mov	r6,zero
    f07c:	880f883a 	mov	r7,r17
    f080:	980b883a 	mov	r5,r19
    f084:	9009883a 	mov	r4,r18
    f088:	10000d16 	blt	r2,zero,f0c0 <__fixunsdfsi+0x7c>
    f08c:	00101ec0 	call	101ec <__subdf3>
    f090:	180b883a 	mov	r5,r3
    f094:	1009883a 	mov	r4,r2
    f098:	0010d240 	call	10d24 <__fixdfsi>
    f09c:	00e00034 	movhi	r3,32768
    f0a0:	10c5883a 	add	r2,r2,r3
    f0a4:	dfc00417 	ldw	ra,16(sp)
    f0a8:	dcc00317 	ldw	r19,12(sp)
    f0ac:	dc800217 	ldw	r18,8(sp)
    f0b0:	dc400117 	ldw	r17,4(sp)
    f0b4:	dc000017 	ldw	r16,0(sp)
    f0b8:	dec00504 	addi	sp,sp,20
    f0bc:	f800283a 	ret
    f0c0:	980b883a 	mov	r5,r19
    f0c4:	9009883a 	mov	r4,r18
    f0c8:	0010d240 	call	10d24 <__fixdfsi>
    f0cc:	dfc00417 	ldw	ra,16(sp)
    f0d0:	dcc00317 	ldw	r19,12(sp)
    f0d4:	dc800217 	ldw	r18,8(sp)
    f0d8:	dc400117 	ldw	r17,4(sp)
    f0dc:	dc000017 	ldw	r16,0(sp)
    f0e0:	dec00504 	addi	sp,sp,20
    f0e4:	f800283a 	ret

0000f0e8 <__udivdi3>:
    f0e8:	defff004 	addi	sp,sp,-64
    f0ec:	2005883a 	mov	r2,r4
    f0f0:	3011883a 	mov	r8,r6
    f0f4:	df000e15 	stw	fp,56(sp)
    f0f8:	dd000a15 	stw	r20,40(sp)
    f0fc:	dc000615 	stw	r16,24(sp)
    f100:	dfc00f15 	stw	ra,60(sp)
    f104:	ddc00d15 	stw	r23,52(sp)
    f108:	dd800c15 	stw	r22,48(sp)
    f10c:	dd400b15 	stw	r21,44(sp)
    f110:	dcc00915 	stw	r19,36(sp)
    f114:	dc800815 	stw	r18,32(sp)
    f118:	dc400715 	stw	r17,28(sp)
    f11c:	4021883a 	mov	r16,r8
    f120:	1039883a 	mov	fp,r2
    f124:	2829883a 	mov	r20,r5
    f128:	38003b1e 	bne	r7,zero,f218 <__udivdi3+0x130>
    f12c:	2a005c36 	bltu	r5,r8,f2a0 <__udivdi3+0x1b8>
    f130:	4000a626 	beq	r8,zero,f3cc <__udivdi3+0x2e4>
    f134:	00bfffd4 	movui	r2,65535
    f138:	14009e36 	bltu	r2,r16,f3b4 <__udivdi3+0x2cc>
    f13c:	00803fc4 	movi	r2,255
    f140:	14013d36 	bltu	r2,r16,f638 <__udivdi3+0x550>
    f144:	000b883a 	mov	r5,zero
    f148:	0005883a 	mov	r2,zero
    f14c:	8084d83a 	srl	r2,r16,r2
    f150:	01000074 	movhi	r4,1
    f154:	21138304 	addi	r4,r4,19980
    f158:	01800804 	movi	r6,32
    f15c:	1105883a 	add	r2,r2,r4
    f160:	10c00003 	ldbu	r3,0(r2)
    f164:	28c7883a 	add	r3,r5,r3
    f168:	30edc83a 	sub	r22,r6,r3
    f16c:	b000ee1e 	bne	r22,zero,f528 <__udivdi3+0x440>
    f170:	802ad43a 	srli	r21,r16,16
    f174:	00800044 	movi	r2,1
    f178:	a423c83a 	sub	r17,r20,r16
    f17c:	85ffffcc 	andi	r23,r16,65535
    f180:	d8800315 	stw	r2,12(sp)
    f184:	8809883a 	mov	r4,r17
    f188:	a80b883a 	mov	r5,r21
    f18c:	00027e00 	call	27e0 <__udivsi3>
    f190:	8809883a 	mov	r4,r17
    f194:	a80b883a 	mov	r5,r21
    f198:	102d883a 	mov	r22,r2
    f19c:	00027e80 	call	27e8 <__umodsi3>
    f1a0:	1004943a 	slli	r2,r2,16
    f1a4:	e006d43a 	srli	r3,fp,16
    f1a8:	bda3383a 	mul	r17,r23,r22
    f1ac:	10c4b03a 	or	r2,r2,r3
    f1b0:	1440042e 	bgeu	r2,r17,f1c4 <__udivdi3+0xdc>
    f1b4:	1405883a 	add	r2,r2,r16
    f1b8:	b5bfffc4 	addi	r22,r22,-1
    f1bc:	14000136 	bltu	r2,r16,f1c4 <__udivdi3+0xdc>
    f1c0:	14413d36 	bltu	r2,r17,f6b8 <__udivdi3+0x5d0>
    f1c4:	1463c83a 	sub	r17,r2,r17
    f1c8:	8809883a 	mov	r4,r17
    f1cc:	a80b883a 	mov	r5,r21
    f1d0:	00027e00 	call	27e0 <__udivsi3>
    f1d4:	8809883a 	mov	r4,r17
    f1d8:	a80b883a 	mov	r5,r21
    f1dc:	1029883a 	mov	r20,r2
    f1e0:	00027e80 	call	27e8 <__umodsi3>
    f1e4:	1004943a 	slli	r2,r2,16
    f1e8:	bd09383a 	mul	r4,r23,r20
    f1ec:	e0ffffcc 	andi	r3,fp,65535
    f1f0:	10c4b03a 	or	r2,r2,r3
    f1f4:	1100042e 	bgeu	r2,r4,f208 <__udivdi3+0x120>
    f1f8:	8085883a 	add	r2,r16,r2
    f1fc:	a53fffc4 	addi	r20,r20,-1
    f200:	14000136 	bltu	r2,r16,f208 <__udivdi3+0x120>
    f204:	11012036 	bltu	r2,r4,f688 <__udivdi3+0x5a0>
    f208:	b004943a 	slli	r2,r22,16
    f20c:	d9000317 	ldw	r4,12(sp)
    f210:	a084b03a 	or	r2,r20,r2
    f214:	00001506 	br	f26c <__udivdi3+0x184>
    f218:	380d883a 	mov	r6,r7
    f21c:	29c06236 	bltu	r5,r7,f3a8 <__udivdi3+0x2c0>
    f220:	00bfffd4 	movui	r2,65535
    f224:	11c05a36 	bltu	r2,r7,f390 <__udivdi3+0x2a8>
    f228:	00803fc4 	movi	r2,255
    f22c:	11c0fc36 	bltu	r2,r7,f620 <__udivdi3+0x538>
    f230:	000b883a 	mov	r5,zero
    f234:	0005883a 	mov	r2,zero
    f238:	3084d83a 	srl	r2,r6,r2
    f23c:	01000074 	movhi	r4,1
    f240:	21138304 	addi	r4,r4,19980
    f244:	01c00804 	movi	r7,32
    f248:	1105883a 	add	r2,r2,r4
    f24c:	10c00003 	ldbu	r3,0(r2)
    f250:	28c7883a 	add	r3,r5,r3
    f254:	38efc83a 	sub	r23,r7,r3
    f258:	b800691e 	bne	r23,zero,f400 <__udivdi3+0x318>
    f25c:	35000136 	bltu	r6,r20,f264 <__udivdi3+0x17c>
    f260:	e4005136 	bltu	fp,r16,f3a8 <__udivdi3+0x2c0>
    f264:	00800044 	movi	r2,1
    f268:	0009883a 	mov	r4,zero
    f26c:	2007883a 	mov	r3,r4
    f270:	dfc00f17 	ldw	ra,60(sp)
    f274:	df000e17 	ldw	fp,56(sp)
    f278:	ddc00d17 	ldw	r23,52(sp)
    f27c:	dd800c17 	ldw	r22,48(sp)
    f280:	dd400b17 	ldw	r21,44(sp)
    f284:	dd000a17 	ldw	r20,40(sp)
    f288:	dcc00917 	ldw	r19,36(sp)
    f28c:	dc800817 	ldw	r18,32(sp)
    f290:	dc400717 	ldw	r17,28(sp)
    f294:	dc000617 	ldw	r16,24(sp)
    f298:	dec01004 	addi	sp,sp,64
    f29c:	f800283a 	ret
    f2a0:	00bfffd4 	movui	r2,65535
    f2a4:	12005036 	bltu	r2,r8,f3e8 <__udivdi3+0x300>
    f2a8:	00803fc4 	movi	r2,255
    f2ac:	1200e836 	bltu	r2,r8,f650 <__udivdi3+0x568>
    f2b0:	000b883a 	mov	r5,zero
    f2b4:	0005883a 	mov	r2,zero
    f2b8:	8084d83a 	srl	r2,r16,r2
    f2bc:	01000074 	movhi	r4,1
    f2c0:	21138304 	addi	r4,r4,19980
    f2c4:	01800804 	movi	r6,32
    f2c8:	1105883a 	add	r2,r2,r4
    f2cc:	10c00003 	ldbu	r3,0(r2)
    f2d0:	28c7883a 	add	r3,r5,r3
    f2d4:	30cbc83a 	sub	r5,r6,r3
    f2d8:	28000626 	beq	r5,zero,f2f4 <__udivdi3+0x20c>
    f2dc:	3145c83a 	sub	r2,r6,r5
    f2e0:	e084d83a 	srl	r2,fp,r2
    f2e4:	a146983a 	sll	r3,r20,r5
    f2e8:	e178983a 	sll	fp,fp,r5
    f2ec:	8160983a 	sll	r16,r16,r5
    f2f0:	18a8b03a 	or	r20,r3,r2
    f2f4:	802ad43a 	srli	r21,r16,16
    f2f8:	a009883a 	mov	r4,r20
    f2fc:	85ffffcc 	andi	r23,r16,65535
    f300:	a80b883a 	mov	r5,r21
    f304:	00027e00 	call	27e0 <__udivsi3>
    f308:	a009883a 	mov	r4,r20
    f30c:	a80b883a 	mov	r5,r21
    f310:	102d883a 	mov	r22,r2
    f314:	00027e80 	call	27e8 <__umodsi3>
    f318:	1004943a 	slli	r2,r2,16
    f31c:	e006d43a 	srli	r3,fp,16
    f320:	bda3383a 	mul	r17,r23,r22
    f324:	10c4b03a 	or	r2,r2,r3
    f328:	1440042e 	bgeu	r2,r17,f33c <__udivdi3+0x254>
    f32c:	1405883a 	add	r2,r2,r16
    f330:	b5bfffc4 	addi	r22,r22,-1
    f334:	14000136 	bltu	r2,r16,f33c <__udivdi3+0x254>
    f338:	1440d536 	bltu	r2,r17,f690 <__udivdi3+0x5a8>
    f33c:	1463c83a 	sub	r17,r2,r17
    f340:	8809883a 	mov	r4,r17
    f344:	a80b883a 	mov	r5,r21
    f348:	00027e00 	call	27e0 <__udivsi3>
    f34c:	8809883a 	mov	r4,r17
    f350:	a80b883a 	mov	r5,r21
    f354:	1029883a 	mov	r20,r2
    f358:	00027e80 	call	27e8 <__umodsi3>
    f35c:	1004943a 	slli	r2,r2,16
    f360:	bd09383a 	mul	r4,r23,r20
    f364:	e0ffffcc 	andi	r3,fp,65535
    f368:	10c4b03a 	or	r2,r2,r3
    f36c:	1100042e 	bgeu	r2,r4,f380 <__udivdi3+0x298>
    f370:	8085883a 	add	r2,r16,r2
    f374:	a53fffc4 	addi	r20,r20,-1
    f378:	14000136 	bltu	r2,r16,f380 <__udivdi3+0x298>
    f37c:	1100c736 	bltu	r2,r4,f69c <__udivdi3+0x5b4>
    f380:	b004943a 	slli	r2,r22,16
    f384:	0009883a 	mov	r4,zero
    f388:	a084b03a 	or	r2,r20,r2
    f38c:	003fb706 	br	f26c <__udivdi3+0x184>
    f390:	00804034 	movhi	r2,256
    f394:	10bfffc4 	addi	r2,r2,-1
    f398:	11c0a436 	bltu	r2,r7,f62c <__udivdi3+0x544>
    f39c:	01400404 	movi	r5,16
    f3a0:	2805883a 	mov	r2,r5
    f3a4:	003fa406 	br	f238 <__udivdi3+0x150>
    f3a8:	0005883a 	mov	r2,zero
    f3ac:	0009883a 	mov	r4,zero
    f3b0:	003fae06 	br	f26c <__udivdi3+0x184>
    f3b4:	00804034 	movhi	r2,256
    f3b8:	10bfffc4 	addi	r2,r2,-1
    f3bc:	1400a136 	bltu	r2,r16,f644 <__udivdi3+0x55c>
    f3c0:	01400404 	movi	r5,16
    f3c4:	2805883a 	mov	r2,r5
    f3c8:	003f6006 	br	f14c <__udivdi3+0x64>
    f3cc:	01000044 	movi	r4,1
    f3d0:	000b883a 	mov	r5,zero
    f3d4:	00027e00 	call	27e0 <__udivsi3>
    f3d8:	1021883a 	mov	r16,r2
    f3dc:	00bfffd4 	movui	r2,65535
    f3e0:	143ff436 	bltu	r2,r16,f3b4 <__udivdi3+0x2cc>
    f3e4:	003f5506 	br	f13c <__udivdi3+0x54>
    f3e8:	00804034 	movhi	r2,256
    f3ec:	10bfffc4 	addi	r2,r2,-1
    f3f0:	12009a36 	bltu	r2,r8,f65c <__udivdi3+0x574>
    f3f4:	01400404 	movi	r5,16
    f3f8:	2805883a 	mov	r2,r5
    f3fc:	003fae06 	br	f2b8 <__udivdi3+0x1d0>
    f400:	3dc5c83a 	sub	r2,r7,r23
    f404:	35c8983a 	sll	r4,r6,r23
    f408:	8086d83a 	srl	r3,r16,r2
    f40c:	a0a2d83a 	srl	r17,r20,r2
    f410:	e084d83a 	srl	r2,fp,r2
    f414:	20eab03a 	or	r21,r4,r3
    f418:	a82cd43a 	srli	r22,r21,16
    f41c:	a5c6983a 	sll	r3,r20,r23
    f420:	8809883a 	mov	r4,r17
    f424:	b00b883a 	mov	r5,r22
    f428:	1886b03a 	or	r3,r3,r2
    f42c:	d8c00215 	stw	r3,8(sp)
    f430:	00027e00 	call	27e0 <__udivsi3>
    f434:	8809883a 	mov	r4,r17
    f438:	b00b883a 	mov	r5,r22
    f43c:	1029883a 	mov	r20,r2
    f440:	00027e80 	call	27e8 <__umodsi3>
    f444:	a8ffffcc 	andi	r3,r21,65535
    f448:	d8c00515 	stw	r3,20(sp)
    f44c:	d9000217 	ldw	r4,8(sp)
    f450:	d9400517 	ldw	r5,20(sp)
    f454:	1004943a 	slli	r2,r2,16
    f458:	2006d43a 	srli	r3,r4,16
    f45c:	85e0983a 	sll	r16,r16,r23
    f460:	2d23383a 	mul	r17,r5,r20
    f464:	10c4b03a 	or	r2,r2,r3
    f468:	dc000015 	stw	r16,0(sp)
    f46c:	1440032e 	bgeu	r2,r17,f47c <__udivdi3+0x394>
    f470:	1545883a 	add	r2,r2,r21
    f474:	a53fffc4 	addi	r20,r20,-1
    f478:	15407f2e 	bgeu	r2,r21,f678 <__udivdi3+0x590>
    f47c:	1463c83a 	sub	r17,r2,r17
    f480:	8809883a 	mov	r4,r17
    f484:	b00b883a 	mov	r5,r22
    f488:	00027e00 	call	27e0 <__udivsi3>
    f48c:	8809883a 	mov	r4,r17
    f490:	b00b883a 	mov	r5,r22
    f494:	1021883a 	mov	r16,r2
    f498:	00027e80 	call	27e8 <__umodsi3>
    f49c:	d8c00517 	ldw	r3,20(sp)
    f4a0:	d9000217 	ldw	r4,8(sp)
    f4a4:	1004943a 	slli	r2,r2,16
    f4a8:	1c0f383a 	mul	r7,r3,r16
    f4ac:	20ffffcc 	andi	r3,r4,65535
    f4b0:	10e2b03a 	or	r17,r2,r3
    f4b4:	89c0032e 	bgeu	r17,r7,f4c4 <__udivdi3+0x3dc>
    f4b8:	8d63883a 	add	r17,r17,r21
    f4bc:	843fffc4 	addi	r16,r16,-1
    f4c0:	8d40692e 	bgeu	r17,r21,f668 <__udivdi3+0x580>
    f4c4:	a008943a 	slli	r4,r20,16
    f4c8:	d9400017 	ldw	r5,0(sp)
    f4cc:	89e3c83a 	sub	r17,r17,r7
    f4d0:	8110b03a 	or	r8,r16,r4
    f4d4:	280cd43a 	srli	r6,r5,16
    f4d8:	28ffffcc 	andi	r3,r5,65535
    f4dc:	40bfffcc 	andi	r2,r8,65535
    f4e0:	400ad43a 	srli	r5,r8,16
    f4e4:	10d3383a 	mul	r9,r2,r3
    f4e8:	1185383a 	mul	r2,r2,r6
    f4ec:	28c7383a 	mul	r3,r5,r3
    f4f0:	4808d43a 	srli	r4,r9,16
    f4f4:	298b383a 	mul	r5,r5,r6
    f4f8:	10c5883a 	add	r2,r2,r3
    f4fc:	2089883a 	add	r4,r4,r2
    f500:	20c0022e 	bgeu	r4,r3,f50c <__udivdi3+0x424>
    f504:	00800074 	movhi	r2,1
    f508:	288b883a 	add	r5,r5,r2
    f50c:	2004d43a 	srli	r2,r4,16
    f510:	288b883a 	add	r5,r5,r2
    f514:	89403f36 	bltu	r17,r5,f614 <__udivdi3+0x52c>
    f518:	89403926 	beq	r17,r5,f600 <__udivdi3+0x518>
    f51c:	4005883a 	mov	r2,r8
    f520:	0009883a 	mov	r4,zero
    f524:	003f5106 	br	f26c <__udivdi3+0x184>
    f528:	85a0983a 	sll	r16,r16,r22
    f52c:	3585c83a 	sub	r2,r6,r22
    f530:	a0a2d83a 	srl	r17,r20,r2
    f534:	802ad43a 	srli	r21,r16,16
    f538:	e084d83a 	srl	r2,fp,r2
    f53c:	a586983a 	sll	r3,r20,r22
    f540:	8809883a 	mov	r4,r17
    f544:	a80b883a 	mov	r5,r21
    f548:	1886b03a 	or	r3,r3,r2
    f54c:	d8c00115 	stw	r3,4(sp)
    f550:	00027e00 	call	27e0 <__udivsi3>
    f554:	8809883a 	mov	r4,r17
    f558:	a80b883a 	mov	r5,r21
    f55c:	d8800415 	stw	r2,16(sp)
    f560:	00027e80 	call	27e8 <__umodsi3>
    f564:	d9000117 	ldw	r4,4(sp)
    f568:	d9400417 	ldw	r5,16(sp)
    f56c:	1004943a 	slli	r2,r2,16
    f570:	85ffffcc 	andi	r23,r16,65535
    f574:	2006d43a 	srli	r3,r4,16
    f578:	b963383a 	mul	r17,r23,r5
    f57c:	10c4b03a 	or	r2,r2,r3
    f580:	1440042e 	bgeu	r2,r17,f594 <__udivdi3+0x4ac>
    f584:	297fffc4 	addi	r5,r5,-1
    f588:	1405883a 	add	r2,r2,r16
    f58c:	d9400415 	stw	r5,16(sp)
    f590:	1400442e 	bgeu	r2,r16,f6a4 <__udivdi3+0x5bc>
    f594:	1463c83a 	sub	r17,r2,r17
    f598:	8809883a 	mov	r4,r17
    f59c:	a80b883a 	mov	r5,r21
    f5a0:	00027e00 	call	27e0 <__udivsi3>
    f5a4:	8809883a 	mov	r4,r17
    f5a8:	a80b883a 	mov	r5,r21
    f5ac:	1029883a 	mov	r20,r2
    f5b0:	00027e80 	call	27e8 <__umodsi3>
    f5b4:	d9400117 	ldw	r5,4(sp)
    f5b8:	1004943a 	slli	r2,r2,16
    f5bc:	bd09383a 	mul	r4,r23,r20
    f5c0:	28ffffcc 	andi	r3,r5,65535
    f5c4:	10c6b03a 	or	r3,r2,r3
    f5c8:	1900062e 	bgeu	r3,r4,f5e4 <__udivdi3+0x4fc>
    f5cc:	1c07883a 	add	r3,r3,r16
    f5d0:	a53fffc4 	addi	r20,r20,-1
    f5d4:	1c000336 	bltu	r3,r16,f5e4 <__udivdi3+0x4fc>
    f5d8:	1900022e 	bgeu	r3,r4,f5e4 <__udivdi3+0x4fc>
    f5dc:	a53fffc4 	addi	r20,r20,-1
    f5e0:	1c07883a 	add	r3,r3,r16
    f5e4:	d9400417 	ldw	r5,16(sp)
    f5e8:	e5b8983a 	sll	fp,fp,r22
    f5ec:	1923c83a 	sub	r17,r3,r4
    f5f0:	2804943a 	slli	r2,r5,16
    f5f4:	a0a8b03a 	or	r20,r20,r2
    f5f8:	dd000315 	stw	r20,12(sp)
    f5fc:	003ee106 	br	f184 <__udivdi3+0x9c>
    f600:	2004943a 	slli	r2,r4,16
    f604:	e5c8983a 	sll	r4,fp,r23
    f608:	48ffffcc 	andi	r3,r9,65535
    f60c:	10c5883a 	add	r2,r2,r3
    f610:	20bfc22e 	bgeu	r4,r2,f51c <__udivdi3+0x434>
    f614:	40bfffc4 	addi	r2,r8,-1
    f618:	0009883a 	mov	r4,zero
    f61c:	003f1306 	br	f26c <__udivdi3+0x184>
    f620:	01400204 	movi	r5,8
    f624:	2805883a 	mov	r2,r5
    f628:	003f0306 	br	f238 <__udivdi3+0x150>
    f62c:	01400604 	movi	r5,24
    f630:	2805883a 	mov	r2,r5
    f634:	003f0006 	br	f238 <__udivdi3+0x150>
    f638:	01400204 	movi	r5,8
    f63c:	2805883a 	mov	r2,r5
    f640:	003ec206 	br	f14c <__udivdi3+0x64>
    f644:	01400604 	movi	r5,24
    f648:	2805883a 	mov	r2,r5
    f64c:	003ebf06 	br	f14c <__udivdi3+0x64>
    f650:	01400204 	movi	r5,8
    f654:	2805883a 	mov	r2,r5
    f658:	003f1706 	br	f2b8 <__udivdi3+0x1d0>
    f65c:	01400604 	movi	r5,24
    f660:	2805883a 	mov	r2,r5
    f664:	003f1406 	br	f2b8 <__udivdi3+0x1d0>
    f668:	89ff962e 	bgeu	r17,r7,f4c4 <__udivdi3+0x3dc>
    f66c:	8d63883a 	add	r17,r17,r21
    f670:	843fffc4 	addi	r16,r16,-1
    f674:	003f9306 	br	f4c4 <__udivdi3+0x3dc>
    f678:	147f802e 	bgeu	r2,r17,f47c <__udivdi3+0x394>
    f67c:	a53fffc4 	addi	r20,r20,-1
    f680:	1545883a 	add	r2,r2,r21
    f684:	003f7d06 	br	f47c <__udivdi3+0x394>
    f688:	a53fffc4 	addi	r20,r20,-1
    f68c:	003ede06 	br	f208 <__udivdi3+0x120>
    f690:	b5bfffc4 	addi	r22,r22,-1
    f694:	1405883a 	add	r2,r2,r16
    f698:	003f2806 	br	f33c <__udivdi3+0x254>
    f69c:	a53fffc4 	addi	r20,r20,-1
    f6a0:	003f3706 	br	f380 <__udivdi3+0x298>
    f6a4:	147fbb2e 	bgeu	r2,r17,f594 <__udivdi3+0x4ac>
    f6a8:	297fffc4 	addi	r5,r5,-1
    f6ac:	1405883a 	add	r2,r2,r16
    f6b0:	d9400415 	stw	r5,16(sp)
    f6b4:	003fb706 	br	f594 <__udivdi3+0x4ac>
    f6b8:	b5bfffc4 	addi	r22,r22,-1
    f6bc:	1405883a 	add	r2,r2,r16
    f6c0:	003ec006 	br	f1c4 <__udivdi3+0xdc>

0000f6c4 <__umoddi3>:
    f6c4:	defff104 	addi	sp,sp,-60
    f6c8:	dd800b15 	stw	r22,44(sp)
    f6cc:	dd000915 	stw	r20,36(sp)
    f6d0:	dc000515 	stw	r16,20(sp)
    f6d4:	dfc00e15 	stw	ra,56(sp)
    f6d8:	df000d15 	stw	fp,52(sp)
    f6dc:	ddc00c15 	stw	r23,48(sp)
    f6e0:	dd400a15 	stw	r21,40(sp)
    f6e4:	dcc00815 	stw	r19,32(sp)
    f6e8:	dc800715 	stw	r18,28(sp)
    f6ec:	dc400615 	stw	r17,24(sp)
    f6f0:	3021883a 	mov	r16,r6
    f6f4:	202d883a 	mov	r22,r4
    f6f8:	2829883a 	mov	r20,r5
    f6fc:	38002b1e 	bne	r7,zero,f7ac <__umoddi3+0xe8>
    f700:	29805036 	bltu	r5,r6,f844 <__umoddi3+0x180>
    f704:	30008a26 	beq	r6,zero,f930 <__umoddi3+0x26c>
    f708:	00bfffd4 	movui	r2,65535
    f70c:	14008236 	bltu	r2,r16,f918 <__umoddi3+0x254>
    f710:	00803fc4 	movi	r2,255
    f714:	14013636 	bltu	r2,r16,fbf0 <__umoddi3+0x52c>
    f718:	000b883a 	mov	r5,zero
    f71c:	0005883a 	mov	r2,zero
    f720:	8084d83a 	srl	r2,r16,r2
    f724:	01000074 	movhi	r4,1
    f728:	21138304 	addi	r4,r4,19980
    f72c:	01800804 	movi	r6,32
    f730:	1105883a 	add	r2,r2,r4
    f734:	10c00003 	ldbu	r3,0(r2)
    f738:	28c7883a 	add	r3,r5,r3
    f73c:	30efc83a 	sub	r23,r6,r3
    f740:	b800941e 	bne	r23,zero,f994 <__umoddi3+0x2d0>
    f744:	802ad43a 	srli	r21,r16,16
    f748:	a423c83a 	sub	r17,r20,r16
    f74c:	0039883a 	mov	fp,zero
    f750:	853fffcc 	andi	r20,r16,65535
    f754:	8809883a 	mov	r4,r17
    f758:	a80b883a 	mov	r5,r21
    f75c:	00027e00 	call	27e0 <__udivsi3>
    f760:	8809883a 	mov	r4,r17
    f764:	a80b883a 	mov	r5,r21
    f768:	a0a3383a 	mul	r17,r20,r2
    f76c:	00027e80 	call	27e8 <__umodsi3>
    f770:	1004943a 	slli	r2,r2,16
    f774:	b006d43a 	srli	r3,r22,16
    f778:	10c4b03a 	or	r2,r2,r3
    f77c:	1440032e 	bgeu	r2,r17,f78c <__umoddi3+0xc8>
    f780:	1405883a 	add	r2,r2,r16
    f784:	14000136 	bltu	r2,r16,f78c <__umoddi3+0xc8>
    f788:	14413536 	bltu	r2,r17,fc60 <__umoddi3+0x59c>
    f78c:	1463c83a 	sub	r17,r2,r17
    f790:	8809883a 	mov	r4,r17
    f794:	a80b883a 	mov	r5,r21
    f798:	00027e00 	call	27e0 <__udivsi3>
    f79c:	8809883a 	mov	r4,r17
    f7a0:	a0a3383a 	mul	r17,r20,r2
    f7a4:	a80b883a 	mov	r5,r21
    f7a8:	00004d06 	br	f8e0 <__umoddi3+0x21c>
    f7ac:	380d883a 	mov	r6,r7
    f7b0:	29c0102e 	bgeu	r5,r7,f7f4 <__umoddi3+0x130>
    f7b4:	2011883a 	mov	r8,r4
    f7b8:	2813883a 	mov	r9,r5
    f7bc:	4005883a 	mov	r2,r8
    f7c0:	4807883a 	mov	r3,r9
    f7c4:	dfc00e17 	ldw	ra,56(sp)
    f7c8:	df000d17 	ldw	fp,52(sp)
    f7cc:	ddc00c17 	ldw	r23,48(sp)
    f7d0:	dd800b17 	ldw	r22,44(sp)
    f7d4:	dd400a17 	ldw	r21,40(sp)
    f7d8:	dd000917 	ldw	r20,36(sp)
    f7dc:	dcc00817 	ldw	r19,32(sp)
    f7e0:	dc800717 	ldw	r18,28(sp)
    f7e4:	dc400617 	ldw	r17,24(sp)
    f7e8:	dc000517 	ldw	r16,20(sp)
    f7ec:	dec00f04 	addi	sp,sp,60
    f7f0:	f800283a 	ret
    f7f4:	00bfffd4 	movui	r2,65535
    f7f8:	11c05a36 	bltu	r2,r7,f964 <__umoddi3+0x2a0>
    f7fc:	00803fc4 	movi	r2,255
    f800:	11c0fe36 	bltu	r2,r7,fbfc <__umoddi3+0x538>
    f804:	000b883a 	mov	r5,zero
    f808:	0005883a 	mov	r2,zero
    f80c:	3084d83a 	srl	r2,r6,r2
    f810:	01000074 	movhi	r4,1
    f814:	21138304 	addi	r4,r4,19980
    f818:	01c00804 	movi	r7,32
    f81c:	1105883a 	add	r2,r2,r4
    f820:	10c00003 	ldbu	r3,0(r2)
    f824:	28c7883a 	add	r3,r5,r3
    f828:	38ebc83a 	sub	r21,r7,r3
    f82c:	a800851e 	bne	r21,zero,fa44 <__umoddi3+0x380>
    f830:	35005236 	bltu	r6,r20,f97c <__umoddi3+0x2b8>
    f834:	b400512e 	bgeu	r22,r16,f97c <__umoddi3+0x2b8>
    f838:	b011883a 	mov	r8,r22
    f83c:	a013883a 	mov	r9,r20
    f840:	003fde06 	br	f7bc <__umoddi3+0xf8>
    f844:	00bfffd4 	movui	r2,65535
    f848:	11804036 	bltu	r2,r6,f94c <__umoddi3+0x288>
    f84c:	00803fc4 	movi	r2,255
    f850:	1180ed36 	bltu	r2,r6,fc08 <__umoddi3+0x544>
    f854:	000b883a 	mov	r5,zero
    f858:	0005883a 	mov	r2,zero
    f85c:	8084d83a 	srl	r2,r16,r2
    f860:	01000074 	movhi	r4,1
    f864:	21138304 	addi	r4,r4,19980
    f868:	01800804 	movi	r6,32
    f86c:	1105883a 	add	r2,r2,r4
    f870:	10c00003 	ldbu	r3,0(r2)
    f874:	28c7883a 	add	r3,r5,r3
    f878:	30c7c83a 	sub	r3,r6,r3
    f87c:	1800bf1e 	bne	r3,zero,fb7c <__umoddi3+0x4b8>
    f880:	0039883a 	mov	fp,zero
    f884:	802ad43a 	srli	r21,r16,16
    f888:	a009883a 	mov	r4,r20
    f88c:	85ffffcc 	andi	r23,r16,65535
    f890:	a80b883a 	mov	r5,r21
    f894:	00027e00 	call	27e0 <__udivsi3>
    f898:	a009883a 	mov	r4,r20
    f89c:	a80b883a 	mov	r5,r21
    f8a0:	b8a3383a 	mul	r17,r23,r2
    f8a4:	00027e80 	call	27e8 <__umodsi3>
    f8a8:	1004943a 	slli	r2,r2,16
    f8ac:	b006d43a 	srli	r3,r22,16
    f8b0:	10c4b03a 	or	r2,r2,r3
    f8b4:	1440032e 	bgeu	r2,r17,f8c4 <__umoddi3+0x200>
    f8b8:	1405883a 	add	r2,r2,r16
    f8bc:	14000136 	bltu	r2,r16,f8c4 <__umoddi3+0x200>
    f8c0:	1440e536 	bltu	r2,r17,fc58 <__umoddi3+0x594>
    f8c4:	1463c83a 	sub	r17,r2,r17
    f8c8:	8809883a 	mov	r4,r17
    f8cc:	a80b883a 	mov	r5,r21
    f8d0:	00027e00 	call	27e0 <__udivsi3>
    f8d4:	8809883a 	mov	r4,r17
    f8d8:	b8a3383a 	mul	r17,r23,r2
    f8dc:	a80b883a 	mov	r5,r21
    f8e0:	00027e80 	call	27e8 <__umodsi3>
    f8e4:	1004943a 	slli	r2,r2,16
    f8e8:	b0ffffcc 	andi	r3,r22,65535
    f8ec:	10c4b03a 	or	r2,r2,r3
    f8f0:	1440042e 	bgeu	r2,r17,f904 <__umoddi3+0x240>
    f8f4:	1405883a 	add	r2,r2,r16
    f8f8:	14000236 	bltu	r2,r16,f904 <__umoddi3+0x240>
    f8fc:	1440012e 	bgeu	r2,r17,f904 <__umoddi3+0x240>
    f900:	1405883a 	add	r2,r2,r16
    f904:	1445c83a 	sub	r2,r2,r17
    f908:	1724d83a 	srl	r18,r2,fp
    f90c:	0013883a 	mov	r9,zero
    f910:	9011883a 	mov	r8,r18
    f914:	003fa906 	br	f7bc <__umoddi3+0xf8>
    f918:	00804034 	movhi	r2,256
    f91c:	10bfffc4 	addi	r2,r2,-1
    f920:	1400b036 	bltu	r2,r16,fbe4 <__umoddi3+0x520>
    f924:	01400404 	movi	r5,16
    f928:	2805883a 	mov	r2,r5
    f92c:	003f7c06 	br	f720 <__umoddi3+0x5c>
    f930:	01000044 	movi	r4,1
    f934:	000b883a 	mov	r5,zero
    f938:	00027e00 	call	27e0 <__udivsi3>
    f93c:	1021883a 	mov	r16,r2
    f940:	00bfffd4 	movui	r2,65535
    f944:	143ff436 	bltu	r2,r16,f918 <__umoddi3+0x254>
    f948:	003f7106 	br	f710 <__umoddi3+0x4c>
    f94c:	00804034 	movhi	r2,256
    f950:	10bfffc4 	addi	r2,r2,-1
    f954:	1180af36 	bltu	r2,r6,fc14 <__umoddi3+0x550>
    f958:	01400404 	movi	r5,16
    f95c:	2805883a 	mov	r2,r5
    f960:	003fbe06 	br	f85c <__umoddi3+0x198>
    f964:	00804034 	movhi	r2,256
    f968:	10bfffc4 	addi	r2,r2,-1
    f96c:	11c0ac36 	bltu	r2,r7,fc20 <__umoddi3+0x55c>
    f970:	01400404 	movi	r5,16
    f974:	2805883a 	mov	r2,r5
    f978:	003fa406 	br	f80c <__umoddi3+0x148>
    f97c:	b409c83a 	sub	r4,r22,r16
    f980:	b105803a 	cmpltu	r2,r22,r4
    f984:	a187c83a 	sub	r3,r20,r6
    f988:	18a9c83a 	sub	r20,r3,r2
    f98c:	202d883a 	mov	r22,r4
    f990:	003fa906 	br	f838 <__umoddi3+0x174>
    f994:	85e0983a 	sll	r16,r16,r23
    f998:	35c5c83a 	sub	r2,r6,r23
    f99c:	a0a2d83a 	srl	r17,r20,r2
    f9a0:	802ad43a 	srli	r21,r16,16
    f9a4:	b084d83a 	srl	r2,r22,r2
    f9a8:	a5c6983a 	sll	r3,r20,r23
    f9ac:	8809883a 	mov	r4,r17
    f9b0:	a80b883a 	mov	r5,r21
    f9b4:	1886b03a 	or	r3,r3,r2
    f9b8:	d8c00115 	stw	r3,4(sp)
    f9bc:	853fffcc 	andi	r20,r16,65535
    f9c0:	00027e00 	call	27e0 <__udivsi3>
    f9c4:	8809883a 	mov	r4,r17
    f9c8:	a80b883a 	mov	r5,r21
    f9cc:	a0a3383a 	mul	r17,r20,r2
    f9d0:	00027e80 	call	27e8 <__umodsi3>
    f9d4:	d9000117 	ldw	r4,4(sp)
    f9d8:	1004943a 	slli	r2,r2,16
    f9dc:	b839883a 	mov	fp,r23
    f9e0:	2006d43a 	srli	r3,r4,16
    f9e4:	10c4b03a 	or	r2,r2,r3
    f9e8:	1440022e 	bgeu	r2,r17,f9f4 <__umoddi3+0x330>
    f9ec:	1405883a 	add	r2,r2,r16
    f9f0:	1400962e 	bgeu	r2,r16,fc4c <__umoddi3+0x588>
    f9f4:	1463c83a 	sub	r17,r2,r17
    f9f8:	8809883a 	mov	r4,r17
    f9fc:	a80b883a 	mov	r5,r21
    fa00:	00027e00 	call	27e0 <__udivsi3>
    fa04:	8809883a 	mov	r4,r17
    fa08:	a80b883a 	mov	r5,r21
    fa0c:	a0a3383a 	mul	r17,r20,r2
    fa10:	00027e80 	call	27e8 <__umodsi3>
    fa14:	d9400117 	ldw	r5,4(sp)
    fa18:	1004943a 	slli	r2,r2,16
    fa1c:	28ffffcc 	andi	r3,r5,65535
    fa20:	10c4b03a 	or	r2,r2,r3
    fa24:	1440042e 	bgeu	r2,r17,fa38 <__umoddi3+0x374>
    fa28:	1405883a 	add	r2,r2,r16
    fa2c:	14000236 	bltu	r2,r16,fa38 <__umoddi3+0x374>
    fa30:	1440012e 	bgeu	r2,r17,fa38 <__umoddi3+0x374>
    fa34:	1405883a 	add	r2,r2,r16
    fa38:	b5ec983a 	sll	r22,r22,r23
    fa3c:	1463c83a 	sub	r17,r2,r17
    fa40:	003f4406 	br	f754 <__umoddi3+0x90>
    fa44:	3d4fc83a 	sub	r7,r7,r21
    fa48:	3546983a 	sll	r3,r6,r21
    fa4c:	81c4d83a 	srl	r2,r16,r7
    fa50:	a1e2d83a 	srl	r17,r20,r7
    fa54:	a54c983a 	sll	r6,r20,r21
    fa58:	18aeb03a 	or	r23,r3,r2
    fa5c:	b828d43a 	srli	r20,r23,16
    fa60:	b1c4d83a 	srl	r2,r22,r7
    fa64:	8809883a 	mov	r4,r17
    fa68:	a00b883a 	mov	r5,r20
    fa6c:	308cb03a 	or	r6,r6,r2
    fa70:	d9c00315 	stw	r7,12(sp)
    fa74:	d9800215 	stw	r6,8(sp)
    fa78:	00027e00 	call	27e0 <__udivsi3>
    fa7c:	8809883a 	mov	r4,r17
    fa80:	a00b883a 	mov	r5,r20
    fa84:	1039883a 	mov	fp,r2
    fa88:	00027e80 	call	27e8 <__umodsi3>
    fa8c:	b8ffffcc 	andi	r3,r23,65535
    fa90:	d8c00415 	stw	r3,16(sp)
    fa94:	d9000217 	ldw	r4,8(sp)
    fa98:	d9400417 	ldw	r5,16(sp)
    fa9c:	1004943a 	slli	r2,r2,16
    faa0:	2006d43a 	srli	r3,r4,16
    faa4:	8560983a 	sll	r16,r16,r21
    faa8:	2f23383a 	mul	r17,r5,fp
    faac:	10c4b03a 	or	r2,r2,r3
    fab0:	dc000015 	stw	r16,0(sp)
    fab4:	b56c983a 	sll	r22,r22,r21
    fab8:	1440032e 	bgeu	r2,r17,fac8 <__umoddi3+0x404>
    fabc:	15c5883a 	add	r2,r2,r23
    fac0:	e73fffc4 	addi	fp,fp,-1
    fac4:	15c05d2e 	bgeu	r2,r23,fc3c <__umoddi3+0x578>
    fac8:	1463c83a 	sub	r17,r2,r17
    facc:	8809883a 	mov	r4,r17
    fad0:	a00b883a 	mov	r5,r20
    fad4:	00027e00 	call	27e0 <__udivsi3>
    fad8:	8809883a 	mov	r4,r17
    fadc:	a00b883a 	mov	r5,r20
    fae0:	1021883a 	mov	r16,r2
    fae4:	00027e80 	call	27e8 <__umodsi3>
    fae8:	d8c00417 	ldw	r3,16(sp)
    faec:	d9000217 	ldw	r4,8(sp)
    faf0:	1004943a 	slli	r2,r2,16
    faf4:	1c23383a 	mul	r17,r3,r16
    faf8:	20ffffcc 	andi	r3,r4,65535
    fafc:	10ceb03a 	or	r7,r2,r3
    fb00:	3c40032e 	bgeu	r7,r17,fb10 <__umoddi3+0x44c>
    fb04:	3dcf883a 	add	r7,r7,r23
    fb08:	843fffc4 	addi	r16,r16,-1
    fb0c:	3dc0472e 	bgeu	r7,r23,fc2c <__umoddi3+0x568>
    fb10:	e004943a 	slli	r2,fp,16
    fb14:	d9400017 	ldw	r5,0(sp)
    fb18:	3c4fc83a 	sub	r7,r7,r17
    fb1c:	8084b03a 	or	r2,r16,r2
    fb20:	28ffffcc 	andi	r3,r5,65535
    fb24:	280cd43a 	srli	r6,r5,16
    fb28:	100ad43a 	srli	r5,r2,16
    fb2c:	10bfffcc 	andi	r2,r2,65535
    fb30:	10d1383a 	mul	r8,r2,r3
    fb34:	28c7383a 	mul	r3,r5,r3
    fb38:	1185383a 	mul	r2,r2,r6
    fb3c:	4008d43a 	srli	r4,r8,16
    fb40:	298b383a 	mul	r5,r5,r6
    fb44:	10c5883a 	add	r2,r2,r3
    fb48:	2089883a 	add	r4,r4,r2
    fb4c:	20c0022e 	bgeu	r4,r3,fb58 <__umoddi3+0x494>
    fb50:	00800074 	movhi	r2,1
    fb54:	288b883a 	add	r5,r5,r2
    fb58:	2004d43a 	srli	r2,r4,16
    fb5c:	2008943a 	slli	r4,r4,16
    fb60:	40ffffcc 	andi	r3,r8,65535
    fb64:	288b883a 	add	r5,r5,r2
    fb68:	20c9883a 	add	r4,r4,r3
    fb6c:	39400b36 	bltu	r7,r5,fb9c <__umoddi3+0x4d8>
    fb70:	39403d26 	beq	r7,r5,fc68 <__umoddi3+0x5a4>
    fb74:	394bc83a 	sub	r5,r7,r5
    fb78:	00000f06 	br	fbb8 <__umoddi3+0x4f4>
    fb7c:	30c5c83a 	sub	r2,r6,r3
    fb80:	1839883a 	mov	fp,r3
    fb84:	b084d83a 	srl	r2,r22,r2
    fb88:	a0c6983a 	sll	r3,r20,r3
    fb8c:	8720983a 	sll	r16,r16,fp
    fb90:	b72c983a 	sll	r22,r22,fp
    fb94:	18a8b03a 	or	r20,r3,r2
    fb98:	003f3a06 	br	f884 <__umoddi3+0x1c0>
    fb9c:	d8c00017 	ldw	r3,0(sp)
    fba0:	20c5c83a 	sub	r2,r4,r3
    fba4:	2089803a 	cmpltu	r4,r4,r2
    fba8:	2dc7c83a 	sub	r3,r5,r23
    fbac:	1907c83a 	sub	r3,r3,r4
    fbb0:	38cbc83a 	sub	r5,r7,r3
    fbb4:	1009883a 	mov	r4,r2
    fbb8:	b105c83a 	sub	r2,r22,r4
    fbbc:	b087803a 	cmpltu	r3,r22,r2
    fbc0:	28c7c83a 	sub	r3,r5,r3
    fbc4:	d9400317 	ldw	r5,12(sp)
    fbc8:	1544d83a 	srl	r2,r2,r21
    fbcc:	1948983a 	sll	r4,r3,r5
    fbd0:	1d46d83a 	srl	r3,r3,r21
    fbd4:	20a4b03a 	or	r18,r4,r2
    fbd8:	9011883a 	mov	r8,r18
    fbdc:	1813883a 	mov	r9,r3
    fbe0:	003ef606 	br	f7bc <__umoddi3+0xf8>
    fbe4:	01400604 	movi	r5,24
    fbe8:	2805883a 	mov	r2,r5
    fbec:	003ecc06 	br	f720 <__umoddi3+0x5c>
    fbf0:	01400204 	movi	r5,8
    fbf4:	2805883a 	mov	r2,r5
    fbf8:	003ec906 	br	f720 <__umoddi3+0x5c>
    fbfc:	01400204 	movi	r5,8
    fc00:	2805883a 	mov	r2,r5
    fc04:	003f0106 	br	f80c <__umoddi3+0x148>
    fc08:	01400204 	movi	r5,8
    fc0c:	2805883a 	mov	r2,r5
    fc10:	003f1206 	br	f85c <__umoddi3+0x198>
    fc14:	01400604 	movi	r5,24
    fc18:	2805883a 	mov	r2,r5
    fc1c:	003f0f06 	br	f85c <__umoddi3+0x198>
    fc20:	01400604 	movi	r5,24
    fc24:	2805883a 	mov	r2,r5
    fc28:	003ef806 	br	f80c <__umoddi3+0x148>
    fc2c:	3c7fb82e 	bgeu	r7,r17,fb10 <__umoddi3+0x44c>
    fc30:	843fffc4 	addi	r16,r16,-1
    fc34:	3dcf883a 	add	r7,r7,r23
    fc38:	003fb506 	br	fb10 <__umoddi3+0x44c>
    fc3c:	147fa22e 	bgeu	r2,r17,fac8 <__umoddi3+0x404>
    fc40:	e73fffc4 	addi	fp,fp,-1
    fc44:	15c5883a 	add	r2,r2,r23
    fc48:	003f9f06 	br	fac8 <__umoddi3+0x404>
    fc4c:	147f692e 	bgeu	r2,r17,f9f4 <__umoddi3+0x330>
    fc50:	1405883a 	add	r2,r2,r16
    fc54:	003f6706 	br	f9f4 <__umoddi3+0x330>
    fc58:	1405883a 	add	r2,r2,r16
    fc5c:	003f1906 	br	f8c4 <__umoddi3+0x200>
    fc60:	1405883a 	add	r2,r2,r16
    fc64:	003ec906 	br	f78c <__umoddi3+0xc8>
    fc68:	b13fcc36 	bltu	r22,r4,fb9c <__umoddi3+0x4d8>
    fc6c:	000b883a 	mov	r5,zero
    fc70:	003fd106 	br	fbb8 <__umoddi3+0x4f4>

0000fc74 <__nesf2>:
    fc74:	defff304 	addi	sp,sp,-52
    fc78:	dc400b15 	stw	r17,44(sp)
    fc7c:	dc400204 	addi	r17,sp,8
    fc80:	dc000a15 	stw	r16,40(sp)
    fc84:	d9000015 	stw	r4,0(sp)
    fc88:	d9400115 	stw	r5,4(sp)
    fc8c:	d809883a 	mov	r4,sp
    fc90:	880b883a 	mov	r5,r17
    fc94:	dc000604 	addi	r16,sp,24
    fc98:	dfc00c15 	stw	ra,48(sp)
    fc9c:	00110840 	call	11084 <__unpack_f>
    fca0:	d9000104 	addi	r4,sp,4
    fca4:	800b883a 	mov	r5,r16
    fca8:	00110840 	call	11084 <__unpack_f>
    fcac:	d8800217 	ldw	r2,8(sp)
    fcb0:	00c00044 	movi	r3,1
    fcb4:	180d883a 	mov	r6,r3
    fcb8:	1880062e 	bgeu	r3,r2,fcd4 <__nesf2+0x60>
    fcbc:	d8800617 	ldw	r2,24(sp)
    fcc0:	8809883a 	mov	r4,r17
    fcc4:	800b883a 	mov	r5,r16
    fcc8:	1880022e 	bgeu	r3,r2,fcd4 <__nesf2+0x60>
    fccc:	001114c0 	call	1114c <__fpcmp_parts_f>
    fcd0:	100d883a 	mov	r6,r2
    fcd4:	3005883a 	mov	r2,r6
    fcd8:	dfc00c17 	ldw	ra,48(sp)
    fcdc:	dc400b17 	ldw	r17,44(sp)
    fce0:	dc000a17 	ldw	r16,40(sp)
    fce4:	dec00d04 	addi	sp,sp,52
    fce8:	f800283a 	ret

0000fcec <__gtsf2>:
    fcec:	defff304 	addi	sp,sp,-52
    fcf0:	dc400b15 	stw	r17,44(sp)
    fcf4:	dc400204 	addi	r17,sp,8
    fcf8:	dc000a15 	stw	r16,40(sp)
    fcfc:	d9000015 	stw	r4,0(sp)
    fd00:	d9400115 	stw	r5,4(sp)
    fd04:	d809883a 	mov	r4,sp
    fd08:	880b883a 	mov	r5,r17
    fd0c:	dc000604 	addi	r16,sp,24
    fd10:	dfc00c15 	stw	ra,48(sp)
    fd14:	00110840 	call	11084 <__unpack_f>
    fd18:	d9000104 	addi	r4,sp,4
    fd1c:	800b883a 	mov	r5,r16
    fd20:	00110840 	call	11084 <__unpack_f>
    fd24:	d8800217 	ldw	r2,8(sp)
    fd28:	00c00044 	movi	r3,1
    fd2c:	01bfffc4 	movi	r6,-1
    fd30:	1880062e 	bgeu	r3,r2,fd4c <__gtsf2+0x60>
    fd34:	d8800617 	ldw	r2,24(sp)
    fd38:	8809883a 	mov	r4,r17
    fd3c:	800b883a 	mov	r5,r16
    fd40:	1880022e 	bgeu	r3,r2,fd4c <__gtsf2+0x60>
    fd44:	001114c0 	call	1114c <__fpcmp_parts_f>
    fd48:	100d883a 	mov	r6,r2
    fd4c:	3005883a 	mov	r2,r6
    fd50:	dfc00c17 	ldw	ra,48(sp)
    fd54:	dc400b17 	ldw	r17,44(sp)
    fd58:	dc000a17 	ldw	r16,40(sp)
    fd5c:	dec00d04 	addi	sp,sp,52
    fd60:	f800283a 	ret

0000fd64 <__ltsf2>:
    fd64:	defff304 	addi	sp,sp,-52
    fd68:	dc400b15 	stw	r17,44(sp)
    fd6c:	dc400204 	addi	r17,sp,8
    fd70:	dc000a15 	stw	r16,40(sp)
    fd74:	d9000015 	stw	r4,0(sp)
    fd78:	d9400115 	stw	r5,4(sp)
    fd7c:	d809883a 	mov	r4,sp
    fd80:	880b883a 	mov	r5,r17
    fd84:	dc000604 	addi	r16,sp,24
    fd88:	dfc00c15 	stw	ra,48(sp)
    fd8c:	00110840 	call	11084 <__unpack_f>
    fd90:	d9000104 	addi	r4,sp,4
    fd94:	800b883a 	mov	r5,r16
    fd98:	00110840 	call	11084 <__unpack_f>
    fd9c:	d8800217 	ldw	r2,8(sp)
    fda0:	00c00044 	movi	r3,1
    fda4:	180d883a 	mov	r6,r3
    fda8:	1880062e 	bgeu	r3,r2,fdc4 <__ltsf2+0x60>
    fdac:	d8800617 	ldw	r2,24(sp)
    fdb0:	8809883a 	mov	r4,r17
    fdb4:	800b883a 	mov	r5,r16
    fdb8:	1880022e 	bgeu	r3,r2,fdc4 <__ltsf2+0x60>
    fdbc:	001114c0 	call	1114c <__fpcmp_parts_f>
    fdc0:	100d883a 	mov	r6,r2
    fdc4:	3005883a 	mov	r2,r6
    fdc8:	dfc00c17 	ldw	ra,48(sp)
    fdcc:	dc400b17 	ldw	r17,44(sp)
    fdd0:	dc000a17 	ldw	r16,40(sp)
    fdd4:	dec00d04 	addi	sp,sp,52
    fdd8:	f800283a 	ret

0000fddc <_fpadd_parts>:
    fddc:	defff804 	addi	sp,sp,-32
    fde0:	dcc00315 	stw	r19,12(sp)
    fde4:	2027883a 	mov	r19,r4
    fde8:	21000017 	ldw	r4,0(r4)
    fdec:	00c00044 	movi	r3,1
    fdf0:	dd400515 	stw	r21,20(sp)
    fdf4:	dd000415 	stw	r20,16(sp)
    fdf8:	ddc00715 	stw	r23,28(sp)
    fdfc:	dd800615 	stw	r22,24(sp)
    fe00:	dc800215 	stw	r18,8(sp)
    fe04:	dc400115 	stw	r17,4(sp)
    fe08:	dc000015 	stw	r16,0(sp)
    fe0c:	282b883a 	mov	r21,r5
    fe10:	3029883a 	mov	r20,r6
    fe14:	1900632e 	bgeu	r3,r4,ffa4 <_fpadd_parts+0x1c8>
    fe18:	28800017 	ldw	r2,0(r5)
    fe1c:	1880812e 	bgeu	r3,r2,10024 <_fpadd_parts+0x248>
    fe20:	00c00104 	movi	r3,4
    fe24:	20c0dc26 	beq	r4,r3,10198 <_fpadd_parts+0x3bc>
    fe28:	10c07e26 	beq	r2,r3,10024 <_fpadd_parts+0x248>
    fe2c:	00c00084 	movi	r3,2
    fe30:	10c06726 	beq	r2,r3,ffd0 <_fpadd_parts+0x1f4>
    fe34:	20c07b26 	beq	r4,r3,10024 <_fpadd_parts+0x248>
    fe38:	9dc00217 	ldw	r23,8(r19)
    fe3c:	28c00217 	ldw	r3,8(r5)
    fe40:	9c400317 	ldw	r17,12(r19)
    fe44:	2bc00317 	ldw	r15,12(r5)
    fe48:	b8cdc83a 	sub	r6,r23,r3
    fe4c:	9c800417 	ldw	r18,16(r19)
    fe50:	2c000417 	ldw	r16,16(r5)
    fe54:	3009883a 	mov	r4,r6
    fe58:	30009716 	blt	r6,zero,100b8 <_fpadd_parts+0x2dc>
    fe5c:	00800fc4 	movi	r2,63
    fe60:	11806b16 	blt	r2,r6,10010 <_fpadd_parts+0x234>
    fe64:	0100a40e 	bge	zero,r4,100f8 <_fpadd_parts+0x31c>
    fe68:	35bff804 	addi	r22,r6,-32
    fe6c:	b000bc16 	blt	r22,zero,10160 <_fpadd_parts+0x384>
    fe70:	8596d83a 	srl	r11,r16,r22
    fe74:	0019883a 	mov	r12,zero
    fe78:	0013883a 	mov	r9,zero
    fe7c:	01000044 	movi	r4,1
    fe80:	0015883a 	mov	r10,zero
    fe84:	b000be16 	blt	r22,zero,10180 <_fpadd_parts+0x3a4>
    fe88:	2590983a 	sll	r8,r4,r22
    fe8c:	000f883a 	mov	r7,zero
    fe90:	00bfffc4 	movi	r2,-1
    fe94:	3889883a 	add	r4,r7,r2
    fe98:	408b883a 	add	r5,r8,r2
    fe9c:	21cd803a 	cmpltu	r6,r4,r7
    fea0:	314b883a 	add	r5,r6,r5
    fea4:	7904703a 	and	r2,r15,r4
    fea8:	8146703a 	and	r3,r16,r5
    feac:	10c4b03a 	or	r2,r2,r3
    feb0:	10000226 	beq	r2,zero,febc <_fpadd_parts+0xe0>
    feb4:	02400044 	movi	r9,1
    feb8:	0015883a 	mov	r10,zero
    febc:	5a5eb03a 	or	r15,r11,r9
    fec0:	62a0b03a 	or	r16,r12,r10
    fec4:	99400117 	ldw	r5,4(r19)
    fec8:	a8800117 	ldw	r2,4(r21)
    fecc:	28806e26 	beq	r5,r2,10088 <_fpadd_parts+0x2ac>
    fed0:	28006626 	beq	r5,zero,1006c <_fpadd_parts+0x290>
    fed4:	7c45c83a 	sub	r2,r15,r17
    fed8:	7889803a 	cmpltu	r4,r15,r2
    fedc:	8487c83a 	sub	r3,r16,r18
    fee0:	1909c83a 	sub	r4,r3,r4
    fee4:	100d883a 	mov	r6,r2
    fee8:	200f883a 	mov	r7,r4
    feec:	38007716 	blt	r7,zero,100cc <_fpadd_parts+0x2f0>
    fef0:	a5c00215 	stw	r23,8(r20)
    fef4:	a1c00415 	stw	r7,16(r20)
    fef8:	a0000115 	stw	zero,4(r20)
    fefc:	a1800315 	stw	r6,12(r20)
    ff00:	a2000317 	ldw	r8,12(r20)
    ff04:	a2400417 	ldw	r9,16(r20)
    ff08:	00bfffc4 	movi	r2,-1
    ff0c:	408b883a 	add	r5,r8,r2
    ff10:	2a09803a 	cmpltu	r4,r5,r8
    ff14:	488d883a 	add	r6,r9,r2
    ff18:	01c40034 	movhi	r7,4096
    ff1c:	39ffffc4 	addi	r7,r7,-1
    ff20:	218d883a 	add	r6,r4,r6
    ff24:	39801736 	bltu	r7,r6,ff84 <_fpadd_parts+0x1a8>
    ff28:	31c06526 	beq	r6,r7,100c0 <_fpadd_parts+0x2e4>
    ff2c:	a3000217 	ldw	r12,8(r20)
    ff30:	4209883a 	add	r4,r8,r8
    ff34:	00bfffc4 	movi	r2,-1
    ff38:	220f803a 	cmpltu	r7,r4,r8
    ff3c:	4a4b883a 	add	r5,r9,r9
    ff40:	394f883a 	add	r7,r7,r5
    ff44:	2095883a 	add	r10,r4,r2
    ff48:	3897883a 	add	r11,r7,r2
    ff4c:	510d803a 	cmpltu	r6,r10,r4
    ff50:	6099883a 	add	r12,r12,r2
    ff54:	32d7883a 	add	r11,r6,r11
    ff58:	00840034 	movhi	r2,4096
    ff5c:	10bfffc4 	addi	r2,r2,-1
    ff60:	2011883a 	mov	r8,r4
    ff64:	3813883a 	mov	r9,r7
    ff68:	a1000315 	stw	r4,12(r20)
    ff6c:	a1c00415 	stw	r7,16(r20)
    ff70:	a3000215 	stw	r12,8(r20)
    ff74:	12c00336 	bltu	r2,r11,ff84 <_fpadd_parts+0x1a8>
    ff78:	58bfed1e 	bne	r11,r2,ff30 <_fpadd_parts+0x154>
    ff7c:	00bfff84 	movi	r2,-2
    ff80:	12bfeb2e 	bgeu	r2,r10,ff30 <_fpadd_parts+0x154>
    ff84:	a2800417 	ldw	r10,16(r20)
    ff88:	008000c4 	movi	r2,3
    ff8c:	00c80034 	movhi	r3,8192
    ff90:	18ffffc4 	addi	r3,r3,-1
    ff94:	a2400317 	ldw	r9,12(r20)
    ff98:	a0800015 	stw	r2,0(r20)
    ff9c:	1a802336 	bltu	r3,r10,1002c <_fpadd_parts+0x250>
    ffa0:	a027883a 	mov	r19,r20
    ffa4:	9805883a 	mov	r2,r19
    ffa8:	ddc00717 	ldw	r23,28(sp)
    ffac:	dd800617 	ldw	r22,24(sp)
    ffb0:	dd400517 	ldw	r21,20(sp)
    ffb4:	dd000417 	ldw	r20,16(sp)
    ffb8:	dcc00317 	ldw	r19,12(sp)
    ffbc:	dc800217 	ldw	r18,8(sp)
    ffc0:	dc400117 	ldw	r17,4(sp)
    ffc4:	dc000017 	ldw	r16,0(sp)
    ffc8:	dec00804 	addi	sp,sp,32
    ffcc:	f800283a 	ret
    ffd0:	20fff41e 	bne	r4,r3,ffa4 <_fpadd_parts+0x1c8>
    ffd4:	31000015 	stw	r4,0(r6)
    ffd8:	98800117 	ldw	r2,4(r19)
    ffdc:	30800115 	stw	r2,4(r6)
    ffe0:	98c00217 	ldw	r3,8(r19)
    ffe4:	30c00215 	stw	r3,8(r6)
    ffe8:	98800317 	ldw	r2,12(r19)
    ffec:	30800315 	stw	r2,12(r6)
    fff0:	98c00417 	ldw	r3,16(r19)
    fff4:	30c00415 	stw	r3,16(r6)
    fff8:	98800117 	ldw	r2,4(r19)
    fffc:	28c00117 	ldw	r3,4(r5)
   10000:	3027883a 	mov	r19,r6
   10004:	10c4703a 	and	r2,r2,r3
   10008:	30800115 	stw	r2,4(r6)
   1000c:	003fe506 	br	ffa4 <_fpadd_parts+0x1c8>
   10010:	1dc02616 	blt	r3,r23,100ac <_fpadd_parts+0x2d0>
   10014:	0023883a 	mov	r17,zero
   10018:	182f883a 	mov	r23,r3
   1001c:	0025883a 	mov	r18,zero
   10020:	003fa806 	br	fec4 <_fpadd_parts+0xe8>
   10024:	a827883a 	mov	r19,r21
   10028:	003fde06 	br	ffa4 <_fpadd_parts+0x1c8>
   1002c:	01800044 	movi	r6,1
   10030:	500497fa 	slli	r2,r10,31
   10034:	4808d07a 	srli	r4,r9,1
   10038:	518ad83a 	srl	r5,r10,r6
   1003c:	a2000217 	ldw	r8,8(r20)
   10040:	1108b03a 	or	r4,r2,r4
   10044:	0007883a 	mov	r3,zero
   10048:	4984703a 	and	r2,r9,r6
   1004c:	208cb03a 	or	r6,r4,r2
   10050:	28ceb03a 	or	r7,r5,r3
   10054:	42000044 	addi	r8,r8,1
   10058:	a027883a 	mov	r19,r20
   1005c:	a1c00415 	stw	r7,16(r20)
   10060:	a2000215 	stw	r8,8(r20)
   10064:	a1800315 	stw	r6,12(r20)
   10068:	003fce06 	br	ffa4 <_fpadd_parts+0x1c8>
   1006c:	8bc5c83a 	sub	r2,r17,r15
   10070:	8889803a 	cmpltu	r4,r17,r2
   10074:	9407c83a 	sub	r3,r18,r16
   10078:	1909c83a 	sub	r4,r3,r4
   1007c:	100d883a 	mov	r6,r2
   10080:	200f883a 	mov	r7,r4
   10084:	003f9906 	br	feec <_fpadd_parts+0x110>
   10088:	7c45883a 	add	r2,r15,r17
   1008c:	13c9803a 	cmpltu	r4,r2,r15
   10090:	8487883a 	add	r3,r16,r18
   10094:	20c9883a 	add	r4,r4,r3
   10098:	a1400115 	stw	r5,4(r20)
   1009c:	a5c00215 	stw	r23,8(r20)
   100a0:	a0800315 	stw	r2,12(r20)
   100a4:	a1000415 	stw	r4,16(r20)
   100a8:	003fb606 	br	ff84 <_fpadd_parts+0x1a8>
   100ac:	001f883a 	mov	r15,zero
   100b0:	0021883a 	mov	r16,zero
   100b4:	003f8306 	br	fec4 <_fpadd_parts+0xe8>
   100b8:	018dc83a 	sub	r6,zero,r6
   100bc:	003f6706 	br	fe5c <_fpadd_parts+0x80>
   100c0:	00bfff84 	movi	r2,-2
   100c4:	117faf36 	bltu	r2,r5,ff84 <_fpadd_parts+0x1a8>
   100c8:	003f9806 	br	ff2c <_fpadd_parts+0x150>
   100cc:	0005883a 	mov	r2,zero
   100d0:	1189c83a 	sub	r4,r2,r6
   100d4:	1105803a 	cmpltu	r2,r2,r4
   100d8:	01cbc83a 	sub	r5,zero,r7
   100dc:	2885c83a 	sub	r2,r5,r2
   100e0:	01800044 	movi	r6,1
   100e4:	a1800115 	stw	r6,4(r20)
   100e8:	a5c00215 	stw	r23,8(r20)
   100ec:	a1000315 	stw	r4,12(r20)
   100f0:	a0800415 	stw	r2,16(r20)
   100f4:	003f8206 	br	ff00 <_fpadd_parts+0x124>
   100f8:	203f7226 	beq	r4,zero,fec4 <_fpadd_parts+0xe8>
   100fc:	35bff804 	addi	r22,r6,-32
   10100:	b9af883a 	add	r23,r23,r6
   10104:	b0003116 	blt	r22,zero,101cc <_fpadd_parts+0x3f0>
   10108:	959ad83a 	srl	r13,r18,r22
   1010c:	001d883a 	mov	r14,zero
   10110:	000f883a 	mov	r7,zero
   10114:	01000044 	movi	r4,1
   10118:	0011883a 	mov	r8,zero
   1011c:	b0002516 	blt	r22,zero,101b4 <_fpadd_parts+0x3d8>
   10120:	2594983a 	sll	r10,r4,r22
   10124:	0013883a 	mov	r9,zero
   10128:	00bfffc4 	movi	r2,-1
   1012c:	4889883a 	add	r4,r9,r2
   10130:	508b883a 	add	r5,r10,r2
   10134:	224d803a 	cmpltu	r6,r4,r9
   10138:	314b883a 	add	r5,r6,r5
   1013c:	8904703a 	and	r2,r17,r4
   10140:	9146703a 	and	r3,r18,r5
   10144:	10c4b03a 	or	r2,r2,r3
   10148:	10000226 	beq	r2,zero,10154 <_fpadd_parts+0x378>
   1014c:	01c00044 	movi	r7,1
   10150:	0011883a 	mov	r8,zero
   10154:	69e2b03a 	or	r17,r13,r7
   10158:	7224b03a 	or	r18,r14,r8
   1015c:	003f5906 	br	fec4 <_fpadd_parts+0xe8>
   10160:	8407883a 	add	r3,r16,r16
   10164:	008007c4 	movi	r2,31
   10168:	1185c83a 	sub	r2,r2,r6
   1016c:	1886983a 	sll	r3,r3,r2
   10170:	7996d83a 	srl	r11,r15,r6
   10174:	8198d83a 	srl	r12,r16,r6
   10178:	1ad6b03a 	or	r11,r3,r11
   1017c:	003f3e06 	br	fe78 <_fpadd_parts+0x9c>
   10180:	2006d07a 	srli	r3,r4,1
   10184:	008007c4 	movi	r2,31
   10188:	1185c83a 	sub	r2,r2,r6
   1018c:	1890d83a 	srl	r8,r3,r2
   10190:	218e983a 	sll	r7,r4,r6
   10194:	003f3e06 	br	fe90 <_fpadd_parts+0xb4>
   10198:	113f821e 	bne	r2,r4,ffa4 <_fpadd_parts+0x1c8>
   1019c:	28c00117 	ldw	r3,4(r5)
   101a0:	98800117 	ldw	r2,4(r19)
   101a4:	10ff7f26 	beq	r2,r3,ffa4 <_fpadd_parts+0x1c8>
   101a8:	04c00074 	movhi	r19,1
   101ac:	9cd37e04 	addi	r19,r19,19960
   101b0:	003f7c06 	br	ffa4 <_fpadd_parts+0x1c8>
   101b4:	2006d07a 	srli	r3,r4,1
   101b8:	008007c4 	movi	r2,31
   101bc:	1185c83a 	sub	r2,r2,r6
   101c0:	1894d83a 	srl	r10,r3,r2
   101c4:	2192983a 	sll	r9,r4,r6
   101c8:	003fd706 	br	10128 <_fpadd_parts+0x34c>
   101cc:	9487883a 	add	r3,r18,r18
   101d0:	008007c4 	movi	r2,31
   101d4:	1185c83a 	sub	r2,r2,r6
   101d8:	1886983a 	sll	r3,r3,r2
   101dc:	899ad83a 	srl	r13,r17,r6
   101e0:	919cd83a 	srl	r14,r18,r6
   101e4:	1b5ab03a 	or	r13,r3,r13
   101e8:	003fc906 	br	10110 <_fpadd_parts+0x334>

000101ec <__subdf3>:
   101ec:	deffea04 	addi	sp,sp,-88
   101f0:	dcc01415 	stw	r19,80(sp)
   101f4:	dcc00404 	addi	r19,sp,16
   101f8:	2011883a 	mov	r8,r4
   101fc:	2813883a 	mov	r9,r5
   10200:	dc401315 	stw	r17,76(sp)
   10204:	d809883a 	mov	r4,sp
   10208:	980b883a 	mov	r5,r19
   1020c:	dc400904 	addi	r17,sp,36
   10210:	dfc01515 	stw	ra,84(sp)
   10214:	da400115 	stw	r9,4(sp)
   10218:	d9c00315 	stw	r7,12(sp)
   1021c:	da000015 	stw	r8,0(sp)
   10220:	d9800215 	stw	r6,8(sp)
   10224:	00115340 	call	11534 <__unpack_d>
   10228:	d9000204 	addi	r4,sp,8
   1022c:	880b883a 	mov	r5,r17
   10230:	00115340 	call	11534 <__unpack_d>
   10234:	d8800a17 	ldw	r2,40(sp)
   10238:	880b883a 	mov	r5,r17
   1023c:	9809883a 	mov	r4,r19
   10240:	d9800e04 	addi	r6,sp,56
   10244:	1080005c 	xori	r2,r2,1
   10248:	d8800a15 	stw	r2,40(sp)
   1024c:	000fddc0 	call	fddc <_fpadd_parts>
   10250:	1009883a 	mov	r4,r2
   10254:	00112200 	call	11220 <__pack_d>
   10258:	dfc01517 	ldw	ra,84(sp)
   1025c:	dcc01417 	ldw	r19,80(sp)
   10260:	dc401317 	ldw	r17,76(sp)
   10264:	dec01604 	addi	sp,sp,88
   10268:	f800283a 	ret

0001026c <__adddf3>:
   1026c:	deffea04 	addi	sp,sp,-88
   10270:	dcc01415 	stw	r19,80(sp)
   10274:	dcc00404 	addi	r19,sp,16
   10278:	2011883a 	mov	r8,r4
   1027c:	2813883a 	mov	r9,r5
   10280:	dc401315 	stw	r17,76(sp)
   10284:	d809883a 	mov	r4,sp
   10288:	980b883a 	mov	r5,r19
   1028c:	dc400904 	addi	r17,sp,36
   10290:	dfc01515 	stw	ra,84(sp)
   10294:	da400115 	stw	r9,4(sp)
   10298:	d9c00315 	stw	r7,12(sp)
   1029c:	da000015 	stw	r8,0(sp)
   102a0:	d9800215 	stw	r6,8(sp)
   102a4:	00115340 	call	11534 <__unpack_d>
   102a8:	d9000204 	addi	r4,sp,8
   102ac:	880b883a 	mov	r5,r17
   102b0:	00115340 	call	11534 <__unpack_d>
   102b4:	d9800e04 	addi	r6,sp,56
   102b8:	9809883a 	mov	r4,r19
   102bc:	880b883a 	mov	r5,r17
   102c0:	000fddc0 	call	fddc <_fpadd_parts>
   102c4:	1009883a 	mov	r4,r2
   102c8:	00112200 	call	11220 <__pack_d>
   102cc:	dfc01517 	ldw	ra,84(sp)
   102d0:	dcc01417 	ldw	r19,80(sp)
   102d4:	dc401317 	ldw	r17,76(sp)
   102d8:	dec01604 	addi	sp,sp,88
   102dc:	f800283a 	ret

000102e0 <__muldf3>:
   102e0:	deffe004 	addi	sp,sp,-128
   102e4:	dc401815 	stw	r17,96(sp)
   102e8:	dc400404 	addi	r17,sp,16
   102ec:	2011883a 	mov	r8,r4
   102f0:	2813883a 	mov	r9,r5
   102f4:	dc001715 	stw	r16,92(sp)
   102f8:	d809883a 	mov	r4,sp
   102fc:	880b883a 	mov	r5,r17
   10300:	dc000904 	addi	r16,sp,36
   10304:	dfc01f15 	stw	ra,124(sp)
   10308:	da400115 	stw	r9,4(sp)
   1030c:	d9c00315 	stw	r7,12(sp)
   10310:	da000015 	stw	r8,0(sp)
   10314:	d9800215 	stw	r6,8(sp)
   10318:	ddc01e15 	stw	r23,120(sp)
   1031c:	dd801d15 	stw	r22,116(sp)
   10320:	dd401c15 	stw	r21,112(sp)
   10324:	dd001b15 	stw	r20,108(sp)
   10328:	dcc01a15 	stw	r19,104(sp)
   1032c:	dc801915 	stw	r18,100(sp)
   10330:	00115340 	call	11534 <__unpack_d>
   10334:	d9000204 	addi	r4,sp,8
   10338:	800b883a 	mov	r5,r16
   1033c:	00115340 	call	11534 <__unpack_d>
   10340:	d9000417 	ldw	r4,16(sp)
   10344:	00800044 	movi	r2,1
   10348:	1100102e 	bgeu	r2,r4,1038c <__muldf3+0xac>
   1034c:	d8c00917 	ldw	r3,36(sp)
   10350:	10c0062e 	bgeu	r2,r3,1036c <__muldf3+0x8c>
   10354:	00800104 	movi	r2,4
   10358:	20800a26 	beq	r4,r2,10384 <__muldf3+0xa4>
   1035c:	1880cc26 	beq	r3,r2,10690 <__muldf3+0x3b0>
   10360:	00800084 	movi	r2,2
   10364:	20800926 	beq	r4,r2,1038c <__muldf3+0xac>
   10368:	1880191e 	bne	r3,r2,103d0 <__muldf3+0xf0>
   1036c:	d8c00a17 	ldw	r3,40(sp)
   10370:	d8800517 	ldw	r2,20(sp)
   10374:	8009883a 	mov	r4,r16
   10378:	10c4c03a 	cmpne	r2,r2,r3
   1037c:	d8800a15 	stw	r2,40(sp)
   10380:	00000706 	br	103a0 <__muldf3+0xc0>
   10384:	00800084 	movi	r2,2
   10388:	1880c326 	beq	r3,r2,10698 <__muldf3+0x3b8>
   1038c:	d8800517 	ldw	r2,20(sp)
   10390:	d8c00a17 	ldw	r3,40(sp)
   10394:	8809883a 	mov	r4,r17
   10398:	10c4c03a 	cmpne	r2,r2,r3
   1039c:	d8800515 	stw	r2,20(sp)
   103a0:	00112200 	call	11220 <__pack_d>
   103a4:	dfc01f17 	ldw	ra,124(sp)
   103a8:	ddc01e17 	ldw	r23,120(sp)
   103ac:	dd801d17 	ldw	r22,116(sp)
   103b0:	dd401c17 	ldw	r21,112(sp)
   103b4:	dd001b17 	ldw	r20,108(sp)
   103b8:	dcc01a17 	ldw	r19,104(sp)
   103bc:	dc801917 	ldw	r18,100(sp)
   103c0:	dc401817 	ldw	r17,96(sp)
   103c4:	dc001717 	ldw	r16,92(sp)
   103c8:	dec02004 	addi	sp,sp,128
   103cc:	f800283a 	ret
   103d0:	dd800717 	ldw	r22,28(sp)
   103d4:	dc800c17 	ldw	r18,48(sp)
   103d8:	002b883a 	mov	r21,zero
   103dc:	0023883a 	mov	r17,zero
   103e0:	a80b883a 	mov	r5,r21
   103e4:	b00d883a 	mov	r6,r22
   103e8:	880f883a 	mov	r7,r17
   103ec:	ddc00817 	ldw	r23,32(sp)
   103f0:	dcc00d17 	ldw	r19,52(sp)
   103f4:	9009883a 	mov	r4,r18
   103f8:	000efac0 	call	efac <__muldi3>
   103fc:	001b883a 	mov	r13,zero
   10400:	680f883a 	mov	r7,r13
   10404:	b009883a 	mov	r4,r22
   10408:	000b883a 	mov	r5,zero
   1040c:	980d883a 	mov	r6,r19
   10410:	b82d883a 	mov	r22,r23
   10414:	002f883a 	mov	r23,zero
   10418:	db401615 	stw	r13,88(sp)
   1041c:	d8801315 	stw	r2,76(sp)
   10420:	d8c01415 	stw	r3,80(sp)
   10424:	dcc01515 	stw	r19,84(sp)
   10428:	000efac0 	call	efac <__muldi3>
   1042c:	b00d883a 	mov	r6,r22
   10430:	000b883a 	mov	r5,zero
   10434:	9009883a 	mov	r4,r18
   10438:	b80f883a 	mov	r7,r23
   1043c:	1021883a 	mov	r16,r2
   10440:	1823883a 	mov	r17,r3
   10444:	000efac0 	call	efac <__muldi3>
   10448:	8085883a 	add	r2,r16,r2
   1044c:	140d803a 	cmpltu	r6,r2,r16
   10450:	88c7883a 	add	r3,r17,r3
   10454:	30cd883a 	add	r6,r6,r3
   10458:	1029883a 	mov	r20,r2
   1045c:	302b883a 	mov	r21,r6
   10460:	da801317 	ldw	r10,76(sp)
   10464:	dac01417 	ldw	r11,80(sp)
   10468:	db001517 	ldw	r12,84(sp)
   1046c:	db401617 	ldw	r13,88(sp)
   10470:	3440612e 	bgeu	r6,r17,105f8 <__muldf3+0x318>
   10474:	0009883a 	mov	r4,zero
   10478:	5105883a 	add	r2,r10,r4
   1047c:	128d803a 	cmpltu	r6,r2,r10
   10480:	5d07883a 	add	r3,r11,r20
   10484:	30cd883a 	add	r6,r6,r3
   10488:	0021883a 	mov	r16,zero
   1048c:	04400044 	movi	r17,1
   10490:	1025883a 	mov	r18,r2
   10494:	3027883a 	mov	r19,r6
   10498:	32c06236 	bltu	r6,r11,10624 <__muldf3+0x344>
   1049c:	59807a26 	beq	r11,r6,10688 <__muldf3+0x3a8>
   104a0:	680b883a 	mov	r5,r13
   104a4:	b80f883a 	mov	r7,r23
   104a8:	6009883a 	mov	r4,r12
   104ac:	b00d883a 	mov	r6,r22
   104b0:	000efac0 	call	efac <__muldi3>
   104b4:	1009883a 	mov	r4,r2
   104b8:	000f883a 	mov	r7,zero
   104bc:	1545883a 	add	r2,r2,r21
   104c0:	1111803a 	cmpltu	r8,r2,r4
   104c4:	19c7883a 	add	r3,r3,r7
   104c8:	40c7883a 	add	r3,r8,r3
   104cc:	88cb883a 	add	r5,r17,r3
   104d0:	d8c00617 	ldw	r3,24(sp)
   104d4:	8089883a 	add	r4,r16,r2
   104d8:	d8800b17 	ldw	r2,44(sp)
   104dc:	18c00104 	addi	r3,r3,4
   104e0:	240d803a 	cmpltu	r6,r4,r16
   104e4:	10c7883a 	add	r3,r2,r3
   104e8:	2013883a 	mov	r9,r4
   104ec:	d8800a17 	ldw	r2,40(sp)
   104f0:	d9000517 	ldw	r4,20(sp)
   104f4:	314d883a 	add	r6,r6,r5
   104f8:	3015883a 	mov	r10,r6
   104fc:	2088c03a 	cmpne	r4,r4,r2
   10500:	00880034 	movhi	r2,8192
   10504:	10bfffc4 	addi	r2,r2,-1
   10508:	d9000f15 	stw	r4,60(sp)
   1050c:	d8c01015 	stw	r3,64(sp)
   10510:	1180162e 	bgeu	r2,r6,1056c <__muldf3+0x28c>
   10514:	1811883a 	mov	r8,r3
   10518:	101f883a 	mov	r15,r2
   1051c:	980497fa 	slli	r2,r19,31
   10520:	9016d07a 	srli	r11,r18,1
   10524:	500697fa 	slli	r3,r10,31
   10528:	480cd07a 	srli	r6,r9,1
   1052c:	500ed07a 	srli	r7,r10,1
   10530:	12d6b03a 	or	r11,r2,r11
   10534:	00800044 	movi	r2,1
   10538:	198cb03a 	or	r6,r3,r6
   1053c:	4888703a 	and	r4,r9,r2
   10540:	9818d07a 	srli	r12,r19,1
   10544:	001b883a 	mov	r13,zero
   10548:	03a00034 	movhi	r14,32768
   1054c:	3013883a 	mov	r9,r6
   10550:	3815883a 	mov	r10,r7
   10554:	4091883a 	add	r8,r8,r2
   10558:	20000226 	beq	r4,zero,10564 <__muldf3+0x284>
   1055c:	5b64b03a 	or	r18,r11,r13
   10560:	63a6b03a 	or	r19,r12,r14
   10564:	7abfed36 	bltu	r15,r10,1051c <__muldf3+0x23c>
   10568:	da001015 	stw	r8,64(sp)
   1056c:	00840034 	movhi	r2,4096
   10570:	10bfffc4 	addi	r2,r2,-1
   10574:	12801436 	bltu	r2,r10,105c8 <__muldf3+0x2e8>
   10578:	da001017 	ldw	r8,64(sp)
   1057c:	101f883a 	mov	r15,r2
   10580:	4a45883a 	add	r2,r9,r9
   10584:	124d803a 	cmpltu	r6,r2,r9
   10588:	5287883a 	add	r3,r10,r10
   1058c:	9497883a 	add	r11,r18,r18
   10590:	5c8f803a 	cmpltu	r7,r11,r18
   10594:	9cd9883a 	add	r12,r19,r19
   10598:	01000044 	movi	r4,1
   1059c:	30cd883a 	add	r6,r6,r3
   105a0:	3b0f883a 	add	r7,r7,r12
   105a4:	423fffc4 	addi	r8,r8,-1
   105a8:	1013883a 	mov	r9,r2
   105ac:	3015883a 	mov	r10,r6
   105b0:	111ab03a 	or	r13,r2,r4
   105b4:	98003016 	blt	r19,zero,10678 <__muldf3+0x398>
   105b8:	5825883a 	mov	r18,r11
   105bc:	3827883a 	mov	r19,r7
   105c0:	7abfef2e 	bgeu	r15,r10,10580 <__muldf3+0x2a0>
   105c4:	da001015 	stw	r8,64(sp)
   105c8:	00803fc4 	movi	r2,255
   105cc:	488e703a 	and	r7,r9,r2
   105d0:	00802004 	movi	r2,128
   105d4:	0007883a 	mov	r3,zero
   105d8:	0011883a 	mov	r8,zero
   105dc:	38801826 	beq	r7,r2,10640 <__muldf3+0x360>
   105e0:	008000c4 	movi	r2,3
   105e4:	d9000e04 	addi	r4,sp,56
   105e8:	da801215 	stw	r10,72(sp)
   105ec:	d8800e15 	stw	r2,56(sp)
   105f0:	da401115 	stw	r9,68(sp)
   105f4:	003f6a06 	br	103a0 <__muldf3+0xc0>
   105f8:	89802126 	beq	r17,r6,10680 <__muldf3+0x3a0>
   105fc:	0009883a 	mov	r4,zero
   10600:	5105883a 	add	r2,r10,r4
   10604:	128d803a 	cmpltu	r6,r2,r10
   10608:	5d07883a 	add	r3,r11,r20
   1060c:	30cd883a 	add	r6,r6,r3
   10610:	0021883a 	mov	r16,zero
   10614:	0023883a 	mov	r17,zero
   10618:	1025883a 	mov	r18,r2
   1061c:	3027883a 	mov	r19,r6
   10620:	32ff9e2e 	bgeu	r6,r11,1049c <__muldf3+0x1bc>
   10624:	00800044 	movi	r2,1
   10628:	8089883a 	add	r4,r16,r2
   1062c:	240d803a 	cmpltu	r6,r4,r16
   10630:	344d883a 	add	r6,r6,r17
   10634:	2021883a 	mov	r16,r4
   10638:	3023883a 	mov	r17,r6
   1063c:	003f9806 	br	104a0 <__muldf3+0x1c0>
   10640:	403fe71e 	bne	r8,zero,105e0 <__muldf3+0x300>
   10644:	01004004 	movi	r4,256
   10648:	4904703a 	and	r2,r9,r4
   1064c:	10c4b03a 	or	r2,r2,r3
   10650:	103fe31e 	bne	r2,zero,105e0 <__muldf3+0x300>
   10654:	94c4b03a 	or	r2,r18,r19
   10658:	103fe126 	beq	r2,zero,105e0 <__muldf3+0x300>
   1065c:	49c5883a 	add	r2,r9,r7
   10660:	1251803a 	cmpltu	r8,r2,r9
   10664:	4291883a 	add	r8,r8,r10
   10668:	013fc004 	movi	r4,-256
   1066c:	1112703a 	and	r9,r2,r4
   10670:	4015883a 	mov	r10,r8
   10674:	003fda06 	br	105e0 <__muldf3+0x300>
   10678:	6813883a 	mov	r9,r13
   1067c:	003fce06 	br	105b8 <__muldf3+0x2d8>
   10680:	143f7c36 	bltu	r2,r16,10474 <__muldf3+0x194>
   10684:	003fdd06 	br	105fc <__muldf3+0x31c>
   10688:	12bf852e 	bgeu	r2,r10,104a0 <__muldf3+0x1c0>
   1068c:	003fe506 	br	10624 <__muldf3+0x344>
   10690:	00800084 	movi	r2,2
   10694:	20bf351e 	bne	r4,r2,1036c <__muldf3+0x8c>
   10698:	01000074 	movhi	r4,1
   1069c:	21137e04 	addi	r4,r4,19960
   106a0:	003f3f06 	br	103a0 <__muldf3+0xc0>

000106a4 <__divdf3>:
   106a4:	deffed04 	addi	sp,sp,-76
   106a8:	dcc01115 	stw	r19,68(sp)
   106ac:	dcc00404 	addi	r19,sp,16
   106b0:	2011883a 	mov	r8,r4
   106b4:	2813883a 	mov	r9,r5
   106b8:	dc000e15 	stw	r16,56(sp)
   106bc:	d809883a 	mov	r4,sp
   106c0:	980b883a 	mov	r5,r19
   106c4:	dc000904 	addi	r16,sp,36
   106c8:	dfc01215 	stw	ra,72(sp)
   106cc:	da400115 	stw	r9,4(sp)
   106d0:	d9c00315 	stw	r7,12(sp)
   106d4:	da000015 	stw	r8,0(sp)
   106d8:	d9800215 	stw	r6,8(sp)
   106dc:	dc801015 	stw	r18,64(sp)
   106e0:	dc400f15 	stw	r17,60(sp)
   106e4:	00115340 	call	11534 <__unpack_d>
   106e8:	d9000204 	addi	r4,sp,8
   106ec:	800b883a 	mov	r5,r16
   106f0:	00115340 	call	11534 <__unpack_d>
   106f4:	d9000417 	ldw	r4,16(sp)
   106f8:	00800044 	movi	r2,1
   106fc:	11000b2e 	bgeu	r2,r4,1072c <__divdf3+0x88>
   10700:	d9400917 	ldw	r5,36(sp)
   10704:	1140762e 	bgeu	r2,r5,108e0 <__divdf3+0x23c>
   10708:	d8800517 	ldw	r2,20(sp)
   1070c:	d8c00a17 	ldw	r3,40(sp)
   10710:	01800104 	movi	r6,4
   10714:	10c4f03a 	xor	r2,r2,r3
   10718:	d8800515 	stw	r2,20(sp)
   1071c:	21800226 	beq	r4,r6,10728 <__divdf3+0x84>
   10720:	00800084 	movi	r2,2
   10724:	2080141e 	bne	r4,r2,10778 <__divdf3+0xd4>
   10728:	29000926 	beq	r5,r4,10750 <__divdf3+0xac>
   1072c:	9809883a 	mov	r4,r19
   10730:	00112200 	call	11220 <__pack_d>
   10734:	dfc01217 	ldw	ra,72(sp)
   10738:	dcc01117 	ldw	r19,68(sp)
   1073c:	dc801017 	ldw	r18,64(sp)
   10740:	dc400f17 	ldw	r17,60(sp)
   10744:	dc000e17 	ldw	r16,56(sp)
   10748:	dec01304 	addi	sp,sp,76
   1074c:	f800283a 	ret
   10750:	01000074 	movhi	r4,1
   10754:	21137e04 	addi	r4,r4,19960
   10758:	00112200 	call	11220 <__pack_d>
   1075c:	dfc01217 	ldw	ra,72(sp)
   10760:	dcc01117 	ldw	r19,68(sp)
   10764:	dc801017 	ldw	r18,64(sp)
   10768:	dc400f17 	ldw	r17,60(sp)
   1076c:	dc000e17 	ldw	r16,56(sp)
   10770:	dec01304 	addi	sp,sp,76
   10774:	f800283a 	ret
   10778:	29805b26 	beq	r5,r6,108e8 <__divdf3+0x244>
   1077c:	28802d26 	beq	r5,r2,10834 <__divdf3+0x190>
   10780:	d8c00617 	ldw	r3,24(sp)
   10784:	d8800b17 	ldw	r2,44(sp)
   10788:	d9c00817 	ldw	r7,32(sp)
   1078c:	dc400d17 	ldw	r17,52(sp)
   10790:	188bc83a 	sub	r5,r3,r2
   10794:	d9800717 	ldw	r6,28(sp)
   10798:	dc000c17 	ldw	r16,48(sp)
   1079c:	d9400615 	stw	r5,24(sp)
   107a0:	3c403836 	bltu	r7,r17,10884 <__divdf3+0x1e0>
   107a4:	89c03626 	beq	r17,r7,10880 <__divdf3+0x1dc>
   107a8:	0015883a 	mov	r10,zero
   107ac:	001d883a 	mov	r14,zero
   107b0:	02c40034 	movhi	r11,4096
   107b4:	001f883a 	mov	r15,zero
   107b8:	003f883a 	mov	ra,zero
   107bc:	04800f44 	movi	r18,61
   107c0:	00000f06 	br	10800 <__divdf3+0x15c>
   107c4:	601d883a 	mov	r14,r12
   107c8:	681f883a 	mov	r15,r13
   107cc:	400d883a 	mov	r6,r8
   107d0:	100f883a 	mov	r7,r2
   107d4:	3191883a 	add	r8,r6,r6
   107d8:	5808d07a 	srli	r4,r11,1
   107dc:	4185803a 	cmpltu	r2,r8,r6
   107e0:	39d3883a 	add	r9,r7,r7
   107e4:	28c6b03a 	or	r3,r5,r3
   107e8:	1245883a 	add	r2,r2,r9
   107ec:	1815883a 	mov	r10,r3
   107f0:	2017883a 	mov	r11,r4
   107f4:	400d883a 	mov	r6,r8
   107f8:	100f883a 	mov	r7,r2
   107fc:	fc801726 	beq	ra,r18,1085c <__divdf3+0x1b8>
   10800:	580a97fa 	slli	r5,r11,31
   10804:	5006d07a 	srli	r3,r10,1
   10808:	ffc00044 	addi	ra,ra,1
   1080c:	3c7ff136 	bltu	r7,r17,107d4 <__divdf3+0x130>
   10810:	3411c83a 	sub	r8,r6,r16
   10814:	3205803a 	cmpltu	r2,r6,r8
   10818:	3c53c83a 	sub	r9,r7,r17
   1081c:	7298b03a 	or	r12,r14,r10
   10820:	7adab03a 	or	r13,r15,r11
   10824:	4885c83a 	sub	r2,r9,r2
   10828:	89ffe61e 	bne	r17,r7,107c4 <__divdf3+0x120>
   1082c:	343fe936 	bltu	r6,r16,107d4 <__divdf3+0x130>
   10830:	003fe406 	br	107c4 <__divdf3+0x120>
   10834:	9809883a 	mov	r4,r19
   10838:	d9800415 	stw	r6,16(sp)
   1083c:	00112200 	call	11220 <__pack_d>
   10840:	dfc01217 	ldw	ra,72(sp)
   10844:	dcc01117 	ldw	r19,68(sp)
   10848:	dc801017 	ldw	r18,64(sp)
   1084c:	dc400f17 	ldw	r17,60(sp)
   10850:	dc000e17 	ldw	r16,56(sp)
   10854:	dec01304 	addi	sp,sp,76
   10858:	f800283a 	ret
   1085c:	00803fc4 	movi	r2,255
   10860:	7090703a 	and	r8,r14,r2
   10864:	00802004 	movi	r2,128
   10868:	0007883a 	mov	r3,zero
   1086c:	0013883a 	mov	r9,zero
   10870:	40800d26 	beq	r8,r2,108a8 <__divdf3+0x204>
   10874:	dbc00815 	stw	r15,32(sp)
   10878:	db800715 	stw	r14,28(sp)
   1087c:	003fab06 	br	1072c <__divdf3+0x88>
   10880:	343fc92e 	bgeu	r6,r16,107a8 <__divdf3+0x104>
   10884:	3185883a 	add	r2,r6,r6
   10888:	1189803a 	cmpltu	r4,r2,r6
   1088c:	39c7883a 	add	r3,r7,r7
   10890:	20c9883a 	add	r4,r4,r3
   10894:	297fffc4 	addi	r5,r5,-1
   10898:	100d883a 	mov	r6,r2
   1089c:	200f883a 	mov	r7,r4
   108a0:	d9400615 	stw	r5,24(sp)
   108a4:	003fc006 	br	107a8 <__divdf3+0x104>
   108a8:	483ff21e 	bne	r9,zero,10874 <__divdf3+0x1d0>
   108ac:	01004004 	movi	r4,256
   108b0:	7104703a 	and	r2,r14,r4
   108b4:	10c4b03a 	or	r2,r2,r3
   108b8:	103fee1e 	bne	r2,zero,10874 <__divdf3+0x1d0>
   108bc:	31c4b03a 	or	r2,r6,r7
   108c0:	103fec26 	beq	r2,zero,10874 <__divdf3+0x1d0>
   108c4:	7205883a 	add	r2,r14,r8
   108c8:	1391803a 	cmpltu	r8,r2,r14
   108cc:	43d1883a 	add	r8,r8,r15
   108d0:	013fc004 	movi	r4,-256
   108d4:	111c703a 	and	r14,r2,r4
   108d8:	401f883a 	mov	r15,r8
   108dc:	003fe506 	br	10874 <__divdf3+0x1d0>
   108e0:	8009883a 	mov	r4,r16
   108e4:	003f9206 	br	10730 <__divdf3+0x8c>
   108e8:	9809883a 	mov	r4,r19
   108ec:	d8000715 	stw	zero,28(sp)
   108f0:	d8000815 	stw	zero,32(sp)
   108f4:	d8000615 	stw	zero,24(sp)
   108f8:	003f8d06 	br	10730 <__divdf3+0x8c>

000108fc <__eqdf2>:
   108fc:	deffef04 	addi	sp,sp,-68
   10900:	dc400f15 	stw	r17,60(sp)
   10904:	dc400404 	addi	r17,sp,16
   10908:	2005883a 	mov	r2,r4
   1090c:	2807883a 	mov	r3,r5
   10910:	dc000e15 	stw	r16,56(sp)
   10914:	d809883a 	mov	r4,sp
   10918:	880b883a 	mov	r5,r17
   1091c:	dc000904 	addi	r16,sp,36
   10920:	d8c00115 	stw	r3,4(sp)
   10924:	d8800015 	stw	r2,0(sp)
   10928:	d9800215 	stw	r6,8(sp)
   1092c:	dfc01015 	stw	ra,64(sp)
   10930:	d9c00315 	stw	r7,12(sp)
   10934:	00115340 	call	11534 <__unpack_d>
   10938:	d9000204 	addi	r4,sp,8
   1093c:	800b883a 	mov	r5,r16
   10940:	00115340 	call	11534 <__unpack_d>
   10944:	d8800417 	ldw	r2,16(sp)
   10948:	00c00044 	movi	r3,1
   1094c:	180d883a 	mov	r6,r3
   10950:	1880062e 	bgeu	r3,r2,1096c <__eqdf2+0x70>
   10954:	d8800917 	ldw	r2,36(sp)
   10958:	8809883a 	mov	r4,r17
   1095c:	800b883a 	mov	r5,r16
   10960:	1880022e 	bgeu	r3,r2,1096c <__eqdf2+0x70>
   10964:	001166c0 	call	1166c <__fpcmp_parts_d>
   10968:	100d883a 	mov	r6,r2
   1096c:	3005883a 	mov	r2,r6
   10970:	dfc01017 	ldw	ra,64(sp)
   10974:	dc400f17 	ldw	r17,60(sp)
   10978:	dc000e17 	ldw	r16,56(sp)
   1097c:	dec01104 	addi	sp,sp,68
   10980:	f800283a 	ret

00010984 <__nedf2>:
   10984:	deffef04 	addi	sp,sp,-68
   10988:	dc400f15 	stw	r17,60(sp)
   1098c:	dc400404 	addi	r17,sp,16
   10990:	2005883a 	mov	r2,r4
   10994:	2807883a 	mov	r3,r5
   10998:	dc000e15 	stw	r16,56(sp)
   1099c:	d809883a 	mov	r4,sp
   109a0:	880b883a 	mov	r5,r17
   109a4:	dc000904 	addi	r16,sp,36
   109a8:	d8c00115 	stw	r3,4(sp)
   109ac:	d8800015 	stw	r2,0(sp)
   109b0:	d9800215 	stw	r6,8(sp)
   109b4:	dfc01015 	stw	ra,64(sp)
   109b8:	d9c00315 	stw	r7,12(sp)
   109bc:	00115340 	call	11534 <__unpack_d>
   109c0:	d9000204 	addi	r4,sp,8
   109c4:	800b883a 	mov	r5,r16
   109c8:	00115340 	call	11534 <__unpack_d>
   109cc:	d8800417 	ldw	r2,16(sp)
   109d0:	00c00044 	movi	r3,1
   109d4:	180d883a 	mov	r6,r3
   109d8:	1880062e 	bgeu	r3,r2,109f4 <__nedf2+0x70>
   109dc:	d8800917 	ldw	r2,36(sp)
   109e0:	8809883a 	mov	r4,r17
   109e4:	800b883a 	mov	r5,r16
   109e8:	1880022e 	bgeu	r3,r2,109f4 <__nedf2+0x70>
   109ec:	001166c0 	call	1166c <__fpcmp_parts_d>
   109f0:	100d883a 	mov	r6,r2
   109f4:	3005883a 	mov	r2,r6
   109f8:	dfc01017 	ldw	ra,64(sp)
   109fc:	dc400f17 	ldw	r17,60(sp)
   10a00:	dc000e17 	ldw	r16,56(sp)
   10a04:	dec01104 	addi	sp,sp,68
   10a08:	f800283a 	ret

00010a0c <__gtdf2>:
   10a0c:	deffef04 	addi	sp,sp,-68
   10a10:	dc400f15 	stw	r17,60(sp)
   10a14:	dc400404 	addi	r17,sp,16
   10a18:	2005883a 	mov	r2,r4
   10a1c:	2807883a 	mov	r3,r5
   10a20:	dc000e15 	stw	r16,56(sp)
   10a24:	d809883a 	mov	r4,sp
   10a28:	880b883a 	mov	r5,r17
   10a2c:	dc000904 	addi	r16,sp,36
   10a30:	d8c00115 	stw	r3,4(sp)
   10a34:	d8800015 	stw	r2,0(sp)
   10a38:	d9800215 	stw	r6,8(sp)
   10a3c:	dfc01015 	stw	ra,64(sp)
   10a40:	d9c00315 	stw	r7,12(sp)
   10a44:	00115340 	call	11534 <__unpack_d>
   10a48:	d9000204 	addi	r4,sp,8
   10a4c:	800b883a 	mov	r5,r16
   10a50:	00115340 	call	11534 <__unpack_d>
   10a54:	d8800417 	ldw	r2,16(sp)
   10a58:	00c00044 	movi	r3,1
   10a5c:	01bfffc4 	movi	r6,-1
   10a60:	1880062e 	bgeu	r3,r2,10a7c <__gtdf2+0x70>
   10a64:	d8800917 	ldw	r2,36(sp)
   10a68:	8809883a 	mov	r4,r17
   10a6c:	800b883a 	mov	r5,r16
   10a70:	1880022e 	bgeu	r3,r2,10a7c <__gtdf2+0x70>
   10a74:	001166c0 	call	1166c <__fpcmp_parts_d>
   10a78:	100d883a 	mov	r6,r2
   10a7c:	3005883a 	mov	r2,r6
   10a80:	dfc01017 	ldw	ra,64(sp)
   10a84:	dc400f17 	ldw	r17,60(sp)
   10a88:	dc000e17 	ldw	r16,56(sp)
   10a8c:	dec01104 	addi	sp,sp,68
   10a90:	f800283a 	ret

00010a94 <__gedf2>:
   10a94:	deffef04 	addi	sp,sp,-68
   10a98:	dc400f15 	stw	r17,60(sp)
   10a9c:	dc400404 	addi	r17,sp,16
   10aa0:	2005883a 	mov	r2,r4
   10aa4:	2807883a 	mov	r3,r5
   10aa8:	dc000e15 	stw	r16,56(sp)
   10aac:	d809883a 	mov	r4,sp
   10ab0:	880b883a 	mov	r5,r17
   10ab4:	dc000904 	addi	r16,sp,36
   10ab8:	d8c00115 	stw	r3,4(sp)
   10abc:	d8800015 	stw	r2,0(sp)
   10ac0:	d9800215 	stw	r6,8(sp)
   10ac4:	dfc01015 	stw	ra,64(sp)
   10ac8:	d9c00315 	stw	r7,12(sp)
   10acc:	00115340 	call	11534 <__unpack_d>
   10ad0:	d9000204 	addi	r4,sp,8
   10ad4:	800b883a 	mov	r5,r16
   10ad8:	00115340 	call	11534 <__unpack_d>
   10adc:	d8800417 	ldw	r2,16(sp)
   10ae0:	00c00044 	movi	r3,1
   10ae4:	01bfffc4 	movi	r6,-1
   10ae8:	1880062e 	bgeu	r3,r2,10b04 <__gedf2+0x70>
   10aec:	d8800917 	ldw	r2,36(sp)
   10af0:	8809883a 	mov	r4,r17
   10af4:	800b883a 	mov	r5,r16
   10af8:	1880022e 	bgeu	r3,r2,10b04 <__gedf2+0x70>
   10afc:	001166c0 	call	1166c <__fpcmp_parts_d>
   10b00:	100d883a 	mov	r6,r2
   10b04:	3005883a 	mov	r2,r6
   10b08:	dfc01017 	ldw	ra,64(sp)
   10b0c:	dc400f17 	ldw	r17,60(sp)
   10b10:	dc000e17 	ldw	r16,56(sp)
   10b14:	dec01104 	addi	sp,sp,68
   10b18:	f800283a 	ret

00010b1c <__ltdf2>:
   10b1c:	deffef04 	addi	sp,sp,-68
   10b20:	dc400f15 	stw	r17,60(sp)
   10b24:	dc400404 	addi	r17,sp,16
   10b28:	2005883a 	mov	r2,r4
   10b2c:	2807883a 	mov	r3,r5
   10b30:	dc000e15 	stw	r16,56(sp)
   10b34:	d809883a 	mov	r4,sp
   10b38:	880b883a 	mov	r5,r17
   10b3c:	dc000904 	addi	r16,sp,36
   10b40:	d8c00115 	stw	r3,4(sp)
   10b44:	d8800015 	stw	r2,0(sp)
   10b48:	d9800215 	stw	r6,8(sp)
   10b4c:	dfc01015 	stw	ra,64(sp)
   10b50:	d9c00315 	stw	r7,12(sp)
   10b54:	00115340 	call	11534 <__unpack_d>
   10b58:	d9000204 	addi	r4,sp,8
   10b5c:	800b883a 	mov	r5,r16
   10b60:	00115340 	call	11534 <__unpack_d>
   10b64:	d8800417 	ldw	r2,16(sp)
   10b68:	00c00044 	movi	r3,1
   10b6c:	180d883a 	mov	r6,r3
   10b70:	1880062e 	bgeu	r3,r2,10b8c <__ltdf2+0x70>
   10b74:	d8800917 	ldw	r2,36(sp)
   10b78:	8809883a 	mov	r4,r17
   10b7c:	800b883a 	mov	r5,r16
   10b80:	1880022e 	bgeu	r3,r2,10b8c <__ltdf2+0x70>
   10b84:	001166c0 	call	1166c <__fpcmp_parts_d>
   10b88:	100d883a 	mov	r6,r2
   10b8c:	3005883a 	mov	r2,r6
   10b90:	dfc01017 	ldw	ra,64(sp)
   10b94:	dc400f17 	ldw	r17,60(sp)
   10b98:	dc000e17 	ldw	r16,56(sp)
   10b9c:	dec01104 	addi	sp,sp,68
   10ba0:	f800283a 	ret

00010ba4 <__ledf2>:
   10ba4:	deffef04 	addi	sp,sp,-68
   10ba8:	dc400f15 	stw	r17,60(sp)
   10bac:	dc400404 	addi	r17,sp,16
   10bb0:	2005883a 	mov	r2,r4
   10bb4:	2807883a 	mov	r3,r5
   10bb8:	dc000e15 	stw	r16,56(sp)
   10bbc:	d809883a 	mov	r4,sp
   10bc0:	880b883a 	mov	r5,r17
   10bc4:	dc000904 	addi	r16,sp,36
   10bc8:	d8c00115 	stw	r3,4(sp)
   10bcc:	d8800015 	stw	r2,0(sp)
   10bd0:	d9800215 	stw	r6,8(sp)
   10bd4:	dfc01015 	stw	ra,64(sp)
   10bd8:	d9c00315 	stw	r7,12(sp)
   10bdc:	00115340 	call	11534 <__unpack_d>
   10be0:	d9000204 	addi	r4,sp,8
   10be4:	800b883a 	mov	r5,r16
   10be8:	00115340 	call	11534 <__unpack_d>
   10bec:	d8800417 	ldw	r2,16(sp)
   10bf0:	00c00044 	movi	r3,1
   10bf4:	180d883a 	mov	r6,r3
   10bf8:	1880062e 	bgeu	r3,r2,10c14 <__ledf2+0x70>
   10bfc:	d8800917 	ldw	r2,36(sp)
   10c00:	8809883a 	mov	r4,r17
   10c04:	800b883a 	mov	r5,r16
   10c08:	1880022e 	bgeu	r3,r2,10c14 <__ledf2+0x70>
   10c0c:	001166c0 	call	1166c <__fpcmp_parts_d>
   10c10:	100d883a 	mov	r6,r2
   10c14:	3005883a 	mov	r2,r6
   10c18:	dfc01017 	ldw	ra,64(sp)
   10c1c:	dc400f17 	ldw	r17,60(sp)
   10c20:	dc000e17 	ldw	r16,56(sp)
   10c24:	dec01104 	addi	sp,sp,68
   10c28:	f800283a 	ret

00010c2c <__floatsidf>:
   10c2c:	2006d7fa 	srli	r3,r4,31
   10c30:	defff604 	addi	sp,sp,-40
   10c34:	008000c4 	movi	r2,3
   10c38:	dfc00915 	stw	ra,36(sp)
   10c3c:	dcc00815 	stw	r19,32(sp)
   10c40:	dc800715 	stw	r18,28(sp)
   10c44:	dc400615 	stw	r17,24(sp)
   10c48:	dc000515 	stw	r16,20(sp)
   10c4c:	d8800015 	stw	r2,0(sp)
   10c50:	d8c00115 	stw	r3,4(sp)
   10c54:	20000f1e 	bne	r4,zero,10c94 <__floatsidf+0x68>
   10c58:	00800084 	movi	r2,2
   10c5c:	d8800015 	stw	r2,0(sp)
   10c60:	d809883a 	mov	r4,sp
   10c64:	00112200 	call	11220 <__pack_d>
   10c68:	1009883a 	mov	r4,r2
   10c6c:	180b883a 	mov	r5,r3
   10c70:	2005883a 	mov	r2,r4
   10c74:	2807883a 	mov	r3,r5
   10c78:	dfc00917 	ldw	ra,36(sp)
   10c7c:	dcc00817 	ldw	r19,32(sp)
   10c80:	dc800717 	ldw	r18,28(sp)
   10c84:	dc400617 	ldw	r17,24(sp)
   10c88:	dc000517 	ldw	r16,20(sp)
   10c8c:	dec00a04 	addi	sp,sp,40
   10c90:	f800283a 	ret
   10c94:	00800f04 	movi	r2,60
   10c98:	1807003a 	cmpeq	r3,r3,zero
   10c9c:	d8800215 	stw	r2,8(sp)
   10ca0:	18001126 	beq	r3,zero,10ce8 <__floatsidf+0xbc>
   10ca4:	0027883a 	mov	r19,zero
   10ca8:	2025883a 	mov	r18,r4
   10cac:	d9000315 	stw	r4,12(sp)
   10cb0:	dcc00415 	stw	r19,16(sp)
   10cb4:	00110040 	call	11004 <__clzsi2>
   10cb8:	11000744 	addi	r4,r2,29
   10cbc:	013fe80e 	bge	zero,r4,10c60 <__floatsidf+0x34>
   10cc0:	10bfff44 	addi	r2,r2,-3
   10cc4:	10000c16 	blt	r2,zero,10cf8 <__floatsidf+0xcc>
   10cc8:	90a2983a 	sll	r17,r18,r2
   10ccc:	0021883a 	mov	r16,zero
   10cd0:	d8800217 	ldw	r2,8(sp)
   10cd4:	dc400415 	stw	r17,16(sp)
   10cd8:	dc000315 	stw	r16,12(sp)
   10cdc:	1105c83a 	sub	r2,r2,r4
   10ce0:	d8800215 	stw	r2,8(sp)
   10ce4:	003fde06 	br	10c60 <__floatsidf+0x34>
   10ce8:	00a00034 	movhi	r2,32768
   10cec:	20800a26 	beq	r4,r2,10d18 <__floatsidf+0xec>
   10cf0:	0109c83a 	sub	r4,zero,r4
   10cf4:	003feb06 	br	10ca4 <__floatsidf+0x78>
   10cf8:	9006d07a 	srli	r3,r18,1
   10cfc:	008007c4 	movi	r2,31
   10d00:	1105c83a 	sub	r2,r2,r4
   10d04:	1886d83a 	srl	r3,r3,r2
   10d08:	9922983a 	sll	r17,r19,r4
   10d0c:	9120983a 	sll	r16,r18,r4
   10d10:	1c62b03a 	or	r17,r3,r17
   10d14:	003fee06 	br	10cd0 <__floatsidf+0xa4>
   10d18:	0009883a 	mov	r4,zero
   10d1c:	01707834 	movhi	r5,49632
   10d20:	003fd306 	br	10c70 <__floatsidf+0x44>

00010d24 <__fixdfsi>:
   10d24:	defff804 	addi	sp,sp,-32
   10d28:	2005883a 	mov	r2,r4
   10d2c:	2807883a 	mov	r3,r5
   10d30:	d809883a 	mov	r4,sp
   10d34:	d9400204 	addi	r5,sp,8
   10d38:	d8c00115 	stw	r3,4(sp)
   10d3c:	d8800015 	stw	r2,0(sp)
   10d40:	dfc00715 	stw	ra,28(sp)
   10d44:	00115340 	call	11534 <__unpack_d>
   10d48:	d8c00217 	ldw	r3,8(sp)
   10d4c:	00800084 	movi	r2,2
   10d50:	1880051e 	bne	r3,r2,10d68 <__fixdfsi+0x44>
   10d54:	0007883a 	mov	r3,zero
   10d58:	1805883a 	mov	r2,r3
   10d5c:	dfc00717 	ldw	ra,28(sp)
   10d60:	dec00804 	addi	sp,sp,32
   10d64:	f800283a 	ret
   10d68:	00800044 	movi	r2,1
   10d6c:	10fff92e 	bgeu	r2,r3,10d54 <__fixdfsi+0x30>
   10d70:	00800104 	movi	r2,4
   10d74:	18800426 	beq	r3,r2,10d88 <__fixdfsi+0x64>
   10d78:	d8c00417 	ldw	r3,16(sp)
   10d7c:	183ff516 	blt	r3,zero,10d54 <__fixdfsi+0x30>
   10d80:	00800784 	movi	r2,30
   10d84:	10c0080e 	bge	r2,r3,10da8 <__fixdfsi+0x84>
   10d88:	d8800317 	ldw	r2,12(sp)
   10d8c:	1000121e 	bne	r2,zero,10dd8 <__fixdfsi+0xb4>
   10d90:	00e00034 	movhi	r3,32768
   10d94:	18ffffc4 	addi	r3,r3,-1
   10d98:	1805883a 	mov	r2,r3
   10d9c:	dfc00717 	ldw	ra,28(sp)
   10da0:	dec00804 	addi	sp,sp,32
   10da4:	f800283a 	ret
   10da8:	00800f04 	movi	r2,60
   10dac:	10d1c83a 	sub	r8,r2,r3
   10db0:	40bff804 	addi	r2,r8,-32
   10db4:	d9800517 	ldw	r6,20(sp)
   10db8:	d9c00617 	ldw	r7,24(sp)
   10dbc:	10000816 	blt	r2,zero,10de0 <__fixdfsi+0xbc>
   10dc0:	3888d83a 	srl	r4,r7,r2
   10dc4:	d8800317 	ldw	r2,12(sp)
   10dc8:	2007883a 	mov	r3,r4
   10dcc:	103fe226 	beq	r2,zero,10d58 <__fixdfsi+0x34>
   10dd0:	0107c83a 	sub	r3,zero,r4
   10dd4:	003fe006 	br	10d58 <__fixdfsi+0x34>
   10dd8:	00e00034 	movhi	r3,32768
   10ddc:	003fde06 	br	10d58 <__fixdfsi+0x34>
   10de0:	39c7883a 	add	r3,r7,r7
   10de4:	008007c4 	movi	r2,31
   10de8:	1205c83a 	sub	r2,r2,r8
   10dec:	1886983a 	sll	r3,r3,r2
   10df0:	3208d83a 	srl	r4,r6,r8
   10df4:	1908b03a 	or	r4,r3,r4
   10df8:	003ff206 	br	10dc4 <__fixdfsi+0xa0>

00010dfc <__truncdfsf2>:
   10dfc:	defff804 	addi	sp,sp,-32
   10e00:	2005883a 	mov	r2,r4
   10e04:	2807883a 	mov	r3,r5
   10e08:	d809883a 	mov	r4,sp
   10e0c:	d9400204 	addi	r5,sp,8
   10e10:	d8c00115 	stw	r3,4(sp)
   10e14:	d8800015 	stw	r2,0(sp)
   10e18:	dfc00715 	stw	ra,28(sp)
   10e1c:	00115340 	call	11534 <__unpack_d>
   10e20:	d9c00517 	ldw	r7,20(sp)
   10e24:	da000617 	ldw	r8,24(sp)
   10e28:	02d00034 	movhi	r11,16384
   10e2c:	5affffc4 	addi	r11,r11,-1
   10e30:	3812d7ba 	srli	r9,r7,30
   10e34:	401a90ba 	slli	r13,r8,2
   10e38:	3ac4703a 	and	r2,r7,r11
   10e3c:	0007883a 	mov	r3,zero
   10e40:	6a52b03a 	or	r9,r13,r9
   10e44:	10c4b03a 	or	r2,r2,r3
   10e48:	d9000217 	ldw	r4,8(sp)
   10e4c:	d9400317 	ldw	r5,12(sp)
   10e50:	d9800417 	ldw	r6,16(sp)
   10e54:	480f883a 	mov	r7,r9
   10e58:	10000126 	beq	r2,zero,10e60 <__truncdfsf2+0x64>
   10e5c:	49c00054 	ori	r7,r9,1
   10e60:	00111f40 	call	111f4 <__make_fp>
   10e64:	dfc00717 	ldw	ra,28(sp)
   10e68:	dec00804 	addi	sp,sp,32
   10e6c:	f800283a 	ret

00010e70 <__floatunsidf>:
   10e70:	defff204 	addi	sp,sp,-56
   10e74:	dfc00d15 	stw	ra,52(sp)
   10e78:	ddc00c15 	stw	r23,48(sp)
   10e7c:	dd800b15 	stw	r22,44(sp)
   10e80:	dd400a15 	stw	r21,40(sp)
   10e84:	dd000915 	stw	r20,36(sp)
   10e88:	dcc00815 	stw	r19,32(sp)
   10e8c:	dc800715 	stw	r18,28(sp)
   10e90:	dc400615 	stw	r17,24(sp)
   10e94:	dc000515 	stw	r16,20(sp)
   10e98:	d8000115 	stw	zero,4(sp)
   10e9c:	20000f1e 	bne	r4,zero,10edc <__floatunsidf+0x6c>
   10ea0:	00800084 	movi	r2,2
   10ea4:	d8800015 	stw	r2,0(sp)
   10ea8:	d809883a 	mov	r4,sp
   10eac:	00112200 	call	11220 <__pack_d>
   10eb0:	dfc00d17 	ldw	ra,52(sp)
   10eb4:	ddc00c17 	ldw	r23,48(sp)
   10eb8:	dd800b17 	ldw	r22,44(sp)
   10ebc:	dd400a17 	ldw	r21,40(sp)
   10ec0:	dd000917 	ldw	r20,36(sp)
   10ec4:	dcc00817 	ldw	r19,32(sp)
   10ec8:	dc800717 	ldw	r18,28(sp)
   10ecc:	dc400617 	ldw	r17,24(sp)
   10ed0:	dc000517 	ldw	r16,20(sp)
   10ed4:	dec00e04 	addi	sp,sp,56
   10ed8:	f800283a 	ret
   10edc:	008000c4 	movi	r2,3
   10ee0:	00c00f04 	movi	r3,60
   10ee4:	002f883a 	mov	r23,zero
   10ee8:	202d883a 	mov	r22,r4
   10eec:	d8800015 	stw	r2,0(sp)
   10ef0:	d8c00215 	stw	r3,8(sp)
   10ef4:	d9000315 	stw	r4,12(sp)
   10ef8:	ddc00415 	stw	r23,16(sp)
   10efc:	00110040 	call	11004 <__clzsi2>
   10f00:	12400744 	addi	r9,r2,29
   10f04:	48000b16 	blt	r9,zero,10f34 <__floatunsidf+0xc4>
   10f08:	483fe726 	beq	r9,zero,10ea8 <__floatunsidf+0x38>
   10f0c:	10bfff44 	addi	r2,r2,-3
   10f10:	10002e16 	blt	r2,zero,10fcc <__floatunsidf+0x15c>
   10f14:	b0a2983a 	sll	r17,r22,r2
   10f18:	0021883a 	mov	r16,zero
   10f1c:	d8800217 	ldw	r2,8(sp)
   10f20:	dc400415 	stw	r17,16(sp)
   10f24:	dc000315 	stw	r16,12(sp)
   10f28:	1245c83a 	sub	r2,r2,r9
   10f2c:	d8800215 	stw	r2,8(sp)
   10f30:	003fdd06 	br	10ea8 <__floatunsidf+0x38>
   10f34:	0255c83a 	sub	r10,zero,r9
   10f38:	51bff804 	addi	r6,r10,-32
   10f3c:	30001b16 	blt	r6,zero,10fac <__floatunsidf+0x13c>
   10f40:	b9a8d83a 	srl	r20,r23,r6
   10f44:	002b883a 	mov	r21,zero
   10f48:	000f883a 	mov	r7,zero
   10f4c:	01000044 	movi	r4,1
   10f50:	0011883a 	mov	r8,zero
   10f54:	30002516 	blt	r6,zero,10fec <__floatunsidf+0x17c>
   10f58:	21a6983a 	sll	r19,r4,r6
   10f5c:	0025883a 	mov	r18,zero
   10f60:	00bfffc4 	movi	r2,-1
   10f64:	9089883a 	add	r4,r18,r2
   10f68:	988b883a 	add	r5,r19,r2
   10f6c:	248d803a 	cmpltu	r6,r4,r18
   10f70:	314b883a 	add	r5,r6,r5
   10f74:	b104703a 	and	r2,r22,r4
   10f78:	b946703a 	and	r3,r23,r5
   10f7c:	10c4b03a 	or	r2,r2,r3
   10f80:	10000226 	beq	r2,zero,10f8c <__floatunsidf+0x11c>
   10f84:	01c00044 	movi	r7,1
   10f88:	0011883a 	mov	r8,zero
   10f8c:	d9000217 	ldw	r4,8(sp)
   10f90:	a1c4b03a 	or	r2,r20,r7
   10f94:	aa06b03a 	or	r3,r21,r8
   10f98:	2249c83a 	sub	r4,r4,r9
   10f9c:	d8c00415 	stw	r3,16(sp)
   10fa0:	d9000215 	stw	r4,8(sp)
   10fa4:	d8800315 	stw	r2,12(sp)
   10fa8:	003fbf06 	br	10ea8 <__floatunsidf+0x38>
   10fac:	bdc7883a 	add	r3,r23,r23
   10fb0:	008007c4 	movi	r2,31
   10fb4:	1285c83a 	sub	r2,r2,r10
   10fb8:	1886983a 	sll	r3,r3,r2
   10fbc:	b2a8d83a 	srl	r20,r22,r10
   10fc0:	baaad83a 	srl	r21,r23,r10
   10fc4:	1d28b03a 	or	r20,r3,r20
   10fc8:	003fdf06 	br	10f48 <__floatunsidf+0xd8>
   10fcc:	b006d07a 	srli	r3,r22,1
   10fd0:	008007c4 	movi	r2,31
   10fd4:	1245c83a 	sub	r2,r2,r9
   10fd8:	1886d83a 	srl	r3,r3,r2
   10fdc:	ba62983a 	sll	r17,r23,r9
   10fe0:	b260983a 	sll	r16,r22,r9
   10fe4:	1c62b03a 	or	r17,r3,r17
   10fe8:	003fcc06 	br	10f1c <__floatunsidf+0xac>
   10fec:	2006d07a 	srli	r3,r4,1
   10ff0:	008007c4 	movi	r2,31
   10ff4:	1285c83a 	sub	r2,r2,r10
   10ff8:	18a6d83a 	srl	r19,r3,r2
   10ffc:	22a4983a 	sll	r18,r4,r10
   11000:	003fd706 	br	10f60 <__floatunsidf+0xf0>

00011004 <__clzsi2>:
   11004:	00bfffd4 	movui	r2,65535
   11008:	11000e36 	bltu	r2,r4,11044 <__clzsi2+0x40>
   1100c:	00803fc4 	movi	r2,255
   11010:	01400204 	movi	r5,8
   11014:	0007883a 	mov	r3,zero
   11018:	11001036 	bltu	r2,r4,1105c <__clzsi2+0x58>
   1101c:	000b883a 	mov	r5,zero
   11020:	20c6d83a 	srl	r3,r4,r3
   11024:	00800074 	movhi	r2,1
   11028:	10938304 	addi	r2,r2,19980
   1102c:	1887883a 	add	r3,r3,r2
   11030:	18800003 	ldbu	r2,0(r3)
   11034:	00c00804 	movi	r3,32
   11038:	2885883a 	add	r2,r5,r2
   1103c:	1885c83a 	sub	r2,r3,r2
   11040:	f800283a 	ret
   11044:	01400404 	movi	r5,16
   11048:	00804034 	movhi	r2,256
   1104c:	10bfffc4 	addi	r2,r2,-1
   11050:	2807883a 	mov	r3,r5
   11054:	113ff22e 	bgeu	r2,r4,11020 <__clzsi2+0x1c>
   11058:	01400604 	movi	r5,24
   1105c:	2807883a 	mov	r3,r5
   11060:	20c6d83a 	srl	r3,r4,r3
   11064:	00800074 	movhi	r2,1
   11068:	10938304 	addi	r2,r2,19980
   1106c:	1887883a 	add	r3,r3,r2
   11070:	18800003 	ldbu	r2,0(r3)
   11074:	00c00804 	movi	r3,32
   11078:	2885883a 	add	r2,r5,r2
   1107c:	1885c83a 	sub	r2,r3,r2
   11080:	f800283a 	ret

00011084 <__unpack_f>:
   11084:	21800017 	ldw	r6,0(r4)
   11088:	00c02034 	movhi	r3,128
   1108c:	18ffffc4 	addi	r3,r3,-1
   11090:	3004d5fa 	srli	r2,r6,23
   11094:	3008d7fa 	srli	r4,r6,31
   11098:	30ce703a 	and	r7,r6,r3
   1109c:	10c03fcc 	andi	r3,r2,255
   110a0:	29000115 	stw	r4,4(r5)
   110a4:	1800131e 	bne	r3,zero,110f4 <__unpack_f+0x70>
   110a8:	38000f26 	beq	r7,zero,110e8 <__unpack_f+0x64>
   110ac:	380691fa 	slli	r3,r7,7
   110b0:	01bfe084 	movi	r6,-126
   110b4:	008000c4 	movi	r2,3
   110b8:	01100034 	movhi	r4,16384
   110bc:	213fffc4 	addi	r4,r4,-1
   110c0:	28800015 	stw	r2,0(r5)
   110c4:	29800215 	stw	r6,8(r5)
   110c8:	20c00536 	bltu	r4,r3,110e0 <__unpack_f+0x5c>
   110cc:	3005883a 	mov	r2,r6
   110d0:	18c7883a 	add	r3,r3,r3
   110d4:	10bfffc4 	addi	r2,r2,-1
   110d8:	20fffd2e 	bgeu	r4,r3,110d0 <__unpack_f+0x4c>
   110dc:	28800215 	stw	r2,8(r5)
   110e0:	28c00315 	stw	r3,12(r5)
   110e4:	f800283a 	ret
   110e8:	00800084 	movi	r2,2
   110ec:	28800015 	stw	r2,0(r5)
   110f0:	f800283a 	ret
   110f4:	00803fc4 	movi	r2,255
   110f8:	18800826 	beq	r3,r2,1111c <__unpack_f+0x98>
   110fc:	380491fa 	slli	r2,r7,7
   11100:	18ffe044 	addi	r3,r3,-127
   11104:	28c00215 	stw	r3,8(r5)
   11108:	10900034 	orhi	r2,r2,16384
   1110c:	28800315 	stw	r2,12(r5)
   11110:	008000c4 	movi	r2,3
   11114:	28800015 	stw	r2,0(r5)
   11118:	f800283a 	ret
   1111c:	3800031e 	bne	r7,zero,1112c <__unpack_f+0xa8>
   11120:	00800104 	movi	r2,4
   11124:	28800015 	stw	r2,0(r5)
   11128:	f800283a 	ret
   1112c:	3080042c 	andhi	r2,r6,16
   11130:	10000426 	beq	r2,zero,11144 <__unpack_f+0xc0>
   11134:	00800044 	movi	r2,1
   11138:	28800015 	stw	r2,0(r5)
   1113c:	29c00315 	stw	r7,12(r5)
   11140:	f800283a 	ret
   11144:	28000015 	stw	zero,0(r5)
   11148:	003ffc06 	br	1113c <__unpack_f+0xb8>

0001114c <__fpcmp_parts_f>:
   1114c:	21800017 	ldw	r6,0(r4)
   11150:	00c00044 	movi	r3,1
   11154:	19800a2e 	bgeu	r3,r6,11180 <__fpcmp_parts_f+0x34>
   11158:	28800017 	ldw	r2,0(r5)
   1115c:	1880082e 	bgeu	r3,r2,11180 <__fpcmp_parts_f+0x34>
   11160:	00c00104 	movi	r3,4
   11164:	30c01e26 	beq	r6,r3,111e0 <__fpcmp_parts_f+0x94>
   11168:	10c01a26 	beq	r2,r3,111d4 <__fpcmp_parts_f+0x88>
   1116c:	00c00084 	movi	r3,2
   11170:	30c00526 	beq	r6,r3,11188 <__fpcmp_parts_f+0x3c>
   11174:	10c0071e 	bne	r2,r3,11194 <__fpcmp_parts_f+0x48>
   11178:	20800117 	ldw	r2,4(r4)
   1117c:	1000091e 	bne	r2,zero,111a4 <__fpcmp_parts_f+0x58>
   11180:	00800044 	movi	r2,1
   11184:	f800283a 	ret
   11188:	10c0121e 	bne	r2,r3,111d4 <__fpcmp_parts_f+0x88>
   1118c:	0005883a 	mov	r2,zero
   11190:	f800283a 	ret
   11194:	20c00117 	ldw	r3,4(r4)
   11198:	28800117 	ldw	r2,4(r5)
   1119c:	18800326 	beq	r3,r2,111ac <__fpcmp_parts_f+0x60>
   111a0:	183ff726 	beq	r3,zero,11180 <__fpcmp_parts_f+0x34>
   111a4:	00bfffc4 	movi	r2,-1
   111a8:	f800283a 	ret
   111ac:	21800217 	ldw	r6,8(r4)
   111b0:	28800217 	ldw	r2,8(r5)
   111b4:	11bffa16 	blt	r2,r6,111a0 <__fpcmp_parts_f+0x54>
   111b8:	30800416 	blt	r6,r2,111cc <__fpcmp_parts_f+0x80>
   111bc:	21000317 	ldw	r4,12(r4)
   111c0:	29400317 	ldw	r5,12(r5)
   111c4:	293ff636 	bltu	r5,r4,111a0 <__fpcmp_parts_f+0x54>
   111c8:	217ff02e 	bgeu	r4,r5,1118c <__fpcmp_parts_f+0x40>
   111cc:	183fec1e 	bne	r3,zero,11180 <__fpcmp_parts_f+0x34>
   111d0:	003ff406 	br	111a4 <__fpcmp_parts_f+0x58>
   111d4:	28800117 	ldw	r2,4(r5)
   111d8:	103fe91e 	bne	r2,zero,11180 <__fpcmp_parts_f+0x34>
   111dc:	003ff106 	br	111a4 <__fpcmp_parts_f+0x58>
   111e0:	11bfe51e 	bne	r2,r6,11178 <__fpcmp_parts_f+0x2c>
   111e4:	28c00117 	ldw	r3,4(r5)
   111e8:	20800117 	ldw	r2,4(r4)
   111ec:	1885c83a 	sub	r2,r3,r2
   111f0:	f800283a 	ret

000111f4 <__make_fp>:
   111f4:	defffb04 	addi	sp,sp,-20
   111f8:	d9000015 	stw	r4,0(sp)
   111fc:	d809883a 	mov	r4,sp
   11200:	dfc00415 	stw	ra,16(sp)
   11204:	d9400115 	stw	r5,4(sp)
   11208:	d9800215 	stw	r6,8(sp)
   1120c:	d9c00315 	stw	r7,12(sp)
   11210:	00117340 	call	11734 <__pack_f>
   11214:	dfc00417 	ldw	ra,16(sp)
   11218:	dec00504 	addi	sp,sp,20
   1121c:	f800283a 	ret

00011220 <__pack_d>:
   11220:	20c00017 	ldw	r3,0(r4)
   11224:	defffd04 	addi	sp,sp,-12
   11228:	dc000015 	stw	r16,0(sp)
   1122c:	dc800215 	stw	r18,8(sp)
   11230:	dc400115 	stw	r17,4(sp)
   11234:	00800044 	movi	r2,1
   11238:	22000317 	ldw	r8,12(r4)
   1123c:	001f883a 	mov	r15,zero
   11240:	22400417 	ldw	r9,16(r4)
   11244:	24000117 	ldw	r16,4(r4)
   11248:	10c0552e 	bgeu	r2,r3,113a0 <__pack_d+0x180>
   1124c:	00800104 	movi	r2,4
   11250:	18804f26 	beq	r3,r2,11390 <__pack_d+0x170>
   11254:	00800084 	movi	r2,2
   11258:	18800226 	beq	r3,r2,11264 <__pack_d+0x44>
   1125c:	4244b03a 	or	r2,r8,r9
   11260:	10001a1e 	bne	r2,zero,112cc <__pack_d+0xac>
   11264:	000d883a 	mov	r6,zero
   11268:	000f883a 	mov	r7,zero
   1126c:	0011883a 	mov	r8,zero
   11270:	00800434 	movhi	r2,16
   11274:	10bfffc4 	addi	r2,r2,-1
   11278:	301d883a 	mov	r14,r6
   1127c:	3884703a 	and	r2,r7,r2
   11280:	400a953a 	slli	r5,r8,20
   11284:	79bffc2c 	andhi	r6,r15,65520
   11288:	308cb03a 	or	r6,r6,r2
   1128c:	00e00434 	movhi	r3,32784
   11290:	18ffffc4 	addi	r3,r3,-1
   11294:	800497fa 	slli	r2,r16,31
   11298:	30c6703a 	and	r3,r6,r3
   1129c:	1946b03a 	or	r3,r3,r5
   112a0:	01600034 	movhi	r5,32768
   112a4:	297fffc4 	addi	r5,r5,-1
   112a8:	194a703a 	and	r5,r3,r5
   112ac:	288ab03a 	or	r5,r5,r2
   112b0:	2807883a 	mov	r3,r5
   112b4:	7005883a 	mov	r2,r14
   112b8:	dc800217 	ldw	r18,8(sp)
   112bc:	dc400117 	ldw	r17,4(sp)
   112c0:	dc000017 	ldw	r16,0(sp)
   112c4:	dec00304 	addi	sp,sp,12
   112c8:	f800283a 	ret
   112cc:	21000217 	ldw	r4,8(r4)
   112d0:	00bf0084 	movi	r2,-1022
   112d4:	20803f16 	blt	r4,r2,113d4 <__pack_d+0x1b4>
   112d8:	0080ffc4 	movi	r2,1023
   112dc:	11002c16 	blt	r2,r4,11390 <__pack_d+0x170>
   112e0:	00803fc4 	movi	r2,255
   112e4:	408c703a 	and	r6,r8,r2
   112e8:	00802004 	movi	r2,128
   112ec:	0007883a 	mov	r3,zero
   112f0:	000f883a 	mov	r7,zero
   112f4:	2280ffc4 	addi	r10,r4,1023
   112f8:	30801e26 	beq	r6,r2,11374 <__pack_d+0x154>
   112fc:	00801fc4 	movi	r2,127
   11300:	4089883a 	add	r4,r8,r2
   11304:	220d803a 	cmpltu	r6,r4,r8
   11308:	324d883a 	add	r6,r6,r9
   1130c:	2011883a 	mov	r8,r4
   11310:	3013883a 	mov	r9,r6
   11314:	00880034 	movhi	r2,8192
   11318:	10bfffc4 	addi	r2,r2,-1
   1131c:	12400d36 	bltu	r2,r9,11354 <__pack_d+0x134>
   11320:	4804963a 	slli	r2,r9,24
   11324:	400cd23a 	srli	r6,r8,8
   11328:	480ed23a 	srli	r7,r9,8
   1132c:	013fffc4 	movi	r4,-1
   11330:	118cb03a 	or	r6,r2,r6
   11334:	01400434 	movhi	r5,16
   11338:	297fffc4 	addi	r5,r5,-1
   1133c:	3104703a 	and	r2,r6,r4
   11340:	3946703a 	and	r3,r7,r5
   11344:	5201ffcc 	andi	r8,r10,2047
   11348:	100d883a 	mov	r6,r2
   1134c:	180f883a 	mov	r7,r3
   11350:	003fc706 	br	11270 <__pack_d+0x50>
   11354:	480897fa 	slli	r4,r9,31
   11358:	4004d07a 	srli	r2,r8,1
   1135c:	4806d07a 	srli	r3,r9,1
   11360:	52800044 	addi	r10,r10,1
   11364:	2084b03a 	or	r2,r4,r2
   11368:	1011883a 	mov	r8,r2
   1136c:	1813883a 	mov	r9,r3
   11370:	003feb06 	br	11320 <__pack_d+0x100>
   11374:	383fe11e 	bne	r7,zero,112fc <__pack_d+0xdc>
   11378:	01004004 	movi	r4,256
   1137c:	4104703a 	and	r2,r8,r4
   11380:	10c4b03a 	or	r2,r2,r3
   11384:	103fe326 	beq	r2,zero,11314 <__pack_d+0xf4>
   11388:	3005883a 	mov	r2,r6
   1138c:	003fdc06 	br	11300 <__pack_d+0xe0>
   11390:	000d883a 	mov	r6,zero
   11394:	000f883a 	mov	r7,zero
   11398:	0201ffc4 	movi	r8,2047
   1139c:	003fb406 	br	11270 <__pack_d+0x50>
   113a0:	0005883a 	mov	r2,zero
   113a4:	00c00234 	movhi	r3,8
   113a8:	408cb03a 	or	r6,r8,r2
   113ac:	48ceb03a 	or	r7,r9,r3
   113b0:	013fffc4 	movi	r4,-1
   113b4:	01400434 	movhi	r5,16
   113b8:	297fffc4 	addi	r5,r5,-1
   113bc:	3104703a 	and	r2,r6,r4
   113c0:	3946703a 	and	r3,r7,r5
   113c4:	100d883a 	mov	r6,r2
   113c8:	180f883a 	mov	r7,r3
   113cc:	0201ffc4 	movi	r8,2047
   113d0:	003fa706 	br	11270 <__pack_d+0x50>
   113d4:	1109c83a 	sub	r4,r2,r4
   113d8:	00800e04 	movi	r2,56
   113dc:	11004316 	blt	r2,r4,114ec <__pack_d+0x2cc>
   113e0:	21fff804 	addi	r7,r4,-32
   113e4:	38004516 	blt	r7,zero,114fc <__pack_d+0x2dc>
   113e8:	49d8d83a 	srl	r12,r9,r7
   113ec:	001b883a 	mov	r13,zero
   113f0:	0023883a 	mov	r17,zero
   113f4:	01400044 	movi	r5,1
   113f8:	0025883a 	mov	r18,zero
   113fc:	38004716 	blt	r7,zero,1151c <__pack_d+0x2fc>
   11400:	29d6983a 	sll	r11,r5,r7
   11404:	0015883a 	mov	r10,zero
   11408:	00bfffc4 	movi	r2,-1
   1140c:	5089883a 	add	r4,r10,r2
   11410:	588b883a 	add	r5,r11,r2
   11414:	228d803a 	cmpltu	r6,r4,r10
   11418:	314b883a 	add	r5,r6,r5
   1141c:	4104703a 	and	r2,r8,r4
   11420:	4946703a 	and	r3,r9,r5
   11424:	10c4b03a 	or	r2,r2,r3
   11428:	10000226 	beq	r2,zero,11434 <__pack_d+0x214>
   1142c:	04400044 	movi	r17,1
   11430:	0025883a 	mov	r18,zero
   11434:	00803fc4 	movi	r2,255
   11438:	644eb03a 	or	r7,r12,r17
   1143c:	3892703a 	and	r9,r7,r2
   11440:	00802004 	movi	r2,128
   11444:	6c90b03a 	or	r8,r13,r18
   11448:	0015883a 	mov	r10,zero
   1144c:	48801626 	beq	r9,r2,114a8 <__pack_d+0x288>
   11450:	01001fc4 	movi	r4,127
   11454:	3905883a 	add	r2,r7,r4
   11458:	11cd803a 	cmpltu	r6,r2,r7
   1145c:	320d883a 	add	r6,r6,r8
   11460:	100f883a 	mov	r7,r2
   11464:	00840034 	movhi	r2,4096
   11468:	10bfffc4 	addi	r2,r2,-1
   1146c:	3011883a 	mov	r8,r6
   11470:	0007883a 	mov	r3,zero
   11474:	11801b36 	bltu	r2,r6,114e4 <__pack_d+0x2c4>
   11478:	4004963a 	slli	r2,r8,24
   1147c:	3808d23a 	srli	r4,r7,8
   11480:	400ad23a 	srli	r5,r8,8
   11484:	1813883a 	mov	r9,r3
   11488:	1108b03a 	or	r4,r2,r4
   1148c:	00bfffc4 	movi	r2,-1
   11490:	00c00434 	movhi	r3,16
   11494:	18ffffc4 	addi	r3,r3,-1
   11498:	208c703a 	and	r6,r4,r2
   1149c:	28ce703a 	and	r7,r5,r3
   114a0:	4a01ffcc 	andi	r8,r9,2047
   114a4:	003f7206 	br	11270 <__pack_d+0x50>
   114a8:	503fe91e 	bne	r10,zero,11450 <__pack_d+0x230>
   114ac:	01004004 	movi	r4,256
   114b0:	3904703a 	and	r2,r7,r4
   114b4:	0007883a 	mov	r3,zero
   114b8:	10c4b03a 	or	r2,r2,r3
   114bc:	10000626 	beq	r2,zero,114d8 <__pack_d+0x2b8>
   114c0:	3a45883a 	add	r2,r7,r9
   114c4:	11cd803a 	cmpltu	r6,r2,r7
   114c8:	320d883a 	add	r6,r6,r8
   114cc:	100f883a 	mov	r7,r2
   114d0:	3011883a 	mov	r8,r6
   114d4:	0007883a 	mov	r3,zero
   114d8:	00840034 	movhi	r2,4096
   114dc:	10bfffc4 	addi	r2,r2,-1
   114e0:	123fe52e 	bgeu	r2,r8,11478 <__pack_d+0x258>
   114e4:	00c00044 	movi	r3,1
   114e8:	003fe306 	br	11478 <__pack_d+0x258>
   114ec:	0009883a 	mov	r4,zero
   114f0:	0013883a 	mov	r9,zero
   114f4:	000b883a 	mov	r5,zero
   114f8:	003fe406 	br	1148c <__pack_d+0x26c>
   114fc:	4a47883a 	add	r3,r9,r9
   11500:	008007c4 	movi	r2,31
   11504:	1105c83a 	sub	r2,r2,r4
   11508:	1886983a 	sll	r3,r3,r2
   1150c:	4118d83a 	srl	r12,r8,r4
   11510:	491ad83a 	srl	r13,r9,r4
   11514:	1b18b03a 	or	r12,r3,r12
   11518:	003fb506 	br	113f0 <__pack_d+0x1d0>
   1151c:	2806d07a 	srli	r3,r5,1
   11520:	008007c4 	movi	r2,31
   11524:	1105c83a 	sub	r2,r2,r4
   11528:	1896d83a 	srl	r11,r3,r2
   1152c:	2914983a 	sll	r10,r5,r4
   11530:	003fb506 	br	11408 <__pack_d+0x1e8>

00011534 <__unpack_d>:
   11534:	20c00117 	ldw	r3,4(r4)
   11538:	22400017 	ldw	r9,0(r4)
   1153c:	00800434 	movhi	r2,16
   11540:	10bfffc4 	addi	r2,r2,-1
   11544:	1808d53a 	srli	r4,r3,20
   11548:	180cd7fa 	srli	r6,r3,31
   1154c:	1894703a 	and	r10,r3,r2
   11550:	2201ffcc 	andi	r8,r4,2047
   11554:	281b883a 	mov	r13,r5
   11558:	4817883a 	mov	r11,r9
   1155c:	29800115 	stw	r6,4(r5)
   11560:	5019883a 	mov	r12,r10
   11564:	40001e1e 	bne	r8,zero,115e0 <__unpack_d+0xac>
   11568:	4a84b03a 	or	r2,r9,r10
   1156c:	10001926 	beq	r2,zero,115d4 <__unpack_d+0xa0>
   11570:	4804d63a 	srli	r2,r9,24
   11574:	500c923a 	slli	r6,r10,8
   11578:	013f0084 	movi	r4,-1022
   1157c:	00c40034 	movhi	r3,4096
   11580:	18ffffc4 	addi	r3,r3,-1
   11584:	118cb03a 	or	r6,r2,r6
   11588:	008000c4 	movi	r2,3
   1158c:	480a923a 	slli	r5,r9,8
   11590:	68800015 	stw	r2,0(r13)
   11594:	69000215 	stw	r4,8(r13)
   11598:	19800b36 	bltu	r3,r6,115c8 <__unpack_d+0x94>
   1159c:	200f883a 	mov	r7,r4
   115a0:	1811883a 	mov	r8,r3
   115a4:	2945883a 	add	r2,r5,r5
   115a8:	1149803a 	cmpltu	r4,r2,r5
   115ac:	3187883a 	add	r3,r6,r6
   115b0:	20c9883a 	add	r4,r4,r3
   115b4:	100b883a 	mov	r5,r2
   115b8:	200d883a 	mov	r6,r4
   115bc:	39ffffc4 	addi	r7,r7,-1
   115c0:	413ff82e 	bgeu	r8,r4,115a4 <__unpack_d+0x70>
   115c4:	69c00215 	stw	r7,8(r13)
   115c8:	69800415 	stw	r6,16(r13)
   115cc:	69400315 	stw	r5,12(r13)
   115d0:	f800283a 	ret
   115d4:	00800084 	movi	r2,2
   115d8:	28800015 	stw	r2,0(r5)
   115dc:	f800283a 	ret
   115e0:	0081ffc4 	movi	r2,2047
   115e4:	40800f26 	beq	r8,r2,11624 <__unpack_d+0xf0>
   115e8:	480cd63a 	srli	r6,r9,24
   115ec:	5006923a 	slli	r3,r10,8
   115f0:	4804923a 	slli	r2,r9,8
   115f4:	0009883a 	mov	r4,zero
   115f8:	30c6b03a 	or	r3,r6,r3
   115fc:	01440034 	movhi	r5,4096
   11600:	110cb03a 	or	r6,r2,r4
   11604:	423f0044 	addi	r8,r8,-1023
   11608:	194eb03a 	or	r7,r3,r5
   1160c:	008000c4 	movi	r2,3
   11610:	69c00415 	stw	r7,16(r13)
   11614:	6a000215 	stw	r8,8(r13)
   11618:	68800015 	stw	r2,0(r13)
   1161c:	69800315 	stw	r6,12(r13)
   11620:	f800283a 	ret
   11624:	4a84b03a 	or	r2,r9,r10
   11628:	1000031e 	bne	r2,zero,11638 <__unpack_d+0x104>
   1162c:	00800104 	movi	r2,4
   11630:	28800015 	stw	r2,0(r5)
   11634:	f800283a 	ret
   11638:	0009883a 	mov	r4,zero
   1163c:	01400234 	movhi	r5,8
   11640:	4904703a 	and	r2,r9,r4
   11644:	5146703a 	and	r3,r10,r5
   11648:	10c4b03a 	or	r2,r2,r3
   1164c:	10000526 	beq	r2,zero,11664 <__unpack_d+0x130>
   11650:	00800044 	movi	r2,1
   11654:	68800015 	stw	r2,0(r13)
   11658:	6b000415 	stw	r12,16(r13)
   1165c:	6ac00315 	stw	r11,12(r13)
   11660:	f800283a 	ret
   11664:	68000015 	stw	zero,0(r13)
   11668:	003ffb06 	br	11658 <__unpack_d+0x124>

0001166c <__fpcmp_parts_d>:
   1166c:	21800017 	ldw	r6,0(r4)
   11670:	00c00044 	movi	r3,1
   11674:	19800a2e 	bgeu	r3,r6,116a0 <__fpcmp_parts_d+0x34>
   11678:	28800017 	ldw	r2,0(r5)
   1167c:	1880082e 	bgeu	r3,r2,116a0 <__fpcmp_parts_d+0x34>
   11680:	00c00104 	movi	r3,4
   11684:	30c02626 	beq	r6,r3,11720 <__fpcmp_parts_d+0xb4>
   11688:	10c02226 	beq	r2,r3,11714 <__fpcmp_parts_d+0xa8>
   1168c:	00c00084 	movi	r3,2
   11690:	30c00526 	beq	r6,r3,116a8 <__fpcmp_parts_d+0x3c>
   11694:	10c0071e 	bne	r2,r3,116b4 <__fpcmp_parts_d+0x48>
   11698:	20800117 	ldw	r2,4(r4)
   1169c:	1000091e 	bne	r2,zero,116c4 <__fpcmp_parts_d+0x58>
   116a0:	00800044 	movi	r2,1
   116a4:	f800283a 	ret
   116a8:	10c01a1e 	bne	r2,r3,11714 <__fpcmp_parts_d+0xa8>
   116ac:	0005883a 	mov	r2,zero
   116b0:	f800283a 	ret
   116b4:	22000117 	ldw	r8,4(r4)
   116b8:	28800117 	ldw	r2,4(r5)
   116bc:	40800326 	beq	r8,r2,116cc <__fpcmp_parts_d+0x60>
   116c0:	403ff726 	beq	r8,zero,116a0 <__fpcmp_parts_d+0x34>
   116c4:	00bfffc4 	movi	r2,-1
   116c8:	f800283a 	ret
   116cc:	20c00217 	ldw	r3,8(r4)
   116d0:	28800217 	ldw	r2,8(r5)
   116d4:	10fffa16 	blt	r2,r3,116c0 <__fpcmp_parts_d+0x54>
   116d8:	18800916 	blt	r3,r2,11700 <__fpcmp_parts_d+0x94>
   116dc:	21c00417 	ldw	r7,16(r4)
   116e0:	28c00417 	ldw	r3,16(r5)
   116e4:	21800317 	ldw	r6,12(r4)
   116e8:	28800317 	ldw	r2,12(r5)
   116ec:	19fff436 	bltu	r3,r7,116c0 <__fpcmp_parts_d+0x54>
   116f0:	38c00526 	beq	r7,r3,11708 <__fpcmp_parts_d+0x9c>
   116f4:	38c00236 	bltu	r7,r3,11700 <__fpcmp_parts_d+0x94>
   116f8:	19ffec1e 	bne	r3,r7,116ac <__fpcmp_parts_d+0x40>
   116fc:	30bfeb2e 	bgeu	r6,r2,116ac <__fpcmp_parts_d+0x40>
   11700:	403fe71e 	bne	r8,zero,116a0 <__fpcmp_parts_d+0x34>
   11704:	003fef06 	br	116c4 <__fpcmp_parts_d+0x58>
   11708:	11bffa2e 	bgeu	r2,r6,116f4 <__fpcmp_parts_d+0x88>
   1170c:	403fe426 	beq	r8,zero,116a0 <__fpcmp_parts_d+0x34>
   11710:	003fec06 	br	116c4 <__fpcmp_parts_d+0x58>
   11714:	28800117 	ldw	r2,4(r5)
   11718:	103fe11e 	bne	r2,zero,116a0 <__fpcmp_parts_d+0x34>
   1171c:	003fe906 	br	116c4 <__fpcmp_parts_d+0x58>
   11720:	11bfdd1e 	bne	r2,r6,11698 <__fpcmp_parts_d+0x2c>
   11724:	28c00117 	ldw	r3,4(r5)
   11728:	20800117 	ldw	r2,4(r4)
   1172c:	1885c83a 	sub	r2,r3,r2
   11730:	f800283a 	ret

00011734 <__pack_f>:
   11734:	20c00017 	ldw	r3,0(r4)
   11738:	01c00044 	movi	r7,1
   1173c:	21800317 	ldw	r6,12(r4)
   11740:	21400117 	ldw	r5,4(r4)
   11744:	38c02d2e 	bgeu	r7,r3,117fc <__pack_f+0xc8>
   11748:	00800104 	movi	r2,4
   1174c:	18802826 	beq	r3,r2,117f0 <__pack_f+0xbc>
   11750:	00800084 	movi	r2,2
   11754:	18800126 	beq	r3,r2,1175c <__pack_f+0x28>
   11758:	3000101e 	bne	r6,zero,1179c <__pack_f+0x68>
   1175c:	000d883a 	mov	r6,zero
   11760:	0007883a 	mov	r3,zero
   11764:	19003fcc 	andi	r4,r3,255
   11768:	200895fa 	slli	r4,r4,23
   1176c:	00c02034 	movhi	r3,128
   11770:	18ffffc4 	addi	r3,r3,-1
   11774:	30c6703a 	and	r3,r6,r3
   11778:	10a0002c 	andhi	r2,r2,32768
   1177c:	10c4b03a 	or	r2,r2,r3
   11780:	280a97fa 	slli	r5,r5,31
   11784:	1104b03a 	or	r2,r2,r4
   11788:	00e00034 	movhi	r3,32768
   1178c:	18ffffc4 	addi	r3,r3,-1
   11790:	10c4703a 	and	r2,r2,r3
   11794:	1144b03a 	or	r2,r2,r5
   11798:	f800283a 	ret
   1179c:	21000217 	ldw	r4,8(r4)
   117a0:	00bfe084 	movi	r2,-126
   117a4:	20801b16 	blt	r4,r2,11814 <__pack_f+0xe0>
   117a8:	00801fc4 	movi	r2,127
   117ac:	11001016 	blt	r2,r4,117f0 <__pack_f+0xbc>
   117b0:	308e703a 	and	r7,r6,r2
   117b4:	2087883a 	add	r3,r4,r2
   117b8:	00801004 	movi	r2,64
   117bc:	38800526 	beq	r7,r2,117d4 <__pack_f+0xa0>
   117c0:	31800fc4 	addi	r6,r6,63
   117c4:	30000716 	blt	r6,zero,117e4 <__pack_f+0xb0>
   117c8:	300490ba 	slli	r2,r6,2
   117cc:	100cd27a 	srli	r6,r2,9
   117d0:	003fe406 	br	11764 <__pack_f+0x30>
   117d4:	3080200c 	andi	r2,r6,128
   117d8:	103ffa26 	beq	r2,zero,117c4 <__pack_f+0x90>
   117dc:	31cd883a 	add	r6,r6,r7
   117e0:	003ff806 	br	117c4 <__pack_f+0x90>
   117e4:	300cd07a 	srli	r6,r6,1
   117e8:	18c00044 	addi	r3,r3,1
   117ec:	003ff606 	br	117c8 <__pack_f+0x94>
   117f0:	000d883a 	mov	r6,zero
   117f4:	00ffffc4 	movi	r3,-1
   117f8:	003fda06 	br	11764 <__pack_f+0x30>
   117fc:	31800434 	orhi	r6,r6,16
   11800:	00802034 	movhi	r2,128
   11804:	10bfffc4 	addi	r2,r2,-1
   11808:	308c703a 	and	r6,r6,r2
   1180c:	00ffffc4 	movi	r3,-1
   11810:	003fd406 	br	11764 <__pack_f+0x30>
   11814:	1109c83a 	sub	r4,r2,r4
   11818:	00800644 	movi	r2,25
   1181c:	11001216 	blt	r2,r4,11868 <__pack_f+0x134>
   11820:	3904983a 	sll	r2,r7,r4
   11824:	3106d83a 	srl	r3,r6,r4
   11828:	10bfffc4 	addi	r2,r2,-1
   1182c:	3084703a 	and	r2,r6,r2
   11830:	1004c03a 	cmpne	r2,r2,zero
   11834:	1886b03a 	or	r3,r3,r2
   11838:	19001fcc 	andi	r4,r3,127
   1183c:	00801004 	movi	r2,64
   11840:	20800c26 	beq	r4,r2,11874 <__pack_f+0x140>
   11844:	18c00fc4 	addi	r3,r3,63
   11848:	00900034 	movhi	r2,16384
   1184c:	10bfffc4 	addi	r2,r2,-1
   11850:	180cd1fa 	srli	r6,r3,7
   11854:	10c7803a 	cmpltu	r3,r2,r3
   11858:	00802034 	movhi	r2,128
   1185c:	10bfffc4 	addi	r2,r2,-1
   11860:	308c703a 	and	r6,r6,r2
   11864:	003fbf06 	br	11764 <__pack_f+0x30>
   11868:	0007883a 	mov	r3,zero
   1186c:	000d883a 	mov	r6,zero
   11870:	003ff906 	br	11858 <__pack_f+0x124>
   11874:	1880200c 	andi	r2,r3,128
   11878:	10000126 	beq	r2,zero,11880 <__pack_f+0x14c>
   1187c:	1907883a 	add	r3,r3,r4
   11880:	180cd1fa 	srli	r6,r3,7
   11884:	00900034 	movhi	r2,16384
   11888:	10bfffc4 	addi	r2,r2,-1
   1188c:	10c7803a 	cmpltu	r3,r2,r3
   11890:	003ff106 	br	11858 <__pack_f+0x124>

00011894 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11894:	defff804 	addi	sp,sp,-32
   11898:	dfc00715 	stw	ra,28(sp)
   1189c:	df000615 	stw	fp,24(sp)
   118a0:	df000604 	addi	fp,sp,24
   118a4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   118a8:	e0bffc17 	ldw	r2,-16(fp)
   118ac:	1004803a 	cmplt	r2,r2,zero
   118b0:	1000081e 	bne	r2,zero,118d4 <close+0x40>
   118b4:	e0bffc17 	ldw	r2,-16(fp)
   118b8:	10800324 	muli	r2,r2,12
   118bc:	1007883a 	mov	r3,r2
   118c0:	00800074 	movhi	r2,1
   118c4:	10960404 	addi	r2,r2,22544
   118c8:	1887883a 	add	r3,r3,r2
   118cc:	e0ffff15 	stw	r3,-4(fp)
   118d0:	00000106 	br	118d8 <close+0x44>
   118d4:	e03fff15 	stw	zero,-4(fp)
   118d8:	e0bfff17 	ldw	r2,-4(fp)
   118dc:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   118e0:	e0bffb17 	ldw	r2,-20(fp)
   118e4:	1005003a 	cmpeq	r2,r2,zero
   118e8:	10001d1e 	bne	r2,zero,11960 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   118ec:	e0bffb17 	ldw	r2,-20(fp)
   118f0:	10800017 	ldw	r2,0(r2)
   118f4:	10800417 	ldw	r2,16(r2)
   118f8:	1005003a 	cmpeq	r2,r2,zero
   118fc:	1000071e 	bne	r2,zero,1191c <close+0x88>
   11900:	e0bffb17 	ldw	r2,-20(fp)
   11904:	10800017 	ldw	r2,0(r2)
   11908:	10800417 	ldw	r2,16(r2)
   1190c:	e13ffb17 	ldw	r4,-20(fp)
   11910:	103ee83a 	callr	r2
   11914:	e0bffe15 	stw	r2,-8(fp)
   11918:	00000106 	br	11920 <close+0x8c>
   1191c:	e03ffe15 	stw	zero,-8(fp)
   11920:	e0bffe17 	ldw	r2,-8(fp)
   11924:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11928:	e13ffc17 	ldw	r4,-16(fp)
   1192c:	00120d80 	call	120d8 <alt_release_fd>
    if (rval < 0)
   11930:	e0bffa17 	ldw	r2,-24(fp)
   11934:	1004403a 	cmpge	r2,r2,zero
   11938:	1000071e 	bne	r2,zero,11958 <close+0xc4>
    {
      ALT_ERRNO = -rval;
   1193c:	00119900 	call	11990 <alt_get_errno>
   11940:	e0fffa17 	ldw	r3,-24(fp)
   11944:	00c7c83a 	sub	r3,zero,r3
   11948:	10c00015 	stw	r3,0(r2)
      return -1;
   1194c:	00bfffc4 	movi	r2,-1
   11950:	e0bffd15 	stw	r2,-12(fp)
   11954:	00000806 	br	11978 <close+0xe4>
    }
    return 0;
   11958:	e03ffd15 	stw	zero,-12(fp)
   1195c:	00000606 	br	11978 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11960:	00119900 	call	11990 <alt_get_errno>
   11964:	1007883a 	mov	r3,r2
   11968:	00801444 	movi	r2,81
   1196c:	18800015 	stw	r2,0(r3)
    return -1;
   11970:	00bfffc4 	movi	r2,-1
   11974:	e0bffd15 	stw	r2,-12(fp)
   11978:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   1197c:	e037883a 	mov	sp,fp
   11980:	dfc00117 	ldw	ra,4(sp)
   11984:	df000017 	ldw	fp,0(sp)
   11988:	dec00204 	addi	sp,sp,8
   1198c:	f800283a 	ret

00011990 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11990:	defffd04 	addi	sp,sp,-12
   11994:	dfc00215 	stw	ra,8(sp)
   11998:	df000115 	stw	fp,4(sp)
   1199c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   119a0:	00800074 	movhi	r2,1
   119a4:	109a8804 	addi	r2,r2,27168
   119a8:	10800017 	ldw	r2,0(r2)
   119ac:	1005003a 	cmpeq	r2,r2,zero
   119b0:	1000061e 	bne	r2,zero,119cc <alt_get_errno+0x3c>
   119b4:	00800074 	movhi	r2,1
   119b8:	109a8804 	addi	r2,r2,27168
   119bc:	10800017 	ldw	r2,0(r2)
   119c0:	103ee83a 	callr	r2
   119c4:	e0bfff15 	stw	r2,-4(fp)
   119c8:	00000306 	br	119d8 <alt_get_errno+0x48>
   119cc:	008000b4 	movhi	r2,2
   119d0:	10a14e04 	addi	r2,r2,-31432
   119d4:	e0bfff15 	stw	r2,-4(fp)
   119d8:	e0bfff17 	ldw	r2,-4(fp)
}
   119dc:	e037883a 	mov	sp,fp
   119e0:	dfc00117 	ldw	ra,4(sp)
   119e4:	df000017 	ldw	fp,0(sp)
   119e8:	dec00204 	addi	sp,sp,8
   119ec:	f800283a 	ret

000119f0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   119f0:	defffc04 	addi	sp,sp,-16
   119f4:	df000315 	stw	fp,12(sp)
   119f8:	df000304 	addi	fp,sp,12
   119fc:	e13ffd15 	stw	r4,-12(fp)
   11a00:	e17ffe15 	stw	r5,-8(fp)
   11a04:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11a08:	e0bfff17 	ldw	r2,-4(fp)
}
   11a0c:	e037883a 	mov	sp,fp
   11a10:	df000017 	ldw	fp,0(sp)
   11a14:	dec00104 	addi	sp,sp,4
   11a18:	f800283a 	ret

00011a1c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11a1c:	defff904 	addi	sp,sp,-28
   11a20:	dfc00615 	stw	ra,24(sp)
   11a24:	df000515 	stw	fp,20(sp)
   11a28:	df000504 	addi	fp,sp,20
   11a2c:	e13ffc15 	stw	r4,-16(fp)
   11a30:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11a34:	e0bffc17 	ldw	r2,-16(fp)
   11a38:	1004803a 	cmplt	r2,r2,zero
   11a3c:	1000081e 	bne	r2,zero,11a60 <fstat+0x44>
   11a40:	e0bffc17 	ldw	r2,-16(fp)
   11a44:	10800324 	muli	r2,r2,12
   11a48:	1007883a 	mov	r3,r2
   11a4c:	00800074 	movhi	r2,1
   11a50:	10960404 	addi	r2,r2,22544
   11a54:	1887883a 	add	r3,r3,r2
   11a58:	e0ffff15 	stw	r3,-4(fp)
   11a5c:	00000106 	br	11a64 <fstat+0x48>
   11a60:	e03fff15 	stw	zero,-4(fp)
   11a64:	e0bfff17 	ldw	r2,-4(fp)
   11a68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11a6c:	e0bffb17 	ldw	r2,-20(fp)
   11a70:	1005003a 	cmpeq	r2,r2,zero
   11a74:	1000121e 	bne	r2,zero,11ac0 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11a78:	e0bffb17 	ldw	r2,-20(fp)
   11a7c:	10800017 	ldw	r2,0(r2)
   11a80:	10800817 	ldw	r2,32(r2)
   11a84:	1005003a 	cmpeq	r2,r2,zero
   11a88:	1000081e 	bne	r2,zero,11aac <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   11a8c:	e0bffb17 	ldw	r2,-20(fp)
   11a90:	10800017 	ldw	r2,0(r2)
   11a94:	10800817 	ldw	r2,32(r2)
   11a98:	e13ffb17 	ldw	r4,-20(fp)
   11a9c:	e17ffd17 	ldw	r5,-12(fp)
   11aa0:	103ee83a 	callr	r2
   11aa4:	e0bffe15 	stw	r2,-8(fp)
   11aa8:	00000b06 	br	11ad8 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11aac:	e0fffd17 	ldw	r3,-12(fp)
   11ab0:	00880004 	movi	r2,8192
   11ab4:	18800115 	stw	r2,4(r3)
      return 0;
   11ab8:	e03ffe15 	stw	zero,-8(fp)
   11abc:	00000606 	br	11ad8 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11ac0:	0011af00 	call	11af0 <alt_get_errno>
   11ac4:	1007883a 	mov	r3,r2
   11ac8:	00801444 	movi	r2,81
   11acc:	18800015 	stw	r2,0(r3)
    return -1;
   11ad0:	00bfffc4 	movi	r2,-1
   11ad4:	e0bffe15 	stw	r2,-8(fp)
   11ad8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11adc:	e037883a 	mov	sp,fp
   11ae0:	dfc00117 	ldw	ra,4(sp)
   11ae4:	df000017 	ldw	fp,0(sp)
   11ae8:	dec00204 	addi	sp,sp,8
   11aec:	f800283a 	ret

00011af0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11af0:	defffd04 	addi	sp,sp,-12
   11af4:	dfc00215 	stw	ra,8(sp)
   11af8:	df000115 	stw	fp,4(sp)
   11afc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11b00:	00800074 	movhi	r2,1
   11b04:	109a8804 	addi	r2,r2,27168
   11b08:	10800017 	ldw	r2,0(r2)
   11b0c:	1005003a 	cmpeq	r2,r2,zero
   11b10:	1000061e 	bne	r2,zero,11b2c <alt_get_errno+0x3c>
   11b14:	00800074 	movhi	r2,1
   11b18:	109a8804 	addi	r2,r2,27168
   11b1c:	10800017 	ldw	r2,0(r2)
   11b20:	103ee83a 	callr	r2
   11b24:	e0bfff15 	stw	r2,-4(fp)
   11b28:	00000306 	br	11b38 <alt_get_errno+0x48>
   11b2c:	008000b4 	movhi	r2,2
   11b30:	10a14e04 	addi	r2,r2,-31432
   11b34:	e0bfff15 	stw	r2,-4(fp)
   11b38:	e0bfff17 	ldw	r2,-4(fp)
}
   11b3c:	e037883a 	mov	sp,fp
   11b40:	dfc00117 	ldw	ra,4(sp)
   11b44:	df000017 	ldw	fp,0(sp)
   11b48:	dec00204 	addi	sp,sp,8
   11b4c:	f800283a 	ret

00011b50 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11b50:	deffeb04 	addi	sp,sp,-84
   11b54:	dfc01415 	stw	ra,80(sp)
   11b58:	df001315 	stw	fp,76(sp)
   11b5c:	df001304 	addi	fp,sp,76
   11b60:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11b64:	e0bffd17 	ldw	r2,-12(fp)
   11b68:	1004803a 	cmplt	r2,r2,zero
   11b6c:	1000081e 	bne	r2,zero,11b90 <isatty+0x40>
   11b70:	e0bffd17 	ldw	r2,-12(fp)
   11b74:	10800324 	muli	r2,r2,12
   11b78:	1007883a 	mov	r3,r2
   11b7c:	00800074 	movhi	r2,1
   11b80:	10960404 	addi	r2,r2,22544
   11b84:	1887883a 	add	r3,r3,r2
   11b88:	e0ffff15 	stw	r3,-4(fp)
   11b8c:	00000106 	br	11b94 <isatty+0x44>
   11b90:	e03fff15 	stw	zero,-4(fp)
   11b94:	e0bfff17 	ldw	r2,-4(fp)
   11b98:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   11b9c:	e0bfed17 	ldw	r2,-76(fp)
   11ba0:	1005003a 	cmpeq	r2,r2,zero
   11ba4:	10000f1e 	bne	r2,zero,11be4 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11ba8:	e0bfed17 	ldw	r2,-76(fp)
   11bac:	10800017 	ldw	r2,0(r2)
   11bb0:	10800817 	ldw	r2,32(r2)
   11bb4:	1004c03a 	cmpne	r2,r2,zero
   11bb8:	1000031e 	bne	r2,zero,11bc8 <isatty+0x78>
    {
      return 1;
   11bbc:	00800044 	movi	r2,1
   11bc0:	e0bffe15 	stw	r2,-8(fp)
   11bc4:	00000c06 	br	11bf8 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11bc8:	e17fee04 	addi	r5,fp,-72
   11bcc:	e13ffd17 	ldw	r4,-12(fp)
   11bd0:	0011a1c0 	call	11a1c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11bd4:	e0bfef17 	ldw	r2,-68(fp)
   11bd8:	10880020 	cmpeqi	r2,r2,8192
   11bdc:	e0bffe15 	stw	r2,-8(fp)
   11be0:	00000506 	br	11bf8 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11be4:	0011c100 	call	11c10 <alt_get_errno>
   11be8:	1007883a 	mov	r3,r2
   11bec:	00801444 	movi	r2,81
   11bf0:	18800015 	stw	r2,0(r3)
    return 0;
   11bf4:	e03ffe15 	stw	zero,-8(fp)
   11bf8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11bfc:	e037883a 	mov	sp,fp
   11c00:	dfc00117 	ldw	ra,4(sp)
   11c04:	df000017 	ldw	fp,0(sp)
   11c08:	dec00204 	addi	sp,sp,8
   11c0c:	f800283a 	ret

00011c10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11c10:	defffd04 	addi	sp,sp,-12
   11c14:	dfc00215 	stw	ra,8(sp)
   11c18:	df000115 	stw	fp,4(sp)
   11c1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11c20:	00800074 	movhi	r2,1
   11c24:	109a8804 	addi	r2,r2,27168
   11c28:	10800017 	ldw	r2,0(r2)
   11c2c:	1005003a 	cmpeq	r2,r2,zero
   11c30:	1000061e 	bne	r2,zero,11c4c <alt_get_errno+0x3c>
   11c34:	00800074 	movhi	r2,1
   11c38:	109a8804 	addi	r2,r2,27168
   11c3c:	10800017 	ldw	r2,0(r2)
   11c40:	103ee83a 	callr	r2
   11c44:	e0bfff15 	stw	r2,-4(fp)
   11c48:	00000306 	br	11c58 <alt_get_errno+0x48>
   11c4c:	008000b4 	movhi	r2,2
   11c50:	10a14e04 	addi	r2,r2,-31432
   11c54:	e0bfff15 	stw	r2,-4(fp)
   11c58:	e0bfff17 	ldw	r2,-4(fp)
}
   11c5c:	e037883a 	mov	sp,fp
   11c60:	dfc00117 	ldw	ra,4(sp)
   11c64:	df000017 	ldw	fp,0(sp)
   11c68:	dec00204 	addi	sp,sp,8
   11c6c:	f800283a 	ret

00011c70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11c70:	defffe04 	addi	sp,sp,-8
   11c74:	dfc00115 	stw	ra,4(sp)
   11c78:	df000015 	stw	fp,0(sp)
   11c7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11c80:	01000074 	movhi	r4,1
   11c84:	211a8d04 	addi	r4,r4,27188
   11c88:	01400074 	movhi	r5,1
   11c8c:	2953d004 	addi	r5,r5,20288
   11c90:	01800074 	movhi	r6,1
   11c94:	319a8d04 	addi	r6,r6,27188
   11c98:	0011cf00 	call	11cf0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11c9c:	01000034 	movhi	r4,0
   11ca0:	21000804 	addi	r4,r4,32
   11ca4:	01400034 	movhi	r5,0
   11ca8:	29400804 	addi	r5,r5,32
   11cac:	01800034 	movhi	r6,0
   11cb0:	31806d04 	addi	r6,r6,436
   11cb4:	0011cf00 	call	11cf0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11cb8:	01000074 	movhi	r4,1
   11cbc:	2110c904 	addi	r4,r4,17188
   11cc0:	01400074 	movhi	r5,1
   11cc4:	2950c904 	addi	r5,r5,17188
   11cc8:	01800074 	movhi	r6,1
   11ccc:	3193d004 	addi	r6,r6,20288
   11cd0:	0011cf00 	call	11cf0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11cd4:	001313c0 	call	1313c <alt_dcache_flush_all>
  alt_icache_flush_all();
   11cd8:	001335c0 	call	1335c <alt_icache_flush_all>
}
   11cdc:	e037883a 	mov	sp,fp
   11ce0:	dfc00117 	ldw	ra,4(sp)
   11ce4:	df000017 	ldw	fp,0(sp)
   11ce8:	dec00204 	addi	sp,sp,8
   11cec:	f800283a 	ret

00011cf0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11cf0:	defffc04 	addi	sp,sp,-16
   11cf4:	df000315 	stw	fp,12(sp)
   11cf8:	df000304 	addi	fp,sp,12
   11cfc:	e13ffd15 	stw	r4,-12(fp)
   11d00:	e17ffe15 	stw	r5,-8(fp)
   11d04:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11d08:	e0fffe17 	ldw	r3,-8(fp)
   11d0c:	e0bffd17 	ldw	r2,-12(fp)
   11d10:	18800e26 	beq	r3,r2,11d4c <alt_load_section+0x5c>
  {
    while( to != end )
   11d14:	00000a06 	br	11d40 <alt_load_section+0x50>
    {
      *to++ = *from++;
   11d18:	e0bffd17 	ldw	r2,-12(fp)
   11d1c:	10c00017 	ldw	r3,0(r2)
   11d20:	e0bffe17 	ldw	r2,-8(fp)
   11d24:	10c00015 	stw	r3,0(r2)
   11d28:	e0bffe17 	ldw	r2,-8(fp)
   11d2c:	10800104 	addi	r2,r2,4
   11d30:	e0bffe15 	stw	r2,-8(fp)
   11d34:	e0bffd17 	ldw	r2,-12(fp)
   11d38:	10800104 	addi	r2,r2,4
   11d3c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11d40:	e0fffe17 	ldw	r3,-8(fp)
   11d44:	e0bfff17 	ldw	r2,-4(fp)
   11d48:	18bff31e 	bne	r3,r2,11d18 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   11d4c:	e037883a 	mov	sp,fp
   11d50:	df000017 	ldw	fp,0(sp)
   11d54:	dec00104 	addi	sp,sp,4
   11d58:	f800283a 	ret

00011d5c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   11d5c:	defff804 	addi	sp,sp,-32
   11d60:	dfc00715 	stw	ra,28(sp)
   11d64:	df000615 	stw	fp,24(sp)
   11d68:	df000604 	addi	fp,sp,24
   11d6c:	e13ffc15 	stw	r4,-16(fp)
   11d70:	e17ffd15 	stw	r5,-12(fp)
   11d74:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   11d78:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11d7c:	e0bffc17 	ldw	r2,-16(fp)
   11d80:	1004803a 	cmplt	r2,r2,zero
   11d84:	1000081e 	bne	r2,zero,11da8 <lseek+0x4c>
   11d88:	e0bffc17 	ldw	r2,-16(fp)
   11d8c:	10800324 	muli	r2,r2,12
   11d90:	1007883a 	mov	r3,r2
   11d94:	00800074 	movhi	r2,1
   11d98:	10960404 	addi	r2,r2,22544
   11d9c:	1887883a 	add	r3,r3,r2
   11da0:	e0ffff15 	stw	r3,-4(fp)
   11da4:	00000106 	br	11dac <lseek+0x50>
   11da8:	e03fff15 	stw	zero,-4(fp)
   11dac:	e0bfff17 	ldw	r2,-4(fp)
   11db0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   11db4:	e0bffb17 	ldw	r2,-20(fp)
   11db8:	1005003a 	cmpeq	r2,r2,zero
   11dbc:	1000111e 	bne	r2,zero,11e04 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   11dc0:	e0bffb17 	ldw	r2,-20(fp)
   11dc4:	10800017 	ldw	r2,0(r2)
   11dc8:	10800717 	ldw	r2,28(r2)
   11dcc:	1005003a 	cmpeq	r2,r2,zero
   11dd0:	1000091e 	bne	r2,zero,11df8 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   11dd4:	e0bffb17 	ldw	r2,-20(fp)
   11dd8:	10800017 	ldw	r2,0(r2)
   11ddc:	10800717 	ldw	r2,28(r2)
   11de0:	e13ffb17 	ldw	r4,-20(fp)
   11de4:	e17ffd17 	ldw	r5,-12(fp)
   11de8:	e1bffe17 	ldw	r6,-8(fp)
   11dec:	103ee83a 	callr	r2
   11df0:	e0bffa15 	stw	r2,-24(fp)
   11df4:	00000506 	br	11e0c <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   11df8:	00bfde84 	movi	r2,-134
   11dfc:	e0bffa15 	stw	r2,-24(fp)
   11e00:	00000206 	br	11e0c <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   11e04:	00bfebc4 	movi	r2,-81
   11e08:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   11e0c:	e0bffa17 	ldw	r2,-24(fp)
   11e10:	1004403a 	cmpge	r2,r2,zero
   11e14:	1000071e 	bne	r2,zero,11e34 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   11e18:	0011e4c0 	call	11e4c <alt_get_errno>
   11e1c:	1007883a 	mov	r3,r2
   11e20:	e0bffa17 	ldw	r2,-24(fp)
   11e24:	0085c83a 	sub	r2,zero,r2
   11e28:	18800015 	stw	r2,0(r3)
    rc = -1;
   11e2c:	00bfffc4 	movi	r2,-1
   11e30:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   11e34:	e0bffa17 	ldw	r2,-24(fp)
}
   11e38:	e037883a 	mov	sp,fp
   11e3c:	dfc00117 	ldw	ra,4(sp)
   11e40:	df000017 	ldw	fp,0(sp)
   11e44:	dec00204 	addi	sp,sp,8
   11e48:	f800283a 	ret

00011e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e4c:	defffd04 	addi	sp,sp,-12
   11e50:	dfc00215 	stw	ra,8(sp)
   11e54:	df000115 	stw	fp,4(sp)
   11e58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11e5c:	00800074 	movhi	r2,1
   11e60:	109a8804 	addi	r2,r2,27168
   11e64:	10800017 	ldw	r2,0(r2)
   11e68:	1005003a 	cmpeq	r2,r2,zero
   11e6c:	1000061e 	bne	r2,zero,11e88 <alt_get_errno+0x3c>
   11e70:	00800074 	movhi	r2,1
   11e74:	109a8804 	addi	r2,r2,27168
   11e78:	10800017 	ldw	r2,0(r2)
   11e7c:	103ee83a 	callr	r2
   11e80:	e0bfff15 	stw	r2,-4(fp)
   11e84:	00000306 	br	11e94 <alt_get_errno+0x48>
   11e88:	008000b4 	movhi	r2,2
   11e8c:	10a14e04 	addi	r2,r2,-31432
   11e90:	e0bfff15 	stw	r2,-4(fp)
   11e94:	e0bfff17 	ldw	r2,-4(fp)
}
   11e98:	e037883a 	mov	sp,fp
   11e9c:	dfc00117 	ldw	ra,4(sp)
   11ea0:	df000017 	ldw	fp,0(sp)
   11ea4:	dec00204 	addi	sp,sp,8
   11ea8:	f800283a 	ret

00011eac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11eac:	defffd04 	addi	sp,sp,-12
   11eb0:	dfc00215 	stw	ra,8(sp)
   11eb4:	df000115 	stw	fp,4(sp)
   11eb8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11ebc:	0009883a 	mov	r4,zero
   11ec0:	00123740 	call	12374 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11ec4:	00123a80 	call	123a8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11ec8:	01000074 	movhi	r4,1
   11ecc:	2113c604 	addi	r4,r4,20248
   11ed0:	01400074 	movhi	r5,1
   11ed4:	2953c604 	addi	r5,r5,20248
   11ed8:	01800074 	movhi	r6,1
   11edc:	3193c604 	addi	r6,r6,20248
   11ee0:	001371c0 	call	1371c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11ee4:	00132940 	call	13294 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11ee8:	01000074 	movhi	r4,1
   11eec:	210cbe04 	addi	r4,r4,13048
   11ef0:	0013f180 	call	13f18 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11ef4:	d126d617 	ldw	r4,-25768(gp)
   11ef8:	d166d717 	ldw	r5,-25764(gp)
   11efc:	d1a6d817 	ldw	r6,-25760(gp)
   11f00:	00026700 	call	2670 <main>
   11f04:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11f08:	01000044 	movi	r4,1
   11f0c:	00118940 	call	11894 <close>
  exit (result);
   11f10:	e13fff17 	ldw	r4,-4(fp)
   11f14:	0013f2c0 	call	13f2c <exit>

00011f18 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   11f18:	defffe04 	addi	sp,sp,-8
   11f1c:	df000115 	stw	fp,4(sp)
   11f20:	df000104 	addi	fp,sp,4
   11f24:	e13fff15 	stw	r4,-4(fp)
}
   11f28:	e037883a 	mov	sp,fp
   11f2c:	df000017 	ldw	fp,0(sp)
   11f30:	dec00104 	addi	sp,sp,4
   11f34:	f800283a 	ret

00011f38 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11f38:	defffe04 	addi	sp,sp,-8
   11f3c:	df000115 	stw	fp,4(sp)
   11f40:	df000104 	addi	fp,sp,4
   11f44:	e13fff15 	stw	r4,-4(fp)
}
   11f48:	e037883a 	mov	sp,fp
   11f4c:	df000017 	ldw	fp,0(sp)
   11f50:	dec00104 	addi	sp,sp,4
   11f54:	f800283a 	ret

00011f58 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   11f58:	defff704 	addi	sp,sp,-36
   11f5c:	dfc00815 	stw	ra,32(sp)
   11f60:	df000715 	stw	fp,28(sp)
   11f64:	df000704 	addi	fp,sp,28
   11f68:	e13ffb15 	stw	r4,-20(fp)
   11f6c:	e17ffc15 	stw	r5,-16(fp)
   11f70:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11f74:	e0bffb17 	ldw	r2,-20(fp)
   11f78:	1004803a 	cmplt	r2,r2,zero
   11f7c:	1000081e 	bne	r2,zero,11fa0 <read+0x48>
   11f80:	e0bffb17 	ldw	r2,-20(fp)
   11f84:	10800324 	muli	r2,r2,12
   11f88:	1007883a 	mov	r3,r2
   11f8c:	00800074 	movhi	r2,1
   11f90:	10960404 	addi	r2,r2,22544
   11f94:	1887883a 	add	r3,r3,r2
   11f98:	e0ffff15 	stw	r3,-4(fp)
   11f9c:	00000106 	br	11fa4 <read+0x4c>
   11fa0:	e03fff15 	stw	zero,-4(fp)
   11fa4:	e0bfff17 	ldw	r2,-4(fp)
   11fa8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   11fac:	e0bffa17 	ldw	r2,-24(fp)
   11fb0:	1005003a 	cmpeq	r2,r2,zero
   11fb4:	1000241e 	bne	r2,zero,12048 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   11fb8:	e0bffa17 	ldw	r2,-24(fp)
   11fbc:	10800217 	ldw	r2,8(r2)
   11fc0:	108000cc 	andi	r2,r2,3
   11fc4:	10800060 	cmpeqi	r2,r2,1
   11fc8:	10001a1e 	bne	r2,zero,12034 <read+0xdc>
   11fcc:	e0bffa17 	ldw	r2,-24(fp)
   11fd0:	10800017 	ldw	r2,0(r2)
   11fd4:	10800517 	ldw	r2,20(r2)
   11fd8:	1005003a 	cmpeq	r2,r2,zero
   11fdc:	1000151e 	bne	r2,zero,12034 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   11fe0:	e0bffa17 	ldw	r2,-24(fp)
   11fe4:	10800017 	ldw	r2,0(r2)
   11fe8:	10800517 	ldw	r2,20(r2)
   11fec:	e17ffc17 	ldw	r5,-16(fp)
   11ff0:	e1bffd17 	ldw	r6,-12(fp)
   11ff4:	e13ffa17 	ldw	r4,-24(fp)
   11ff8:	103ee83a 	callr	r2
   11ffc:	e0bff915 	stw	r2,-28(fp)
   12000:	e0bff917 	ldw	r2,-28(fp)
   12004:	1004403a 	cmpge	r2,r2,zero
   12008:	1000071e 	bne	r2,zero,12028 <read+0xd0>
        {
          ALT_ERRNO = -rval;
   1200c:	00120780 	call	12078 <alt_get_errno>
   12010:	e0fff917 	ldw	r3,-28(fp)
   12014:	00c7c83a 	sub	r3,zero,r3
   12018:	10c00015 	stw	r3,0(r2)
          return -1;
   1201c:	00bfffc4 	movi	r2,-1
   12020:	e0bffe15 	stw	r2,-8(fp)
   12024:	00000e06 	br	12060 <read+0x108>
        }
        return rval;
   12028:	e0bff917 	ldw	r2,-28(fp)
   1202c:	e0bffe15 	stw	r2,-8(fp)
   12030:	00000b06 	br	12060 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   12034:	00120780 	call	12078 <alt_get_errno>
   12038:	1007883a 	mov	r3,r2
   1203c:	00800344 	movi	r2,13
   12040:	18800015 	stw	r2,0(r3)
   12044:	00000406 	br	12058 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   12048:	00120780 	call	12078 <alt_get_errno>
   1204c:	1007883a 	mov	r3,r2
   12050:	00801444 	movi	r2,81
   12054:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12058:	00bfffc4 	movi	r2,-1
   1205c:	e0bffe15 	stw	r2,-8(fp)
   12060:	e0bffe17 	ldw	r2,-8(fp)
}
   12064:	e037883a 	mov	sp,fp
   12068:	dfc00117 	ldw	ra,4(sp)
   1206c:	df000017 	ldw	fp,0(sp)
   12070:	dec00204 	addi	sp,sp,8
   12074:	f800283a 	ret

00012078 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12078:	defffd04 	addi	sp,sp,-12
   1207c:	dfc00215 	stw	ra,8(sp)
   12080:	df000115 	stw	fp,4(sp)
   12084:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12088:	00800074 	movhi	r2,1
   1208c:	109a8804 	addi	r2,r2,27168
   12090:	10800017 	ldw	r2,0(r2)
   12094:	1005003a 	cmpeq	r2,r2,zero
   12098:	1000061e 	bne	r2,zero,120b4 <alt_get_errno+0x3c>
   1209c:	00800074 	movhi	r2,1
   120a0:	109a8804 	addi	r2,r2,27168
   120a4:	10800017 	ldw	r2,0(r2)
   120a8:	103ee83a 	callr	r2
   120ac:	e0bfff15 	stw	r2,-4(fp)
   120b0:	00000306 	br	120c0 <alt_get_errno+0x48>
   120b4:	008000b4 	movhi	r2,2
   120b8:	10a14e04 	addi	r2,r2,-31432
   120bc:	e0bfff15 	stw	r2,-4(fp)
   120c0:	e0bfff17 	ldw	r2,-4(fp)
}
   120c4:	e037883a 	mov	sp,fp
   120c8:	dfc00117 	ldw	ra,4(sp)
   120cc:	df000017 	ldw	fp,0(sp)
   120d0:	dec00204 	addi	sp,sp,8
   120d4:	f800283a 	ret

000120d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   120d8:	defffe04 	addi	sp,sp,-8
   120dc:	df000115 	stw	fp,4(sp)
   120e0:	df000104 	addi	fp,sp,4
   120e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   120e8:	e0bfff17 	ldw	r2,-4(fp)
   120ec:	108000d0 	cmplti	r2,r2,3
   120f0:	10000d1e 	bne	r2,zero,12128 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   120f4:	e0bfff17 	ldw	r2,-4(fp)
   120f8:	00c00074 	movhi	r3,1
   120fc:	18d60404 	addi	r3,r3,22544
   12100:	10800324 	muli	r2,r2,12
   12104:	10c5883a 	add	r2,r2,r3
   12108:	10800204 	addi	r2,r2,8
   1210c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   12110:	e0bfff17 	ldw	r2,-4(fp)
   12114:	00c00074 	movhi	r3,1
   12118:	18d60404 	addi	r3,r3,22544
   1211c:	10800324 	muli	r2,r2,12
   12120:	10c5883a 	add	r2,r2,r3
   12124:	10000015 	stw	zero,0(r2)
  }
}
   12128:	e037883a 	mov	sp,fp
   1212c:	df000017 	ldw	fp,0(sp)
   12130:	dec00104 	addi	sp,sp,4
   12134:	f800283a 	ret

00012138 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   12138:	defff804 	addi	sp,sp,-32
   1213c:	df000715 	stw	fp,28(sp)
   12140:	df000704 	addi	fp,sp,28
   12144:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12148:	0005303a 	rdctl	r2,status
   1214c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12150:	e0fffb17 	ldw	r3,-20(fp)
   12154:	00bfff84 	movi	r2,-2
   12158:	1884703a 	and	r2,r3,r2
   1215c:	1001703a 	wrctl	status,r2
  
  return context;
   12160:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12164:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   12168:	d0a00d17 	ldw	r2,-32716(gp)
   1216c:	10c000c4 	addi	r3,r2,3
   12170:	00bfff04 	movi	r2,-4
   12174:	1884703a 	and	r2,r3,r2
   12178:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   1217c:	d0e00d17 	ldw	r3,-32716(gp)
   12180:	e0bffe17 	ldw	r2,-8(fp)
   12184:	1887883a 	add	r3,r3,r2
   12188:	00802034 	movhi	r2,128
   1218c:	10800004 	addi	r2,r2,0
   12190:	10c0072e 	bgeu	r2,r3,121b0 <sbrk+0x78>
   12194:	e0bffd17 	ldw	r2,-12(fp)
   12198:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1219c:	e0bffa17 	ldw	r2,-24(fp)
   121a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   121a4:	00bfffc4 	movi	r2,-1
   121a8:	e0bfff15 	stw	r2,-4(fp)
   121ac:	00000c06 	br	121e0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   121b0:	d0a00d17 	ldw	r2,-32716(gp)
   121b4:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   121b8:	d0e00d17 	ldw	r3,-32716(gp)
   121bc:	e0bffe17 	ldw	r2,-8(fp)
   121c0:	1885883a 	add	r2,r3,r2
   121c4:	d0a00d15 	stw	r2,-32716(gp)
   121c8:	e0bffd17 	ldw	r2,-12(fp)
   121cc:	e0bff915 	stw	r2,-28(fp)
   121d0:	e0bff917 	ldw	r2,-28(fp)
   121d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   121d8:	e0bffc17 	ldw	r2,-16(fp)
   121dc:	e0bfff15 	stw	r2,-4(fp)
   121e0:	e0bfff17 	ldw	r2,-4(fp)
} 
   121e4:	e037883a 	mov	sp,fp
   121e8:	df000017 	ldw	fp,0(sp)
   121ec:	dec00104 	addi	sp,sp,4
   121f0:	f800283a 	ret

000121f4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   121f4:	defff704 	addi	sp,sp,-36
   121f8:	dfc00815 	stw	ra,32(sp)
   121fc:	df000715 	stw	fp,28(sp)
   12200:	df000704 	addi	fp,sp,28
   12204:	e13ffb15 	stw	r4,-20(fp)
   12208:	e17ffc15 	stw	r5,-16(fp)
   1220c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12210:	e0bffb17 	ldw	r2,-20(fp)
   12214:	1004803a 	cmplt	r2,r2,zero
   12218:	1000081e 	bne	r2,zero,1223c <write+0x48>
   1221c:	e0bffb17 	ldw	r2,-20(fp)
   12220:	10800324 	muli	r2,r2,12
   12224:	1007883a 	mov	r3,r2
   12228:	00800074 	movhi	r2,1
   1222c:	10960404 	addi	r2,r2,22544
   12230:	1887883a 	add	r3,r3,r2
   12234:	e0ffff15 	stw	r3,-4(fp)
   12238:	00000106 	br	12240 <write+0x4c>
   1223c:	e03fff15 	stw	zero,-4(fp)
   12240:	e0bfff17 	ldw	r2,-4(fp)
   12244:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   12248:	e0bffa17 	ldw	r2,-24(fp)
   1224c:	1005003a 	cmpeq	r2,r2,zero
   12250:	1000241e 	bne	r2,zero,122e4 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12254:	e0bffa17 	ldw	r2,-24(fp)
   12258:	10800217 	ldw	r2,8(r2)
   1225c:	108000cc 	andi	r2,r2,3
   12260:	1005003a 	cmpeq	r2,r2,zero
   12264:	10001a1e 	bne	r2,zero,122d0 <write+0xdc>
   12268:	e0bffa17 	ldw	r2,-24(fp)
   1226c:	10800017 	ldw	r2,0(r2)
   12270:	10800617 	ldw	r2,24(r2)
   12274:	1005003a 	cmpeq	r2,r2,zero
   12278:	1000151e 	bne	r2,zero,122d0 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   1227c:	e0bffa17 	ldw	r2,-24(fp)
   12280:	10800017 	ldw	r2,0(r2)
   12284:	10800617 	ldw	r2,24(r2)
   12288:	e17ffc17 	ldw	r5,-16(fp)
   1228c:	e1bffd17 	ldw	r6,-12(fp)
   12290:	e13ffa17 	ldw	r4,-24(fp)
   12294:	103ee83a 	callr	r2
   12298:	e0bff915 	stw	r2,-28(fp)
   1229c:	e0bff917 	ldw	r2,-28(fp)
   122a0:	1004403a 	cmpge	r2,r2,zero
   122a4:	1000071e 	bne	r2,zero,122c4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   122a8:	00123140 	call	12314 <alt_get_errno>
   122ac:	e0fff917 	ldw	r3,-28(fp)
   122b0:	00c7c83a 	sub	r3,zero,r3
   122b4:	10c00015 	stw	r3,0(r2)
        return -1;
   122b8:	00bfffc4 	movi	r2,-1
   122bc:	e0bffe15 	stw	r2,-8(fp)
   122c0:	00000e06 	br	122fc <write+0x108>
      }
      return rval;
   122c4:	e0bff917 	ldw	r2,-28(fp)
   122c8:	e0bffe15 	stw	r2,-8(fp)
   122cc:	00000b06 	br	122fc <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   122d0:	00123140 	call	12314 <alt_get_errno>
   122d4:	1007883a 	mov	r3,r2
   122d8:	00800344 	movi	r2,13
   122dc:	18800015 	stw	r2,0(r3)
   122e0:	00000406 	br	122f4 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   122e4:	00123140 	call	12314 <alt_get_errno>
   122e8:	1007883a 	mov	r3,r2
   122ec:	00801444 	movi	r2,81
   122f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   122f4:	00bfffc4 	movi	r2,-1
   122f8:	e0bffe15 	stw	r2,-8(fp)
   122fc:	e0bffe17 	ldw	r2,-8(fp)
}
   12300:	e037883a 	mov	sp,fp
   12304:	dfc00117 	ldw	ra,4(sp)
   12308:	df000017 	ldw	fp,0(sp)
   1230c:	dec00204 	addi	sp,sp,8
   12310:	f800283a 	ret

00012314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   12314:	defffd04 	addi	sp,sp,-12
   12318:	dfc00215 	stw	ra,8(sp)
   1231c:	df000115 	stw	fp,4(sp)
   12320:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12324:	00800074 	movhi	r2,1
   12328:	109a8804 	addi	r2,r2,27168
   1232c:	10800017 	ldw	r2,0(r2)
   12330:	1005003a 	cmpeq	r2,r2,zero
   12334:	1000061e 	bne	r2,zero,12350 <alt_get_errno+0x3c>
   12338:	00800074 	movhi	r2,1
   1233c:	109a8804 	addi	r2,r2,27168
   12340:	10800017 	ldw	r2,0(r2)
   12344:	103ee83a 	callr	r2
   12348:	e0bfff15 	stw	r2,-4(fp)
   1234c:	00000306 	br	1235c <alt_get_errno+0x48>
   12350:	008000b4 	movhi	r2,2
   12354:	10a14e04 	addi	r2,r2,-31432
   12358:	e0bfff15 	stw	r2,-4(fp)
   1235c:	e0bfff17 	ldw	r2,-4(fp)
}
   12360:	e037883a 	mov	sp,fp
   12364:	dfc00117 	ldw	ra,4(sp)
   12368:	df000017 	ldw	fp,0(sp)
   1236c:	dec00204 	addi	sp,sp,8
   12370:	f800283a 	ret

00012374 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12374:	defffd04 	addi	sp,sp,-12
   12378:	dfc00215 	stw	ra,8(sp)
   1237c:	df000115 	stw	fp,4(sp)
   12380:	df000104 	addi	fp,sp,4
   12384:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   12388:	0013bfc0 	call	13bfc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   1238c:	00800044 	movi	r2,1
   12390:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12394:	e037883a 	mov	sp,fp
   12398:	dfc00117 	ldw	ra,4(sp)
   1239c:	df000017 	ldw	fp,0(sp)
   123a0:	dec00204 	addi	sp,sp,8
   123a4:	f800283a 	ret

000123a8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   123a8:	defffe04 	addi	sp,sp,-8
   123ac:	dfc00115 	stw	ra,4(sp)
   123b0:	df000015 	stw	fp,0(sp)
   123b4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   123b8:	01002034 	movhi	r4,128
   123bc:	21081004 	addi	r4,r4,8256
   123c0:	000b883a 	mov	r5,zero
   123c4:	000d883a 	mov	r6,zero
   123c8:	01c0fa04 	movi	r7,1000
   123cc:	0012f580 	call	12f58 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   123d0:	01000074 	movhi	r4,1
   123d4:	21166e04 	addi	r4,r4,22968
   123d8:	000b883a 	mov	r5,zero
   123dc:	01800204 	movi	r6,8
   123e0:	00125840 	call	12584 <altera_avalon_jtag_uart_init>
   123e4:	01000074 	movhi	r4,1
   123e8:	21166404 	addi	r4,r4,22928
   123ec:	00124040 	call	12404 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   123f0:	e037883a 	mov	sp,fp
   123f4:	dfc00117 	ldw	ra,4(sp)
   123f8:	df000017 	ldw	fp,0(sp)
   123fc:	dec00204 	addi	sp,sp,8
   12400:	f800283a 	ret

00012404 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   12404:	defffd04 	addi	sp,sp,-12
   12408:	dfc00215 	stw	ra,8(sp)
   1240c:	df000115 	stw	fp,4(sp)
   12410:	df000104 	addi	fp,sp,4
   12414:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   12418:	e13fff17 	ldw	r4,-4(fp)
   1241c:	01400074 	movhi	r5,1
   12420:	295a8504 	addi	r5,r5,27156
   12424:	00131800 	call	13180 <alt_dev_llist_insert>
}
   12428:	e037883a 	mov	sp,fp
   1242c:	dfc00117 	ldw	ra,4(sp)
   12430:	df000017 	ldw	fp,0(sp)
   12434:	dec00204 	addi	sp,sp,8
   12438:	f800283a 	ret

0001243c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   1243c:	defffa04 	addi	sp,sp,-24
   12440:	dfc00515 	stw	ra,20(sp)
   12444:	df000415 	stw	fp,16(sp)
   12448:	df000404 	addi	fp,sp,16
   1244c:	e13ffd15 	stw	r4,-12(fp)
   12450:	e17ffe15 	stw	r5,-8(fp)
   12454:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12458:	e0bffd17 	ldw	r2,-12(fp)
   1245c:	10800017 	ldw	r2,0(r2)
   12460:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12464:	e0bffc17 	ldw	r2,-16(fp)
   12468:	11000a04 	addi	r4,r2,40
   1246c:	e0bffd17 	ldw	r2,-12(fp)
   12470:	11c00217 	ldw	r7,8(r2)
   12474:	e17ffe17 	ldw	r5,-8(fp)
   12478:	e1bfff17 	ldw	r6,-4(fp)
   1247c:	0012a840 	call	12a84 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12480:	e037883a 	mov	sp,fp
   12484:	dfc00117 	ldw	ra,4(sp)
   12488:	df000017 	ldw	fp,0(sp)
   1248c:	dec00204 	addi	sp,sp,8
   12490:	f800283a 	ret

00012494 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12494:	defffa04 	addi	sp,sp,-24
   12498:	dfc00515 	stw	ra,20(sp)
   1249c:	df000415 	stw	fp,16(sp)
   124a0:	df000404 	addi	fp,sp,16
   124a4:	e13ffd15 	stw	r4,-12(fp)
   124a8:	e17ffe15 	stw	r5,-8(fp)
   124ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   124b0:	e0bffd17 	ldw	r2,-12(fp)
   124b4:	10800017 	ldw	r2,0(r2)
   124b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   124bc:	e0bffc17 	ldw	r2,-16(fp)
   124c0:	11000a04 	addi	r4,r2,40
   124c4:	e0bffd17 	ldw	r2,-12(fp)
   124c8:	11c00217 	ldw	r7,8(r2)
   124cc:	e17ffe17 	ldw	r5,-8(fp)
   124d0:	e1bfff17 	ldw	r6,-4(fp)
   124d4:	0012ca80 	call	12ca8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   124d8:	e037883a 	mov	sp,fp
   124dc:	dfc00117 	ldw	ra,4(sp)
   124e0:	df000017 	ldw	fp,0(sp)
   124e4:	dec00204 	addi	sp,sp,8
   124e8:	f800283a 	ret

000124ec <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   124ec:	defffc04 	addi	sp,sp,-16
   124f0:	dfc00315 	stw	ra,12(sp)
   124f4:	df000215 	stw	fp,8(sp)
   124f8:	df000204 	addi	fp,sp,8
   124fc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12500:	e0bfff17 	ldw	r2,-4(fp)
   12504:	10800017 	ldw	r2,0(r2)
   12508:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   1250c:	e0bffe17 	ldw	r2,-8(fp)
   12510:	11000a04 	addi	r4,r2,40
   12514:	e0bfff17 	ldw	r2,-4(fp)
   12518:	11400217 	ldw	r5,8(r2)
   1251c:	001291c0 	call	1291c <altera_avalon_jtag_uart_close>
}
   12520:	e037883a 	mov	sp,fp
   12524:	dfc00117 	ldw	ra,4(sp)
   12528:	df000017 	ldw	fp,0(sp)
   1252c:	dec00204 	addi	sp,sp,8
   12530:	f800283a 	ret

00012534 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   12534:	defffa04 	addi	sp,sp,-24
   12538:	dfc00515 	stw	ra,20(sp)
   1253c:	df000415 	stw	fp,16(sp)
   12540:	df000404 	addi	fp,sp,16
   12544:	e13ffd15 	stw	r4,-12(fp)
   12548:	e17ffe15 	stw	r5,-8(fp)
   1254c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12550:	e0bffd17 	ldw	r2,-12(fp)
   12554:	10800017 	ldw	r2,0(r2)
   12558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   1255c:	e0bffc17 	ldw	r2,-16(fp)
   12560:	11000a04 	addi	r4,r2,40
   12564:	e17ffe17 	ldw	r5,-8(fp)
   12568:	e1bfff17 	ldw	r6,-4(fp)
   1256c:	00129900 	call	12990 <altera_avalon_jtag_uart_ioctl>
}
   12570:	e037883a 	mov	sp,fp
   12574:	dfc00117 	ldw	ra,4(sp)
   12578:	df000017 	ldw	fp,0(sp)
   1257c:	dec00204 	addi	sp,sp,8
   12580:	f800283a 	ret

00012584 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12584:	defffa04 	addi	sp,sp,-24
   12588:	dfc00515 	stw	ra,20(sp)
   1258c:	df000415 	stw	fp,16(sp)
   12590:	df000404 	addi	fp,sp,16
   12594:	e13ffd15 	stw	r4,-12(fp)
   12598:	e17ffe15 	stw	r5,-8(fp)
   1259c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   125a0:	e0fffd17 	ldw	r3,-12(fp)
   125a4:	00800044 	movi	r2,1
   125a8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   125ac:	e0bffd17 	ldw	r2,-12(fp)
   125b0:	10800017 	ldw	r2,0(r2)
   125b4:	11000104 	addi	r4,r2,4
   125b8:	e0bffd17 	ldw	r2,-12(fp)
   125bc:	10800817 	ldw	r2,32(r2)
   125c0:	1007883a 	mov	r3,r2
   125c4:	2005883a 	mov	r2,r4
   125c8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   125cc:	e13ffe17 	ldw	r4,-8(fp)
   125d0:	e17fff17 	ldw	r5,-4(fp)
   125d4:	d8000015 	stw	zero,0(sp)
   125d8:	01800074 	movhi	r6,1
   125dc:	31899104 	addi	r6,r6,9796
   125e0:	e1fffd17 	ldw	r7,-12(fp)
   125e4:	001338c0 	call	1338c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   125e8:	e0bffd17 	ldw	r2,-12(fp)
   125ec:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   125f0:	e0bffd17 	ldw	r2,-12(fp)
   125f4:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   125f8:	008000b4 	movhi	r2,2
   125fc:	10a15604 	addi	r2,r2,-31400
   12600:	10800017 	ldw	r2,0(r2)
   12604:	100b883a 	mov	r5,r2
   12608:	01800074 	movhi	r6,1
   1260c:	318a1b04 	addi	r6,r6,10348
   12610:	e1fffd17 	ldw	r7,-12(fp)
   12614:	0012fe80 	call	12fe8 <alt_alarm_start>
   12618:	1004403a 	cmpge	r2,r2,zero
   1261c:	1000041e 	bne	r2,zero,12630 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   12620:	e0fffd17 	ldw	r3,-12(fp)
   12624:	00a00034 	movhi	r2,32768
   12628:	10bfffc4 	addi	r2,r2,-1
   1262c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   12630:	e037883a 	mov	sp,fp
   12634:	dfc00117 	ldw	ra,4(sp)
   12638:	df000017 	ldw	fp,0(sp)
   1263c:	dec00204 	addi	sp,sp,8
   12640:	f800283a 	ret

00012644 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12644:	defff804 	addi	sp,sp,-32
   12648:	df000715 	stw	fp,28(sp)
   1264c:	df000704 	addi	fp,sp,28
   12650:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12654:	e0bfff17 	ldw	r2,-4(fp)
   12658:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   1265c:	e0bffe17 	ldw	r2,-8(fp)
   12660:	10800017 	ldw	r2,0(r2)
   12664:	e0bffd15 	stw	r2,-12(fp)
   12668:	00000006 	br	1266c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1266c:	e0bffd17 	ldw	r2,-12(fp)
   12670:	10800104 	addi	r2,r2,4
   12674:	10800037 	ldwio	r2,0(r2)
   12678:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   1267c:	e0bffc17 	ldw	r2,-16(fp)
   12680:	1080c00c 	andi	r2,r2,768
   12684:	1005003a 	cmpeq	r2,r2,zero
   12688:	1000741e 	bne	r2,zero,1285c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   1268c:	e0bffc17 	ldw	r2,-16(fp)
   12690:	1080400c 	andi	r2,r2,256
   12694:	1005003a 	cmpeq	r2,r2,zero
   12698:	1000351e 	bne	r2,zero,12770 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   1269c:	00800074 	movhi	r2,1
   126a0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   126a4:	e0bffe17 	ldw	r2,-8(fp)
   126a8:	10800a17 	ldw	r2,40(r2)
   126ac:	10800044 	addi	r2,r2,1
   126b0:	1081ffcc 	andi	r2,r2,2047
   126b4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   126b8:	e0bffe17 	ldw	r2,-8(fp)
   126bc:	10c00b17 	ldw	r3,44(r2)
   126c0:	e0bffa17 	ldw	r2,-24(fp)
   126c4:	18801626 	beq	r3,r2,12720 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   126c8:	e0bffd17 	ldw	r2,-12(fp)
   126cc:	10800037 	ldwio	r2,0(r2)
   126d0:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   126d4:	e0bffb17 	ldw	r2,-20(fp)
   126d8:	10a0000c 	andi	r2,r2,32768
   126dc:	1005003a 	cmpeq	r2,r2,zero
   126e0:	10000f1e 	bne	r2,zero,12720 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   126e4:	e0bffe17 	ldw	r2,-8(fp)
   126e8:	10c00a17 	ldw	r3,40(r2)
   126ec:	e0bffb17 	ldw	r2,-20(fp)
   126f0:	1009883a 	mov	r4,r2
   126f4:	e0bffe17 	ldw	r2,-8(fp)
   126f8:	1885883a 	add	r2,r3,r2
   126fc:	10800e04 	addi	r2,r2,56
   12700:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12704:	e0bffe17 	ldw	r2,-8(fp)
   12708:	10800a17 	ldw	r2,40(r2)
   1270c:	10800044 	addi	r2,r2,1
   12710:	10c1ffcc 	andi	r3,r2,2047
   12714:	e0bffe17 	ldw	r2,-8(fp)
   12718:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   1271c:	003fe106 	br	126a4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12720:	e0bffb17 	ldw	r2,-20(fp)
   12724:	10bfffec 	andhi	r2,r2,65535
   12728:	1005003a 	cmpeq	r2,r2,zero
   1272c:	1000101e 	bne	r2,zero,12770 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12730:	e0bffe17 	ldw	r2,-8(fp)
   12734:	10c00817 	ldw	r3,32(r2)
   12738:	00bfff84 	movi	r2,-2
   1273c:	1886703a 	and	r3,r3,r2
   12740:	e0bffe17 	ldw	r2,-8(fp)
   12744:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12748:	e0bffd17 	ldw	r2,-12(fp)
   1274c:	11000104 	addi	r4,r2,4
   12750:	e0bffe17 	ldw	r2,-8(fp)
   12754:	10800817 	ldw	r2,32(r2)
   12758:	1007883a 	mov	r3,r2
   1275c:	2005883a 	mov	r2,r4
   12760:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12764:	e0bffd17 	ldw	r2,-12(fp)
   12768:	10800104 	addi	r2,r2,4
   1276c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12770:	e0bffc17 	ldw	r2,-16(fp)
   12774:	1080800c 	andi	r2,r2,512
   12778:	1005003a 	cmpeq	r2,r2,zero
   1277c:	103fbb1e 	bne	r2,zero,1266c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12780:	e0bffc17 	ldw	r2,-16(fp)
   12784:	10bfffec 	andhi	r2,r2,65535
   12788:	1004d43a 	srli	r2,r2,16
   1278c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12790:	00001506 	br	127e8 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12794:	e13ffd17 	ldw	r4,-12(fp)
   12798:	e0bffe17 	ldw	r2,-8(fp)
   1279c:	10c00d17 	ldw	r3,52(r2)
   127a0:	e0bffe17 	ldw	r2,-8(fp)
   127a4:	1885883a 	add	r2,r3,r2
   127a8:	10820e04 	addi	r2,r2,2104
   127ac:	10800003 	ldbu	r2,0(r2)
   127b0:	10c03fcc 	andi	r3,r2,255
   127b4:	18c0201c 	xori	r3,r3,128
   127b8:	18ffe004 	addi	r3,r3,-128
   127bc:	2005883a 	mov	r2,r4
   127c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   127c4:	e0bffe17 	ldw	r2,-8(fp)
   127c8:	10800d17 	ldw	r2,52(r2)
   127cc:	10800044 	addi	r2,r2,1
   127d0:	10c1ffcc 	andi	r3,r2,2047
   127d4:	e0bffe17 	ldw	r2,-8(fp)
   127d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   127dc:	e0bff917 	ldw	r2,-28(fp)
   127e0:	10bfffc4 	addi	r2,r2,-1
   127e4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   127e8:	e0bff917 	ldw	r2,-28(fp)
   127ec:	1005003a 	cmpeq	r2,r2,zero
   127f0:	1000051e 	bne	r2,zero,12808 <altera_avalon_jtag_uart_irq+0x1c4>
   127f4:	e0bffe17 	ldw	r2,-8(fp)
   127f8:	10c00d17 	ldw	r3,52(r2)
   127fc:	e0bffe17 	ldw	r2,-8(fp)
   12800:	10800c17 	ldw	r2,48(r2)
   12804:	18bfe31e 	bne	r3,r2,12794 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12808:	e0bff917 	ldw	r2,-28(fp)
   1280c:	1005003a 	cmpeq	r2,r2,zero
   12810:	103f961e 	bne	r2,zero,1266c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12814:	e0bffe17 	ldw	r2,-8(fp)
   12818:	10c00817 	ldw	r3,32(r2)
   1281c:	00bfff44 	movi	r2,-3
   12820:	1886703a 	and	r3,r3,r2
   12824:	e0bffe17 	ldw	r2,-8(fp)
   12828:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1282c:	e0bffe17 	ldw	r2,-8(fp)
   12830:	10800017 	ldw	r2,0(r2)
   12834:	11000104 	addi	r4,r2,4
   12838:	e0bffe17 	ldw	r2,-8(fp)
   1283c:	10800817 	ldw	r2,32(r2)
   12840:	1007883a 	mov	r3,r2
   12844:	2005883a 	mov	r2,r4
   12848:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   1284c:	e0bffd17 	ldw	r2,-12(fp)
   12850:	10800104 	addi	r2,r2,4
   12854:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12858:	003f8406 	br	1266c <altera_avalon_jtag_uart_irq+0x28>
}
   1285c:	e037883a 	mov	sp,fp
   12860:	df000017 	ldw	fp,0(sp)
   12864:	dec00104 	addi	sp,sp,4
   12868:	f800283a 	ret

0001286c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   1286c:	defffc04 	addi	sp,sp,-16
   12870:	df000315 	stw	fp,12(sp)
   12874:	df000304 	addi	fp,sp,12
   12878:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   1287c:	e0bfff17 	ldw	r2,-4(fp)
   12880:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12884:	e0bffe17 	ldw	r2,-8(fp)
   12888:	10800017 	ldw	r2,0(r2)
   1288c:	10800104 	addi	r2,r2,4
   12890:	10800037 	ldwio	r2,0(r2)
   12894:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12898:	e0bffd17 	ldw	r2,-12(fp)
   1289c:	1081000c 	andi	r2,r2,1024
   128a0:	1005003a 	cmpeq	r2,r2,zero
   128a4:	10000c1e 	bne	r2,zero,128d8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   128a8:	e0bffe17 	ldw	r2,-8(fp)
   128ac:	10800017 	ldw	r2,0(r2)
   128b0:	11000104 	addi	r4,r2,4
   128b4:	e0bffe17 	ldw	r2,-8(fp)
   128b8:	10800817 	ldw	r2,32(r2)
   128bc:	10810014 	ori	r2,r2,1024
   128c0:	1007883a 	mov	r3,r2
   128c4:	2005883a 	mov	r2,r4
   128c8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   128cc:	e0bffe17 	ldw	r2,-8(fp)
   128d0:	10000915 	stw	zero,36(r2)
   128d4:	00000a06 	br	12900 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   128d8:	e0bffe17 	ldw	r2,-8(fp)
   128dc:	10c00917 	ldw	r3,36(r2)
   128e0:	00a00034 	movhi	r2,32768
   128e4:	10bfff04 	addi	r2,r2,-4
   128e8:	10c00536 	bltu	r2,r3,12900 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   128ec:	e0bffe17 	ldw	r2,-8(fp)
   128f0:	10800917 	ldw	r2,36(r2)
   128f4:	10c00044 	addi	r3,r2,1
   128f8:	e0bffe17 	ldw	r2,-8(fp)
   128fc:	10c00915 	stw	r3,36(r2)
   12900:	008000b4 	movhi	r2,2
   12904:	10a15604 	addi	r2,r2,-31400
   12908:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   1290c:	e037883a 	mov	sp,fp
   12910:	df000017 	ldw	fp,0(sp)
   12914:	dec00104 	addi	sp,sp,4
   12918:	f800283a 	ret

0001291c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   1291c:	defffc04 	addi	sp,sp,-16
   12920:	df000315 	stw	fp,12(sp)
   12924:	df000304 	addi	fp,sp,12
   12928:	e13ffd15 	stw	r4,-12(fp)
   1292c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12930:	00000706 	br	12950 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   12934:	e0bffe17 	ldw	r2,-8(fp)
   12938:	1090000c 	andi	r2,r2,16384
   1293c:	1005003a 	cmpeq	r2,r2,zero
   12940:	1000031e 	bne	r2,zero,12950 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   12944:	00bffd44 	movi	r2,-11
   12948:	e0bfff15 	stw	r2,-4(fp)
   1294c:	00000b06 	br	1297c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	10c00d17 	ldw	r3,52(r2)
   12958:	e0bffd17 	ldw	r2,-12(fp)
   1295c:	10800c17 	ldw	r2,48(r2)
   12960:	18800526 	beq	r3,r2,12978 <altera_avalon_jtag_uart_close+0x5c>
   12964:	e0bffd17 	ldw	r2,-12(fp)
   12968:	10c00917 	ldw	r3,36(r2)
   1296c:	e0bffd17 	ldw	r2,-12(fp)
   12970:	10800117 	ldw	r2,4(r2)
   12974:	18bfef36 	bltu	r3,r2,12934 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12978:	e03fff15 	stw	zero,-4(fp)
   1297c:	e0bfff17 	ldw	r2,-4(fp)
}
   12980:	e037883a 	mov	sp,fp
   12984:	df000017 	ldw	fp,0(sp)
   12988:	dec00104 	addi	sp,sp,4
   1298c:	f800283a 	ret

00012990 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12990:	defff804 	addi	sp,sp,-32
   12994:	df000715 	stw	fp,28(sp)
   12998:	df000704 	addi	fp,sp,28
   1299c:	e13ffb15 	stw	r4,-20(fp)
   129a0:	e17ffc15 	stw	r5,-16(fp)
   129a4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   129a8:	00bff9c4 	movi	r2,-25
   129ac:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   129b0:	e0bffc17 	ldw	r2,-16(fp)
   129b4:	e0bfff15 	stw	r2,-4(fp)
   129b8:	e0ffff17 	ldw	r3,-4(fp)
   129bc:	189a8060 	cmpeqi	r2,r3,27137
   129c0:	1000041e 	bne	r2,zero,129d4 <altera_avalon_jtag_uart_ioctl+0x44>
   129c4:	e0ffff17 	ldw	r3,-4(fp)
   129c8:	189a80a0 	cmpeqi	r2,r3,27138
   129cc:	10001b1e 	bne	r2,zero,12a3c <altera_avalon_jtag_uart_ioctl+0xac>
   129d0:	00002706 	br	12a70 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   129d4:	e0bffb17 	ldw	r2,-20(fp)
   129d8:	10c00117 	ldw	r3,4(r2)
   129dc:	00a00034 	movhi	r2,32768
   129e0:	10bfffc4 	addi	r2,r2,-1
   129e4:	18802226 	beq	r3,r2,12a70 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   129e8:	e0bffd17 	ldw	r2,-12(fp)
   129ec:	10800017 	ldw	r2,0(r2)
   129f0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   129f4:	e0bff917 	ldw	r2,-28(fp)
   129f8:	10800090 	cmplti	r2,r2,2
   129fc:	1000071e 	bne	r2,zero,12a1c <altera_avalon_jtag_uart_ioctl+0x8c>
   12a00:	e0fff917 	ldw	r3,-28(fp)
   12a04:	00a00034 	movhi	r2,32768
   12a08:	10bfffc4 	addi	r2,r2,-1
   12a0c:	18800326 	beq	r3,r2,12a1c <altera_avalon_jtag_uart_ioctl+0x8c>
   12a10:	e0bff917 	ldw	r2,-28(fp)
   12a14:	e0bffe15 	stw	r2,-8(fp)
   12a18:	00000306 	br	12a28 <altera_avalon_jtag_uart_ioctl+0x98>
   12a1c:	00e00034 	movhi	r3,32768
   12a20:	18ffff84 	addi	r3,r3,-2
   12a24:	e0fffe15 	stw	r3,-8(fp)
   12a28:	e0bffb17 	ldw	r2,-20(fp)
   12a2c:	e0fffe17 	ldw	r3,-8(fp)
   12a30:	10c00115 	stw	r3,4(r2)
      rc = 0;
   12a34:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   12a38:	00000d06 	br	12a70 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12a3c:	e0bffb17 	ldw	r2,-20(fp)
   12a40:	10c00117 	ldw	r3,4(r2)
   12a44:	00a00034 	movhi	r2,32768
   12a48:	10bfffc4 	addi	r2,r2,-1
   12a4c:	18800826 	beq	r3,r2,12a70 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12a50:	e13ffd17 	ldw	r4,-12(fp)
   12a54:	e0bffb17 	ldw	r2,-20(fp)
   12a58:	10c00917 	ldw	r3,36(r2)
   12a5c:	e0bffb17 	ldw	r2,-20(fp)
   12a60:	10800117 	ldw	r2,4(r2)
   12a64:	1885803a 	cmpltu	r2,r3,r2
   12a68:	20800015 	stw	r2,0(r4)
      rc = 0;
   12a6c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   12a70:	e0bffa17 	ldw	r2,-24(fp)
}
   12a74:	e037883a 	mov	sp,fp
   12a78:	df000017 	ldw	fp,0(sp)
   12a7c:	dec00104 	addi	sp,sp,4
   12a80:	f800283a 	ret

00012a84 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12a84:	defff204 	addi	sp,sp,-56
   12a88:	dfc00d15 	stw	ra,52(sp)
   12a8c:	df000c15 	stw	fp,48(sp)
   12a90:	df000c04 	addi	fp,sp,48
   12a94:	e13ffb15 	stw	r4,-20(fp)
   12a98:	e17ffc15 	stw	r5,-16(fp)
   12a9c:	e1bffd15 	stw	r6,-12(fp)
   12aa0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   12aa4:	e0bffc17 	ldw	r2,-16(fp)
   12aa8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12aac:	00004806 	br	12bd0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12ab0:	e0bffb17 	ldw	r2,-20(fp)
   12ab4:	10800a17 	ldw	r2,40(r2)
   12ab8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12abc:	e0bffb17 	ldw	r2,-20(fp)
   12ac0:	10800b17 	ldw	r2,44(r2)
   12ac4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   12ac8:	e0fff717 	ldw	r3,-36(fp)
   12acc:	e0bff617 	ldw	r2,-40(fp)
   12ad0:	18800536 	bltu	r3,r2,12ae8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12ad4:	e0bff717 	ldw	r2,-36(fp)
   12ad8:	e0fff617 	ldw	r3,-40(fp)
   12adc:	10c5c83a 	sub	r2,r2,r3
   12ae0:	e0bff815 	stw	r2,-32(fp)
   12ae4:	00000406 	br	12af8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12ae8:	00820004 	movi	r2,2048
   12aec:	e0fff617 	ldw	r3,-40(fp)
   12af0:	10c5c83a 	sub	r2,r2,r3
   12af4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   12af8:	e0bff817 	ldw	r2,-32(fp)
   12afc:	1005003a 	cmpeq	r2,r2,zero
   12b00:	10001f1e 	bne	r2,zero,12b80 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   12b04:	e0fffd17 	ldw	r3,-12(fp)
   12b08:	e0bff817 	ldw	r2,-32(fp)
   12b0c:	1880022e 	bgeu	r3,r2,12b18 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   12b10:	e0bffd17 	ldw	r2,-12(fp)
   12b14:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12b18:	e0bffb17 	ldw	r2,-20(fp)
   12b1c:	10c00e04 	addi	r3,r2,56
   12b20:	e0bff617 	ldw	r2,-40(fp)
   12b24:	1887883a 	add	r3,r3,r2
   12b28:	e0bffa17 	ldw	r2,-24(fp)
   12b2c:	1009883a 	mov	r4,r2
   12b30:	180b883a 	mov	r5,r3
   12b34:	e1bff817 	ldw	r6,-32(fp)
   12b38:	00035c00 	call	35c0 <memcpy>
      ptr   += n;
   12b3c:	e0fff817 	ldw	r3,-32(fp)
   12b40:	e0bffa17 	ldw	r2,-24(fp)
   12b44:	10c5883a 	add	r2,r2,r3
   12b48:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   12b4c:	e0fffd17 	ldw	r3,-12(fp)
   12b50:	e0bff817 	ldw	r2,-32(fp)
   12b54:	1885c83a 	sub	r2,r3,r2
   12b58:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12b5c:	e0fff617 	ldw	r3,-40(fp)
   12b60:	e0bff817 	ldw	r2,-32(fp)
   12b64:	1885883a 	add	r2,r3,r2
   12b68:	10c1ffcc 	andi	r3,r2,2047
   12b6c:	e0bffb17 	ldw	r2,-20(fp)
   12b70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12b74:	e0bffd17 	ldw	r2,-12(fp)
   12b78:	10800048 	cmpgei	r2,r2,1
   12b7c:	103fcc1e 	bne	r2,zero,12ab0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   12b80:	e0fffa17 	ldw	r3,-24(fp)
   12b84:	e0bffc17 	ldw	r2,-16(fp)
   12b88:	1880141e 	bne	r3,r2,12bdc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12b8c:	e0bffe17 	ldw	r2,-8(fp)
   12b90:	1090000c 	andi	r2,r2,16384
   12b94:	1004c03a 	cmpne	r2,r2,zero
   12b98:	1000101e 	bne	r2,zero,12bdc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12b9c:	e0bffb17 	ldw	r2,-20(fp)
   12ba0:	10c00a17 	ldw	r3,40(r2)
   12ba4:	e0bff717 	ldw	r2,-36(fp)
   12ba8:	1880051e 	bne	r3,r2,12bc0 <altera_avalon_jtag_uart_read+0x13c>
   12bac:	e0bffb17 	ldw	r2,-20(fp)
   12bb0:	10c00917 	ldw	r3,36(r2)
   12bb4:	e0bffb17 	ldw	r2,-20(fp)
   12bb8:	10800117 	ldw	r2,4(r2)
   12bbc:	18bff736 	bltu	r3,r2,12b9c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12bc0:	e0bffb17 	ldw	r2,-20(fp)
   12bc4:	10c00a17 	ldw	r3,40(r2)
   12bc8:	e0bff717 	ldw	r2,-36(fp)
   12bcc:	18800326 	beq	r3,r2,12bdc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12bd0:	e0bffd17 	ldw	r2,-12(fp)
   12bd4:	10800048 	cmpgei	r2,r2,1
   12bd8:	103fb51e 	bne	r2,zero,12ab0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12bdc:	e0fffa17 	ldw	r3,-24(fp)
   12be0:	e0bffc17 	ldw	r2,-16(fp)
   12be4:	18801926 	beq	r3,r2,12c4c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12be8:	0005303a 	rdctl	r2,status
   12bec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12bf0:	e0fff517 	ldw	r3,-44(fp)
   12bf4:	00bfff84 	movi	r2,-2
   12bf8:	1884703a 	and	r2,r3,r2
   12bfc:	1001703a 	wrctl	status,r2
  
  return context;
   12c00:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12c04:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12c08:	e0bffb17 	ldw	r2,-20(fp)
   12c0c:	10800817 	ldw	r2,32(r2)
   12c10:	10c00054 	ori	r3,r2,1
   12c14:	e0bffb17 	ldw	r2,-20(fp)
   12c18:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12c1c:	e0bffb17 	ldw	r2,-20(fp)
   12c20:	10800017 	ldw	r2,0(r2)
   12c24:	11000104 	addi	r4,r2,4
   12c28:	e0bffb17 	ldw	r2,-20(fp)
   12c2c:	10800817 	ldw	r2,32(r2)
   12c30:	1007883a 	mov	r3,r2
   12c34:	2005883a 	mov	r2,r4
   12c38:	10c00035 	stwio	r3,0(r2)
   12c3c:	e0bff917 	ldw	r2,-28(fp)
   12c40:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12c44:	e0bff417 	ldw	r2,-48(fp)
   12c48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12c4c:	e0fffa17 	ldw	r3,-24(fp)
   12c50:	e0bffc17 	ldw	r2,-16(fp)
   12c54:	18800526 	beq	r3,r2,12c6c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   12c58:	e0fffa17 	ldw	r3,-24(fp)
   12c5c:	e0bffc17 	ldw	r2,-16(fp)
   12c60:	1887c83a 	sub	r3,r3,r2
   12c64:	e0ffff15 	stw	r3,-4(fp)
   12c68:	00000906 	br	12c90 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   12c6c:	e0bffe17 	ldw	r2,-8(fp)
   12c70:	1090000c 	andi	r2,r2,16384
   12c74:	1005003a 	cmpeq	r2,r2,zero
   12c78:	1000031e 	bne	r2,zero,12c88 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   12c7c:	00bffd44 	movi	r2,-11
   12c80:	e0bfff15 	stw	r2,-4(fp)
   12c84:	00000206 	br	12c90 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   12c88:	00bffec4 	movi	r2,-5
   12c8c:	e0bfff15 	stw	r2,-4(fp)
   12c90:	e0bfff17 	ldw	r2,-4(fp)
}
   12c94:	e037883a 	mov	sp,fp
   12c98:	dfc00117 	ldw	ra,4(sp)
   12c9c:	df000017 	ldw	fp,0(sp)
   12ca0:	dec00204 	addi	sp,sp,8
   12ca4:	f800283a 	ret

00012ca8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12ca8:	defff204 	addi	sp,sp,-56
   12cac:	dfc00d15 	stw	ra,52(sp)
   12cb0:	df000c15 	stw	fp,48(sp)
   12cb4:	df000c04 	addi	fp,sp,48
   12cb8:	e13ffb15 	stw	r4,-20(fp)
   12cbc:	e17ffc15 	stw	r5,-16(fp)
   12cc0:	e1bffd15 	stw	r6,-12(fp)
   12cc4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12cc8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12ccc:	e0bffc17 	ldw	r2,-16(fp)
   12cd0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12cd4:	00003a06 	br	12dc0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
   12cdc:	10800c17 	ldw	r2,48(r2)
   12ce0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   12ce4:	e0bffb17 	ldw	r2,-20(fp)
   12ce8:	10800d17 	ldw	r2,52(r2)
   12cec:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   12cf0:	e0fffa17 	ldw	r3,-24(fp)
   12cf4:	e0bff917 	ldw	r2,-28(fp)
   12cf8:	1880062e 	bgeu	r3,r2,12d14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12cfc:	e0fff917 	ldw	r3,-28(fp)
   12d00:	e0bffa17 	ldw	r2,-24(fp)
   12d04:	1885c83a 	sub	r2,r3,r2
   12d08:	10bfffc4 	addi	r2,r2,-1
   12d0c:	e0bff815 	stw	r2,-32(fp)
   12d10:	00000c06 	br	12d44 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   12d14:	e0bff917 	ldw	r2,-28(fp)
   12d18:	1005003a 	cmpeq	r2,r2,zero
   12d1c:	1000051e 	bne	r2,zero,12d34 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12d20:	00820004 	movi	r2,2048
   12d24:	e0fffa17 	ldw	r3,-24(fp)
   12d28:	10c5c83a 	sub	r2,r2,r3
   12d2c:	e0bff815 	stw	r2,-32(fp)
   12d30:	00000406 	br	12d44 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12d34:	0081ffc4 	movi	r2,2047
   12d38:	e0fffa17 	ldw	r3,-24(fp)
   12d3c:	10c5c83a 	sub	r2,r2,r3
   12d40:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   12d44:	e0bff817 	ldw	r2,-32(fp)
   12d48:	1005003a 	cmpeq	r2,r2,zero
   12d4c:	10001f1e 	bne	r2,zero,12dcc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   12d50:	e0fffd17 	ldw	r3,-12(fp)
   12d54:	e0bff817 	ldw	r2,-32(fp)
   12d58:	1880022e 	bgeu	r3,r2,12d64 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   12d5c:	e0bffd17 	ldw	r2,-12(fp)
   12d60:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12d64:	e0bffb17 	ldw	r2,-20(fp)
   12d68:	10c20e04 	addi	r3,r2,2104
   12d6c:	e0bffa17 	ldw	r2,-24(fp)
   12d70:	1885883a 	add	r2,r3,r2
   12d74:	e0fffc17 	ldw	r3,-16(fp)
   12d78:	1009883a 	mov	r4,r2
   12d7c:	180b883a 	mov	r5,r3
   12d80:	e1bff817 	ldw	r6,-32(fp)
   12d84:	00035c00 	call	35c0 <memcpy>
      ptr   += n;
   12d88:	e0fff817 	ldw	r3,-32(fp)
   12d8c:	e0bffc17 	ldw	r2,-16(fp)
   12d90:	10c5883a 	add	r2,r2,r3
   12d94:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   12d98:	e0fffd17 	ldw	r3,-12(fp)
   12d9c:	e0bff817 	ldw	r2,-32(fp)
   12da0:	1885c83a 	sub	r2,r3,r2
   12da4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12da8:	e0fffa17 	ldw	r3,-24(fp)
   12dac:	e0bff817 	ldw	r2,-32(fp)
   12db0:	1885883a 	add	r2,r3,r2
   12db4:	10c1ffcc 	andi	r3,r2,2047
   12db8:	e0bffb17 	ldw	r2,-20(fp)
   12dbc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12dc0:	e0bffd17 	ldw	r2,-12(fp)
   12dc4:	10800048 	cmpgei	r2,r2,1
   12dc8:	103fc31e 	bne	r2,zero,12cd8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12dcc:	0005303a 	rdctl	r2,status
   12dd0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12dd4:	e0fff517 	ldw	r3,-44(fp)
   12dd8:	00bfff84 	movi	r2,-2
   12ddc:	1884703a 	and	r2,r3,r2
   12de0:	1001703a 	wrctl	status,r2
  
  return context;
   12de4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12de8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12dec:	e0bffb17 	ldw	r2,-20(fp)
   12df0:	10800817 	ldw	r2,32(r2)
   12df4:	10c00094 	ori	r3,r2,2
   12df8:	e0bffb17 	ldw	r2,-20(fp)
   12dfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12e00:	e0bffb17 	ldw	r2,-20(fp)
   12e04:	10800017 	ldw	r2,0(r2)
   12e08:	11000104 	addi	r4,r2,4
   12e0c:	e0bffb17 	ldw	r2,-20(fp)
   12e10:	10800817 	ldw	r2,32(r2)
   12e14:	1007883a 	mov	r3,r2
   12e18:	2005883a 	mov	r2,r4
   12e1c:	10c00035 	stwio	r3,0(r2)
   12e20:	e0bff717 	ldw	r2,-36(fp)
   12e24:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12e28:	e0bff417 	ldw	r2,-48(fp)
   12e2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12e30:	e0bffd17 	ldw	r2,-12(fp)
   12e34:	10800050 	cmplti	r2,r2,1
   12e38:	1000111e 	bne	r2,zero,12e80 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   12e3c:	e0bffe17 	ldw	r2,-8(fp)
   12e40:	1090000c 	andi	r2,r2,16384
   12e44:	1004c03a 	cmpne	r2,r2,zero
   12e48:	1000101e 	bne	r2,zero,12e8c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12e4c:	e0bffb17 	ldw	r2,-20(fp)
   12e50:	10c00d17 	ldw	r3,52(r2)
   12e54:	e0bff917 	ldw	r2,-28(fp)
   12e58:	1880051e 	bne	r3,r2,12e70 <altera_avalon_jtag_uart_write+0x1c8>
   12e5c:	e0bffb17 	ldw	r2,-20(fp)
   12e60:	10c00917 	ldw	r3,36(r2)
   12e64:	e0bffb17 	ldw	r2,-20(fp)
   12e68:	10800117 	ldw	r2,4(r2)
   12e6c:	18bff736 	bltu	r3,r2,12e4c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   12e70:	e0bffb17 	ldw	r2,-20(fp)
   12e74:	10c00d17 	ldw	r3,52(r2)
   12e78:	e0bff917 	ldw	r2,-28(fp)
   12e7c:	18800326 	beq	r3,r2,12e8c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   12e80:	e0bffd17 	ldw	r2,-12(fp)
   12e84:	10800048 	cmpgei	r2,r2,1
   12e88:	103fcd1e 	bne	r2,zero,12dc0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12e8c:	e0fffc17 	ldw	r3,-16(fp)
   12e90:	e0bff617 	ldw	r2,-40(fp)
   12e94:	18800526 	beq	r3,r2,12eac <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   12e98:	e0fffc17 	ldw	r3,-16(fp)
   12e9c:	e0bff617 	ldw	r2,-40(fp)
   12ea0:	1887c83a 	sub	r3,r3,r2
   12ea4:	e0ffff15 	stw	r3,-4(fp)
   12ea8:	00000906 	br	12ed0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   12eac:	e0bffe17 	ldw	r2,-8(fp)
   12eb0:	1090000c 	andi	r2,r2,16384
   12eb4:	1005003a 	cmpeq	r2,r2,zero
   12eb8:	1000031e 	bne	r2,zero,12ec8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   12ebc:	00bffd44 	movi	r2,-11
   12ec0:	e0bfff15 	stw	r2,-4(fp)
   12ec4:	00000206 	br	12ed0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12ec8:	00bffec4 	movi	r2,-5
   12ecc:	e0bfff15 	stw	r2,-4(fp)
   12ed0:	e0bfff17 	ldw	r2,-4(fp)
}
   12ed4:	e037883a 	mov	sp,fp
   12ed8:	dfc00117 	ldw	ra,4(sp)
   12edc:	df000017 	ldw	fp,0(sp)
   12ee0:	dec00204 	addi	sp,sp,8
   12ee4:	f800283a 	ret

00012ee8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12ee8:	defffa04 	addi	sp,sp,-24
   12eec:	dfc00515 	stw	ra,20(sp)
   12ef0:	df000415 	stw	fp,16(sp)
   12ef4:	df000404 	addi	fp,sp,16
   12ef8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12efc:	e0bfff17 	ldw	r2,-4(fp)
   12f00:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12f04:	e0bfff17 	ldw	r2,-4(fp)
   12f08:	10800104 	addi	r2,r2,4
   12f0c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f10:	0005303a 	rdctl	r2,status
   12f14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f18:	e0fffd17 	ldw	r3,-12(fp)
   12f1c:	00bfff84 	movi	r2,-2
   12f20:	1884703a 	and	r2,r3,r2
   12f24:	1001703a 	wrctl	status,r2
  
  return context;
   12f28:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12f2c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   12f30:	0013af00 	call	13af0 <alt_tick>
   12f34:	e0bffe17 	ldw	r2,-8(fp)
   12f38:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12f3c:	e0bffc17 	ldw	r2,-16(fp)
   12f40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   12f44:	e037883a 	mov	sp,fp
   12f48:	dfc00117 	ldw	ra,4(sp)
   12f4c:	df000017 	ldw	fp,0(sp)
   12f50:	dec00204 	addi	sp,sp,8
   12f54:	f800283a 	ret

00012f58 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   12f58:	defff804 	addi	sp,sp,-32
   12f5c:	dfc00715 	stw	ra,28(sp)
   12f60:	df000615 	stw	fp,24(sp)
   12f64:	df000604 	addi	fp,sp,24
   12f68:	e13ffc15 	stw	r4,-16(fp)
   12f6c:	e17ffd15 	stw	r5,-12(fp)
   12f70:	e1bffe15 	stw	r6,-8(fp)
   12f74:	e1ffff15 	stw	r7,-4(fp)
   12f78:	e0bfff17 	ldw	r2,-4(fp)
   12f7c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   12f80:	008000b4 	movhi	r2,2
   12f84:	10a15604 	addi	r2,r2,-31400
   12f88:	10800017 	ldw	r2,0(r2)
   12f8c:	1004c03a 	cmpne	r2,r2,zero
   12f90:	1000041e 	bne	r2,zero,12fa4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   12f94:	00c000b4 	movhi	r3,2
   12f98:	18e15604 	addi	r3,r3,-31400
   12f9c:	e0bffb17 	ldw	r2,-20(fp)
   12fa0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   12fa4:	e0bffc17 	ldw	r2,-16(fp)
   12fa8:	10800104 	addi	r2,r2,4
   12fac:	1007883a 	mov	r3,r2
   12fb0:	008001c4 	movi	r2,7
   12fb4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   12fb8:	d8000015 	stw	zero,0(sp)
   12fbc:	e13ffd17 	ldw	r4,-12(fp)
   12fc0:	e17ffe17 	ldw	r5,-8(fp)
   12fc4:	01800074 	movhi	r6,1
   12fc8:	318bba04 	addi	r6,r6,12008
   12fcc:	e1fffc17 	ldw	r7,-16(fp)
   12fd0:	001338c0 	call	1338c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   12fd4:	e037883a 	mov	sp,fp
   12fd8:	dfc00117 	ldw	ra,4(sp)
   12fdc:	df000017 	ldw	fp,0(sp)
   12fe0:	dec00204 	addi	sp,sp,8
   12fe4:	f800283a 	ret

00012fe8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   12fe8:	defff404 	addi	sp,sp,-48
   12fec:	df000b15 	stw	fp,44(sp)
   12ff0:	df000b04 	addi	fp,sp,44
   12ff4:	e13ffb15 	stw	r4,-20(fp)
   12ff8:	e17ffc15 	stw	r5,-16(fp)
   12ffc:	e1bffd15 	stw	r6,-12(fp)
   13000:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   13004:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13008:	008000b4 	movhi	r2,2
   1300c:	10a15604 	addi	r2,r2,-31400
   13010:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   13014:	1005003a 	cmpeq	r2,r2,zero
   13018:	1000411e 	bne	r2,zero,13120 <alt_alarm_start+0x138>
  {
    if (alarm)
   1301c:	e0bffb17 	ldw	r2,-20(fp)
   13020:	1005003a 	cmpeq	r2,r2,zero
   13024:	10003b1e 	bne	r2,zero,13114 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   13028:	e0fffb17 	ldw	r3,-20(fp)
   1302c:	e0bffd17 	ldw	r2,-12(fp)
   13030:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   13034:	e0fffb17 	ldw	r3,-20(fp)
   13038:	e0bffe17 	ldw	r2,-8(fp)
   1303c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13040:	0005303a 	rdctl	r2,status
   13044:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13048:	e0fff817 	ldw	r3,-32(fp)
   1304c:	00bfff84 	movi	r2,-2
   13050:	1884703a 	and	r2,r3,r2
   13054:	1001703a 	wrctl	status,r2
  
  return context;
   13058:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   1305c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13060:	008000b4 	movhi	r2,2
   13064:	10a15704 	addi	r2,r2,-31396
   13068:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   1306c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13070:	e0fffc17 	ldw	r3,-16(fp)
   13074:	e0bff917 	ldw	r2,-28(fp)
   13078:	1885883a 	add	r2,r3,r2
   1307c:	10c00044 	addi	r3,r2,1
   13080:	e0bffb17 	ldw	r2,-20(fp)
   13084:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   13088:	e0bffb17 	ldw	r2,-20(fp)
   1308c:	10c00217 	ldw	r3,8(r2)
   13090:	e0bff917 	ldw	r2,-28(fp)
   13094:	1880042e 	bgeu	r3,r2,130a8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   13098:	e0fffb17 	ldw	r3,-20(fp)
   1309c:	00800044 	movi	r2,1
   130a0:	18800405 	stb	r2,16(r3)
   130a4:	00000206 	br	130b0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   130a8:	e0bffb17 	ldw	r2,-20(fp)
   130ac:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   130b0:	e0fffb17 	ldw	r3,-20(fp)
   130b4:	00800074 	movhi	r2,1
   130b8:	109a8b04 	addi	r2,r2,27180
   130bc:	e0bff615 	stw	r2,-40(fp)
   130c0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   130c4:	e0fff717 	ldw	r3,-36(fp)
   130c8:	e0bff617 	ldw	r2,-40(fp)
   130cc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   130d0:	e0bff617 	ldw	r2,-40(fp)
   130d4:	10c00017 	ldw	r3,0(r2)
   130d8:	e0bff717 	ldw	r2,-36(fp)
   130dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   130e0:	e0bff617 	ldw	r2,-40(fp)
   130e4:	10c00017 	ldw	r3,0(r2)
   130e8:	e0bff717 	ldw	r2,-36(fp)
   130ec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   130f0:	e0fff617 	ldw	r3,-40(fp)
   130f4:	e0bff717 	ldw	r2,-36(fp)
   130f8:	18800015 	stw	r2,0(r3)
   130fc:	e0bffa17 	ldw	r2,-24(fp)
   13100:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13104:	e0bff517 	ldw	r2,-44(fp)
   13108:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   1310c:	e03fff15 	stw	zero,-4(fp)
   13110:	00000506 	br	13128 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   13114:	00bffa84 	movi	r2,-22
   13118:	e0bfff15 	stw	r2,-4(fp)
   1311c:	00000206 	br	13128 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   13120:	00bfde84 	movi	r2,-134
   13124:	e0bfff15 	stw	r2,-4(fp)
   13128:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   1312c:	e037883a 	mov	sp,fp
   13130:	df000017 	ldw	fp,0(sp)
   13134:	dec00104 	addi	sp,sp,4
   13138:	f800283a 	ret

0001313c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1313c:	defffe04 	addi	sp,sp,-8
   13140:	df000115 	stw	fp,4(sp)
   13144:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13148:	e03fff15 	stw	zero,-4(fp)
   1314c:	00000506 	br	13164 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   13150:	e0bfff17 	ldw	r2,-4(fp)
   13154:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   13158:	e0bfff17 	ldw	r2,-4(fp)
   1315c:	10800804 	addi	r2,r2,32
   13160:	e0bfff15 	stw	r2,-4(fp)
   13164:	e0bfff17 	ldw	r2,-4(fp)
   13168:	10820030 	cmpltui	r2,r2,2048
   1316c:	103ff81e 	bne	r2,zero,13150 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13170:	e037883a 	mov	sp,fp
   13174:	df000017 	ldw	fp,0(sp)
   13178:	dec00104 	addi	sp,sp,4
   1317c:	f800283a 	ret

00013180 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13180:	defff904 	addi	sp,sp,-28
   13184:	dfc00615 	stw	ra,24(sp)
   13188:	df000515 	stw	fp,20(sp)
   1318c:	df000504 	addi	fp,sp,20
   13190:	e13ffd15 	stw	r4,-12(fp)
   13194:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   13198:	e0bffd17 	ldw	r2,-12(fp)
   1319c:	1005003a 	cmpeq	r2,r2,zero
   131a0:	1000041e 	bne	r2,zero,131b4 <alt_dev_llist_insert+0x34>
   131a4:	e0bffd17 	ldw	r2,-12(fp)
   131a8:	10800217 	ldw	r2,8(r2)
   131ac:	1004c03a 	cmpne	r2,r2,zero
   131b0:	1000071e 	bne	r2,zero,131d0 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   131b4:	00132340 	call	13234 <alt_get_errno>
   131b8:	1007883a 	mov	r3,r2
   131bc:	00800584 	movi	r2,22
   131c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   131c4:	00bffa84 	movi	r2,-22
   131c8:	e0bfff15 	stw	r2,-4(fp)
   131cc:	00001306 	br	1321c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   131d0:	e0fffd17 	ldw	r3,-12(fp)
   131d4:	e0bffe17 	ldw	r2,-8(fp)
   131d8:	e0bffb15 	stw	r2,-20(fp)
   131dc:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   131e0:	e0fffc17 	ldw	r3,-16(fp)
   131e4:	e0bffb17 	ldw	r2,-20(fp)
   131e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   131ec:	e0bffb17 	ldw	r2,-20(fp)
   131f0:	10c00017 	ldw	r3,0(r2)
   131f4:	e0bffc17 	ldw	r2,-16(fp)
   131f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   131fc:	e0bffb17 	ldw	r2,-20(fp)
   13200:	10c00017 	ldw	r3,0(r2)
   13204:	e0bffc17 	ldw	r2,-16(fp)
   13208:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   1320c:	e0fffb17 	ldw	r3,-20(fp)
   13210:	e0bffc17 	ldw	r2,-16(fp)
   13214:	18800015 	stw	r2,0(r3)

  return 0;  
   13218:	e03fff15 	stw	zero,-4(fp)
   1321c:	e0bfff17 	ldw	r2,-4(fp)
}
   13220:	e037883a 	mov	sp,fp
   13224:	dfc00117 	ldw	ra,4(sp)
   13228:	df000017 	ldw	fp,0(sp)
   1322c:	dec00204 	addi	sp,sp,8
   13230:	f800283a 	ret

00013234 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13234:	defffd04 	addi	sp,sp,-12
   13238:	dfc00215 	stw	ra,8(sp)
   1323c:	df000115 	stw	fp,4(sp)
   13240:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13244:	00800074 	movhi	r2,1
   13248:	109a8804 	addi	r2,r2,27168
   1324c:	10800017 	ldw	r2,0(r2)
   13250:	1005003a 	cmpeq	r2,r2,zero
   13254:	1000061e 	bne	r2,zero,13270 <alt_get_errno+0x3c>
   13258:	00800074 	movhi	r2,1
   1325c:	109a8804 	addi	r2,r2,27168
   13260:	10800017 	ldw	r2,0(r2)
   13264:	103ee83a 	callr	r2
   13268:	e0bfff15 	stw	r2,-4(fp)
   1326c:	00000306 	br	1327c <alt_get_errno+0x48>
   13270:	008000b4 	movhi	r2,2
   13274:	10a14e04 	addi	r2,r2,-31432
   13278:	e0bfff15 	stw	r2,-4(fp)
   1327c:	e0bfff17 	ldw	r2,-4(fp)
}
   13280:	e037883a 	mov	sp,fp
   13284:	dfc00117 	ldw	ra,4(sp)
   13288:	df000017 	ldw	fp,0(sp)
   1328c:	dec00204 	addi	sp,sp,8
   13290:	f800283a 	ret

00013294 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13294:	defffd04 	addi	sp,sp,-12
   13298:	dfc00215 	stw	ra,8(sp)
   1329c:	df000115 	stw	fp,4(sp)
   132a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   132a4:	00bfff04 	movi	r2,-4
   132a8:	00c00074 	movhi	r3,1
   132ac:	18d0c904 	addi	r3,r3,17188
   132b0:	1885883a 	add	r2,r3,r2
   132b4:	e0bfff15 	stw	r2,-4(fp)
   132b8:	00000606 	br	132d4 <_do_ctors+0x40>
        (*ctor) (); 
   132bc:	e0bfff17 	ldw	r2,-4(fp)
   132c0:	10800017 	ldw	r2,0(r2)
   132c4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   132c8:	e0bfff17 	ldw	r2,-4(fp)
   132cc:	10bfff04 	addi	r2,r2,-4
   132d0:	e0bfff15 	stw	r2,-4(fp)
   132d4:	e0ffff17 	ldw	r3,-4(fp)
   132d8:	00800074 	movhi	r2,1
   132dc:	1090c804 	addi	r2,r2,17184
   132e0:	18bff62e 	bgeu	r3,r2,132bc <_do_ctors+0x28>
        (*ctor) (); 
}
   132e4:	e037883a 	mov	sp,fp
   132e8:	dfc00117 	ldw	ra,4(sp)
   132ec:	df000017 	ldw	fp,0(sp)
   132f0:	dec00204 	addi	sp,sp,8
   132f4:	f800283a 	ret

000132f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   132f8:	defffd04 	addi	sp,sp,-12
   132fc:	dfc00215 	stw	ra,8(sp)
   13300:	df000115 	stw	fp,4(sp)
   13304:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   13308:	00bfff04 	movi	r2,-4
   1330c:	00c00074 	movhi	r3,1
   13310:	18d0c904 	addi	r3,r3,17188
   13314:	1885883a 	add	r2,r3,r2
   13318:	e0bfff15 	stw	r2,-4(fp)
   1331c:	00000606 	br	13338 <_do_dtors+0x40>
        (*dtor) (); 
   13320:	e0bfff17 	ldw	r2,-4(fp)
   13324:	10800017 	ldw	r2,0(r2)
   13328:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   1332c:	e0bfff17 	ldw	r2,-4(fp)
   13330:	10bfff04 	addi	r2,r2,-4
   13334:	e0bfff15 	stw	r2,-4(fp)
   13338:	e0ffff17 	ldw	r3,-4(fp)
   1333c:	00800074 	movhi	r2,1
   13340:	1090c904 	addi	r2,r2,17188
   13344:	18bff62e 	bgeu	r3,r2,13320 <_do_dtors+0x28>
        (*dtor) (); 
}
   13348:	e037883a 	mov	sp,fp
   1334c:	dfc00117 	ldw	ra,4(sp)
   13350:	df000017 	ldw	fp,0(sp)
   13354:	dec00204 	addi	sp,sp,8
   13358:	f800283a 	ret

0001335c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   1335c:	defffe04 	addi	sp,sp,-8
   13360:	dfc00115 	stw	ra,4(sp)
   13364:	df000015 	stw	fp,0(sp)
   13368:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   1336c:	0009883a 	mov	r4,zero
   13370:	01440004 	movi	r5,4096
   13374:	0013e880 	call	13e88 <alt_icache_flush>
#endif
}
   13378:	e037883a 	mov	sp,fp
   1337c:	dfc00117 	ldw	ra,4(sp)
   13380:	df000017 	ldw	fp,0(sp)
   13384:	dec00204 	addi	sp,sp,8
   13388:	f800283a 	ret

0001338c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   1338c:	defff904 	addi	sp,sp,-28
   13390:	dfc00615 	stw	ra,24(sp)
   13394:	df000515 	stw	fp,20(sp)
   13398:	df000504 	addi	fp,sp,20
   1339c:	e13ffc15 	stw	r4,-16(fp)
   133a0:	e17ffd15 	stw	r5,-12(fp)
   133a4:	e1bffe15 	stw	r6,-8(fp)
   133a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   133ac:	e0800217 	ldw	r2,8(fp)
   133b0:	d8800015 	stw	r2,0(sp)
   133b4:	e13ffc17 	ldw	r4,-16(fp)
   133b8:	e17ffd17 	ldw	r5,-12(fp)
   133bc:	e1bffe17 	ldw	r6,-8(fp)
   133c0:	e1ffff17 	ldw	r7,-4(fp)
   133c4:	00135600 	call	13560 <alt_iic_isr_register>
}  
   133c8:	e037883a 	mov	sp,fp
   133cc:	dfc00117 	ldw	ra,4(sp)
   133d0:	df000017 	ldw	fp,0(sp)
   133d4:	dec00204 	addi	sp,sp,8
   133d8:	f800283a 	ret

000133dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   133dc:	defff904 	addi	sp,sp,-28
   133e0:	df000615 	stw	fp,24(sp)
   133e4:	df000604 	addi	fp,sp,24
   133e8:	e13ffe15 	stw	r4,-8(fp)
   133ec:	e17fff15 	stw	r5,-4(fp)
   133f0:	e0bfff17 	ldw	r2,-4(fp)
   133f4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133f8:	0005303a 	rdctl	r2,status
   133fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13400:	e0fffb17 	ldw	r3,-20(fp)
   13404:	00bfff84 	movi	r2,-2
   13408:	1884703a 	and	r2,r3,r2
   1340c:	1001703a 	wrctl	status,r2
  
  return context;
   13410:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13414:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   13418:	e0fffc17 	ldw	r3,-16(fp)
   1341c:	00800044 	movi	r2,1
   13420:	10c4983a 	sll	r2,r2,r3
   13424:	1007883a 	mov	r3,r2
   13428:	008000b4 	movhi	r2,2
   1342c:	10a15504 	addi	r2,r2,-31404
   13430:	10800017 	ldw	r2,0(r2)
   13434:	1886b03a 	or	r3,r3,r2
   13438:	008000b4 	movhi	r2,2
   1343c:	10a15504 	addi	r2,r2,-31404
   13440:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13444:	008000b4 	movhi	r2,2
   13448:	10a15504 	addi	r2,r2,-31404
   1344c:	10800017 	ldw	r2,0(r2)
   13450:	100170fa 	wrctl	ienable,r2
   13454:	e0bffd17 	ldw	r2,-12(fp)
   13458:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1345c:	e0bffa17 	ldw	r2,-24(fp)
   13460:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13464:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   13468:	e037883a 	mov	sp,fp
   1346c:	df000017 	ldw	fp,0(sp)
   13470:	dec00104 	addi	sp,sp,4
   13474:	f800283a 	ret

00013478 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   13478:	defff904 	addi	sp,sp,-28
   1347c:	df000615 	stw	fp,24(sp)
   13480:	df000604 	addi	fp,sp,24
   13484:	e13ffe15 	stw	r4,-8(fp)
   13488:	e17fff15 	stw	r5,-4(fp)
   1348c:	e0bfff17 	ldw	r2,-4(fp)
   13490:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13494:	0005303a 	rdctl	r2,status
   13498:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1349c:	e0fffb17 	ldw	r3,-20(fp)
   134a0:	00bfff84 	movi	r2,-2
   134a4:	1884703a 	and	r2,r3,r2
   134a8:	1001703a 	wrctl	status,r2
  
  return context;
   134ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   134b0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   134b4:	e0fffc17 	ldw	r3,-16(fp)
   134b8:	00800044 	movi	r2,1
   134bc:	10c4983a 	sll	r2,r2,r3
   134c0:	0084303a 	nor	r2,zero,r2
   134c4:	1007883a 	mov	r3,r2
   134c8:	008000b4 	movhi	r2,2
   134cc:	10a15504 	addi	r2,r2,-31404
   134d0:	10800017 	ldw	r2,0(r2)
   134d4:	1886703a 	and	r3,r3,r2
   134d8:	008000b4 	movhi	r2,2
   134dc:	10a15504 	addi	r2,r2,-31404
   134e0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   134e4:	008000b4 	movhi	r2,2
   134e8:	10a15504 	addi	r2,r2,-31404
   134ec:	10800017 	ldw	r2,0(r2)
   134f0:	100170fa 	wrctl	ienable,r2
   134f4:	e0bffd17 	ldw	r2,-12(fp)
   134f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134fc:	e0bffa17 	ldw	r2,-24(fp)
   13500:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13504:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   13508:	e037883a 	mov	sp,fp
   1350c:	df000017 	ldw	fp,0(sp)
   13510:	dec00104 	addi	sp,sp,4
   13514:	f800283a 	ret

00013518 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   13518:	defffc04 	addi	sp,sp,-16
   1351c:	df000315 	stw	fp,12(sp)
   13520:	df000304 	addi	fp,sp,12
   13524:	e13ffe15 	stw	r4,-8(fp)
   13528:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   1352c:	000530fa 	rdctl	r2,ienable
   13530:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   13534:	e0ffff17 	ldw	r3,-4(fp)
   13538:	00800044 	movi	r2,1
   1353c:	10c4983a 	sll	r2,r2,r3
   13540:	1007883a 	mov	r3,r2
   13544:	e0bffd17 	ldw	r2,-12(fp)
   13548:	1884703a 	and	r2,r3,r2
   1354c:	1004c03a 	cmpne	r2,r2,zero
}
   13550:	e037883a 	mov	sp,fp
   13554:	df000017 	ldw	fp,0(sp)
   13558:	dec00104 	addi	sp,sp,4
   1355c:	f800283a 	ret

00013560 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13560:	defff404 	addi	sp,sp,-48
   13564:	dfc00b15 	stw	ra,44(sp)
   13568:	df000a15 	stw	fp,40(sp)
   1356c:	df000a04 	addi	fp,sp,40
   13570:	e13ffb15 	stw	r4,-20(fp)
   13574:	e17ffc15 	stw	r5,-16(fp)
   13578:	e1bffd15 	stw	r6,-12(fp)
   1357c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   13580:	00bffa84 	movi	r2,-22
   13584:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   13588:	e0bffc17 	ldw	r2,-16(fp)
   1358c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13590:	e0bff917 	ldw	r2,-28(fp)
   13594:	10800808 	cmpgei	r2,r2,32
   13598:	1000291e 	bne	r2,zero,13640 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1359c:	0005303a 	rdctl	r2,status
   135a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   135a4:	e0fff717 	ldw	r3,-36(fp)
   135a8:	00bfff84 	movi	r2,-2
   135ac:	1884703a 	and	r2,r3,r2
   135b0:	1001703a 	wrctl	status,r2
  
  return context;
   135b4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   135b8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   135bc:	e0bff917 	ldw	r2,-28(fp)
   135c0:	00c000b4 	movhi	r3,2
   135c4:	18e1d304 	addi	r3,r3,-30900
   135c8:	100490fa 	slli	r2,r2,3
   135cc:	10c7883a 	add	r3,r2,r3
   135d0:	e0bffd17 	ldw	r2,-12(fp)
   135d4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   135d8:	e0bff917 	ldw	r2,-28(fp)
   135dc:	00c000b4 	movhi	r3,2
   135e0:	18e1d304 	addi	r3,r3,-30900
   135e4:	100490fa 	slli	r2,r2,3
   135e8:	10c5883a 	add	r2,r2,r3
   135ec:	10c00104 	addi	r3,r2,4
   135f0:	e0bffe17 	ldw	r2,-8(fp)
   135f4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   135f8:	e0bffd17 	ldw	r2,-12(fp)
   135fc:	1005003a 	cmpeq	r2,r2,zero
   13600:	1000051e 	bne	r2,zero,13618 <alt_iic_isr_register+0xb8>
   13604:	e17ff917 	ldw	r5,-28(fp)
   13608:	e13ffb17 	ldw	r4,-20(fp)
   1360c:	00133dc0 	call	133dc <alt_ic_irq_enable>
   13610:	e0bfff15 	stw	r2,-4(fp)
   13614:	00000406 	br	13628 <alt_iic_isr_register+0xc8>
   13618:	e17ff917 	ldw	r5,-28(fp)
   1361c:	e13ffb17 	ldw	r4,-20(fp)
   13620:	00134780 	call	13478 <alt_ic_irq_disable>
   13624:	e0bfff15 	stw	r2,-4(fp)
   13628:	e0bfff17 	ldw	r2,-4(fp)
   1362c:	e0bffa15 	stw	r2,-24(fp)
   13630:	e0bff817 	ldw	r2,-32(fp)
   13634:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13638:	e0bff617 	ldw	r2,-40(fp)
   1363c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13640:	e0bffa17 	ldw	r2,-24(fp)
}
   13644:	e037883a 	mov	sp,fp
   13648:	dfc00117 	ldw	ra,4(sp)
   1364c:	df000017 	ldw	fp,0(sp)
   13650:	dec00204 	addi	sp,sp,8
   13654:	f800283a 	ret

00013658 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   13658:	defff904 	addi	sp,sp,-28
   1365c:	dfc00615 	stw	ra,24(sp)
   13660:	df000515 	stw	fp,20(sp)
   13664:	df000504 	addi	fp,sp,20
   13668:	e13ffc15 	stw	r4,-16(fp)
   1366c:	e17ffd15 	stw	r5,-12(fp)
   13670:	e1bffe15 	stw	r6,-8(fp)
   13674:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13678:	e13ffd17 	ldw	r4,-12(fp)
   1367c:	e17ffe17 	ldw	r5,-8(fp)
   13680:	e1bfff17 	ldw	r6,-4(fp)
   13684:	00138700 	call	13870 <open>
   13688:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   1368c:	e0bffb17 	ldw	r2,-20(fp)
   13690:	1004803a 	cmplt	r2,r2,zero
   13694:	10001c1e 	bne	r2,zero,13708 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   13698:	e0bffb17 	ldw	r2,-20(fp)
   1369c:	00c00074 	movhi	r3,1
   136a0:	18d60404 	addi	r3,r3,22544
   136a4:	10800324 	muli	r2,r2,12
   136a8:	10c5883a 	add	r2,r2,r3
   136ac:	10c00017 	ldw	r3,0(r2)
   136b0:	e0bffc17 	ldw	r2,-16(fp)
   136b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   136b8:	e0bffb17 	ldw	r2,-20(fp)
   136bc:	00c00074 	movhi	r3,1
   136c0:	18d60404 	addi	r3,r3,22544
   136c4:	10800324 	muli	r2,r2,12
   136c8:	10c5883a 	add	r2,r2,r3
   136cc:	10800104 	addi	r2,r2,4
   136d0:	10c00017 	ldw	r3,0(r2)
   136d4:	e0bffc17 	ldw	r2,-16(fp)
   136d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   136dc:	e0bffb17 	ldw	r2,-20(fp)
   136e0:	00c00074 	movhi	r3,1
   136e4:	18d60404 	addi	r3,r3,22544
   136e8:	10800324 	muli	r2,r2,12
   136ec:	10c5883a 	add	r2,r2,r3
   136f0:	10800204 	addi	r2,r2,8
   136f4:	10c00017 	ldw	r3,0(r2)
   136f8:	e0bffc17 	ldw	r2,-16(fp)
   136fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13700:	e13ffb17 	ldw	r4,-20(fp)
   13704:	00120d80 	call	120d8 <alt_release_fd>
  }
} 
   13708:	e037883a 	mov	sp,fp
   1370c:	dfc00117 	ldw	ra,4(sp)
   13710:	df000017 	ldw	fp,0(sp)
   13714:	dec00204 	addi	sp,sp,8
   13718:	f800283a 	ret

0001371c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   1371c:	defffb04 	addi	sp,sp,-20
   13720:	dfc00415 	stw	ra,16(sp)
   13724:	df000315 	stw	fp,12(sp)
   13728:	df000304 	addi	fp,sp,12
   1372c:	e13ffd15 	stw	r4,-12(fp)
   13730:	e17ffe15 	stw	r5,-8(fp)
   13734:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13738:	01000074 	movhi	r4,1
   1373c:	21160704 	addi	r4,r4,22556
   13740:	e17ffd17 	ldw	r5,-12(fp)
   13744:	01800044 	movi	r6,1
   13748:	01c07fc4 	movi	r7,511
   1374c:	00136580 	call	13658 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13750:	01000074 	movhi	r4,1
   13754:	21160404 	addi	r4,r4,22544
   13758:	e17ffe17 	ldw	r5,-8(fp)
   1375c:	000d883a 	mov	r6,zero
   13760:	01c07fc4 	movi	r7,511
   13764:	00136580 	call	13658 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13768:	01000074 	movhi	r4,1
   1376c:	21160a04 	addi	r4,r4,22568
   13770:	e17fff17 	ldw	r5,-4(fp)
   13774:	01800044 	movi	r6,1
   13778:	01c07fc4 	movi	r7,511
   1377c:	00136580 	call	13658 <alt_open_fd>
}  
   13780:	e037883a 	mov	sp,fp
   13784:	dfc00117 	ldw	ra,4(sp)
   13788:	df000017 	ldw	fp,0(sp)
   1378c:	dec00204 	addi	sp,sp,8
   13790:	f800283a 	ret

00013794 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13794:	defffc04 	addi	sp,sp,-16
   13798:	df000315 	stw	fp,12(sp)
   1379c:	df000304 	addi	fp,sp,12
   137a0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   137a4:	e0bffe17 	ldw	r2,-8(fp)
   137a8:	10800217 	ldw	r2,8(r2)
   137ac:	10d00034 	orhi	r3,r2,16384
   137b0:	e0bffe17 	ldw	r2,-8(fp)
   137b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   137b8:	e03ffd15 	stw	zero,-12(fp)
   137bc:	00002006 	br	13840 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   137c0:	e0bffd17 	ldw	r2,-12(fp)
   137c4:	00c00074 	movhi	r3,1
   137c8:	18d60404 	addi	r3,r3,22544
   137cc:	10800324 	muli	r2,r2,12
   137d0:	10c5883a 	add	r2,r2,r3
   137d4:	10c00017 	ldw	r3,0(r2)
   137d8:	e0bffe17 	ldw	r2,-8(fp)
   137dc:	10800017 	ldw	r2,0(r2)
   137e0:	1880141e 	bne	r3,r2,13834 <alt_file_locked+0xa0>
   137e4:	e0bffd17 	ldw	r2,-12(fp)
   137e8:	00c00074 	movhi	r3,1
   137ec:	18d60404 	addi	r3,r3,22544
   137f0:	10800324 	muli	r2,r2,12
   137f4:	10c5883a 	add	r2,r2,r3
   137f8:	10800204 	addi	r2,r2,8
   137fc:	10800017 	ldw	r2,0(r2)
   13800:	1004403a 	cmpge	r2,r2,zero
   13804:	10000b1e 	bne	r2,zero,13834 <alt_file_locked+0xa0>
   13808:	e0bffd17 	ldw	r2,-12(fp)
   1380c:	10800324 	muli	r2,r2,12
   13810:	1007883a 	mov	r3,r2
   13814:	00800074 	movhi	r2,1
   13818:	10960404 	addi	r2,r2,22544
   1381c:	1887883a 	add	r3,r3,r2
   13820:	e0bffe17 	ldw	r2,-8(fp)
   13824:	18800326 	beq	r3,r2,13834 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13828:	00bffcc4 	movi	r2,-13
   1382c:	e0bfff15 	stw	r2,-4(fp)
   13830:	00000a06 	br	1385c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13834:	e0bffd17 	ldw	r2,-12(fp)
   13838:	10800044 	addi	r2,r2,1
   1383c:	e0bffd15 	stw	r2,-12(fp)
   13840:	00800074 	movhi	r2,1
   13844:	109a8704 	addi	r2,r2,27164
   13848:	10800017 	ldw	r2,0(r2)
   1384c:	1007883a 	mov	r3,r2
   13850:	e0bffd17 	ldw	r2,-12(fp)
   13854:	18bfda2e 	bgeu	r3,r2,137c0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13858:	e03fff15 	stw	zero,-4(fp)
   1385c:	e0bfff17 	ldw	r2,-4(fp)
}
   13860:	e037883a 	mov	sp,fp
   13864:	df000017 	ldw	fp,0(sp)
   13868:	dec00104 	addi	sp,sp,4
   1386c:	f800283a 	ret

00013870 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13870:	defff404 	addi	sp,sp,-48
   13874:	dfc00b15 	stw	ra,44(sp)
   13878:	df000a15 	stw	fp,40(sp)
   1387c:	df000a04 	addi	fp,sp,40
   13880:	e13ffb15 	stw	r4,-20(fp)
   13884:	e17ffc15 	stw	r5,-16(fp)
   13888:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   1388c:	00bfffc4 	movi	r2,-1
   13890:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   13894:	00bffb44 	movi	r2,-19
   13898:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   1389c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   138a0:	e13ffb17 	ldw	r4,-20(fp)
   138a4:	01400074 	movhi	r5,1
   138a8:	295a8504 	addi	r5,r5,27156
   138ac:	0013c1c0 	call	13c1c <alt_find_dev>
   138b0:	e0bffa15 	stw	r2,-24(fp)
   138b4:	e0bffa17 	ldw	r2,-24(fp)
   138b8:	1004c03a 	cmpne	r2,r2,zero
   138bc:	1000051e 	bne	r2,zero,138d4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   138c0:	e13ffb17 	ldw	r4,-20(fp)
   138c4:	0013cb00 	call	13cb0 <alt_find_file>
   138c8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   138cc:	00800044 	movi	r2,1
   138d0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   138d4:	e0bffa17 	ldw	r2,-24(fp)
   138d8:	1005003a 	cmpeq	r2,r2,zero
   138dc:	1000301e 	bne	r2,zero,139a0 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   138e0:	e13ffa17 	ldw	r4,-24(fp)
   138e4:	0013dd00 	call	13dd0 <alt_get_fd>
   138e8:	e0bff815 	stw	r2,-32(fp)
   138ec:	e0bff817 	ldw	r2,-32(fp)
   138f0:	1004403a 	cmpge	r2,r2,zero
   138f4:	1000031e 	bne	r2,zero,13904 <open+0x94>
    {
      status = index;
   138f8:	e0bff817 	ldw	r2,-32(fp)
   138fc:	e0bff715 	stw	r2,-36(fp)
   13900:	00002906 	br	139a8 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   13904:	e0bff817 	ldw	r2,-32(fp)
   13908:	10800324 	muli	r2,r2,12
   1390c:	1007883a 	mov	r3,r2
   13910:	00800074 	movhi	r2,1
   13914:	10960404 	addi	r2,r2,22544
   13918:	1885883a 	add	r2,r3,r2
   1391c:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13920:	e0fffc17 	ldw	r3,-16(fp)
   13924:	00900034 	movhi	r2,16384
   13928:	10bfffc4 	addi	r2,r2,-1
   1392c:	1886703a 	and	r3,r3,r2
   13930:	e0bff917 	ldw	r2,-28(fp)
   13934:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13938:	e0bff617 	ldw	r2,-40(fp)
   1393c:	1004c03a 	cmpne	r2,r2,zero
   13940:	1000061e 	bne	r2,zero,1395c <open+0xec>
   13944:	e13ff917 	ldw	r4,-28(fp)
   13948:	00137940 	call	13794 <alt_file_locked>
   1394c:	e0bff715 	stw	r2,-36(fp)
   13950:	e0bff717 	ldw	r2,-36(fp)
   13954:	1004803a 	cmplt	r2,r2,zero
   13958:	1000131e 	bne	r2,zero,139a8 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   1395c:	e0bffa17 	ldw	r2,-24(fp)
   13960:	10800317 	ldw	r2,12(r2)
   13964:	1005003a 	cmpeq	r2,r2,zero
   13968:	1000091e 	bne	r2,zero,13990 <open+0x120>
   1396c:	e0bffa17 	ldw	r2,-24(fp)
   13970:	10800317 	ldw	r2,12(r2)
   13974:	e13ff917 	ldw	r4,-28(fp)
   13978:	e17ffb17 	ldw	r5,-20(fp)
   1397c:	e1bffc17 	ldw	r6,-16(fp)
   13980:	e1fffd17 	ldw	r7,-12(fp)
   13984:	103ee83a 	callr	r2
   13988:	e0bfff15 	stw	r2,-4(fp)
   1398c:	00000106 	br	13994 <open+0x124>
   13990:	e03fff15 	stw	zero,-4(fp)
   13994:	e0bfff17 	ldw	r2,-4(fp)
   13998:	e0bff715 	stw	r2,-36(fp)
   1399c:	00000206 	br	139a8 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   139a0:	00bffb44 	movi	r2,-19
   139a4:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   139a8:	e0bff717 	ldw	r2,-36(fp)
   139ac:	1004403a 	cmpge	r2,r2,zero
   139b0:	1000091e 	bne	r2,zero,139d8 <open+0x168>
  {
    alt_release_fd (index);  
   139b4:	e13ff817 	ldw	r4,-32(fp)
   139b8:	00120d80 	call	120d8 <alt_release_fd>
    ALT_ERRNO = -status;
   139bc:	00139f80 	call	139f8 <alt_get_errno>
   139c0:	e0fff717 	ldw	r3,-36(fp)
   139c4:	00c7c83a 	sub	r3,zero,r3
   139c8:	10c00015 	stw	r3,0(r2)
    return -1;
   139cc:	00bfffc4 	movi	r2,-1
   139d0:	e0bffe15 	stw	r2,-8(fp)
   139d4:	00000206 	br	139e0 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   139d8:	e0bff817 	ldw	r2,-32(fp)
   139dc:	e0bffe15 	stw	r2,-8(fp)
   139e0:	e0bffe17 	ldw	r2,-8(fp)
}
   139e4:	e037883a 	mov	sp,fp
   139e8:	dfc00117 	ldw	ra,4(sp)
   139ec:	df000017 	ldw	fp,0(sp)
   139f0:	dec00204 	addi	sp,sp,8
   139f4:	f800283a 	ret

000139f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   139f8:	defffd04 	addi	sp,sp,-12
   139fc:	dfc00215 	stw	ra,8(sp)
   13a00:	df000115 	stw	fp,4(sp)
   13a04:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13a08:	00800074 	movhi	r2,1
   13a0c:	109a8804 	addi	r2,r2,27168
   13a10:	10800017 	ldw	r2,0(r2)
   13a14:	1005003a 	cmpeq	r2,r2,zero
   13a18:	1000061e 	bne	r2,zero,13a34 <alt_get_errno+0x3c>
   13a1c:	00800074 	movhi	r2,1
   13a20:	109a8804 	addi	r2,r2,27168
   13a24:	10800017 	ldw	r2,0(r2)
   13a28:	103ee83a 	callr	r2
   13a2c:	e0bfff15 	stw	r2,-4(fp)
   13a30:	00000306 	br	13a40 <alt_get_errno+0x48>
   13a34:	008000b4 	movhi	r2,2
   13a38:	10a14e04 	addi	r2,r2,-31432
   13a3c:	e0bfff15 	stw	r2,-4(fp)
   13a40:	e0bfff17 	ldw	r2,-4(fp)
}
   13a44:	e037883a 	mov	sp,fp
   13a48:	dfc00117 	ldw	ra,4(sp)
   13a4c:	df000017 	ldw	fp,0(sp)
   13a50:	dec00204 	addi	sp,sp,8
   13a54:	f800283a 	ret

00013a58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13a58:	defffa04 	addi	sp,sp,-24
   13a5c:	df000515 	stw	fp,20(sp)
   13a60:	df000504 	addi	fp,sp,20
   13a64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13a68:	0005303a 	rdctl	r2,status
   13a6c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13a70:	e0fffd17 	ldw	r3,-12(fp)
   13a74:	00bfff84 	movi	r2,-2
   13a78:	1884703a 	and	r2,r3,r2
   13a7c:	1001703a 	wrctl	status,r2
  
  return context;
   13a80:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13a84:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   13a88:	e0bfff17 	ldw	r2,-4(fp)
   13a8c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13a90:	e0bffc17 	ldw	r2,-16(fp)
   13a94:	10c00017 	ldw	r3,0(r2)
   13a98:	e0bffc17 	ldw	r2,-16(fp)
   13a9c:	10800117 	ldw	r2,4(r2)
   13aa0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   13aa4:	e0bffc17 	ldw	r2,-16(fp)
   13aa8:	10c00117 	ldw	r3,4(r2)
   13aac:	e0bffc17 	ldw	r2,-16(fp)
   13ab0:	10800017 	ldw	r2,0(r2)
   13ab4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13ab8:	e0fffc17 	ldw	r3,-16(fp)
   13abc:	e0bffc17 	ldw	r2,-16(fp)
   13ac0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   13ac4:	e0fffc17 	ldw	r3,-16(fp)
   13ac8:	e0bffc17 	ldw	r2,-16(fp)
   13acc:	18800015 	stw	r2,0(r3)
   13ad0:	e0bffe17 	ldw	r2,-8(fp)
   13ad4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13ad8:	e0bffb17 	ldw	r2,-20(fp)
   13adc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13ae0:	e037883a 	mov	sp,fp
   13ae4:	df000017 	ldw	fp,0(sp)
   13ae8:	dec00104 	addi	sp,sp,4
   13aec:	f800283a 	ret

00013af0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13af0:	defffb04 	addi	sp,sp,-20
   13af4:	dfc00415 	stw	ra,16(sp)
   13af8:	df000315 	stw	fp,12(sp)
   13afc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13b00:	d0a00f17 	ldw	r2,-32708(gp)
   13b04:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13b08:	d0a6db17 	ldw	r2,-25748(gp)
   13b0c:	10800044 	addi	r2,r2,1
   13b10:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13b14:	00003106 	br	13bdc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   13b18:	e0bffe17 	ldw	r2,-8(fp)
   13b1c:	10800017 	ldw	r2,0(r2)
   13b20:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13b24:	e0bffe17 	ldw	r2,-8(fp)
   13b28:	10800403 	ldbu	r2,16(r2)
   13b2c:	10803fcc 	andi	r2,r2,255
   13b30:	1005003a 	cmpeq	r2,r2,zero
   13b34:	1000051e 	bne	r2,zero,13b4c <alt_tick+0x5c>
   13b38:	d0a6db17 	ldw	r2,-25748(gp)
   13b3c:	1004c03a 	cmpne	r2,r2,zero
   13b40:	1000021e 	bne	r2,zero,13b4c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   13b44:	e0bffe17 	ldw	r2,-8(fp)
   13b48:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13b4c:	e0bffe17 	ldw	r2,-8(fp)
   13b50:	10c00217 	ldw	r3,8(r2)
   13b54:	d0a6db17 	ldw	r2,-25748(gp)
   13b58:	10c01e36 	bltu	r2,r3,13bd4 <alt_tick+0xe4>
   13b5c:	e0bffe17 	ldw	r2,-8(fp)
   13b60:	10800403 	ldbu	r2,16(r2)
   13b64:	10803fcc 	andi	r2,r2,255
   13b68:	1004c03a 	cmpne	r2,r2,zero
   13b6c:	1000191e 	bne	r2,zero,13bd4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   13b70:	e0bffe17 	ldw	r2,-8(fp)
   13b74:	10c00317 	ldw	r3,12(r2)
   13b78:	e0bffe17 	ldw	r2,-8(fp)
   13b7c:	11000517 	ldw	r4,20(r2)
   13b80:	183ee83a 	callr	r3
   13b84:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	1004c03a 	cmpne	r2,r2,zero
   13b90:	1000031e 	bne	r2,zero,13ba0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   13b94:	e13ffe17 	ldw	r4,-8(fp)
   13b98:	0013a580 	call	13a58 <alt_alarm_stop>
   13b9c:	00000d06 	br	13bd4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   13ba0:	e0bffe17 	ldw	r2,-8(fp)
   13ba4:	10c00217 	ldw	r3,8(r2)
   13ba8:	e0bffd17 	ldw	r2,-12(fp)
   13bac:	1887883a 	add	r3,r3,r2
   13bb0:	e0bffe17 	ldw	r2,-8(fp)
   13bb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13bb8:	e0bffe17 	ldw	r2,-8(fp)
   13bbc:	10c00217 	ldw	r3,8(r2)
   13bc0:	d0a6db17 	ldw	r2,-25748(gp)
   13bc4:	1880032e 	bgeu	r3,r2,13bd4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   13bc8:	e0fffe17 	ldw	r3,-8(fp)
   13bcc:	00800044 	movi	r2,1
   13bd0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   13bd4:	e0bfff17 	ldw	r2,-4(fp)
   13bd8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13bdc:	d0e00f04 	addi	r3,gp,-32708
   13be0:	e0bffe17 	ldw	r2,-8(fp)
   13be4:	10ffcc1e 	bne	r2,r3,13b18 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   13be8:	e037883a 	mov	sp,fp
   13bec:	dfc00117 	ldw	ra,4(sp)
   13bf0:	df000017 	ldw	fp,0(sp)
   13bf4:	dec00204 	addi	sp,sp,8
   13bf8:	f800283a 	ret

00013bfc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13bfc:	deffff04 	addi	sp,sp,-4
   13c00:	df000015 	stw	fp,0(sp)
   13c04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13c08:	000170fa 	wrctl	ienable,zero
}
   13c0c:	e037883a 	mov	sp,fp
   13c10:	df000017 	ldw	fp,0(sp)
   13c14:	dec00104 	addi	sp,sp,4
   13c18:	f800283a 	ret

00013c1c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13c1c:	defff904 	addi	sp,sp,-28
   13c20:	dfc00615 	stw	ra,24(sp)
   13c24:	df000515 	stw	fp,20(sp)
   13c28:	df000504 	addi	fp,sp,20
   13c2c:	e13ffd15 	stw	r4,-12(fp)
   13c30:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13c34:	e0bffe17 	ldw	r2,-8(fp)
   13c38:	10800017 	ldw	r2,0(r2)
   13c3c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13c40:	e13ffd17 	ldw	r4,-12(fp)
   13c44:	0003fa40 	call	3fa4 <strlen>
   13c48:	10800044 	addi	r2,r2,1
   13c4c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13c50:	00000d06 	br	13c88 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13c54:	e0bffc17 	ldw	r2,-16(fp)
   13c58:	11000217 	ldw	r4,8(r2)
   13c5c:	e1bffb17 	ldw	r6,-20(fp)
   13c60:	e17ffd17 	ldw	r5,-12(fp)
   13c64:	0013f640 	call	13f64 <memcmp>
   13c68:	1004c03a 	cmpne	r2,r2,zero
   13c6c:	1000031e 	bne	r2,zero,13c7c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13c70:	e0bffc17 	ldw	r2,-16(fp)
   13c74:	e0bfff15 	stw	r2,-4(fp)
   13c78:	00000706 	br	13c98 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13c7c:	e0bffc17 	ldw	r2,-16(fp)
   13c80:	10800017 	ldw	r2,0(r2)
   13c84:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13c88:	e0fffe17 	ldw	r3,-8(fp)
   13c8c:	e0bffc17 	ldw	r2,-16(fp)
   13c90:	10fff01e 	bne	r2,r3,13c54 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13c94:	e03fff15 	stw	zero,-4(fp)
   13c98:	e0bfff17 	ldw	r2,-4(fp)
}
   13c9c:	e037883a 	mov	sp,fp
   13ca0:	dfc00117 	ldw	ra,4(sp)
   13ca4:	df000017 	ldw	fp,0(sp)
   13ca8:	dec00204 	addi	sp,sp,8
   13cac:	f800283a 	ret

00013cb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13cb0:	defffa04 	addi	sp,sp,-24
   13cb4:	dfc00515 	stw	ra,20(sp)
   13cb8:	df000415 	stw	fp,16(sp)
   13cbc:	df000404 	addi	fp,sp,16
   13cc0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13cc4:	00800074 	movhi	r2,1
   13cc8:	109a8304 	addi	r2,r2,27148
   13ccc:	10800017 	ldw	r2,0(r2)
   13cd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13cd4:	00003306 	br	13da4 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   13cd8:	e0bffd17 	ldw	r2,-12(fp)
   13cdc:	11000217 	ldw	r4,8(r2)
   13ce0:	0003fa40 	call	3fa4 <strlen>
   13ce4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   13ce8:	e0bffd17 	ldw	r2,-12(fp)
   13cec:	10c00217 	ldw	r3,8(r2)
   13cf0:	e0bffc17 	ldw	r2,-16(fp)
   13cf4:	1885883a 	add	r2,r3,r2
   13cf8:	10bfffc4 	addi	r2,r2,-1
   13cfc:	10800003 	ldbu	r2,0(r2)
   13d00:	10803fcc 	andi	r2,r2,255
   13d04:	1080201c 	xori	r2,r2,128
   13d08:	10bfe004 	addi	r2,r2,-128
   13d0c:	10800bd8 	cmpnei	r2,r2,47
   13d10:	1000031e 	bne	r2,zero,13d20 <alt_find_file+0x70>
    {
      len -= 1;
   13d14:	e0bffc17 	ldw	r2,-16(fp)
   13d18:	10bfffc4 	addi	r2,r2,-1
   13d1c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13d20:	e0bffc17 	ldw	r2,-16(fp)
   13d24:	1007883a 	mov	r3,r2
   13d28:	e0bffe17 	ldw	r2,-8(fp)
   13d2c:	1885883a 	add	r2,r3,r2
   13d30:	10800003 	ldbu	r2,0(r2)
   13d34:	10803fcc 	andi	r2,r2,255
   13d38:	1080201c 	xori	r2,r2,128
   13d3c:	10bfe004 	addi	r2,r2,-128
   13d40:	10800be0 	cmpeqi	r2,r2,47
   13d44:	10000a1e 	bne	r2,zero,13d70 <alt_find_file+0xc0>
   13d48:	e0bffc17 	ldw	r2,-16(fp)
   13d4c:	1007883a 	mov	r3,r2
   13d50:	e0bffe17 	ldw	r2,-8(fp)
   13d54:	1885883a 	add	r2,r3,r2
   13d58:	10800003 	ldbu	r2,0(r2)
   13d5c:	10803fcc 	andi	r2,r2,255
   13d60:	1080201c 	xori	r2,r2,128
   13d64:	10bfe004 	addi	r2,r2,-128
   13d68:	1004c03a 	cmpne	r2,r2,zero
   13d6c:	10000a1e 	bne	r2,zero,13d98 <alt_find_file+0xe8>
   13d70:	e0bffd17 	ldw	r2,-12(fp)
   13d74:	11000217 	ldw	r4,8(r2)
   13d78:	e1bffc17 	ldw	r6,-16(fp)
   13d7c:	e17ffe17 	ldw	r5,-8(fp)
   13d80:	0013f640 	call	13f64 <memcmp>
   13d84:	1004c03a 	cmpne	r2,r2,zero
   13d88:	1000031e 	bne	r2,zero,13d98 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13d8c:	e0bffd17 	ldw	r2,-12(fp)
   13d90:	e0bfff15 	stw	r2,-4(fp)
   13d94:	00000806 	br	13db8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   13d98:	e0bffd17 	ldw	r2,-12(fp)
   13d9c:	10800017 	ldw	r2,0(r2)
   13da0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13da4:	00c00074 	movhi	r3,1
   13da8:	18da8304 	addi	r3,r3,27148
   13dac:	e0bffd17 	ldw	r2,-12(fp)
   13db0:	10ffc91e 	bne	r2,r3,13cd8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13db4:	e03fff15 	stw	zero,-4(fp)
   13db8:	e0bfff17 	ldw	r2,-4(fp)
}
   13dbc:	e037883a 	mov	sp,fp
   13dc0:	dfc00117 	ldw	ra,4(sp)
   13dc4:	df000017 	ldw	fp,0(sp)
   13dc8:	dec00204 	addi	sp,sp,8
   13dcc:	f800283a 	ret

00013dd0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13dd0:	defffc04 	addi	sp,sp,-16
   13dd4:	df000315 	stw	fp,12(sp)
   13dd8:	df000304 	addi	fp,sp,12
   13ddc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13de0:	00bffa04 	movi	r2,-24
   13de4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13de8:	e03ffe15 	stw	zero,-8(fp)
   13dec:	00001e06 	br	13e68 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   13df0:	e0bffe17 	ldw	r2,-8(fp)
   13df4:	00c00074 	movhi	r3,1
   13df8:	18d60404 	addi	r3,r3,22544
   13dfc:	10800324 	muli	r2,r2,12
   13e00:	10c5883a 	add	r2,r2,r3
   13e04:	10800017 	ldw	r2,0(r2)
   13e08:	1004c03a 	cmpne	r2,r2,zero
   13e0c:	1000131e 	bne	r2,zero,13e5c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   13e10:	e0bffe17 	ldw	r2,-8(fp)
   13e14:	00c00074 	movhi	r3,1
   13e18:	18d60404 	addi	r3,r3,22544
   13e1c:	10800324 	muli	r2,r2,12
   13e20:	10c7883a 	add	r3,r2,r3
   13e24:	e0bfff17 	ldw	r2,-4(fp)
   13e28:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   13e2c:	00800074 	movhi	r2,1
   13e30:	109a8704 	addi	r2,r2,27164
   13e34:	10c00017 	ldw	r3,0(r2)
   13e38:	e0bffe17 	ldw	r2,-8(fp)
   13e3c:	1880040e 	bge	r3,r2,13e50 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   13e40:	00c00074 	movhi	r3,1
   13e44:	18da8704 	addi	r3,r3,27164
   13e48:	e0bffe17 	ldw	r2,-8(fp)
   13e4c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   13e50:	e0bffe17 	ldw	r2,-8(fp)
   13e54:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13e58:	00000606 	br	13e74 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13e5c:	e0bffe17 	ldw	r2,-8(fp)
   13e60:	10800044 	addi	r2,r2,1
   13e64:	e0bffe15 	stw	r2,-8(fp)
   13e68:	e0bffe17 	ldw	r2,-8(fp)
   13e6c:	10800810 	cmplti	r2,r2,32
   13e70:	103fdf1e 	bne	r2,zero,13df0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13e74:	e0bffd17 	ldw	r2,-12(fp)
}
   13e78:	e037883a 	mov	sp,fp
   13e7c:	df000017 	ldw	fp,0(sp)
   13e80:	dec00104 	addi	sp,sp,4
   13e84:	f800283a 	ret

00013e88 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13e88:	defffb04 	addi	sp,sp,-20
   13e8c:	df000415 	stw	fp,16(sp)
   13e90:	df000404 	addi	fp,sp,16
   13e94:	e13ffe15 	stw	r4,-8(fp)
   13e98:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13e9c:	e0bfff17 	ldw	r2,-4(fp)
   13ea0:	10840070 	cmpltui	r2,r2,4097
   13ea4:	1000021e 	bne	r2,zero,13eb0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13ea8:	00840004 	movi	r2,4096
   13eac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13eb0:	e0fffe17 	ldw	r3,-8(fp)
   13eb4:	e0bfff17 	ldw	r2,-4(fp)
   13eb8:	1885883a 	add	r2,r3,r2
   13ebc:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13ec0:	e0bffe17 	ldw	r2,-8(fp)
   13ec4:	e0bffd15 	stw	r2,-12(fp)
   13ec8:	00000506 	br	13ee0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   13ecc:	e0bffd17 	ldw	r2,-12(fp)
   13ed0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13ed4:	e0bffd17 	ldw	r2,-12(fp)
   13ed8:	10800804 	addi	r2,r2,32
   13edc:	e0bffd15 	stw	r2,-12(fp)
   13ee0:	e0fffd17 	ldw	r3,-12(fp)
   13ee4:	e0bffc17 	ldw	r2,-16(fp)
   13ee8:	18bff836 	bltu	r3,r2,13ecc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13eec:	e0bffe17 	ldw	r2,-8(fp)
   13ef0:	108007cc 	andi	r2,r2,31
   13ef4:	1005003a 	cmpeq	r2,r2,zero
   13ef8:	1000021e 	bne	r2,zero,13f04 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13efc:	e0bffd17 	ldw	r2,-12(fp)
   13f00:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   13f04:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13f08:	e037883a 	mov	sp,fp
   13f0c:	df000017 	ldw	fp,0(sp)
   13f10:	dec00104 	addi	sp,sp,4
   13f14:	f800283a 	ret

00013f18 <atexit>:
   13f18:	200b883a 	mov	r5,r4
   13f1c:	000d883a 	mov	r6,zero
   13f20:	0009883a 	mov	r4,zero
   13f24:	000f883a 	mov	r7,zero
   13f28:	0013fd81 	jmpi	13fd8 <__register_exitproc>

00013f2c <exit>:
   13f2c:	defffe04 	addi	sp,sp,-8
   13f30:	000b883a 	mov	r5,zero
   13f34:	dc000015 	stw	r16,0(sp)
   13f38:	dfc00115 	stw	ra,4(sp)
   13f3c:	2021883a 	mov	r16,r4
   13f40:	00141100 	call	14110 <__call_exitprocs>
   13f44:	00800074 	movhi	r2,1
   13f48:	109a7e04 	addi	r2,r2,27128
   13f4c:	11000017 	ldw	r4,0(r2)
   13f50:	20800f17 	ldw	r2,60(r4)
   13f54:	10000126 	beq	r2,zero,13f5c <exit+0x30>
   13f58:	103ee83a 	callr	r2
   13f5c:	8009883a 	mov	r4,r16
   13f60:	00143000 	call	14300 <_exit>

00013f64 <memcmp>:
   13f64:	00c000c4 	movi	r3,3
   13f68:	1980032e 	bgeu	r3,r6,13f78 <memcmp+0x14>
   13f6c:	2144b03a 	or	r2,r4,r5
   13f70:	10c4703a 	and	r2,r2,r3
   13f74:	10000f26 	beq	r2,zero,13fb4 <memcmp+0x50>
   13f78:	31ffffc4 	addi	r7,r6,-1
   13f7c:	3000061e 	bne	r6,zero,13f98 <memcmp+0x34>
   13f80:	00000a06 	br	13fac <memcmp+0x48>
   13f84:	39ffffc4 	addi	r7,r7,-1
   13f88:	00bfffc4 	movi	r2,-1
   13f8c:	21000044 	addi	r4,r4,1
   13f90:	29400044 	addi	r5,r5,1
   13f94:	38800526 	beq	r7,r2,13fac <memcmp+0x48>
   13f98:	20c00003 	ldbu	r3,0(r4)
   13f9c:	28800003 	ldbu	r2,0(r5)
   13fa0:	18bff826 	beq	r3,r2,13f84 <memcmp+0x20>
   13fa4:	1885c83a 	sub	r2,r3,r2
   13fa8:	f800283a 	ret
   13fac:	0005883a 	mov	r2,zero
   13fb0:	f800283a 	ret
   13fb4:	180f883a 	mov	r7,r3
   13fb8:	20c00017 	ldw	r3,0(r4)
   13fbc:	28800017 	ldw	r2,0(r5)
   13fc0:	18bfed1e 	bne	r3,r2,13f78 <memcmp+0x14>
   13fc4:	31bfff04 	addi	r6,r6,-4
   13fc8:	21000104 	addi	r4,r4,4
   13fcc:	29400104 	addi	r5,r5,4
   13fd0:	39bff936 	bltu	r7,r6,13fb8 <memcmp+0x54>
   13fd4:	003fe806 	br	13f78 <memcmp+0x14>

00013fd8 <__register_exitproc>:
   13fd8:	defffa04 	addi	sp,sp,-24
   13fdc:	00800074 	movhi	r2,1
   13fe0:	109a7e04 	addi	r2,r2,27128
   13fe4:	dc000015 	stw	r16,0(sp)
   13fe8:	14000017 	ldw	r16,0(r2)
   13fec:	dd000415 	stw	r20,16(sp)
   13ff0:	2829883a 	mov	r20,r5
   13ff4:	81405217 	ldw	r5,328(r16)
   13ff8:	dcc00315 	stw	r19,12(sp)
   13ffc:	dc800215 	stw	r18,8(sp)
   14000:	dc400115 	stw	r17,4(sp)
   14004:	dfc00515 	stw	ra,20(sp)
   14008:	2023883a 	mov	r17,r4
   1400c:	3027883a 	mov	r19,r6
   14010:	3825883a 	mov	r18,r7
   14014:	28002526 	beq	r5,zero,140ac <__register_exitproc+0xd4>
   14018:	29000117 	ldw	r4,4(r5)
   1401c:	008007c4 	movi	r2,31
   14020:	11002716 	blt	r2,r4,140c0 <__register_exitproc+0xe8>
   14024:	8800101e 	bne	r17,zero,14068 <__register_exitproc+0x90>
   14028:	2105883a 	add	r2,r4,r4
   1402c:	1085883a 	add	r2,r2,r2
   14030:	20c00044 	addi	r3,r4,1
   14034:	1145883a 	add	r2,r2,r5
   14038:	0009883a 	mov	r4,zero
   1403c:	15000215 	stw	r20,8(r2)
   14040:	28c00115 	stw	r3,4(r5)
   14044:	2005883a 	mov	r2,r4
   14048:	dfc00517 	ldw	ra,20(sp)
   1404c:	dd000417 	ldw	r20,16(sp)
   14050:	dcc00317 	ldw	r19,12(sp)
   14054:	dc800217 	ldw	r18,8(sp)
   14058:	dc400117 	ldw	r17,4(sp)
   1405c:	dc000017 	ldw	r16,0(sp)
   14060:	dec00604 	addi	sp,sp,24
   14064:	f800283a 	ret
   14068:	29802204 	addi	r6,r5,136
   1406c:	00800044 	movi	r2,1
   14070:	110e983a 	sll	r7,r2,r4
   14074:	30c04017 	ldw	r3,256(r6)
   14078:	2105883a 	add	r2,r4,r4
   1407c:	1085883a 	add	r2,r2,r2
   14080:	1185883a 	add	r2,r2,r6
   14084:	19c6b03a 	or	r3,r3,r7
   14088:	14802015 	stw	r18,128(r2)
   1408c:	14c00015 	stw	r19,0(r2)
   14090:	00800084 	movi	r2,2
   14094:	30c04015 	stw	r3,256(r6)
   14098:	88bfe31e 	bne	r17,r2,14028 <__register_exitproc+0x50>
   1409c:	30804117 	ldw	r2,260(r6)
   140a0:	11c4b03a 	or	r2,r2,r7
   140a4:	30804115 	stw	r2,260(r6)
   140a8:	003fdf06 	br	14028 <__register_exitproc+0x50>
   140ac:	008000b4 	movhi	r2,2
   140b0:	10a21304 	addi	r2,r2,-30644
   140b4:	100b883a 	mov	r5,r2
   140b8:	80805215 	stw	r2,328(r16)
   140bc:	003fd606 	br	14018 <__register_exitproc+0x40>
   140c0:	00800034 	movhi	r2,0
   140c4:	10800004 	addi	r2,r2,0
   140c8:	1000021e 	bne	r2,zero,140d4 <__register_exitproc+0xfc>
   140cc:	013fffc4 	movi	r4,-1
   140d0:	003fdc06 	br	14044 <__register_exitproc+0x6c>
   140d4:	01006404 	movi	r4,400
   140d8:	103ee83a 	callr	r2
   140dc:	1007883a 	mov	r3,r2
   140e0:	103ffa26 	beq	r2,zero,140cc <__register_exitproc+0xf4>
   140e4:	80805217 	ldw	r2,328(r16)
   140e8:	180b883a 	mov	r5,r3
   140ec:	18000115 	stw	zero,4(r3)
   140f0:	18800015 	stw	r2,0(r3)
   140f4:	80c05215 	stw	r3,328(r16)
   140f8:	18006215 	stw	zero,392(r3)
   140fc:	18006315 	stw	zero,396(r3)
   14100:	0009883a 	mov	r4,zero
   14104:	883fc826 	beq	r17,zero,14028 <__register_exitproc+0x50>
   14108:	003fd706 	br	14068 <__register_exitproc+0x90>

0001410c <register_fini>:
   1410c:	f800283a 	ret

00014110 <__call_exitprocs>:
   14110:	00800074 	movhi	r2,1
   14114:	109a7e04 	addi	r2,r2,27128
   14118:	10800017 	ldw	r2,0(r2)
   1411c:	defff304 	addi	sp,sp,-52
   14120:	df000b15 	stw	fp,44(sp)
   14124:	d8800115 	stw	r2,4(sp)
   14128:	00800034 	movhi	r2,0
   1412c:	10800004 	addi	r2,r2,0
   14130:	1005003a 	cmpeq	r2,r2,zero
   14134:	d8800215 	stw	r2,8(sp)
   14138:	d8800117 	ldw	r2,4(sp)
   1413c:	dd400815 	stw	r21,32(sp)
   14140:	dd000715 	stw	r20,28(sp)
   14144:	10805204 	addi	r2,r2,328
   14148:	dfc00c15 	stw	ra,48(sp)
   1414c:	ddc00a15 	stw	r23,40(sp)
   14150:	dd800915 	stw	r22,36(sp)
   14154:	dcc00615 	stw	r19,24(sp)
   14158:	dc800515 	stw	r18,20(sp)
   1415c:	dc400415 	stw	r17,16(sp)
   14160:	dc000315 	stw	r16,12(sp)
   14164:	282b883a 	mov	r21,r5
   14168:	2039883a 	mov	fp,r4
   1416c:	d8800015 	stw	r2,0(sp)
   14170:	2829003a 	cmpeq	r20,r5,zero
   14174:	d8800117 	ldw	r2,4(sp)
   14178:	14405217 	ldw	r17,328(r2)
   1417c:	88001026 	beq	r17,zero,141c0 <__call_exitprocs+0xb0>
   14180:	ddc00017 	ldw	r23,0(sp)
   14184:	88800117 	ldw	r2,4(r17)
   14188:	8c802204 	addi	r18,r17,136
   1418c:	143fffc4 	addi	r16,r2,-1
   14190:	80000916 	blt	r16,zero,141b8 <__call_exitprocs+0xa8>
   14194:	05bfffc4 	movi	r22,-1
   14198:	a000151e 	bne	r20,zero,141f0 <__call_exitprocs+0xe0>
   1419c:	8409883a 	add	r4,r16,r16
   141a0:	2105883a 	add	r2,r4,r4
   141a4:	1485883a 	add	r2,r2,r18
   141a8:	10c02017 	ldw	r3,128(r2)
   141ac:	a8c01126 	beq	r21,r3,141f4 <__call_exitprocs+0xe4>
   141b0:	843fffc4 	addi	r16,r16,-1
   141b4:	85bff81e 	bne	r16,r22,14198 <__call_exitprocs+0x88>
   141b8:	d8800217 	ldw	r2,8(sp)
   141bc:	10003126 	beq	r2,zero,14284 <__call_exitprocs+0x174>
   141c0:	dfc00c17 	ldw	ra,48(sp)
   141c4:	df000b17 	ldw	fp,44(sp)
   141c8:	ddc00a17 	ldw	r23,40(sp)
   141cc:	dd800917 	ldw	r22,36(sp)
   141d0:	dd400817 	ldw	r21,32(sp)
   141d4:	dd000717 	ldw	r20,28(sp)
   141d8:	dcc00617 	ldw	r19,24(sp)
   141dc:	dc800517 	ldw	r18,20(sp)
   141e0:	dc400417 	ldw	r17,16(sp)
   141e4:	dc000317 	ldw	r16,12(sp)
   141e8:	dec00d04 	addi	sp,sp,52
   141ec:	f800283a 	ret
   141f0:	8409883a 	add	r4,r16,r16
   141f4:	88c00117 	ldw	r3,4(r17)
   141f8:	2105883a 	add	r2,r4,r4
   141fc:	1445883a 	add	r2,r2,r17
   14200:	18ffffc4 	addi	r3,r3,-1
   14204:	11800217 	ldw	r6,8(r2)
   14208:	1c001526 	beq	r3,r16,14260 <__call_exitprocs+0x150>
   1420c:	10000215 	stw	zero,8(r2)
   14210:	303fe726 	beq	r6,zero,141b0 <__call_exitprocs+0xa0>
   14214:	00c00044 	movi	r3,1
   14218:	1c06983a 	sll	r3,r3,r16
   1421c:	90804017 	ldw	r2,256(r18)
   14220:	8cc00117 	ldw	r19,4(r17)
   14224:	1884703a 	and	r2,r3,r2
   14228:	10001426 	beq	r2,zero,1427c <__call_exitprocs+0x16c>
   1422c:	90804117 	ldw	r2,260(r18)
   14230:	1884703a 	and	r2,r3,r2
   14234:	10000c1e 	bne	r2,zero,14268 <__call_exitprocs+0x158>
   14238:	2105883a 	add	r2,r4,r4
   1423c:	1485883a 	add	r2,r2,r18
   14240:	11400017 	ldw	r5,0(r2)
   14244:	e009883a 	mov	r4,fp
   14248:	303ee83a 	callr	r6
   1424c:	88800117 	ldw	r2,4(r17)
   14250:	98bfc81e 	bne	r19,r2,14174 <__call_exitprocs+0x64>
   14254:	b8800017 	ldw	r2,0(r23)
   14258:	147fd526 	beq	r2,r17,141b0 <__call_exitprocs+0xa0>
   1425c:	003fc506 	br	14174 <__call_exitprocs+0x64>
   14260:	8c000115 	stw	r16,4(r17)
   14264:	003fea06 	br	14210 <__call_exitprocs+0x100>
   14268:	2105883a 	add	r2,r4,r4
   1426c:	1485883a 	add	r2,r2,r18
   14270:	11000017 	ldw	r4,0(r2)
   14274:	303ee83a 	callr	r6
   14278:	003ff406 	br	1424c <__call_exitprocs+0x13c>
   1427c:	303ee83a 	callr	r6
   14280:	003ff206 	br	1424c <__call_exitprocs+0x13c>
   14284:	88800117 	ldw	r2,4(r17)
   14288:	1000081e 	bne	r2,zero,142ac <__call_exitprocs+0x19c>
   1428c:	89000017 	ldw	r4,0(r17)
   14290:	20000726 	beq	r4,zero,142b0 <__call_exitprocs+0x1a0>
   14294:	b9000015 	stw	r4,0(r23)
   14298:	8809883a 	mov	r4,r17
   1429c:	00000000 	call	0 <__reset>
   142a0:	bc400017 	ldw	r17,0(r23)
   142a4:	883fb71e 	bne	r17,zero,14184 <__call_exitprocs+0x74>
   142a8:	003fc506 	br	141c0 <__call_exitprocs+0xb0>
   142ac:	89000017 	ldw	r4,0(r17)
   142b0:	882f883a 	mov	r23,r17
   142b4:	2023883a 	mov	r17,r4
   142b8:	883fb21e 	bne	r17,zero,14184 <__call_exitprocs+0x74>
   142bc:	003fc006 	br	141c0 <__call_exitprocs+0xb0>

000142c0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   142c0:	defffd04 	addi	sp,sp,-12
   142c4:	df000215 	stw	fp,8(sp)
   142c8:	df000204 	addi	fp,sp,8
   142cc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   142d0:	e0bfff17 	ldw	r2,-4(fp)
   142d4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   142d8:	e0bffe17 	ldw	r2,-8(fp)
   142dc:	1005003a 	cmpeq	r2,r2,zero
   142e0:	1000021e 	bne	r2,zero,142ec <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   142e4:	002af070 	cmpltui	zero,zero,43969
   142e8:	00000106 	br	142f0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   142ec:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   142f0:	e037883a 	mov	sp,fp
   142f4:	df000017 	ldw	fp,0(sp)
   142f8:	dec00104 	addi	sp,sp,4
   142fc:	f800283a 	ret

00014300 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   14300:	defffd04 	addi	sp,sp,-12
   14304:	dfc00215 	stw	ra,8(sp)
   14308:	df000115 	stw	fp,4(sp)
   1430c:	df000104 	addi	fp,sp,4
   14310:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   14314:	e13fff17 	ldw	r4,-4(fp)
   14318:	00142c00 	call	142c0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   1431c:	003fff06 	br	1431c <_exit+0x1c>
   14320:	0001410c 	andi	zero,zero,1284
