
Milestone_2.elf:     file format elf32-littlenios2
Milestone_2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000138bc memsz 0x000138bc flags r-x
    LOAD off    0x000148dc vaddr 0x000138dc paddr 0x000153a0 align 2**12
         filesz 0x00001ac4 memsz 0x00001ac4 flags rw-
    LOAD off    0x00016e64 vaddr 0x00016e64 paddr 0x00016e64 align 2**12
         filesz 0x00000000 memsz 0x00000400 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012d94  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000994  00012f48  00012f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ac4  000138dc  000153a0  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000400  00016e64  00016e64  00016e64  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000163a0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001158  00000000  00000000  000163c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001a27  00000000  00000000  00017520  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00032580  00000000  00000000  00018f47  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000ae3f  00000000  00000000  0004b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001bc5e  00000000  00000000  00056306  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002360  00000000  00000000  00071f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c7c  00000000  00000000  000742c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012905  00000000  00000000  00076f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00089848  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  00089878  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0008dfec  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0008dfef  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008dff2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008dff3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008dff4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008dff8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008dffc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0008e000  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0008e00b  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008e016  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  0008e021  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  0008e032  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00093cf1  00000000  00000000  0008e072  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
00012f48 l    d  .rodata	00000000 .rodata
000138dc l    d  .rwdata	00000000 .rwdata
00016e64 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 CommandLine.c
000138dc l     O .rwdata	0000000c RR
000002f0 l     F .text	00000090 _read
000138e8 l     O .rwdata	0000000c WR
00000380 l     F .text	0000007c _write
000138f4 l     O .rwdata	0000000c HELP
000003fc l     F .text	00000170 _help
00013900 l     O .rwdata	0000000c PAN
0000056c l     F .text	000000b0 _pan
0001390c l     O .rwdata	0000000c TILT
0000061c l     F .text	000000b0 _tilt
000006cc l     F .text	00000080 _generateList
00016e98 l     O .bss	00000014 commandList
0000074c l     F .text	00000290 _printMem
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 UART.c
00000000 l    df *ABS*	00000000 Servo.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000011e8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 ctype_.c
00013399 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
000014a0 l     F .text	00000058 std
000015ac l     F .text	00000008 __fp_lock
000015b4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00013918 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00002550 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
000026b0 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00002c3c l     F .text	00000058 __sprint_r
00013592 l     O .rodata	00000010 blanks.3452
00013582 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
000135aa l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00006508 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00015374 l     O .rwdata	00000004 charset
000135ec l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00013734 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0000a9a0 l     F .text	00000048 match
00014140 l     O .rwdata	00000014 fpi.1950
00013750 l     O .rodata	00000028 tinytens
0001412c l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000cfd8 l     F .text	00000024 htinit
0000d064 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000d8cc l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000ea00 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
000105b4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00010614 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00010714 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00010834 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00010914 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00010a70 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00010c9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00015390 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00010f38 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000142fc l     O .rwdata	00001060 jtag_uart_0
00011028 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00011268 l     F .text	00000228 altera_avalon_jtag_uart_irq
00011490 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00011b0c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00011e58 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001227c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000123b8 l     F .text	000000dc alt_file_locked
0001261c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00012d30 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00012ee4 l     F .text	00000040 alt_sim_halt
000022b4 g     F .text	0000001c putchar
00009428 g     F .text	00000094 _mprec_log10
00009514 g     F .text	00000088 __any_on
0000db60 g     F .text	00000070 _isatty_r
0001370c g     O .rodata	00000028 __mprec_tinytens
00010ad0 g     F .text	0000006c alt_main
00002b3c g     F .text	0000008c strcpy
000022d8 g     F .text	000000a0 _puts_r
00016fd4 g     O .bss	00000100 alt_irq
00008c30 g     F .text	00000078 _lseek_r
00000e40 g     F .text	00000034 servo_init
000153a0 g       *ABS*	00000000 __flash_rwdata_start
0000f520 g     F .text	00000088 __eqdf2
00017264 g       *ABS*	00000000 __alt_heap_start
0000223c g     F .text	00000044 printf
000027cc g     F .text	00000068 __sseek
00001508 g     F .text	000000a4 __sinit
0000cd64 g     F .text	00000130 __swbuf_r
00008b90 g     F .text	00000084 _setlocale_r
00001608 g     F .text	00000068 __sfmoreglue
0000cd48 g     F .text	0000001c ungetc
00010b5c g     F .text	00000020 __malloc_unlock
0000a9e8 g     F .text	000014e4 _strtod_r
00008f3c g     F .text	000000e0 memmove
00000e74 g     F .text	00000070 servo_pan
000015f8 g     F .text	00000010 _cleanup
0000959c g     F .text	000000bc _Balloc
0000f630 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000cf64 g     F .text	00000074 _fstat_r
00016e70 g     O .bss	00000004 errno
000061e4 g     F .text	00000024 __svfscanf
0000fe18 g     F .text	0000002c __make_fp
00016e84 g     O .bss	00000004 alt_argv
00000d94 g     F .text	00000038 uart_printStr
0001d35c g       *ABS*	00000000 _gp
00000b2c g     F .text	00000050 PWM_writeOCRB
0000147c g     F .text	00000024 fgets
0001417c g     O .rwdata	00000180 alt_fd_list
000022d0 g     F .text	00000008 _putchar_r
00012840 g     F .text	00000094 alt_find_dev
00002104 g     F .text	000000a0 memcpy
0000d918 g     F .text	00000248 __hexnan
000015ec g     F .text	0000000c _cleanup_r
0000f850 g     F .text	000000f8 __floatsidf
00012340 g     F .text	00000078 alt_io_redirect
0000f740 g     F .text	00000088 __ltdf2
00012f48 g       *ABS*	00000000 __DTOR_END__
00002378 g     F .text	00000014 puts
00008ebc g     F .text	00000040 mbrtowc
00006208 g     F .text	00000068 _vfscanf_r
00009378 g     F .text	000000b0 __ratio
000116a8 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00002280 g     F .text	00000034 _printf_r
00800000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001324 g     F .text	00000008 __udivsi3
00010774 g     F .text	000000c0 isatty
00008b40 g     F .text	0000002c iswspace
0001361c g     O .rodata	000000c8 __mprec_tens
00008b6c g     F .text	00000008 __locale_charset
0000dc68 g     F .text	000000a4 __fixunsdfsi
00012aac g     F .text	00000090 alt_icache_flush
00016e64 g     O .bss	00000004 __malloc_top_pad
0000c7bc g     F .text	00000024 strtoul
00015370 g     O .rwdata	00000004 __mb_cur_max
00008b74 g     F .text	0000000c _localeconv_r
0000c7e0 g     F .text	000002f0 _strtoull_r
00009c94 g     F .text	0000003c __i2b
000086a4 g     F .text	0000049c __sfvwrite_r
0000256c g     F .text	00000070 _sbrk_r
0000a1fc g     F .text	00000078 _read_r
00014120 g     O .rwdata	0000000c __lc_ctype
00015388 g     O .rwdata	00000004 alt_max_fd
00010158 g     F .text	00000138 __unpack_d
00007cd4 g     F .text	00000110 _fclose_r
00007ff4 g     F .text	00000034 fflush
00016e68 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ee90 g     F .text	00000074 __adddf3
0000e898 g     F .text	00000078 __nesf2
00009258 g     F .text	00000120 __b2d
0000e2e8 g     F .text	000005b0 __umoddi3
00010980 g     F .text	000000f0 lseek
00015364 g     O .rwdata	00000004 _global_impure_ptr
0000a274 g     F .text	000005f4 _realloc_r
00017264 g       *ABS*	00000000 __bss_end
00012184 g     F .text	000000f8 alt_iic_isr_register
00012714 g     F .text	0000010c alt_tick
00016ed4 g     O .bss	00000100 __hexdig
0000dd0c g     F .text	000005dc __udivdi3
000136e4 g     O .rodata	00000028 __mprec_bigtens
00009ef0 g     F .text	00000120 __s2b
0000fa94 g     F .text	00000194 __floatunsidf
00009178 g     F .text	00000060 __mcmp
0001535c g     O .rwdata	00000004 __ctype_ptr
000015d4 g     F .text	00000018 __fp_lock_all
0001213c g     F .text	00000048 alt_ic_irq_enabled
0001267c g     F .text	00000098 alt_alarm_stop
0000c250 g     F .text	00000024 strtol
00016e8c g     O .bss	00000004 alt_irq_active
00000d00 g     F .text	0000004c uart_putch
000000ec g     F .exceptions	000000c8 alt_irq_handler
00014154 g     O .rwdata	00000028 alt_dev_null
0000fca8 g     F .text	000000c8 __unpack_f
00000ba8 g     F .text	0000002c PWM_readOCRB
00011d60 g     F .text	00000044 alt_dcache_flush_all
00009044 g     F .text	00000070 __hi0bits
0000f948 g     F .text	000000d8 __fixdfsi
0000bff0 g     F .text	0000001c strtod
000153a0 g       *ABS*	00000000 __ram_rwdata_end
00015380 g     O .rwdata	00000008 alt_dev_list
00010e18 g     F .text	00000120 write
0000a114 g     F .text	000000e8 _putc_r
0000e910 g     F .text	00000078 __gtsf2
000138dc g       *ABS*	00000000 __ram_rodata_end
00010640 g     F .text	000000d4 fstat
0000f7c8 g     F .text	00000088 __ledf2
00002910 g     F .text	00000090 strcat
00009dd0 g     F .text	00000120 __pow5mult
00016e74 g     O .bss	00000004 __nlocale_changed
0000132c g     F .text	00000008 __umodsi3
00017264 g       *ABS*	00000000 end
00010358 g     F .text	00000160 __pack_f
000111a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
00012f44 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
00011b7c g     F .text	00000090 alt_avalon_timer_sc_init
0000fc28 g     F .text	00000080 __clzsi2
000118cc g     F .text	00000240 altera_avalon_jtag_uart_write
00000bd4 g     F .text	0000012c uart_init
000014f8 g     F .text	00000004 __sfp_lock_acquire
00002020 g     F .text	000000e4 memchr
00002c94 g     F .text	00001eac ___vfprintf_internal_r
00002650 g     F .text	00000060 _sprintf_r
00008390 g     F .text	00000314 _free_r
00012d34 g     F .text	000001b0 __call_exitprocs
00016e78 g     O .bss	00000004 __mlocale_changed
0001536c g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00016e90 g     O .bss	00000004 _alt_tick_rate
0000c274 g     F .text	00000318 _strtoll_r
00009960 g     F .text	0000014c __lshift
00016e94 g     O .bss	00000004 _alt_nticks
00010b7c g     F .text	00000120 read
00010fcc g     F .text	0000005c alt_sys_init
00012bfc g     F .text	00000134 __register_exitproc
00009aac g     F .text	000001e8 __multiply
00011540 g     F .text	00000074 altera_avalon_jtag_uart_close
000138dc g       *ABS*	00000000 __ram_rwdata_start
00012f48 g       *ABS*	00000000 __ram_rodata_start
00016eac g     O .bss	00000028 __malloc_current_mallinfo
00009658 g     F .text	0000017c __d2b
00011060 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000c58c g     F .text	00000230 _strtoul_r
000129f4 g     F .text	000000b8 alt_get_fd
00010290 g     F .text	000000c8 __fpcmp_parts_d
00006498 g     F .text	00000070 _close_r
00012b88 g     F .text	00000074 memcmp
00011110 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00017264 g       *ABS*	00000000 __alt_stack_base
00011158 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00002740 g     F .text	00000084 sscanf
0000635c g     F .text	0000013c __swsetup_r
0000f2c8 g     F .text	00000258 __divdf3
00001670 g     F .text	000000f0 __sfp
000094bc g     F .text	00000058 __copybits
00013d18 g     O .rwdata	00000408 __malloc_av_
00001504 g     F .text	00000004 __sinit_lock_release
00000a5c g     F .text	00000080 PWM_setDutyCycle_B
0000ef04 g     F .text	000003c4 __muldf3
000028b0 g     F .text	00000060 __sread
00008224 g     F .text	00000040 fread
000128d4 g     F .text	00000120 alt_find_file
00000f54 g     F .text	00000038 getServoX
00011da4 g     F .text	000000b4 alt_dev_llist_insert
00010b3c g     F .text	00000020 __malloc_lock
00010d5c g     F .text	000000bc sbrk
00007df8 g     F .text	000001fc _fflush_r
0000ceb0 g     F .text	000000b4 _calloc_r
00016e64 g       *ABS*	00000000 __bss_start
000021a4 g     F .text	00000098 memset
000010e4 g     F .text	00000104 main
00016e88 g     O .bss	00000004 alt_envp
00016e6c g     O .bss	00000004 __malloc_max_total_mem
000110b8 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000ce94 g     F .text	0000001c __swbuf
0000e988 g     F .text	00000078 __ltsf2
00008028 g     F .text	000001fc _fread_r
00001054 g     F .text	00000090 setServoY
000027c4 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00007de4 g     F .text	00000014 fclose
0000c00c g     F .text	00000244 _strtol_r
0000fa20 g     F .text	00000074 __truncdfsf2
000170d4 g     O .bss	00000190 _atexit0
00006720 g     F .text	000015b4 _dtoa_r
000018e0 g     F .text	00000740 _malloc_r
0001538c g     O .rwdata	00000004 alt_errno
0000cad0 g     F .text	000000dc __submore
00001828 g     F .text	000000b8 _fwalk
00001334 g     F .text	00000148 _fgets_r
00008efc g     F .text	00000040 _mbtowc_r
0000a010 g     F .text	00000104 putc
00001264 g     F .text	00000060 __divsi3
00013794 g     O .rodata	00000014 __thenan_df
00008264 g     F .text	0000012c _malloc_trim_r
00012f48 g       *ABS*	00000000 __CTOR_END__
00002a80 g     F .text	000000bc strcmp
00012f48 g       *ABS*	00000000 __flash_rodata_start
00012f48 g       *ABS*	00000000 __DTOR_LIST__
0000f5a8 g     F .text	00000088 __nedf2
00010f98 g     F .text	00000034 alt_irq_init
00010cfc g     F .text	00000060 alt_release_fd
00000b7c g     F .text	0000002c PWM_readOCRA
000025dc g     F .text	00000074 sprintf
000137a8 g     O .rodata	00000100 __clz_tab
00016e7c g     O .bss	00000004 _PathLocale
00000f8c g     F .text	00000090 setServoX
0000becc g     F .text	00000124 strtof
00012b3c g     F .text	00000014 atexit
000062e4 g     F .text	00000078 _write_r
00008c14 g     F .text	0000001c setlocale
0000a998 g     F .text	00000008 nanf
00015360 g     O .rwdata	00000004 _impure_ptr
00016e80 g     O .bss	00000004 alt_argc
00008e3c g     F .text	00000080 _mbrtowc_r
00011f1c g     F .text	00000064 _do_dtors
00000adc g     F .text	00000050 PWM_writeOCRA
0000238c g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
00000228 g     F .text	000000c8 cmd_parseInput
000091d8 g     F .text	00000080 __ulp
0000a868 g     F .text	00000040 __isinfd
000015bc g     F .text	00000018 __fp_unlock_all
00015378 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00008b80 g     F .text	00000010 localeconv
00011fb0 g     F .text	00000050 alt_ic_isr_register
0000cffc g     F .text	00000068 __hexdig_init
000026b8 g     F .text	00000088 _sscanf_r
000153a0 g       *ABS*	00000000 _edata
00017264 g       *ABS*	00000000 _end
00000d4c g     F .text	00000048 uart_getch
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00006270 g     F .text	00000074 vfscanf
000115b4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001209c g     F .text	000000a0 alt_ic_irq_disable
00000200 g     F .text	00000028 cmd_init
00002834 g     F .text	0000007c __swrite
00015368 g     O .rwdata	00000004 __malloc_trim_threshold
00012820 g     F .text	00000020 altera_nios2_qsys_irq_init
00012b50 g     F .text	00000038 exit
00001760 g     F .text	000000c8 _fwalk_reent
000097d4 g     F .text	0000018c __mdiff
000012c4 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000014fc g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
00000dcc g     F .text	00000074 uart_readStr
0000a8d8 g     F .text	000000c0 __sccl
00013298 g     O .rodata	00000101 _ctype_
0000fd70 g     F .text	000000a8 __fpcmp_parts_f
00012f24 g     F .text	00000020 _exit
0000a8a8 g     F .text	00000030 __isnand
00011c0c g     F .text	00000154 alt_alarm_start
0000dbd0 g     F .text	00000098 __muldi3
00008ca8 g     F .text	00000194 __smakebuf_r
00002bc8 g     F .text	00000074 strlen
00012494 g     F .text	00000188 open
0000f6b8 g     F .text	00000088 __gedf2
0000d114 g     F .text	000007b8 __gethex
000009dc g     F .text	00000080 PWM_setDutyCycle_A
00011f80 g     F .text	00000030 alt_icache_flush_all
000029a0 g     F .text	000000e0 strchr
00000ee4 g     F .text	00000070 servo_tilt
00015394 g     O .rwdata	00000004 alt_priority_mask
00012000 g     F .text	0000009c alt_ic_irq_enable
00004b40 g     F .text	00000024 __vfprintf_internal
0000ee10 g     F .text	00000080 __subdf3
000090b4 g     F .text	000000c4 __lo0bits
00004b64 g     F .text	00001680 __svfscanf_r
00015398 g     O .rwdata	00000008 alt_alarm_list
0000cbac g     F .text	0000019c _ungetc_r
00011eb8 g     F .text	00000064 _do_ctors
000104b8 g     F .text	000000fc close
0000101c g     F .text	00000038 getServoY
00010894 g     F .text	00000080 alt_load
0000fe44 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00001500 g     F .text	00000004 __sinit_lock_acquire
00009cd0 g     F .text	00000100 __multadd
0000901c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18dbf504 	addi	r3,r3,28628
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18dbf504 	addi	r3,r3,28628
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6b4d714 	ori	gp,gp,54108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	109b9914 	ori	r2,r2,28260

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18dc9914 	ori	r3,r3,29284

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	00108940 	call	10894 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	0010ad00 	call	10ad0 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <cmd_init>:

/**
 * Initializes the command line module. Specifically the command list is
 * generated so that command parsing can occur.
 */
void cmd_init(){
     200:	defffe04 	addi	sp,sp,-8
     204:	dfc00115 	stw	ra,4(sp)
     208:	df000015 	stw	fp,0(sp)
     20c:	d839883a 	mov	fp,sp
	_generateList();
     210:	00006cc0 	call	6cc <_generateList>
}
     214:	e037883a 	mov	sp,fp
     218:	dfc00117 	ldw	ra,4(sp)
     21c:	df000017 	ldw	fp,0(sp)
     220:	dec00204 	addi	sp,sp,8
     224:	f800283a 	ret

00000228 <cmd_parseInput>:
 * Matches the command given by the user with the predefined list. Will run
 * any command that is matched with given.
 * @param inputStr original string from the user.
 * @param cmdStr parsed out command for matching and further parsing.
 */
void cmd_parseInput(char* inputStr, char* cmdStr){
     228:	defffa04 	addi	sp,sp,-24
     22c:	dfc00515 	stw	ra,20(sp)
     230:	df000415 	stw	fp,16(sp)
     234:	df000404 	addi	fp,sp,16
     238:	e13ffe15 	stw	r4,-8(fp)
     23c:	e17fff15 	stw	r5,-4(fp)
		//search command list for match
		int commandFoundFlag = 0;
     240:	e03ffd15 	stw	zero,-12(fp)
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     244:	e03ffc15 	stw	zero,-16(fp)
     248:	00001b06 	br	2b8 <cmd_parseInput+0x90>
			if(strcmp(cmdStr,commandList[i]->name)==0){
     24c:	e0bffc17 	ldw	r2,-16(fp)
     250:	00c00074 	movhi	r3,1
     254:	18dba604 	addi	r3,r3,28312
     258:	1085883a 	add	r2,r2,r2
     25c:	1085883a 	add	r2,r2,r2
     260:	10c5883a 	add	r2,r2,r3
     264:	10800017 	ldw	r2,0(r2)
     268:	11400017 	ldw	r5,0(r2)
     26c:	e13fff17 	ldw	r4,-4(fp)
     270:	0002a800 	call	2a80 <strcmp>
     274:	1004c03a 	cmpne	r2,r2,zero
     278:	10000c1e 	bne	r2,zero,2ac <cmd_parseInput+0x84>
				commandList[i]->cmdFnt(inputStr);
     27c:	e0bffc17 	ldw	r2,-16(fp)
     280:	00c00074 	movhi	r3,1
     284:	18dba604 	addi	r3,r3,28312
     288:	1085883a 	add	r2,r2,r2
     28c:	1085883a 	add	r2,r2,r2
     290:	10c5883a 	add	r2,r2,r3
     294:	10800017 	ldw	r2,0(r2)
     298:	10800217 	ldw	r2,8(r2)
     29c:	e13ffe17 	ldw	r4,-8(fp)
     2a0:	103ee83a 	callr	r2
				commandFoundFlag = 1;
     2a4:	00800044 	movi	r2,1
     2a8:	e0bffd15 	stw	r2,-12(fp)
 * @param cmdStr parsed out command for matching and further parsing.
 */
void cmd_parseInput(char* inputStr, char* cmdStr){
		//search command list for match
		int commandFoundFlag = 0;
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     2ac:	e0bffc17 	ldw	r2,-16(fp)
     2b0:	10800044 	addi	r2,r2,1
     2b4:	e0bffc15 	stw	r2,-16(fp)
     2b8:	e0bffc17 	ldw	r2,-16(fp)
     2bc:	10800150 	cmplti	r2,r2,5
     2c0:	103fe21e 	bne	r2,zero,24c <cmd_parseInput+0x24>
				commandFoundFlag = 1;
			}
		}

		//if command not found then print error message
		if(!commandFoundFlag){
     2c4:	e0bffd17 	ldw	r2,-12(fp)
     2c8:	1004c03a 	cmpne	r2,r2,zero
     2cc:	1000031e 	bne	r2,zero,2dc <cmd_parseInput+0xb4>
			printf("Invalid Command.\n");
     2d0:	01000074 	movhi	r4,1
     2d4:	210c4104 	addi	r4,r4,12548
     2d8:	00023780 	call	2378 <puts>
		}
}
     2dc:	e037883a 	mov	sp,fp
     2e0:	dfc00117 	ldw	ra,4(sp)
     2e4:	df000017 	ldw	fp,0(sp)
     2e8:	dec00204 	addi	sp,sp,8
     2ec:	f800283a 	ret

000002f0 <_read>:

/**
 * Read Command Function
 * @param arg string to parse
 */
static void _read(char* arg){
     2f0:	defff804 	addi	sp,sp,-32
     2f4:	dfc00715 	stw	ra,28(sp)
     2f8:	df000615 	stw	fp,24(sp)
     2fc:	df000604 	addi	fp,sp,24
     300:	e13fff15 	stw	r4,-4(fp)
	char cmd[3];
	unsigned int address, count;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&count);
     304:	e1bffc04 	addi	r6,fp,-16
     308:	e1fffd04 	addi	r7,fp,-12
     30c:	e0bffe04 	addi	r2,fp,-8
     310:	d8800015 	stw	r2,0(sp)
     314:	e13fff17 	ldw	r4,-4(fp)
     318:	01400074 	movhi	r5,1
     31c:	294c4604 	addi	r5,r5,12568
     320:	00027400 	call	2740 <sscanf>
     324:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
     328:	e0bffb17 	ldw	r2,-20(fp)
     32c:	108000d8 	cmpnei	r2,r2,3
     330:	1000041e 	bne	r2,zero,344 <_read+0x54>
		//Read multiple
		_printMem(address,count);
     334:	e13ffd17 	ldw	r4,-12(fp)
     338:	e17ffe17 	ldw	r5,-8(fp)
     33c:	000074c0 	call	74c <_printMem>
     340:	00000a06 	br	36c <_read+0x7c>
	}else if(matched == 2){
     344:	e0bffb17 	ldw	r2,-20(fp)
     348:	10800098 	cmpnei	r2,r2,2
     34c:	1000041e 	bne	r2,zero,360 <_read+0x70>
		//Read single
		_printMem(address,1);
     350:	e13ffd17 	ldw	r4,-12(fp)
     354:	01400044 	movi	r5,1
     358:	000074c0 	call	74c <_printMem>
     35c:	00000306 	br	36c <_read+0x7c>
	}else{
		printf("Invalid RR Command Structure.\n");
     360:	01000074 	movhi	r4,1
     364:	210c4904 	addi	r4,r4,12580
     368:	00023780 	call	2378 <puts>
	}
}
     36c:	e037883a 	mov	sp,fp
     370:	dfc00117 	ldw	ra,4(sp)
     374:	df000017 	ldw	fp,0(sp)
     378:	dec00204 	addi	sp,sp,8
     37c:	f800283a 	ret

00000380 <_write>:

/**
 * Write Command Function
 * @param arg string to parse
 */
static void _write(char* arg){
     380:	defff804 	addi	sp,sp,-32
     384:	dfc00715 	stw	ra,28(sp)
     388:	df000615 	stw	fp,24(sp)
     38c:	df000604 	addi	fp,sp,24
     390:	e13fff15 	stw	r4,-4(fp)
	char cmd[3];
	unsigned int address, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&value);
     394:	e1bffc04 	addi	r6,fp,-16
     398:	e1fffd04 	addi	r7,fp,-12
     39c:	e0bffe04 	addi	r2,fp,-8
     3a0:	d8800015 	stw	r2,0(sp)
     3a4:	e13fff17 	ldw	r4,-4(fp)
     3a8:	01400074 	movhi	r5,1
     3ac:	294c4604 	addi	r5,r5,12568
     3b0:	00027400 	call	2740 <sscanf>
     3b4:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
     3b8:	e0bffb17 	ldw	r2,-20(fp)
     3bc:	108000d8 	cmpnei	r2,r2,3
     3c0:	1000061e 	bne	r2,zero,3dc <_write+0x5c>
		//always apply the store IO version of the instruction for immediate
		// change and store in original for memory required versions
		*((volatile unsigned char*)(address | BYPASS_CACHE_FLAG)) = value;
     3c4:	e0bffd17 	ldw	r2,-12(fp)
     3c8:	10a00034 	orhi	r2,r2,32768
     3cc:	1007883a 	mov	r3,r2
     3d0:	e0bffe17 	ldw	r2,-8(fp)
     3d4:	18800005 	stb	r2,0(r3)
     3d8:	00000306 	br	3e8 <_write+0x68>
	}else{
		printf("Invalid WR Command Structure.\n");
     3dc:	01000074 	movhi	r4,1
     3e0:	210c5104 	addi	r4,r4,12612
     3e4:	00023780 	call	2378 <puts>
	}
}
     3e8:	e037883a 	mov	sp,fp
     3ec:	dfc00117 	ldw	ra,4(sp)
     3f0:	df000017 	ldw	fp,0(sp)
     3f4:	dec00204 	addi	sp,sp,8
     3f8:	f800283a 	ret

000003fc <_help>:

/**
 * Help Command Function
 * @param arg string to parse
 */
static void _help(char* arg){
     3fc:	deffe404 	addi	sp,sp,-112
     400:	dfc01b15 	stw	ra,108(sp)
     404:	df001a15 	stw	fp,104(sp)
     408:	df001a04 	addi	fp,sp,104
     40c:	e13fff15 	stw	r4,-4(fp)
	char cmd[5];
	char otherStr[80]; //large to prevent failure of size

	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
     410:	e1bfe904 	addi	r6,fp,-92
     414:	e1ffea44 	addi	r7,fp,-87
     418:	e13fff17 	ldw	r4,-4(fp)
     41c:	01400074 	movhi	r5,1
     420:	294c5904 	addi	r5,r5,12644
     424:	00027400 	call	2740 <sscanf>
     428:	e0bfe815 	stw	r2,-96(fp)
	if(matched == 2){
     42c:	e0bfe817 	ldw	r2,-96(fp)
     430:	10800098 	cmpnei	r2,r2,2
     434:	1000441e 	bne	r2,zero,548 <_help+0x14c>
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
     438:	e13fea44 	addi	r4,fp,-87
     43c:	01400074 	movhi	r5,1
     440:	294c5b04 	addi	r5,r5,12652
     444:	0002a800 	call	2a80 <strcmp>
     448:	1004c03a 	cmpne	r2,r2,zero
     44c:	10001c1e 	bne	r2,zero,4c0 <_help+0xc4>
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     450:	e03fe715 	stw	zero,-100(fp)
     454:	00001606 	br	4b0 <_help+0xb4>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
     458:	e0bfe717 	ldw	r2,-100(fp)
     45c:	00c00074 	movhi	r3,1
     460:	18dba604 	addi	r3,r3,28312
     464:	1085883a 	add	r2,r2,r2
     468:	1085883a 	add	r2,r2,r2
     46c:	10c5883a 	add	r2,r2,r3
     470:	10800017 	ldw	r2,0(r2)
     474:	11400017 	ldw	r5,0(r2)
     478:	e0bfe717 	ldw	r2,-100(fp)
     47c:	00c00074 	movhi	r3,1
     480:	18dba604 	addi	r3,r3,28312
     484:	1085883a 	add	r2,r2,r2
     488:	1085883a 	add	r2,r2,r2
     48c:	10c5883a 	add	r2,r2,r3
     490:	10800017 	ldw	r2,0(r2)
     494:	11800117 	ldw	r6,4(r2)
     498:	01000074 	movhi	r4,1
     49c:	210c5c04 	addi	r4,r4,12656
     4a0:	000223c0 	call	223c <printf>
	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
	if(matched == 2){
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     4a4:	e0bfe717 	ldw	r2,-100(fp)
     4a8:	10800044 	addi	r2,r2,1
     4ac:	e0bfe715 	stw	r2,-100(fp)
     4b0:	e0bfe717 	ldw	r2,-100(fp)
     4b4:	10800150 	cmplti	r2,r2,5
     4b8:	103fe71e 	bne	r2,zero,458 <_help+0x5c>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
     4bc:	00002606 	br	558 <_help+0x15c>
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     4c0:	e03fe615 	stw	zero,-104(fp)
     4c4:	00001906 	br	52c <_help+0x130>
				if(strcmp(otherStr,commandList[i]->name)==0){
     4c8:	e0bfe617 	ldw	r2,-104(fp)
     4cc:	00c00074 	movhi	r3,1
     4d0:	18dba604 	addi	r3,r3,28312
     4d4:	1085883a 	add	r2,r2,r2
     4d8:	1085883a 	add	r2,r2,r2
     4dc:	10c5883a 	add	r2,r2,r3
     4e0:	10800017 	ldw	r2,0(r2)
     4e4:	11400017 	ldw	r5,0(r2)
     4e8:	e13fea44 	addi	r4,fp,-87
     4ec:	0002a800 	call	2a80 <strcmp>
     4f0:	1004c03a 	cmpne	r2,r2,zero
     4f4:	10000a1e 	bne	r2,zero,520 <_help+0x124>
					printf(commandList[i]->helpInfo);
     4f8:	e0bfe617 	ldw	r2,-104(fp)
     4fc:	00c00074 	movhi	r3,1
     500:	18dba604 	addi	r3,r3,28312
     504:	1085883a 	add	r2,r2,r2
     508:	1085883a 	add	r2,r2,r2
     50c:	10c5883a 	add	r2,r2,r3
     510:	10800017 	ldw	r2,0(r2)
     514:	11000117 	ldw	r4,4(r2)
     518:	000223c0 	call	223c <printf>
					return; //ends early as the item was found
     51c:	00000e06 	br	558 <_help+0x15c>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     520:	e0bfe617 	ldw	r2,-104(fp)
     524:	10800044 	addi	r2,r2,1
     528:	e0bfe615 	stw	r2,-104(fp)
     52c:	e0bfe617 	ldw	r2,-104(fp)
     530:	10800150 	cmplti	r2,r2,5
     534:	103fe41e 	bne	r2,zero,4c8 <_help+0xcc>
				}
			}
		}

		//did not find command.
		printf("Command %s is not valid.\n",otherStr);
     538:	e17fea44 	addi	r5,fp,-87
     53c:	01000074 	movhi	r4,1
     540:	210c5e04 	addi	r4,r4,12664
     544:	000223c0 	call	223c <printf>
	}

	//print its own help info
	printf(HELP.helpInfo);
     548:	00800074 	movhi	r2,1
     54c:	108e3d04 	addi	r2,r2,14580
     550:	11000117 	ldw	r4,4(r2)
     554:	000223c0 	call	223c <printf>
}
     558:	e037883a 	mov	sp,fp
     55c:	dfc00117 	ldw	ra,4(sp)
     560:	df000017 	ldw	fp,0(sp)
     564:	dec00204 	addi	sp,sp,8
     568:	f800283a 	ret

0000056c <_pan>:

/**
 * Pans the servo by the input value provided
 * @param arg string to parse
 */
static void _pan(char* arg){
     56c:	defff604 	addi	sp,sp,-40
     570:	dfc00915 	stw	ra,36(sp)
     574:	df000815 	stw	fp,32(sp)
     578:	df000804 	addi	fp,sp,32
     57c:	e13fff15 	stw	r4,-4(fp)
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
     580:	e1bff904 	addi	r6,fp,-28
     584:	e1fffb04 	addi	r7,fp,-20
     588:	e13fff17 	ldw	r4,-4(fp)
     58c:	01400074 	movhi	r5,1
     590:	294c6504 	addi	r5,r5,12692
     594:	00027400 	call	2740 <sscanf>
     598:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
     59c:	e0bff817 	ldw	r2,-32(fp)
     5a0:	10800090 	cmplti	r2,r2,2
     5a4:	1000151e 	bne	r2,zero,5fc <_pan+0x90>
		if(servo_pan(pos) == -1){
     5a8:	e13ffb17 	ldw	r4,-20(fp)
     5ac:	0000e740 	call	e74 <servo_pan>
     5b0:	10bfffd8 	cmpnei	r2,r2,-1
     5b4:	1000141e 	bne	r2,zero,608 <_pan+0x9c>
			printf("Position ");
     5b8:	01000074 	movhi	r4,1
     5bc:	210c6704 	addi	r4,r4,12700
     5c0:	000223c0 	call	223c <printf>
			char temp[11]; *(temp+10) = '\0';
     5c4:	e0bffc04 	addi	r2,fp,-16
     5c8:	10800284 	addi	r2,r2,10
     5cc:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
     5d0:	e1bffb17 	ldw	r6,-20(fp)
     5d4:	e13ffc04 	addi	r4,fp,-16
     5d8:	01400074 	movhi	r5,1
     5dc:	294c6a04 	addi	r5,r5,12712
     5e0:	00025dc0 	call	25dc <sprintf>
			printf(temp);
     5e4:	e13ffc04 	addi	r4,fp,-16
     5e8:	000223c0 	call	223c <printf>
			printf(" is invalid. Enter between 0 and 175.\n");
     5ec:	01000074 	movhi	r4,1
     5f0:	210c6b04 	addi	r4,r4,12716
     5f4:	00023780 	call	2378 <puts>
     5f8:	00000306 	br	608 <_pan+0x9c>
		}
	}else{
		printf("Invalid command structure.\n");
     5fc:	01000074 	movhi	r4,1
     600:	210c7504 	addi	r4,r4,12756
     604:	00023780 	call	2378 <puts>
	}
}
     608:	e037883a 	mov	sp,fp
     60c:	dfc00117 	ldw	ra,4(sp)
     610:	df000017 	ldw	fp,0(sp)
     614:	dec00204 	addi	sp,sp,8
     618:	f800283a 	ret

0000061c <_tilt>:

/**
 * Tilts the servo by the input value provided
 * @param arg string to parse
 */
static void _tilt(char* arg){
     61c:	defff604 	addi	sp,sp,-40
     620:	dfc00915 	stw	ra,36(sp)
     624:	df000815 	stw	fp,32(sp)
     628:	df000804 	addi	fp,sp,32
     62c:	e13fff15 	stw	r4,-4(fp)
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
     630:	e1bff904 	addi	r6,fp,-28
     634:	e1fffb04 	addi	r7,fp,-20
     638:	e13fff17 	ldw	r4,-4(fp)
     63c:	01400074 	movhi	r5,1
     640:	294c6504 	addi	r5,r5,12692
     644:	00027400 	call	2740 <sscanf>
     648:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
     64c:	e0bff817 	ldw	r2,-32(fp)
     650:	10800090 	cmplti	r2,r2,2
     654:	1000151e 	bne	r2,zero,6ac <_tilt+0x90>
		if(servo_tilt(pos) == -1){
     658:	e13ffb17 	ldw	r4,-20(fp)
     65c:	0000ee40 	call	ee4 <servo_tilt>
     660:	10bfffd8 	cmpnei	r2,r2,-1
     664:	1000141e 	bne	r2,zero,6b8 <_tilt+0x9c>
			printf("Position ");
     668:	01000074 	movhi	r4,1
     66c:	210c6704 	addi	r4,r4,12700
     670:	000223c0 	call	223c <printf>
			char temp[11]; *(temp+10) = '\0';
     674:	e0bffc04 	addi	r2,fp,-16
     678:	10800284 	addi	r2,r2,10
     67c:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
     680:	e1bffb17 	ldw	r6,-20(fp)
     684:	e13ffc04 	addi	r4,fp,-16
     688:	01400074 	movhi	r5,1
     68c:	294c6a04 	addi	r5,r5,12712
     690:	00025dc0 	call	25dc <sprintf>
			printf(temp);
     694:	e13ffc04 	addi	r4,fp,-16
     698:	000223c0 	call	223c <printf>
			printf(" is invalid. Enter between 0 and 143.\n");
     69c:	01000074 	movhi	r4,1
     6a0:	210c7c04 	addi	r4,r4,12784
     6a4:	00023780 	call	2378 <puts>
     6a8:	00000306 	br	6b8 <_tilt+0x9c>
		}
	}else{
		printf("Invalid command structure.\n");
     6ac:	01000074 	movhi	r4,1
     6b0:	210c7504 	addi	r4,r4,12756
     6b4:	00023780 	call	2378 <puts>
	}
}
     6b8:	e037883a 	mov	sp,fp
     6bc:	dfc00117 	ldw	ra,4(sp)
     6c0:	df000017 	ldw	fp,0(sp)
     6c4:	dec00204 	addi	sp,sp,8
     6c8:	f800283a 	ret

000006cc <_generateList>:

/**
 * Generates the list of commands in an array of pointers so that commands
 * can be looked up based on their name when parsed.
 */
static void _generateList(){
     6cc:	deffff04 	addi	sp,sp,-4
     6d0:	df000015 	stw	fp,0(sp)
     6d4:	d839883a 	mov	fp,sp
	//setup command list
	commandList[0] = &RR;
     6d8:	00c00074 	movhi	r3,1
     6dc:	18dba604 	addi	r3,r3,28312
     6e0:	00800074 	movhi	r2,1
     6e4:	108e3704 	addi	r2,r2,14556
     6e8:	18800015 	stw	r2,0(r3)
	commandList[1] = &WR;
     6ec:	00c00074 	movhi	r3,1
     6f0:	18dba604 	addi	r3,r3,28312
     6f4:	00800074 	movhi	r2,1
     6f8:	108e3a04 	addi	r2,r2,14568
     6fc:	18800115 	stw	r2,4(r3)
	commandList[2] = &HELP;
     700:	00c00074 	movhi	r3,1
     704:	18dba604 	addi	r3,r3,28312
     708:	00800074 	movhi	r2,1
     70c:	108e3d04 	addi	r2,r2,14580
     710:	18800215 	stw	r2,8(r3)
	commandList[3] = &PAN;
     714:	00c00074 	movhi	r3,1
     718:	18dba604 	addi	r3,r3,28312
     71c:	00800074 	movhi	r2,1
     720:	108e4004 	addi	r2,r2,14592
     724:	18800315 	stw	r2,12(r3)
	commandList[4] = &TILT;
     728:	00c00074 	movhi	r3,1
     72c:	18dba604 	addi	r3,r3,28312
     730:	00800074 	movhi	r2,1
     734:	108e4304 	addi	r2,r2,14604
     738:	18800415 	stw	r2,16(r3)
}
     73c:	e037883a 	mov	sp,fp
     740:	df000017 	ldw	fp,0(sp)
     744:	dec00104 	addi	sp,sp,4
     748:	f800283a 	ret

0000074c <_printMem>:
/**
 * Prints out memory starting at the address for the count amount of bytes
 * @param address the address of memory to start printing
 * @param count the number of bytes to read and print
 */
static void _printMem(unsigned int address, unsigned int count){
     74c:	deffdf04 	addi	sp,sp,-132
     750:	dfc02015 	stw	ra,128(sp)
     754:	df001f15 	stw	fp,124(sp)
     758:	dc001e15 	stw	r16,120(sp)
     75c:	df001e04 	addi	fp,sp,120
     760:	e13ffe15 	stw	r4,-8(fp)
     764:	e17fff15 	stw	r5,-4(fp)

	//sanity check count for valid specification
	if(count < 1){
     768:	e0bfff17 	ldw	r2,-4(fp)
     76c:	1004c03a 	cmpne	r2,r2,zero
     770:	1000041e 	bne	r2,zero,784 <_printMem+0x38>
		printf("Error - Invalid Number of Addresses Specified.\n");
     774:	01000074 	movhi	r4,1
     778:	210c8604 	addi	r4,r4,12824
     77c:	00023780 	call	2378 <puts>
		return; //error case so leave early
     780:	00009006 	br	9c4 <_printMem+0x278>
	}else if(address + count < address){
     784:	e0fffe17 	ldw	r3,-8(fp)
     788:	e0bfff17 	ldw	r2,-4(fp)
     78c:	1887883a 	add	r3,r3,r2
     790:	e0bffe17 	ldw	r2,-8(fp)
     794:	1880032e 	bgeu	r3,r2,7a4 <_printMem+0x58>
		printf("Warning - Address Overflow.\n");
     798:	01000074 	movhi	r4,1
     79c:	210c9204 	addi	r4,r4,12872
     7a0:	00023780 	call	2378 <puts>
	//buffer allocation
	char buffer[80];
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
     7a4:	e0bfe704 	addi	r2,fp,-100
     7a8:	1009883a 	mov	r4,r2
     7ac:	01801404 	movi	r6,80
     7b0:	000b883a 	mov	r5,zero
     7b4:	00021a40 	call	21a4 <memset>
	strcat(buffer,"  Base   :");
     7b8:	e43fe704 	addi	r16,fp,-100
     7bc:	e13fe704 	addi	r4,fp,-100
     7c0:	0002bc80 	call	2bc8 <strlen>
     7c4:	8085883a 	add	r2,r16,r2
     7c8:	1007883a 	mov	r3,r2
     7cc:	00800804 	movi	r2,32
     7d0:	18800005 	stb	r2,0(r3)
     7d4:	00800804 	movi	r2,32
     7d8:	18800045 	stb	r2,1(r3)
     7dc:	00801084 	movi	r2,66
     7e0:	18800085 	stb	r2,2(r3)
     7e4:	00801844 	movi	r2,97
     7e8:	188000c5 	stb	r2,3(r3)
     7ec:	00801cc4 	movi	r2,115
     7f0:	18800105 	stb	r2,4(r3)
     7f4:	00801944 	movi	r2,101
     7f8:	18800145 	stb	r2,5(r3)
     7fc:	00800804 	movi	r2,32
     800:	18800185 	stb	r2,6(r3)
     804:	00800804 	movi	r2,32
     808:	188001c5 	stb	r2,7(r3)
     80c:	00800804 	movi	r2,32
     810:	18800205 	stb	r2,8(r3)
     814:	00800e84 	movi	r2,58
     818:	18800245 	stb	r2,9(r3)
     81c:	18000285 	stb	zero,10(r3)
	int i; for(i = 0; i < count && i < 16; ++i){
     820:	e03fe615 	stw	zero,-104(fp)
     824:	00000e06 	br	860 <_printMem+0x114>
		*(temp+3) = '\0';
     828:	e0bffb04 	addi	r2,fp,-20
     82c:	108000c4 	addi	r2,r2,3
     830:	10000005 	stb	zero,0(r2)
		sprintf(temp," +%x",i);
     834:	e13ffb04 	addi	r4,fp,-20
     838:	01400074 	movhi	r5,1
     83c:	294c9904 	addi	r5,r5,12900
     840:	e1bfe617 	ldw	r6,-104(fp)
     844:	00025dc0 	call	25dc <sprintf>
		strcat(buffer,temp);
     848:	e13fe704 	addi	r4,fp,-100
     84c:	e17ffb04 	addi	r5,fp,-20
     850:	00029100 	call	2910 <strcat>
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
	strcat(buffer,"  Base   :");
	int i; for(i = 0; i < count && i < 16; ++i){
     854:	e0bfe617 	ldw	r2,-104(fp)
     858:	10800044 	addi	r2,r2,1
     85c:	e0bfe615 	stw	r2,-104(fp)
     860:	e0ffe617 	ldw	r3,-104(fp)
     864:	e0bfff17 	ldw	r2,-4(fp)
     868:	1880032e 	bgeu	r3,r2,878 <_printMem+0x12c>
     86c:	e0bfe617 	ldw	r2,-104(fp)
     870:	10800410 	cmplti	r2,r2,16
     874:	103fec1e 	bne	r2,zero,828 <_printMem+0xdc>
		*(temp+3) = '\0';
		sprintf(temp," +%x",i);
		strcat(buffer,temp);
	}
	strcat(buffer,"\n");
     878:	e13fe704 	addi	r4,fp,-100
     87c:	01400074 	movhi	r5,1
     880:	294c9b04 	addi	r5,r5,12908
     884:	00029100 	call	2910 <strcat>
	printf(buffer);
     888:	e13fe704 	addi	r4,fp,-100
     88c:	000223c0 	call	223c <printf>

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
     890:	e03fe515 	stw	zero,-108(fp)
     894:	00004306 	br	9a4 <_printMem+0x258>
		memset(buffer,'\0',sizeof buffer);
     898:	e0bfe704 	addi	r2,fp,-100
     89c:	1009883a 	mov	r4,r2
     8a0:	01801404 	movi	r6,80
     8a4:	000b883a 	mov	r5,zero
     8a8:	00021a40 	call	21a4 <memset>

		//print address
		*(temp+10) = '\0';
     8ac:	e0bffb04 	addi	r2,fp,-20
     8b0:	10800284 	addi	r2,r2,10
     8b4:	10000005 	stb	zero,0(r2)
		sprintf(temp,"%08x :",address + j*16);
     8b8:	e0bfe517 	ldw	r2,-108(fp)
     8bc:	1004913a 	slli	r2,r2,4
     8c0:	1007883a 	mov	r3,r2
     8c4:	e0bffe17 	ldw	r2,-8(fp)
     8c8:	188d883a 	add	r6,r3,r2
     8cc:	e13ffb04 	addi	r4,fp,-20
     8d0:	01400074 	movhi	r5,1
     8d4:	294c9c04 	addi	r5,r5,12912
     8d8:	00025dc0 	call	25dc <sprintf>
		strcat(buffer,temp);
     8dc:	e13fe704 	addi	r4,fp,-100
     8e0:	e17ffb04 	addi	r5,fp,-20
     8e4:	00029100 	call	2910 <strcat>

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
     8e8:	e03fe415 	stw	zero,-112(fp)
     8ec:	00001a06 	br	958 <_printMem+0x20c>
			unsigned int addr = address + j*16+a;
     8f0:	e0bfe517 	ldw	r2,-108(fp)
     8f4:	1004913a 	slli	r2,r2,4
     8f8:	1007883a 	mov	r3,r2
     8fc:	e0bffe17 	ldw	r2,-8(fp)
     900:	1887883a 	add	r3,r3,r2
     904:	e0bfe417 	ldw	r2,-112(fp)
     908:	1885883a 	add	r2,r3,r2
     90c:	e0bfe315 	stw	r2,-116(fp)
			unsigned char val = *((unsigned char*)(addr | BYPASS_CACHE_FLAG));
     910:	e0bfe317 	ldw	r2,-116(fp)
     914:	10a00034 	orhi	r2,r2,32768
     918:	10800003 	ldbu	r2,0(r2)
     91c:	e0bfe205 	stb	r2,-120(fp)
			*(temp+3) = '\0';
     920:	e0bffb04 	addi	r2,fp,-20
     924:	108000c4 	addi	r2,r2,3
     928:	10000005 	stb	zero,0(r2)
			sprintf(temp," %02x",val);
     92c:	e1bfe203 	ldbu	r6,-120(fp)
     930:	e13ffb04 	addi	r4,fp,-20
     934:	01400074 	movhi	r5,1
     938:	294c9e04 	addi	r5,r5,12920
     93c:	00025dc0 	call	25dc <sprintf>
			strcat(buffer,temp);
     940:	e13fe704 	addi	r4,fp,-100
     944:	e17ffb04 	addi	r5,fp,-20
     948:	00029100 	call	2910 <strcat>
		*(temp+10) = '\0';
		sprintf(temp,"%08x :",address + j*16);
		strcat(buffer,temp);

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
     94c:	e0bfe417 	ldw	r2,-112(fp)
     950:	10800044 	addi	r2,r2,1
     954:	e0bfe415 	stw	r2,-112(fp)
     958:	e0bfe417 	ldw	r2,-112(fp)
     95c:	10800408 	cmpgei	r2,r2,16
     960:	1000071e 	bne	r2,zero,980 <_printMem+0x234>
     964:	e13fe417 	ldw	r4,-112(fp)
     968:	e0bfe517 	ldw	r2,-108(fp)
     96c:	1004913a 	slli	r2,r2,4
     970:	1007883a 	mov	r3,r2
     974:	e0bfff17 	ldw	r2,-4(fp)
     978:	10c5c83a 	sub	r2,r2,r3
     97c:	20bfdc36 	bltu	r4,r2,8f0 <_printMem+0x1a4>
			sprintf(temp," %02x",val);
			strcat(buffer,temp);
		}

		//send to serial device
		strcat(buffer,"\n");
     980:	e13fe704 	addi	r4,fp,-100
     984:	01400074 	movhi	r5,1
     988:	294c9b04 	addi	r5,r5,12908
     98c:	00029100 	call	2910 <strcat>
		printf(buffer);
     990:	e13fe704 	addi	r4,fp,-100
     994:	000223c0 	call	223c <printf>
	}
	strcat(buffer,"\n");
	printf(buffer);

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
     998:	e0bfe517 	ldw	r2,-108(fp)
     99c:	10800044 	addi	r2,r2,1
     9a0:	e0bfe515 	stw	r2,-108(fp)
     9a4:	e0ffe517 	ldw	r3,-108(fp)
     9a8:	e0bfff17 	ldw	r2,-4(fp)
     9ac:	10bfffc4 	addi	r2,r2,-1
     9b0:	1004d13a 	srli	r2,r2,4
     9b4:	10800044 	addi	r2,r2,1
     9b8:	18bfb736 	bltu	r3,r2,898 <_printMem+0x14c>
		strcat(buffer,"\n");
		printf(buffer);
	}

	//send final character to clean up display
	printf("\n");
     9bc:	01000284 	movi	r4,10
     9c0:	00022b40 	call	22b4 <putchar>
}
     9c4:	e037883a 	mov	sp,fp
     9c8:	dfc00217 	ldw	ra,8(sp)
     9cc:	df000117 	ldw	fp,4(sp)
     9d0:	dc000017 	ldw	r16,0(sp)
     9d4:	dec00304 	addi	sp,sp,12
     9d8:	f800283a 	ret

000009dc <PWM_setDutyCycle_A>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_A(int dutyCycle){
     9dc:	defffc04 	addi	sp,sp,-16
     9e0:	df000315 	stw	fp,12(sp)
     9e4:	df000304 	addi	fp,sp,12
     9e8:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
     9ec:	e0bffe17 	ldw	r2,-8(fp)
     9f0:	10801948 	cmpgei	r2,r2,101
     9f4:	1000121e 	bne	r2,zero,a40 <PWM_setDutyCycle_A+0x64>
     9f8:	e0bffe17 	ldw	r2,-8(fp)
     9fc:	1004803a 	cmplt	r2,r2,zero
     a00:	10000f1e 	bne	r2,zero,a40 <PWM_setDutyCycle_A+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
     a04:	e0bffe17 	ldw	r2,-8(fp)
     a08:	10803224 	muli	r2,r2,200
     a0c:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
     a10:	e0bffd17 	ldw	r2,-12(fp)
     a14:	10938818 	cmpnei	r2,r2,20000
     a18:	1000031e 	bne	r2,zero,a28 <PWM_setDutyCycle_A+0x4c>
			duty--;
     a1c:	e0bffd17 	ldw	r2,-12(fp)
     a20:	10bfffc4 	addi	r2,r2,-1
     a24:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRA = duty;
     a28:	00a02034 	movhi	r2,32896
     a2c:	10880a04 	addi	r2,r2,8232
     a30:	e0fffd17 	ldw	r3,-12(fp)
     a34:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1; // return an error
	}
	// no error
	return 0;
     a38:	e03fff15 	stw	zero,-4(fp)
     a3c:	00000206 	br	a48 <PWM_setDutyCycle_A+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRA = duty;
	} else {
		return -1; // return an error
     a40:	00bfffc4 	movi	r2,-1
     a44:	e0bfff15 	stw	r2,-4(fp)
     a48:	e0bfff17 	ldw	r2,-4(fp)
	}
	// no error
	return 0;
}
     a4c:	e037883a 	mov	sp,fp
     a50:	df000017 	ldw	fp,0(sp)
     a54:	dec00104 	addi	sp,sp,4
     a58:	f800283a 	ret

00000a5c <PWM_setDutyCycle_B>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_B(int dutyCycle){
     a5c:	defffc04 	addi	sp,sp,-16
     a60:	df000315 	stw	fp,12(sp)
     a64:	df000304 	addi	fp,sp,12
     a68:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
     a6c:	e0bffe17 	ldw	r2,-8(fp)
     a70:	10801948 	cmpgei	r2,r2,101
     a74:	1000121e 	bne	r2,zero,ac0 <PWM_setDutyCycle_B+0x64>
     a78:	e0bffe17 	ldw	r2,-8(fp)
     a7c:	1004803a 	cmplt	r2,r2,zero
     a80:	10000f1e 	bne	r2,zero,ac0 <PWM_setDutyCycle_B+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
     a84:	e0bffe17 	ldw	r2,-8(fp)
     a88:	10803224 	muli	r2,r2,200
     a8c:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
     a90:	e0bffd17 	ldw	r2,-12(fp)
     a94:	10938818 	cmpnei	r2,r2,20000
     a98:	1000031e 	bne	r2,zero,aa8 <PWM_setDutyCycle_B+0x4c>
			duty--;
     a9c:	e0bffd17 	ldw	r2,-12(fp)
     aa0:	10bfffc4 	addi	r2,r2,-1
     aa4:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRB = duty;
     aa8:	00a02034 	movhi	r2,32896
     aac:	10880a84 	addi	r2,r2,8234
     ab0:	e0fffd17 	ldw	r3,-12(fp)
     ab4:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1;
	}
	return 0;
     ab8:	e03fff15 	stw	zero,-4(fp)
     abc:	00000206 	br	ac8 <PWM_setDutyCycle_B+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRB = duty;
	} else {
		return -1;
     ac0:	00bfffc4 	movi	r2,-1
     ac4:	e0bfff15 	stw	r2,-4(fp)
     ac8:	e0bfff17 	ldw	r2,-4(fp)
	}
	return 0;
}
     acc:	e037883a 	mov	sp,fp
     ad0:	df000017 	ldw	fp,0(sp)
     ad4:	dec00104 	addi	sp,sp,4
     ad8:	f800283a 	ret

00000adc <PWM_writeOCRA>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRA(unsigned int value){
     adc:	defffd04 	addi	sp,sp,-12
     ae0:	df000215 	stw	fp,8(sp)
     ae4:	df000204 	addi	fp,sp,8
     ae8:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
     aec:	e0bffe17 	ldw	r2,-8(fp)
     af0:	10938870 	cmpltui	r2,r2,20001
     af4:	1000031e 	bne	r2,zero,b04 <PWM_writeOCRA+0x28>
		return -1;
     af8:	00bfffc4 	movi	r2,-1
     afc:	e0bfff15 	stw	r2,-4(fp)
     b00:	00000506 	br	b18 <PWM_writeOCRA+0x3c>
	}
	*OCRA = value;
     b04:	00a02034 	movhi	r2,32896
     b08:	10880a04 	addi	r2,r2,8232
     b0c:	e0fffe17 	ldw	r3,-8(fp)
     b10:	10c0000d 	sth	r3,0(r2)
	return 0;
     b14:	e03fff15 	stw	zero,-4(fp)
     b18:	e0bfff17 	ldw	r2,-4(fp)
}
     b1c:	e037883a 	mov	sp,fp
     b20:	df000017 	ldw	fp,0(sp)
     b24:	dec00104 	addi	sp,sp,4
     b28:	f800283a 	ret

00000b2c <PWM_writeOCRB>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRB(unsigned int value){
     b2c:	defffd04 	addi	sp,sp,-12
     b30:	df000215 	stw	fp,8(sp)
     b34:	df000204 	addi	fp,sp,8
     b38:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
     b3c:	e0bffe17 	ldw	r2,-8(fp)
     b40:	10938870 	cmpltui	r2,r2,20001
     b44:	1000031e 	bne	r2,zero,b54 <PWM_writeOCRB+0x28>
		return -1;
     b48:	00bfffc4 	movi	r2,-1
     b4c:	e0bfff15 	stw	r2,-4(fp)
     b50:	00000506 	br	b68 <PWM_writeOCRB+0x3c>
	}
	*OCRB = value;
     b54:	00a02034 	movhi	r2,32896
     b58:	10880a84 	addi	r2,r2,8234
     b5c:	e0fffe17 	ldw	r3,-8(fp)
     b60:	10c0000d 	sth	r3,0(r2)
	return 0;
     b64:	e03fff15 	stw	zero,-4(fp)
     b68:	e0bfff17 	ldw	r2,-4(fp)
}
     b6c:	e037883a 	mov	sp,fp
     b70:	df000017 	ldw	fp,0(sp)
     b74:	dec00104 	addi	sp,sp,4
     b78:	f800283a 	ret

00000b7c <PWM_readOCRA>:

/**
 * Reads from the OCRA register in counts.
 * @return count value.
 */
int PWM_readOCRA(){
     b7c:	deffff04 	addi	sp,sp,-4
     b80:	df000015 	stw	fp,0(sp)
     b84:	d839883a 	mov	fp,sp
	return *OCRA;
     b88:	00a02034 	movhi	r2,32896
     b8c:	10880a04 	addi	r2,r2,8232
     b90:	1080000b 	ldhu	r2,0(r2)
     b94:	10bfffcc 	andi	r2,r2,65535
}
     b98:	e037883a 	mov	sp,fp
     b9c:	df000017 	ldw	fp,0(sp)
     ba0:	dec00104 	addi	sp,sp,4
     ba4:	f800283a 	ret

00000ba8 <PWM_readOCRB>:

/**
 * Reads from the OCRB register in counts.
 * @return count value.
 */
int PWM_readOCRB(){
     ba8:	deffff04 	addi	sp,sp,-4
     bac:	df000015 	stw	fp,0(sp)
     bb0:	d839883a 	mov	fp,sp
	return *OCRB;
     bb4:	00a02034 	movhi	r2,32896
     bb8:	10880a84 	addi	r2,r2,8234
     bbc:	1080000b 	ldhu	r2,0(r2)
     bc0:	10bfffcc 	andi	r2,r2,65535
}
     bc4:	e037883a 	mov	sp,fp
     bc8:	df000017 	ldw	fp,0(sp)
     bcc:	dec00104 	addi	sp,sp,4
     bd0:	f800283a 	ret

00000bd4 <uart_init>:
 * Sets UART for no interrupts, sets baud rate to specified
 * @param baudRate the baud to transmit at
 * @param UART pointer to the hardware device to interface with
 * @return -1 if error, 0 otherwise
 */
int uart_init(uint16_t baudRate, struct UART_Hardware volatile * UART){
     bd4:	defffa04 	addi	sp,sp,-24
     bd8:	df000515 	stw	fp,20(sp)
     bdc:	df000504 	addi	fp,sp,20
     be0:	e17ffd15 	stw	r5,-12(fp)
     be4:	e13ffc0d 	sth	r4,-16(fp)

	// select the baud input as hardware signals
	uint8_t baud;
	switch(baudRate){
     be8:	e0bffc0b 	ldhu	r2,-16(fp)
     bec:	e0bfff15 	stw	r2,-4(fp)
     bf0:	e0ffff17 	ldw	r3,-4(fp)
     bf4:	18825820 	cmpeqi	r2,r3,2400
     bf8:	1000291e 	bne	r2,zero,ca0 <uart_init+0xcc>
     bfc:	e0ffff17 	ldw	r3,-4(fp)
     c00:	18825848 	cmpgei	r2,r3,2401
     c04:	10000a1e 	bne	r2,zero,c30 <uart_init+0x5c>
     c08:	e0ffff17 	ldw	r3,-4(fp)
     c0c:	18809620 	cmpeqi	r2,r3,600
     c10:	1000291e 	bne	r2,zero,cb8 <uart_init+0xe4>
     c14:	e0ffff17 	ldw	r3,-4(fp)
     c18:	18812c20 	cmpeqi	r2,r3,1200
     c1c:	1000231e 	bne	r2,zero,cac <uart_init+0xd8>
     c20:	e0ffff17 	ldw	r3,-4(fp)
     c24:	18804b20 	cmpeqi	r2,r3,300
     c28:	1000261e 	bne	r2,zero,cc4 <uart_init+0xf0>
     c2c:	00002806 	br	cd0 <uart_init+0xfc>
     c30:	e0ffff17 	ldw	r3,-4(fp)
     c34:	18896020 	cmpeqi	r2,r3,9600
     c38:	1000131e 	bne	r2,zero,c88 <uart_init+0xb4>
     c3c:	e0ffff17 	ldw	r3,-4(fp)
     c40:	18896048 	cmpgei	r2,r3,9601
     c44:	1000041e 	bne	r2,zero,c58 <uart_init+0x84>
     c48:	e0ffff17 	ldw	r3,-4(fp)
     c4c:	1884b020 	cmpeqi	r2,r3,4800
     c50:	1000101e 	bne	r2,zero,c94 <uart_init+0xc0>
     c54:	00001e06 	br	cd0 <uart_init+0xfc>
     c58:	e0ffff17 	ldw	r3,-4(fp)
     c5c:	1892c020 	cmpeqi	r2,r3,19200
     c60:	1000061e 	bne	r2,zero,c7c <uart_init+0xa8>
     c64:	00a58014 	movui	r2,38400
     c68:	e0ffff17 	ldw	r3,-4(fp)
     c6c:	18800126 	beq	r3,r2,c74 <uart_init+0xa0>
     c70:	00001706 	br	cd0 <uart_init+0xfc>
		case 38400:
						baud = 0x0;
     c74:	e03ffb05 	stb	zero,-20(fp)
						break;
     c78:	00001806 	br	cdc <uart_init+0x108>
		case 19200:
						baud = 0x1;
     c7c:	00800044 	movi	r2,1
     c80:	e0bffb05 	stb	r2,-20(fp)
						break;
     c84:	00001506 	br	cdc <uart_init+0x108>
		case 9600:
						baud = 0x2;
     c88:	00800084 	movi	r2,2
     c8c:	e0bffb05 	stb	r2,-20(fp)
						break;
     c90:	00001206 	br	cdc <uart_init+0x108>
		case 4800:
						baud = 0x3;
     c94:	008000c4 	movi	r2,3
     c98:	e0bffb05 	stb	r2,-20(fp)
						break;
     c9c:	00000f06 	br	cdc <uart_init+0x108>
		case 2400:
						baud = 0x4;
     ca0:	00800104 	movi	r2,4
     ca4:	e0bffb05 	stb	r2,-20(fp)
						break;
     ca8:	00000c06 	br	cdc <uart_init+0x108>
		case 1200:
						baud = 0x5;
     cac:	00800144 	movi	r2,5
     cb0:	e0bffb05 	stb	r2,-20(fp)
						break;
     cb4:	00000906 	br	cdc <uart_init+0x108>
		case 600:
						baud = 0x6;
     cb8:	00800184 	movi	r2,6
     cbc:	e0bffb05 	stb	r2,-20(fp)
						break;
     cc0:	00000606 	br	cdc <uart_init+0x108>
		case 300:
						baud = 0x7;
     cc4:	008001c4 	movi	r2,7
     cc8:	e0bffb05 	stb	r2,-20(fp)
						break;
     ccc:	00000306 	br	cdc <uart_init+0x108>
		default:
						// there is an error since input is invalid
						return -1;
     cd0:	00bfffc4 	movi	r2,-1
     cd4:	e0bffe15 	stw	r2,-8(fp)
     cd8:	00000406 	br	cec <uart_init+0x118>

	}

	// No interrupts, 38500 Baud
	(UART->UCONTROL) = baud;
     cdc:	e0fffd17 	ldw	r3,-12(fp)
     ce0:	e0bffb03 	ldbu	r2,-20(fp)
     ce4:	18800085 	stb	r2,2(r3)

	return 0;
     ce8:	e03ffe15 	stw	zero,-8(fp)
     cec:	e0bffe17 	ldw	r2,-8(fp)
}
     cf0:	e037883a 	mov	sp,fp
     cf4:	df000017 	ldw	fp,0(sp)
     cf8:	dec00104 	addi	sp,sp,4
     cfc:	f800283a 	ret

00000d00 <uart_putch>:
 * stuck in a loop, for polling, until the transmit register is ready for next
 * byte.
 * @param x character to send out.
 * @param UART Hardware register pointer
 */
void uart_putch(char x, struct UART_Hardware volatile * UART){
     d00:	defffd04 	addi	sp,sp,-12
     d04:	df000215 	stw	fp,8(sp)
     d08:	df000204 	addi	fp,sp,8
     d0c:	e17fff15 	stw	r5,-4(fp)
     d10:	e13ffe05 	stb	r4,-8(fp)

	// Poll till char is received
	while(((UART -> USTATUS) & TDRE) == 0);
     d14:	e0bfff17 	ldw	r2,-4(fp)
     d18:	10800043 	ldbu	r2,1(r2)
     d1c:	10803fcc 	andi	r2,r2,255
     d20:	1080201c 	xori	r2,r2,128
     d24:	10bfe004 	addi	r2,r2,-128
     d28:	1004403a 	cmpge	r2,r2,zero
     d2c:	103ff91e 	bne	r2,zero,d14 <uart_putch+0x14>

	// Write the character
	(UART -> UDR) = x;
     d30:	e0ffff17 	ldw	r3,-4(fp)
     d34:	e0bffe03 	ldbu	r2,-8(fp)
     d38:	18800005 	stb	r2,0(r3)
}
     d3c:	e037883a 	mov	sp,fp
     d40:	df000017 	ldw	fp,0(sp)
     d44:	dec00104 	addi	sp,sp,4
     d48:	f800283a 	ret

00000d4c <uart_getch>:
 * Gets a character that was received from the UART. Caution: WIll be stuck in
 * a loop, due to polling, until a character is received.
 * @param UART Hardware register pointer
 * @return character received by the UART in ASCII encoding.
 */
char uart_getch(struct UART_Hardware volatile * UART){
     d4c:	defffd04 	addi	sp,sp,-12
     d50:	df000215 	stw	fp,8(sp)
     d54:	df000204 	addi	fp,sp,8
     d58:	e13fff15 	stw	r4,-4(fp)

	// Temporary memory
	char x;

	//Wait till transmitter ready
	while(((UART -> USTATUS) & RDRF) == 0);
     d5c:	e0bfff17 	ldw	r2,-4(fp)
     d60:	10800043 	ldbu	r2,1(r2)
     d64:	10803fcc 	andi	r2,r2,255
     d68:	1080100c 	andi	r2,r2,64
     d6c:	1005003a 	cmpeq	r2,r2,zero
     d70:	103ffa1e 	bne	r2,zero,d5c <uart_getch+0x10>

	// Read the character
	x = (UART -> UDR);
     d74:	e0bfff17 	ldw	r2,-4(fp)
     d78:	10800003 	ldbu	r2,0(r2)
     d7c:	e0bffe05 	stb	r2,-8(fp)
	return x;
     d80:	e0bffe07 	ldb	r2,-8(fp)
}
     d84:	e037883a 	mov	sp,fp
     d88:	df000017 	ldw	fp,0(sp)
     d8c:	dec00104 	addi	sp,sp,4
     d90:	f800283a 	ret

00000d94 <uart_printStr>:
 * Temporary serial function using the jtag_uart for debugging.
 * This function signature will be migrated to the UART module
 * in a later milestone.
 * @param str passes a string through the UART
 */
void uart_printStr(char* str){
     d94:	defffd04 	addi	sp,sp,-12
     d98:	dfc00215 	stw	ra,8(sp)
     d9c:	df000115 	stw	fp,4(sp)
     da0:	df000104 	addi	fp,sp,4
     da4:	e13fff15 	stw	r4,-4(fp)
	//todo replace with UART in future lab
	printf("%s",str);
     da8:	01000074 	movhi	r4,1
     dac:	210ca004 	addi	r4,r4,12928
     db0:	e17fff17 	ldw	r5,-4(fp)
     db4:	000223c0 	call	223c <printf>
}
     db8:	e037883a 	mov	sp,fp
     dbc:	dfc00117 	ldw	ra,4(sp)
     dc0:	df000017 	ldw	fp,0(sp)
     dc4:	dec00204 	addi	sp,sp,8
     dc8:	f800283a 	ret

00000dcc <uart_readStr>:
 * @param inputStr String buffer that will be filled by the
 *        function until either a new line character is
 *        received or length is reached.
 * @param length size of the buffer.
 */
void uart_readStr(char* inputStr, unsigned int length){
     dcc:	defffb04 	addi	sp,sp,-20
     dd0:	dfc00415 	stw	ra,16(sp)
     dd4:	df000315 	stw	fp,12(sp)
     dd8:	df000304 	addi	fp,sp,12
     ddc:	e13ffe15 	stw	r4,-8(fp)
     de0:	e17fff15 	stw	r5,-4(fp)
	//todo replace with UART in future lab
	if(fgets(inputStr,length, stdin) != NULL){
     de4:	e17fff17 	ldw	r5,-4(fp)
     de8:	00800074 	movhi	r2,1
     dec:	1094d804 	addi	r2,r2,21344
     df0:	10800017 	ldw	r2,0(r2)
     df4:	11800117 	ldw	r6,4(r2)
     df8:	e13ffe17 	ldw	r4,-8(fp)
     dfc:	000147c0 	call	147c <fgets>
     e00:	1005003a 	cmpeq	r2,r2,zero
     e04:	1000091e 	bne	r2,zero,e2c <uart_readStr+0x60>
		char* newline = strchr(inputStr,'\n');
     e08:	e13ffe17 	ldw	r4,-8(fp)
     e0c:	01400284 	movi	r5,10
     e10:	00029a00 	call	29a0 <strchr>
     e14:	e0bffd15 	stw	r2,-12(fp)
		if(newline != NULL){
     e18:	e0bffd17 	ldw	r2,-12(fp)
     e1c:	1005003a 	cmpeq	r2,r2,zero
     e20:	1000021e 	bne	r2,zero,e2c <uart_readStr+0x60>
			*newline = '\0';
     e24:	e0bffd17 	ldw	r2,-12(fp)
     e28:	10000005 	stb	zero,0(r2)
		}
	}
}
     e2c:	e037883a 	mov	sp,fp
     e30:	dfc00117 	ldw	ra,4(sp)
     e34:	df000017 	ldw	fp,0(sp)
     e38:	dec00204 	addi	sp,sp,8
     e3c:	f800283a 	ret

00000e40 <servo_init>:
//=============================================================================

/**
 * Sets up the PWM to move the servos to center position
 */
void servo_init(){
     e40:	defffe04 	addi	sp,sp,-8
     e44:	dfc00115 	stw	ra,4(sp)
     e48:	df000015 	stw	fp,0(sp)
     e4c:	d839883a 	mov	fp,sp
	servo_pan(PAN_MAX/2);
     e50:	010015c4 	movi	r4,87
     e54:	0000e740 	call	e74 <servo_pan>
	servo_tilt(TILT_MAX/2+1);
     e58:	01001204 	movi	r4,72
     e5c:	0000ee40 	call	ee4 <servo_tilt>
}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <servo_pan>:
 * of the camera. These values should cause a full range of travel from far
 * left to far right.
 * @param col the x tracking position
 * @return -1 if invalid input, else 0
 */
int servo_pan(int col){
     e74:	defffc04 	addi	sp,sp,-16
     e78:	dfc00315 	stw	ra,12(sp)
     e7c:	df000215 	stw	fp,8(sp)
     e80:	df000204 	addi	fp,sp,8
     e84:	e13ffe15 	stw	r4,-8(fp)
	if(col < PAN_MIN || col > PAN_MAX){
     e88:	e0bffe17 	ldw	r2,-8(fp)
     e8c:	1004803a 	cmplt	r2,r2,zero
     e90:	1000031e 	bne	r2,zero,ea0 <servo_pan+0x2c>
     e94:	e0bffe17 	ldw	r2,-8(fp)
     e98:	10802c10 	cmplti	r2,r2,176
     e9c:	1000031e 	bne	r2,zero,eac <servo_pan+0x38>
		return -1;
     ea0:	00bfffc4 	movi	r2,-1
     ea4:	e0bfff15 	stw	r2,-4(fp)
     ea8:	00000806 	br	ecc <servo_pan+0x58>
	}
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(col));
     eac:	e0bffe17 	ldw	r2,-8(fp)
     eb0:	11001ae4 	muli	r4,r2,107
     eb4:	01400284 	movi	r5,10
     eb8:	00012640 	call	1264 <__divsi3>
     ebc:	10807f84 	addi	r2,r2,510
     ec0:	1009883a 	mov	r4,r2
     ec4:	0000adc0 	call	adc <PWM_writeOCRA>
	return 0;
     ec8:	e03fff15 	stw	zero,-4(fp)
     ecc:	e0bfff17 	ldw	r2,-4(fp)
}
     ed0:	e037883a 	mov	sp,fp
     ed4:	dfc00117 	ldw	ra,4(sp)
     ed8:	df000017 	ldw	fp,0(sp)
     edc:	dec00204 	addi	sp,sp,8
     ee0:	f800283a 	ret

00000ee4 <servo_tilt>:
 * the camera. These values should cause a full range of travel from top to
 * bottom.
 * @param row the y tracking position
 * @return -1 if invalid input, else 0
 */
int servo_tilt(int row){
     ee4:	defffc04 	addi	sp,sp,-16
     ee8:	dfc00315 	stw	ra,12(sp)
     eec:	df000215 	stw	fp,8(sp)
     ef0:	df000204 	addi	fp,sp,8
     ef4:	e13ffe15 	stw	r4,-8(fp)
	if(row < TILT_MIN || row > TILT_MAX){
     ef8:	e0bffe17 	ldw	r2,-8(fp)
     efc:	1004803a 	cmplt	r2,r2,zero
     f00:	1000031e 	bne	r2,zero,f10 <servo_tilt+0x2c>
     f04:	e0bffe17 	ldw	r2,-8(fp)
     f08:	10802410 	cmplti	r2,r2,144
     f0c:	1000031e 	bne	r2,zero,f1c <servo_tilt+0x38>
		return -1;
     f10:	00bfffc4 	movi	r2,-1
     f14:	e0bfff15 	stw	r2,-4(fp)
     f18:	00000806 	br	f3c <servo_tilt+0x58>
	}
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(row));
     f1c:	e0bffe17 	ldw	r2,-8(fp)
     f20:	11001164 	muli	r4,r2,69
     f24:	01400284 	movi	r5,10
     f28:	00012640 	call	1264 <__divsi3>
     f2c:	1080fdc4 	addi	r2,r2,1015
     f30:	1009883a 	mov	r4,r2
     f34:	0000b2c0 	call	b2c <PWM_writeOCRB>
	return 0;
     f38:	e03fff15 	stw	zero,-4(fp)
     f3c:	e0bfff17 	ldw	r2,-4(fp)
}
     f40:	e037883a 	mov	sp,fp
     f44:	dfc00117 	ldw	ra,4(sp)
     f48:	df000017 	ldw	fp,0(sp)
     f4c:	dec00204 	addi	sp,sp,8
     f50:	f800283a 	ret

00000f54 <getServoX>:

/**
 * Gets the current pan location
 * @return absolute position of servo.
 */
int getServoX(){
     f54:	defffe04 	addi	sp,sp,-8
     f58:	dfc00115 	stw	ra,4(sp)
     f5c:	df000015 	stw	fp,0(sp)
     f60:	d839883a 	mov	fp,sp
	//todo use later
	return OCR_VALUE_TO_PAN_POS(PWM_readOCRA());
     f64:	0000b7c0 	call	b7c <PWM_readOCRA>
     f68:	108002a4 	muli	r2,r2,10
     f6c:	113b0504 	addi	r4,r2,-5100
     f70:	01401ac4 	movi	r5,107
     f74:	00012640 	call	1264 <__divsi3>
}
     f78:	e037883a 	mov	sp,fp
     f7c:	dfc00117 	ldw	ra,4(sp)
     f80:	df000017 	ldw	fp,0(sp)
     f84:	dec00204 	addi	sp,sp,8
     f88:	f800283a 	ret

00000f8c <setServoX>:

/**
 * Sets the relative pan location. Will stop at limit of range.
 * @param xpos position to add to current position.
 */
void setServoX(int xpos){
     f8c:	defffb04 	addi	sp,sp,-20
     f90:	dfc00415 	stw	ra,16(sp)
     f94:	df000315 	stw	fp,12(sp)
     f98:	df000304 	addi	fp,sp,12
     f9c:	e13ffe15 	stw	r4,-8(fp)
	//todo use later
	int pos = getServoX() + xpos;
     fa0:	0000f540 	call	f54 <getServoX>
     fa4:	1007883a 	mov	r3,r2
     fa8:	e0bffe17 	ldw	r2,-8(fp)
     fac:	1885883a 	add	r2,r3,r2
     fb0:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > PAN_MAX) ? (PAN_MAX) : ((pos < PAN_MIN) ? PAN_MIN : pos);
     fb4:	e0bffd17 	ldw	r2,-12(fp)
     fb8:	10802c08 	cmpgei	r2,r2,176
     fbc:	1000071e 	bne	r2,zero,fdc <setServoX+0x50>
     fc0:	e0bffd17 	ldw	r2,-12(fp)
     fc4:	e0bfff15 	stw	r2,-4(fp)
     fc8:	e0ffff17 	ldw	r3,-4(fp)
     fcc:	1804403a 	cmpge	r2,r3,zero
     fd0:	1000041e 	bne	r2,zero,fe4 <setServoX+0x58>
     fd4:	e03fff15 	stw	zero,-4(fp)
     fd8:	00000206 	br	fe4 <setServoX+0x58>
     fdc:	00802bc4 	movi	r2,175
     fe0:	e0bfff15 	stw	r2,-4(fp)
     fe4:	e0ffff17 	ldw	r3,-4(fp)
     fe8:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(pos));
     fec:	e0bffd17 	ldw	r2,-12(fp)
     ff0:	11001ae4 	muli	r4,r2,107
     ff4:	01400284 	movi	r5,10
     ff8:	00012640 	call	1264 <__divsi3>
     ffc:	10807f84 	addi	r2,r2,510
    1000:	1009883a 	mov	r4,r2
    1004:	0000adc0 	call	adc <PWM_writeOCRA>
}
    1008:	e037883a 	mov	sp,fp
    100c:	dfc00117 	ldw	ra,4(sp)
    1010:	df000017 	ldw	fp,0(sp)
    1014:	dec00204 	addi	sp,sp,8
    1018:	f800283a 	ret

0000101c <getServoY>:

/**
 * Gets the current tilt location.
 * @return absolute position of servo.
 */
int getServoY(){
    101c:	defffe04 	addi	sp,sp,-8
    1020:	dfc00115 	stw	ra,4(sp)
    1024:	df000015 	stw	fp,0(sp)
    1028:	d839883a 	mov	fp,sp
	//todo use later
	return OCR_VALUE_TO_TILT_POS(PWM_readOCRB());
    102c:	0000ba80 	call	ba8 <PWM_readOCRB>
    1030:	108002a4 	muli	r2,r2,10
    1034:	11361684 	addi	r4,r2,-10150
    1038:	01401144 	movi	r5,69
    103c:	00012640 	call	1264 <__divsi3>
}
    1040:	e037883a 	mov	sp,fp
    1044:	dfc00117 	ldw	ra,4(sp)
    1048:	df000017 	ldw	fp,0(sp)
    104c:	dec00204 	addi	sp,sp,8
    1050:	f800283a 	ret

00001054 <setServoY>:

/**
 * Sets the relative tilt location. Will stop at limit of range.
 * @param ypos position to add to current position.
 */
void setServoY(int ypos){
    1054:	defffb04 	addi	sp,sp,-20
    1058:	dfc00415 	stw	ra,16(sp)
    105c:	df000315 	stw	fp,12(sp)
    1060:	df000304 	addi	fp,sp,12
    1064:	e13ffe15 	stw	r4,-8(fp)
	//todo use later
	int pos = getServoY() + ypos;
    1068:	000101c0 	call	101c <getServoY>
    106c:	1007883a 	mov	r3,r2
    1070:	e0bffe17 	ldw	r2,-8(fp)
    1074:	1885883a 	add	r2,r3,r2
    1078:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > TILT_MAX) ? (TILT_MAX) : ((pos < TILT_MIN) ? TILT_MIN : pos);
    107c:	e0bffd17 	ldw	r2,-12(fp)
    1080:	10802408 	cmpgei	r2,r2,144
    1084:	1000071e 	bne	r2,zero,10a4 <setServoY+0x50>
    1088:	e0bffd17 	ldw	r2,-12(fp)
    108c:	e0bfff15 	stw	r2,-4(fp)
    1090:	e0ffff17 	ldw	r3,-4(fp)
    1094:	1804403a 	cmpge	r2,r3,zero
    1098:	1000041e 	bne	r2,zero,10ac <setServoY+0x58>
    109c:	e03fff15 	stw	zero,-4(fp)
    10a0:	00000206 	br	10ac <setServoY+0x58>
    10a4:	008023c4 	movi	r2,143
    10a8:	e0bfff15 	stw	r2,-4(fp)
    10ac:	e0ffff17 	ldw	r3,-4(fp)
    10b0:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRA(TILT_POS_TO_OCR_VALUE(pos));
    10b4:	e0bffd17 	ldw	r2,-12(fp)
    10b8:	11001164 	muli	r4,r2,69
    10bc:	01400284 	movi	r5,10
    10c0:	00012640 	call	1264 <__divsi3>
    10c4:	1080fdc4 	addi	r2,r2,1015
    10c8:	1009883a 	mov	r4,r2
    10cc:	0000adc0 	call	adc <PWM_writeOCRA>
}
    10d0:	e037883a 	mov	sp,fp
    10d4:	dfc00117 	ldw	ra,4(sp)
    10d8:	df000017 	ldw	fp,0(sp)
    10dc:	dec00204 	addi	sp,sp,8
    10e0:	f800283a 	ret

000010e4 <main>:
/**
 * main will run the serial command line input to get information from user
 * and enact the commands.
 * @return does not actually return (infinite loop)
 */
int main(){
    10e4:	deffd204 	addi	sp,sp,-184
    10e8:	dfc02d15 	stw	ra,180(sp)
    10ec:	df002c15 	stw	fp,176(sp)
    10f0:	df002c04 	addi	fp,sp,176

	//module initialization
	servo_init();
    10f4:	0000e400 	call	e40 <servo_init>
	cmd_init();
    10f8:	00002000 	call	200 <cmd_init>
    10fc:	00000006 	br	1100 <main+0x1c>
	char cmdStr[80]; //must be same size for worst case parsing

	//run input loop from serial input to command the controller
	while(1){
		//print prompt to the user for next command
		uart_printStr("\nEnter Command:");
    1100:	01000074 	movhi	r4,1
    1104:	210ca104 	addi	r4,r4,12932
    1108:	0000d940 	call	d94 <uart_printStr>

		//block until string entered
		uart_readStr(inputStr, sizeof inputStr);
    110c:	e13fd704 	addi	r4,fp,-164
    1110:	01401404 	movi	r5,80
    1114:	0000dcc0 	call	dcc <uart_readStr>
		char* str = inputStr;
    1118:	e0bfd704 	addi	r2,fp,-164
    111c:	e0bfd615 	stw	r2,-168(fp)
		while(*str){
    1120:	00001d06 	br	1198 <main+0xb4>
			*str = toupper(*str);
    1124:	e0bfd617 	ldw	r2,-168(fp)
    1128:	10800003 	ldbu	r2,0(r2)
    112c:	10803fcc 	andi	r2,r2,255
    1130:	1080201c 	xori	r2,r2,128
    1134:	10bfe004 	addi	r2,r2,-128
    1138:	e0bfd415 	stw	r2,-176(fp)
    113c:	00800074 	movhi	r2,1
    1140:	1094d704 	addi	r2,r2,21340
    1144:	10c00017 	ldw	r3,0(r2)
    1148:	e0bfd417 	ldw	r2,-176(fp)
    114c:	1885883a 	add	r2,r3,r2
    1150:	10800003 	ldbu	r2,0(r2)
    1154:	10803fcc 	andi	r2,r2,255
    1158:	1080008c 	andi	r2,r2,2
    115c:	1005003a 	cmpeq	r2,r2,zero
    1160:	1000041e 	bne	r2,zero,1174 <main+0x90>
    1164:	e0bfd417 	ldw	r2,-176(fp)
    1168:	10bff804 	addi	r2,r2,-32
    116c:	e0bfff15 	stw	r2,-4(fp)
    1170:	00000206 	br	117c <main+0x98>
    1174:	e0bfd417 	ldw	r2,-176(fp)
    1178:	e0bfff15 	stw	r2,-4(fp)
    117c:	e0bfff17 	ldw	r2,-4(fp)
    1180:	1007883a 	mov	r3,r2
    1184:	e0bfd617 	ldw	r2,-168(fp)
    1188:	10c00005 	stb	r3,0(r2)
			str++;
    118c:	e0bfd617 	ldw	r2,-168(fp)
    1190:	10800044 	addi	r2,r2,1
    1194:	e0bfd615 	stw	r2,-168(fp)
		uart_printStr("\nEnter Command:");

		//block until string entered
		uart_readStr(inputStr, sizeof inputStr);
		char* str = inputStr;
		while(*str){
    1198:	e0bfd617 	ldw	r2,-168(fp)
    119c:	10800003 	ldbu	r2,0(r2)
    11a0:	10803fcc 	andi	r2,r2,255
    11a4:	1080201c 	xori	r2,r2,128
    11a8:	10bfe004 	addi	r2,r2,-128
    11ac:	1004c03a 	cmpne	r2,r2,zero
    11b0:	103fdc1e 	bne	r2,zero,1124 <main+0x40>
			*str = toupper(*str);
			str++;
		}

		//parse for command
		int matched = sscanf(inputStr,"%s",cmdStr);
    11b4:	e13fd704 	addi	r4,fp,-164
    11b8:	e1bfeb04 	addi	r6,fp,-84
    11bc:	01400074 	movhi	r5,1
    11c0:	294ca504 	addi	r5,r5,12948
    11c4:	00027400 	call	2740 <sscanf>
    11c8:	e0bfd515 	stw	r2,-172(fp)
		if(matched != EOF){
    11cc:	e0bfd517 	ldw	r2,-172(fp)
    11d0:	10bfffe0 	cmpeqi	r2,r2,-1
    11d4:	103fca1e 	bne	r2,zero,1100 <main+0x1c>
			cmd_parseInput(inputStr,cmdStr);
    11d8:	e13fd704 	addi	r4,fp,-164
    11dc:	e17feb04 	addi	r5,fp,-84
    11e0:	00002280 	call	228 <cmd_parseInput>
		}
	}
    11e4:	003fc606 	br	1100 <main+0x1c>

000011e8 <udivmodsi4>:
    11e8:	29001b2e 	bgeu	r5,r4,1258 <udivmodsi4+0x70>
    11ec:	28001a16 	blt	r5,zero,1258 <udivmodsi4+0x70>
    11f0:	00800044 	movi	r2,1
    11f4:	0007883a 	mov	r3,zero
    11f8:	01c007c4 	movi	r7,31
    11fc:	00000306 	br	120c <udivmodsi4+0x24>
    1200:	19c01326 	beq	r3,r7,1250 <udivmodsi4+0x68>
    1204:	18c00044 	addi	r3,r3,1
    1208:	28000416 	blt	r5,zero,121c <udivmodsi4+0x34>
    120c:	294b883a 	add	r5,r5,r5
    1210:	1085883a 	add	r2,r2,r2
    1214:	293ffa36 	bltu	r5,r4,1200 <udivmodsi4+0x18>
    1218:	10000d26 	beq	r2,zero,1250 <udivmodsi4+0x68>
    121c:	0007883a 	mov	r3,zero
    1220:	21400236 	bltu	r4,r5,122c <udivmodsi4+0x44>
    1224:	2149c83a 	sub	r4,r4,r5
    1228:	1886b03a 	or	r3,r3,r2
    122c:	1004d07a 	srli	r2,r2,1
    1230:	280ad07a 	srli	r5,r5,1
    1234:	103ffa1e 	bne	r2,zero,1220 <udivmodsi4+0x38>
    1238:	30000226 	beq	r6,zero,1244 <udivmodsi4+0x5c>
    123c:	2005883a 	mov	r2,r4
    1240:	f800283a 	ret
    1244:	1809883a 	mov	r4,r3
    1248:	2005883a 	mov	r2,r4
    124c:	f800283a 	ret
    1250:	0007883a 	mov	r3,zero
    1254:	003ff806 	br	1238 <udivmodsi4+0x50>
    1258:	00800044 	movi	r2,1
    125c:	0007883a 	mov	r3,zero
    1260:	003fef06 	br	1220 <udivmodsi4+0x38>

00001264 <__divsi3>:
    1264:	defffe04 	addi	sp,sp,-8
    1268:	dc000015 	stw	r16,0(sp)
    126c:	dfc00115 	stw	ra,4(sp)
    1270:	0021883a 	mov	r16,zero
    1274:	20000c16 	blt	r4,zero,12a8 <__divsi3+0x44>
    1278:	000d883a 	mov	r6,zero
    127c:	28000e16 	blt	r5,zero,12b8 <__divsi3+0x54>
    1280:	00011e80 	call	11e8 <udivmodsi4>
    1284:	1007883a 	mov	r3,r2
    1288:	8005003a 	cmpeq	r2,r16,zero
    128c:	1000011e 	bne	r2,zero,1294 <__divsi3+0x30>
    1290:	00c7c83a 	sub	r3,zero,r3
    1294:	1805883a 	mov	r2,r3
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	dc000017 	ldw	r16,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret
    12a8:	0109c83a 	sub	r4,zero,r4
    12ac:	04000044 	movi	r16,1
    12b0:	000d883a 	mov	r6,zero
    12b4:	283ff20e 	bge	r5,zero,1280 <__divsi3+0x1c>
    12b8:	014bc83a 	sub	r5,zero,r5
    12bc:	8021003a 	cmpeq	r16,r16,zero
    12c0:	003fef06 	br	1280 <__divsi3+0x1c>

000012c4 <__modsi3>:
    12c4:	deffff04 	addi	sp,sp,-4
    12c8:	dfc00015 	stw	ra,0(sp)
    12cc:	01800044 	movi	r6,1
    12d0:	2807883a 	mov	r3,r5
    12d4:	20000416 	blt	r4,zero,12e8 <__modsi3+0x24>
    12d8:	28000c16 	blt	r5,zero,130c <__modsi3+0x48>
    12dc:	dfc00017 	ldw	ra,0(sp)
    12e0:	dec00104 	addi	sp,sp,4
    12e4:	00011e81 	jmpi	11e8 <udivmodsi4>
    12e8:	0109c83a 	sub	r4,zero,r4
    12ec:	28000b16 	blt	r5,zero,131c <__modsi3+0x58>
    12f0:	180b883a 	mov	r5,r3
    12f4:	01800044 	movi	r6,1
    12f8:	00011e80 	call	11e8 <udivmodsi4>
    12fc:	0085c83a 	sub	r2,zero,r2
    1300:	dfc00017 	ldw	ra,0(sp)
    1304:	dec00104 	addi	sp,sp,4
    1308:	f800283a 	ret
    130c:	014bc83a 	sub	r5,zero,r5
    1310:	dfc00017 	ldw	ra,0(sp)
    1314:	dec00104 	addi	sp,sp,4
    1318:	00011e81 	jmpi	11e8 <udivmodsi4>
    131c:	0147c83a 	sub	r3,zero,r5
    1320:	003ff306 	br	12f0 <__modsi3+0x2c>

00001324 <__udivsi3>:
    1324:	000d883a 	mov	r6,zero
    1328:	00011e81 	jmpi	11e8 <udivmodsi4>

0000132c <__umodsi3>:
    132c:	01800044 	movi	r6,1
    1330:	00011e81 	jmpi	11e8 <udivmodsi4>

00001334 <_fgets_r>:
    1334:	defff804 	addi	sp,sp,-32
    1338:	00800044 	movi	r2,1
    133c:	dd800615 	stw	r22,24(sp)
    1340:	dd400515 	stw	r21,20(sp)
    1344:	dc400115 	stw	r17,4(sp)
    1348:	dc000015 	stw	r16,0(sp)
    134c:	dfc00715 	stw	ra,28(sp)
    1350:	dd000415 	stw	r20,16(sp)
    1354:	dcc00315 	stw	r19,12(sp)
    1358:	dc800215 	stw	r18,8(sp)
    135c:	3021883a 	mov	r16,r6
    1360:	282d883a 	mov	r22,r5
    1364:	3823883a 	mov	r17,r7
    1368:	202b883a 	mov	r21,r4
    136c:	1180410e 	bge	r2,r6,1474 <_fgets_r+0x140>
    1370:	20000226 	beq	r4,zero,137c <_fgets_r+0x48>
    1374:	20800e17 	ldw	r2,56(r4)
    1378:	10002e26 	beq	r2,zero,1434 <_fgets_r+0x100>
    137c:	853fffc4 	addi	r20,r16,-1
    1380:	b027883a 	mov	r19,r22
    1384:	88800117 	ldw	r2,4(r17)
    1388:	a809883a 	mov	r4,r21
    138c:	880b883a 	mov	r5,r17
    1390:	100d883a 	mov	r6,r2
    1394:	1000031e 	bne	r2,zero,13a4 <_fgets_r+0x70>
    1398:	000238c0 	call	238c <__srefill_r>
    139c:	1000341e 	bne	r2,zero,1470 <_fgets_r+0x13c>
    13a0:	89800117 	ldw	r6,4(r17)
    13a4:	01400284 	movi	r5,10
    13a8:	3021883a 	mov	r16,r6
    13ac:	8c800017 	ldw	r18,0(r17)
    13b0:	a180012e 	bgeu	r20,r6,13b8 <_fgets_r+0x84>
    13b4:	a021883a 	mov	r16,r20
    13b8:	9009883a 	mov	r4,r18
    13bc:	800d883a 	mov	r6,r16
    13c0:	00020200 	call	2020 <memchr>
    13c4:	1007883a 	mov	r3,r2
    13c8:	900b883a 	mov	r5,r18
    13cc:	9809883a 	mov	r4,r19
    13d0:	800d883a 	mov	r6,r16
    13d4:	1000191e 	bne	r2,zero,143c <_fgets_r+0x108>
    13d8:	88800117 	ldw	r2,4(r17)
    13dc:	88c00017 	ldw	r3,0(r17)
    13e0:	9c27883a 	add	r19,r19,r16
    13e4:	1405c83a 	sub	r2,r2,r16
    13e8:	1c07883a 	add	r3,r3,r16
    13ec:	88c00015 	stw	r3,0(r17)
    13f0:	88800115 	stw	r2,4(r17)
    13f4:	00021040 	call	2104 <memcpy>
    13f8:	a407c83a 	sub	r3,r20,r16
    13fc:	1829883a 	mov	r20,r3
    1400:	183fe01e 	bne	r3,zero,1384 <_fgets_r+0x50>
    1404:	98000005 	stb	zero,0(r19)
    1408:	b005883a 	mov	r2,r22
    140c:	dfc00717 	ldw	ra,28(sp)
    1410:	dd800617 	ldw	r22,24(sp)
    1414:	dd400517 	ldw	r21,20(sp)
    1418:	dd000417 	ldw	r20,16(sp)
    141c:	dcc00317 	ldw	r19,12(sp)
    1420:	dc800217 	ldw	r18,8(sp)
    1424:	dc400117 	ldw	r17,4(sp)
    1428:	dc000017 	ldw	r16,0(sp)
    142c:	dec00804 	addi	sp,sp,32
    1430:	f800283a 	ret
    1434:	00015080 	call	1508 <__sinit>
    1438:	003fd006 	br	137c <_fgets_r+0x48>
    143c:	88800117 	ldw	r2,4(r17)
    1440:	18c00044 	addi	r3,r3,1
    1444:	1ca1c83a 	sub	r16,r3,r18
    1448:	1405c83a 	sub	r2,r2,r16
    144c:	800d883a 	mov	r6,r16
    1450:	88c00015 	stw	r3,0(r17)
    1454:	88800115 	stw	r2,4(r17)
    1458:	900b883a 	mov	r5,r18
    145c:	9809883a 	mov	r4,r19
    1460:	00021040 	call	2104 <memcpy>
    1464:	9c21883a 	add	r16,r19,r16
    1468:	80000005 	stb	zero,0(r16)
    146c:	003fe606 	br	1408 <_fgets_r+0xd4>
    1470:	9dbfe41e 	bne	r19,r22,1404 <_fgets_r+0xd0>
    1474:	002d883a 	mov	r22,zero
    1478:	003fe306 	br	1408 <_fgets_r+0xd4>

0000147c <fgets>:
    147c:	00800074 	movhi	r2,1
    1480:	1094d804 	addi	r2,r2,21344
    1484:	2013883a 	mov	r9,r4
    1488:	11000017 	ldw	r4,0(r2)
    148c:	2805883a 	mov	r2,r5
    1490:	300f883a 	mov	r7,r6
    1494:	480b883a 	mov	r5,r9
    1498:	100d883a 	mov	r6,r2
    149c:	00013341 	jmpi	1334 <_fgets_r>

000014a0 <std>:
    14a0:	00800034 	movhi	r2,0
    14a4:	1089f104 	addi	r2,r2,10180
    14a8:	20800b15 	stw	r2,44(r4)
    14ac:	00800034 	movhi	r2,0
    14b0:	108a2c04 	addi	r2,r2,10416
    14b4:	20800815 	stw	r2,32(r4)
    14b8:	00c00034 	movhi	r3,0
    14bc:	18ca0d04 	addi	r3,r3,10292
    14c0:	00800034 	movhi	r2,0
    14c4:	1089f304 	addi	r2,r2,10188
    14c8:	2140030d 	sth	r5,12(r4)
    14cc:	2180038d 	sth	r6,14(r4)
    14d0:	20c00915 	stw	r3,36(r4)
    14d4:	20800a15 	stw	r2,40(r4)
    14d8:	20000015 	stw	zero,0(r4)
    14dc:	20000115 	stw	zero,4(r4)
    14e0:	20000215 	stw	zero,8(r4)
    14e4:	20000415 	stw	zero,16(r4)
    14e8:	20000515 	stw	zero,20(r4)
    14ec:	20000615 	stw	zero,24(r4)
    14f0:	21000715 	stw	r4,28(r4)
    14f4:	f800283a 	ret

000014f8 <__sfp_lock_acquire>:
    14f8:	f800283a 	ret

000014fc <__sfp_lock_release>:
    14fc:	f800283a 	ret

00001500 <__sinit_lock_acquire>:
    1500:	f800283a 	ret

00001504 <__sinit_lock_release>:
    1504:	f800283a 	ret

00001508 <__sinit>:
    1508:	20800e17 	ldw	r2,56(r4)
    150c:	defffd04 	addi	sp,sp,-12
    1510:	dc400115 	stw	r17,4(sp)
    1514:	dc000015 	stw	r16,0(sp)
    1518:	dfc00215 	stw	ra,8(sp)
    151c:	04400044 	movi	r17,1
    1520:	01400104 	movi	r5,4
    1524:	000d883a 	mov	r6,zero
    1528:	2021883a 	mov	r16,r4
    152c:	2200bb04 	addi	r8,r4,748
    1530:	200f883a 	mov	r7,r4
    1534:	10000526 	beq	r2,zero,154c <__sinit+0x44>
    1538:	dfc00217 	ldw	ra,8(sp)
    153c:	dc400117 	ldw	r17,4(sp)
    1540:	dc000017 	ldw	r16,0(sp)
    1544:	dec00304 	addi	sp,sp,12
    1548:	f800283a 	ret
    154c:	21000117 	ldw	r4,4(r4)
    1550:	00800034 	movhi	r2,0
    1554:	10857b04 	addi	r2,r2,5612
    1558:	00c000c4 	movi	r3,3
    155c:	80800f15 	stw	r2,60(r16)
    1560:	80c0b915 	stw	r3,740(r16)
    1564:	8200ba15 	stw	r8,744(r16)
    1568:	84400e15 	stw	r17,56(r16)
    156c:	8000b815 	stw	zero,736(r16)
    1570:	00014a00 	call	14a0 <std>
    1574:	81000217 	ldw	r4,8(r16)
    1578:	880d883a 	mov	r6,r17
    157c:	800f883a 	mov	r7,r16
    1580:	01400284 	movi	r5,10
    1584:	00014a00 	call	14a0 <std>
    1588:	81000317 	ldw	r4,12(r16)
    158c:	800f883a 	mov	r7,r16
    1590:	01400484 	movi	r5,18
    1594:	01800084 	movi	r6,2
    1598:	dfc00217 	ldw	ra,8(sp)
    159c:	dc400117 	ldw	r17,4(sp)
    15a0:	dc000017 	ldw	r16,0(sp)
    15a4:	dec00304 	addi	sp,sp,12
    15a8:	00014a01 	jmpi	14a0 <std>

000015ac <__fp_lock>:
    15ac:	0005883a 	mov	r2,zero
    15b0:	f800283a 	ret

000015b4 <__fp_unlock>:
    15b4:	0005883a 	mov	r2,zero
    15b8:	f800283a 	ret

000015bc <__fp_unlock_all>:
    15bc:	00800074 	movhi	r2,1
    15c0:	1094d804 	addi	r2,r2,21344
    15c4:	11000017 	ldw	r4,0(r2)
    15c8:	01400034 	movhi	r5,0
    15cc:	29456d04 	addi	r5,r5,5556
    15d0:	00018281 	jmpi	1828 <_fwalk>

000015d4 <__fp_lock_all>:
    15d4:	00800074 	movhi	r2,1
    15d8:	1094d804 	addi	r2,r2,21344
    15dc:	11000017 	ldw	r4,0(r2)
    15e0:	01400034 	movhi	r5,0
    15e4:	29456b04 	addi	r5,r5,5548
    15e8:	00018281 	jmpi	1828 <_fwalk>

000015ec <_cleanup_r>:
    15ec:	01400034 	movhi	r5,0
    15f0:	295f7904 	addi	r5,r5,32228
    15f4:	00018281 	jmpi	1828 <_fwalk>

000015f8 <_cleanup>:
    15f8:	00800074 	movhi	r2,1
    15fc:	1094d904 	addi	r2,r2,21348
    1600:	11000017 	ldw	r4,0(r2)
    1604:	00015ec1 	jmpi	15ec <_cleanup_r>

00001608 <__sfmoreglue>:
    1608:	defffc04 	addi	sp,sp,-16
    160c:	dc400115 	stw	r17,4(sp)
    1610:	2c401724 	muli	r17,r5,92
    1614:	dc800215 	stw	r18,8(sp)
    1618:	2825883a 	mov	r18,r5
    161c:	89400304 	addi	r5,r17,12
    1620:	dc000015 	stw	r16,0(sp)
    1624:	dfc00315 	stw	ra,12(sp)
    1628:	00018e00 	call	18e0 <_malloc_r>
    162c:	0021883a 	mov	r16,zero
    1630:	880d883a 	mov	r6,r17
    1634:	000b883a 	mov	r5,zero
    1638:	10000626 	beq	r2,zero,1654 <__sfmoreglue+0x4c>
    163c:	11000304 	addi	r4,r2,12
    1640:	14800115 	stw	r18,4(r2)
    1644:	10000015 	stw	zero,0(r2)
    1648:	11000215 	stw	r4,8(r2)
    164c:	1021883a 	mov	r16,r2
    1650:	00021a40 	call	21a4 <memset>
    1654:	8005883a 	mov	r2,r16
    1658:	dfc00317 	ldw	ra,12(sp)
    165c:	dc800217 	ldw	r18,8(sp)
    1660:	dc400117 	ldw	r17,4(sp)
    1664:	dc000017 	ldw	r16,0(sp)
    1668:	dec00404 	addi	sp,sp,16
    166c:	f800283a 	ret

00001670 <__sfp>:
    1670:	defffd04 	addi	sp,sp,-12
    1674:	00800074 	movhi	r2,1
    1678:	1094d904 	addi	r2,r2,21348
    167c:	dc000015 	stw	r16,0(sp)
    1680:	14000017 	ldw	r16,0(r2)
    1684:	dc400115 	stw	r17,4(sp)
    1688:	dfc00215 	stw	ra,8(sp)
    168c:	80800e17 	ldw	r2,56(r16)
    1690:	2023883a 	mov	r17,r4
    1694:	10002626 	beq	r2,zero,1730 <__sfp+0xc0>
    1698:	8400b804 	addi	r16,r16,736
    169c:	80800117 	ldw	r2,4(r16)
    16a0:	81000217 	ldw	r4,8(r16)
    16a4:	10ffffc4 	addi	r3,r2,-1
    16a8:	18000916 	blt	r3,zero,16d0 <__sfp+0x60>
    16ac:	2080030f 	ldh	r2,12(r4)
    16b0:	10000b26 	beq	r2,zero,16e0 <__sfp+0x70>
    16b4:	017fffc4 	movi	r5,-1
    16b8:	00000206 	br	16c4 <__sfp+0x54>
    16bc:	2080030f 	ldh	r2,12(r4)
    16c0:	10000726 	beq	r2,zero,16e0 <__sfp+0x70>
    16c4:	18ffffc4 	addi	r3,r3,-1
    16c8:	21001704 	addi	r4,r4,92
    16cc:	197ffb1e 	bne	r3,r5,16bc <__sfp+0x4c>
    16d0:	80800017 	ldw	r2,0(r16)
    16d4:	10001926 	beq	r2,zero,173c <__sfp+0xcc>
    16d8:	1021883a 	mov	r16,r2
    16dc:	003fef06 	br	169c <__sfp+0x2c>
    16e0:	00bfffc4 	movi	r2,-1
    16e4:	00c00044 	movi	r3,1
    16e8:	2080038d 	sth	r2,14(r4)
    16ec:	20c0030d 	sth	r3,12(r4)
    16f0:	20000015 	stw	zero,0(r4)
    16f4:	20000215 	stw	zero,8(r4)
    16f8:	20000115 	stw	zero,4(r4)
    16fc:	20000415 	stw	zero,16(r4)
    1700:	20000515 	stw	zero,20(r4)
    1704:	20000615 	stw	zero,24(r4)
    1708:	20000c15 	stw	zero,48(r4)
    170c:	20000d15 	stw	zero,52(r4)
    1710:	20001115 	stw	zero,68(r4)
    1714:	20001215 	stw	zero,72(r4)
    1718:	2005883a 	mov	r2,r4
    171c:	dfc00217 	ldw	ra,8(sp)
    1720:	dc400117 	ldw	r17,4(sp)
    1724:	dc000017 	ldw	r16,0(sp)
    1728:	dec00304 	addi	sp,sp,12
    172c:	f800283a 	ret
    1730:	8009883a 	mov	r4,r16
    1734:	00015080 	call	1508 <__sinit>
    1738:	003fd706 	br	1698 <__sfp+0x28>
    173c:	8809883a 	mov	r4,r17
    1740:	01400104 	movi	r5,4
    1744:	00016080 	call	1608 <__sfmoreglue>
    1748:	80800015 	stw	r2,0(r16)
    174c:	103fe21e 	bne	r2,zero,16d8 <__sfp+0x68>
    1750:	00800304 	movi	r2,12
    1754:	0009883a 	mov	r4,zero
    1758:	88800015 	stw	r2,0(r17)
    175c:	003fee06 	br	1718 <__sfp+0xa8>

00001760 <_fwalk_reent>:
    1760:	defff704 	addi	sp,sp,-36
    1764:	dcc00315 	stw	r19,12(sp)
    1768:	24c0b804 	addi	r19,r4,736
    176c:	dd800615 	stw	r22,24(sp)
    1770:	dd400515 	stw	r21,20(sp)
    1774:	dfc00815 	stw	ra,32(sp)
    1778:	ddc00715 	stw	r23,28(sp)
    177c:	dd000415 	stw	r20,16(sp)
    1780:	dc800215 	stw	r18,8(sp)
    1784:	dc400115 	stw	r17,4(sp)
    1788:	dc000015 	stw	r16,0(sp)
    178c:	202b883a 	mov	r21,r4
    1790:	282d883a 	mov	r22,r5
    1794:	00014f80 	call	14f8 <__sfp_lock_acquire>
    1798:	98002126 	beq	r19,zero,1820 <_fwalk_reent+0xc0>
    179c:	002f883a 	mov	r23,zero
    17a0:	9c800117 	ldw	r18,4(r19)
    17a4:	9c000217 	ldw	r16,8(r19)
    17a8:	90bfffc4 	addi	r2,r18,-1
    17ac:	10000d16 	blt	r2,zero,17e4 <_fwalk_reent+0x84>
    17b0:	0023883a 	mov	r17,zero
    17b4:	053fffc4 	movi	r20,-1
    17b8:	8080030f 	ldh	r2,12(r16)
    17bc:	8c400044 	addi	r17,r17,1
    17c0:	10000626 	beq	r2,zero,17dc <_fwalk_reent+0x7c>
    17c4:	8080038f 	ldh	r2,14(r16)
    17c8:	800b883a 	mov	r5,r16
    17cc:	a809883a 	mov	r4,r21
    17d0:	15000226 	beq	r2,r20,17dc <_fwalk_reent+0x7c>
    17d4:	b03ee83a 	callr	r22
    17d8:	b8aeb03a 	or	r23,r23,r2
    17dc:	84001704 	addi	r16,r16,92
    17e0:	947ff51e 	bne	r18,r17,17b8 <_fwalk_reent+0x58>
    17e4:	9cc00017 	ldw	r19,0(r19)
    17e8:	983fed1e 	bne	r19,zero,17a0 <_fwalk_reent+0x40>
    17ec:	00014fc0 	call	14fc <__sfp_lock_release>
    17f0:	b805883a 	mov	r2,r23
    17f4:	dfc00817 	ldw	ra,32(sp)
    17f8:	ddc00717 	ldw	r23,28(sp)
    17fc:	dd800617 	ldw	r22,24(sp)
    1800:	dd400517 	ldw	r21,20(sp)
    1804:	dd000417 	ldw	r20,16(sp)
    1808:	dcc00317 	ldw	r19,12(sp)
    180c:	dc800217 	ldw	r18,8(sp)
    1810:	dc400117 	ldw	r17,4(sp)
    1814:	dc000017 	ldw	r16,0(sp)
    1818:	dec00904 	addi	sp,sp,36
    181c:	f800283a 	ret
    1820:	002f883a 	mov	r23,zero
    1824:	003ff106 	br	17ec <_fwalk_reent+0x8c>

00001828 <_fwalk>:
    1828:	defff804 	addi	sp,sp,-32
    182c:	dcc00315 	stw	r19,12(sp)
    1830:	24c0b804 	addi	r19,r4,736
    1834:	dd400515 	stw	r21,20(sp)
    1838:	dfc00715 	stw	ra,28(sp)
    183c:	dd800615 	stw	r22,24(sp)
    1840:	dd000415 	stw	r20,16(sp)
    1844:	dc800215 	stw	r18,8(sp)
    1848:	dc400115 	stw	r17,4(sp)
    184c:	dc000015 	stw	r16,0(sp)
    1850:	282b883a 	mov	r21,r5
    1854:	00014f80 	call	14f8 <__sfp_lock_acquire>
    1858:	98001f26 	beq	r19,zero,18d8 <_fwalk+0xb0>
    185c:	002d883a 	mov	r22,zero
    1860:	9c800117 	ldw	r18,4(r19)
    1864:	9c000217 	ldw	r16,8(r19)
    1868:	90bfffc4 	addi	r2,r18,-1
    186c:	10000c16 	blt	r2,zero,18a0 <_fwalk+0x78>
    1870:	0023883a 	mov	r17,zero
    1874:	053fffc4 	movi	r20,-1
    1878:	8080030f 	ldh	r2,12(r16)
    187c:	8c400044 	addi	r17,r17,1
    1880:	10000526 	beq	r2,zero,1898 <_fwalk+0x70>
    1884:	8080038f 	ldh	r2,14(r16)
    1888:	8009883a 	mov	r4,r16
    188c:	15000226 	beq	r2,r20,1898 <_fwalk+0x70>
    1890:	a83ee83a 	callr	r21
    1894:	b0acb03a 	or	r22,r22,r2
    1898:	84001704 	addi	r16,r16,92
    189c:	947ff61e 	bne	r18,r17,1878 <_fwalk+0x50>
    18a0:	9cc00017 	ldw	r19,0(r19)
    18a4:	983fee1e 	bne	r19,zero,1860 <_fwalk+0x38>
    18a8:	00014fc0 	call	14fc <__sfp_lock_release>
    18ac:	b005883a 	mov	r2,r22
    18b0:	dfc00717 	ldw	ra,28(sp)
    18b4:	dd800617 	ldw	r22,24(sp)
    18b8:	dd400517 	ldw	r21,20(sp)
    18bc:	dd000417 	ldw	r20,16(sp)
    18c0:	dcc00317 	ldw	r19,12(sp)
    18c4:	dc800217 	ldw	r18,8(sp)
    18c8:	dc400117 	ldw	r17,4(sp)
    18cc:	dc000017 	ldw	r16,0(sp)
    18d0:	dec00804 	addi	sp,sp,32
    18d4:	f800283a 	ret
    18d8:	002d883a 	mov	r22,zero
    18dc:	003ff206 	br	18a8 <_fwalk+0x80>

000018e0 <_malloc_r>:
    18e0:	defff604 	addi	sp,sp,-40
    18e4:	28c002c4 	addi	r3,r5,11
    18e8:	00800584 	movi	r2,22
    18ec:	dc800215 	stw	r18,8(sp)
    18f0:	dfc00915 	stw	ra,36(sp)
    18f4:	df000815 	stw	fp,32(sp)
    18f8:	ddc00715 	stw	r23,28(sp)
    18fc:	dd800615 	stw	r22,24(sp)
    1900:	dd400515 	stw	r21,20(sp)
    1904:	dd000415 	stw	r20,16(sp)
    1908:	dcc00315 	stw	r19,12(sp)
    190c:	dc400115 	stw	r17,4(sp)
    1910:	dc000015 	stw	r16,0(sp)
    1914:	2025883a 	mov	r18,r4
    1918:	10c01236 	bltu	r2,r3,1964 <_malloc_r+0x84>
    191c:	04400404 	movi	r17,16
    1920:	8940142e 	bgeu	r17,r5,1974 <_malloc_r+0x94>
    1924:	00800304 	movi	r2,12
    1928:	0007883a 	mov	r3,zero
    192c:	90800015 	stw	r2,0(r18)
    1930:	1805883a 	mov	r2,r3
    1934:	dfc00917 	ldw	ra,36(sp)
    1938:	df000817 	ldw	fp,32(sp)
    193c:	ddc00717 	ldw	r23,28(sp)
    1940:	dd800617 	ldw	r22,24(sp)
    1944:	dd400517 	ldw	r21,20(sp)
    1948:	dd000417 	ldw	r20,16(sp)
    194c:	dcc00317 	ldw	r19,12(sp)
    1950:	dc800217 	ldw	r18,8(sp)
    1954:	dc400117 	ldw	r17,4(sp)
    1958:	dc000017 	ldw	r16,0(sp)
    195c:	dec00a04 	addi	sp,sp,40
    1960:	f800283a 	ret
    1964:	00bffe04 	movi	r2,-8
    1968:	18a2703a 	and	r17,r3,r2
    196c:	883fed16 	blt	r17,zero,1924 <_malloc_r+0x44>
    1970:	897fec36 	bltu	r17,r5,1924 <_malloc_r+0x44>
    1974:	9009883a 	mov	r4,r18
    1978:	0010b3c0 	call	10b3c <__malloc_lock>
    197c:	00807dc4 	movi	r2,503
    1980:	14402b2e 	bgeu	r2,r17,1a30 <_malloc_r+0x150>
    1984:	8806d27a 	srli	r3,r17,9
    1988:	18003f1e 	bne	r3,zero,1a88 <_malloc_r+0x1a8>
    198c:	880cd0fa 	srli	r6,r17,3
    1990:	300490fa 	slli	r2,r6,3
    1994:	02c00074 	movhi	r11,1
    1998:	5acf4604 	addi	r11,r11,15640
    199c:	12cb883a 	add	r5,r2,r11
    19a0:	2c000317 	ldw	r16,12(r5)
    19a4:	580f883a 	mov	r7,r11
    19a8:	2c00041e 	bne	r5,r16,19bc <_malloc_r+0xdc>
    19ac:	00000a06 	br	19d8 <_malloc_r+0xf8>
    19b0:	1800860e 	bge	r3,zero,1bcc <_malloc_r+0x2ec>
    19b4:	84000317 	ldw	r16,12(r16)
    19b8:	2c000726 	beq	r5,r16,19d8 <_malloc_r+0xf8>
    19bc:	80800117 	ldw	r2,4(r16)
    19c0:	00ffff04 	movi	r3,-4
    19c4:	10c8703a 	and	r4,r2,r3
    19c8:	2447c83a 	sub	r3,r4,r17
    19cc:	008003c4 	movi	r2,15
    19d0:	10fff70e 	bge	r2,r3,19b0 <_malloc_r+0xd0>
    19d4:	31bfffc4 	addi	r6,r6,-1
    19d8:	32400044 	addi	r9,r6,1
    19dc:	02800074 	movhi	r10,1
    19e0:	528f4804 	addi	r10,r10,15648
    19e4:	54000217 	ldw	r16,8(r10)
    19e8:	8280a026 	beq	r16,r10,1c6c <_malloc_r+0x38c>
    19ec:	80800117 	ldw	r2,4(r16)
    19f0:	00ffff04 	movi	r3,-4
    19f4:	10ca703a 	and	r5,r2,r3
    19f8:	2c4dc83a 	sub	r6,r5,r17
    19fc:	008003c4 	movi	r2,15
    1a00:	11808316 	blt	r2,r6,1c10 <_malloc_r+0x330>
    1a04:	52800315 	stw	r10,12(r10)
    1a08:	52800215 	stw	r10,8(r10)
    1a0c:	30002916 	blt	r6,zero,1ab4 <_malloc_r+0x1d4>
    1a10:	8147883a 	add	r3,r16,r5
    1a14:	18800117 	ldw	r2,4(r3)
    1a18:	9009883a 	mov	r4,r18
    1a1c:	10800054 	ori	r2,r2,1
    1a20:	18800115 	stw	r2,4(r3)
    1a24:	0010b5c0 	call	10b5c <__malloc_unlock>
    1a28:	80c00204 	addi	r3,r16,8
    1a2c:	003fc006 	br	1930 <_malloc_r+0x50>
    1a30:	02c00074 	movhi	r11,1
    1a34:	5acf4604 	addi	r11,r11,15640
    1a38:	8ac5883a 	add	r2,r17,r11
    1a3c:	14000317 	ldw	r16,12(r2)
    1a40:	580f883a 	mov	r7,r11
    1a44:	8806d0fa 	srli	r3,r17,3
    1a48:	14006c26 	beq	r2,r16,1bfc <_malloc_r+0x31c>
    1a4c:	80c00117 	ldw	r3,4(r16)
    1a50:	00bfff04 	movi	r2,-4
    1a54:	81800317 	ldw	r6,12(r16)
    1a58:	1886703a 	and	r3,r3,r2
    1a5c:	80c7883a 	add	r3,r16,r3
    1a60:	18800117 	ldw	r2,4(r3)
    1a64:	81400217 	ldw	r5,8(r16)
    1a68:	9009883a 	mov	r4,r18
    1a6c:	10800054 	ori	r2,r2,1
    1a70:	18800115 	stw	r2,4(r3)
    1a74:	31400215 	stw	r5,8(r6)
    1a78:	29800315 	stw	r6,12(r5)
    1a7c:	0010b5c0 	call	10b5c <__malloc_unlock>
    1a80:	80c00204 	addi	r3,r16,8
    1a84:	003faa06 	br	1930 <_malloc_r+0x50>
    1a88:	00800104 	movi	r2,4
    1a8c:	10c0052e 	bgeu	r2,r3,1aa4 <_malloc_r+0x1c4>
    1a90:	00800504 	movi	r2,20
    1a94:	10c07836 	bltu	r2,r3,1c78 <_malloc_r+0x398>
    1a98:	198016c4 	addi	r6,r3,91
    1a9c:	300490fa 	slli	r2,r6,3
    1aa0:	003fbc06 	br	1994 <_malloc_r+0xb4>
    1aa4:	8804d1ba 	srli	r2,r17,6
    1aa8:	11800e04 	addi	r6,r2,56
    1aac:	300490fa 	slli	r2,r6,3
    1ab0:	003fb806 	br	1994 <_malloc_r+0xb4>
    1ab4:	00807fc4 	movi	r2,511
    1ab8:	1140bb36 	bltu	r2,r5,1da8 <_malloc_r+0x4c8>
    1abc:	2806d0fa 	srli	r3,r5,3
    1ac0:	573ffe04 	addi	fp,r10,-8
    1ac4:	00800044 	movi	r2,1
    1ac8:	180890fa 	slli	r4,r3,3
    1acc:	1807d0ba 	srai	r3,r3,2
    1ad0:	e1c00117 	ldw	r7,4(fp)
    1ad4:	5909883a 	add	r4,r11,r4
    1ad8:	21400217 	ldw	r5,8(r4)
    1adc:	10c4983a 	sll	r2,r2,r3
    1ae0:	81000315 	stw	r4,12(r16)
    1ae4:	81400215 	stw	r5,8(r16)
    1ae8:	388eb03a 	or	r7,r7,r2
    1aec:	2c000315 	stw	r16,12(r5)
    1af0:	24000215 	stw	r16,8(r4)
    1af4:	e1c00115 	stw	r7,4(fp)
    1af8:	4807883a 	mov	r3,r9
    1afc:	4800cd16 	blt	r9,zero,1e34 <_malloc_r+0x554>
    1b00:	1807d0ba 	srai	r3,r3,2
    1b04:	00800044 	movi	r2,1
    1b08:	10c8983a 	sll	r4,r2,r3
    1b0c:	39004436 	bltu	r7,r4,1c20 <_malloc_r+0x340>
    1b10:	21c4703a 	and	r2,r4,r7
    1b14:	10000a1e 	bne	r2,zero,1b40 <_malloc_r+0x260>
    1b18:	2109883a 	add	r4,r4,r4
    1b1c:	00bfff04 	movi	r2,-4
    1b20:	4884703a 	and	r2,r9,r2
    1b24:	3906703a 	and	r3,r7,r4
    1b28:	12400104 	addi	r9,r2,4
    1b2c:	1800041e 	bne	r3,zero,1b40 <_malloc_r+0x260>
    1b30:	2109883a 	add	r4,r4,r4
    1b34:	3904703a 	and	r2,r7,r4
    1b38:	4a400104 	addi	r9,r9,4
    1b3c:	103ffc26 	beq	r2,zero,1b30 <_malloc_r+0x250>
    1b40:	480490fa 	slli	r2,r9,3
    1b44:	4819883a 	mov	r12,r9
    1b48:	023fff04 	movi	r8,-4
    1b4c:	589b883a 	add	r13,r11,r2
    1b50:	6807883a 	mov	r3,r13
    1b54:	014003c4 	movi	r5,15
    1b58:	1c000317 	ldw	r16,12(r3)
    1b5c:	1c00041e 	bne	r3,r16,1b70 <_malloc_r+0x290>
    1b60:	0000a706 	br	1e00 <_malloc_r+0x520>
    1b64:	3000ab0e 	bge	r6,zero,1e14 <_malloc_r+0x534>
    1b68:	84000317 	ldw	r16,12(r16)
    1b6c:	1c00a426 	beq	r3,r16,1e00 <_malloc_r+0x520>
    1b70:	80800117 	ldw	r2,4(r16)
    1b74:	1204703a 	and	r2,r2,r8
    1b78:	144dc83a 	sub	r6,r2,r17
    1b7c:	29bff90e 	bge	r5,r6,1b64 <_malloc_r+0x284>
    1b80:	81000317 	ldw	r4,12(r16)
    1b84:	80c00217 	ldw	r3,8(r16)
    1b88:	89400054 	ori	r5,r17,1
    1b8c:	8445883a 	add	r2,r16,r17
    1b90:	20c00215 	stw	r3,8(r4)
    1b94:	19000315 	stw	r4,12(r3)
    1b98:	81400115 	stw	r5,4(r16)
    1b9c:	1187883a 	add	r3,r2,r6
    1ba0:	31000054 	ori	r4,r6,1
    1ba4:	50800315 	stw	r2,12(r10)
    1ba8:	50800215 	stw	r2,8(r10)
    1bac:	19800015 	stw	r6,0(r3)
    1bb0:	11000115 	stw	r4,4(r2)
    1bb4:	12800215 	stw	r10,8(r2)
    1bb8:	12800315 	stw	r10,12(r2)
    1bbc:	9009883a 	mov	r4,r18
    1bc0:	0010b5c0 	call	10b5c <__malloc_unlock>
    1bc4:	80c00204 	addi	r3,r16,8
    1bc8:	003f5906 	br	1930 <_malloc_r+0x50>
    1bcc:	8109883a 	add	r4,r16,r4
    1bd0:	20800117 	ldw	r2,4(r4)
    1bd4:	80c00217 	ldw	r3,8(r16)
    1bd8:	81400317 	ldw	r5,12(r16)
    1bdc:	10800054 	ori	r2,r2,1
    1be0:	20800115 	stw	r2,4(r4)
    1be4:	28c00215 	stw	r3,8(r5)
    1be8:	19400315 	stw	r5,12(r3)
    1bec:	9009883a 	mov	r4,r18
    1bf0:	0010b5c0 	call	10b5c <__malloc_unlock>
    1bf4:	80c00204 	addi	r3,r16,8
    1bf8:	003f4d06 	br	1930 <_malloc_r+0x50>
    1bfc:	80800204 	addi	r2,r16,8
    1c00:	14000317 	ldw	r16,12(r2)
    1c04:	143f911e 	bne	r2,r16,1a4c <_malloc_r+0x16c>
    1c08:	1a400084 	addi	r9,r3,2
    1c0c:	003f7306 	br	19dc <_malloc_r+0xfc>
    1c10:	88c00054 	ori	r3,r17,1
    1c14:	8445883a 	add	r2,r16,r17
    1c18:	80c00115 	stw	r3,4(r16)
    1c1c:	003fdf06 	br	1b9c <_malloc_r+0x2bc>
    1c20:	e4000217 	ldw	r16,8(fp)
    1c24:	00bfff04 	movi	r2,-4
    1c28:	80c00117 	ldw	r3,4(r16)
    1c2c:	802d883a 	mov	r22,r16
    1c30:	18aa703a 	and	r21,r3,r2
    1c34:	ac401636 	bltu	r21,r17,1c90 <_malloc_r+0x3b0>
    1c38:	ac49c83a 	sub	r4,r21,r17
    1c3c:	008003c4 	movi	r2,15
    1c40:	1100130e 	bge	r2,r4,1c90 <_malloc_r+0x3b0>
    1c44:	88800054 	ori	r2,r17,1
    1c48:	8447883a 	add	r3,r16,r17
    1c4c:	80800115 	stw	r2,4(r16)
    1c50:	20800054 	ori	r2,r4,1
    1c54:	18800115 	stw	r2,4(r3)
    1c58:	e0c00215 	stw	r3,8(fp)
    1c5c:	9009883a 	mov	r4,r18
    1c60:	0010b5c0 	call	10b5c <__malloc_unlock>
    1c64:	80c00204 	addi	r3,r16,8
    1c68:	003f3106 	br	1930 <_malloc_r+0x50>
    1c6c:	39c00117 	ldw	r7,4(r7)
    1c70:	573ffe04 	addi	fp,r10,-8
    1c74:	003fa006 	br	1af8 <_malloc_r+0x218>
    1c78:	00801504 	movi	r2,84
    1c7c:	10c06736 	bltu	r2,r3,1e1c <_malloc_r+0x53c>
    1c80:	8804d33a 	srli	r2,r17,12
    1c84:	11801b84 	addi	r6,r2,110
    1c88:	300490fa 	slli	r2,r6,3
    1c8c:	003f4106 	br	1994 <_malloc_r+0xb4>
    1c90:	d0a6c217 	ldw	r2,-25848(gp)
    1c94:	d0e00417 	ldw	r3,-32752(gp)
    1c98:	053fffc4 	movi	r20,-1
    1c9c:	10800404 	addi	r2,r2,16
    1ca0:	88a7883a 	add	r19,r17,r2
    1ca4:	1d000326 	beq	r3,r20,1cb4 <_malloc_r+0x3d4>
    1ca8:	98c3ffc4 	addi	r3,r19,4095
    1cac:	00bc0004 	movi	r2,-4096
    1cb0:	18a6703a 	and	r19,r3,r2
    1cb4:	9009883a 	mov	r4,r18
    1cb8:	980b883a 	mov	r5,r19
    1cbc:	000256c0 	call	256c <_sbrk_r>
    1cc0:	1009883a 	mov	r4,r2
    1cc4:	15000426 	beq	r2,r20,1cd8 <_malloc_r+0x3f8>
    1cc8:	854b883a 	add	r5,r16,r21
    1ccc:	1029883a 	mov	r20,r2
    1cd0:	11405a2e 	bgeu	r2,r5,1e3c <_malloc_r+0x55c>
    1cd4:	87000c26 	beq	r16,fp,1d08 <_malloc_r+0x428>
    1cd8:	e4000217 	ldw	r16,8(fp)
    1cdc:	80c00117 	ldw	r3,4(r16)
    1ce0:	00bfff04 	movi	r2,-4
    1ce4:	1884703a 	and	r2,r3,r2
    1ce8:	14400336 	bltu	r2,r17,1cf8 <_malloc_r+0x418>
    1cec:	1449c83a 	sub	r4,r2,r17
    1cf0:	008003c4 	movi	r2,15
    1cf4:	113fd316 	blt	r2,r4,1c44 <_malloc_r+0x364>
    1cf8:	9009883a 	mov	r4,r18
    1cfc:	0010b5c0 	call	10b5c <__malloc_unlock>
    1d00:	0007883a 	mov	r3,zero
    1d04:	003f0a06 	br	1930 <_malloc_r+0x50>
    1d08:	05c00074 	movhi	r23,1
    1d0c:	bddbab04 	addi	r23,r23,28332
    1d10:	b8800017 	ldw	r2,0(r23)
    1d14:	988d883a 	add	r6,r19,r2
    1d18:	b9800015 	stw	r6,0(r23)
    1d1c:	d0e00417 	ldw	r3,-32752(gp)
    1d20:	00bfffc4 	movi	r2,-1
    1d24:	18808e26 	beq	r3,r2,1f60 <_malloc_r+0x680>
    1d28:	2145c83a 	sub	r2,r4,r5
    1d2c:	3085883a 	add	r2,r6,r2
    1d30:	b8800015 	stw	r2,0(r23)
    1d34:	20c001cc 	andi	r3,r4,7
    1d38:	18005f1e 	bne	r3,zero,1eb8 <_malloc_r+0x5d8>
    1d3c:	000b883a 	mov	r5,zero
    1d40:	a4c5883a 	add	r2,r20,r19
    1d44:	1083ffcc 	andi	r2,r2,4095
    1d48:	00c40004 	movi	r3,4096
    1d4c:	1887c83a 	sub	r3,r3,r2
    1d50:	28e7883a 	add	r19,r5,r3
    1d54:	9009883a 	mov	r4,r18
    1d58:	980b883a 	mov	r5,r19
    1d5c:	000256c0 	call	256c <_sbrk_r>
    1d60:	1007883a 	mov	r3,r2
    1d64:	00bfffc4 	movi	r2,-1
    1d68:	18807a26 	beq	r3,r2,1f54 <_malloc_r+0x674>
    1d6c:	1d05c83a 	sub	r2,r3,r20
    1d70:	9885883a 	add	r2,r19,r2
    1d74:	10c00054 	ori	r3,r2,1
    1d78:	b8800017 	ldw	r2,0(r23)
    1d7c:	a021883a 	mov	r16,r20
    1d80:	a0c00115 	stw	r3,4(r20)
    1d84:	9885883a 	add	r2,r19,r2
    1d88:	b8800015 	stw	r2,0(r23)
    1d8c:	e5000215 	stw	r20,8(fp)
    1d90:	b7003626 	beq	r22,fp,1e6c <_malloc_r+0x58c>
    1d94:	018003c4 	movi	r6,15
    1d98:	35404b36 	bltu	r6,r21,1ec8 <_malloc_r+0x5e8>
    1d9c:	00800044 	movi	r2,1
    1da0:	a0800115 	stw	r2,4(r20)
    1da4:	003fcd06 	br	1cdc <_malloc_r+0x3fc>
    1da8:	2808d27a 	srli	r4,r5,9
    1dac:	2000371e 	bne	r4,zero,1e8c <_malloc_r+0x5ac>
    1db0:	2808d0fa 	srli	r4,r5,3
    1db4:	200690fa 	slli	r3,r4,3
    1db8:	1ad1883a 	add	r8,r3,r11
    1dbc:	41800217 	ldw	r6,8(r8)
    1dc0:	41805b26 	beq	r8,r6,1f30 <_malloc_r+0x650>
    1dc4:	30800117 	ldw	r2,4(r6)
    1dc8:	00ffff04 	movi	r3,-4
    1dcc:	10c4703a 	and	r2,r2,r3
    1dd0:	2880022e 	bgeu	r5,r2,1ddc <_malloc_r+0x4fc>
    1dd4:	31800217 	ldw	r6,8(r6)
    1dd8:	41bffa1e 	bne	r8,r6,1dc4 <_malloc_r+0x4e4>
    1ddc:	32000317 	ldw	r8,12(r6)
    1de0:	39c00117 	ldw	r7,4(r7)
    1de4:	82000315 	stw	r8,12(r16)
    1de8:	81800215 	stw	r6,8(r16)
    1dec:	07000074 	movhi	fp,1
    1df0:	e70f4604 	addi	fp,fp,15640
    1df4:	34000315 	stw	r16,12(r6)
    1df8:	44000215 	stw	r16,8(r8)
    1dfc:	003f3e06 	br	1af8 <_malloc_r+0x218>
    1e00:	63000044 	addi	r12,r12,1
    1e04:	608000cc 	andi	r2,r12,3
    1e08:	10005d26 	beq	r2,zero,1f80 <_malloc_r+0x6a0>
    1e0c:	18c00204 	addi	r3,r3,8
    1e10:	003f5106 	br	1b58 <_malloc_r+0x278>
    1e14:	8089883a 	add	r4,r16,r2
    1e18:	003f6d06 	br	1bd0 <_malloc_r+0x2f0>
    1e1c:	00805504 	movi	r2,340
    1e20:	10c02036 	bltu	r2,r3,1ea4 <_malloc_r+0x5c4>
    1e24:	8804d3fa 	srli	r2,r17,15
    1e28:	11801dc4 	addi	r6,r2,119
    1e2c:	300490fa 	slli	r2,r6,3
    1e30:	003ed806 	br	1994 <_malloc_r+0xb4>
    1e34:	48c000c4 	addi	r3,r9,3
    1e38:	003f3106 	br	1b00 <_malloc_r+0x220>
    1e3c:	05c00074 	movhi	r23,1
    1e40:	bddbab04 	addi	r23,r23,28332
    1e44:	b8800017 	ldw	r2,0(r23)
    1e48:	988d883a 	add	r6,r19,r2
    1e4c:	b9800015 	stw	r6,0(r23)
    1e50:	293fb21e 	bne	r5,r4,1d1c <_malloc_r+0x43c>
    1e54:	2083ffcc 	andi	r2,r4,4095
    1e58:	103fb01e 	bne	r2,zero,1d1c <_malloc_r+0x43c>
    1e5c:	e4000217 	ldw	r16,8(fp)
    1e60:	9d45883a 	add	r2,r19,r21
    1e64:	10800054 	ori	r2,r2,1
    1e68:	80800115 	stw	r2,4(r16)
    1e6c:	b8c00017 	ldw	r3,0(r23)
    1e70:	d0a6c317 	ldw	r2,-25844(gp)
    1e74:	10c0012e 	bgeu	r2,r3,1e7c <_malloc_r+0x59c>
    1e78:	d0e6c315 	stw	r3,-25844(gp)
    1e7c:	d0a6c417 	ldw	r2,-25840(gp)
    1e80:	10ff962e 	bgeu	r2,r3,1cdc <_malloc_r+0x3fc>
    1e84:	d0e6c415 	stw	r3,-25840(gp)
    1e88:	003f9406 	br	1cdc <_malloc_r+0x3fc>
    1e8c:	00800104 	movi	r2,4
    1e90:	11001e36 	bltu	r2,r4,1f0c <_malloc_r+0x62c>
    1e94:	2804d1ba 	srli	r2,r5,6
    1e98:	11000e04 	addi	r4,r2,56
    1e9c:	200690fa 	slli	r3,r4,3
    1ea0:	003fc506 	br	1db8 <_malloc_r+0x4d8>
    1ea4:	00815504 	movi	r2,1364
    1ea8:	10c01d2e 	bgeu	r2,r3,1f20 <_malloc_r+0x640>
    1eac:	01801f84 	movi	r6,126
    1eb0:	0080fc04 	movi	r2,1008
    1eb4:	003eb706 	br	1994 <_malloc_r+0xb4>
    1eb8:	00800204 	movi	r2,8
    1ebc:	10cbc83a 	sub	r5,r2,r3
    1ec0:	2169883a 	add	r20,r4,r5
    1ec4:	003f9e06 	br	1d40 <_malloc_r+0x460>
    1ec8:	00bffe04 	movi	r2,-8
    1ecc:	a93ffd04 	addi	r4,r21,-12
    1ed0:	2088703a 	and	r4,r4,r2
    1ed4:	b10b883a 	add	r5,r22,r4
    1ed8:	00c00144 	movi	r3,5
    1edc:	28c00215 	stw	r3,8(r5)
    1ee0:	28c00115 	stw	r3,4(r5)
    1ee4:	b0800117 	ldw	r2,4(r22)
    1ee8:	1080004c 	andi	r2,r2,1
    1eec:	2084b03a 	or	r2,r4,r2
    1ef0:	b0800115 	stw	r2,4(r22)
    1ef4:	313fdd2e 	bgeu	r6,r4,1e6c <_malloc_r+0x58c>
    1ef8:	b1400204 	addi	r5,r22,8
    1efc:	9009883a 	mov	r4,r18
    1f00:	00083900 	call	8390 <_free_r>
    1f04:	e4000217 	ldw	r16,8(fp)
    1f08:	003fd806 	br	1e6c <_malloc_r+0x58c>
    1f0c:	00800504 	movi	r2,20
    1f10:	11001536 	bltu	r2,r4,1f68 <_malloc_r+0x688>
    1f14:	210016c4 	addi	r4,r4,91
    1f18:	200690fa 	slli	r3,r4,3
    1f1c:	003fa606 	br	1db8 <_malloc_r+0x4d8>
    1f20:	8804d4ba 	srli	r2,r17,18
    1f24:	11801f04 	addi	r6,r2,124
    1f28:	300490fa 	slli	r2,r6,3
    1f2c:	003e9906 	br	1994 <_malloc_r+0xb4>
    1f30:	2009d0ba 	srai	r4,r4,2
    1f34:	01400074 	movhi	r5,1
    1f38:	294f4604 	addi	r5,r5,15640
    1f3c:	00c00044 	movi	r3,1
    1f40:	28800117 	ldw	r2,4(r5)
    1f44:	1906983a 	sll	r3,r3,r4
    1f48:	10c4b03a 	or	r2,r2,r3
    1f4c:	28800115 	stw	r2,4(r5)
    1f50:	003fa306 	br	1de0 <_malloc_r+0x500>
    1f54:	0027883a 	mov	r19,zero
    1f58:	00c00044 	movi	r3,1
    1f5c:	003f8606 	br	1d78 <_malloc_r+0x498>
    1f60:	d1200415 	stw	r4,-32752(gp)
    1f64:	003f7306 	br	1d34 <_malloc_r+0x454>
    1f68:	00801504 	movi	r2,84
    1f6c:	11001936 	bltu	r2,r4,1fd4 <_malloc_r+0x6f4>
    1f70:	2804d33a 	srli	r2,r5,12
    1f74:	11001b84 	addi	r4,r2,110
    1f78:	200690fa 	slli	r3,r4,3
    1f7c:	003f8e06 	br	1db8 <_malloc_r+0x4d8>
    1f80:	480b883a 	mov	r5,r9
    1f84:	6807883a 	mov	r3,r13
    1f88:	288000cc 	andi	r2,r5,3
    1f8c:	18fffe04 	addi	r3,r3,-8
    1f90:	297fffc4 	addi	r5,r5,-1
    1f94:	10001526 	beq	r2,zero,1fec <_malloc_r+0x70c>
    1f98:	18800217 	ldw	r2,8(r3)
    1f9c:	10fffa26 	beq	r2,r3,1f88 <_malloc_r+0x6a8>
    1fa0:	2109883a 	add	r4,r4,r4
    1fa4:	393f1e36 	bltu	r7,r4,1c20 <_malloc_r+0x340>
    1fa8:	203f1d26 	beq	r4,zero,1c20 <_malloc_r+0x340>
    1fac:	21c4703a 	and	r2,r4,r7
    1fb0:	10000226 	beq	r2,zero,1fbc <_malloc_r+0x6dc>
    1fb4:	6013883a 	mov	r9,r12
    1fb8:	003ee106 	br	1b40 <_malloc_r+0x260>
    1fbc:	2109883a 	add	r4,r4,r4
    1fc0:	3904703a 	and	r2,r7,r4
    1fc4:	63000104 	addi	r12,r12,4
    1fc8:	103ffc26 	beq	r2,zero,1fbc <_malloc_r+0x6dc>
    1fcc:	6013883a 	mov	r9,r12
    1fd0:	003edb06 	br	1b40 <_malloc_r+0x260>
    1fd4:	00805504 	movi	r2,340
    1fd8:	11000836 	bltu	r2,r4,1ffc <_malloc_r+0x71c>
    1fdc:	2804d3fa 	srli	r2,r5,15
    1fe0:	11001dc4 	addi	r4,r2,119
    1fe4:	200690fa 	slli	r3,r4,3
    1fe8:	003f7306 	br	1db8 <_malloc_r+0x4d8>
    1fec:	0104303a 	nor	r2,zero,r4
    1ff0:	388e703a 	and	r7,r7,r2
    1ff4:	e1c00115 	stw	r7,4(fp)
    1ff8:	003fe906 	br	1fa0 <_malloc_r+0x6c0>
    1ffc:	00815504 	movi	r2,1364
    2000:	1100032e 	bgeu	r2,r4,2010 <_malloc_r+0x730>
    2004:	01001f84 	movi	r4,126
    2008:	00c0fc04 	movi	r3,1008
    200c:	003f6a06 	br	1db8 <_malloc_r+0x4d8>
    2010:	2804d4ba 	srli	r2,r5,18
    2014:	11001f04 	addi	r4,r2,124
    2018:	200690fa 	slli	r3,r4,3
    201c:	003f6606 	br	1db8 <_malloc_r+0x4d8>

00002020 <memchr>:
    2020:	008000c4 	movi	r2,3
    2024:	29403fcc 	andi	r5,r5,255
    2028:	2007883a 	mov	r3,r4
    202c:	1180022e 	bgeu	r2,r6,2038 <memchr+0x18>
    2030:	2084703a 	and	r2,r4,r2
    2034:	10000b26 	beq	r2,zero,2064 <memchr+0x44>
    2038:	313fffc4 	addi	r4,r6,-1
    203c:	3000051e 	bne	r6,zero,2054 <memchr+0x34>
    2040:	00002c06 	br	20f4 <memchr+0xd4>
    2044:	213fffc4 	addi	r4,r4,-1
    2048:	00bfffc4 	movi	r2,-1
    204c:	18c00044 	addi	r3,r3,1
    2050:	20802826 	beq	r4,r2,20f4 <memchr+0xd4>
    2054:	18800003 	ldbu	r2,0(r3)
    2058:	28bffa1e 	bne	r5,r2,2044 <memchr+0x24>
    205c:	1805883a 	mov	r2,r3
    2060:	f800283a 	ret
    2064:	0011883a 	mov	r8,zero
    2068:	0007883a 	mov	r3,zero
    206c:	01c00104 	movi	r7,4
    2070:	4004923a 	slli	r2,r8,8
    2074:	18c00044 	addi	r3,r3,1
    2078:	1151883a 	add	r8,r2,r5
    207c:	19fffc1e 	bne	r3,r7,2070 <memchr+0x50>
    2080:	02bfbff4 	movhi	r10,65279
    2084:	52bfbfc4 	addi	r10,r10,-257
    2088:	02602074 	movhi	r9,32897
    208c:	4a602004 	addi	r9,r9,-32640
    2090:	02c000c4 	movi	r11,3
    2094:	20800017 	ldw	r2,0(r4)
    2098:	31bfff04 	addi	r6,r6,-4
    209c:	200f883a 	mov	r7,r4
    20a0:	1204f03a 	xor	r2,r2,r8
    20a4:	1287883a 	add	r3,r2,r10
    20a8:	1a46703a 	and	r3,r3,r9
    20ac:	0084303a 	nor	r2,zero,r2
    20b0:	10c4703a 	and	r2,r2,r3
    20b4:	10000b26 	beq	r2,zero,20e4 <memchr+0xc4>
    20b8:	20800003 	ldbu	r2,0(r4)
    20bc:	28800f26 	beq	r5,r2,20fc <memchr+0xdc>
    20c0:	20800043 	ldbu	r2,1(r4)
    20c4:	21c00044 	addi	r7,r4,1
    20c8:	28800c26 	beq	r5,r2,20fc <memchr+0xdc>
    20cc:	20800083 	ldbu	r2,2(r4)
    20d0:	21c00084 	addi	r7,r4,2
    20d4:	28800926 	beq	r5,r2,20fc <memchr+0xdc>
    20d8:	208000c3 	ldbu	r2,3(r4)
    20dc:	21c000c4 	addi	r7,r4,3
    20e0:	28800626 	beq	r5,r2,20fc <memchr+0xdc>
    20e4:	21000104 	addi	r4,r4,4
    20e8:	59bfea36 	bltu	r11,r6,2094 <memchr+0x74>
    20ec:	2007883a 	mov	r3,r4
    20f0:	003fd106 	br	2038 <memchr+0x18>
    20f4:	0005883a 	mov	r2,zero
    20f8:	f800283a 	ret
    20fc:	3805883a 	mov	r2,r7
    2100:	f800283a 	ret

00002104 <memcpy>:
    2104:	01c003c4 	movi	r7,15
    2108:	2007883a 	mov	r3,r4
    210c:	3980032e 	bgeu	r7,r6,211c <memcpy+0x18>
    2110:	2904b03a 	or	r2,r5,r4
    2114:	108000cc 	andi	r2,r2,3
    2118:	10000926 	beq	r2,zero,2140 <memcpy+0x3c>
    211c:	30000626 	beq	r6,zero,2138 <memcpy+0x34>
    2120:	30cd883a 	add	r6,r6,r3
    2124:	28800003 	ldbu	r2,0(r5)
    2128:	29400044 	addi	r5,r5,1
    212c:	18800005 	stb	r2,0(r3)
    2130:	18c00044 	addi	r3,r3,1
    2134:	30fffb1e 	bne	r6,r3,2124 <memcpy+0x20>
    2138:	2005883a 	mov	r2,r4
    213c:	f800283a 	ret
    2140:	3811883a 	mov	r8,r7
    2144:	200f883a 	mov	r7,r4
    2148:	28c00017 	ldw	r3,0(r5)
    214c:	31bffc04 	addi	r6,r6,-16
    2150:	38c00015 	stw	r3,0(r7)
    2154:	28800117 	ldw	r2,4(r5)
    2158:	38800115 	stw	r2,4(r7)
    215c:	28c00217 	ldw	r3,8(r5)
    2160:	38c00215 	stw	r3,8(r7)
    2164:	28800317 	ldw	r2,12(r5)
    2168:	29400404 	addi	r5,r5,16
    216c:	38800315 	stw	r2,12(r7)
    2170:	39c00404 	addi	r7,r7,16
    2174:	41bff436 	bltu	r8,r6,2148 <memcpy+0x44>
    2178:	008000c4 	movi	r2,3
    217c:	1180072e 	bgeu	r2,r6,219c <memcpy+0x98>
    2180:	1007883a 	mov	r3,r2
    2184:	28800017 	ldw	r2,0(r5)
    2188:	31bfff04 	addi	r6,r6,-4
    218c:	29400104 	addi	r5,r5,4
    2190:	38800015 	stw	r2,0(r7)
    2194:	39c00104 	addi	r7,r7,4
    2198:	19bffa36 	bltu	r3,r6,2184 <memcpy+0x80>
    219c:	3807883a 	mov	r3,r7
    21a0:	003fde06 	br	211c <memcpy+0x18>

000021a4 <memset>:
    21a4:	008000c4 	movi	r2,3
    21a8:	29403fcc 	andi	r5,r5,255
    21ac:	2007883a 	mov	r3,r4
    21b0:	1180022e 	bgeu	r2,r6,21bc <memset+0x18>
    21b4:	2084703a 	and	r2,r4,r2
    21b8:	10000826 	beq	r2,zero,21dc <memset+0x38>
    21bc:	30000526 	beq	r6,zero,21d4 <memset+0x30>
    21c0:	2805883a 	mov	r2,r5
    21c4:	30cd883a 	add	r6,r6,r3
    21c8:	18800005 	stb	r2,0(r3)
    21cc:	18c00044 	addi	r3,r3,1
    21d0:	19bffd1e 	bne	r3,r6,21c8 <memset+0x24>
    21d4:	2005883a 	mov	r2,r4
    21d8:	f800283a 	ret
    21dc:	2804923a 	slli	r2,r5,8
    21e0:	020003c4 	movi	r8,15
    21e4:	200f883a 	mov	r7,r4
    21e8:	2884b03a 	or	r2,r5,r2
    21ec:	1006943a 	slli	r3,r2,16
    21f0:	10c6b03a 	or	r3,r2,r3
    21f4:	41800a2e 	bgeu	r8,r6,2220 <memset+0x7c>
    21f8:	4005883a 	mov	r2,r8
    21fc:	31bffc04 	addi	r6,r6,-16
    2200:	38c00015 	stw	r3,0(r7)
    2204:	38c00115 	stw	r3,4(r7)
    2208:	38c00215 	stw	r3,8(r7)
    220c:	38c00315 	stw	r3,12(r7)
    2210:	39c00404 	addi	r7,r7,16
    2214:	11bff936 	bltu	r2,r6,21fc <memset+0x58>
    2218:	008000c4 	movi	r2,3
    221c:	1180052e 	bgeu	r2,r6,2234 <memset+0x90>
    2220:	31bfff04 	addi	r6,r6,-4
    2224:	008000c4 	movi	r2,3
    2228:	38c00015 	stw	r3,0(r7)
    222c:	39c00104 	addi	r7,r7,4
    2230:	11bffb36 	bltu	r2,r6,2220 <memset+0x7c>
    2234:	3807883a 	mov	r3,r7
    2238:	003fe006 	br	21bc <memset+0x18>

0000223c <printf>:
    223c:	defffb04 	addi	sp,sp,-20
    2240:	dfc00115 	stw	ra,4(sp)
    2244:	d9400215 	stw	r5,8(sp)
    2248:	d9800315 	stw	r6,12(sp)
    224c:	d9c00415 	stw	r7,16(sp)
    2250:	00800074 	movhi	r2,1
    2254:	1094d804 	addi	r2,r2,21344
    2258:	10c00017 	ldw	r3,0(r2)
    225c:	200b883a 	mov	r5,r4
    2260:	d8800204 	addi	r2,sp,8
    2264:	19000217 	ldw	r4,8(r3)
    2268:	100d883a 	mov	r6,r2
    226c:	d8800015 	stw	r2,0(sp)
    2270:	0004b400 	call	4b40 <__vfprintf_internal>
    2274:	dfc00117 	ldw	ra,4(sp)
    2278:	dec00504 	addi	sp,sp,20
    227c:	f800283a 	ret

00002280 <_printf_r>:
    2280:	defffc04 	addi	sp,sp,-16
    2284:	dfc00115 	stw	ra,4(sp)
    2288:	d9800215 	stw	r6,8(sp)
    228c:	d9c00315 	stw	r7,12(sp)
    2290:	280d883a 	mov	r6,r5
    2294:	21400217 	ldw	r5,8(r4)
    2298:	d8c00204 	addi	r3,sp,8
    229c:	180f883a 	mov	r7,r3
    22a0:	d8c00015 	stw	r3,0(sp)
    22a4:	0002c940 	call	2c94 <___vfprintf_internal_r>
    22a8:	dfc00117 	ldw	ra,4(sp)
    22ac:	dec00404 	addi	sp,sp,16
    22b0:	f800283a 	ret

000022b4 <putchar>:
    22b4:	00800074 	movhi	r2,1
    22b8:	1094d804 	addi	r2,r2,21344
    22bc:	11800017 	ldw	r6,0(r2)
    22c0:	200b883a 	mov	r5,r4
    22c4:	3009883a 	mov	r4,r6
    22c8:	31800217 	ldw	r6,8(r6)
    22cc:	000a1141 	jmpi	a114 <_putc_r>

000022d0 <_putchar_r>:
    22d0:	21800217 	ldw	r6,8(r4)
    22d4:	000a1141 	jmpi	a114 <_putc_r>

000022d8 <_puts_r>:
    22d8:	defff604 	addi	sp,sp,-40
    22dc:	dc400715 	stw	r17,28(sp)
    22e0:	2023883a 	mov	r17,r4
    22e4:	2809883a 	mov	r4,r5
    22e8:	dfc00915 	stw	ra,36(sp)
    22ec:	dcc00815 	stw	r19,32(sp)
    22f0:	2827883a 	mov	r19,r5
    22f4:	0002bc80 	call	2bc8 <strlen>
    22f8:	89400217 	ldw	r5,8(r17)
    22fc:	00c00074 	movhi	r3,1
    2300:	18cd4804 	addi	r3,r3,13600
    2304:	01c00044 	movi	r7,1
    2308:	12000044 	addi	r8,r2,1
    230c:	d8c00515 	stw	r3,20(sp)
    2310:	d9c00615 	stw	r7,24(sp)
    2314:	d8c00304 	addi	r3,sp,12
    2318:	01c00084 	movi	r7,2
    231c:	8809883a 	mov	r4,r17
    2320:	d80d883a 	mov	r6,sp
    2324:	d8c00015 	stw	r3,0(sp)
    2328:	dcc00315 	stw	r19,12(sp)
    232c:	da000215 	stw	r8,8(sp)
    2330:	d9c00115 	stw	r7,4(sp)
    2334:	d8800415 	stw	r2,16(sp)
    2338:	00086a40 	call	86a4 <__sfvwrite_r>
    233c:	00ffffc4 	movi	r3,-1
    2340:	10000626 	beq	r2,zero,235c <_puts_r+0x84>
    2344:	1805883a 	mov	r2,r3
    2348:	dfc00917 	ldw	ra,36(sp)
    234c:	dcc00817 	ldw	r19,32(sp)
    2350:	dc400717 	ldw	r17,28(sp)
    2354:	dec00a04 	addi	sp,sp,40
    2358:	f800283a 	ret
    235c:	00c00284 	movi	r3,10
    2360:	1805883a 	mov	r2,r3
    2364:	dfc00917 	ldw	ra,36(sp)
    2368:	dcc00817 	ldw	r19,32(sp)
    236c:	dc400717 	ldw	r17,28(sp)
    2370:	dec00a04 	addi	sp,sp,40
    2374:	f800283a 	ret

00002378 <puts>:
    2378:	00800074 	movhi	r2,1
    237c:	1094d804 	addi	r2,r2,21344
    2380:	200b883a 	mov	r5,r4
    2384:	11000017 	ldw	r4,0(r2)
    2388:	00022d81 	jmpi	22d8 <_puts_r>

0000238c <__srefill_r>:
    238c:	defffd04 	addi	sp,sp,-12
    2390:	dc400115 	stw	r17,4(sp)
    2394:	dc000015 	stw	r16,0(sp)
    2398:	dfc00215 	stw	ra,8(sp)
    239c:	2023883a 	mov	r17,r4
    23a0:	2821883a 	mov	r16,r5
    23a4:	20000226 	beq	r4,zero,23b0 <__srefill_r+0x24>
    23a8:	20800e17 	ldw	r2,56(r4)
    23ac:	10004126 	beq	r2,zero,24b4 <__srefill_r+0x128>
    23b0:	80c0030b 	ldhu	r3,12(r16)
    23b4:	80000115 	stw	zero,4(r16)
    23b8:	1880080c 	andi	r2,r3,32
    23bc:	1000361e 	bne	r2,zero,2498 <__srefill_r+0x10c>
    23c0:	1880010c 	andi	r2,r3,4
    23c4:	1000211e 	bne	r2,zero,244c <__srefill_r+0xc0>
    23c8:	1880040c 	andi	r2,r3,16
    23cc:	10005026 	beq	r2,zero,2510 <__srefill_r+0x184>
    23d0:	1880020c 	andi	r2,r3,8
    23d4:	1000541e 	bne	r2,zero,2528 <__srefill_r+0x19c>
    23d8:	8080030b 	ldhu	r2,12(r16)
    23dc:	10800114 	ori	r2,r2,4
    23e0:	8080030d 	sth	r2,12(r16)
    23e4:	80800417 	ldw	r2,16(r16)
    23e8:	10004526 	beq	r2,zero,2500 <__srefill_r+0x174>
    23ec:	8080030b 	ldhu	r2,12(r16)
    23f0:	108000cc 	andi	r2,r2,3
    23f4:	1000361e 	bne	r2,zero,24d0 <__srefill_r+0x144>
    23f8:	81800417 	ldw	r6,16(r16)
    23fc:	80c00817 	ldw	r3,32(r16)
    2400:	81400717 	ldw	r5,28(r16)
    2404:	81c00517 	ldw	r7,20(r16)
    2408:	8809883a 	mov	r4,r17
    240c:	81800015 	stw	r6,0(r16)
    2410:	183ee83a 	callr	r3
    2414:	80c0030b 	ldhu	r3,12(r16)
    2418:	1009883a 	mov	r4,r2
    241c:	80800115 	stw	r2,4(r16)
    2420:	00b7ffc4 	movi	r2,-8193
    2424:	1884703a 	and	r2,r3,r2
    2428:	8080030d 	sth	r2,12(r16)
    242c:	0100230e 	bge	zero,r4,24bc <__srefill_r+0x130>
    2430:	0009883a 	mov	r4,zero
    2434:	2005883a 	mov	r2,r4
    2438:	dfc00217 	ldw	ra,8(sp)
    243c:	dc400117 	ldw	r17,4(sp)
    2440:	dc000017 	ldw	r16,0(sp)
    2444:	dec00304 	addi	sp,sp,12
    2448:	f800283a 	ret
    244c:	81400c17 	ldw	r5,48(r16)
    2450:	283fe426 	beq	r5,zero,23e4 <__srefill_r+0x58>
    2454:	80801004 	addi	r2,r16,64
    2458:	28800226 	beq	r5,r2,2464 <__srefill_r+0xd8>
    245c:	8809883a 	mov	r4,r17
    2460:	00083900 	call	8390 <_free_r>
    2464:	80800f17 	ldw	r2,60(r16)
    2468:	80000c15 	stw	zero,48(r16)
    246c:	80800115 	stw	r2,4(r16)
    2470:	103fdc26 	beq	r2,zero,23e4 <__srefill_r+0x58>
    2474:	80800e17 	ldw	r2,56(r16)
    2478:	0009883a 	mov	r4,zero
    247c:	80800015 	stw	r2,0(r16)
    2480:	2005883a 	mov	r2,r4
    2484:	dfc00217 	ldw	ra,8(sp)
    2488:	dc400117 	ldw	r17,4(sp)
    248c:	dc000017 	ldw	r16,0(sp)
    2490:	dec00304 	addi	sp,sp,12
    2494:	f800283a 	ret
    2498:	013fffc4 	movi	r4,-1
    249c:	2005883a 	mov	r2,r4
    24a0:	dfc00217 	ldw	ra,8(sp)
    24a4:	dc400117 	ldw	r17,4(sp)
    24a8:	dc000017 	ldw	r16,0(sp)
    24ac:	dec00304 	addi	sp,sp,12
    24b0:	f800283a 	ret
    24b4:	00015080 	call	1508 <__sinit>
    24b8:	003fbd06 	br	23b0 <__srefill_r+0x24>
    24bc:	20000b1e 	bne	r4,zero,24ec <__srefill_r+0x160>
    24c0:	10800814 	ori	r2,r2,32
    24c4:	013fffc4 	movi	r4,-1
    24c8:	8080030d 	sth	r2,12(r16)
    24cc:	003fd906 	br	2434 <__srefill_r+0xa8>
    24d0:	00800074 	movhi	r2,1
    24d4:	1094d904 	addi	r2,r2,21348
    24d8:	11000017 	ldw	r4,0(r2)
    24dc:	01400034 	movhi	r5,0
    24e0:	29495404 	addi	r5,r5,9552
    24e4:	00018280 	call	1828 <_fwalk>
    24e8:	003fc306 	br	23f8 <__srefill_r+0x6c>
    24ec:	10801014 	ori	r2,r2,64
    24f0:	013fffc4 	movi	r4,-1
    24f4:	8080030d 	sth	r2,12(r16)
    24f8:	80000115 	stw	zero,4(r16)
    24fc:	003fcd06 	br	2434 <__srefill_r+0xa8>
    2500:	8809883a 	mov	r4,r17
    2504:	800b883a 	mov	r5,r16
    2508:	0008ca80 	call	8ca8 <__smakebuf_r>
    250c:	003fb706 	br	23ec <__srefill_r+0x60>
    2510:	18c01014 	ori	r3,r3,64
    2514:	00800244 	movi	r2,9
    2518:	013fffc4 	movi	r4,-1
    251c:	88800015 	stw	r2,0(r17)
    2520:	80c0030d 	sth	r3,12(r16)
    2524:	003fc306 	br	2434 <__srefill_r+0xa8>
    2528:	8809883a 	mov	r4,r17
    252c:	800b883a 	mov	r5,r16
    2530:	0007df80 	call	7df8 <_fflush_r>
    2534:	103fd81e 	bne	r2,zero,2498 <__srefill_r+0x10c>
    2538:	8080030b 	ldhu	r2,12(r16)
    253c:	80000215 	stw	zero,8(r16)
    2540:	80000615 	stw	zero,24(r16)
    2544:	10bffdcc 	andi	r2,r2,65527
    2548:	8080030d 	sth	r2,12(r16)
    254c:	003fa206 	br	23d8 <__srefill_r+0x4c>

00002550 <lflush>:
    2550:	20c0030b 	ldhu	r3,12(r4)
    2554:	01400244 	movi	r5,9
    2558:	0005883a 	mov	r2,zero
    255c:	18c0024c 	andi	r3,r3,9
    2560:	19400126 	beq	r3,r5,2568 <lflush+0x18>
    2564:	f800283a 	ret
    2568:	0007ff41 	jmpi	7ff4 <fflush>

0000256c <_sbrk_r>:
    256c:	defffd04 	addi	sp,sp,-12
    2570:	dc000015 	stw	r16,0(sp)
    2574:	04000074 	movhi	r16,1
    2578:	841b9c04 	addi	r16,r16,28272
    257c:	dc400115 	stw	r17,4(sp)
    2580:	80000015 	stw	zero,0(r16)
    2584:	2023883a 	mov	r17,r4
    2588:	2809883a 	mov	r4,r5
    258c:	dfc00215 	stw	ra,8(sp)
    2590:	0010d5c0 	call	10d5c <sbrk>
    2594:	1007883a 	mov	r3,r2
    2598:	00bfffc4 	movi	r2,-1
    259c:	18800626 	beq	r3,r2,25b8 <_sbrk_r+0x4c>
    25a0:	1805883a 	mov	r2,r3
    25a4:	dfc00217 	ldw	ra,8(sp)
    25a8:	dc400117 	ldw	r17,4(sp)
    25ac:	dc000017 	ldw	r16,0(sp)
    25b0:	dec00304 	addi	sp,sp,12
    25b4:	f800283a 	ret
    25b8:	80800017 	ldw	r2,0(r16)
    25bc:	103ff826 	beq	r2,zero,25a0 <_sbrk_r+0x34>
    25c0:	88800015 	stw	r2,0(r17)
    25c4:	1805883a 	mov	r2,r3
    25c8:	dfc00217 	ldw	ra,8(sp)
    25cc:	dc400117 	ldw	r17,4(sp)
    25d0:	dc000017 	ldw	r16,0(sp)
    25d4:	dec00304 	addi	sp,sp,12
    25d8:	f800283a 	ret

000025dc <sprintf>:
    25dc:	deffe504 	addi	sp,sp,-108
    25e0:	2013883a 	mov	r9,r4
    25e4:	dfc01815 	stw	ra,96(sp)
    25e8:	d9801915 	stw	r6,100(sp)
    25ec:	d9c01a15 	stw	r7,104(sp)
    25f0:	d8801904 	addi	r2,sp,100
    25f4:	d8800015 	stw	r2,0(sp)
    25f8:	00800074 	movhi	r2,1
    25fc:	1094d804 	addi	r2,r2,21344
    2600:	11000017 	ldw	r4,0(r2)
    2604:	d9c00017 	ldw	r7,0(sp)
    2608:	00808204 	movi	r2,520
    260c:	00e00034 	movhi	r3,32768
    2610:	18ffffc4 	addi	r3,r3,-1
    2614:	280d883a 	mov	r6,r5
    2618:	d880040d 	sth	r2,16(sp)
    261c:	d9400104 	addi	r5,sp,4
    2620:	00bfffc4 	movi	r2,-1
    2624:	d8c00615 	stw	r3,24(sp)
    2628:	d8c00315 	stw	r3,12(sp)
    262c:	da400515 	stw	r9,20(sp)
    2630:	d880048d 	sth	r2,18(sp)
    2634:	da400115 	stw	r9,4(sp)
    2638:	0002c940 	call	2c94 <___vfprintf_internal_r>
    263c:	d8c00117 	ldw	r3,4(sp)
    2640:	18000005 	stb	zero,0(r3)
    2644:	dfc01817 	ldw	ra,96(sp)
    2648:	dec01b04 	addi	sp,sp,108
    264c:	f800283a 	ret

00002650 <_sprintf_r>:
    2650:	deffe604 	addi	sp,sp,-104
    2654:	2813883a 	mov	r9,r5
    2658:	dfc01815 	stw	ra,96(sp)
    265c:	d9c01915 	stw	r7,100(sp)
    2660:	d8801904 	addi	r2,sp,100
    2664:	d8800015 	stw	r2,0(sp)
    2668:	100f883a 	mov	r7,r2
    266c:	00808204 	movi	r2,520
    2670:	00e00034 	movhi	r3,32768
    2674:	18ffffc4 	addi	r3,r3,-1
    2678:	d880040d 	sth	r2,16(sp)
    267c:	d9400104 	addi	r5,sp,4
    2680:	00bfffc4 	movi	r2,-1
    2684:	d8c00615 	stw	r3,24(sp)
    2688:	d8c00315 	stw	r3,12(sp)
    268c:	da400515 	stw	r9,20(sp)
    2690:	d880048d 	sth	r2,18(sp)
    2694:	da400115 	stw	r9,4(sp)
    2698:	0002c940 	call	2c94 <___vfprintf_internal_r>
    269c:	d8c00117 	ldw	r3,4(sp)
    26a0:	18000005 	stb	zero,0(r3)
    26a4:	dfc01817 	ldw	ra,96(sp)
    26a8:	dec01a04 	addi	sp,sp,104
    26ac:	f800283a 	ret

000026b0 <eofread>:
    26b0:	0005883a 	mov	r2,zero
    26b4:	f800283a 	ret

000026b8 <_sscanf_r>:
    26b8:	deffe404 	addi	sp,sp,-112
    26bc:	dcc01915 	stw	r19,100(sp)
    26c0:	2027883a 	mov	r19,r4
    26c4:	dfc01a15 	stw	ra,104(sp)
    26c8:	dc401815 	stw	r17,96(sp)
    26cc:	d9c01b15 	stw	r7,108(sp)
    26d0:	00808104 	movi	r2,516
    26d4:	2809883a 	mov	r4,r5
    26d8:	3023883a 	mov	r17,r6
    26dc:	d9400115 	stw	r5,4(sp)
    26e0:	d9400515 	stw	r5,20(sp)
    26e4:	d880040d 	sth	r2,16(sp)
    26e8:	0002bc80 	call	2bc8 <strlen>
    26ec:	d8c01b04 	addi	r3,sp,108
    26f0:	d8c00015 	stw	r3,0(sp)
    26f4:	180f883a 	mov	r7,r3
    26f8:	023fffc4 	movi	r8,-1
    26fc:	00c00034 	movhi	r3,0
    2700:	18c9ac04 	addi	r3,r3,9904
    2704:	9809883a 	mov	r4,r19
    2708:	880d883a 	mov	r6,r17
    270c:	d9400104 	addi	r5,sp,4
    2710:	d8800615 	stw	r2,24(sp)
    2714:	d8c00915 	stw	r3,36(sp)
    2718:	da00048d 	sth	r8,18(sp)
    271c:	d8800215 	stw	r2,8(sp)
    2720:	d8000d15 	stw	zero,52(sp)
    2724:	d8001215 	stw	zero,72(sp)
    2728:	0004b640 	call	4b64 <__svfscanf_r>
    272c:	dfc01a17 	ldw	ra,104(sp)
    2730:	dcc01917 	ldw	r19,100(sp)
    2734:	dc401817 	ldw	r17,96(sp)
    2738:	dec01c04 	addi	sp,sp,112
    273c:	f800283a 	ret

00002740 <sscanf>:
    2740:	deffe404 	addi	sp,sp,-112
    2744:	dfc01915 	stw	ra,100(sp)
    2748:	dc401815 	stw	r17,96(sp)
    274c:	d9801a15 	stw	r6,104(sp)
    2750:	d9c01b15 	stw	r7,108(sp)
    2754:	00808104 	movi	r2,516
    2758:	2823883a 	mov	r17,r5
    275c:	d9000515 	stw	r4,20(sp)
    2760:	d9000115 	stw	r4,4(sp)
    2764:	d880040d 	sth	r2,16(sp)
    2768:	0002bc80 	call	2bc8 <strlen>
    276c:	d8c01a04 	addi	r3,sp,104
    2770:	d8c00015 	stw	r3,0(sp)
    2774:	00c00074 	movhi	r3,1
    2778:	18d4d804 	addi	r3,r3,21344
    277c:	19000017 	ldw	r4,0(r3)
    2780:	d9c00017 	ldw	r7,0(sp)
    2784:	00c00034 	movhi	r3,0
    2788:	18c9ac04 	addi	r3,r3,9904
    278c:	023fffc4 	movi	r8,-1
    2790:	880d883a 	mov	r6,r17
    2794:	d9400104 	addi	r5,sp,4
    2798:	d8800615 	stw	r2,24(sp)
    279c:	d8c00915 	stw	r3,36(sp)
    27a0:	da00048d 	sth	r8,18(sp)
    27a4:	d8800215 	stw	r2,8(sp)
    27a8:	d8000d15 	stw	zero,52(sp)
    27ac:	d8001215 	stw	zero,72(sp)
    27b0:	0004b640 	call	4b64 <__svfscanf_r>
    27b4:	dfc01917 	ldw	ra,100(sp)
    27b8:	dc401817 	ldw	r17,96(sp)
    27bc:	dec01c04 	addi	sp,sp,112
    27c0:	f800283a 	ret

000027c4 <__sclose>:
    27c4:	2940038f 	ldh	r5,14(r5)
    27c8:	00064981 	jmpi	6498 <_close_r>

000027cc <__sseek>:
    27cc:	defffe04 	addi	sp,sp,-8
    27d0:	dc000015 	stw	r16,0(sp)
    27d4:	2821883a 	mov	r16,r5
    27d8:	2940038f 	ldh	r5,14(r5)
    27dc:	dfc00115 	stw	ra,4(sp)
    27e0:	0008c300 	call	8c30 <_lseek_r>
    27e4:	1007883a 	mov	r3,r2
    27e8:	00bfffc4 	movi	r2,-1
    27ec:	18800926 	beq	r3,r2,2814 <__sseek+0x48>
    27f0:	8080030b 	ldhu	r2,12(r16)
    27f4:	80c01415 	stw	r3,80(r16)
    27f8:	10840014 	ori	r2,r2,4096
    27fc:	8080030d 	sth	r2,12(r16)
    2800:	1805883a 	mov	r2,r3
    2804:	dfc00117 	ldw	ra,4(sp)
    2808:	dc000017 	ldw	r16,0(sp)
    280c:	dec00204 	addi	sp,sp,8
    2810:	f800283a 	ret
    2814:	8080030b 	ldhu	r2,12(r16)
    2818:	10bbffcc 	andi	r2,r2,61439
    281c:	8080030d 	sth	r2,12(r16)
    2820:	1805883a 	mov	r2,r3
    2824:	dfc00117 	ldw	ra,4(sp)
    2828:	dc000017 	ldw	r16,0(sp)
    282c:	dec00204 	addi	sp,sp,8
    2830:	f800283a 	ret

00002834 <__swrite>:
    2834:	2880030b 	ldhu	r2,12(r5)
    2838:	defffb04 	addi	sp,sp,-20
    283c:	dcc00315 	stw	r19,12(sp)
    2840:	1080400c 	andi	r2,r2,256
    2844:	dc800215 	stw	r18,8(sp)
    2848:	dc400115 	stw	r17,4(sp)
    284c:	dc000015 	stw	r16,0(sp)
    2850:	3027883a 	mov	r19,r6
    2854:	3825883a 	mov	r18,r7
    2858:	dfc00415 	stw	ra,16(sp)
    285c:	2821883a 	mov	r16,r5
    2860:	000d883a 	mov	r6,zero
    2864:	01c00084 	movi	r7,2
    2868:	2023883a 	mov	r17,r4
    286c:	10000226 	beq	r2,zero,2878 <__swrite+0x44>
    2870:	2940038f 	ldh	r5,14(r5)
    2874:	0008c300 	call	8c30 <_lseek_r>
    2878:	8080030b 	ldhu	r2,12(r16)
    287c:	8140038f 	ldh	r5,14(r16)
    2880:	8809883a 	mov	r4,r17
    2884:	10bbffcc 	andi	r2,r2,61439
    2888:	980d883a 	mov	r6,r19
    288c:	900f883a 	mov	r7,r18
    2890:	8080030d 	sth	r2,12(r16)
    2894:	dfc00417 	ldw	ra,16(sp)
    2898:	dcc00317 	ldw	r19,12(sp)
    289c:	dc800217 	ldw	r18,8(sp)
    28a0:	dc400117 	ldw	r17,4(sp)
    28a4:	dc000017 	ldw	r16,0(sp)
    28a8:	dec00504 	addi	sp,sp,20
    28ac:	00062e41 	jmpi	62e4 <_write_r>

000028b0 <__sread>:
    28b0:	defffe04 	addi	sp,sp,-8
    28b4:	dc000015 	stw	r16,0(sp)
    28b8:	2821883a 	mov	r16,r5
    28bc:	2940038f 	ldh	r5,14(r5)
    28c0:	dfc00115 	stw	ra,4(sp)
    28c4:	000a1fc0 	call	a1fc <_read_r>
    28c8:	1007883a 	mov	r3,r2
    28cc:	10000816 	blt	r2,zero,28f0 <__sread+0x40>
    28d0:	80801417 	ldw	r2,80(r16)
    28d4:	10c5883a 	add	r2,r2,r3
    28d8:	80801415 	stw	r2,80(r16)
    28dc:	1805883a 	mov	r2,r3
    28e0:	dfc00117 	ldw	ra,4(sp)
    28e4:	dc000017 	ldw	r16,0(sp)
    28e8:	dec00204 	addi	sp,sp,8
    28ec:	f800283a 	ret
    28f0:	8080030b 	ldhu	r2,12(r16)
    28f4:	10bbffcc 	andi	r2,r2,61439
    28f8:	8080030d 	sth	r2,12(r16)
    28fc:	1805883a 	mov	r2,r3
    2900:	dfc00117 	ldw	ra,4(sp)
    2904:	dc000017 	ldw	r16,0(sp)
    2908:	dec00204 	addi	sp,sp,8
    290c:	f800283a 	ret

00002910 <strcat>:
    2910:	defffe04 	addi	sp,sp,-8
    2914:	208000cc 	andi	r2,r4,3
    2918:	dc000015 	stw	r16,0(sp)
    291c:	dfc00115 	stw	ra,4(sp)
    2920:	2021883a 	mov	r16,r4
    2924:	1000161e 	bne	r2,zero,2980 <strcat+0x70>
    2928:	20c00017 	ldw	r3,0(r4)
    292c:	01bfbff4 	movhi	r6,65279
    2930:	31bfbfc4 	addi	r6,r6,-257
    2934:	02202074 	movhi	r8,32897
    2938:	42202004 	addi	r8,r8,-32640
    293c:	1985883a 	add	r2,r3,r6
    2940:	1204703a 	and	r2,r2,r8
    2944:	00c6303a 	nor	r3,zero,r3
    2948:	1886703a 	and	r3,r3,r2
    294c:	18000c1e 	bne	r3,zero,2980 <strcat+0x70>
    2950:	300f883a 	mov	r7,r6
    2954:	400d883a 	mov	r6,r8
    2958:	21000104 	addi	r4,r4,4
    295c:	20800017 	ldw	r2,0(r4)
    2960:	11c7883a 	add	r3,r2,r7
    2964:	1986703a 	and	r3,r3,r6
    2968:	0084303a 	nor	r2,zero,r2
    296c:	10c4703a 	and	r2,r2,r3
    2970:	103ff926 	beq	r2,zero,2958 <strcat+0x48>
    2974:	20800007 	ldb	r2,0(r4)
    2978:	10000326 	beq	r2,zero,2988 <strcat+0x78>
    297c:	21000044 	addi	r4,r4,1
    2980:	20800007 	ldb	r2,0(r4)
    2984:	103ffd1e 	bne	r2,zero,297c <strcat+0x6c>
    2988:	0002b3c0 	call	2b3c <strcpy>
    298c:	8005883a 	mov	r2,r16
    2990:	dfc00117 	ldw	ra,4(sp)
    2994:	dc000017 	ldw	r16,0(sp)
    2998:	dec00204 	addi	sp,sp,8
    299c:	f800283a 	ret

000029a0 <strchr>:
    29a0:	208000cc 	andi	r2,r4,3
    29a4:	2007883a 	mov	r3,r4
    29a8:	1000311e 	bne	r2,zero,2a70 <strchr+0xd0>
    29ac:	29c03fcc 	andi	r7,r5,255
    29b0:	0015883a 	mov	r10,zero
    29b4:	0007883a 	mov	r3,zero
    29b8:	01400104 	movi	r5,4
    29bc:	5004923a 	slli	r2,r10,8
    29c0:	18c00044 	addi	r3,r3,1
    29c4:	3894b03a 	or	r10,r7,r2
    29c8:	197ffc1e 	bne	r3,r5,29bc <strchr+0x1c>
    29cc:	200d883a 	mov	r6,r4
    29d0:	21000017 	ldw	r4,0(r4)
    29d4:	017fbff4 	movhi	r5,65279
    29d8:	297fbfc4 	addi	r5,r5,-257
    29dc:	02202074 	movhi	r8,32897
    29e0:	42202004 	addi	r8,r8,-32640
    29e4:	2145883a 	add	r2,r4,r5
    29e8:	1204703a 	and	r2,r2,r8
    29ec:	0106303a 	nor	r3,zero,r4
    29f0:	10c4703a 	and	r2,r2,r3
    29f4:	1000151e 	bne	r2,zero,2a4c <strchr+0xac>
    29f8:	2284f03a 	xor	r2,r4,r10
    29fc:	1147883a 	add	r3,r2,r5
    2a00:	1a06703a 	and	r3,r3,r8
    2a04:	0084303a 	nor	r2,zero,r2
    2a08:	10c4703a 	and	r2,r2,r3
    2a0c:	10000f1e 	bne	r2,zero,2a4c <strchr+0xac>
    2a10:	2813883a 	mov	r9,r5
    2a14:	00000106 	br	2a1c <strchr+0x7c>
    2a18:	18000c1e 	bne	r3,zero,2a4c <strchr+0xac>
    2a1c:	31800104 	addi	r6,r6,4
    2a20:	30800017 	ldw	r2,0(r6)
    2a24:	1286f03a 	xor	r3,r2,r10
    2a28:	124b883a 	add	r5,r2,r9
    2a2c:	1a49883a 	add	r4,r3,r9
    2a30:	2a0a703a 	and	r5,r5,r8
    2a34:	0084303a 	nor	r2,zero,r2
    2a38:	2208703a 	and	r4,r4,r8
    2a3c:	00c6303a 	nor	r3,zero,r3
    2a40:	1144703a 	and	r2,r2,r5
    2a44:	1906703a 	and	r3,r3,r4
    2a48:	103ff326 	beq	r2,zero,2a18 <strchr+0x78>
    2a4c:	3007883a 	mov	r3,r6
    2a50:	00000206 	br	2a5c <strchr+0xbc>
    2a54:	38800426 	beq	r7,r2,2a68 <strchr+0xc8>
    2a58:	18c00044 	addi	r3,r3,1
    2a5c:	18800003 	ldbu	r2,0(r3)
    2a60:	103ffc1e 	bne	r2,zero,2a54 <strchr+0xb4>
    2a64:	3800041e 	bne	r7,zero,2a78 <strchr+0xd8>
    2a68:	1805883a 	mov	r2,r3
    2a6c:	f800283a 	ret
    2a70:	29c03fcc 	andi	r7,r5,255
    2a74:	003ff906 	br	2a5c <strchr+0xbc>
    2a78:	0005883a 	mov	r2,zero
    2a7c:	f800283a 	ret

00002a80 <strcmp>:
    2a80:	2144b03a 	or	r2,r4,r5
    2a84:	108000cc 	andi	r2,r2,3
    2a88:	10001d1e 	bne	r2,zero,2b00 <strcmp+0x80>
    2a8c:	200f883a 	mov	r7,r4
    2a90:	28800017 	ldw	r2,0(r5)
    2a94:	21000017 	ldw	r4,0(r4)
    2a98:	280d883a 	mov	r6,r5
    2a9c:	2080161e 	bne	r4,r2,2af8 <strcmp+0x78>
    2aa0:	023fbff4 	movhi	r8,65279
    2aa4:	423fbfc4 	addi	r8,r8,-257
    2aa8:	2207883a 	add	r3,r4,r8
    2aac:	01602074 	movhi	r5,32897
    2ab0:	29602004 	addi	r5,r5,-32640
    2ab4:	1946703a 	and	r3,r3,r5
    2ab8:	0104303a 	nor	r2,zero,r4
    2abc:	10c4703a 	and	r2,r2,r3
    2ac0:	10001c1e 	bne	r2,zero,2b34 <strcmp+0xb4>
    2ac4:	4013883a 	mov	r9,r8
    2ac8:	2811883a 	mov	r8,r5
    2acc:	00000106 	br	2ad4 <strcmp+0x54>
    2ad0:	1800181e 	bne	r3,zero,2b34 <strcmp+0xb4>
    2ad4:	39c00104 	addi	r7,r7,4
    2ad8:	39000017 	ldw	r4,0(r7)
    2adc:	31800104 	addi	r6,r6,4
    2ae0:	31400017 	ldw	r5,0(r6)
    2ae4:	2245883a 	add	r2,r4,r9
    2ae8:	1204703a 	and	r2,r2,r8
    2aec:	0106303a 	nor	r3,zero,r4
    2af0:	1886703a 	and	r3,r3,r2
    2af4:	217ff626 	beq	r4,r5,2ad0 <strcmp+0x50>
    2af8:	3809883a 	mov	r4,r7
    2afc:	300b883a 	mov	r5,r6
    2b00:	20c00007 	ldb	r3,0(r4)
    2b04:	1800051e 	bne	r3,zero,2b1c <strcmp+0x9c>
    2b08:	00000606 	br	2b24 <strcmp+0xa4>
    2b0c:	21000044 	addi	r4,r4,1
    2b10:	20c00007 	ldb	r3,0(r4)
    2b14:	29400044 	addi	r5,r5,1
    2b18:	18000226 	beq	r3,zero,2b24 <strcmp+0xa4>
    2b1c:	28800007 	ldb	r2,0(r5)
    2b20:	18bffa26 	beq	r3,r2,2b0c <strcmp+0x8c>
    2b24:	20c00003 	ldbu	r3,0(r4)
    2b28:	28800003 	ldbu	r2,0(r5)
    2b2c:	1885c83a 	sub	r2,r3,r2
    2b30:	f800283a 	ret
    2b34:	0005883a 	mov	r2,zero
    2b38:	f800283a 	ret

00002b3c <strcpy>:
    2b3c:	2904b03a 	or	r2,r5,r4
    2b40:	108000cc 	andi	r2,r2,3
    2b44:	10000826 	beq	r2,zero,2b68 <strcpy+0x2c>
    2b48:	2007883a 	mov	r3,r4
    2b4c:	28800003 	ldbu	r2,0(r5)
    2b50:	29400044 	addi	r5,r5,1
    2b54:	18800005 	stb	r2,0(r3)
    2b58:	18c00044 	addi	r3,r3,1
    2b5c:	103ffb1e 	bne	r2,zero,2b4c <strcpy+0x10>
    2b60:	2005883a 	mov	r2,r4
    2b64:	f800283a 	ret
    2b68:	29800017 	ldw	r6,0(r5)
    2b6c:	023fbff4 	movhi	r8,65279
    2b70:	423fbfc4 	addi	r8,r8,-257
    2b74:	02a02074 	movhi	r10,32897
    2b78:	52a02004 	addi	r10,r10,-32640
    2b7c:	3205883a 	add	r2,r6,r8
    2b80:	0186303a 	nor	r3,zero,r6
    2b84:	10c4703a 	and	r2,r2,r3
    2b88:	1284703a 	and	r2,r2,r10
    2b8c:	200f883a 	mov	r7,r4
    2b90:	10000b1e 	bne	r2,zero,2bc0 <strcpy+0x84>
    2b94:	4013883a 	mov	r9,r8
    2b98:	5011883a 	mov	r8,r10
    2b9c:	39800015 	stw	r6,0(r7)
    2ba0:	29400104 	addi	r5,r5,4
    2ba4:	29800017 	ldw	r6,0(r5)
    2ba8:	39c00104 	addi	r7,r7,4
    2bac:	3245883a 	add	r2,r6,r9
    2bb0:	0186303a 	nor	r3,zero,r6
    2bb4:	10c4703a 	and	r2,r2,r3
    2bb8:	1204703a 	and	r2,r2,r8
    2bbc:	103ff726 	beq	r2,zero,2b9c <strcpy+0x60>
    2bc0:	3807883a 	mov	r3,r7
    2bc4:	003fe106 	br	2b4c <strcpy+0x10>

00002bc8 <strlen>:
    2bc8:	208000cc 	andi	r2,r4,3
    2bcc:	2011883a 	mov	r8,r4
    2bd0:	1000161e 	bne	r2,zero,2c2c <strlen+0x64>
    2bd4:	20c00017 	ldw	r3,0(r4)
    2bd8:	017fbff4 	movhi	r5,65279
    2bdc:	297fbfc4 	addi	r5,r5,-257
    2be0:	01e02074 	movhi	r7,32897
    2be4:	39e02004 	addi	r7,r7,-32640
    2be8:	1945883a 	add	r2,r3,r5
    2bec:	11c4703a 	and	r2,r2,r7
    2bf0:	00c6303a 	nor	r3,zero,r3
    2bf4:	1886703a 	and	r3,r3,r2
    2bf8:	18000c1e 	bne	r3,zero,2c2c <strlen+0x64>
    2bfc:	280d883a 	mov	r6,r5
    2c00:	380b883a 	mov	r5,r7
    2c04:	21000104 	addi	r4,r4,4
    2c08:	20800017 	ldw	r2,0(r4)
    2c0c:	1187883a 	add	r3,r2,r6
    2c10:	1946703a 	and	r3,r3,r5
    2c14:	0084303a 	nor	r2,zero,r2
    2c18:	10c4703a 	and	r2,r2,r3
    2c1c:	103ff926 	beq	r2,zero,2c04 <strlen+0x3c>
    2c20:	20800007 	ldb	r2,0(r4)
    2c24:	10000326 	beq	r2,zero,2c34 <strlen+0x6c>
    2c28:	21000044 	addi	r4,r4,1
    2c2c:	20800007 	ldb	r2,0(r4)
    2c30:	103ffd1e 	bne	r2,zero,2c28 <strlen+0x60>
    2c34:	2205c83a 	sub	r2,r4,r8
    2c38:	f800283a 	ret

00002c3c <__sprint_r>:
    2c3c:	30800217 	ldw	r2,8(r6)
    2c40:	defffe04 	addi	sp,sp,-8
    2c44:	dc000015 	stw	r16,0(sp)
    2c48:	dfc00115 	stw	ra,4(sp)
    2c4c:	3021883a 	mov	r16,r6
    2c50:	0007883a 	mov	r3,zero
    2c54:	1000061e 	bne	r2,zero,2c70 <__sprint_r+0x34>
    2c58:	1805883a 	mov	r2,r3
    2c5c:	30000115 	stw	zero,4(r6)
    2c60:	dfc00117 	ldw	ra,4(sp)
    2c64:	dc000017 	ldw	r16,0(sp)
    2c68:	dec00204 	addi	sp,sp,8
    2c6c:	f800283a 	ret
    2c70:	00086a40 	call	86a4 <__sfvwrite_r>
    2c74:	1007883a 	mov	r3,r2
    2c78:	1805883a 	mov	r2,r3
    2c7c:	80000115 	stw	zero,4(r16)
    2c80:	80000215 	stw	zero,8(r16)
    2c84:	dfc00117 	ldw	ra,4(sp)
    2c88:	dc000017 	ldw	r16,0(sp)
    2c8c:	dec00204 	addi	sp,sp,8
    2c90:	f800283a 	ret

00002c94 <___vfprintf_internal_r>:
    2c94:	defea404 	addi	sp,sp,-1392
    2c98:	dd815815 	stw	r22,1376(sp)
    2c9c:	dc015215 	stw	r16,1352(sp)
    2ca0:	d9c15115 	stw	r7,1348(sp)
    2ca4:	dfc15b15 	stw	ra,1388(sp)
    2ca8:	df015a15 	stw	fp,1384(sp)
    2cac:	ddc15915 	stw	r23,1380(sp)
    2cb0:	dd415715 	stw	r21,1372(sp)
    2cb4:	dd015615 	stw	r20,1368(sp)
    2cb8:	dcc15515 	stw	r19,1364(sp)
    2cbc:	dc815415 	stw	r18,1360(sp)
    2cc0:	dc415315 	stw	r17,1356(sp)
    2cc4:	282d883a 	mov	r22,r5
    2cc8:	3021883a 	mov	r16,r6
    2ccc:	d9014f15 	stw	r4,1340(sp)
    2cd0:	0008b740 	call	8b74 <_localeconv_r>
    2cd4:	10800017 	ldw	r2,0(r2)
    2cd8:	d9c15117 	ldw	r7,1348(sp)
    2cdc:	d8814915 	stw	r2,1316(sp)
    2ce0:	d8814f17 	ldw	r2,1340(sp)
    2ce4:	10000226 	beq	r2,zero,2cf0 <___vfprintf_internal_r+0x5c>
    2ce8:	10800e17 	ldw	r2,56(r2)
    2cec:	10020d26 	beq	r2,zero,3524 <___vfprintf_internal_r+0x890>
    2cf0:	b080030b 	ldhu	r2,12(r22)
    2cf4:	1080020c 	andi	r2,r2,8
    2cf8:	10020e26 	beq	r2,zero,3534 <___vfprintf_internal_r+0x8a0>
    2cfc:	b0800417 	ldw	r2,16(r22)
    2d00:	10020c26 	beq	r2,zero,3534 <___vfprintf_internal_r+0x8a0>
    2d04:	b200030b 	ldhu	r8,12(r22)
    2d08:	00800284 	movi	r2,10
    2d0c:	40c0068c 	andi	r3,r8,26
    2d10:	18802f1e 	bne	r3,r2,2dd0 <___vfprintf_internal_r+0x13c>
    2d14:	b080038f 	ldh	r2,14(r22)
    2d18:	10002d16 	blt	r2,zero,2dd0 <___vfprintf_internal_r+0x13c>
    2d1c:	b240038b 	ldhu	r9,14(r22)
    2d20:	b2800717 	ldw	r10,28(r22)
    2d24:	b2c00917 	ldw	r11,36(r22)
    2d28:	d9014f17 	ldw	r4,1340(sp)
    2d2c:	dc402904 	addi	r17,sp,164
    2d30:	d8804004 	addi	r2,sp,256
    2d34:	00c10004 	movi	r3,1024
    2d38:	423fff4c 	andi	r8,r8,65533
    2d3c:	800d883a 	mov	r6,r16
    2d40:	880b883a 	mov	r5,r17
    2d44:	da002c0d 	sth	r8,176(sp)
    2d48:	da402c8d 	sth	r9,178(sp)
    2d4c:	da803015 	stw	r10,192(sp)
    2d50:	dac03215 	stw	r11,200(sp)
    2d54:	d8802d15 	stw	r2,180(sp)
    2d58:	d8c02e15 	stw	r3,184(sp)
    2d5c:	d8802915 	stw	r2,164(sp)
    2d60:	d8c02b15 	stw	r3,172(sp)
    2d64:	d8002f15 	stw	zero,188(sp)
    2d68:	0002c940 	call	2c94 <___vfprintf_internal_r>
    2d6c:	d8814b15 	stw	r2,1324(sp)
    2d70:	10000416 	blt	r2,zero,2d84 <___vfprintf_internal_r+0xf0>
    2d74:	d9014f17 	ldw	r4,1340(sp)
    2d78:	880b883a 	mov	r5,r17
    2d7c:	0007df80 	call	7df8 <_fflush_r>
    2d80:	1002321e 	bne	r2,zero,364c <___vfprintf_internal_r+0x9b8>
    2d84:	d8802c0b 	ldhu	r2,176(sp)
    2d88:	1080100c 	andi	r2,r2,64
    2d8c:	10000326 	beq	r2,zero,2d9c <___vfprintf_internal_r+0x108>
    2d90:	b080030b 	ldhu	r2,12(r22)
    2d94:	10801014 	ori	r2,r2,64
    2d98:	b080030d 	sth	r2,12(r22)
    2d9c:	d8814b17 	ldw	r2,1324(sp)
    2da0:	dfc15b17 	ldw	ra,1388(sp)
    2da4:	df015a17 	ldw	fp,1384(sp)
    2da8:	ddc15917 	ldw	r23,1380(sp)
    2dac:	dd815817 	ldw	r22,1376(sp)
    2db0:	dd415717 	ldw	r21,1372(sp)
    2db4:	dd015617 	ldw	r20,1368(sp)
    2db8:	dcc15517 	ldw	r19,1364(sp)
    2dbc:	dc815417 	ldw	r18,1360(sp)
    2dc0:	dc415317 	ldw	r17,1356(sp)
    2dc4:	dc015217 	ldw	r16,1352(sp)
    2dc8:	dec15c04 	addi	sp,sp,1392
    2dcc:	f800283a 	ret
    2dd0:	0005883a 	mov	r2,zero
    2dd4:	0007883a 	mov	r3,zero
    2dd8:	dd401904 	addi	r21,sp,100
    2ddc:	d8814215 	stw	r2,1288(sp)
    2de0:	802f883a 	mov	r23,r16
    2de4:	d8c14315 	stw	r3,1292(sp)
    2de8:	d8014b15 	stw	zero,1324(sp)
    2dec:	d8014815 	stw	zero,1312(sp)
    2df0:	d8014415 	stw	zero,1296(sp)
    2df4:	d8014715 	stw	zero,1308(sp)
    2df8:	dd400c15 	stw	r21,48(sp)
    2dfc:	d8000e15 	stw	zero,56(sp)
    2e00:	d8000d15 	stw	zero,52(sp)
    2e04:	b8800007 	ldb	r2,0(r23)
    2e08:	10001926 	beq	r2,zero,2e70 <___vfprintf_internal_r+0x1dc>
    2e0c:	00c00944 	movi	r3,37
    2e10:	10c01726 	beq	r2,r3,2e70 <___vfprintf_internal_r+0x1dc>
    2e14:	b821883a 	mov	r16,r23
    2e18:	00000106 	br	2e20 <___vfprintf_internal_r+0x18c>
    2e1c:	10c00326 	beq	r2,r3,2e2c <___vfprintf_internal_r+0x198>
    2e20:	84000044 	addi	r16,r16,1
    2e24:	80800007 	ldb	r2,0(r16)
    2e28:	103ffc1e 	bne	r2,zero,2e1c <___vfprintf_internal_r+0x188>
    2e2c:	85e7c83a 	sub	r19,r16,r23
    2e30:	98000e26 	beq	r19,zero,2e6c <___vfprintf_internal_r+0x1d8>
    2e34:	dc800e17 	ldw	r18,56(sp)
    2e38:	dc400d17 	ldw	r17,52(sp)
    2e3c:	008001c4 	movi	r2,7
    2e40:	94e5883a 	add	r18,r18,r19
    2e44:	8c400044 	addi	r17,r17,1
    2e48:	adc00015 	stw	r23,0(r21)
    2e4c:	dc800e15 	stw	r18,56(sp)
    2e50:	acc00115 	stw	r19,4(r21)
    2e54:	dc400d15 	stw	r17,52(sp)
    2e58:	14428b16 	blt	r2,r17,3888 <___vfprintf_internal_r+0xbf4>
    2e5c:	ad400204 	addi	r21,r21,8
    2e60:	d9014b17 	ldw	r4,1324(sp)
    2e64:	24c9883a 	add	r4,r4,r19
    2e68:	d9014b15 	stw	r4,1324(sp)
    2e6c:	802f883a 	mov	r23,r16
    2e70:	b8800007 	ldb	r2,0(r23)
    2e74:	10013c26 	beq	r2,zero,3368 <___vfprintf_internal_r+0x6d4>
    2e78:	bdc00044 	addi	r23,r23,1
    2e7c:	d8000405 	stb	zero,16(sp)
    2e80:	b8c00007 	ldb	r3,0(r23)
    2e84:	04ffffc4 	movi	r19,-1
    2e88:	d8014c15 	stw	zero,1328(sp)
    2e8c:	d8014a15 	stw	zero,1320(sp)
    2e90:	d8c14d15 	stw	r3,1332(sp)
    2e94:	bdc00044 	addi	r23,r23,1
    2e98:	d9414d17 	ldw	r5,1332(sp)
    2e9c:	00801604 	movi	r2,88
    2ea0:	28fff804 	addi	r3,r5,-32
    2ea4:	10c06036 	bltu	r2,r3,3028 <___vfprintf_internal_r+0x394>
    2ea8:	18c5883a 	add	r2,r3,r3
    2eac:	1085883a 	add	r2,r2,r2
    2eb0:	00c00034 	movhi	r3,0
    2eb4:	18cbb104 	addi	r3,r3,11972
    2eb8:	10c5883a 	add	r2,r2,r3
    2ebc:	11000017 	ldw	r4,0(r2)
    2ec0:	2000683a 	jmp	r4
    2ec4:	00003e38 	rdprs	zero,zero,248
    2ec8:	00003028 	cmpgeui	zero,zero,192
    2ecc:	00003028 	cmpgeui	zero,zero,192
    2ed0:	00003e24 	muli	zero,zero,248
    2ed4:	00003028 	cmpgeui	zero,zero,192
    2ed8:	00003028 	cmpgeui	zero,zero,192
    2edc:	00003028 	cmpgeui	zero,zero,192
    2ee0:	00003028 	cmpgeui	zero,zero,192
    2ee4:	00003028 	cmpgeui	zero,zero,192
    2ee8:	00003028 	cmpgeui	zero,zero,192
    2eec:	00003c04 	movi	zero,240
    2ef0:	00003e14 	movui	zero,248
    2ef4:	00003028 	cmpgeui	zero,zero,192
    2ef8:	00003c1c 	xori	zero,zero,240
    2efc:	00003eb0 	cmpltui	zero,zero,250
    2f00:	00003028 	cmpgeui	zero,zero,192
    2f04:	00003e9c 	xori	zero,zero,250
    2f08:	00003e64 	muli	zero,zero,249
    2f0c:	00003e64 	muli	zero,zero,249
    2f10:	00003e64 	muli	zero,zero,249
    2f14:	00003e64 	muli	zero,zero,249
    2f18:	00003e64 	muli	zero,zero,249
    2f1c:	00003e64 	muli	zero,zero,249
    2f20:	00003e64 	muli	zero,zero,249
    2f24:	00003e64 	muli	zero,zero,249
    2f28:	00003e64 	muli	zero,zero,249
    2f2c:	00003028 	cmpgeui	zero,zero,192
    2f30:	00003028 	cmpgeui	zero,zero,192
    2f34:	00003028 	cmpgeui	zero,zero,192
    2f38:	00003028 	cmpgeui	zero,zero,192
    2f3c:	00003028 	cmpgeui	zero,zero,192
    2f40:	00003028 	cmpgeui	zero,zero,192
    2f44:	00003028 	cmpgeui	zero,zero,192
    2f48:	00003028 	cmpgeui	zero,zero,192
    2f4c:	00003028 	cmpgeui	zero,zero,192
    2f50:	00003028 	cmpgeui	zero,zero,192
    2f54:	00003680 	call	368 <_read+0x78>
    2f58:	00003cec 	andhi	zero,zero,243
    2f5c:	00003028 	cmpgeui	zero,zero,192
    2f60:	00003cec 	andhi	zero,zero,243
    2f64:	00003028 	cmpgeui	zero,zero,192
    2f68:	00003028 	cmpgeui	zero,zero,192
    2f6c:	00003028 	cmpgeui	zero,zero,192
    2f70:	00003028 	cmpgeui	zero,zero,192
    2f74:	00003e50 	cmplti	zero,zero,249
    2f78:	00003028 	cmpgeui	zero,zero,192
    2f7c:	00003028 	cmpgeui	zero,zero,192
    2f80:	00003734 	movhi	zero,220
    2f84:	00003028 	cmpgeui	zero,zero,192
    2f88:	00003028 	cmpgeui	zero,zero,192
    2f8c:	00003028 	cmpgeui	zero,zero,192
    2f90:	00003028 	cmpgeui	zero,zero,192
    2f94:	00003028 	cmpgeui	zero,zero,192
    2f98:	00003780 	call	378 <_read+0x88>
    2f9c:	00003028 	cmpgeui	zero,zero,192
    2fa0:	00003028 	cmpgeui	zero,zero,192
    2fa4:	00003da0 	cmpeqi	zero,zero,246
    2fa8:	00003028 	cmpgeui	zero,zero,192
    2fac:	00003028 	cmpgeui	zero,zero,192
    2fb0:	00003028 	cmpgeui	zero,zero,192
    2fb4:	00003028 	cmpgeui	zero,zero,192
    2fb8:	00003028 	cmpgeui	zero,zero,192
    2fbc:	00003028 	cmpgeui	zero,zero,192
    2fc0:	00003028 	cmpgeui	zero,zero,192
    2fc4:	00003028 	cmpgeui	zero,zero,192
    2fc8:	00003028 	cmpgeui	zero,zero,192
    2fcc:	00003028 	cmpgeui	zero,zero,192
    2fd0:	00003d74 	movhi	zero,245
    2fd4:	0000368c 	andi	zero,zero,218
    2fd8:	00003cec 	andhi	zero,zero,243
    2fdc:	00003cec 	andhi	zero,zero,243
    2fe0:	00003cec 	andhi	zero,zero,243
    2fe4:	00003cd8 	cmpnei	zero,zero,243
    2fe8:	0000368c 	andi	zero,zero,218
    2fec:	00003028 	cmpgeui	zero,zero,192
    2ff0:	00003028 	cmpgeui	zero,zero,192
    2ff4:	00003c60 	cmpeqi	zero,zero,241
    2ff8:	00003028 	cmpgeui	zero,zero,192
    2ffc:	00003c30 	cmpltui	zero,zero,240
    3000:	00003740 	call	374 <_read+0x84>
    3004:	00003c90 	cmplti	zero,zero,242
    3008:	00003c7c 	xorhi	zero,zero,241
    300c:	00003028 	cmpgeui	zero,zero,192
    3010:	00003f0c 	andi	zero,zero,252
    3014:	00003028 	cmpgeui	zero,zero,192
    3018:	0000378c 	andi	zero,zero,222
    301c:	00003028 	cmpgeui	zero,zero,192
    3020:	00003028 	cmpgeui	zero,zero,192
    3024:	00003e04 	movi	zero,248
    3028:	d9014d17 	ldw	r4,1332(sp)
    302c:	2000ce26 	beq	r4,zero,3368 <___vfprintf_internal_r+0x6d4>
    3030:	01400044 	movi	r5,1
    3034:	d9800f04 	addi	r6,sp,60
    3038:	d9c14015 	stw	r7,1280(sp)
    303c:	d9414515 	stw	r5,1300(sp)
    3040:	d9814115 	stw	r6,1284(sp)
    3044:	280f883a 	mov	r7,r5
    3048:	d9000f05 	stb	r4,60(sp)
    304c:	d8000405 	stb	zero,16(sp)
    3050:	d8014615 	stw	zero,1304(sp)
    3054:	d8c14c17 	ldw	r3,1328(sp)
    3058:	1880008c 	andi	r2,r3,2
    305c:	1005003a 	cmpeq	r2,r2,zero
    3060:	d8815015 	stw	r2,1344(sp)
    3064:	1000031e 	bne	r2,zero,3074 <___vfprintf_internal_r+0x3e0>
    3068:	d9014517 	ldw	r4,1300(sp)
    306c:	21000084 	addi	r4,r4,2
    3070:	d9014515 	stw	r4,1300(sp)
    3074:	d9414c17 	ldw	r5,1328(sp)
    3078:	2940210c 	andi	r5,r5,132
    307c:	d9414e15 	stw	r5,1336(sp)
    3080:	28002d1e 	bne	r5,zero,3138 <___vfprintf_internal_r+0x4a4>
    3084:	d9814a17 	ldw	r6,1320(sp)
    3088:	d8814517 	ldw	r2,1300(sp)
    308c:	30a1c83a 	sub	r16,r6,r2
    3090:	0400290e 	bge	zero,r16,3138 <___vfprintf_internal_r+0x4a4>
    3094:	00800404 	movi	r2,16
    3098:	1404580e 	bge	r2,r16,41fc <___vfprintf_internal_r+0x1568>
    309c:	dc800e17 	ldw	r18,56(sp)
    30a0:	dc400d17 	ldw	r17,52(sp)
    30a4:	1027883a 	mov	r19,r2
    30a8:	07000074 	movhi	fp,1
    30ac:	e70d6484 	addi	fp,fp,13714
    30b0:	050001c4 	movi	r20,7
    30b4:	00000306 	br	30c4 <___vfprintf_internal_r+0x430>
    30b8:	843ffc04 	addi	r16,r16,-16
    30bc:	ad400204 	addi	r21,r21,8
    30c0:	9c00130e 	bge	r19,r16,3110 <___vfprintf_internal_r+0x47c>
    30c4:	94800404 	addi	r18,r18,16
    30c8:	8c400044 	addi	r17,r17,1
    30cc:	af000015 	stw	fp,0(r21)
    30d0:	acc00115 	stw	r19,4(r21)
    30d4:	dc800e15 	stw	r18,56(sp)
    30d8:	dc400d15 	stw	r17,52(sp)
    30dc:	a47ff60e 	bge	r20,r17,30b8 <___vfprintf_internal_r+0x424>
    30e0:	d9014f17 	ldw	r4,1340(sp)
    30e4:	b00b883a 	mov	r5,r22
    30e8:	d9800c04 	addi	r6,sp,48
    30ec:	d9c15115 	stw	r7,1348(sp)
    30f0:	0002c3c0 	call	2c3c <__sprint_r>
    30f4:	d9c15117 	ldw	r7,1348(sp)
    30f8:	10009e1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    30fc:	843ffc04 	addi	r16,r16,-16
    3100:	dc800e17 	ldw	r18,56(sp)
    3104:	dc400d17 	ldw	r17,52(sp)
    3108:	dd401904 	addi	r21,sp,100
    310c:	9c3fed16 	blt	r19,r16,30c4 <___vfprintf_internal_r+0x430>
    3110:	9425883a 	add	r18,r18,r16
    3114:	8c400044 	addi	r17,r17,1
    3118:	008001c4 	movi	r2,7
    311c:	af000015 	stw	fp,0(r21)
    3120:	ac000115 	stw	r16,4(r21)
    3124:	dc800e15 	stw	r18,56(sp)
    3128:	dc400d15 	stw	r17,52(sp)
    312c:	1441f516 	blt	r2,r17,3904 <___vfprintf_internal_r+0xc70>
    3130:	ad400204 	addi	r21,r21,8
    3134:	00000206 	br	3140 <___vfprintf_internal_r+0x4ac>
    3138:	dc800e17 	ldw	r18,56(sp)
    313c:	dc400d17 	ldw	r17,52(sp)
    3140:	d8800407 	ldb	r2,16(sp)
    3144:	10000b26 	beq	r2,zero,3174 <___vfprintf_internal_r+0x4e0>
    3148:	00800044 	movi	r2,1
    314c:	94800044 	addi	r18,r18,1
    3150:	8c400044 	addi	r17,r17,1
    3154:	a8800115 	stw	r2,4(r21)
    3158:	d8c00404 	addi	r3,sp,16
    315c:	008001c4 	movi	r2,7
    3160:	a8c00015 	stw	r3,0(r21)
    3164:	dc800e15 	stw	r18,56(sp)
    3168:	dc400d15 	stw	r17,52(sp)
    316c:	1441da16 	blt	r2,r17,38d8 <___vfprintf_internal_r+0xc44>
    3170:	ad400204 	addi	r21,r21,8
    3174:	d9015017 	ldw	r4,1344(sp)
    3178:	20000b1e 	bne	r4,zero,31a8 <___vfprintf_internal_r+0x514>
    317c:	d8800444 	addi	r2,sp,17
    3180:	94800084 	addi	r18,r18,2
    3184:	8c400044 	addi	r17,r17,1
    3188:	a8800015 	stw	r2,0(r21)
    318c:	00c00084 	movi	r3,2
    3190:	008001c4 	movi	r2,7
    3194:	a8c00115 	stw	r3,4(r21)
    3198:	dc800e15 	stw	r18,56(sp)
    319c:	dc400d15 	stw	r17,52(sp)
    31a0:	1441c216 	blt	r2,r17,38ac <___vfprintf_internal_r+0xc18>
    31a4:	ad400204 	addi	r21,r21,8
    31a8:	d9414e17 	ldw	r5,1336(sp)
    31ac:	00802004 	movi	r2,128
    31b0:	2880b126 	beq	r5,r2,3478 <___vfprintf_internal_r+0x7e4>
    31b4:	d8c14617 	ldw	r3,1304(sp)
    31b8:	19e1c83a 	sub	r16,r3,r7
    31bc:	0400260e 	bge	zero,r16,3258 <___vfprintf_internal_r+0x5c4>
    31c0:	00800404 	movi	r2,16
    31c4:	1403c90e 	bge	r2,r16,40ec <___vfprintf_internal_r+0x1458>
    31c8:	1027883a 	mov	r19,r2
    31cc:	07000074 	movhi	fp,1
    31d0:	e70d6084 	addi	fp,fp,13698
    31d4:	050001c4 	movi	r20,7
    31d8:	00000306 	br	31e8 <___vfprintf_internal_r+0x554>
    31dc:	843ffc04 	addi	r16,r16,-16
    31e0:	ad400204 	addi	r21,r21,8
    31e4:	9c00130e 	bge	r19,r16,3234 <___vfprintf_internal_r+0x5a0>
    31e8:	94800404 	addi	r18,r18,16
    31ec:	8c400044 	addi	r17,r17,1
    31f0:	af000015 	stw	fp,0(r21)
    31f4:	acc00115 	stw	r19,4(r21)
    31f8:	dc800e15 	stw	r18,56(sp)
    31fc:	dc400d15 	stw	r17,52(sp)
    3200:	a47ff60e 	bge	r20,r17,31dc <___vfprintf_internal_r+0x548>
    3204:	d9014f17 	ldw	r4,1340(sp)
    3208:	b00b883a 	mov	r5,r22
    320c:	d9800c04 	addi	r6,sp,48
    3210:	d9c15115 	stw	r7,1348(sp)
    3214:	0002c3c0 	call	2c3c <__sprint_r>
    3218:	d9c15117 	ldw	r7,1348(sp)
    321c:	1000551e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3220:	843ffc04 	addi	r16,r16,-16
    3224:	dc800e17 	ldw	r18,56(sp)
    3228:	dc400d17 	ldw	r17,52(sp)
    322c:	dd401904 	addi	r21,sp,100
    3230:	9c3fed16 	blt	r19,r16,31e8 <___vfprintf_internal_r+0x554>
    3234:	9425883a 	add	r18,r18,r16
    3238:	8c400044 	addi	r17,r17,1
    323c:	008001c4 	movi	r2,7
    3240:	af000015 	stw	fp,0(r21)
    3244:	ac000115 	stw	r16,4(r21)
    3248:	dc800e15 	stw	r18,56(sp)
    324c:	dc400d15 	stw	r17,52(sp)
    3250:	14418216 	blt	r2,r17,385c <___vfprintf_internal_r+0xbc8>
    3254:	ad400204 	addi	r21,r21,8
    3258:	d9014c17 	ldw	r4,1328(sp)
    325c:	2080400c 	andi	r2,r4,256
    3260:	10004a1e 	bne	r2,zero,338c <___vfprintf_internal_r+0x6f8>
    3264:	d9414117 	ldw	r5,1284(sp)
    3268:	91e5883a 	add	r18,r18,r7
    326c:	8c400044 	addi	r17,r17,1
    3270:	008001c4 	movi	r2,7
    3274:	a9400015 	stw	r5,0(r21)
    3278:	a9c00115 	stw	r7,4(r21)
    327c:	dc800e15 	stw	r18,56(sp)
    3280:	dc400d15 	stw	r17,52(sp)
    3284:	14416716 	blt	r2,r17,3824 <___vfprintf_internal_r+0xb90>
    3288:	a8c00204 	addi	r3,r21,8
    328c:	d9814c17 	ldw	r6,1328(sp)
    3290:	3080010c 	andi	r2,r6,4
    3294:	10002826 	beq	r2,zero,3338 <___vfprintf_internal_r+0x6a4>
    3298:	d8814a17 	ldw	r2,1320(sp)
    329c:	d9014517 	ldw	r4,1300(sp)
    32a0:	1121c83a 	sub	r16,r2,r4
    32a4:	0400240e 	bge	zero,r16,3338 <___vfprintf_internal_r+0x6a4>
    32a8:	00800404 	movi	r2,16
    32ac:	14044f0e 	bge	r2,r16,43ec <___vfprintf_internal_r+0x1758>
    32b0:	dc400d17 	ldw	r17,52(sp)
    32b4:	1027883a 	mov	r19,r2
    32b8:	07000074 	movhi	fp,1
    32bc:	e70d6484 	addi	fp,fp,13714
    32c0:	050001c4 	movi	r20,7
    32c4:	00000306 	br	32d4 <___vfprintf_internal_r+0x640>
    32c8:	843ffc04 	addi	r16,r16,-16
    32cc:	18c00204 	addi	r3,r3,8
    32d0:	9c00110e 	bge	r19,r16,3318 <___vfprintf_internal_r+0x684>
    32d4:	94800404 	addi	r18,r18,16
    32d8:	8c400044 	addi	r17,r17,1
    32dc:	1f000015 	stw	fp,0(r3)
    32e0:	1cc00115 	stw	r19,4(r3)
    32e4:	dc800e15 	stw	r18,56(sp)
    32e8:	dc400d15 	stw	r17,52(sp)
    32ec:	a47ff60e 	bge	r20,r17,32c8 <___vfprintf_internal_r+0x634>
    32f0:	d9014f17 	ldw	r4,1340(sp)
    32f4:	b00b883a 	mov	r5,r22
    32f8:	d9800c04 	addi	r6,sp,48
    32fc:	0002c3c0 	call	2c3c <__sprint_r>
    3300:	10001c1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3304:	843ffc04 	addi	r16,r16,-16
    3308:	dc800e17 	ldw	r18,56(sp)
    330c:	dc400d17 	ldw	r17,52(sp)
    3310:	d8c01904 	addi	r3,sp,100
    3314:	9c3fef16 	blt	r19,r16,32d4 <___vfprintf_internal_r+0x640>
    3318:	9425883a 	add	r18,r18,r16
    331c:	8c400044 	addi	r17,r17,1
    3320:	008001c4 	movi	r2,7
    3324:	1f000015 	stw	fp,0(r3)
    3328:	1c000115 	stw	r16,4(r3)
    332c:	dc800e15 	stw	r18,56(sp)
    3330:	dc400d15 	stw	r17,52(sp)
    3334:	1440cb16 	blt	r2,r17,3664 <___vfprintf_internal_r+0x9d0>
    3338:	d8814a17 	ldw	r2,1320(sp)
    333c:	d9414517 	ldw	r5,1300(sp)
    3340:	1140010e 	bge	r2,r5,3348 <___vfprintf_internal_r+0x6b4>
    3344:	2805883a 	mov	r2,r5
    3348:	d9814b17 	ldw	r6,1324(sp)
    334c:	308d883a 	add	r6,r6,r2
    3350:	d9814b15 	stw	r6,1324(sp)
    3354:	90013b1e 	bne	r18,zero,3844 <___vfprintf_internal_r+0xbb0>
    3358:	d9c14017 	ldw	r7,1280(sp)
    335c:	dd401904 	addi	r21,sp,100
    3360:	d8000d15 	stw	zero,52(sp)
    3364:	003ea706 	br	2e04 <___vfprintf_internal_r+0x170>
    3368:	d8800e17 	ldw	r2,56(sp)
    336c:	10053f1e 	bne	r2,zero,486c <___vfprintf_internal_r+0x1bd8>
    3370:	d8000d15 	stw	zero,52(sp)
    3374:	b080030b 	ldhu	r2,12(r22)
    3378:	1080100c 	andi	r2,r2,64
    337c:	103e8726 	beq	r2,zero,2d9c <___vfprintf_internal_r+0x108>
    3380:	00bfffc4 	movi	r2,-1
    3384:	d8814b15 	stw	r2,1324(sp)
    3388:	003e8406 	br	2d9c <___vfprintf_internal_r+0x108>
    338c:	d9814d17 	ldw	r6,1332(sp)
    3390:	00801944 	movi	r2,101
    3394:	11806e16 	blt	r2,r6,3550 <___vfprintf_internal_r+0x8bc>
    3398:	d9414717 	ldw	r5,1308(sp)
    339c:	00c00044 	movi	r3,1
    33a0:	1943430e 	bge	r3,r5,40b0 <___vfprintf_internal_r+0x141c>
    33a4:	d8814117 	ldw	r2,1284(sp)
    33a8:	94800044 	addi	r18,r18,1
    33ac:	8c400044 	addi	r17,r17,1
    33b0:	a8800015 	stw	r2,0(r21)
    33b4:	008001c4 	movi	r2,7
    33b8:	a8c00115 	stw	r3,4(r21)
    33bc:	dc800e15 	stw	r18,56(sp)
    33c0:	dc400d15 	stw	r17,52(sp)
    33c4:	1441ca16 	blt	r2,r17,3af0 <___vfprintf_internal_r+0xe5c>
    33c8:	a8c00204 	addi	r3,r21,8
    33cc:	d9014917 	ldw	r4,1316(sp)
    33d0:	00800044 	movi	r2,1
    33d4:	94800044 	addi	r18,r18,1
    33d8:	8c400044 	addi	r17,r17,1
    33dc:	18800115 	stw	r2,4(r3)
    33e0:	008001c4 	movi	r2,7
    33e4:	19000015 	stw	r4,0(r3)
    33e8:	dc800e15 	stw	r18,56(sp)
    33ec:	dc400d15 	stw	r17,52(sp)
    33f0:	1441b616 	blt	r2,r17,3acc <___vfprintf_internal_r+0xe38>
    33f4:	1cc00204 	addi	r19,r3,8
    33f8:	d9014217 	ldw	r4,1288(sp)
    33fc:	d9414317 	ldw	r5,1292(sp)
    3400:	000d883a 	mov	r6,zero
    3404:	000f883a 	mov	r7,zero
    3408:	000f5a80 	call	f5a8 <__nedf2>
    340c:	10017426 	beq	r2,zero,39e0 <___vfprintf_internal_r+0xd4c>
    3410:	d9414717 	ldw	r5,1308(sp)
    3414:	d9814117 	ldw	r6,1284(sp)
    3418:	8c400044 	addi	r17,r17,1
    341c:	2c85883a 	add	r2,r5,r18
    3420:	14bfffc4 	addi	r18,r2,-1
    3424:	28bfffc4 	addi	r2,r5,-1
    3428:	30c00044 	addi	r3,r6,1
    342c:	98800115 	stw	r2,4(r19)
    3430:	008001c4 	movi	r2,7
    3434:	98c00015 	stw	r3,0(r19)
    3438:	dc800e15 	stw	r18,56(sp)
    343c:	dc400d15 	stw	r17,52(sp)
    3440:	14418e16 	blt	r2,r17,3a7c <___vfprintf_internal_r+0xde8>
    3444:	9cc00204 	addi	r19,r19,8
    3448:	d9414817 	ldw	r5,1312(sp)
    344c:	d8800804 	addi	r2,sp,32
    3450:	8c400044 	addi	r17,r17,1
    3454:	9165883a 	add	r18,r18,r5
    3458:	98800015 	stw	r2,0(r19)
    345c:	008001c4 	movi	r2,7
    3460:	99400115 	stw	r5,4(r19)
    3464:	dc800e15 	stw	r18,56(sp)
    3468:	dc400d15 	stw	r17,52(sp)
    346c:	1440ed16 	blt	r2,r17,3824 <___vfprintf_internal_r+0xb90>
    3470:	98c00204 	addi	r3,r19,8
    3474:	003f8506 	br	328c <___vfprintf_internal_r+0x5f8>
    3478:	d9814a17 	ldw	r6,1320(sp)
    347c:	d8814517 	ldw	r2,1300(sp)
    3480:	30a1c83a 	sub	r16,r6,r2
    3484:	043f4b0e 	bge	zero,r16,31b4 <___vfprintf_internal_r+0x520>
    3488:	00800404 	movi	r2,16
    348c:	1404340e 	bge	r2,r16,4560 <___vfprintf_internal_r+0x18cc>
    3490:	1027883a 	mov	r19,r2
    3494:	07000074 	movhi	fp,1
    3498:	e70d6084 	addi	fp,fp,13698
    349c:	050001c4 	movi	r20,7
    34a0:	00000306 	br	34b0 <___vfprintf_internal_r+0x81c>
    34a4:	843ffc04 	addi	r16,r16,-16
    34a8:	ad400204 	addi	r21,r21,8
    34ac:	9c00130e 	bge	r19,r16,34fc <___vfprintf_internal_r+0x868>
    34b0:	94800404 	addi	r18,r18,16
    34b4:	8c400044 	addi	r17,r17,1
    34b8:	af000015 	stw	fp,0(r21)
    34bc:	acc00115 	stw	r19,4(r21)
    34c0:	dc800e15 	stw	r18,56(sp)
    34c4:	dc400d15 	stw	r17,52(sp)
    34c8:	a47ff60e 	bge	r20,r17,34a4 <___vfprintf_internal_r+0x810>
    34cc:	d9014f17 	ldw	r4,1340(sp)
    34d0:	b00b883a 	mov	r5,r22
    34d4:	d9800c04 	addi	r6,sp,48
    34d8:	d9c15115 	stw	r7,1348(sp)
    34dc:	0002c3c0 	call	2c3c <__sprint_r>
    34e0:	d9c15117 	ldw	r7,1348(sp)
    34e4:	103fa31e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    34e8:	843ffc04 	addi	r16,r16,-16
    34ec:	dc800e17 	ldw	r18,56(sp)
    34f0:	dc400d17 	ldw	r17,52(sp)
    34f4:	dd401904 	addi	r21,sp,100
    34f8:	9c3fed16 	blt	r19,r16,34b0 <___vfprintf_internal_r+0x81c>
    34fc:	9425883a 	add	r18,r18,r16
    3500:	8c400044 	addi	r17,r17,1
    3504:	008001c4 	movi	r2,7
    3508:	af000015 	stw	fp,0(r21)
    350c:	ac000115 	stw	r16,4(r21)
    3510:	dc800e15 	stw	r18,56(sp)
    3514:	dc400d15 	stw	r17,52(sp)
    3518:	14416116 	blt	r2,r17,3aa0 <___vfprintf_internal_r+0xe0c>
    351c:	ad400204 	addi	r21,r21,8
    3520:	003f2406 	br	31b4 <___vfprintf_internal_r+0x520>
    3524:	d9014f17 	ldw	r4,1340(sp)
    3528:	00015080 	call	1508 <__sinit>
    352c:	d9c15117 	ldw	r7,1348(sp)
    3530:	003def06 	br	2cf0 <___vfprintf_internal_r+0x5c>
    3534:	d9014f17 	ldw	r4,1340(sp)
    3538:	b00b883a 	mov	r5,r22
    353c:	d9c15115 	stw	r7,1348(sp)
    3540:	000635c0 	call	635c <__swsetup_r>
    3544:	d9c15117 	ldw	r7,1348(sp)
    3548:	103dee26 	beq	r2,zero,2d04 <___vfprintf_internal_r+0x70>
    354c:	003f8c06 	br	3380 <___vfprintf_internal_r+0x6ec>
    3550:	d9014217 	ldw	r4,1288(sp)
    3554:	d9414317 	ldw	r5,1292(sp)
    3558:	000d883a 	mov	r6,zero
    355c:	000f883a 	mov	r7,zero
    3560:	000f5200 	call	f520 <__eqdf2>
    3564:	1000f21e 	bne	r2,zero,3930 <___vfprintf_internal_r+0xc9c>
    3568:	00800074 	movhi	r2,1
    356c:	108d6004 	addi	r2,r2,13696
    3570:	94800044 	addi	r18,r18,1
    3574:	8c400044 	addi	r17,r17,1
    3578:	a8800015 	stw	r2,0(r21)
    357c:	00c00044 	movi	r3,1
    3580:	008001c4 	movi	r2,7
    3584:	a8c00115 	stw	r3,4(r21)
    3588:	dc800e15 	stw	r18,56(sp)
    358c:	dc400d15 	stw	r17,52(sp)
    3590:	1442fa16 	blt	r2,r17,417c <___vfprintf_internal_r+0x14e8>
    3594:	a8c00204 	addi	r3,r21,8
    3598:	d8800517 	ldw	r2,20(sp)
    359c:	d9014717 	ldw	r4,1308(sp)
    35a0:	11015c0e 	bge	r2,r4,3b14 <___vfprintf_internal_r+0xe80>
    35a4:	dc400d17 	ldw	r17,52(sp)
    35a8:	d9814917 	ldw	r6,1316(sp)
    35ac:	00800044 	movi	r2,1
    35b0:	94800044 	addi	r18,r18,1
    35b4:	8c400044 	addi	r17,r17,1
    35b8:	18800115 	stw	r2,4(r3)
    35bc:	008001c4 	movi	r2,7
    35c0:	19800015 	stw	r6,0(r3)
    35c4:	dc800e15 	stw	r18,56(sp)
    35c8:	dc400d15 	stw	r17,52(sp)
    35cc:	14431016 	blt	r2,r17,4210 <___vfprintf_internal_r+0x157c>
    35d0:	18c00204 	addi	r3,r3,8
    35d4:	d8814717 	ldw	r2,1308(sp)
    35d8:	143fffc4 	addi	r16,r2,-1
    35dc:	043f2b0e 	bge	zero,r16,328c <___vfprintf_internal_r+0x5f8>
    35e0:	00800404 	movi	r2,16
    35e4:	1402a20e 	bge	r2,r16,4070 <___vfprintf_internal_r+0x13dc>
    35e8:	dc400d17 	ldw	r17,52(sp)
    35ec:	1027883a 	mov	r19,r2
    35f0:	07000074 	movhi	fp,1
    35f4:	e70d6084 	addi	fp,fp,13698
    35f8:	050001c4 	movi	r20,7
    35fc:	00000306 	br	360c <___vfprintf_internal_r+0x978>
    3600:	18c00204 	addi	r3,r3,8
    3604:	843ffc04 	addi	r16,r16,-16
    3608:	9c029c0e 	bge	r19,r16,407c <___vfprintf_internal_r+0x13e8>
    360c:	94800404 	addi	r18,r18,16
    3610:	8c400044 	addi	r17,r17,1
    3614:	1f000015 	stw	fp,0(r3)
    3618:	1cc00115 	stw	r19,4(r3)
    361c:	dc800e15 	stw	r18,56(sp)
    3620:	dc400d15 	stw	r17,52(sp)
    3624:	a47ff60e 	bge	r20,r17,3600 <___vfprintf_internal_r+0x96c>
    3628:	d9014f17 	ldw	r4,1340(sp)
    362c:	b00b883a 	mov	r5,r22
    3630:	d9800c04 	addi	r6,sp,48
    3634:	0002c3c0 	call	2c3c <__sprint_r>
    3638:	103f4e1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    363c:	dc800e17 	ldw	r18,56(sp)
    3640:	dc400d17 	ldw	r17,52(sp)
    3644:	d8c01904 	addi	r3,sp,100
    3648:	003fee06 	br	3604 <___vfprintf_internal_r+0x970>
    364c:	d8802c0b 	ldhu	r2,176(sp)
    3650:	00ffffc4 	movi	r3,-1
    3654:	d8c14b15 	stw	r3,1324(sp)
    3658:	1080100c 	andi	r2,r2,64
    365c:	103dcc1e 	bne	r2,zero,2d90 <___vfprintf_internal_r+0xfc>
    3660:	003dce06 	br	2d9c <___vfprintf_internal_r+0x108>
    3664:	d9014f17 	ldw	r4,1340(sp)
    3668:	b00b883a 	mov	r5,r22
    366c:	d9800c04 	addi	r6,sp,48
    3670:	0002c3c0 	call	2c3c <__sprint_r>
    3674:	103f3f1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3678:	dc800e17 	ldw	r18,56(sp)
    367c:	003f2e06 	br	3338 <___vfprintf_internal_r+0x6a4>
    3680:	d9414c17 	ldw	r5,1328(sp)
    3684:	29400414 	ori	r5,r5,16
    3688:	d9414c15 	stw	r5,1328(sp)
    368c:	d9814c17 	ldw	r6,1328(sp)
    3690:	3080080c 	andi	r2,r6,32
    3694:	10014f1e 	bne	r2,zero,3bd4 <___vfprintf_internal_r+0xf40>
    3698:	d8c14c17 	ldw	r3,1328(sp)
    369c:	1880040c 	andi	r2,r3,16
    36a0:	1002ea1e 	bne	r2,zero,424c <___vfprintf_internal_r+0x15b8>
    36a4:	d9014c17 	ldw	r4,1328(sp)
    36a8:	2080100c 	andi	r2,r4,64
    36ac:	1002e726 	beq	r2,zero,424c <___vfprintf_internal_r+0x15b8>
    36b0:	3880000f 	ldh	r2,0(r7)
    36b4:	39c00104 	addi	r7,r7,4
    36b8:	d9c14015 	stw	r7,1280(sp)
    36bc:	1023d7fa 	srai	r17,r2,31
    36c0:	1021883a 	mov	r16,r2
    36c4:	88037216 	blt	r17,zero,4490 <___vfprintf_internal_r+0x17fc>
    36c8:	01000044 	movi	r4,1
    36cc:	98000416 	blt	r19,zero,36e0 <___vfprintf_internal_r+0xa4c>
    36d0:	d8c14c17 	ldw	r3,1328(sp)
    36d4:	00bfdfc4 	movi	r2,-129
    36d8:	1886703a 	and	r3,r3,r2
    36dc:	d8c14c15 	stw	r3,1328(sp)
    36e0:	8444b03a 	or	r2,r16,r17
    36e4:	1002261e 	bne	r2,zero,3f80 <___vfprintf_internal_r+0x12ec>
    36e8:	9802251e 	bne	r19,zero,3f80 <___vfprintf_internal_r+0x12ec>
    36ec:	20803fcc 	andi	r2,r4,255
    36f0:	10029b26 	beq	r2,zero,4160 <___vfprintf_internal_r+0x14cc>
    36f4:	d8c01904 	addi	r3,sp,100
    36f8:	dd000f04 	addi	r20,sp,60
    36fc:	d8c14115 	stw	r3,1284(sp)
    3700:	d8c14117 	ldw	r3,1284(sp)
    3704:	dcc14515 	stw	r19,1300(sp)
    3708:	a0c5c83a 	sub	r2,r20,r3
    370c:	11c00a04 	addi	r7,r2,40
    3710:	99c0010e 	bge	r19,r7,3718 <___vfprintf_internal_r+0xa84>
    3714:	d9c14515 	stw	r7,1300(sp)
    3718:	dcc14615 	stw	r19,1304(sp)
    371c:	d8800407 	ldb	r2,16(sp)
    3720:	103e4c26 	beq	r2,zero,3054 <___vfprintf_internal_r+0x3c0>
    3724:	d8814517 	ldw	r2,1300(sp)
    3728:	10800044 	addi	r2,r2,1
    372c:	d8814515 	stw	r2,1300(sp)
    3730:	003e4806 	br	3054 <___vfprintf_internal_r+0x3c0>
    3734:	d9814c17 	ldw	r6,1328(sp)
    3738:	31800414 	ori	r6,r6,16
    373c:	d9814c15 	stw	r6,1328(sp)
    3740:	d8c14c17 	ldw	r3,1328(sp)
    3744:	1880080c 	andi	r2,r3,32
    3748:	1001271e 	bne	r2,zero,3be8 <___vfprintf_internal_r+0xf54>
    374c:	d9414c17 	ldw	r5,1328(sp)
    3750:	2880040c 	andi	r2,r5,16
    3754:	1002b61e 	bne	r2,zero,4230 <___vfprintf_internal_r+0x159c>
    3758:	d9814c17 	ldw	r6,1328(sp)
    375c:	3080100c 	andi	r2,r6,64
    3760:	1002b326 	beq	r2,zero,4230 <___vfprintf_internal_r+0x159c>
    3764:	3c00000b 	ldhu	r16,0(r7)
    3768:	0009883a 	mov	r4,zero
    376c:	39c00104 	addi	r7,r7,4
    3770:	0023883a 	mov	r17,zero
    3774:	d9c14015 	stw	r7,1280(sp)
    3778:	d8000405 	stb	zero,16(sp)
    377c:	003fd306 	br	36cc <___vfprintf_internal_r+0xa38>
    3780:	d9014c17 	ldw	r4,1328(sp)
    3784:	21000414 	ori	r4,r4,16
    3788:	d9014c15 	stw	r4,1328(sp)
    378c:	d9414c17 	ldw	r5,1328(sp)
    3790:	2880080c 	andi	r2,r5,32
    3794:	1001081e 	bne	r2,zero,3bb8 <___vfprintf_internal_r+0xf24>
    3798:	d8c14c17 	ldw	r3,1328(sp)
    379c:	1880040c 	andi	r2,r3,16
    37a0:	1002b01e 	bne	r2,zero,4264 <___vfprintf_internal_r+0x15d0>
    37a4:	d9014c17 	ldw	r4,1328(sp)
    37a8:	2080100c 	andi	r2,r4,64
    37ac:	1002ad26 	beq	r2,zero,4264 <___vfprintf_internal_r+0x15d0>
    37b0:	3c00000b 	ldhu	r16,0(r7)
    37b4:	01000044 	movi	r4,1
    37b8:	39c00104 	addi	r7,r7,4
    37bc:	0023883a 	mov	r17,zero
    37c0:	d9c14015 	stw	r7,1280(sp)
    37c4:	d8000405 	stb	zero,16(sp)
    37c8:	003fc006 	br	36cc <___vfprintf_internal_r+0xa38>
    37cc:	d9014f17 	ldw	r4,1340(sp)
    37d0:	b00b883a 	mov	r5,r22
    37d4:	d9800c04 	addi	r6,sp,48
    37d8:	0002c3c0 	call	2c3c <__sprint_r>
    37dc:	103ee51e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    37e0:	dc800e17 	ldw	r18,56(sp)
    37e4:	d8c01904 	addi	r3,sp,100
    37e8:	d9814c17 	ldw	r6,1328(sp)
    37ec:	3080004c 	andi	r2,r6,1
    37f0:	1005003a 	cmpeq	r2,r2,zero
    37f4:	103ea51e 	bne	r2,zero,328c <___vfprintf_internal_r+0x5f8>
    37f8:	00800044 	movi	r2,1
    37fc:	dc400d17 	ldw	r17,52(sp)
    3800:	18800115 	stw	r2,4(r3)
    3804:	d8814917 	ldw	r2,1316(sp)
    3808:	94800044 	addi	r18,r18,1
    380c:	8c400044 	addi	r17,r17,1
    3810:	18800015 	stw	r2,0(r3)
    3814:	008001c4 	movi	r2,7
    3818:	dc800e15 	stw	r18,56(sp)
    381c:	dc400d15 	stw	r17,52(sp)
    3820:	14421e0e 	bge	r2,r17,409c <___vfprintf_internal_r+0x1408>
    3824:	d9014f17 	ldw	r4,1340(sp)
    3828:	b00b883a 	mov	r5,r22
    382c:	d9800c04 	addi	r6,sp,48
    3830:	0002c3c0 	call	2c3c <__sprint_r>
    3834:	103ecf1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3838:	dc800e17 	ldw	r18,56(sp)
    383c:	d8c01904 	addi	r3,sp,100
    3840:	003e9206 	br	328c <___vfprintf_internal_r+0x5f8>
    3844:	d9014f17 	ldw	r4,1340(sp)
    3848:	b00b883a 	mov	r5,r22
    384c:	d9800c04 	addi	r6,sp,48
    3850:	0002c3c0 	call	2c3c <__sprint_r>
    3854:	103ec026 	beq	r2,zero,3358 <___vfprintf_internal_r+0x6c4>
    3858:	003ec606 	br	3374 <___vfprintf_internal_r+0x6e0>
    385c:	d9014f17 	ldw	r4,1340(sp)
    3860:	b00b883a 	mov	r5,r22
    3864:	d9800c04 	addi	r6,sp,48
    3868:	d9c15115 	stw	r7,1348(sp)
    386c:	0002c3c0 	call	2c3c <__sprint_r>
    3870:	d9c15117 	ldw	r7,1348(sp)
    3874:	103ebf1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3878:	dc800e17 	ldw	r18,56(sp)
    387c:	dc400d17 	ldw	r17,52(sp)
    3880:	dd401904 	addi	r21,sp,100
    3884:	003e7406 	br	3258 <___vfprintf_internal_r+0x5c4>
    3888:	d9014f17 	ldw	r4,1340(sp)
    388c:	b00b883a 	mov	r5,r22
    3890:	d9800c04 	addi	r6,sp,48
    3894:	d9c15115 	stw	r7,1348(sp)
    3898:	0002c3c0 	call	2c3c <__sprint_r>
    389c:	d9c15117 	ldw	r7,1348(sp)
    38a0:	103eb41e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    38a4:	dd401904 	addi	r21,sp,100
    38a8:	003d6d06 	br	2e60 <___vfprintf_internal_r+0x1cc>
    38ac:	d9014f17 	ldw	r4,1340(sp)
    38b0:	b00b883a 	mov	r5,r22
    38b4:	d9800c04 	addi	r6,sp,48
    38b8:	d9c15115 	stw	r7,1348(sp)
    38bc:	0002c3c0 	call	2c3c <__sprint_r>
    38c0:	d9c15117 	ldw	r7,1348(sp)
    38c4:	103eab1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    38c8:	dc800e17 	ldw	r18,56(sp)
    38cc:	dc400d17 	ldw	r17,52(sp)
    38d0:	dd401904 	addi	r21,sp,100
    38d4:	003e3406 	br	31a8 <___vfprintf_internal_r+0x514>
    38d8:	d9014f17 	ldw	r4,1340(sp)
    38dc:	b00b883a 	mov	r5,r22
    38e0:	d9800c04 	addi	r6,sp,48
    38e4:	d9c15115 	stw	r7,1348(sp)
    38e8:	0002c3c0 	call	2c3c <__sprint_r>
    38ec:	d9c15117 	ldw	r7,1348(sp)
    38f0:	103ea01e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    38f4:	dc800e17 	ldw	r18,56(sp)
    38f8:	dc400d17 	ldw	r17,52(sp)
    38fc:	dd401904 	addi	r21,sp,100
    3900:	003e1c06 	br	3174 <___vfprintf_internal_r+0x4e0>
    3904:	d9014f17 	ldw	r4,1340(sp)
    3908:	b00b883a 	mov	r5,r22
    390c:	d9800c04 	addi	r6,sp,48
    3910:	d9c15115 	stw	r7,1348(sp)
    3914:	0002c3c0 	call	2c3c <__sprint_r>
    3918:	d9c15117 	ldw	r7,1348(sp)
    391c:	103e951e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3920:	dc800e17 	ldw	r18,56(sp)
    3924:	dc400d17 	ldw	r17,52(sp)
    3928:	dd401904 	addi	r21,sp,100
    392c:	003e0406 	br	3140 <___vfprintf_internal_r+0x4ac>
    3930:	d9000517 	ldw	r4,20(sp)
    3934:	0102520e 	bge	zero,r4,4280 <___vfprintf_internal_r+0x15ec>
    3938:	d9814717 	ldw	r6,1308(sp)
    393c:	21807a16 	blt	r4,r6,3b28 <___vfprintf_internal_r+0xe94>
    3940:	d8814117 	ldw	r2,1284(sp)
    3944:	91a5883a 	add	r18,r18,r6
    3948:	8c400044 	addi	r17,r17,1
    394c:	a8800015 	stw	r2,0(r21)
    3950:	008001c4 	movi	r2,7
    3954:	a9800115 	stw	r6,4(r21)
    3958:	dc800e15 	stw	r18,56(sp)
    395c:	dc400d15 	stw	r17,52(sp)
    3960:	1442f616 	blt	r2,r17,453c <___vfprintf_internal_r+0x18a8>
    3964:	a8c00204 	addi	r3,r21,8
    3968:	d9414717 	ldw	r5,1308(sp)
    396c:	2161c83a 	sub	r16,r4,r5
    3970:	043f9d0e 	bge	zero,r16,37e8 <___vfprintf_internal_r+0xb54>
    3974:	00800404 	movi	r2,16
    3978:	1402130e 	bge	r2,r16,41c8 <___vfprintf_internal_r+0x1534>
    397c:	dc400d17 	ldw	r17,52(sp)
    3980:	1027883a 	mov	r19,r2
    3984:	07000074 	movhi	fp,1
    3988:	e70d6084 	addi	fp,fp,13698
    398c:	050001c4 	movi	r20,7
    3990:	00000306 	br	39a0 <___vfprintf_internal_r+0xd0c>
    3994:	18c00204 	addi	r3,r3,8
    3998:	843ffc04 	addi	r16,r16,-16
    399c:	9c020d0e 	bge	r19,r16,41d4 <___vfprintf_internal_r+0x1540>
    39a0:	94800404 	addi	r18,r18,16
    39a4:	8c400044 	addi	r17,r17,1
    39a8:	1f000015 	stw	fp,0(r3)
    39ac:	1cc00115 	stw	r19,4(r3)
    39b0:	dc800e15 	stw	r18,56(sp)
    39b4:	dc400d15 	stw	r17,52(sp)
    39b8:	a47ff60e 	bge	r20,r17,3994 <___vfprintf_internal_r+0xd00>
    39bc:	d9014f17 	ldw	r4,1340(sp)
    39c0:	b00b883a 	mov	r5,r22
    39c4:	d9800c04 	addi	r6,sp,48
    39c8:	0002c3c0 	call	2c3c <__sprint_r>
    39cc:	103e691e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    39d0:	dc800e17 	ldw	r18,56(sp)
    39d4:	dc400d17 	ldw	r17,52(sp)
    39d8:	d8c01904 	addi	r3,sp,100
    39dc:	003fee06 	br	3998 <___vfprintf_internal_r+0xd04>
    39e0:	d8814717 	ldw	r2,1308(sp)
    39e4:	143fffc4 	addi	r16,r2,-1
    39e8:	043e970e 	bge	zero,r16,3448 <___vfprintf_internal_r+0x7b4>
    39ec:	00800404 	movi	r2,16
    39f0:	1400180e 	bge	r2,r16,3a54 <___vfprintf_internal_r+0xdc0>
    39f4:	1029883a 	mov	r20,r2
    39f8:	07000074 	movhi	fp,1
    39fc:	e70d6084 	addi	fp,fp,13698
    3a00:	054001c4 	movi	r21,7
    3a04:	00000306 	br	3a14 <___vfprintf_internal_r+0xd80>
    3a08:	9cc00204 	addi	r19,r19,8
    3a0c:	843ffc04 	addi	r16,r16,-16
    3a10:	a400120e 	bge	r20,r16,3a5c <___vfprintf_internal_r+0xdc8>
    3a14:	94800404 	addi	r18,r18,16
    3a18:	8c400044 	addi	r17,r17,1
    3a1c:	9f000015 	stw	fp,0(r19)
    3a20:	9d000115 	stw	r20,4(r19)
    3a24:	dc800e15 	stw	r18,56(sp)
    3a28:	dc400d15 	stw	r17,52(sp)
    3a2c:	ac7ff60e 	bge	r21,r17,3a08 <___vfprintf_internal_r+0xd74>
    3a30:	d9014f17 	ldw	r4,1340(sp)
    3a34:	b00b883a 	mov	r5,r22
    3a38:	d9800c04 	addi	r6,sp,48
    3a3c:	0002c3c0 	call	2c3c <__sprint_r>
    3a40:	103e4c1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3a44:	dc800e17 	ldw	r18,56(sp)
    3a48:	dc400d17 	ldw	r17,52(sp)
    3a4c:	dcc01904 	addi	r19,sp,100
    3a50:	003fee06 	br	3a0c <___vfprintf_internal_r+0xd78>
    3a54:	07000074 	movhi	fp,1
    3a58:	e70d6084 	addi	fp,fp,13698
    3a5c:	9425883a 	add	r18,r18,r16
    3a60:	8c400044 	addi	r17,r17,1
    3a64:	008001c4 	movi	r2,7
    3a68:	9f000015 	stw	fp,0(r19)
    3a6c:	9c000115 	stw	r16,4(r19)
    3a70:	dc800e15 	stw	r18,56(sp)
    3a74:	dc400d15 	stw	r17,52(sp)
    3a78:	147e720e 	bge	r2,r17,3444 <___vfprintf_internal_r+0x7b0>
    3a7c:	d9014f17 	ldw	r4,1340(sp)
    3a80:	b00b883a 	mov	r5,r22
    3a84:	d9800c04 	addi	r6,sp,48
    3a88:	0002c3c0 	call	2c3c <__sprint_r>
    3a8c:	103e391e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3a90:	dc800e17 	ldw	r18,56(sp)
    3a94:	dc400d17 	ldw	r17,52(sp)
    3a98:	dcc01904 	addi	r19,sp,100
    3a9c:	003e6a06 	br	3448 <___vfprintf_internal_r+0x7b4>
    3aa0:	d9014f17 	ldw	r4,1340(sp)
    3aa4:	b00b883a 	mov	r5,r22
    3aa8:	d9800c04 	addi	r6,sp,48
    3aac:	d9c15115 	stw	r7,1348(sp)
    3ab0:	0002c3c0 	call	2c3c <__sprint_r>
    3ab4:	d9c15117 	ldw	r7,1348(sp)
    3ab8:	103e2e1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3abc:	dc800e17 	ldw	r18,56(sp)
    3ac0:	dc400d17 	ldw	r17,52(sp)
    3ac4:	dd401904 	addi	r21,sp,100
    3ac8:	003dba06 	br	31b4 <___vfprintf_internal_r+0x520>
    3acc:	d9014f17 	ldw	r4,1340(sp)
    3ad0:	b00b883a 	mov	r5,r22
    3ad4:	d9800c04 	addi	r6,sp,48
    3ad8:	0002c3c0 	call	2c3c <__sprint_r>
    3adc:	103e251e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3ae0:	dc800e17 	ldw	r18,56(sp)
    3ae4:	dc400d17 	ldw	r17,52(sp)
    3ae8:	dcc01904 	addi	r19,sp,100
    3aec:	003e4206 	br	33f8 <___vfprintf_internal_r+0x764>
    3af0:	d9014f17 	ldw	r4,1340(sp)
    3af4:	b00b883a 	mov	r5,r22
    3af8:	d9800c04 	addi	r6,sp,48
    3afc:	0002c3c0 	call	2c3c <__sprint_r>
    3b00:	103e1c1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    3b04:	dc800e17 	ldw	r18,56(sp)
    3b08:	dc400d17 	ldw	r17,52(sp)
    3b0c:	d8c01904 	addi	r3,sp,100
    3b10:	003e2e06 	br	33cc <___vfprintf_internal_r+0x738>
    3b14:	d9414c17 	ldw	r5,1328(sp)
    3b18:	2880004c 	andi	r2,r5,1
    3b1c:	1005003a 	cmpeq	r2,r2,zero
    3b20:	103dda1e 	bne	r2,zero,328c <___vfprintf_internal_r+0x5f8>
    3b24:	003e9f06 	br	35a4 <___vfprintf_internal_r+0x910>
    3b28:	d8c14117 	ldw	r3,1284(sp)
    3b2c:	9125883a 	add	r18,r18,r4
    3b30:	8c400044 	addi	r17,r17,1
    3b34:	008001c4 	movi	r2,7
    3b38:	a8c00015 	stw	r3,0(r21)
    3b3c:	a9000115 	stw	r4,4(r21)
    3b40:	dc800e15 	stw	r18,56(sp)
    3b44:	dc400d15 	stw	r17,52(sp)
    3b48:	14426616 	blt	r2,r17,44e4 <___vfprintf_internal_r+0x1850>
    3b4c:	a8c00204 	addi	r3,r21,8
    3b50:	d9414917 	ldw	r5,1316(sp)
    3b54:	00800044 	movi	r2,1
    3b58:	94800044 	addi	r18,r18,1
    3b5c:	8c400044 	addi	r17,r17,1
    3b60:	18800115 	stw	r2,4(r3)
    3b64:	008001c4 	movi	r2,7
    3b68:	19400015 	stw	r5,0(r3)
    3b6c:	dc800e15 	stw	r18,56(sp)
    3b70:	dc400d15 	stw	r17,52(sp)
    3b74:	2021883a 	mov	r16,r4
    3b78:	14425016 	blt	r2,r17,44bc <___vfprintf_internal_r+0x1828>
    3b7c:	19400204 	addi	r5,r3,8
    3b80:	d9814717 	ldw	r6,1308(sp)
    3b84:	8c400044 	addi	r17,r17,1
    3b88:	dc400d15 	stw	r17,52(sp)
    3b8c:	3107c83a 	sub	r3,r6,r4
    3b90:	d9014117 	ldw	r4,1284(sp)
    3b94:	90e5883a 	add	r18,r18,r3
    3b98:	28c00115 	stw	r3,4(r5)
    3b9c:	8105883a 	add	r2,r16,r4
    3ba0:	28800015 	stw	r2,0(r5)
    3ba4:	008001c4 	movi	r2,7
    3ba8:	dc800e15 	stw	r18,56(sp)
    3bac:	147f1d16 	blt	r2,r17,3824 <___vfprintf_internal_r+0xb90>
    3bb0:	28c00204 	addi	r3,r5,8
    3bb4:	003db506 	br	328c <___vfprintf_internal_r+0x5f8>
    3bb8:	3c000017 	ldw	r16,0(r7)
    3bbc:	3c400117 	ldw	r17,4(r7)
    3bc0:	39800204 	addi	r6,r7,8
    3bc4:	01000044 	movi	r4,1
    3bc8:	d9814015 	stw	r6,1280(sp)
    3bcc:	d8000405 	stb	zero,16(sp)
    3bd0:	003ebe06 	br	36cc <___vfprintf_internal_r+0xa38>
    3bd4:	3c000017 	ldw	r16,0(r7)
    3bd8:	3c400117 	ldw	r17,4(r7)
    3bdc:	38800204 	addi	r2,r7,8
    3be0:	d8814015 	stw	r2,1280(sp)
    3be4:	003eb706 	br	36c4 <___vfprintf_internal_r+0xa30>
    3be8:	3c000017 	ldw	r16,0(r7)
    3bec:	3c400117 	ldw	r17,4(r7)
    3bf0:	39000204 	addi	r4,r7,8
    3bf4:	d9014015 	stw	r4,1280(sp)
    3bf8:	0009883a 	mov	r4,zero
    3bfc:	d8000405 	stb	zero,16(sp)
    3c00:	003eb206 	br	36cc <___vfprintf_internal_r+0xa38>
    3c04:	38c00017 	ldw	r3,0(r7)
    3c08:	39c00104 	addi	r7,r7,4
    3c0c:	d8c14a15 	stw	r3,1320(sp)
    3c10:	1800d10e 	bge	r3,zero,3f58 <___vfprintf_internal_r+0x12c4>
    3c14:	00c7c83a 	sub	r3,zero,r3
    3c18:	d8c14a15 	stw	r3,1320(sp)
    3c1c:	d9014c17 	ldw	r4,1328(sp)
    3c20:	b8c00007 	ldb	r3,0(r23)
    3c24:	21000114 	ori	r4,r4,4
    3c28:	d9014c15 	stw	r4,1328(sp)
    3c2c:	003c9806 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3c30:	d9814c17 	ldw	r6,1328(sp)
    3c34:	3080080c 	andi	r2,r6,32
    3c38:	1001f026 	beq	r2,zero,43fc <___vfprintf_internal_r+0x1768>
    3c3c:	d9014b17 	ldw	r4,1324(sp)
    3c40:	38800017 	ldw	r2,0(r7)
    3c44:	39c00104 	addi	r7,r7,4
    3c48:	d9c14015 	stw	r7,1280(sp)
    3c4c:	2007d7fa 	srai	r3,r4,31
    3c50:	d9c14017 	ldw	r7,1280(sp)
    3c54:	11000015 	stw	r4,0(r2)
    3c58:	10c00115 	stw	r3,4(r2)
    3c5c:	003c6906 	br	2e04 <___vfprintf_internal_r+0x170>
    3c60:	b8c00007 	ldb	r3,0(r23)
    3c64:	00801b04 	movi	r2,108
    3c68:	18824f26 	beq	r3,r2,45a8 <___vfprintf_internal_r+0x1914>
    3c6c:	d9414c17 	ldw	r5,1328(sp)
    3c70:	29400414 	ori	r5,r5,16
    3c74:	d9414c15 	stw	r5,1328(sp)
    3c78:	003c8506 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3c7c:	d9814c17 	ldw	r6,1328(sp)
    3c80:	b8c00007 	ldb	r3,0(r23)
    3c84:	31800814 	ori	r6,r6,32
    3c88:	d9814c15 	stw	r6,1328(sp)
    3c8c:	003c8006 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3c90:	d8814c17 	ldw	r2,1328(sp)
    3c94:	3c000017 	ldw	r16,0(r7)
    3c98:	00c01e04 	movi	r3,120
    3c9c:	10800094 	ori	r2,r2,2
    3ca0:	d8814c15 	stw	r2,1328(sp)
    3ca4:	39c00104 	addi	r7,r7,4
    3ca8:	01400074 	movhi	r5,1
    3cac:	294d4904 	addi	r5,r5,13604
    3cb0:	00800c04 	movi	r2,48
    3cb4:	0023883a 	mov	r17,zero
    3cb8:	01000084 	movi	r4,2
    3cbc:	d9c14015 	stw	r7,1280(sp)
    3cc0:	d8c14d15 	stw	r3,1332(sp)
    3cc4:	d9414415 	stw	r5,1296(sp)
    3cc8:	d8800445 	stb	r2,17(sp)
    3ccc:	d8c00485 	stb	r3,18(sp)
    3cd0:	d8000405 	stb	zero,16(sp)
    3cd4:	003e7d06 	br	36cc <___vfprintf_internal_r+0xa38>
    3cd8:	d8814c17 	ldw	r2,1328(sp)
    3cdc:	b8c00007 	ldb	r3,0(r23)
    3ce0:	10801014 	ori	r2,r2,64
    3ce4:	d8814c15 	stw	r2,1328(sp)
    3ce8:	003c6906 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3cec:	d9414c17 	ldw	r5,1328(sp)
    3cf0:	2880020c 	andi	r2,r5,8
    3cf4:	1001df26 	beq	r2,zero,4474 <___vfprintf_internal_r+0x17e0>
    3cf8:	39800017 	ldw	r6,0(r7)
    3cfc:	38800204 	addi	r2,r7,8
    3d00:	d8814015 	stw	r2,1280(sp)
    3d04:	d9814215 	stw	r6,1288(sp)
    3d08:	39c00117 	ldw	r7,4(r7)
    3d0c:	d9c14315 	stw	r7,1292(sp)
    3d10:	d9014217 	ldw	r4,1288(sp)
    3d14:	d9414317 	ldw	r5,1292(sp)
    3d18:	000a8680 	call	a868 <__isinfd>
    3d1c:	10021726 	beq	r2,zero,457c <___vfprintf_internal_r+0x18e8>
    3d20:	d9014217 	ldw	r4,1288(sp)
    3d24:	d9414317 	ldw	r5,1292(sp)
    3d28:	000d883a 	mov	r6,zero
    3d2c:	000f883a 	mov	r7,zero
    3d30:	000f7400 	call	f740 <__ltdf2>
    3d34:	1002ca16 	blt	r2,zero,4860 <___vfprintf_internal_r+0x1bcc>
    3d38:	d9414d17 	ldw	r5,1332(sp)
    3d3c:	008011c4 	movi	r2,71
    3d40:	11420a16 	blt	r2,r5,456c <___vfprintf_internal_r+0x18d8>
    3d44:	01800074 	movhi	r6,1
    3d48:	318d4e04 	addi	r6,r6,13624
    3d4c:	d9814115 	stw	r6,1284(sp)
    3d50:	d9014c17 	ldw	r4,1328(sp)
    3d54:	00c000c4 	movi	r3,3
    3d58:	00bfdfc4 	movi	r2,-129
    3d5c:	2088703a 	and	r4,r4,r2
    3d60:	180f883a 	mov	r7,r3
    3d64:	d8c14515 	stw	r3,1300(sp)
    3d68:	d9014c15 	stw	r4,1328(sp)
    3d6c:	d8014615 	stw	zero,1304(sp)
    3d70:	003e6a06 	br	371c <___vfprintf_internal_r+0xa88>
    3d74:	38800017 	ldw	r2,0(r7)
    3d78:	00c00044 	movi	r3,1
    3d7c:	39c00104 	addi	r7,r7,4
    3d80:	d9c14015 	stw	r7,1280(sp)
    3d84:	d9000f04 	addi	r4,sp,60
    3d88:	180f883a 	mov	r7,r3
    3d8c:	d8c14515 	stw	r3,1300(sp)
    3d90:	d9014115 	stw	r4,1284(sp)
    3d94:	d8800f05 	stb	r2,60(sp)
    3d98:	d8000405 	stb	zero,16(sp)
    3d9c:	003cac06 	br	3050 <___vfprintf_internal_r+0x3bc>
    3da0:	01400074 	movhi	r5,1
    3da4:	294d5404 	addi	r5,r5,13648
    3da8:	d9414415 	stw	r5,1296(sp)
    3dac:	d9814c17 	ldw	r6,1328(sp)
    3db0:	3080080c 	andi	r2,r6,32
    3db4:	1000f926 	beq	r2,zero,419c <___vfprintf_internal_r+0x1508>
    3db8:	3c000017 	ldw	r16,0(r7)
    3dbc:	3c400117 	ldw	r17,4(r7)
    3dc0:	38800204 	addi	r2,r7,8
    3dc4:	d8814015 	stw	r2,1280(sp)
    3dc8:	d9414c17 	ldw	r5,1328(sp)
    3dcc:	2880004c 	andi	r2,r5,1
    3dd0:	1005003a 	cmpeq	r2,r2,zero
    3dd4:	1000b31e 	bne	r2,zero,40a4 <___vfprintf_internal_r+0x1410>
    3dd8:	8444b03a 	or	r2,r16,r17
    3ddc:	1000b126 	beq	r2,zero,40a4 <___vfprintf_internal_r+0x1410>
    3de0:	d9814d17 	ldw	r6,1332(sp)
    3de4:	29400094 	ori	r5,r5,2
    3de8:	00800c04 	movi	r2,48
    3dec:	01000084 	movi	r4,2
    3df0:	d9414c15 	stw	r5,1328(sp)
    3df4:	d8800445 	stb	r2,17(sp)
    3df8:	d9800485 	stb	r6,18(sp)
    3dfc:	d8000405 	stb	zero,16(sp)
    3e00:	003e3206 	br	36cc <___vfprintf_internal_r+0xa38>
    3e04:	01800074 	movhi	r6,1
    3e08:	318d4904 	addi	r6,r6,13604
    3e0c:	d9814415 	stw	r6,1296(sp)
    3e10:	003fe606 	br	3dac <___vfprintf_internal_r+0x1118>
    3e14:	00800ac4 	movi	r2,43
    3e18:	d8800405 	stb	r2,16(sp)
    3e1c:	b8c00007 	ldb	r3,0(r23)
    3e20:	003c1b06 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3e24:	d8814c17 	ldw	r2,1328(sp)
    3e28:	b8c00007 	ldb	r3,0(r23)
    3e2c:	10800054 	ori	r2,r2,1
    3e30:	d8814c15 	stw	r2,1328(sp)
    3e34:	003c1606 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3e38:	d8800407 	ldb	r2,16(sp)
    3e3c:	1000461e 	bne	r2,zero,3f58 <___vfprintf_internal_r+0x12c4>
    3e40:	00800804 	movi	r2,32
    3e44:	d8800405 	stb	r2,16(sp)
    3e48:	b8c00007 	ldb	r3,0(r23)
    3e4c:	003c1006 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3e50:	d9814c17 	ldw	r6,1328(sp)
    3e54:	b8c00007 	ldb	r3,0(r23)
    3e58:	31800214 	ori	r6,r6,8
    3e5c:	d9814c15 	stw	r6,1328(sp)
    3e60:	003c0b06 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3e64:	0007883a 	mov	r3,zero
    3e68:	01000244 	movi	r4,9
    3e6c:	188002a4 	muli	r2,r3,10
    3e70:	b8c00007 	ldb	r3,0(r23)
    3e74:	d9814d17 	ldw	r6,1332(sp)
    3e78:	bdc00044 	addi	r23,r23,1
    3e7c:	d8c14d15 	stw	r3,1332(sp)
    3e80:	d9414d17 	ldw	r5,1332(sp)
    3e84:	3085883a 	add	r2,r6,r2
    3e88:	10fff404 	addi	r3,r2,-48
    3e8c:	28bff404 	addi	r2,r5,-48
    3e90:	20bff62e 	bgeu	r4,r2,3e6c <___vfprintf_internal_r+0x11d8>
    3e94:	d8c14a15 	stw	r3,1320(sp)
    3e98:	003bff06 	br	2e98 <___vfprintf_internal_r+0x204>
    3e9c:	d9414c17 	ldw	r5,1328(sp)
    3ea0:	b8c00007 	ldb	r3,0(r23)
    3ea4:	29402014 	ori	r5,r5,128
    3ea8:	d9414c15 	stw	r5,1328(sp)
    3eac:	003bf806 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3eb0:	b8c00007 	ldb	r3,0(r23)
    3eb4:	00800a84 	movi	r2,42
    3eb8:	bdc00044 	addi	r23,r23,1
    3ebc:	18831526 	beq	r3,r2,4b14 <___vfprintf_internal_r+0x1e80>
    3ec0:	d8c14d15 	stw	r3,1332(sp)
    3ec4:	18bff404 	addi	r2,r3,-48
    3ec8:	00c00244 	movi	r3,9
    3ecc:	18827836 	bltu	r3,r2,48b0 <___vfprintf_internal_r+0x1c1c>
    3ed0:	000d883a 	mov	r6,zero
    3ed4:	308002a4 	muli	r2,r6,10
    3ed8:	b9800007 	ldb	r6,0(r23)
    3edc:	d9414d17 	ldw	r5,1332(sp)
    3ee0:	bdc00044 	addi	r23,r23,1
    3ee4:	d9814d15 	stw	r6,1332(sp)
    3ee8:	d9014d17 	ldw	r4,1332(sp)
    3eec:	1145883a 	add	r2,r2,r5
    3ef0:	11bff404 	addi	r6,r2,-48
    3ef4:	20bff404 	addi	r2,r4,-48
    3ef8:	18bff62e 	bgeu	r3,r2,3ed4 <___vfprintf_internal_r+0x1240>
    3efc:	3027883a 	mov	r19,r6
    3f00:	303be50e 	bge	r6,zero,2e98 <___vfprintf_internal_r+0x204>
    3f04:	04ffffc4 	movi	r19,-1
    3f08:	003be306 	br	2e98 <___vfprintf_internal_r+0x204>
    3f0c:	d8000405 	stb	zero,16(sp)
    3f10:	39800017 	ldw	r6,0(r7)
    3f14:	39c00104 	addi	r7,r7,4
    3f18:	d9c14015 	stw	r7,1280(sp)
    3f1c:	d9814115 	stw	r6,1284(sp)
    3f20:	3001c926 	beq	r6,zero,4648 <___vfprintf_internal_r+0x19b4>
    3f24:	98000e16 	blt	r19,zero,3f60 <___vfprintf_internal_r+0x12cc>
    3f28:	d9014117 	ldw	r4,1284(sp)
    3f2c:	000b883a 	mov	r5,zero
    3f30:	980d883a 	mov	r6,r19
    3f34:	00020200 	call	2020 <memchr>
    3f38:	10025926 	beq	r2,zero,48a0 <___vfprintf_internal_r+0x1c0c>
    3f3c:	d8c14117 	ldw	r3,1284(sp)
    3f40:	10cfc83a 	sub	r7,r2,r3
    3f44:	99c19e16 	blt	r19,r7,45c0 <___vfprintf_internal_r+0x192c>
    3f48:	d9c14515 	stw	r7,1300(sp)
    3f4c:	38000916 	blt	r7,zero,3f74 <___vfprintf_internal_r+0x12e0>
    3f50:	d8014615 	stw	zero,1304(sp)
    3f54:	003df106 	br	371c <___vfprintf_internal_r+0xa88>
    3f58:	b8c00007 	ldb	r3,0(r23)
    3f5c:	003bcc06 	br	2e90 <___vfprintf_internal_r+0x1fc>
    3f60:	d9014117 	ldw	r4,1284(sp)
    3f64:	0002bc80 	call	2bc8 <strlen>
    3f68:	d8814515 	stw	r2,1300(sp)
    3f6c:	100f883a 	mov	r7,r2
    3f70:	103ff70e 	bge	r2,zero,3f50 <___vfprintf_internal_r+0x12bc>
    3f74:	d8014515 	stw	zero,1300(sp)
    3f78:	d8014615 	stw	zero,1304(sp)
    3f7c:	003de706 	br	371c <___vfprintf_internal_r+0xa88>
    3f80:	20c03fcc 	andi	r3,r4,255
    3f84:	00800044 	movi	r2,1
    3f88:	18802d26 	beq	r3,r2,4040 <___vfprintf_internal_r+0x13ac>
    3f8c:	18800e36 	bltu	r3,r2,3fc8 <___vfprintf_internal_r+0x1334>
    3f90:	00800084 	movi	r2,2
    3f94:	1880fa26 	beq	r3,r2,4380 <___vfprintf_internal_r+0x16ec>
    3f98:	01000074 	movhi	r4,1
    3f9c:	210d5904 	addi	r4,r4,13668
    3fa0:	0002bc80 	call	2bc8 <strlen>
    3fa4:	100f883a 	mov	r7,r2
    3fa8:	dcc14515 	stw	r19,1300(sp)
    3fac:	9880010e 	bge	r19,r2,3fb4 <___vfprintf_internal_r+0x1320>
    3fb0:	d8814515 	stw	r2,1300(sp)
    3fb4:	00800074 	movhi	r2,1
    3fb8:	108d5904 	addi	r2,r2,13668
    3fbc:	dcc14615 	stw	r19,1304(sp)
    3fc0:	d8814115 	stw	r2,1284(sp)
    3fc4:	003dd506 	br	371c <___vfprintf_internal_r+0xa88>
    3fc8:	d9401904 	addi	r5,sp,100
    3fcc:	dd000f04 	addi	r20,sp,60
    3fd0:	d9414115 	stw	r5,1284(sp)
    3fd4:	880a977a 	slli	r5,r17,29
    3fd8:	d9814117 	ldw	r6,1284(sp)
    3fdc:	8004d0fa 	srli	r2,r16,3
    3fe0:	8806d0fa 	srli	r3,r17,3
    3fe4:	810001cc 	andi	r4,r16,7
    3fe8:	2884b03a 	or	r2,r5,r2
    3fec:	31bfffc4 	addi	r6,r6,-1
    3ff0:	21000c04 	addi	r4,r4,48
    3ff4:	d9814115 	stw	r6,1284(sp)
    3ff8:	10cab03a 	or	r5,r2,r3
    3ffc:	31000005 	stb	r4,0(r6)
    4000:	1021883a 	mov	r16,r2
    4004:	1823883a 	mov	r17,r3
    4008:	283ff21e 	bne	r5,zero,3fd4 <___vfprintf_internal_r+0x1340>
    400c:	d8c14c17 	ldw	r3,1328(sp)
    4010:	1880004c 	andi	r2,r3,1
    4014:	1005003a 	cmpeq	r2,r2,zero
    4018:	103db91e 	bne	r2,zero,3700 <___vfprintf_internal_r+0xa6c>
    401c:	20803fcc 	andi	r2,r4,255
    4020:	1080201c 	xori	r2,r2,128
    4024:	10bfe004 	addi	r2,r2,-128
    4028:	00c00c04 	movi	r3,48
    402c:	10fdb426 	beq	r2,r3,3700 <___vfprintf_internal_r+0xa6c>
    4030:	31bfffc4 	addi	r6,r6,-1
    4034:	d9814115 	stw	r6,1284(sp)
    4038:	30c00005 	stb	r3,0(r6)
    403c:	003db006 	br	3700 <___vfprintf_internal_r+0xa6c>
    4040:	88800068 	cmpgeui	r2,r17,1
    4044:	10002c1e 	bne	r2,zero,40f8 <___vfprintf_internal_r+0x1464>
    4048:	8800021e 	bne	r17,zero,4054 <___vfprintf_internal_r+0x13c0>
    404c:	00800244 	movi	r2,9
    4050:	14002936 	bltu	r2,r16,40f8 <___vfprintf_internal_r+0x1464>
    4054:	d90018c4 	addi	r4,sp,99
    4058:	dd000f04 	addi	r20,sp,60
    405c:	d9014115 	stw	r4,1284(sp)
    4060:	d9014117 	ldw	r4,1284(sp)
    4064:	80800c04 	addi	r2,r16,48
    4068:	20800005 	stb	r2,0(r4)
    406c:	003da406 	br	3700 <___vfprintf_internal_r+0xa6c>
    4070:	dc400d17 	ldw	r17,52(sp)
    4074:	07000074 	movhi	fp,1
    4078:	e70d6084 	addi	fp,fp,13698
    407c:	9425883a 	add	r18,r18,r16
    4080:	8c400044 	addi	r17,r17,1
    4084:	008001c4 	movi	r2,7
    4088:	1f000015 	stw	fp,0(r3)
    408c:	1c000115 	stw	r16,4(r3)
    4090:	dc800e15 	stw	r18,56(sp)
    4094:	dc400d15 	stw	r17,52(sp)
    4098:	147de216 	blt	r2,r17,3824 <___vfprintf_internal_r+0xb90>
    409c:	18c00204 	addi	r3,r3,8
    40a0:	003c7a06 	br	328c <___vfprintf_internal_r+0x5f8>
    40a4:	01000084 	movi	r4,2
    40a8:	d8000405 	stb	zero,16(sp)
    40ac:	003d8706 	br	36cc <___vfprintf_internal_r+0xa38>
    40b0:	d9814c17 	ldw	r6,1328(sp)
    40b4:	30c4703a 	and	r2,r6,r3
    40b8:	1005003a 	cmpeq	r2,r2,zero
    40bc:	103cb926 	beq	r2,zero,33a4 <___vfprintf_internal_r+0x710>
    40c0:	d9014117 	ldw	r4,1284(sp)
    40c4:	94800044 	addi	r18,r18,1
    40c8:	8c400044 	addi	r17,r17,1
    40cc:	008001c4 	movi	r2,7
    40d0:	a9000015 	stw	r4,0(r21)
    40d4:	a8c00115 	stw	r3,4(r21)
    40d8:	dc800e15 	stw	r18,56(sp)
    40dc:	dc400d15 	stw	r17,52(sp)
    40e0:	147e6616 	blt	r2,r17,3a7c <___vfprintf_internal_r+0xde8>
    40e4:	acc00204 	addi	r19,r21,8
    40e8:	003cd706 	br	3448 <___vfprintf_internal_r+0x7b4>
    40ec:	07000074 	movhi	fp,1
    40f0:	e70d6084 	addi	fp,fp,13698
    40f4:	003c4f06 	br	3234 <___vfprintf_internal_r+0x5a0>
    40f8:	dd000f04 	addi	r20,sp,60
    40fc:	dc801904 	addi	r18,sp,100
    4100:	8009883a 	mov	r4,r16
    4104:	880b883a 	mov	r5,r17
    4108:	01800284 	movi	r6,10
    410c:	000f883a 	mov	r7,zero
    4110:	000e2e80 	call	e2e8 <__umoddi3>
    4114:	12000c04 	addi	r8,r2,48
    4118:	94bfffc4 	addi	r18,r18,-1
    411c:	8009883a 	mov	r4,r16
    4120:	880b883a 	mov	r5,r17
    4124:	01800284 	movi	r6,10
    4128:	000f883a 	mov	r7,zero
    412c:	92000005 	stb	r8,0(r18)
    4130:	000dd0c0 	call	dd0c <__udivdi3>
    4134:	1009883a 	mov	r4,r2
    4138:	1021883a 	mov	r16,r2
    413c:	18800068 	cmpgeui	r2,r3,1
    4140:	1823883a 	mov	r17,r3
    4144:	103fee1e 	bne	r2,zero,4100 <___vfprintf_internal_r+0x146c>
    4148:	1800021e 	bne	r3,zero,4154 <___vfprintf_internal_r+0x14c0>
    414c:	00800244 	movi	r2,9
    4150:	113feb36 	bltu	r2,r4,4100 <___vfprintf_internal_r+0x146c>
    4154:	94bfffc4 	addi	r18,r18,-1
    4158:	dc814115 	stw	r18,1284(sp)
    415c:	003fc006 	br	4060 <___vfprintf_internal_r+0x13cc>
    4160:	d9014c17 	ldw	r4,1328(sp)
    4164:	2080004c 	andi	r2,r4,1
    4168:	10009a1e 	bne	r2,zero,43d4 <___vfprintf_internal_r+0x1740>
    416c:	d9401904 	addi	r5,sp,100
    4170:	dd000f04 	addi	r20,sp,60
    4174:	d9414115 	stw	r5,1284(sp)
    4178:	003d6106 	br	3700 <___vfprintf_internal_r+0xa6c>
    417c:	d9014f17 	ldw	r4,1340(sp)
    4180:	b00b883a 	mov	r5,r22
    4184:	d9800c04 	addi	r6,sp,48
    4188:	0002c3c0 	call	2c3c <__sprint_r>
    418c:	103c791e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4190:	dc800e17 	ldw	r18,56(sp)
    4194:	d8c01904 	addi	r3,sp,100
    4198:	003cff06 	br	3598 <___vfprintf_internal_r+0x904>
    419c:	d8c14c17 	ldw	r3,1328(sp)
    41a0:	1880040c 	andi	r2,r3,16
    41a4:	1000711e 	bne	r2,zero,436c <___vfprintf_internal_r+0x16d8>
    41a8:	d9014c17 	ldw	r4,1328(sp)
    41ac:	2080100c 	andi	r2,r4,64
    41b0:	10006e26 	beq	r2,zero,436c <___vfprintf_internal_r+0x16d8>
    41b4:	3c00000b 	ldhu	r16,0(r7)
    41b8:	0023883a 	mov	r17,zero
    41bc:	39c00104 	addi	r7,r7,4
    41c0:	d9c14015 	stw	r7,1280(sp)
    41c4:	003f0006 	br	3dc8 <___vfprintf_internal_r+0x1134>
    41c8:	dc400d17 	ldw	r17,52(sp)
    41cc:	07000074 	movhi	fp,1
    41d0:	e70d6084 	addi	fp,fp,13698
    41d4:	9425883a 	add	r18,r18,r16
    41d8:	8c400044 	addi	r17,r17,1
    41dc:	008001c4 	movi	r2,7
    41e0:	1f000015 	stw	fp,0(r3)
    41e4:	1c000115 	stw	r16,4(r3)
    41e8:	dc800e15 	stw	r18,56(sp)
    41ec:	dc400d15 	stw	r17,52(sp)
    41f0:	147d7616 	blt	r2,r17,37cc <___vfprintf_internal_r+0xb38>
    41f4:	18c00204 	addi	r3,r3,8
    41f8:	003d7b06 	br	37e8 <___vfprintf_internal_r+0xb54>
    41fc:	dc800e17 	ldw	r18,56(sp)
    4200:	dc400d17 	ldw	r17,52(sp)
    4204:	07000074 	movhi	fp,1
    4208:	e70d6484 	addi	fp,fp,13714
    420c:	003bc006 	br	3110 <___vfprintf_internal_r+0x47c>
    4210:	d9014f17 	ldw	r4,1340(sp)
    4214:	b00b883a 	mov	r5,r22
    4218:	d9800c04 	addi	r6,sp,48
    421c:	0002c3c0 	call	2c3c <__sprint_r>
    4220:	103c541e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4224:	dc800e17 	ldw	r18,56(sp)
    4228:	d8c01904 	addi	r3,sp,100
    422c:	003ce906 	br	35d4 <___vfprintf_internal_r+0x940>
    4230:	3c000017 	ldw	r16,0(r7)
    4234:	0009883a 	mov	r4,zero
    4238:	39c00104 	addi	r7,r7,4
    423c:	0023883a 	mov	r17,zero
    4240:	d9c14015 	stw	r7,1280(sp)
    4244:	d8000405 	stb	zero,16(sp)
    4248:	003d2006 	br	36cc <___vfprintf_internal_r+0xa38>
    424c:	38800017 	ldw	r2,0(r7)
    4250:	39c00104 	addi	r7,r7,4
    4254:	d9c14015 	stw	r7,1280(sp)
    4258:	1023d7fa 	srai	r17,r2,31
    425c:	1021883a 	mov	r16,r2
    4260:	003d1806 	br	36c4 <___vfprintf_internal_r+0xa30>
    4264:	3c000017 	ldw	r16,0(r7)
    4268:	01000044 	movi	r4,1
    426c:	39c00104 	addi	r7,r7,4
    4270:	0023883a 	mov	r17,zero
    4274:	d9c14015 	stw	r7,1280(sp)
    4278:	d8000405 	stb	zero,16(sp)
    427c:	003d1306 	br	36cc <___vfprintf_internal_r+0xa38>
    4280:	00800074 	movhi	r2,1
    4284:	108d6004 	addi	r2,r2,13696
    4288:	94800044 	addi	r18,r18,1
    428c:	8c400044 	addi	r17,r17,1
    4290:	a8800015 	stw	r2,0(r21)
    4294:	00c00044 	movi	r3,1
    4298:	008001c4 	movi	r2,7
    429c:	a8c00115 	stw	r3,4(r21)
    42a0:	dc800e15 	stw	r18,56(sp)
    42a4:	dc400d15 	stw	r17,52(sp)
    42a8:	1440ca16 	blt	r2,r17,45d4 <___vfprintf_internal_r+0x1940>
    42ac:	a8c00204 	addi	r3,r21,8
    42b0:	2000061e 	bne	r4,zero,42cc <___vfprintf_internal_r+0x1638>
    42b4:	d9414717 	ldw	r5,1308(sp)
    42b8:	2800041e 	bne	r5,zero,42cc <___vfprintf_internal_r+0x1638>
    42bc:	d9814c17 	ldw	r6,1328(sp)
    42c0:	3080004c 	andi	r2,r6,1
    42c4:	1005003a 	cmpeq	r2,r2,zero
    42c8:	103bf01e 	bne	r2,zero,328c <___vfprintf_internal_r+0x5f8>
    42cc:	00800044 	movi	r2,1
    42d0:	dc400d17 	ldw	r17,52(sp)
    42d4:	18800115 	stw	r2,4(r3)
    42d8:	d8814917 	ldw	r2,1316(sp)
    42dc:	94800044 	addi	r18,r18,1
    42e0:	8c400044 	addi	r17,r17,1
    42e4:	18800015 	stw	r2,0(r3)
    42e8:	008001c4 	movi	r2,7
    42ec:	dc800e15 	stw	r18,56(sp)
    42f0:	dc400d15 	stw	r17,52(sp)
    42f4:	1440ca16 	blt	r2,r17,4620 <___vfprintf_internal_r+0x198c>
    42f8:	18c00204 	addi	r3,r3,8
    42fc:	0121c83a 	sub	r16,zero,r4
    4300:	0400500e 	bge	zero,r16,4444 <___vfprintf_internal_r+0x17b0>
    4304:	00800404 	movi	r2,16
    4308:	1400800e 	bge	r2,r16,450c <___vfprintf_internal_r+0x1878>
    430c:	1027883a 	mov	r19,r2
    4310:	07000074 	movhi	fp,1
    4314:	e70d6084 	addi	fp,fp,13698
    4318:	050001c4 	movi	r20,7
    431c:	00000306 	br	432c <___vfprintf_internal_r+0x1698>
    4320:	18c00204 	addi	r3,r3,8
    4324:	843ffc04 	addi	r16,r16,-16
    4328:	9c007a0e 	bge	r19,r16,4514 <___vfprintf_internal_r+0x1880>
    432c:	94800404 	addi	r18,r18,16
    4330:	8c400044 	addi	r17,r17,1
    4334:	1f000015 	stw	fp,0(r3)
    4338:	1cc00115 	stw	r19,4(r3)
    433c:	dc800e15 	stw	r18,56(sp)
    4340:	dc400d15 	stw	r17,52(sp)
    4344:	a47ff60e 	bge	r20,r17,4320 <___vfprintf_internal_r+0x168c>
    4348:	d9014f17 	ldw	r4,1340(sp)
    434c:	b00b883a 	mov	r5,r22
    4350:	d9800c04 	addi	r6,sp,48
    4354:	0002c3c0 	call	2c3c <__sprint_r>
    4358:	103c061e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    435c:	dc800e17 	ldw	r18,56(sp)
    4360:	dc400d17 	ldw	r17,52(sp)
    4364:	d8c01904 	addi	r3,sp,100
    4368:	003fee06 	br	4324 <___vfprintf_internal_r+0x1690>
    436c:	3c000017 	ldw	r16,0(r7)
    4370:	0023883a 	mov	r17,zero
    4374:	39c00104 	addi	r7,r7,4
    4378:	d9c14015 	stw	r7,1280(sp)
    437c:	003e9206 	br	3dc8 <___vfprintf_internal_r+0x1134>
    4380:	d9401904 	addi	r5,sp,100
    4384:	dd000f04 	addi	r20,sp,60
    4388:	d9414115 	stw	r5,1284(sp)
    438c:	d9814417 	ldw	r6,1296(sp)
    4390:	880a973a 	slli	r5,r17,28
    4394:	8004d13a 	srli	r2,r16,4
    4398:	810003cc 	andi	r4,r16,15
    439c:	3109883a 	add	r4,r6,r4
    43a0:	2884b03a 	or	r2,r5,r2
    43a4:	21400003 	ldbu	r5,0(r4)
    43a8:	d9014117 	ldw	r4,1284(sp)
    43ac:	8806d13a 	srli	r3,r17,4
    43b0:	1021883a 	mov	r16,r2
    43b4:	213fffc4 	addi	r4,r4,-1
    43b8:	d9014115 	stw	r4,1284(sp)
    43bc:	d9814117 	ldw	r6,1284(sp)
    43c0:	10c8b03a 	or	r4,r2,r3
    43c4:	1823883a 	mov	r17,r3
    43c8:	31400005 	stb	r5,0(r6)
    43cc:	203fef1e 	bne	r4,zero,438c <___vfprintf_internal_r+0x16f8>
    43d0:	003ccb06 	br	3700 <___vfprintf_internal_r+0xa6c>
    43d4:	00800c04 	movi	r2,48
    43d8:	d98018c4 	addi	r6,sp,99
    43dc:	dd000f04 	addi	r20,sp,60
    43e0:	d88018c5 	stb	r2,99(sp)
    43e4:	d9814115 	stw	r6,1284(sp)
    43e8:	003cc506 	br	3700 <___vfprintf_internal_r+0xa6c>
    43ec:	dc400d17 	ldw	r17,52(sp)
    43f0:	07000074 	movhi	fp,1
    43f4:	e70d6484 	addi	fp,fp,13714
    43f8:	003bc706 	br	3318 <___vfprintf_internal_r+0x684>
    43fc:	d9414c17 	ldw	r5,1328(sp)
    4400:	2880040c 	andi	r2,r5,16
    4404:	10007c26 	beq	r2,zero,45f8 <___vfprintf_internal_r+0x1964>
    4408:	38800017 	ldw	r2,0(r7)
    440c:	39c00104 	addi	r7,r7,4
    4410:	d9c14015 	stw	r7,1280(sp)
    4414:	d9814b17 	ldw	r6,1324(sp)
    4418:	d9c14017 	ldw	r7,1280(sp)
    441c:	11800015 	stw	r6,0(r2)
    4420:	003a7806 	br	2e04 <___vfprintf_internal_r+0x170>
    4424:	d9014f17 	ldw	r4,1340(sp)
    4428:	b00b883a 	mov	r5,r22
    442c:	d9800c04 	addi	r6,sp,48
    4430:	0002c3c0 	call	2c3c <__sprint_r>
    4434:	103bcf1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4438:	dc800e17 	ldw	r18,56(sp)
    443c:	dc400d17 	ldw	r17,52(sp)
    4440:	d8c01904 	addi	r3,sp,100
    4444:	d9014717 	ldw	r4,1308(sp)
    4448:	d9414117 	ldw	r5,1284(sp)
    444c:	8c400044 	addi	r17,r17,1
    4450:	9125883a 	add	r18,r18,r4
    4454:	008001c4 	movi	r2,7
    4458:	19400015 	stw	r5,0(r3)
    445c:	19000115 	stw	r4,4(r3)
    4460:	dc800e15 	stw	r18,56(sp)
    4464:	dc400d15 	stw	r17,52(sp)
    4468:	147cee16 	blt	r2,r17,3824 <___vfprintf_internal_r+0xb90>
    446c:	18c00204 	addi	r3,r3,8
    4470:	003b8606 	br	328c <___vfprintf_internal_r+0x5f8>
    4474:	38c00017 	ldw	r3,0(r7)
    4478:	39000204 	addi	r4,r7,8
    447c:	d9014015 	stw	r4,1280(sp)
    4480:	d8c14215 	stw	r3,1288(sp)
    4484:	39c00117 	ldw	r7,4(r7)
    4488:	d9c14315 	stw	r7,1292(sp)
    448c:	003e2006 	br	3d10 <___vfprintf_internal_r+0x107c>
    4490:	0005883a 	mov	r2,zero
    4494:	1409c83a 	sub	r4,r2,r16
    4498:	1105803a 	cmpltu	r2,r2,r4
    449c:	044bc83a 	sub	r5,zero,r17
    44a0:	2885c83a 	sub	r2,r5,r2
    44a4:	2021883a 	mov	r16,r4
    44a8:	1023883a 	mov	r17,r2
    44ac:	01000044 	movi	r4,1
    44b0:	00800b44 	movi	r2,45
    44b4:	d8800405 	stb	r2,16(sp)
    44b8:	003c8406 	br	36cc <___vfprintf_internal_r+0xa38>
    44bc:	d9014f17 	ldw	r4,1340(sp)
    44c0:	b00b883a 	mov	r5,r22
    44c4:	d9800c04 	addi	r6,sp,48
    44c8:	0002c3c0 	call	2c3c <__sprint_r>
    44cc:	103ba91e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    44d0:	dc800e17 	ldw	r18,56(sp)
    44d4:	dc400d17 	ldw	r17,52(sp)
    44d8:	d9000517 	ldw	r4,20(sp)
    44dc:	d9401904 	addi	r5,sp,100
    44e0:	003da706 	br	3b80 <___vfprintf_internal_r+0xeec>
    44e4:	d9014f17 	ldw	r4,1340(sp)
    44e8:	b00b883a 	mov	r5,r22
    44ec:	d9800c04 	addi	r6,sp,48
    44f0:	0002c3c0 	call	2c3c <__sprint_r>
    44f4:	103b9f1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    44f8:	dc800e17 	ldw	r18,56(sp)
    44fc:	dc400d17 	ldw	r17,52(sp)
    4500:	d9000517 	ldw	r4,20(sp)
    4504:	d8c01904 	addi	r3,sp,100
    4508:	003d9106 	br	3b50 <___vfprintf_internal_r+0xebc>
    450c:	07000074 	movhi	fp,1
    4510:	e70d6084 	addi	fp,fp,13698
    4514:	9425883a 	add	r18,r18,r16
    4518:	8c400044 	addi	r17,r17,1
    451c:	008001c4 	movi	r2,7
    4520:	1f000015 	stw	fp,0(r3)
    4524:	1c000115 	stw	r16,4(r3)
    4528:	dc800e15 	stw	r18,56(sp)
    452c:	dc400d15 	stw	r17,52(sp)
    4530:	147fbc16 	blt	r2,r17,4424 <___vfprintf_internal_r+0x1790>
    4534:	18c00204 	addi	r3,r3,8
    4538:	003fc206 	br	4444 <___vfprintf_internal_r+0x17b0>
    453c:	d9014f17 	ldw	r4,1340(sp)
    4540:	b00b883a 	mov	r5,r22
    4544:	d9800c04 	addi	r6,sp,48
    4548:	0002c3c0 	call	2c3c <__sprint_r>
    454c:	103b891e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4550:	dc800e17 	ldw	r18,56(sp)
    4554:	d9000517 	ldw	r4,20(sp)
    4558:	d8c01904 	addi	r3,sp,100
    455c:	003d0206 	br	3968 <___vfprintf_internal_r+0xcd4>
    4560:	07000074 	movhi	fp,1
    4564:	e70d6084 	addi	fp,fp,13698
    4568:	003be406 	br	34fc <___vfprintf_internal_r+0x868>
    456c:	00800074 	movhi	r2,1
    4570:	108d4f04 	addi	r2,r2,13628
    4574:	d8814115 	stw	r2,1284(sp)
    4578:	003df506 	br	3d50 <___vfprintf_internal_r+0x10bc>
    457c:	d9014217 	ldw	r4,1288(sp)
    4580:	d9414317 	ldw	r5,1292(sp)
    4584:	000a8a80 	call	a8a8 <__isnand>
    4588:	10003926 	beq	r2,zero,4670 <___vfprintf_internal_r+0x19dc>
    458c:	d9414d17 	ldw	r5,1332(sp)
    4590:	008011c4 	movi	r2,71
    4594:	1140ce16 	blt	r2,r5,48d0 <___vfprintf_internal_r+0x1c3c>
    4598:	01800074 	movhi	r6,1
    459c:	318d5004 	addi	r6,r6,13632
    45a0:	d9814115 	stw	r6,1284(sp)
    45a4:	003dea06 	br	3d50 <___vfprintf_internal_r+0x10bc>
    45a8:	d9014c17 	ldw	r4,1328(sp)
    45ac:	bdc00044 	addi	r23,r23,1
    45b0:	b8c00007 	ldb	r3,0(r23)
    45b4:	21000814 	ori	r4,r4,32
    45b8:	d9014c15 	stw	r4,1328(sp)
    45bc:	003a3406 	br	2e90 <___vfprintf_internal_r+0x1fc>
    45c0:	dcc14515 	stw	r19,1300(sp)
    45c4:	98011016 	blt	r19,zero,4a08 <___vfprintf_internal_r+0x1d74>
    45c8:	980f883a 	mov	r7,r19
    45cc:	d8014615 	stw	zero,1304(sp)
    45d0:	003c5206 	br	371c <___vfprintf_internal_r+0xa88>
    45d4:	d9014f17 	ldw	r4,1340(sp)
    45d8:	b00b883a 	mov	r5,r22
    45dc:	d9800c04 	addi	r6,sp,48
    45e0:	0002c3c0 	call	2c3c <__sprint_r>
    45e4:	103b631e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    45e8:	dc800e17 	ldw	r18,56(sp)
    45ec:	d9000517 	ldw	r4,20(sp)
    45f0:	d8c01904 	addi	r3,sp,100
    45f4:	003f2e06 	br	42b0 <___vfprintf_internal_r+0x161c>
    45f8:	d8c14c17 	ldw	r3,1328(sp)
    45fc:	1880100c 	andi	r2,r3,64
    4600:	1000a026 	beq	r2,zero,4884 <___vfprintf_internal_r+0x1bf0>
    4604:	38800017 	ldw	r2,0(r7)
    4608:	39c00104 	addi	r7,r7,4
    460c:	d9c14015 	stw	r7,1280(sp)
    4610:	d9014b17 	ldw	r4,1324(sp)
    4614:	d9c14017 	ldw	r7,1280(sp)
    4618:	1100000d 	sth	r4,0(r2)
    461c:	0039f906 	br	2e04 <___vfprintf_internal_r+0x170>
    4620:	d9014f17 	ldw	r4,1340(sp)
    4624:	b00b883a 	mov	r5,r22
    4628:	d9800c04 	addi	r6,sp,48
    462c:	0002c3c0 	call	2c3c <__sprint_r>
    4630:	103b501e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4634:	dc800e17 	ldw	r18,56(sp)
    4638:	dc400d17 	ldw	r17,52(sp)
    463c:	d9000517 	ldw	r4,20(sp)
    4640:	d8c01904 	addi	r3,sp,100
    4644:	003f2d06 	br	42fc <___vfprintf_internal_r+0x1668>
    4648:	00800184 	movi	r2,6
    464c:	14c09a36 	bltu	r2,r19,48b8 <___vfprintf_internal_r+0x1c24>
    4650:	dcc14515 	stw	r19,1300(sp)
    4654:	9800010e 	bge	r19,zero,465c <___vfprintf_internal_r+0x19c8>
    4658:	d8014515 	stw	zero,1300(sp)
    465c:	00800074 	movhi	r2,1
    4660:	108d5204 	addi	r2,r2,13640
    4664:	980f883a 	mov	r7,r19
    4668:	d8814115 	stw	r2,1284(sp)
    466c:	003a7806 	br	3050 <___vfprintf_internal_r+0x3bc>
    4670:	00bfffc4 	movi	r2,-1
    4674:	9880e226 	beq	r19,r2,4a00 <___vfprintf_internal_r+0x1d6c>
    4678:	d9414d17 	ldw	r5,1332(sp)
    467c:	008019c4 	movi	r2,103
    4680:	2880dc26 	beq	r5,r2,49f4 <___vfprintf_internal_r+0x1d60>
    4684:	008011c4 	movi	r2,71
    4688:	2880da26 	beq	r5,r2,49f4 <___vfprintf_internal_r+0x1d60>
    468c:	d9414c17 	ldw	r5,1328(sp)
    4690:	d9014317 	ldw	r4,1292(sp)
    4694:	d9814217 	ldw	r6,1288(sp)
    4698:	29404014 	ori	r5,r5,256
    469c:	d9414c15 	stw	r5,1328(sp)
    46a0:	2000cc16 	blt	r4,zero,49d4 <___vfprintf_internal_r+0x1d40>
    46a4:	3021883a 	mov	r16,r6
    46a8:	2023883a 	mov	r17,r4
    46ac:	0039883a 	mov	fp,zero
    46b0:	d9414d17 	ldw	r5,1332(sp)
    46b4:	00801984 	movi	r2,102
    46b8:	2880b726 	beq	r5,r2,4998 <___vfprintf_internal_r+0x1d04>
    46bc:	00801184 	movi	r2,70
    46c0:	2880b526 	beq	r5,r2,4998 <___vfprintf_internal_r+0x1d04>
    46c4:	00801944 	movi	r2,101
    46c8:	2880c826 	beq	r5,r2,49ec <___vfprintf_internal_r+0x1d58>
    46cc:	00801144 	movi	r2,69
    46d0:	2880c626 	beq	r5,r2,49ec <___vfprintf_internal_r+0x1d58>
    46d4:	9829883a 	mov	r20,r19
    46d8:	d9014f17 	ldw	r4,1340(sp)
    46dc:	d8800504 	addi	r2,sp,20
    46e0:	880d883a 	mov	r6,r17
    46e4:	d8800115 	stw	r2,4(sp)
    46e8:	d8c00604 	addi	r3,sp,24
    46ec:	d8800704 	addi	r2,sp,28
    46f0:	800b883a 	mov	r5,r16
    46f4:	01c00084 	movi	r7,2
    46f8:	d8c00215 	stw	r3,8(sp)
    46fc:	d8800315 	stw	r2,12(sp)
    4700:	dd000015 	stw	r20,0(sp)
    4704:	00067200 	call	6720 <_dtoa_r>
    4708:	d9814d17 	ldw	r6,1332(sp)
    470c:	d8814115 	stw	r2,1284(sp)
    4710:	008019c4 	movi	r2,103
    4714:	30809526 	beq	r6,r2,496c <___vfprintf_internal_r+0x1cd8>
    4718:	d8c14d17 	ldw	r3,1332(sp)
    471c:	008011c4 	movi	r2,71
    4720:	18809226 	beq	r3,r2,496c <___vfprintf_internal_r+0x1cd8>
    4724:	d9414117 	ldw	r5,1284(sp)
    4728:	d9814d17 	ldw	r6,1332(sp)
    472c:	00801984 	movi	r2,102
    4730:	2d25883a 	add	r18,r5,r20
    4734:	30808626 	beq	r6,r2,4950 <___vfprintf_internal_r+0x1cbc>
    4738:	00801184 	movi	r2,70
    473c:	30808426 	beq	r6,r2,4950 <___vfprintf_internal_r+0x1cbc>
    4740:	000d883a 	mov	r6,zero
    4744:	000f883a 	mov	r7,zero
    4748:	880b883a 	mov	r5,r17
    474c:	8009883a 	mov	r4,r16
    4750:	000f5200 	call	f520 <__eqdf2>
    4754:	1000751e 	bne	r2,zero,492c <___vfprintf_internal_r+0x1c98>
    4758:	9005883a 	mov	r2,r18
    475c:	dc800715 	stw	r18,28(sp)
    4760:	d9014117 	ldw	r4,1284(sp)
    4764:	d9414d17 	ldw	r5,1332(sp)
    4768:	00c019c4 	movi	r3,103
    476c:	1125c83a 	sub	r18,r2,r4
    4770:	28c06826 	beq	r5,r3,4914 <___vfprintf_internal_r+0x1c80>
    4774:	008011c4 	movi	r2,71
    4778:	28806626 	beq	r5,r2,4914 <___vfprintf_internal_r+0x1c80>
    477c:	d9000517 	ldw	r4,20(sp)
    4780:	d8c14d17 	ldw	r3,1332(sp)
    4784:	00801944 	movi	r2,101
    4788:	10c05516 	blt	r2,r3,48e0 <___vfprintf_internal_r+0x1c4c>
    478c:	213fffc4 	addi	r4,r4,-1
    4790:	d9000515 	stw	r4,20(sp)
    4794:	d8c00805 	stb	r3,32(sp)
    4798:	2021883a 	mov	r16,r4
    479c:	2000c116 	blt	r4,zero,4aa4 <___vfprintf_internal_r+0x1e10>
    47a0:	00800ac4 	movi	r2,43
    47a4:	d8800845 	stb	r2,33(sp)
    47a8:	00800244 	movi	r2,9
    47ac:	1400af0e 	bge	r2,r16,4a6c <___vfprintf_internal_r+0x1dd8>
    47b0:	1027883a 	mov	r19,r2
    47b4:	dc400b84 	addi	r17,sp,46
    47b8:	8009883a 	mov	r4,r16
    47bc:	01400284 	movi	r5,10
    47c0:	00012c40 	call	12c4 <__modsi3>
    47c4:	10800c04 	addi	r2,r2,48
    47c8:	8c7fffc4 	addi	r17,r17,-1
    47cc:	8009883a 	mov	r4,r16
    47d0:	01400284 	movi	r5,10
    47d4:	88800005 	stb	r2,0(r17)
    47d8:	00012640 	call	1264 <__divsi3>
    47dc:	1021883a 	mov	r16,r2
    47e0:	98bff516 	blt	r19,r2,47b8 <___vfprintf_internal_r+0x1b24>
    47e4:	10c00c04 	addi	r3,r2,48
    47e8:	d88009c4 	addi	r2,sp,39
    47ec:	108001c4 	addi	r2,r2,7
    47f0:	897fffc4 	addi	r5,r17,-1
    47f4:	88ffffc5 	stb	r3,-1(r17)
    47f8:	2880a72e 	bgeu	r5,r2,4a98 <___vfprintf_internal_r+0x1e04>
    47fc:	1009883a 	mov	r4,r2
    4800:	d9800804 	addi	r6,sp,32
    4804:	d8c00884 	addi	r3,sp,34
    4808:	28800003 	ldbu	r2,0(r5)
    480c:	29400044 	addi	r5,r5,1
    4810:	18800005 	stb	r2,0(r3)
    4814:	18c00044 	addi	r3,r3,1
    4818:	293ffb36 	bltu	r5,r4,4808 <___vfprintf_internal_r+0x1b74>
    481c:	1987c83a 	sub	r3,r3,r6
    4820:	00800044 	movi	r2,1
    4824:	d8c14815 	stw	r3,1312(sp)
    4828:	90cf883a 	add	r7,r18,r3
    482c:	1480960e 	bge	r2,r18,4a88 <___vfprintf_internal_r+0x1df4>
    4830:	39c00044 	addi	r7,r7,1
    4834:	d9c14515 	stw	r7,1300(sp)
    4838:	38003416 	blt	r7,zero,490c <___vfprintf_internal_r+0x1c78>
    483c:	e0803fcc 	andi	r2,fp,255
    4840:	1080201c 	xori	r2,r2,128
    4844:	10bfe004 	addi	r2,r2,-128
    4848:	10004e26 	beq	r2,zero,4984 <___vfprintf_internal_r+0x1cf0>
    484c:	00800b44 	movi	r2,45
    4850:	dc814715 	stw	r18,1308(sp)
    4854:	d8014615 	stw	zero,1304(sp)
    4858:	d8800405 	stb	r2,16(sp)
    485c:	003bb106 	br	3724 <___vfprintf_internal_r+0xa90>
    4860:	00800b44 	movi	r2,45
    4864:	d8800405 	stb	r2,16(sp)
    4868:	003d3306 	br	3d38 <___vfprintf_internal_r+0x10a4>
    486c:	d9014f17 	ldw	r4,1340(sp)
    4870:	b00b883a 	mov	r5,r22
    4874:	d9800c04 	addi	r6,sp,48
    4878:	0002c3c0 	call	2c3c <__sprint_r>
    487c:	103abd1e 	bne	r2,zero,3374 <___vfprintf_internal_r+0x6e0>
    4880:	003abb06 	br	3370 <___vfprintf_internal_r+0x6dc>
    4884:	38800017 	ldw	r2,0(r7)
    4888:	39c00104 	addi	r7,r7,4
    488c:	d9c14015 	stw	r7,1280(sp)
    4890:	d9414b17 	ldw	r5,1324(sp)
    4894:	d9c14017 	ldw	r7,1280(sp)
    4898:	11400015 	stw	r5,0(r2)
    489c:	00395906 	br	2e04 <___vfprintf_internal_r+0x170>
    48a0:	980f883a 	mov	r7,r19
    48a4:	dcc14515 	stw	r19,1300(sp)
    48a8:	d8014615 	stw	zero,1304(sp)
    48ac:	003b9b06 	br	371c <___vfprintf_internal_r+0xa88>
    48b0:	0027883a 	mov	r19,zero
    48b4:	00397806 	br	2e98 <___vfprintf_internal_r+0x204>
    48b8:	00c00074 	movhi	r3,1
    48bc:	18cd5204 	addi	r3,r3,13640
    48c0:	100f883a 	mov	r7,r2
    48c4:	d8814515 	stw	r2,1300(sp)
    48c8:	d8c14115 	stw	r3,1284(sp)
    48cc:	0039e006 	br	3050 <___vfprintf_internal_r+0x3bc>
    48d0:	00800074 	movhi	r2,1
    48d4:	108d5104 	addi	r2,r2,13636
    48d8:	d8814115 	stw	r2,1284(sp)
    48dc:	003d1c06 	br	3d50 <___vfprintf_internal_r+0x10bc>
    48e0:	d9414d17 	ldw	r5,1332(sp)
    48e4:	00801984 	movi	r2,102
    48e8:	28804926 	beq	r5,r2,4a10 <___vfprintf_internal_r+0x1d7c>
    48ec:	200f883a 	mov	r7,r4
    48f0:	24805716 	blt	r4,r18,4a50 <___vfprintf_internal_r+0x1dbc>
    48f4:	d9414c17 	ldw	r5,1328(sp)
    48f8:	2880004c 	andi	r2,r5,1
    48fc:	10000126 	beq	r2,zero,4904 <___vfprintf_internal_r+0x1c70>
    4900:	21c00044 	addi	r7,r4,1
    4904:	d9c14515 	stw	r7,1300(sp)
    4908:	383fcc0e 	bge	r7,zero,483c <___vfprintf_internal_r+0x1ba8>
    490c:	d8014515 	stw	zero,1300(sp)
    4910:	003fca06 	br	483c <___vfprintf_internal_r+0x1ba8>
    4914:	d9000517 	ldw	r4,20(sp)
    4918:	00bfff04 	movi	r2,-4
    491c:	1100480e 	bge	r2,r4,4a40 <___vfprintf_internal_r+0x1dac>
    4920:	99004716 	blt	r19,r4,4a40 <___vfprintf_internal_r+0x1dac>
    4924:	d8c14d15 	stw	r3,1332(sp)
    4928:	003ff006 	br	48ec <___vfprintf_internal_r+0x1c58>
    492c:	d8800717 	ldw	r2,28(sp)
    4930:	14bf8b2e 	bgeu	r2,r18,4760 <___vfprintf_internal_r+0x1acc>
    4934:	9007883a 	mov	r3,r18
    4938:	01000c04 	movi	r4,48
    493c:	11000005 	stb	r4,0(r2)
    4940:	10800044 	addi	r2,r2,1
    4944:	d8800715 	stw	r2,28(sp)
    4948:	18bffc1e 	bne	r3,r2,493c <___vfprintf_internal_r+0x1ca8>
    494c:	003f8406 	br	4760 <___vfprintf_internal_r+0x1acc>
    4950:	d8814117 	ldw	r2,1284(sp)
    4954:	10c00007 	ldb	r3,0(r2)
    4958:	00800c04 	movi	r2,48
    495c:	18805b26 	beq	r3,r2,4acc <___vfprintf_internal_r+0x1e38>
    4960:	d9000517 	ldw	r4,20(sp)
    4964:	9125883a 	add	r18,r18,r4
    4968:	003f7506 	br	4740 <___vfprintf_internal_r+0x1aac>
    496c:	d9014c17 	ldw	r4,1328(sp)
    4970:	2080004c 	andi	r2,r4,1
    4974:	1005003a 	cmpeq	r2,r2,zero
    4978:	103f6a26 	beq	r2,zero,4724 <___vfprintf_internal_r+0x1a90>
    497c:	d8800717 	ldw	r2,28(sp)
    4980:	003f7706 	br	4760 <___vfprintf_internal_r+0x1acc>
    4984:	d9c14515 	stw	r7,1300(sp)
    4988:	38004d16 	blt	r7,zero,4ac0 <___vfprintf_internal_r+0x1e2c>
    498c:	dc814715 	stw	r18,1308(sp)
    4990:	d8014615 	stw	zero,1304(sp)
    4994:	003b6106 	br	371c <___vfprintf_internal_r+0xa88>
    4998:	d9014f17 	ldw	r4,1340(sp)
    499c:	d8800504 	addi	r2,sp,20
    49a0:	d8800115 	stw	r2,4(sp)
    49a4:	d8c00604 	addi	r3,sp,24
    49a8:	d8800704 	addi	r2,sp,28
    49ac:	800b883a 	mov	r5,r16
    49b0:	880d883a 	mov	r6,r17
    49b4:	01c000c4 	movi	r7,3
    49b8:	d8c00215 	stw	r3,8(sp)
    49bc:	d8800315 	stw	r2,12(sp)
    49c0:	dcc00015 	stw	r19,0(sp)
    49c4:	9829883a 	mov	r20,r19
    49c8:	00067200 	call	6720 <_dtoa_r>
    49cc:	d8814115 	stw	r2,1284(sp)
    49d0:	003f5106 	br	4718 <___vfprintf_internal_r+0x1a84>
    49d4:	d8c14217 	ldw	r3,1288(sp)
    49d8:	d9014317 	ldw	r4,1292(sp)
    49dc:	07000b44 	movi	fp,45
    49e0:	1821883a 	mov	r16,r3
    49e4:	2460003c 	xorhi	r17,r4,32768
    49e8:	003f3106 	br	46b0 <___vfprintf_internal_r+0x1a1c>
    49ec:	9d000044 	addi	r20,r19,1
    49f0:	003f3906 	br	46d8 <___vfprintf_internal_r+0x1a44>
    49f4:	983f251e 	bne	r19,zero,468c <___vfprintf_internal_r+0x19f8>
    49f8:	04c00044 	movi	r19,1
    49fc:	003f2306 	br	468c <___vfprintf_internal_r+0x19f8>
    4a00:	04c00184 	movi	r19,6
    4a04:	003f2106 	br	468c <___vfprintf_internal_r+0x19f8>
    4a08:	d8014515 	stw	zero,1300(sp)
    4a0c:	003eee06 	br	45c8 <___vfprintf_internal_r+0x1934>
    4a10:	200f883a 	mov	r7,r4
    4a14:	0100370e 	bge	zero,r4,4af4 <___vfprintf_internal_r+0x1e60>
    4a18:	9800031e 	bne	r19,zero,4a28 <___vfprintf_internal_r+0x1d94>
    4a1c:	d9814c17 	ldw	r6,1328(sp)
    4a20:	3080004c 	andi	r2,r6,1
    4a24:	103fb726 	beq	r2,zero,4904 <___vfprintf_internal_r+0x1c70>
    4a28:	20800044 	addi	r2,r4,1
    4a2c:	98a7883a 	add	r19,r19,r2
    4a30:	dcc14515 	stw	r19,1300(sp)
    4a34:	980f883a 	mov	r7,r19
    4a38:	983f800e 	bge	r19,zero,483c <___vfprintf_internal_r+0x1ba8>
    4a3c:	003fb306 	br	490c <___vfprintf_internal_r+0x1c78>
    4a40:	d9814d17 	ldw	r6,1332(sp)
    4a44:	31bfff84 	addi	r6,r6,-2
    4a48:	d9814d15 	stw	r6,1332(sp)
    4a4c:	003f4c06 	br	4780 <___vfprintf_internal_r+0x1aec>
    4a50:	0100180e 	bge	zero,r4,4ab4 <___vfprintf_internal_r+0x1e20>
    4a54:	00800044 	movi	r2,1
    4a58:	1485883a 	add	r2,r2,r18
    4a5c:	d8814515 	stw	r2,1300(sp)
    4a60:	100f883a 	mov	r7,r2
    4a64:	103f750e 	bge	r2,zero,483c <___vfprintf_internal_r+0x1ba8>
    4a68:	003fa806 	br	490c <___vfprintf_internal_r+0x1c78>
    4a6c:	80c00c04 	addi	r3,r16,48
    4a70:	00800c04 	movi	r2,48
    4a74:	d8c008c5 	stb	r3,35(sp)
    4a78:	d9800804 	addi	r6,sp,32
    4a7c:	d8c00904 	addi	r3,sp,36
    4a80:	d8800885 	stb	r2,34(sp)
    4a84:	003f6506 	br	481c <___vfprintf_internal_r+0x1b88>
    4a88:	d9014c17 	ldw	r4,1328(sp)
    4a8c:	2084703a 	and	r2,r4,r2
    4a90:	103f9c26 	beq	r2,zero,4904 <___vfprintf_internal_r+0x1c70>
    4a94:	003f6606 	br	4830 <___vfprintf_internal_r+0x1b9c>
    4a98:	d9800804 	addi	r6,sp,32
    4a9c:	d8c00884 	addi	r3,sp,34
    4aa0:	003f5e06 	br	481c <___vfprintf_internal_r+0x1b88>
    4aa4:	00800b44 	movi	r2,45
    4aa8:	0121c83a 	sub	r16,zero,r4
    4aac:	d8800845 	stb	r2,33(sp)
    4ab0:	003f3d06 	br	47a8 <___vfprintf_internal_r+0x1b14>
    4ab4:	00800084 	movi	r2,2
    4ab8:	1105c83a 	sub	r2,r2,r4
    4abc:	003fe606 	br	4a58 <___vfprintf_internal_r+0x1dc4>
    4ac0:	d8014515 	stw	zero,1300(sp)
    4ac4:	dc814715 	stw	r18,1308(sp)
    4ac8:	003fb106 	br	4990 <___vfprintf_internal_r+0x1cfc>
    4acc:	000d883a 	mov	r6,zero
    4ad0:	000f883a 	mov	r7,zero
    4ad4:	8009883a 	mov	r4,r16
    4ad8:	880b883a 	mov	r5,r17
    4adc:	000f5a80 	call	f5a8 <__nedf2>
    4ae0:	103f9f26 	beq	r2,zero,4960 <___vfprintf_internal_r+0x1ccc>
    4ae4:	00800044 	movi	r2,1
    4ae8:	1509c83a 	sub	r4,r2,r20
    4aec:	d9000515 	stw	r4,20(sp)
    4af0:	003f9b06 	br	4960 <___vfprintf_internal_r+0x1ccc>
    4af4:	98000d1e 	bne	r19,zero,4b2c <___vfprintf_internal_r+0x1e98>
    4af8:	d8c14c17 	ldw	r3,1328(sp)
    4afc:	1880004c 	andi	r2,r3,1
    4b00:	10000a1e 	bne	r2,zero,4b2c <___vfprintf_internal_r+0x1e98>
    4b04:	01000044 	movi	r4,1
    4b08:	200f883a 	mov	r7,r4
    4b0c:	d9014515 	stw	r4,1300(sp)
    4b10:	003f4a06 	br	483c <___vfprintf_internal_r+0x1ba8>
    4b14:	3cc00017 	ldw	r19,0(r7)
    4b18:	39c00104 	addi	r7,r7,4
    4b1c:	983d0e0e 	bge	r19,zero,3f58 <___vfprintf_internal_r+0x12c4>
    4b20:	b8c00007 	ldb	r3,0(r23)
    4b24:	04ffffc4 	movi	r19,-1
    4b28:	0038d906 	br	2e90 <___vfprintf_internal_r+0x1fc>
    4b2c:	9cc00084 	addi	r19,r19,2
    4b30:	dcc14515 	stw	r19,1300(sp)
    4b34:	980f883a 	mov	r7,r19
    4b38:	983f400e 	bge	r19,zero,483c <___vfprintf_internal_r+0x1ba8>
    4b3c:	003f7306 	br	490c <___vfprintf_internal_r+0x1c78>

00004b40 <__vfprintf_internal>:
    4b40:	00800074 	movhi	r2,1
    4b44:	1094d804 	addi	r2,r2,21344
    4b48:	2013883a 	mov	r9,r4
    4b4c:	11000017 	ldw	r4,0(r2)
    4b50:	2805883a 	mov	r2,r5
    4b54:	300f883a 	mov	r7,r6
    4b58:	480b883a 	mov	r5,r9
    4b5c:	100d883a 	mov	r6,r2
    4b60:	0002c941 	jmpi	2c94 <___vfprintf_internal_r>

00004b64 <__svfscanf_r>:
    4b64:	deff4e04 	addi	sp,sp,-712
    4b68:	dd80ae15 	stw	r22,696(sp)
    4b6c:	dd00ac15 	stw	r20,688(sp)
    4b70:	dc40a915 	stw	r17,676(sp)
    4b74:	dc00a815 	stw	r16,672(sp)
    4b78:	dfc0b115 	stw	ra,708(sp)
    4b7c:	df00b015 	stw	fp,704(sp)
    4b80:	ddc0af15 	stw	r23,700(sp)
    4b84:	dd40ad15 	stw	r21,692(sp)
    4b88:	dcc0ab15 	stw	r19,684(sp)
    4b8c:	dc80aa15 	stw	r18,680(sp)
    4b90:	202d883a 	mov	r22,r4
    4b94:	2821883a 	mov	r16,r5
    4b98:	d9c0a415 	stw	r7,656(sp)
    4b9c:	3029883a 	mov	r20,r6
    4ba0:	d800a215 	stw	zero,648(sp)
    4ba4:	0023883a 	mov	r17,zero
    4ba8:	d800a115 	stw	zero,644(sp)
    4bac:	d800a015 	stw	zero,640(sp)
    4bb0:	a1000007 	ldb	r4,0(r20)
    4bb4:	d9000115 	stw	r4,4(sp)
    4bb8:	20001f26 	beq	r4,zero,4c38 <__svfscanf_r+0xd4>
    4bbc:	04800074 	movhi	r18,1
    4bc0:	9494d704 	addi	r18,r18,21340
    4bc4:	91800017 	ldw	r6,0(r18)
    4bc8:	a5000044 	addi	r20,r20,1
    4bcc:	3107883a 	add	r3,r6,r4
    4bd0:	18800003 	ldbu	r2,0(r3)
    4bd4:	1080020c 	andi	r2,r2,8
    4bd8:	10002426 	beq	r2,zero,4c6c <__svfscanf_r+0x108>
    4bdc:	80c00117 	ldw	r3,4(r16)
    4be0:	00c00e0e 	bge	zero,r3,4c1c <__svfscanf_r+0xb8>
    4be4:	81400017 	ldw	r5,0(r16)
    4be8:	90800017 	ldw	r2,0(r18)
    4bec:	28c00003 	ldbu	r3,0(r5)
    4bf0:	1887883a 	add	r3,r3,r2
    4bf4:	19000003 	ldbu	r4,0(r3)
    4bf8:	2100020c 	andi	r4,r4,8
    4bfc:	203fec26 	beq	r4,zero,4bb0 <__svfscanf_r+0x4c>
    4c00:	80c00117 	ldw	r3,4(r16)
    4c04:	29800044 	addi	r6,r5,1
    4c08:	8c400044 	addi	r17,r17,1
    4c0c:	18ffffc4 	addi	r3,r3,-1
    4c10:	81800015 	stw	r6,0(r16)
    4c14:	80c00115 	stw	r3,4(r16)
    4c18:	00fff216 	blt	zero,r3,4be4 <__svfscanf_r+0x80>
    4c1c:	b009883a 	mov	r4,r22
    4c20:	800b883a 	mov	r5,r16
    4c24:	000238c0 	call	238c <__srefill_r>
    4c28:	103fee26 	beq	r2,zero,4be4 <__svfscanf_r+0x80>
    4c2c:	a1000007 	ldb	r4,0(r20)
    4c30:	d9000115 	stw	r4,4(sp)
    4c34:	203fe11e 	bne	r4,zero,4bbc <__svfscanf_r+0x58>
    4c38:	d880a217 	ldw	r2,648(sp)
    4c3c:	dfc0b117 	ldw	ra,708(sp)
    4c40:	df00b017 	ldw	fp,704(sp)
    4c44:	ddc0af17 	ldw	r23,700(sp)
    4c48:	dd80ae17 	ldw	r22,696(sp)
    4c4c:	dd40ad17 	ldw	r21,692(sp)
    4c50:	dd00ac17 	ldw	r20,688(sp)
    4c54:	dcc0ab17 	ldw	r19,684(sp)
    4c58:	dc80aa17 	ldw	r18,680(sp)
    4c5c:	dc40a917 	ldw	r17,676(sp)
    4c60:	dc00a817 	ldw	r16,672(sp)
    4c64:	dec0b204 	addi	sp,sp,712
    4c68:	f800283a 	ret
    4c6c:	00800944 	movi	r2,37
    4c70:	20801626 	beq	r4,r2,4ccc <__svfscanf_r+0x168>
    4c74:	80800117 	ldw	r2,4(r16)
    4c78:	00800b0e 	bge	zero,r2,4ca8 <__svfscanf_r+0x144>
    4c7c:	81000017 	ldw	r4,0(r16)
    4c80:	a0ffffc7 	ldb	r3,-1(r20)
    4c84:	20800003 	ldbu	r2,0(r4)
    4c88:	10ffeb1e 	bne	r2,r3,4c38 <__svfscanf_r+0xd4>
    4c8c:	80c00117 	ldw	r3,4(r16)
    4c90:	21800044 	addi	r6,r4,1
    4c94:	8c400044 	addi	r17,r17,1
    4c98:	18ffffc4 	addi	r3,r3,-1
    4c9c:	80c00115 	stw	r3,4(r16)
    4ca0:	81800015 	stw	r6,0(r16)
    4ca4:	003fc206 	br	4bb0 <__svfscanf_r+0x4c>
    4ca8:	b009883a 	mov	r4,r22
    4cac:	800b883a 	mov	r5,r16
    4cb0:	000238c0 	call	238c <__srefill_r>
    4cb4:	103ff126 	beq	r2,zero,4c7c <__svfscanf_r+0x118>
    4cb8:	d900a217 	ldw	r4,648(sp)
    4cbc:	2004c91e 	bne	r4,zero,5fe4 <__svfscanf_r+0x1480>
    4cc0:	00bfffc4 	movi	r2,-1
    4cc4:	d880a215 	stw	r2,648(sp)
    4cc8:	003fdb06 	br	4c38 <__svfscanf_r+0xd4>
    4ccc:	d800a315 	stw	zero,652(sp)
    4cd0:	0027883a 	mov	r19,zero
    4cd4:	a0c00003 	ldbu	r3,0(r20)
    4cd8:	00801e04 	movi	r2,120
    4cdc:	a5000044 	addi	r20,r20,1
    4ce0:	19403fcc 	andi	r5,r3,255
    4ce4:	2940201c 	xori	r5,r5,128
    4ce8:	297fe004 	addi	r5,r5,-128
    4cec:	10c08036 	bltu	r2,r3,4ef0 <__svfscanf_r+0x38c>
    4cf0:	18c5883a 	add	r2,r3,r3
    4cf4:	1085883a 	add	r2,r2,r2
    4cf8:	00c00034 	movhi	r3,0
    4cfc:	18d34304 	addi	r3,r3,19724
    4d00:	10c5883a 	add	r2,r2,r3
    4d04:	11000017 	ldw	r4,0(r2)
    4d08:	2000683a 	jmp	r4
    4d0c:	00004cc0 	call	4cc <_help+0xd0>
    4d10:	00004ef0 	cmpltui	zero,zero,315
    4d14:	00004ef0 	cmpltui	zero,zero,315
    4d18:	00004ef0 	cmpltui	zero,zero,315
    4d1c:	00004ef0 	cmpltui	zero,zero,315
    4d20:	00004ef0 	cmpltui	zero,zero,315
    4d24:	00004ef0 	cmpltui	zero,zero,315
    4d28:	00004ef0 	cmpltui	zero,zero,315
    4d2c:	00004ef0 	cmpltui	zero,zero,315
    4d30:	00004ef0 	cmpltui	zero,zero,315
    4d34:	00004ef0 	cmpltui	zero,zero,315
    4d38:	00004ef0 	cmpltui	zero,zero,315
    4d3c:	00004ef0 	cmpltui	zero,zero,315
    4d40:	00004ef0 	cmpltui	zero,zero,315
    4d44:	00004ef0 	cmpltui	zero,zero,315
    4d48:	00004ef0 	cmpltui	zero,zero,315
    4d4c:	00004ef0 	cmpltui	zero,zero,315
    4d50:	00004ef0 	cmpltui	zero,zero,315
    4d54:	00004ef0 	cmpltui	zero,zero,315
    4d58:	00004ef0 	cmpltui	zero,zero,315
    4d5c:	00004ef0 	cmpltui	zero,zero,315
    4d60:	00004ef0 	cmpltui	zero,zero,315
    4d64:	00004ef0 	cmpltui	zero,zero,315
    4d68:	00004ef0 	cmpltui	zero,zero,315
    4d6c:	00004ef0 	cmpltui	zero,zero,315
    4d70:	00004ef0 	cmpltui	zero,zero,315
    4d74:	00004ef0 	cmpltui	zero,zero,315
    4d78:	00004ef0 	cmpltui	zero,zero,315
    4d7c:	00004ef0 	cmpltui	zero,zero,315
    4d80:	00004ef0 	cmpltui	zero,zero,315
    4d84:	00004ef0 	cmpltui	zero,zero,315
    4d88:	00004ef0 	cmpltui	zero,zero,315
    4d8c:	00004ef0 	cmpltui	zero,zero,315
    4d90:	00004ef0 	cmpltui	zero,zero,315
    4d94:	00004ef0 	cmpltui	zero,zero,315
    4d98:	00004ef0 	cmpltui	zero,zero,315
    4d9c:	00004ef0 	cmpltui	zero,zero,315
    4da0:	00004c74 	movhi	zero,305
    4da4:	00004ef0 	cmpltui	zero,zero,315
    4da8:	00004ef0 	cmpltui	zero,zero,315
    4dac:	00004ef0 	cmpltui	zero,zero,315
    4db0:	00004ef0 	cmpltui	zero,zero,315
    4db4:	00005f14 	movui	zero,380
    4db8:	00004ef0 	cmpltui	zero,zero,315
    4dbc:	00004ef0 	cmpltui	zero,zero,315
    4dc0:	00004ef0 	cmpltui	zero,zero,315
    4dc4:	00004ef0 	cmpltui	zero,zero,315
    4dc8:	00004ef0 	cmpltui	zero,zero,315
    4dcc:	00005910 	cmplti	zero,zero,356
    4dd0:	00005910 	cmplti	zero,zero,356
    4dd4:	00005910 	cmplti	zero,zero,356
    4dd8:	00005910 	cmplti	zero,zero,356
    4ddc:	00005910 	cmplti	zero,zero,356
    4de0:	00005910 	cmplti	zero,zero,356
    4de4:	00005910 	cmplti	zero,zero,356
    4de8:	00005910 	cmplti	zero,zero,356
    4dec:	00005910 	cmplti	zero,zero,356
    4df0:	00005910 	cmplti	zero,zero,356
    4df4:	00004ef0 	cmpltui	zero,zero,315
    4df8:	00004ef0 	cmpltui	zero,zero,315
    4dfc:	00004ef0 	cmpltui	zero,zero,315
    4e00:	00004ef0 	cmpltui	zero,zero,315
    4e04:	00004ef0 	cmpltui	zero,zero,315
    4e08:	00004ef0 	cmpltui	zero,zero,315
    4e0c:	00004ef0 	cmpltui	zero,zero,315
    4e10:	00004ef0 	cmpltui	zero,zero,315
    4e14:	00004ef0 	cmpltui	zero,zero,315
    4e18:	00004ef0 	cmpltui	zero,zero,315
    4e1c:	00006090 	cmplti	zero,zero,386
    4e20:	00006088 	cmpgei	zero,zero,386
    4e24:	00004ef0 	cmpltui	zero,zero,315
    4e28:	00006088 	cmpgei	zero,zero,386
    4e2c:	00004ef0 	cmpltui	zero,zero,315
    4e30:	00004ef0 	cmpltui	zero,zero,315
    4e34:	00004ef0 	cmpltui	zero,zero,315
    4e38:	00004ef0 	cmpltui	zero,zero,315
    4e3c:	00006120 	cmpeqi	zero,zero,388
    4e40:	00004ef0 	cmpltui	zero,zero,315
    4e44:	00004ef0 	cmpltui	zero,zero,315
    4e48:	000060d8 	cmpnei	zero,zero,387
    4e4c:	00004ef0 	cmpltui	zero,zero,315
    4e50:	00004ef0 	cmpltui	zero,zero,315
    4e54:	00004ef0 	cmpltui	zero,zero,315
    4e58:	00004ef0 	cmpltui	zero,zero,315
    4e5c:	00004ef0 	cmpltui	zero,zero,315
    4e60:	00004ef0 	cmpltui	zero,zero,315
    4e64:	00004ef0 	cmpltui	zero,zero,315
    4e68:	00004ef0 	cmpltui	zero,zero,315
    4e6c:	00005f1c 	xori	zero,zero,380
    4e70:	00004ef0 	cmpltui	zero,zero,315
    4e74:	00004ef0 	cmpltui	zero,zero,315
    4e78:	000060bc 	xorhi	zero,zero,386
    4e7c:	00004ef0 	cmpltui	zero,zero,315
    4e80:	00004ef0 	cmpltui	zero,zero,315
    4e84:	00004ef0 	cmpltui	zero,zero,315
    4e88:	00004ef0 	cmpltui	zero,zero,315
    4e8c:	00004ef0 	cmpltui	zero,zero,315
    4e90:	00004ef0 	cmpltui	zero,zero,315
    4e94:	00004ef0 	cmpltui	zero,zero,315
    4e98:	000060b0 	cmpltui	zero,zero,386
    4e9c:	00006094 	movui	zero,386
    4ea0:	00006088 	cmpgei	zero,zero,386
    4ea4:	00006088 	cmpgei	zero,zero,386
    4ea8:	00006088 	cmpgei	zero,zero,386
    4eac:	00006080 	call	608 <_pan+0x9c>
    4eb0:	00006174 	movhi	zero,389
    4eb4:	00004ef0 	cmpltui	zero,zero,315
    4eb8:	00004ef0 	cmpltui	zero,zero,315
    4ebc:	00006160 	cmpeqi	zero,zero,389
    4ec0:	00004ef0 	cmpltui	zero,zero,315
    4ec4:	000060f8 	rdprs	zero,zero,387
    4ec8:	000060dc 	xori	zero,zero,387
    4ecc:	00006130 	cmpltui	zero,zero,388
    4ed0:	00004ef0 	cmpltui	zero,zero,315
    4ed4:	00004ef0 	cmpltui	zero,zero,315
    4ed8:	00006128 	cmpgeui	zero,zero,388
    4edc:	00004ef0 	cmpltui	zero,zero,315
    4ee0:	00005460 	cmpeqi	zero,zero,337
    4ee4:	00004ef0 	cmpltui	zero,zero,315
    4ee8:	00004ef0 	cmpltui	zero,zero,315
    4eec:	00005f1c 	xori	zero,zero,380
    4ef0:	2987883a 	add	r3,r5,r6
    4ef4:	18800003 	ldbu	r2,0(r3)
    4ef8:	1080004c 	andi	r2,r2,1
    4efc:	1005003a 	cmpeq	r2,r2,zero
    4f00:	10002c26 	beq	r2,zero,4fb4 <__svfscanf_r+0x450>
    4f04:	01000074 	movhi	r4,1
    4f08:	21300304 	addi	r4,r4,-16372
    4f0c:	00800284 	movi	r2,10
    4f10:	d900a015 	stw	r4,640(sp)
    4f14:	054000c4 	movi	r21,3
    4f18:	d880a115 	stw	r2,644(sp)
    4f1c:	80c00117 	ldw	r3,4(r16)
    4f20:	00c14a0e 	bge	zero,r3,544c <__svfscanf_r+0x8e8>
    4f24:	9880100c 	andi	r2,r19,64
    4f28:	10001326 	beq	r2,zero,4f78 <__svfscanf_r+0x414>
    4f2c:	00800104 	movi	r2,4
    4f30:	157f1f36 	bltu	r2,r21,4bb0 <__svfscanf_r+0x4c>
    4f34:	ad45883a 	add	r2,r21,r21
    4f38:	1085883a 	add	r2,r2,r2
    4f3c:	00c00034 	movhi	r3,0
    4f40:	18d3d404 	addi	r3,r3,20304
    4f44:	10c5883a 	add	r2,r2,r3
    4f48:	11000017 	ldw	r4,0(r2)
    4f4c:	2000683a 	jmp	r4
    4f50:	00004fbc 	xorhi	zero,zero,318
    4f54:	000050c8 	cmpgei	zero,zero,323
    4f58:	0000513c 	xorhi	zero,zero,324
    4f5c:	00005428 	cmpgeui	zero,zero,336
    4f60:	00005274 	movhi	zero,329
    4f64:	b009883a 	mov	r4,r22
    4f68:	800b883a 	mov	r5,r16
    4f6c:	000238c0 	call	238c <__srefill_r>
    4f70:	103f511e 	bne	r2,zero,4cb8 <__svfscanf_r+0x154>
    4f74:	8c400044 	addi	r17,r17,1
    4f78:	81400017 	ldw	r5,0(r16)
    4f7c:	90800017 	ldw	r2,0(r18)
    4f80:	28c00003 	ldbu	r3,0(r5)
    4f84:	1887883a 	add	r3,r3,r2
    4f88:	19000003 	ldbu	r4,0(r3)
    4f8c:	2100020c 	andi	r4,r4,8
    4f90:	203fe626 	beq	r4,zero,4f2c <__svfscanf_r+0x3c8>
    4f94:	80c00117 	ldw	r3,4(r16)
    4f98:	18ffffc4 	addi	r3,r3,-1
    4f9c:	80c00115 	stw	r3,4(r16)
    4fa0:	00fff00e 	bge	zero,r3,4f64 <__svfscanf_r+0x400>
    4fa4:	29800044 	addi	r6,r5,1
    4fa8:	8c400044 	addi	r17,r17,1
    4fac:	81800015 	stw	r6,0(r16)
    4fb0:	003ff106 	br	4f78 <__svfscanf_r+0x414>
    4fb4:	9cc00054 	ori	r19,r19,1
    4fb8:	003fd206 	br	4f04 <__svfscanf_r+0x3a0>
    4fbc:	d8c0a317 	ldw	r3,652(sp)
    4fc0:	1800021e 	bne	r3,zero,4fcc <__svfscanf_r+0x468>
    4fc4:	01000044 	movi	r4,1
    4fc8:	d900a315 	stw	r4,652(sp)
    4fcc:	9880004c 	andi	r2,r19,1
    4fd0:	1005003a 	cmpeq	r2,r2,zero
    4fd4:	1003d91e 	bne	r2,zero,5f3c <__svfscanf_r+0x13d8>
    4fd8:	9d40040c 	andi	r21,r19,16
    4fdc:	a839003a 	cmpeq	fp,r21,zero
    4fe0:	e0042526 	beq	fp,zero,6078 <__svfscanf_r+0x1514>
    4fe4:	d880a417 	ldw	r2,656(sp)
    4fe8:	14c00017 	ldw	r19,0(r2)
    4fec:	10800104 	addi	r2,r2,4
    4ff0:	d880a415 	stw	r2,656(sp)
    4ff4:	d8c0a317 	ldw	r3,652(sp)
    4ff8:	18041a26 	beq	r3,zero,6064 <__svfscanf_r+0x1500>
    4ffc:	01000074 	movhi	r4,1
    5000:	2114dc04 	addi	r4,r4,21360
    5004:	20800017 	ldw	r2,0(r4)
    5008:	103f2b26 	beq	r2,zero,4cb8 <__svfscanf_r+0x154>
    500c:	d8804404 	addi	r2,sp,272
    5010:	0025883a 	mov	r18,zero
    5014:	d880a615 	stw	r2,664(sp)
    5018:	05ffffc4 	movi	r23,-1
    501c:	80800017 	ldw	r2,0(r16)
    5020:	80c00117 	ldw	r3,4(r16)
    5024:	d900a617 	ldw	r4,664(sp)
    5028:	12000003 	ldbu	r8,0(r2)
    502c:	18ffffc4 	addi	r3,r3,-1
    5030:	11800044 	addi	r6,r2,1
    5034:	248f883a 	add	r7,r4,r18
    5038:	80c00115 	stw	r3,4(r16)
    503c:	81800015 	stw	r6,0(r16)
    5040:	3a000005 	stb	r8,0(r7)
    5044:	d9000204 	addi	r4,sp,8
    5048:	000b883a 	mov	r5,zero
    504c:	01800204 	movi	r6,8
    5050:	00021a40 	call	21a4 <memset>
    5054:	d980a617 	ldw	r6,664(sp)
    5058:	94800044 	addi	r18,r18,1
    505c:	d8800204 	addi	r2,sp,8
    5060:	b009883a 	mov	r4,r22
    5064:	980b883a 	mov	r5,r19
    5068:	900f883a 	mov	r7,r18
    506c:	d8800015 	stw	r2,0(sp)
    5070:	0008e3c0 	call	8e3c <_mbrtowc_r>
    5074:	1007883a 	mov	r3,r2
    5078:	15ff0f26 	beq	r2,r23,4cb8 <__svfscanf_r+0x154>
    507c:	1003f11e 	bne	r2,zero,6044 <__svfscanf_r+0x14e0>
    5080:	a800011e 	bne	r21,zero,5088 <__svfscanf_r+0x524>
    5084:	98000015 	stw	zero,0(r19)
    5088:	d8c0a317 	ldw	r3,652(sp)
    508c:	8ca3883a 	add	r17,r17,r18
    5090:	18ffffc4 	addi	r3,r3,-1
    5094:	d8c0a315 	stw	r3,652(sp)
    5098:	e0000126 	beq	fp,zero,50a0 <__svfscanf_r+0x53c>
    509c:	9cc00104 	addi	r19,r19,4
    50a0:	0025883a 	mov	r18,zero
    50a4:	80c00117 	ldw	r3,4(r16)
    50a8:	00c3e90e 	bge	zero,r3,6050 <__svfscanf_r+0x14ec>
    50ac:	d900a317 	ldw	r4,652(sp)
    50b0:	2003ec26 	beq	r4,zero,6064 <__svfscanf_r+0x1500>
    50b4:	00c00074 	movhi	r3,1
    50b8:	18d4dc04 	addi	r3,r3,21360
    50bc:	18800017 	ldw	r2,0(r3)
    50c0:	90bfd61e 	bne	r18,r2,501c <__svfscanf_r+0x4b8>
    50c4:	003efc06 	br	4cb8 <__svfscanf_r+0x154>
    50c8:	d880a317 	ldw	r2,652(sp)
    50cc:	1000021e 	bne	r2,zero,50d8 <__svfscanf_r+0x574>
    50d0:	00ffffc4 	movi	r3,-1
    50d4:	d8c0a315 	stw	r3,652(sp)
    50d8:	9880040c 	andi	r2,r19,16
    50dc:	10036526 	beq	r2,zero,5e74 <__svfscanf_r+0x1310>
    50e0:	0027883a 	mov	r19,zero
    50e4:	dd400404 	addi	r21,sp,16
    50e8:	81000017 	ldw	r4,0(r16)
    50ec:	20800003 	ldbu	r2,0(r4)
    50f0:	a885883a 	add	r2,r21,r2
    50f4:	10c00007 	ldb	r3,0(r2)
    50f8:	1803be26 	beq	r3,zero,5ff4 <__svfscanf_r+0x1490>
    50fc:	80c00117 	ldw	r3,4(r16)
    5100:	21800044 	addi	r6,r4,1
    5104:	d900a317 	ldw	r4,652(sp)
    5108:	18ffffc4 	addi	r3,r3,-1
    510c:	9cc00044 	addi	r19,r19,1
    5110:	81800015 	stw	r6,0(r16)
    5114:	80c00115 	stw	r3,4(r16)
    5118:	24c3b626 	beq	r4,r19,5ff4 <__svfscanf_r+0x1490>
    511c:	00fff216 	blt	zero,r3,50e8 <__svfscanf_r+0x584>
    5120:	b009883a 	mov	r4,r22
    5124:	800b883a 	mov	r5,r16
    5128:	000238c0 	call	238c <__srefill_r>
    512c:	103fee26 	beq	r2,zero,50e8 <__svfscanf_r+0x584>
    5130:	983ee126 	beq	r19,zero,4cb8 <__svfscanf_r+0x154>
    5134:	8ce3883a 	add	r17,r17,r19
    5138:	003e9d06 	br	4bb0 <__svfscanf_r+0x4c>
    513c:	d900a317 	ldw	r4,652(sp)
    5140:	2000021e 	bne	r4,zero,514c <__svfscanf_r+0x5e8>
    5144:	00bfffc4 	movi	r2,-1
    5148:	d880a315 	stw	r2,652(sp)
    514c:	9880004c 	andi	r2,r19,1
    5150:	1005003a 	cmpeq	r2,r2,zero
    5154:	1001f41e 	bne	r2,zero,5928 <__svfscanf_r+0xdc4>
    5158:	9dc0040c 	andi	r23,r19,16
    515c:	b807003a 	cmpeq	r3,r23,zero
    5160:	d8c0a515 	stw	r3,660(sp)
    5164:	1803b21e 	bne	r3,zero,6030 <__svfscanf_r+0x14cc>
    5168:	dd400104 	addi	r21,sp,4
    516c:	0027883a 	mov	r19,zero
    5170:	073fffc4 	movi	fp,-1
    5174:	81400017 	ldw	r5,0(r16)
    5178:	90800017 	ldw	r2,0(r18)
    517c:	29c00003 	ldbu	r7,0(r5)
    5180:	38c03fcc 	andi	r3,r7,255
    5184:	1887883a 	add	r3,r3,r2
    5188:	19000003 	ldbu	r4,0(r3)
    518c:	2100020c 	andi	r4,r4,8
    5190:	2000321e 	bne	r4,zero,525c <__svfscanf_r+0x6f8>
    5194:	d8c0a317 	ldw	r3,652(sp)
    5198:	18003026 	beq	r3,zero,525c <__svfscanf_r+0x6f8>
    519c:	00800074 	movhi	r2,1
    51a0:	1094dc04 	addi	r2,r2,21360
    51a4:	10c00017 	ldw	r3,0(r2)
    51a8:	98fec326 	beq	r19,r3,4cb8 <__svfscanf_r+0x154>
    51ac:	d8c04404 	addi	r3,sp,272
    51b0:	80800117 	ldw	r2,4(r16)
    51b4:	d8c0a615 	stw	r3,664(sp)
    51b8:	d900a617 	ldw	r4,664(sp)
    51bc:	10ffffc4 	addi	r3,r2,-1
    51c0:	29800044 	addi	r6,r5,1
    51c4:	80c00115 	stw	r3,4(r16)
    51c8:	24c5883a 	add	r2,r4,r19
    51cc:	81800015 	stw	r6,0(r16)
    51d0:	d9000204 	addi	r4,sp,8
    51d4:	000b883a 	mov	r5,zero
    51d8:	01800204 	movi	r6,8
    51dc:	11c00005 	stb	r7,0(r2)
    51e0:	00021a40 	call	21a4 <memset>
    51e4:	d980a617 	ldw	r6,664(sp)
    51e8:	9cc00044 	addi	r19,r19,1
    51ec:	d8800204 	addi	r2,sp,8
    51f0:	b009883a 	mov	r4,r22
    51f4:	a80b883a 	mov	r5,r21
    51f8:	980f883a 	mov	r7,r19
    51fc:	d8800015 	stw	r2,0(sp)
    5200:	0008e3c0 	call	8e3c <_mbrtowc_r>
    5204:	1007883a 	mov	r3,r2
    5208:	173eab26 	beq	r2,fp,4cb8 <__svfscanf_r+0x154>
    520c:	1003851e 	bne	r2,zero,6024 <__svfscanf_r+0x14c0>
    5210:	a8000015 	stw	zero,0(r21)
    5214:	a9000017 	ldw	r4,0(r21)
    5218:	0008b400 	call	8b40 <iswspace>
    521c:	1003781e 	bne	r2,zero,6000 <__svfscanf_r+0x149c>
    5220:	d900a317 	ldw	r4,652(sp)
    5224:	d880a517 	ldw	r2,660(sp)
    5228:	8ce3883a 	add	r17,r17,r19
    522c:	213fffc4 	addi	r4,r4,-1
    5230:	d900a315 	stw	r4,652(sp)
    5234:	10000126 	beq	r2,zero,523c <__svfscanf_r+0x6d8>
    5238:	ad400104 	addi	r21,r21,4
    523c:	0027883a 	mov	r19,zero
    5240:	80c00117 	ldw	r3,4(r16)
    5244:	00ffcb16 	blt	zero,r3,5174 <__svfscanf_r+0x610>
    5248:	b009883a 	mov	r4,r22
    524c:	800b883a 	mov	r5,r16
    5250:	000238c0 	call	238c <__srefill_r>
    5254:	103fc726 	beq	r2,zero,5174 <__svfscanf_r+0x610>
    5258:	983e971e 	bne	r19,zero,4cb8 <__svfscanf_r+0x154>
    525c:	b83e541e 	bne	r23,zero,4bb0 <__svfscanf_r+0x4c>
    5260:	d900a217 	ldw	r4,648(sp)
    5264:	a8000015 	stw	zero,0(r21)
    5268:	21000044 	addi	r4,r4,1
    526c:	d900a215 	stw	r4,648(sp)
    5270:	003e4f06 	br	4bb0 <__svfscanf_r+0x4c>
    5274:	d900a317 	ldw	r4,652(sp)
    5278:	00805704 	movi	r2,348
    527c:	20ffffc4 	addi	r3,r4,-1
    5280:	10c1ed2e 	bgeu	r2,r3,5a38 <__svfscanf_r+0xed4>
    5284:	00805744 	movi	r2,349
    5288:	21bfa8c4 	addi	r6,r4,-349
    528c:	9d41e014 	ori	r21,r19,1920
    5290:	d880a315 	stw	r2,652(sp)
    5294:	d8c04404 	addi	r3,sp,272
    5298:	d8c0a615 	stw	r3,664(sp)
    529c:	182f883a 	mov	r23,r3
    52a0:	d8009f15 	stw	zero,636(sp)
    52a4:	d8009e15 	stw	zero,632(sp)
    52a8:	d8009d15 	stw	zero,628(sp)
    52ac:	d8009c15 	stw	zero,624(sp)
    52b0:	0039883a 	mov	fp,zero
    52b4:	0025883a 	mov	r18,zero
    52b8:	80800017 	ldw	r2,0(r16)
    52bc:	11400003 	ldbu	r5,0(r2)
    52c0:	00801384 	movi	r2,78
    52c4:	28fff544 	addi	r3,r5,-43
    52c8:	18c03fcc 	andi	r3,r3,255
    52cc:	10c07d36 	bltu	r2,r3,54c4 <__svfscanf_r+0x960>
    52d0:	18c5883a 	add	r2,r3,r3
    52d4:	1085883a 	add	r2,r2,r2
    52d8:	00c00034 	movhi	r3,0
    52dc:	18d4bb04 	addi	r3,r3,21228
    52e0:	10c5883a 	add	r2,r2,r3
    52e4:	11000017 	ldw	r4,0(r2)
    52e8:	2000683a 	jmp	r4
    52ec:	0000547c 	xorhi	zero,zero,337
    52f0:	000054c4 	movi	zero,339
    52f4:	0000547c 	xorhi	zero,zero,337
    52f8:	00005610 	cmplti	zero,zero,344
    52fc:	000054c4 	movi	zero,339
    5300:	00005648 	cmpgei	zero,zero,345
    5304:	0000567c 	xorhi	zero,zero,345
    5308:	0000567c 	xorhi	zero,zero,345
    530c:	0000567c 	xorhi	zero,zero,345
    5310:	0000567c 	xorhi	zero,zero,345
    5314:	0000567c 	xorhi	zero,zero,345
    5318:	0000567c 	xorhi	zero,zero,345
    531c:	0000567c 	xorhi	zero,zero,345
    5320:	0000567c 	xorhi	zero,zero,345
    5324:	0000567c 	xorhi	zero,zero,345
    5328:	000054c4 	movi	zero,339
    532c:	000054c4 	movi	zero,339
    5330:	000054c4 	movi	zero,339
    5334:	000054c4 	movi	zero,339
    5338:	000054c4 	movi	zero,339
    533c:	000054c4 	movi	zero,339
    5340:	000054c4 	movi	zero,339
    5344:	0000569c 	xori	zero,zero,346
    5348:	000054c4 	movi	zero,339
    534c:	000054c4 	movi	zero,339
    5350:	000054c4 	movi	zero,339
    5354:	000056ac 	andhi	zero,zero,346
    5358:	00005748 	cmpgei	zero,zero,349
    535c:	000054c4 	movi	zero,339
    5360:	000054c4 	movi	zero,339
    5364:	00005764 	muli	zero,zero,349
    5368:	000054c4 	movi	zero,339
    536c:	000054c4 	movi	zero,339
    5370:	000054c4 	movi	zero,339
    5374:	000054c4 	movi	zero,339
    5378:	00005790 	cmplti	zero,zero,350
    537c:	000054c4 	movi	zero,339
    5380:	000054c4 	movi	zero,339
    5384:	000054c4 	movi	zero,339
    5388:	000054c4 	movi	zero,339
    538c:	000054c4 	movi	zero,339
    5390:	000057e4 	muli	zero,zero,351
    5394:	000054c4 	movi	zero,339
    5398:	000054c4 	movi	zero,339
    539c:	000054c4 	movi	zero,339
    53a0:	000054c4 	movi	zero,339
    53a4:	000058f4 	movhi	zero,355
    53a8:	000054c4 	movi	zero,339
    53ac:	000054c4 	movi	zero,339
    53b0:	000054c4 	movi	zero,339
    53b4:	000054c4 	movi	zero,339
    53b8:	000054c4 	movi	zero,339
    53bc:	000054c4 	movi	zero,339
    53c0:	000054c4 	movi	zero,339
    53c4:	0000569c 	xori	zero,zero,346
    53c8:	000054c4 	movi	zero,339
    53cc:	000054c4 	movi	zero,339
    53d0:	000054c4 	movi	zero,339
    53d4:	000056ac 	andhi	zero,zero,346
    53d8:	00005748 	cmpgei	zero,zero,349
    53dc:	000054c4 	movi	zero,339
    53e0:	000054c4 	movi	zero,339
    53e4:	00005764 	muli	zero,zero,349
    53e8:	000054c4 	movi	zero,339
    53ec:	000054c4 	movi	zero,339
    53f0:	000054c4 	movi	zero,339
    53f4:	000054c4 	movi	zero,339
    53f8:	00005790 	cmplti	zero,zero,350
    53fc:	000054c4 	movi	zero,339
    5400:	000054c4 	movi	zero,339
    5404:	000054c4 	movi	zero,339
    5408:	000054c4 	movi	zero,339
    540c:	000054c4 	movi	zero,339
    5410:	000057e4 	muli	zero,zero,351
    5414:	000054c4 	movi	zero,339
    5418:	000054c4 	movi	zero,339
    541c:	000054c4 	movi	zero,339
    5420:	000054c4 	movi	zero,339
    5424:	000058f4 	movhi	zero,355
    5428:	d900a317 	ldw	r4,652(sp)
    542c:	00805704 	movi	r2,348
    5430:	20ffffc4 	addi	r3,r4,-1
    5434:	10c18c2e 	bgeu	r2,r3,5a68 <__svfscanf_r+0xf04>
    5438:	00805744 	movi	r2,349
    543c:	257fa8c4 	addi	r21,r4,-349
    5440:	9c836014 	ori	r18,r19,3456
    5444:	d880a315 	stw	r2,652(sp)
    5448:	0001a106 	br	5ad0 <__svfscanf_r+0xf6c>
    544c:	b009883a 	mov	r4,r22
    5450:	800b883a 	mov	r5,r16
    5454:	000238c0 	call	238c <__srefill_r>
    5458:	103eb226 	beq	r2,zero,4f24 <__svfscanf_r+0x3c0>
    545c:	003e1606 	br	4cb8 <__svfscanf_r+0x154>
    5460:	01000284 	movi	r4,10
    5464:	00800074 	movhi	r2,1
    5468:	10b16304 	addi	r2,r2,-14964
    546c:	054000c4 	movi	r21,3
    5470:	d900a115 	stw	r4,644(sp)
    5474:	d880a015 	stw	r2,640(sp)
    5478:	003ea806 	br	4f1c <__svfscanf_r+0x3b8>
    547c:	a880200c 	andi	r2,r21,128
    5480:	10001026 	beq	r2,zero,54c4 <__svfscanf_r+0x960>
    5484:	00bfdfc4 	movi	r2,-129
    5488:	a8aa703a 	and	r21,r21,r2
    548c:	b9400005 	stb	r5,0(r23)
    5490:	bdc00044 	addi	r23,r23,1
    5494:	80c00117 	ldw	r3,4(r16)
    5498:	8c400044 	addi	r17,r17,1
    549c:	18bfffc4 	addi	r2,r3,-1
    54a0:	80800115 	stw	r2,4(r16)
    54a4:	0080610e 	bge	zero,r2,562c <__svfscanf_r+0xac8>
    54a8:	80800017 	ldw	r2,0(r16)
    54ac:	10800044 	addi	r2,r2,1
    54b0:	80800015 	stw	r2,0(r16)
    54b4:	d880a317 	ldw	r2,652(sp)
    54b8:	10bfffc4 	addi	r2,r2,-1
    54bc:	d880a315 	stw	r2,652(sp)
    54c0:	103f7d1e 	bne	r2,zero,52b8 <__svfscanf_r+0x754>
    54c4:	d8c09e17 	ldw	r3,632(sp)
    54c8:	18000226 	beq	r3,zero,54d4 <__svfscanf_r+0x970>
    54cc:	00bfbfc4 	movi	r2,-257
    54d0:	a8aa703a 	and	r21,r21,r2
    54d4:	90ffffc4 	addi	r3,r18,-1
    54d8:	00800044 	movi	r2,1
    54dc:	10c0cd2e 	bgeu	r2,r3,5814 <__svfscanf_r+0xcb0>
    54e0:	e1003fcc 	andi	r4,fp,255
    54e4:	2100201c 	xori	r4,r4,128
    54e8:	213fe004 	addi	r4,r4,-128
    54ec:	20ffffc4 	addi	r3,r4,-1
    54f0:	00800184 	movi	r2,6
    54f4:	10c01736 	bltu	r2,r3,5554 <__svfscanf_r+0x9f0>
    54f8:	00c00084 	movi	r3,2
    54fc:	1900880e 	bge	r3,r4,5720 <__svfscanf_r+0xbbc>
    5500:	008000c4 	movi	r2,3
    5504:	1100130e 	bge	r2,r4,5554 <__svfscanf_r+0x9f0>
    5508:	e4ffffc4 	addi	r19,fp,-1
    550c:	b825883a 	mov	r18,r23
    5510:	94bfffc4 	addi	r18,r18,-1
    5514:	91400007 	ldb	r5,0(r18)
    5518:	b009883a 	mov	r4,r22
    551c:	800d883a 	mov	r6,r16
    5520:	000cbac0 	call	cbac <_ungetc_r>
    5524:	9cffffc4 	addi	r19,r19,-1
    5528:	98c03fcc 	andi	r3,r19,255
    552c:	18c0201c 	xori	r3,r3,128
    5530:	18ffe004 	addi	r3,r3,-128
    5534:	00800084 	movi	r2,2
    5538:	18bff51e 	bne	r3,r2,5510 <__svfscanf_r+0x9ac>
    553c:	e0bfff04 	addi	r2,fp,-4
    5540:	10803fcc 	andi	r2,r2,255
    5544:	b887c83a 	sub	r3,r23,r2
    5548:	8885c83a 	sub	r2,r17,r2
    554c:	147fffc4 	addi	r17,r2,-1
    5550:	1dffffc4 	addi	r23,r3,-1
    5554:	a880400c 	andi	r2,r21,256
    5558:	10001226 	beq	r2,zero,55a4 <__svfscanf_r+0xa40>
    555c:	a881000c 	andi	r2,r21,1024
    5560:	1000651e 	bne	r2,zero,56f8 <__svfscanf_r+0xb94>
    5564:	bdffffc4 	addi	r23,r23,-1
    5568:	b9400007 	ldb	r5,0(r23)
    556c:	00801944 	movi	r2,101
    5570:	8c7fffc4 	addi	r17,r17,-1
    5574:	28800826 	beq	r5,r2,5598 <__svfscanf_r+0xa34>
    5578:	00801144 	movi	r2,69
    557c:	28800626 	beq	r5,r2,5598 <__svfscanf_r+0xa34>
    5580:	bdffffc4 	addi	r23,r23,-1
    5584:	b009883a 	mov	r4,r22
    5588:	800d883a 	mov	r6,r16
    558c:	000cbac0 	call	cbac <_ungetc_r>
    5590:	b9400007 	ldb	r5,0(r23)
    5594:	8c7fffc4 	addi	r17,r17,-1
    5598:	b009883a 	mov	r4,r22
    559c:	800d883a 	mov	r6,r16
    55a0:	000cbac0 	call	cbac <_ungetc_r>
    55a4:	a880040c 	andi	r2,r21,16
    55a8:	103d811e 	bne	r2,zero,4bb0 <__svfscanf_r+0x4c>
    55ac:	a8c1800c 	andi	r3,r21,1536
    55b0:	00810004 	movi	r2,1024
    55b4:	b8000005 	stb	zero,0(r23)
    55b8:	1880bb26 	beq	r3,r2,58a8 <__svfscanf_r+0xd44>
    55bc:	d8809d17 	ldw	r2,628(sp)
    55c0:	1000a61e 	bne	r2,zero,585c <__svfscanf_r+0xcf8>
    55c4:	d940a617 	ldw	r5,664(sp)
    55c8:	b009883a 	mov	r4,r22
    55cc:	000d883a 	mov	r6,zero
    55d0:	000a9e80 	call	a9e8 <_strtod_r>
    55d4:	a900004c 	andi	r4,r21,1
    55d8:	2009003a 	cmpeq	r4,r4,zero
    55dc:	1025883a 	mov	r18,r2
    55e0:	1827883a 	mov	r19,r3
    55e4:	2000951e 	bne	r4,zero,583c <__svfscanf_r+0xcd8>
    55e8:	d8c0a417 	ldw	r3,656(sp)
    55ec:	18800017 	ldw	r2,0(r3)
    55f0:	1d400104 	addi	r21,r3,4
    55f4:	14c00115 	stw	r19,4(r2)
    55f8:	14800015 	stw	r18,0(r2)
    55fc:	d8c0a217 	ldw	r3,648(sp)
    5600:	dd40a415 	stw	r21,656(sp)
    5604:	18c00044 	addi	r3,r3,1
    5608:	d8c0a215 	stw	r3,648(sp)
    560c:	003d6806 	br	4bb0 <__svfscanf_r+0x4c>
    5610:	a880800c 	andi	r2,r21,512
    5614:	103fab26 	beq	r2,zero,54c4 <__svfscanf_r+0x960>
    5618:	d9009e17 	ldw	r4,632(sp)
    561c:	00bf5fc4 	movi	r2,-641
    5620:	a8aa703a 	and	r21,r21,r2
    5624:	d9009f15 	stw	r4,636(sp)
    5628:	003f9806 	br	548c <__svfscanf_r+0x928>
    562c:	b009883a 	mov	r4,r22
    5630:	800b883a 	mov	r5,r16
    5634:	d980a715 	stw	r6,668(sp)
    5638:	000238c0 	call	238c <__srefill_r>
    563c:	d980a717 	ldw	r6,668(sp)
    5640:	103f9c26 	beq	r2,zero,54b4 <__svfscanf_r+0x950>
    5644:	003f9f06 	br	54c4 <__svfscanf_r+0x960>
    5648:	a880400c 	andi	r2,r21,256
    564c:	10000b26 	beq	r2,zero,567c <__svfscanf_r+0xb18>
    5650:	00bfdfc4 	movi	r2,-129
    5654:	a8aa703a 	and	r21,r21,r2
    5658:	d8809e17 	ldw	r2,632(sp)
    565c:	10800044 	addi	r2,r2,1
    5660:	d8809e15 	stw	r2,632(sp)
    5664:	303f8b26 	beq	r6,zero,5494 <__svfscanf_r+0x930>
    5668:	d8c0a317 	ldw	r3,652(sp)
    566c:	31bfffc4 	addi	r6,r6,-1
    5670:	18c00044 	addi	r3,r3,1
    5674:	d8c0a315 	stw	r3,652(sp)
    5678:	003f8606 	br	5494 <__svfscanf_r+0x930>
    567c:	e0803fcc 	andi	r2,fp,255
    5680:	1080201c 	xori	r2,r2,128
    5684:	10bfe004 	addi	r2,r2,-128
    5688:	9085883a 	add	r2,r18,r2
    568c:	103f8d1e 	bne	r2,zero,54c4 <__svfscanf_r+0x960>
    5690:	00bf9fc4 	movi	r2,-385
    5694:	a8aa703a 	and	r21,r21,r2
    5698:	003f7c06 	br	548c <__svfscanf_r+0x928>
    569c:	00800044 	movi	r2,1
    56a0:	90bf881e 	bne	r18,r2,54c4 <__svfscanf_r+0x960>
    56a4:	04800084 	movi	r18,2
    56a8:	003f7806 	br	548c <__svfscanf_r+0x928>
    56ac:	a8c1400c 	andi	r3,r21,1280
    56b0:	00810004 	movi	r2,1024
    56b4:	18800426 	beq	r3,r2,56c8 <__svfscanf_r+0xb64>
    56b8:	a884703a 	and	r2,r21,r2
    56bc:	103f8126 	beq	r2,zero,54c4 <__svfscanf_r+0x960>
    56c0:	d8809e17 	ldw	r2,632(sp)
    56c4:	103f8326 	beq	r2,zero,54d4 <__svfscanf_r+0x970>
    56c8:	a880800c 	andi	r2,r21,512
    56cc:	1000051e 	bne	r2,zero,56e4 <__svfscanf_r+0xb80>
    56d0:	d8c09e17 	ldw	r3,632(sp)
    56d4:	d9009f17 	ldw	r4,636(sp)
    56d8:	ddc09c15 	stw	r23,624(sp)
    56dc:	1907c83a 	sub	r3,r3,r4
    56e0:	d8c09d15 	stw	r3,628(sp)
    56e4:	00be7fc4 	movi	r2,-1537
    56e8:	a884703a 	and	r2,r21,r2
    56ec:	15406014 	ori	r21,r2,384
    56f0:	d8009e15 	stw	zero,632(sp)
    56f4:	003f6506 	br	548c <__svfscanf_r+0x928>
    56f8:	d900a617 	ldw	r4,664(sp)
    56fc:	25fd4e2e 	bgeu	r4,r23,4c38 <__svfscanf_r+0xd4>
    5700:	bdffffc4 	addi	r23,r23,-1
    5704:	b9400007 	ldb	r5,0(r23)
    5708:	b009883a 	mov	r4,r22
    570c:	800d883a 	mov	r6,r16
    5710:	000cbac0 	call	cbac <_ungetc_r>
    5714:	d880a617 	ldw	r2,664(sp)
    5718:	15fff936 	bltu	r2,r23,5700 <__svfscanf_r+0xb9c>
    571c:	003d4606 	br	4c38 <__svfscanf_r+0xd4>
    5720:	d900a617 	ldw	r4,664(sp)
    5724:	25fd442e 	bgeu	r4,r23,4c38 <__svfscanf_r+0xd4>
    5728:	bdffffc4 	addi	r23,r23,-1
    572c:	b9400007 	ldb	r5,0(r23)
    5730:	b009883a 	mov	r4,r22
    5734:	800d883a 	mov	r6,r16
    5738:	000cbac0 	call	cbac <_ungetc_r>
    573c:	d8c0a617 	ldw	r3,664(sp)
    5740:	1dfff936 	bltu	r3,r23,5728 <__svfscanf_r+0xbc4>
    5744:	003d3c06 	br	4c38 <__svfscanf_r+0xd4>
    5748:	e0c03fcc 	andi	r3,fp,255
    574c:	18c0201c 	xori	r3,r3,128
    5750:	18ffe004 	addi	r3,r3,-128
    5754:	00800084 	movi	r2,2
    5758:	18bf5a1e 	bne	r3,r2,54c4 <__svfscanf_r+0x960>
    575c:	070000c4 	movi	fp,3
    5760:	003f4a06 	br	548c <__svfscanf_r+0x928>
    5764:	e0c03fcc 	andi	r3,fp,255
    5768:	18c0201c 	xori	r3,r3,128
    576c:	18ffe004 	addi	r3,r3,-128
    5770:	1800231e 	bne	r3,zero,5800 <__svfscanf_r+0xc9c>
    5774:	a8c1c00c 	andi	r3,r21,1792
    5778:	0081c004 	movi	r2,1792
    577c:	18bf511e 	bne	r3,r2,54c4 <__svfscanf_r+0x960>
    5780:	00be1fc4 	movi	r2,-1921
    5784:	a8aa703a 	and	r21,r21,r2
    5788:	07000044 	movi	fp,1
    578c:	003f3f06 	br	548c <__svfscanf_r+0x928>
    5790:	9000101e 	bne	r18,zero,57d4 <__svfscanf_r+0xc70>
    5794:	a8c1c00c 	andi	r3,r21,1792
    5798:	0081c004 	movi	r2,1792
    579c:	18800926 	beq	r3,r2,57c4 <__svfscanf_r+0xc60>
    57a0:	e0c03fcc 	andi	r3,fp,255
    57a4:	18c0201c 	xori	r3,r3,128
    57a8:	18ffe004 	addi	r3,r3,-128
    57ac:	00800044 	movi	r2,1
    57b0:	18800226 	beq	r3,r2,57bc <__svfscanf_r+0xc58>
    57b4:	00800104 	movi	r2,4
    57b8:	18bf421e 	bne	r3,r2,54c4 <__svfscanf_r+0x960>
    57bc:	e7000044 	addi	fp,fp,1
    57c0:	003f3206 	br	548c <__svfscanf_r+0x928>
    57c4:	00be1fc4 	movi	r2,-1921
    57c8:	a8aa703a 	and	r21,r21,r2
    57cc:	04800044 	movi	r18,1
    57d0:	003f2e06 	br	548c <__svfscanf_r+0x928>
    57d4:	00800084 	movi	r2,2
    57d8:	90bff11e 	bne	r18,r2,57a0 <__svfscanf_r+0xc3c>
    57dc:	048000c4 	movi	r18,3
    57e0:	003f2a06 	br	548c <__svfscanf_r+0x928>
    57e4:	e0c03fcc 	andi	r3,fp,255
    57e8:	18c0201c 	xori	r3,r3,128
    57ec:	18ffe004 	addi	r3,r3,-128
    57f0:	00800184 	movi	r2,6
    57f4:	18bf331e 	bne	r3,r2,54c4 <__svfscanf_r+0x960>
    57f8:	070001c4 	movi	fp,7
    57fc:	003f2306 	br	548c <__svfscanf_r+0x928>
    5800:	008000c4 	movi	r2,3
    5804:	18bfed26 	beq	r3,r2,57bc <__svfscanf_r+0xc58>
    5808:	00800144 	movi	r2,5
    580c:	18bfeb26 	beq	r3,r2,57bc <__svfscanf_r+0xc58>
    5810:	003f2c06 	br	54c4 <__svfscanf_r+0x960>
    5814:	d900a617 	ldw	r4,664(sp)
    5818:	25fd072e 	bgeu	r4,r23,4c38 <__svfscanf_r+0xd4>
    581c:	bdffffc4 	addi	r23,r23,-1
    5820:	b9400007 	ldb	r5,0(r23)
    5824:	b009883a 	mov	r4,r22
    5828:	800d883a 	mov	r6,r16
    582c:	000cbac0 	call	cbac <_ungetc_r>
    5830:	d880a617 	ldw	r2,664(sp)
    5834:	15fff936 	bltu	r2,r23,581c <__svfscanf_r+0xcb8>
    5838:	003cff06 	br	4c38 <__svfscanf_r+0xd4>
    583c:	a880008c 	andi	r2,r21,2
    5840:	10002026 	beq	r2,zero,58c4 <__svfscanf_r+0xd60>
    5844:	d900a417 	ldw	r4,656(sp)
    5848:	20800017 	ldw	r2,0(r4)
    584c:	25400104 	addi	r21,r4,4
    5850:	10c00115 	stw	r3,4(r2)
    5854:	14800015 	stw	r18,0(r2)
    5858:	003f6806 	br	55fc <__svfscanf_r+0xa98>
    585c:	d8c09c17 	ldw	r3,624(sp)
    5860:	b009883a 	mov	r4,r22
    5864:	000d883a 	mov	r6,zero
    5868:	19400044 	addi	r5,r3,1
    586c:	01c00284 	movi	r7,10
    5870:	000c00c0 	call	c00c <_strtol_r>
    5874:	d9009d17 	ldw	r4,628(sp)
    5878:	110dc83a 	sub	r6,r2,r4
    587c:	d8c0a617 	ldw	r3,664(sp)
    5880:	d9009c17 	ldw	r4,624(sp)
    5884:	188054c4 	addi	r2,r3,339
    5888:	20800236 	bltu	r4,r2,5894 <__svfscanf_r+0xd30>
    588c:	18805484 	addi	r2,r3,338
    5890:	d8809c15 	stw	r2,624(sp)
    5894:	d9009c17 	ldw	r4,624(sp)
    5898:	01400074 	movhi	r5,1
    589c:	294d6904 	addi	r5,r5,13732
    58a0:	00025dc0 	call	25dc <sprintf>
    58a4:	003f4706 	br	55c4 <__svfscanf_r+0xa60>
    58a8:	d8c09e17 	ldw	r3,632(sp)
    58ac:	d9009f17 	ldw	r4,636(sp)
    58b0:	1905c83a 	sub	r2,r3,r4
    58b4:	103f4326 	beq	r2,zero,55c4 <__svfscanf_r+0xa60>
    58b8:	008dc83a 	sub	r6,zero,r2
    58bc:	ddc09c15 	stw	r23,624(sp)
    58c0:	003fee06 	br	587c <__svfscanf_r+0xd18>
    58c4:	d880a417 	ldw	r2,656(sp)
    58c8:	9009883a 	mov	r4,r18
    58cc:	180b883a 	mov	r5,r3
    58d0:	15c00017 	ldw	r23,0(r2)
    58d4:	15400104 	addi	r21,r2,4
    58d8:	000a8a80 	call	a8a8 <__isnand>
    58dc:	10021c1e 	bne	r2,zero,6150 <__svfscanf_r+0x15ec>
    58e0:	980b883a 	mov	r5,r19
    58e4:	9009883a 	mov	r4,r18
    58e8:	000fa200 	call	fa20 <__truncdfsf2>
    58ec:	b8800015 	stw	r2,0(r23)
    58f0:	003f4206 	br	55fc <__svfscanf_r+0xa98>
    58f4:	e0c03fcc 	andi	r3,fp,255
    58f8:	18c0201c 	xori	r3,r3,128
    58fc:	18ffe004 	addi	r3,r3,-128
    5900:	008001c4 	movi	r2,7
    5904:	18beef1e 	bne	r3,r2,54c4 <__svfscanf_r+0x960>
    5908:	07000204 	movi	fp,8
    590c:	003edf06 	br	548c <__svfscanf_r+0x928>
    5910:	d900a317 	ldw	r4,652(sp)
    5914:	208002a4 	muli	r2,r4,10
    5918:	1145883a 	add	r2,r2,r5
    591c:	10bff404 	addi	r2,r2,-48
    5920:	d880a315 	stw	r2,652(sp)
    5924:	003ceb06 	br	4cd4 <__svfscanf_r+0x170>
    5928:	9880040c 	andi	r2,r19,16
    592c:	10001426 	beq	r2,zero,5980 <__svfscanf_r+0xe1c>
    5930:	0027883a 	mov	r19,zero
    5934:	00000906 	br	595c <__svfscanf_r+0xdf8>
    5938:	80c00117 	ldw	r3,4(r16)
    593c:	d880a317 	ldw	r2,652(sp)
    5940:	29800044 	addi	r6,r5,1
    5944:	18ffffc4 	addi	r3,r3,-1
    5948:	9cc00044 	addi	r19,r19,1
    594c:	81800015 	stw	r6,0(r16)
    5950:	80c00115 	stw	r3,4(r16)
    5954:	14fdf726 	beq	r2,r19,5134 <__svfscanf_r+0x5d0>
    5958:	00c02c0e 	bge	zero,r3,5a0c <__svfscanf_r+0xea8>
    595c:	81400017 	ldw	r5,0(r16)
    5960:	90800017 	ldw	r2,0(r18)
    5964:	28c00003 	ldbu	r3,0(r5)
    5968:	1887883a 	add	r3,r3,r2
    596c:	19000003 	ldbu	r4,0(r3)
    5970:	2100020c 	andi	r4,r4,8
    5974:	203ff026 	beq	r4,zero,5938 <__svfscanf_r+0xdd4>
    5978:	8ce3883a 	add	r17,r17,r19
    597c:	003c8c06 	br	4bb0 <__svfscanf_r+0x4c>
    5980:	d8c0a417 	ldw	r3,656(sp)
    5984:	1d400017 	ldw	r21,0(r3)
    5988:	a827883a 	mov	r19,r21
    598c:	00000e06 	br	59c8 <__svfscanf_r+0xe64>
    5990:	80800117 	ldw	r2,4(r16)
    5994:	d900a317 	ldw	r4,652(sp)
    5998:	29800044 	addi	r6,r5,1
    599c:	10ffffc4 	addi	r3,r2,-1
    59a0:	213fffc4 	addi	r4,r4,-1
    59a4:	d900a315 	stw	r4,652(sp)
    59a8:	80c00115 	stw	r3,4(r16)
    59ac:	28800003 	ldbu	r2,0(r5)
    59b0:	98800005 	stb	r2,0(r19)
    59b4:	81800015 	stw	r6,0(r16)
    59b8:	9cc00044 	addi	r19,r19,1
    59bc:	20000926 	beq	r4,zero,59e4 <__svfscanf_r+0xe80>
    59c0:	80800117 	ldw	r2,4(r16)
    59c4:	0080170e 	bge	zero,r2,5a24 <__svfscanf_r+0xec0>
    59c8:	81400017 	ldw	r5,0(r16)
    59cc:	90800017 	ldw	r2,0(r18)
    59d0:	28c00003 	ldbu	r3,0(r5)
    59d4:	1887883a 	add	r3,r3,r2
    59d8:	19000003 	ldbu	r4,0(r3)
    59dc:	2100020c 	andi	r4,r4,8
    59e0:	203feb26 	beq	r4,zero,5990 <__svfscanf_r+0xe2c>
    59e4:	9d45c83a 	sub	r2,r19,r21
    59e8:	d8c0a217 	ldw	r3,648(sp)
    59ec:	88a3883a 	add	r17,r17,r2
    59f0:	d880a417 	ldw	r2,656(sp)
    59f4:	18c00044 	addi	r3,r3,1
    59f8:	d8c0a215 	stw	r3,648(sp)
    59fc:	10800104 	addi	r2,r2,4
    5a00:	d880a415 	stw	r2,656(sp)
    5a04:	98000005 	stb	zero,0(r19)
    5a08:	003c6906 	br	4bb0 <__svfscanf_r+0x4c>
    5a0c:	b009883a 	mov	r4,r22
    5a10:	800b883a 	mov	r5,r16
    5a14:	000238c0 	call	238c <__srefill_r>
    5a18:	103fd026 	beq	r2,zero,595c <__svfscanf_r+0xdf8>
    5a1c:	8ce3883a 	add	r17,r17,r19
    5a20:	003c6306 	br	4bb0 <__svfscanf_r+0x4c>
    5a24:	b009883a 	mov	r4,r22
    5a28:	800b883a 	mov	r5,r16
    5a2c:	000238c0 	call	238c <__srefill_r>
    5a30:	103fe526 	beq	r2,zero,59c8 <__svfscanf_r+0xe64>
    5a34:	003feb06 	br	59e4 <__svfscanf_r+0xe80>
    5a38:	d900a317 	ldw	r4,652(sp)
    5a3c:	9d41e014 	ori	r21,r19,1920
    5a40:	2000821e 	bne	r4,zero,5c4c <__svfscanf_r+0x10e8>
    5a44:	d8c04404 	addi	r3,sp,272
    5a48:	182f883a 	mov	r23,r3
    5a4c:	0039883a 	mov	fp,zero
    5a50:	d8c0a615 	stw	r3,664(sp)
    5a54:	d8009c15 	stw	zero,624(sp)
    5a58:	d8009d15 	stw	zero,628(sp)
    5a5c:	d8009f15 	stw	zero,636(sp)
    5a60:	d8009e15 	stw	zero,632(sp)
    5a64:	003e9e06 	br	54e0 <__svfscanf_r+0x97c>
    5a68:	d900a317 	ldw	r4,652(sp)
    5a6c:	9c836014 	ori	r18,r19,3456
    5a70:	2000161e 	bne	r4,zero,5acc <__svfscanf_r+0xf68>
    5a74:	d8804404 	addi	r2,sp,272
    5a78:	d880a615 	stw	r2,664(sp)
    5a7c:	002f883a 	mov	r23,zero
    5a80:	1027883a 	mov	r19,r2
    5a84:	9080400c 	andi	r2,r18,256
    5a88:	10000926 	beq	r2,zero,5ab0 <__svfscanf_r+0xf4c>
    5a8c:	d8c0a617 	ldw	r3,664(sp)
    5a90:	1cc0052e 	bgeu	r3,r19,5aa8 <__svfscanf_r+0xf44>
    5a94:	9cffffc4 	addi	r19,r19,-1
    5a98:	99400007 	ldb	r5,0(r19)
    5a9c:	b009883a 	mov	r4,r22
    5aa0:	800d883a 	mov	r6,r16
    5aa4:	000cbac0 	call	cbac <_ungetc_r>
    5aa8:	d900a617 	ldw	r4,664(sp)
    5aac:	24fc6226 	beq	r4,r19,4c38 <__svfscanf_r+0xd4>
    5ab0:	9080040c 	andi	r2,r18,16
    5ab4:	10006726 	beq	r2,zero,5c54 <__svfscanf_r+0x10f0>
    5ab8:	d8c0a617 	ldw	r3,664(sp)
    5abc:	98c5c83a 	sub	r2,r19,r3
    5ac0:	b885883a 	add	r2,r23,r2
    5ac4:	88a3883a 	add	r17,r17,r2
    5ac8:	003c3906 	br	4bb0 <__svfscanf_r+0x4c>
    5acc:	002b883a 	mov	r21,zero
    5ad0:	d8c04404 	addi	r3,sp,272
    5ad4:	d8c0a615 	stw	r3,664(sp)
    5ad8:	002f883a 	mov	r23,zero
    5adc:	1827883a 	mov	r19,r3
    5ae0:	81800017 	ldw	r6,0(r16)
    5ae4:	00c01344 	movi	r3,77
    5ae8:	31400003 	ldbu	r5,0(r6)
    5aec:	28bff544 	addi	r2,r5,-43
    5af0:	10803fcc 	andi	r2,r2,255
    5af4:	18bfe336 	bltu	r3,r2,5a84 <__svfscanf_r+0xf20>
    5af8:	1085883a 	add	r2,r2,r2
    5afc:	1085883a 	add	r2,r2,r2
    5b00:	00c00034 	movhi	r3,0
    5b04:	18d6c504 	addi	r3,r3,23316
    5b08:	10c5883a 	add	r2,r2,r3
    5b0c:	11000017 	ldw	r4,0(r2)
    5b10:	2000683a 	jmp	r4
    5b14:	00005ca8 	cmpgeui	zero,zero,370
    5b18:	00005a84 	movi	zero,362
    5b1c:	00005ca8 	cmpgeui	zero,zero,370
    5b20:	00005a84 	movi	zero,362
    5b24:	00005a84 	movi	zero,362
    5b28:	00005cec 	andhi	zero,zero,371
    5b2c:	00005de8 	cmpgeui	zero,zero,375
    5b30:	00005de8 	cmpgeui	zero,zero,375
    5b34:	00005de8 	cmpgeui	zero,zero,375
    5b38:	00005de8 	cmpgeui	zero,zero,375
    5b3c:	00005de8 	cmpgeui	zero,zero,375
    5b40:	00005de8 	cmpgeui	zero,zero,375
    5b44:	00005de8 	cmpgeui	zero,zero,375
    5b48:	00005e10 	cmplti	zero,zero,376
    5b4c:	00005e10 	cmplti	zero,zero,376
    5b50:	00005a84 	movi	zero,362
    5b54:	00005a84 	movi	zero,362
    5b58:	00005a84 	movi	zero,362
    5b5c:	00005a84 	movi	zero,362
    5b60:	00005a84 	movi	zero,362
    5b64:	00005a84 	movi	zero,362
    5b68:	00005a84 	movi	zero,362
    5b6c:	00005e40 	call	5e4 <_pan+0x78>
    5b70:	00005e40 	call	5e4 <_pan+0x78>
    5b74:	00005e40 	call	5e4 <_pan+0x78>
    5b78:	00005e40 	call	5e4 <_pan+0x78>
    5b7c:	00005e40 	call	5e4 <_pan+0x78>
    5b80:	00005e40 	call	5e4 <_pan+0x78>
    5b84:	00005a84 	movi	zero,362
    5b88:	00005a84 	movi	zero,362
    5b8c:	00005a84 	movi	zero,362
    5b90:	00005a84 	movi	zero,362
    5b94:	00005a84 	movi	zero,362
    5b98:	00005a84 	movi	zero,362
    5b9c:	00005a84 	movi	zero,362
    5ba0:	00005a84 	movi	zero,362
    5ba4:	00005a84 	movi	zero,362
    5ba8:	00005a84 	movi	zero,362
    5bac:	00005a84 	movi	zero,362
    5bb0:	00005a84 	movi	zero,362
    5bb4:	00005a84 	movi	zero,362
    5bb8:	00005a84 	movi	zero,362
    5bbc:	00005a84 	movi	zero,362
    5bc0:	00005a84 	movi	zero,362
    5bc4:	00005a84 	movi	zero,362
    5bc8:	00005e50 	cmplti	zero,zero,377
    5bcc:	00005a84 	movi	zero,362
    5bd0:	00005a84 	movi	zero,362
    5bd4:	00005a84 	movi	zero,362
    5bd8:	00005a84 	movi	zero,362
    5bdc:	00005a84 	movi	zero,362
    5be0:	00005a84 	movi	zero,362
    5be4:	00005a84 	movi	zero,362
    5be8:	00005a84 	movi	zero,362
    5bec:	00005e40 	call	5e4 <_pan+0x78>
    5bf0:	00005e40 	call	5e4 <_pan+0x78>
    5bf4:	00005e40 	call	5e4 <_pan+0x78>
    5bf8:	00005e40 	call	5e4 <_pan+0x78>
    5bfc:	00005e40 	call	5e4 <_pan+0x78>
    5c00:	00005e40 	call	5e4 <_pan+0x78>
    5c04:	00005a84 	movi	zero,362
    5c08:	00005a84 	movi	zero,362
    5c0c:	00005a84 	movi	zero,362
    5c10:	00005a84 	movi	zero,362
    5c14:	00005a84 	movi	zero,362
    5c18:	00005a84 	movi	zero,362
    5c1c:	00005a84 	movi	zero,362
    5c20:	00005a84 	movi	zero,362
    5c24:	00005a84 	movi	zero,362
    5c28:	00005a84 	movi	zero,362
    5c2c:	00005a84 	movi	zero,362
    5c30:	00005a84 	movi	zero,362
    5c34:	00005a84 	movi	zero,362
    5c38:	00005a84 	movi	zero,362
    5c3c:	00005a84 	movi	zero,362
    5c40:	00005a84 	movi	zero,362
    5c44:	00005a84 	movi	zero,362
    5c48:	00005e50 	cmplti	zero,zero,377
    5c4c:	000d883a 	mov	r6,zero
    5c50:	003d9006 	br	5294 <__svfscanf_r+0x730>
    5c54:	98000005 	stb	zero,0(r19)
    5c58:	d8c0a017 	ldw	r3,640(sp)
    5c5c:	d940a617 	ldw	r5,664(sp)
    5c60:	d9c0a117 	ldw	r7,644(sp)
    5c64:	b009883a 	mov	r4,r22
    5c68:	000d883a 	mov	r6,zero
    5c6c:	183ee83a 	callr	r3
    5c70:	1007883a 	mov	r3,r2
    5c74:	9080080c 	andi	r2,r18,32
    5c78:	10004d1e 	bne	r2,zero,5db0 <__svfscanf_r+0x124c>
    5c7c:	9080010c 	andi	r2,r18,4
    5c80:	10003426 	beq	r2,zero,5d54 <__svfscanf_r+0x11f0>
    5c84:	d900a417 	ldw	r4,656(sp)
    5c88:	20800017 	ldw	r2,0(r4)
    5c8c:	21000104 	addi	r4,r4,4
    5c90:	d900a415 	stw	r4,656(sp)
    5c94:	10c0000d 	sth	r3,0(r2)
    5c98:	d880a217 	ldw	r2,648(sp)
    5c9c:	10800044 	addi	r2,r2,1
    5ca0:	d880a215 	stw	r2,648(sp)
    5ca4:	003f8406 	br	5ab8 <__svfscanf_r+0xf54>
    5ca8:	9080200c 	andi	r2,r18,128
    5cac:	103f7526 	beq	r2,zero,5a84 <__svfscanf_r+0xf20>
    5cb0:	00bfdfc4 	movi	r2,-129
    5cb4:	90a4703a 	and	r18,r18,r2
    5cb8:	99400005 	stb	r5,0(r19)
    5cbc:	9cc00044 	addi	r19,r19,1
    5cc0:	80c00117 	ldw	r3,4(r16)
    5cc4:	18ffffc4 	addi	r3,r3,-1
    5cc8:	80c00115 	stw	r3,4(r16)
    5ccc:	00c0130e 	bge	zero,r3,5d1c <__svfscanf_r+0x11b8>
    5cd0:	31800044 	addi	r6,r6,1
    5cd4:	81800015 	stw	r6,0(r16)
    5cd8:	d880a317 	ldw	r2,652(sp)
    5cdc:	10bfffc4 	addi	r2,r2,-1
    5ce0:	d880a315 	stw	r2,652(sp)
    5ce4:	103f7e1e 	bne	r2,zero,5ae0 <__svfscanf_r+0xf7c>
    5ce8:	003f6606 	br	5a84 <__svfscanf_r+0xf20>
    5cec:	9082000c 	andi	r2,r18,2048
    5cf0:	103ff126 	beq	r2,zero,5cb8 <__svfscanf_r+0x1154>
    5cf4:	d8c0a117 	ldw	r3,644(sp)
    5cf8:	1800031e 	bne	r3,zero,5d08 <__svfscanf_r+0x11a4>
    5cfc:	01000204 	movi	r4,8
    5d00:	94808014 	ori	r18,r18,512
    5d04:	d900a115 	stw	r4,644(sp)
    5d08:	9081000c 	andi	r2,r18,1024
    5d0c:	10000826 	beq	r2,zero,5d30 <__svfscanf_r+0x11cc>
    5d10:	00be9fc4 	movi	r2,-1409
    5d14:	90a4703a 	and	r18,r18,r2
    5d18:	003fe706 	br	5cb8 <__svfscanf_r+0x1154>
    5d1c:	b009883a 	mov	r4,r22
    5d20:	800b883a 	mov	r5,r16
    5d24:	000238c0 	call	238c <__srefill_r>
    5d28:	103feb26 	beq	r2,zero,5cd8 <__svfscanf_r+0x1174>
    5d2c:	003f5506 	br	5a84 <__svfscanf_r+0xf20>
    5d30:	a8000426 	beq	r21,zero,5d44 <__svfscanf_r+0x11e0>
    5d34:	d880a317 	ldw	r2,652(sp)
    5d38:	ad7fffc4 	addi	r21,r21,-1
    5d3c:	10800044 	addi	r2,r2,1
    5d40:	d880a315 	stw	r2,652(sp)
    5d44:	00bf1fc4 	movi	r2,-897
    5d48:	90a4703a 	and	r18,r18,r2
    5d4c:	bdc00044 	addi	r23,r23,1
    5d50:	003fdb06 	br	5cc0 <__svfscanf_r+0x115c>
    5d54:	9080004c 	andi	r2,r18,1
    5d58:	1005003a 	cmpeq	r2,r2,zero
    5d5c:	10001426 	beq	r2,zero,5db0 <__svfscanf_r+0x124c>
    5d60:	9080008c 	andi	r2,r18,2
    5d64:	10001226 	beq	r2,zero,5db0 <__svfscanf_r+0x124c>
    5d68:	d8c0a017 	ldw	r3,640(sp)
    5d6c:	00800074 	movhi	r2,1
    5d70:	10b16304 	addi	r2,r2,-14964
    5d74:	18801426 	beq	r3,r2,5dc8 <__svfscanf_r+0x1264>
    5d78:	d9c0a117 	ldw	r7,644(sp)
    5d7c:	d940a617 	ldw	r5,664(sp)
    5d80:	000d883a 	mov	r6,zero
    5d84:	b009883a 	mov	r4,r22
    5d88:	000c2740 	call	c274 <_strtoll_r>
    5d8c:	100d883a 	mov	r6,r2
    5d90:	180f883a 	mov	r7,r3
    5d94:	d900a417 	ldw	r4,656(sp)
    5d98:	20800017 	ldw	r2,0(r4)
    5d9c:	21000104 	addi	r4,r4,4
    5da0:	d900a415 	stw	r4,656(sp)
    5da4:	11c00115 	stw	r7,4(r2)
    5da8:	11800015 	stw	r6,0(r2)
    5dac:	003fba06 	br	5c98 <__svfscanf_r+0x1134>
    5db0:	d900a417 	ldw	r4,656(sp)
    5db4:	20800017 	ldw	r2,0(r4)
    5db8:	21000104 	addi	r4,r4,4
    5dbc:	d900a415 	stw	r4,656(sp)
    5dc0:	10c00015 	stw	r3,0(r2)
    5dc4:	003fb406 	br	5c98 <__svfscanf_r+0x1134>
    5dc8:	d9c0a117 	ldw	r7,644(sp)
    5dcc:	d940a617 	ldw	r5,664(sp)
    5dd0:	000d883a 	mov	r6,zero
    5dd4:	b009883a 	mov	r4,r22
    5dd8:	000c7e00 	call	c7e0 <_strtoull_r>
    5ddc:	100d883a 	mov	r6,r2
    5de0:	180f883a 	mov	r7,r3
    5de4:	003feb06 	br	5d94 <__svfscanf_r+0x1230>
    5de8:	d8c0a117 	ldw	r3,644(sp)
    5dec:	18c5883a 	add	r2,r3,r3
    5df0:	00c00074 	movhi	r3,1
    5df4:	18cd6a84 	addi	r3,r3,13738
    5df8:	10c5883a 	add	r2,r2,r3
    5dfc:	1080000f 	ldh	r2,0(r2)
    5e00:	00fd1fc4 	movi	r3,-2945
    5e04:	90e4703a 	and	r18,r18,r3
    5e08:	d880a115 	stw	r2,644(sp)
    5e0c:	003faa06 	br	5cb8 <__svfscanf_r+0x1154>
    5e10:	d900a117 	ldw	r4,644(sp)
    5e14:	00c00074 	movhi	r3,1
    5e18:	18cd6a84 	addi	r3,r3,13738
    5e1c:	2105883a 	add	r2,r4,r4
    5e20:	10c5883a 	add	r2,r2,r3
    5e24:	1080000f 	ldh	r2,0(r2)
    5e28:	00c00204 	movi	r3,8
    5e2c:	d880a115 	stw	r2,644(sp)
    5e30:	18bf140e 	bge	r3,r2,5a84 <__svfscanf_r+0xf20>
    5e34:	00bd1fc4 	movi	r2,-2945
    5e38:	90a4703a 	and	r18,r18,r2
    5e3c:	003f9e06 	br	5cb8 <__svfscanf_r+0x1154>
    5e40:	d8c0a117 	ldw	r3,644(sp)
    5e44:	00800284 	movi	r2,10
    5e48:	10fffa16 	blt	r2,r3,5e34 <__svfscanf_r+0x12d0>
    5e4c:	003f0d06 	br	5a84 <__svfscanf_r+0xf20>
    5e50:	90c1800c 	andi	r3,r18,1536
    5e54:	00808004 	movi	r2,512
    5e58:	18bf0a1e 	bne	r3,r2,5a84 <__svfscanf_r+0xf20>
    5e5c:	00bf7fc4 	movi	r2,-513
    5e60:	9084703a 	and	r2,r18,r2
    5e64:	01000404 	movi	r4,16
    5e68:	14814014 	ori	r18,r2,1280
    5e6c:	d900a115 	stw	r4,644(sp)
    5e70:	003f9106 	br	5cb8 <__svfscanf_r+0x1154>
    5e74:	d880a417 	ldw	r2,656(sp)
    5e78:	dd400404 	addi	r21,sp,16
    5e7c:	14800017 	ldw	r18,0(r2)
    5e80:	9027883a 	mov	r19,r18
    5e84:	81000017 	ldw	r4,0(r16)
    5e88:	20800003 	ldbu	r2,0(r4)
    5e8c:	a885883a 	add	r2,r21,r2
    5e90:	10c00007 	ldb	r3,0(r2)
    5e94:	18001426 	beq	r3,zero,5ee8 <__svfscanf_r+0x1384>
    5e98:	d8c0a317 	ldw	r3,652(sp)
    5e9c:	80800117 	ldw	r2,4(r16)
    5ea0:	21800044 	addi	r6,r4,1
    5ea4:	18ffffc4 	addi	r3,r3,-1
    5ea8:	d8c0a315 	stw	r3,652(sp)
    5eac:	10ffffc4 	addi	r3,r2,-1
    5eb0:	80c00115 	stw	r3,4(r16)
    5eb4:	20800003 	ldbu	r2,0(r4)
    5eb8:	90800005 	stb	r2,0(r18)
    5ebc:	d900a317 	ldw	r4,652(sp)
    5ec0:	81800015 	stw	r6,0(r16)
    5ec4:	94800044 	addi	r18,r18,1
    5ec8:	20000726 	beq	r4,zero,5ee8 <__svfscanf_r+0x1384>
    5ecc:	80800117 	ldw	r2,4(r16)
    5ed0:	00bfec16 	blt	zero,r2,5e84 <__svfscanf_r+0x1320>
    5ed4:	b009883a 	mov	r4,r22
    5ed8:	800b883a 	mov	r5,r16
    5edc:	000238c0 	call	238c <__srefill_r>
    5ee0:	103fe826 	beq	r2,zero,5e84 <__svfscanf_r+0x1320>
    5ee4:	9cbb7426 	beq	r19,r18,4cb8 <__svfscanf_r+0x154>
    5ee8:	94e7c83a 	sub	r19,r18,r19
    5eec:	983b5226 	beq	r19,zero,4c38 <__svfscanf_r+0xd4>
    5ef0:	90000005 	stb	zero,0(r18)
    5ef4:	d880a417 	ldw	r2,656(sp)
    5ef8:	d8c0a217 	ldw	r3,648(sp)
    5efc:	8ce3883a 	add	r17,r17,r19
    5f00:	10800104 	addi	r2,r2,4
    5f04:	18c00044 	addi	r3,r3,1
    5f08:	d880a415 	stw	r2,656(sp)
    5f0c:	d8c0a215 	stw	r3,648(sp)
    5f10:	003b2706 	br	4bb0 <__svfscanf_r+0x4c>
    5f14:	9cc00414 	ori	r19,r19,16
    5f18:	003b6e06 	br	4cd4 <__svfscanf_r+0x170>
    5f1c:	00c00404 	movi	r3,16
    5f20:	01000074 	movhi	r4,1
    5f24:	21316304 	addi	r4,r4,-14964
    5f28:	9cc08014 	ori	r19,r19,512
    5f2c:	054000c4 	movi	r21,3
    5f30:	d8c0a115 	stw	r3,644(sp)
    5f34:	d900a015 	stw	r4,640(sp)
    5f38:	003bf806 	br	4f1c <__svfscanf_r+0x3b8>
    5f3c:	9880040c 	andi	r2,r19,16
    5f40:	10001926 	beq	r2,zero,5fa8 <__svfscanf_r+0x1444>
    5f44:	0027883a 	mov	r19,zero
    5f48:	00000b06 	br	5f78 <__svfscanf_r+0x1414>
    5f4c:	80800017 	ldw	r2,0(r16)
    5f50:	b009883a 	mov	r4,r22
    5f54:	800b883a 	mov	r5,r16
    5f58:	148d883a 	add	r6,r2,r18
    5f5c:	81800015 	stw	r6,0(r16)
    5f60:	9ca7883a 	add	r19,r19,r18
    5f64:	000238c0 	call	238c <__srefill_r>
    5f68:	103c711e 	bne	r2,zero,5130 <__svfscanf_r+0x5cc>
    5f6c:	d900a317 	ldw	r4,652(sp)
    5f70:	2489c83a 	sub	r4,r4,r18
    5f74:	d900a315 	stw	r4,652(sp)
    5f78:	84800117 	ldw	r18,4(r16)
    5f7c:	d8c0a317 	ldw	r3,652(sp)
    5f80:	90fff216 	blt	r18,r3,5f4c <__svfscanf_r+0x13e8>
    5f84:	d900a317 	ldw	r4,652(sp)
    5f88:	80800017 	ldw	r2,0(r16)
    5f8c:	9927883a 	add	r19,r19,r4
    5f90:	9107c83a 	sub	r3,r18,r4
    5f94:	110d883a 	add	r6,r2,r4
    5f98:	8ce3883a 	add	r17,r17,r19
    5f9c:	80c00115 	stw	r3,4(r16)
    5fa0:	81800015 	stw	r6,0(r16)
    5fa4:	003b0206 	br	4bb0 <__svfscanf_r+0x4c>
    5fa8:	d880a417 	ldw	r2,656(sp)
    5fac:	d980a317 	ldw	r6,652(sp)
    5fb0:	01400044 	movi	r5,1
    5fb4:	11000017 	ldw	r4,0(r2)
    5fb8:	800f883a 	mov	r7,r16
    5fbc:	00082240 	call	8224 <fread>
    5fc0:	103b3d26 	beq	r2,zero,4cb8 <__svfscanf_r+0x154>
    5fc4:	d8c0a417 	ldw	r3,656(sp)
    5fc8:	d900a217 	ldw	r4,648(sp)
    5fcc:	88a3883a 	add	r17,r17,r2
    5fd0:	18c00104 	addi	r3,r3,4
    5fd4:	21000044 	addi	r4,r4,1
    5fd8:	d8c0a415 	stw	r3,656(sp)
    5fdc:	d900a215 	stw	r4,648(sp)
    5fe0:	003af306 	br	4bb0 <__svfscanf_r+0x4c>
    5fe4:	8080030b 	ldhu	r2,12(r16)
    5fe8:	1080100c 	andi	r2,r2,64
    5fec:	103b1226 	beq	r2,zero,4c38 <__svfscanf_r+0xd4>
    5ff0:	003b3306 	br	4cc0 <__svfscanf_r+0x15c>
    5ff4:	983b1026 	beq	r19,zero,4c38 <__svfscanf_r+0xd4>
    5ff8:	8ce3883a 	add	r17,r17,r19
    5ffc:	003aec06 	br	4bb0 <__svfscanf_r+0x4c>
    6000:	983c9626 	beq	r19,zero,525c <__svfscanf_r+0x6f8>
    6004:	9cffffc4 	addi	r19,r19,-1
    6008:	d8c04404 	addi	r3,sp,272
    600c:	1cc5883a 	add	r2,r3,r19
    6010:	11400003 	ldbu	r5,0(r2)
    6014:	b009883a 	mov	r4,r22
    6018:	800d883a 	mov	r6,r16
    601c:	000cbac0 	call	cbac <_ungetc_r>
    6020:	003ff706 	br	6000 <__svfscanf_r+0x149c>
    6024:	00bfff84 	movi	r2,-2
    6028:	18bc7a1e 	bne	r3,r2,5214 <__svfscanf_r+0x6b0>
    602c:	003c8406 	br	5240 <__svfscanf_r+0x6dc>
    6030:	d900a417 	ldw	r4,656(sp)
    6034:	25400017 	ldw	r21,0(r4)
    6038:	21000104 	addi	r4,r4,4
    603c:	d900a415 	stw	r4,656(sp)
    6040:	003c4a06 	br	516c <__svfscanf_r+0x608>
    6044:	00bfff84 	movi	r2,-2
    6048:	18bc0f1e 	bne	r3,r2,5088 <__svfscanf_r+0x524>
    604c:	003c1506 	br	50a4 <__svfscanf_r+0x540>
    6050:	b009883a 	mov	r4,r22
    6054:	800b883a 	mov	r5,r16
    6058:	000238c0 	call	238c <__srefill_r>
    605c:	103c1326 	beq	r2,zero,50ac <__svfscanf_r+0x548>
    6060:	903b151e 	bne	r18,zero,4cb8 <__svfscanf_r+0x154>
    6064:	a83ad21e 	bne	r21,zero,4bb0 <__svfscanf_r+0x4c>
    6068:	d880a217 	ldw	r2,648(sp)
    606c:	10800044 	addi	r2,r2,1
    6070:	d880a215 	stw	r2,648(sp)
    6074:	003ace06 	br	4bb0 <__svfscanf_r+0x4c>
    6078:	0027883a 	mov	r19,zero
    607c:	003bdd06 	br	4ff4 <__svfscanf_r+0x490>
    6080:	9cc00114 	ori	r19,r19,4
    6084:	003b1306 	br	4cd4 <__svfscanf_r+0x170>
    6088:	05400104 	movi	r21,4
    608c:	003ba306 	br	4f1c <__svfscanf_r+0x3b8>
    6090:	9cc00054 	ori	r19,r19,1
    6094:	00800074 	movhi	r2,1
    6098:	10b00304 	addi	r2,r2,-16372
    609c:	00c00284 	movi	r3,10
    60a0:	054000c4 	movi	r21,3
    60a4:	d880a015 	stw	r2,640(sp)
    60a8:	d8c0a115 	stw	r3,644(sp)
    60ac:	003b9b06 	br	4f1c <__svfscanf_r+0x3b8>
    60b0:	9cc01014 	ori	r19,r19,64
    60b4:	002b883a 	mov	r21,zero
    60b8:	003b9806 	br	4f1c <__svfscanf_r+0x3b8>
    60bc:	a00b883a 	mov	r5,r20
    60c0:	d9000404 	addi	r4,sp,16
    60c4:	000a8d80 	call	a8d8 <__sccl>
    60c8:	1029883a 	mov	r20,r2
    60cc:	9cc01014 	ori	r19,r19,64
    60d0:	05400044 	movi	r21,1
    60d4:	003b9106 	br	4f1c <__svfscanf_r+0x3b8>
    60d8:	9cc00054 	ori	r19,r19,1
    60dc:	00800204 	movi	r2,8
    60e0:	00c00074 	movhi	r3,1
    60e4:	18f16304 	addi	r3,r3,-14964
    60e8:	054000c4 	movi	r21,3
    60ec:	d880a115 	stw	r2,644(sp)
    60f0:	d8c0a015 	stw	r3,640(sp)
    60f4:	003b8906 	br	4f1c <__svfscanf_r+0x3b8>
    60f8:	9880040c 	andi	r2,r19,16
    60fc:	103aac1e 	bne	r2,zero,4bb0 <__svfscanf_r+0x4c>
    6100:	9880010c 	andi	r2,r19,4
    6104:	10002426 	beq	r2,zero,6198 <__svfscanf_r+0x1634>
    6108:	d900a417 	ldw	r4,656(sp)
    610c:	20800017 	ldw	r2,0(r4)
    6110:	21000104 	addi	r4,r4,4
    6114:	d900a415 	stw	r4,656(sp)
    6118:	1440000d 	sth	r17,0(r2)
    611c:	003aa406 	br	4bb0 <__svfscanf_r+0x4c>
    6120:	9cc00094 	ori	r19,r19,2
    6124:	003aeb06 	br	4cd4 <__svfscanf_r+0x170>
    6128:	05400084 	movi	r21,2
    612c:	003b7b06 	br	4f1c <__svfscanf_r+0x3b8>
    6130:	00800404 	movi	r2,16
    6134:	00c00074 	movhi	r3,1
    6138:	18f16304 	addi	r3,r3,-14964
    613c:	9cc08814 	ori	r19,r19,544
    6140:	054000c4 	movi	r21,3
    6144:	d880a115 	stw	r2,644(sp)
    6148:	d8c0a015 	stw	r3,640(sp)
    614c:	003b7306 	br	4f1c <__svfscanf_r+0x3b8>
    6150:	0009883a 	mov	r4,zero
    6154:	000a9980 	call	a998 <nanf>
    6158:	b8800015 	stw	r2,0(r23)
    615c:	003d2706 	br	55fc <__svfscanf_r+0xa98>
    6160:	a0c00007 	ldb	r3,0(r20)
    6164:	00801b04 	movi	r2,108
    6168:	18800826 	beq	r3,r2,618c <__svfscanf_r+0x1628>
    616c:	9cc00054 	ori	r19,r19,1
    6170:	003ad806 	br	4cd4 <__svfscanf_r+0x170>
    6174:	01000074 	movhi	r4,1
    6178:	21300304 	addi	r4,r4,-16372
    617c:	054000c4 	movi	r21,3
    6180:	d900a015 	stw	r4,640(sp)
    6184:	d800a115 	stw	zero,644(sp)
    6188:	003b6406 	br	4f1c <__svfscanf_r+0x3b8>
    618c:	a5000044 	addi	r20,r20,1
    6190:	9cc00094 	ori	r19,r19,2
    6194:	003acf06 	br	4cd4 <__svfscanf_r+0x170>
    6198:	9880004c 	andi	r2,r19,1
    619c:	1005003a 	cmpeq	r2,r2,zero
    61a0:	10000a26 	beq	r2,zero,61cc <__svfscanf_r+0x1668>
    61a4:	9880008c 	andi	r2,r19,2
    61a8:	10000826 	beq	r2,zero,61cc <__svfscanf_r+0x1668>
    61ac:	d900a417 	ldw	r4,656(sp)
    61b0:	8807d7fa 	srai	r3,r17,31
    61b4:	20800017 	ldw	r2,0(r4)
    61b8:	21000104 	addi	r4,r4,4
    61bc:	d900a415 	stw	r4,656(sp)
    61c0:	14400015 	stw	r17,0(r2)
    61c4:	10c00115 	stw	r3,4(r2)
    61c8:	003a7906 	br	4bb0 <__svfscanf_r+0x4c>
    61cc:	d8c0a417 	ldw	r3,656(sp)
    61d0:	18800017 	ldw	r2,0(r3)
    61d4:	18c00104 	addi	r3,r3,4
    61d8:	d8c0a415 	stw	r3,656(sp)
    61dc:	14400015 	stw	r17,0(r2)
    61e0:	003a7306 	br	4bb0 <__svfscanf_r+0x4c>

000061e4 <__svfscanf>:
    61e4:	00800074 	movhi	r2,1
    61e8:	1094d804 	addi	r2,r2,21344
    61ec:	2013883a 	mov	r9,r4
    61f0:	11000017 	ldw	r4,0(r2)
    61f4:	2805883a 	mov	r2,r5
    61f8:	300f883a 	mov	r7,r6
    61fc:	480b883a 	mov	r5,r9
    6200:	100d883a 	mov	r6,r2
    6204:	0004b641 	jmpi	4b64 <__svfscanf_r>

00006208 <_vfscanf_r>:
    6208:	defffb04 	addi	sp,sp,-20
    620c:	dcc00315 	stw	r19,12(sp)
    6210:	dc800215 	stw	r18,8(sp)
    6214:	dc400115 	stw	r17,4(sp)
    6218:	dc000015 	stw	r16,0(sp)
    621c:	dfc00415 	stw	ra,16(sp)
    6220:	2021883a 	mov	r16,r4
    6224:	2823883a 	mov	r17,r5
    6228:	3025883a 	mov	r18,r6
    622c:	3827883a 	mov	r19,r7
    6230:	20000226 	beq	r4,zero,623c <_vfscanf_r+0x34>
    6234:	20800e17 	ldw	r2,56(r4)
    6238:	10000b26 	beq	r2,zero,6268 <_vfscanf_r+0x60>
    623c:	8009883a 	mov	r4,r16
    6240:	880b883a 	mov	r5,r17
    6244:	900d883a 	mov	r6,r18
    6248:	980f883a 	mov	r7,r19
    624c:	dfc00417 	ldw	ra,16(sp)
    6250:	dcc00317 	ldw	r19,12(sp)
    6254:	dc800217 	ldw	r18,8(sp)
    6258:	dc400117 	ldw	r17,4(sp)
    625c:	dc000017 	ldw	r16,0(sp)
    6260:	dec00504 	addi	sp,sp,20
    6264:	0004b641 	jmpi	4b64 <__svfscanf_r>
    6268:	00015080 	call	1508 <__sinit>
    626c:	003ff306 	br	623c <_vfscanf_r+0x34>

00006270 <vfscanf>:
    6270:	defffb04 	addi	sp,sp,-20
    6274:	dcc00315 	stw	r19,12(sp)
    6278:	04c00074 	movhi	r19,1
    627c:	9cd4d804 	addi	r19,r19,21344
    6280:	98c00017 	ldw	r3,0(r19)
    6284:	dc800215 	stw	r18,8(sp)
    6288:	dc400115 	stw	r17,4(sp)
    628c:	dc000015 	stw	r16,0(sp)
    6290:	dfc00415 	stw	ra,16(sp)
    6294:	2021883a 	mov	r16,r4
    6298:	2823883a 	mov	r17,r5
    629c:	3025883a 	mov	r18,r6
    62a0:	18000326 	beq	r3,zero,62b0 <vfscanf+0x40>
    62a4:	18800e17 	ldw	r2,56(r3)
    62a8:	1809883a 	mov	r4,r3
    62ac:	10000b26 	beq	r2,zero,62dc <vfscanf+0x6c>
    62b0:	99000017 	ldw	r4,0(r19)
    62b4:	800b883a 	mov	r5,r16
    62b8:	880d883a 	mov	r6,r17
    62bc:	900f883a 	mov	r7,r18
    62c0:	dfc00417 	ldw	ra,16(sp)
    62c4:	dcc00317 	ldw	r19,12(sp)
    62c8:	dc800217 	ldw	r18,8(sp)
    62cc:	dc400117 	ldw	r17,4(sp)
    62d0:	dc000017 	ldw	r16,0(sp)
    62d4:	dec00504 	addi	sp,sp,20
    62d8:	0004b641 	jmpi	4b64 <__svfscanf_r>
    62dc:	00015080 	call	1508 <__sinit>
    62e0:	003ff306 	br	62b0 <vfscanf+0x40>

000062e4 <_write_r>:
    62e4:	defffd04 	addi	sp,sp,-12
    62e8:	dc000015 	stw	r16,0(sp)
    62ec:	04000074 	movhi	r16,1
    62f0:	841b9c04 	addi	r16,r16,28272
    62f4:	dc400115 	stw	r17,4(sp)
    62f8:	80000015 	stw	zero,0(r16)
    62fc:	2023883a 	mov	r17,r4
    6300:	2809883a 	mov	r4,r5
    6304:	300b883a 	mov	r5,r6
    6308:	380d883a 	mov	r6,r7
    630c:	dfc00215 	stw	ra,8(sp)
    6310:	0010e180 	call	10e18 <write>
    6314:	1007883a 	mov	r3,r2
    6318:	00bfffc4 	movi	r2,-1
    631c:	18800626 	beq	r3,r2,6338 <_write_r+0x54>
    6320:	1805883a 	mov	r2,r3
    6324:	dfc00217 	ldw	ra,8(sp)
    6328:	dc400117 	ldw	r17,4(sp)
    632c:	dc000017 	ldw	r16,0(sp)
    6330:	dec00304 	addi	sp,sp,12
    6334:	f800283a 	ret
    6338:	80800017 	ldw	r2,0(r16)
    633c:	103ff826 	beq	r2,zero,6320 <_write_r+0x3c>
    6340:	88800015 	stw	r2,0(r17)
    6344:	1805883a 	mov	r2,r3
    6348:	dfc00217 	ldw	ra,8(sp)
    634c:	dc400117 	ldw	r17,4(sp)
    6350:	dc000017 	ldw	r16,0(sp)
    6354:	dec00304 	addi	sp,sp,12
    6358:	f800283a 	ret

0000635c <__swsetup_r>:
    635c:	00800074 	movhi	r2,1
    6360:	1094d804 	addi	r2,r2,21344
    6364:	10c00017 	ldw	r3,0(r2)
    6368:	defffd04 	addi	sp,sp,-12
    636c:	dc400115 	stw	r17,4(sp)
    6370:	dc000015 	stw	r16,0(sp)
    6374:	dfc00215 	stw	ra,8(sp)
    6378:	2023883a 	mov	r17,r4
    637c:	2821883a 	mov	r16,r5
    6380:	18000226 	beq	r3,zero,638c <__swsetup_r+0x30>
    6384:	18800e17 	ldw	r2,56(r3)
    6388:	10001f26 	beq	r2,zero,6408 <__swsetup_r+0xac>
    638c:	8100030b 	ldhu	r4,12(r16)
    6390:	2080020c 	andi	r2,r4,8
    6394:	10002826 	beq	r2,zero,6438 <__swsetup_r+0xdc>
    6398:	81400417 	ldw	r5,16(r16)
    639c:	28001d26 	beq	r5,zero,6414 <__swsetup_r+0xb8>
    63a0:	2080004c 	andi	r2,r4,1
    63a4:	1005003a 	cmpeq	r2,r2,zero
    63a8:	10000b26 	beq	r2,zero,63d8 <__swsetup_r+0x7c>
    63ac:	2080008c 	andi	r2,r4,2
    63b0:	10001226 	beq	r2,zero,63fc <__swsetup_r+0xa0>
    63b4:	0005883a 	mov	r2,zero
    63b8:	80800215 	stw	r2,8(r16)
    63bc:	28000b26 	beq	r5,zero,63ec <__swsetup_r+0x90>
    63c0:	0005883a 	mov	r2,zero
    63c4:	dfc00217 	ldw	ra,8(sp)
    63c8:	dc400117 	ldw	r17,4(sp)
    63cc:	dc000017 	ldw	r16,0(sp)
    63d0:	dec00304 	addi	sp,sp,12
    63d4:	f800283a 	ret
    63d8:	80800517 	ldw	r2,20(r16)
    63dc:	80000215 	stw	zero,8(r16)
    63e0:	0085c83a 	sub	r2,zero,r2
    63e4:	80800615 	stw	r2,24(r16)
    63e8:	283ff51e 	bne	r5,zero,63c0 <__swsetup_r+0x64>
    63ec:	2080200c 	andi	r2,r4,128
    63f0:	103ff326 	beq	r2,zero,63c0 <__swsetup_r+0x64>
    63f4:	00bfffc4 	movi	r2,-1
    63f8:	003ff206 	br	63c4 <__swsetup_r+0x68>
    63fc:	80800517 	ldw	r2,20(r16)
    6400:	80800215 	stw	r2,8(r16)
    6404:	003fed06 	br	63bc <__swsetup_r+0x60>
    6408:	1809883a 	mov	r4,r3
    640c:	00015080 	call	1508 <__sinit>
    6410:	003fde06 	br	638c <__swsetup_r+0x30>
    6414:	20c0a00c 	andi	r3,r4,640
    6418:	00808004 	movi	r2,512
    641c:	18bfe026 	beq	r3,r2,63a0 <__swsetup_r+0x44>
    6420:	8809883a 	mov	r4,r17
    6424:	800b883a 	mov	r5,r16
    6428:	0008ca80 	call	8ca8 <__smakebuf_r>
    642c:	8100030b 	ldhu	r4,12(r16)
    6430:	81400417 	ldw	r5,16(r16)
    6434:	003fda06 	br	63a0 <__swsetup_r+0x44>
    6438:	2080040c 	andi	r2,r4,16
    643c:	103fed26 	beq	r2,zero,63f4 <__swsetup_r+0x98>
    6440:	2080010c 	andi	r2,r4,4
    6444:	10001226 	beq	r2,zero,6490 <__swsetup_r+0x134>
    6448:	81400c17 	ldw	r5,48(r16)
    644c:	28000526 	beq	r5,zero,6464 <__swsetup_r+0x108>
    6450:	80801004 	addi	r2,r16,64
    6454:	28800226 	beq	r5,r2,6460 <__swsetup_r+0x104>
    6458:	8809883a 	mov	r4,r17
    645c:	00083900 	call	8390 <_free_r>
    6460:	80000c15 	stw	zero,48(r16)
    6464:	8080030b 	ldhu	r2,12(r16)
    6468:	81400417 	ldw	r5,16(r16)
    646c:	80000115 	stw	zero,4(r16)
    6470:	10bff6cc 	andi	r2,r2,65499
    6474:	8080030d 	sth	r2,12(r16)
    6478:	81400015 	stw	r5,0(r16)
    647c:	8080030b 	ldhu	r2,12(r16)
    6480:	10800214 	ori	r2,r2,8
    6484:	113fffcc 	andi	r4,r2,65535
    6488:	8080030d 	sth	r2,12(r16)
    648c:	003fc306 	br	639c <__swsetup_r+0x40>
    6490:	81400417 	ldw	r5,16(r16)
    6494:	003ff906 	br	647c <__swsetup_r+0x120>

00006498 <_close_r>:
    6498:	defffd04 	addi	sp,sp,-12
    649c:	dc000015 	stw	r16,0(sp)
    64a0:	04000074 	movhi	r16,1
    64a4:	841b9c04 	addi	r16,r16,28272
    64a8:	dc400115 	stw	r17,4(sp)
    64ac:	80000015 	stw	zero,0(r16)
    64b0:	2023883a 	mov	r17,r4
    64b4:	2809883a 	mov	r4,r5
    64b8:	dfc00215 	stw	ra,8(sp)
    64bc:	00104b80 	call	104b8 <close>
    64c0:	1007883a 	mov	r3,r2
    64c4:	00bfffc4 	movi	r2,-1
    64c8:	18800626 	beq	r3,r2,64e4 <_close_r+0x4c>
    64cc:	1805883a 	mov	r2,r3
    64d0:	dfc00217 	ldw	ra,8(sp)
    64d4:	dc400117 	ldw	r17,4(sp)
    64d8:	dc000017 	ldw	r16,0(sp)
    64dc:	dec00304 	addi	sp,sp,12
    64e0:	f800283a 	ret
    64e4:	80800017 	ldw	r2,0(r16)
    64e8:	103ff826 	beq	r2,zero,64cc <_close_r+0x34>
    64ec:	88800015 	stw	r2,0(r17)
    64f0:	1805883a 	mov	r2,r3
    64f4:	dfc00217 	ldw	ra,8(sp)
    64f8:	dc400117 	ldw	r17,4(sp)
    64fc:	dc000017 	ldw	r16,0(sp)
    6500:	dec00304 	addi	sp,sp,12
    6504:	f800283a 	ret

00006508 <quorem>:
    6508:	28c00417 	ldw	r3,16(r5)
    650c:	20800417 	ldw	r2,16(r4)
    6510:	defff604 	addi	sp,sp,-40
    6514:	ddc00715 	stw	r23,28(sp)
    6518:	dd400515 	stw	r21,20(sp)
    651c:	dfc00915 	stw	ra,36(sp)
    6520:	df000815 	stw	fp,32(sp)
    6524:	dd800615 	stw	r22,24(sp)
    6528:	dd000415 	stw	r20,16(sp)
    652c:	dcc00315 	stw	r19,12(sp)
    6530:	dc800215 	stw	r18,8(sp)
    6534:	dc400115 	stw	r17,4(sp)
    6538:	dc000015 	stw	r16,0(sp)
    653c:	202f883a 	mov	r23,r4
    6540:	282b883a 	mov	r21,r5
    6544:	10c07416 	blt	r2,r3,6718 <quorem+0x210>
    6548:	1c7fffc4 	addi	r17,r3,-1
    654c:	8c45883a 	add	r2,r17,r17
    6550:	1085883a 	add	r2,r2,r2
    6554:	2c000504 	addi	r16,r5,20
    6558:	24c00504 	addi	r19,r4,20
    655c:	14ed883a 	add	r22,r2,r19
    6560:	80a5883a 	add	r18,r16,r2
    6564:	b7000017 	ldw	fp,0(r22)
    6568:	91400017 	ldw	r5,0(r18)
    656c:	e009883a 	mov	r4,fp
    6570:	29400044 	addi	r5,r5,1
    6574:	00013240 	call	1324 <__udivsi3>
    6578:	1029883a 	mov	r20,r2
    657c:	10003c1e 	bne	r2,zero,6670 <quorem+0x168>
    6580:	a80b883a 	mov	r5,r21
    6584:	b809883a 	mov	r4,r23
    6588:	00091780 	call	9178 <__mcmp>
    658c:	10002b16 	blt	r2,zero,663c <quorem+0x134>
    6590:	a5000044 	addi	r20,r20,1
    6594:	980f883a 	mov	r7,r19
    6598:	0011883a 	mov	r8,zero
    659c:	0009883a 	mov	r4,zero
    65a0:	81400017 	ldw	r5,0(r16)
    65a4:	38c00017 	ldw	r3,0(r7)
    65a8:	84000104 	addi	r16,r16,4
    65ac:	28bfffcc 	andi	r2,r5,65535
    65b0:	2085883a 	add	r2,r4,r2
    65b4:	11bfffcc 	andi	r6,r2,65535
    65b8:	193fffcc 	andi	r4,r3,65535
    65bc:	1004d43a 	srli	r2,r2,16
    65c0:	280ad43a 	srli	r5,r5,16
    65c4:	2189c83a 	sub	r4,r4,r6
    65c8:	2209883a 	add	r4,r4,r8
    65cc:	1806d43a 	srli	r3,r3,16
    65d0:	288b883a 	add	r5,r5,r2
    65d4:	200dd43a 	srai	r6,r4,16
    65d8:	28bfffcc 	andi	r2,r5,65535
    65dc:	1887c83a 	sub	r3,r3,r2
    65e0:	1987883a 	add	r3,r3,r6
    65e4:	3900000d 	sth	r4,0(r7)
    65e8:	38c0008d 	sth	r3,2(r7)
    65ec:	2808d43a 	srli	r4,r5,16
    65f0:	39c00104 	addi	r7,r7,4
    65f4:	1811d43a 	srai	r8,r3,16
    65f8:	943fe92e 	bgeu	r18,r16,65a0 <quorem+0x98>
    65fc:	8c45883a 	add	r2,r17,r17
    6600:	1085883a 	add	r2,r2,r2
    6604:	9885883a 	add	r2,r19,r2
    6608:	10c00017 	ldw	r3,0(r2)
    660c:	18000b1e 	bne	r3,zero,663c <quorem+0x134>
    6610:	113fff04 	addi	r4,r2,-4
    6614:	9900082e 	bgeu	r19,r4,6638 <quorem+0x130>
    6618:	10bfff17 	ldw	r2,-4(r2)
    661c:	10000326 	beq	r2,zero,662c <quorem+0x124>
    6620:	00000506 	br	6638 <quorem+0x130>
    6624:	20800017 	ldw	r2,0(r4)
    6628:	1000031e 	bne	r2,zero,6638 <quorem+0x130>
    662c:	213fff04 	addi	r4,r4,-4
    6630:	8c7fffc4 	addi	r17,r17,-1
    6634:	993ffb36 	bltu	r19,r4,6624 <quorem+0x11c>
    6638:	bc400415 	stw	r17,16(r23)
    663c:	a005883a 	mov	r2,r20
    6640:	dfc00917 	ldw	ra,36(sp)
    6644:	df000817 	ldw	fp,32(sp)
    6648:	ddc00717 	ldw	r23,28(sp)
    664c:	dd800617 	ldw	r22,24(sp)
    6650:	dd400517 	ldw	r21,20(sp)
    6654:	dd000417 	ldw	r20,16(sp)
    6658:	dcc00317 	ldw	r19,12(sp)
    665c:	dc800217 	ldw	r18,8(sp)
    6660:	dc400117 	ldw	r17,4(sp)
    6664:	dc000017 	ldw	r16,0(sp)
    6668:	dec00a04 	addi	sp,sp,40
    666c:	f800283a 	ret
    6670:	980f883a 	mov	r7,r19
    6674:	8011883a 	mov	r8,r16
    6678:	0013883a 	mov	r9,zero
    667c:	000d883a 	mov	r6,zero
    6680:	40c00017 	ldw	r3,0(r8)
    6684:	39000017 	ldw	r4,0(r7)
    6688:	42000104 	addi	r8,r8,4
    668c:	18bfffcc 	andi	r2,r3,65535
    6690:	a085383a 	mul	r2,r20,r2
    6694:	1806d43a 	srli	r3,r3,16
    6698:	217fffcc 	andi	r5,r4,65535
    669c:	3085883a 	add	r2,r6,r2
    66a0:	11bfffcc 	andi	r6,r2,65535
    66a4:	a0c7383a 	mul	r3,r20,r3
    66a8:	1004d43a 	srli	r2,r2,16
    66ac:	298bc83a 	sub	r5,r5,r6
    66b0:	2a4b883a 	add	r5,r5,r9
    66b4:	2008d43a 	srli	r4,r4,16
    66b8:	1887883a 	add	r3,r3,r2
    66bc:	280dd43a 	srai	r6,r5,16
    66c0:	18bfffcc 	andi	r2,r3,65535
    66c4:	2089c83a 	sub	r4,r4,r2
    66c8:	2189883a 	add	r4,r4,r6
    66cc:	3900008d 	sth	r4,2(r7)
    66d0:	3940000d 	sth	r5,0(r7)
    66d4:	180cd43a 	srli	r6,r3,16
    66d8:	39c00104 	addi	r7,r7,4
    66dc:	2013d43a 	srai	r9,r4,16
    66e0:	923fe72e 	bgeu	r18,r8,6680 <quorem+0x178>
    66e4:	e03fa61e 	bne	fp,zero,6580 <quorem+0x78>
    66e8:	b0ffff04 	addi	r3,r22,-4
    66ec:	98c0082e 	bgeu	r19,r3,6710 <quorem+0x208>
    66f0:	b0bfff17 	ldw	r2,-4(r22)
    66f4:	10000326 	beq	r2,zero,6704 <quorem+0x1fc>
    66f8:	00000506 	br	6710 <quorem+0x208>
    66fc:	18800017 	ldw	r2,0(r3)
    6700:	1000031e 	bne	r2,zero,6710 <quorem+0x208>
    6704:	18ffff04 	addi	r3,r3,-4
    6708:	8c7fffc4 	addi	r17,r17,-1
    670c:	98fffb36 	bltu	r19,r3,66fc <quorem+0x1f4>
    6710:	bc400415 	stw	r17,16(r23)
    6714:	003f9a06 	br	6580 <quorem+0x78>
    6718:	0005883a 	mov	r2,zero
    671c:	003fc806 	br	6640 <quorem+0x138>

00006720 <_dtoa_r>:
    6720:	22001017 	ldw	r8,64(r4)
    6724:	deffda04 	addi	sp,sp,-152
    6728:	dd402115 	stw	r21,132(sp)
    672c:	dd002015 	stw	r20,128(sp)
    6730:	dc801e15 	stw	r18,120(sp)
    6734:	dc401d15 	stw	r17,116(sp)
    6738:	dfc02515 	stw	ra,148(sp)
    673c:	df002415 	stw	fp,144(sp)
    6740:	ddc02315 	stw	r23,140(sp)
    6744:	dd802215 	stw	r22,136(sp)
    6748:	dcc01f15 	stw	r19,124(sp)
    674c:	dc001c15 	stw	r16,112(sp)
    6750:	d9001615 	stw	r4,88(sp)
    6754:	3023883a 	mov	r17,r6
    6758:	2829883a 	mov	r20,r5
    675c:	d9c01715 	stw	r7,92(sp)
    6760:	dc802817 	ldw	r18,160(sp)
    6764:	302b883a 	mov	r21,r6
    6768:	40000a26 	beq	r8,zero,6794 <_dtoa_r+0x74>
    676c:	20801117 	ldw	r2,68(r4)
    6770:	400b883a 	mov	r5,r8
    6774:	40800115 	stw	r2,4(r8)
    6778:	20c01117 	ldw	r3,68(r4)
    677c:	00800044 	movi	r2,1
    6780:	10c4983a 	sll	r2,r2,r3
    6784:	40800215 	stw	r2,8(r8)
    6788:	000901c0 	call	901c <_Bfree>
    678c:	d8c01617 	ldw	r3,88(sp)
    6790:	18001015 	stw	zero,64(r3)
    6794:	8800a316 	blt	r17,zero,6a24 <_dtoa_r+0x304>
    6798:	90000015 	stw	zero,0(r18)
    679c:	a8dffc2c 	andhi	r3,r21,32752
    67a0:	009ffc34 	movhi	r2,32752
    67a4:	18809126 	beq	r3,r2,69ec <_dtoa_r+0x2cc>
    67a8:	000d883a 	mov	r6,zero
    67ac:	000f883a 	mov	r7,zero
    67b0:	a009883a 	mov	r4,r20
    67b4:	a80b883a 	mov	r5,r21
    67b8:	dd001215 	stw	r20,72(sp)
    67bc:	dd401315 	stw	r21,76(sp)
    67c0:	000f5a80 	call	f5a8 <__nedf2>
    67c4:	1000171e 	bne	r2,zero,6824 <_dtoa_r+0x104>
    67c8:	d9802717 	ldw	r6,156(sp)
    67cc:	00800044 	movi	r2,1
    67d0:	30800015 	stw	r2,0(r6)
    67d4:	d8802917 	ldw	r2,164(sp)
    67d8:	10029b26 	beq	r2,zero,7248 <_dtoa_r+0xb28>
    67dc:	d9002917 	ldw	r4,164(sp)
    67e0:	00800074 	movhi	r2,1
    67e4:	108d6044 	addi	r2,r2,13697
    67e8:	10ffffc4 	addi	r3,r2,-1
    67ec:	20800015 	stw	r2,0(r4)
    67f0:	1805883a 	mov	r2,r3
    67f4:	dfc02517 	ldw	ra,148(sp)
    67f8:	df002417 	ldw	fp,144(sp)
    67fc:	ddc02317 	ldw	r23,140(sp)
    6800:	dd802217 	ldw	r22,136(sp)
    6804:	dd402117 	ldw	r21,132(sp)
    6808:	dd002017 	ldw	r20,128(sp)
    680c:	dcc01f17 	ldw	r19,124(sp)
    6810:	dc801e17 	ldw	r18,120(sp)
    6814:	dc401d17 	ldw	r17,116(sp)
    6818:	dc001c17 	ldw	r16,112(sp)
    681c:	dec02604 	addi	sp,sp,152
    6820:	f800283a 	ret
    6824:	d9001617 	ldw	r4,88(sp)
    6828:	d9401217 	ldw	r5,72(sp)
    682c:	d8800104 	addi	r2,sp,4
    6830:	a80d883a 	mov	r6,r21
    6834:	d9c00204 	addi	r7,sp,8
    6838:	d8800015 	stw	r2,0(sp)
    683c:	00096580 	call	9658 <__d2b>
    6840:	d8800715 	stw	r2,28(sp)
    6844:	a804d53a 	srli	r2,r21,20
    6848:	1101ffcc 	andi	r4,r2,2047
    684c:	20008626 	beq	r4,zero,6a68 <_dtoa_r+0x348>
    6850:	d8c01217 	ldw	r3,72(sp)
    6854:	00800434 	movhi	r2,16
    6858:	10bfffc4 	addi	r2,r2,-1
    685c:	ddc00117 	ldw	r23,4(sp)
    6860:	a884703a 	and	r2,r21,r2
    6864:	1811883a 	mov	r8,r3
    6868:	124ffc34 	orhi	r9,r2,16368
    686c:	25bf0044 	addi	r22,r4,-1023
    6870:	d8000815 	stw	zero,32(sp)
    6874:	0005883a 	mov	r2,zero
    6878:	00cffe34 	movhi	r3,16376
    687c:	480b883a 	mov	r5,r9
    6880:	4009883a 	mov	r4,r8
    6884:	180f883a 	mov	r7,r3
    6888:	100d883a 	mov	r6,r2
    688c:	000ee100 	call	ee10 <__subdf3>
    6890:	0218dbf4 	movhi	r8,25455
    6894:	4210d844 	addi	r8,r8,17249
    6898:	024ff4f4 	movhi	r9,16339
    689c:	4a61e9c4 	addi	r9,r9,-30809
    68a0:	480f883a 	mov	r7,r9
    68a4:	400d883a 	mov	r6,r8
    68a8:	180b883a 	mov	r5,r3
    68ac:	1009883a 	mov	r4,r2
    68b0:	000ef040 	call	ef04 <__muldf3>
    68b4:	0222d874 	movhi	r8,35681
    68b8:	42322cc4 	addi	r8,r8,-14157
    68bc:	024ff1f4 	movhi	r9,16327
    68c0:	4a628a04 	addi	r9,r9,-30168
    68c4:	480f883a 	mov	r7,r9
    68c8:	400d883a 	mov	r6,r8
    68cc:	180b883a 	mov	r5,r3
    68d0:	1009883a 	mov	r4,r2
    68d4:	000ee900 	call	ee90 <__adddf3>
    68d8:	b009883a 	mov	r4,r22
    68dc:	1021883a 	mov	r16,r2
    68e0:	1823883a 	mov	r17,r3
    68e4:	000f8500 	call	f850 <__floatsidf>
    68e8:	021427f4 	movhi	r8,20639
    68ec:	421e7ec4 	addi	r8,r8,31227
    68f0:	024ff4f4 	movhi	r9,16339
    68f4:	4a5104c4 	addi	r9,r9,17427
    68f8:	480f883a 	mov	r7,r9
    68fc:	400d883a 	mov	r6,r8
    6900:	180b883a 	mov	r5,r3
    6904:	1009883a 	mov	r4,r2
    6908:	000ef040 	call	ef04 <__muldf3>
    690c:	180f883a 	mov	r7,r3
    6910:	880b883a 	mov	r5,r17
    6914:	100d883a 	mov	r6,r2
    6918:	8009883a 	mov	r4,r16
    691c:	000ee900 	call	ee90 <__adddf3>
    6920:	1009883a 	mov	r4,r2
    6924:	180b883a 	mov	r5,r3
    6928:	1021883a 	mov	r16,r2
    692c:	1823883a 	mov	r17,r3
    6930:	000f9480 	call	f948 <__fixdfsi>
    6934:	000d883a 	mov	r6,zero
    6938:	000f883a 	mov	r7,zero
    693c:	8009883a 	mov	r4,r16
    6940:	880b883a 	mov	r5,r17
    6944:	d8800d15 	stw	r2,52(sp)
    6948:	000f7400 	call	f740 <__ltdf2>
    694c:	10031716 	blt	r2,zero,75ac <_dtoa_r+0xe8c>
    6950:	d8c00d17 	ldw	r3,52(sp)
    6954:	00800584 	movi	r2,22
    6958:	10c1482e 	bgeu	r2,r3,6e7c <_dtoa_r+0x75c>
    695c:	01000044 	movi	r4,1
    6960:	d9000c15 	stw	r4,48(sp)
    6964:	bd85c83a 	sub	r2,r23,r22
    6968:	11bfffc4 	addi	r6,r2,-1
    696c:	30030b16 	blt	r6,zero,759c <_dtoa_r+0xe7c>
    6970:	d9800a15 	stw	r6,40(sp)
    6974:	d8001115 	stw	zero,68(sp)
    6978:	d8c00d17 	ldw	r3,52(sp)
    697c:	1802ff16 	blt	r3,zero,757c <_dtoa_r+0xe5c>
    6980:	d9000a17 	ldw	r4,40(sp)
    6984:	d8c00915 	stw	r3,36(sp)
    6988:	d8001015 	stw	zero,64(sp)
    698c:	20c9883a 	add	r4,r4,r3
    6990:	d9000a15 	stw	r4,40(sp)
    6994:	d9001717 	ldw	r4,92(sp)
    6998:	00800244 	movi	r2,9
    699c:	11004636 	bltu	r2,r4,6ab8 <_dtoa_r+0x398>
    69a0:	00800144 	movi	r2,5
    69a4:	11020416 	blt	r2,r4,71b8 <_dtoa_r+0xa98>
    69a8:	04400044 	movi	r17,1
    69ac:	d8c01717 	ldw	r3,92(sp)
    69b0:	00800144 	movi	r2,5
    69b4:	10c1ed36 	bltu	r2,r3,716c <_dtoa_r+0xa4c>
    69b8:	18c5883a 	add	r2,r3,r3
    69bc:	1085883a 	add	r2,r2,r2
    69c0:	00c00034 	movhi	r3,0
    69c4:	18da7504 	addi	r3,r3,27092
    69c8:	10c5883a 	add	r2,r2,r3
    69cc:	11000017 	ldw	r4,0(r2)
    69d0:	2000683a 	jmp	r4
    69d4:	00006ac0 	call	6ac <_tilt+0x90>
    69d8:	00006ac0 	call	6ac <_tilt+0x90>
    69dc:	000074c0 	call	74c <_printMem>
    69e0:	00007498 	cmpnei	zero,zero,466
    69e4:	000074dc 	xori	zero,zero,467
    69e8:	000074e8 	cmpgeui	zero,zero,467
    69ec:	d9002717 	ldw	r4,156(sp)
    69f0:	0089c3c4 	movi	r2,9999
    69f4:	20800015 	stw	r2,0(r4)
    69f8:	a0001026 	beq	r20,zero,6a3c <_dtoa_r+0x31c>
    69fc:	00c00074 	movhi	r3,1
    6a00:	18cd7604 	addi	r3,r3,13784
    6a04:	d9802917 	ldw	r6,164(sp)
    6a08:	303f7926 	beq	r6,zero,67f0 <_dtoa_r+0xd0>
    6a0c:	188000c7 	ldb	r2,3(r3)
    6a10:	190000c4 	addi	r4,r3,3
    6a14:	1000101e 	bne	r2,zero,6a58 <_dtoa_r+0x338>
    6a18:	d8802917 	ldw	r2,164(sp)
    6a1c:	11000015 	stw	r4,0(r2)
    6a20:	003f7306 	br	67f0 <_dtoa_r+0xd0>
    6a24:	00a00034 	movhi	r2,32768
    6a28:	10bfffc4 	addi	r2,r2,-1
    6a2c:	00c00044 	movi	r3,1
    6a30:	88aa703a 	and	r21,r17,r2
    6a34:	90c00015 	stw	r3,0(r18)
    6a38:	003f5806 	br	679c <_dtoa_r+0x7c>
    6a3c:	00800434 	movhi	r2,16
    6a40:	10bfffc4 	addi	r2,r2,-1
    6a44:	a884703a 	and	r2,r21,r2
    6a48:	103fec1e 	bne	r2,zero,69fc <_dtoa_r+0x2dc>
    6a4c:	00c00074 	movhi	r3,1
    6a50:	18cd7304 	addi	r3,r3,13772
    6a54:	003feb06 	br	6a04 <_dtoa_r+0x2e4>
    6a58:	d8802917 	ldw	r2,164(sp)
    6a5c:	19000204 	addi	r4,r3,8
    6a60:	11000015 	stw	r4,0(r2)
    6a64:	003f6206 	br	67f0 <_dtoa_r+0xd0>
    6a68:	ddc00117 	ldw	r23,4(sp)
    6a6c:	d8800217 	ldw	r2,8(sp)
    6a70:	01000804 	movi	r4,32
    6a74:	b8c10c84 	addi	r3,r23,1074
    6a78:	18a3883a 	add	r17,r3,r2
    6a7c:	2441b80e 	bge	r4,r17,7160 <_dtoa_r+0xa40>
    6a80:	00c01004 	movi	r3,64
    6a84:	1c47c83a 	sub	r3,r3,r17
    6a88:	88bff804 	addi	r2,r17,-32
    6a8c:	a8c6983a 	sll	r3,r21,r3
    6a90:	a084d83a 	srl	r2,r20,r2
    6a94:	1888b03a 	or	r4,r3,r2
    6a98:	000fa940 	call	fa94 <__floatunsidf>
    6a9c:	1011883a 	mov	r8,r2
    6aa0:	00bf8434 	movhi	r2,65040
    6aa4:	01000044 	movi	r4,1
    6aa8:	10d3883a 	add	r9,r2,r3
    6aac:	8dbef344 	addi	r22,r17,-1075
    6ab0:	d9000815 	stw	r4,32(sp)
    6ab4:	003f6f06 	br	6874 <_dtoa_r+0x154>
    6ab8:	d8001715 	stw	zero,92(sp)
    6abc:	04400044 	movi	r17,1
    6ac0:	00bfffc4 	movi	r2,-1
    6ac4:	00c00044 	movi	r3,1
    6ac8:	d8800e15 	stw	r2,56(sp)
    6acc:	d8002615 	stw	zero,152(sp)
    6ad0:	d8800f15 	stw	r2,60(sp)
    6ad4:	d8c00b15 	stw	r3,44(sp)
    6ad8:	1021883a 	mov	r16,r2
    6adc:	d8801617 	ldw	r2,88(sp)
    6ae0:	10001115 	stw	zero,68(r2)
    6ae4:	d8801617 	ldw	r2,88(sp)
    6ae8:	11401117 	ldw	r5,68(r2)
    6aec:	1009883a 	mov	r4,r2
    6af0:	000959c0 	call	959c <_Balloc>
    6af4:	d8c01617 	ldw	r3,88(sp)
    6af8:	d8800515 	stw	r2,20(sp)
    6afc:	18801015 	stw	r2,64(r3)
    6b00:	00800384 	movi	r2,14
    6b04:	14006836 	bltu	r2,r16,6ca8 <_dtoa_r+0x588>
    6b08:	8805003a 	cmpeq	r2,r17,zero
    6b0c:	1000661e 	bne	r2,zero,6ca8 <_dtoa_r+0x588>
    6b10:	d9000d17 	ldw	r4,52(sp)
    6b14:	0102300e 	bge	zero,r4,73d8 <_dtoa_r+0xcb8>
    6b18:	208003cc 	andi	r2,r4,15
    6b1c:	100490fa 	slli	r2,r2,3
    6b20:	2025d13a 	srai	r18,r4,4
    6b24:	00c00074 	movhi	r3,1
    6b28:	18cd8704 	addi	r3,r3,13852
    6b2c:	10c5883a 	add	r2,r2,r3
    6b30:	90c0040c 	andi	r3,r18,16
    6b34:	14000017 	ldw	r16,0(r2)
    6b38:	14400117 	ldw	r17,4(r2)
    6b3c:	18036a1e 	bne	r3,zero,78e8 <_dtoa_r+0x11c8>
    6b40:	05800084 	movi	r22,2
    6b44:	90001026 	beq	r18,zero,6b88 <_dtoa_r+0x468>
    6b48:	04c00074 	movhi	r19,1
    6b4c:	9ccdb904 	addi	r19,r19,14052
    6b50:	9080004c 	andi	r2,r18,1
    6b54:	1005003a 	cmpeq	r2,r2,zero
    6b58:	1000081e 	bne	r2,zero,6b7c <_dtoa_r+0x45c>
    6b5c:	99800017 	ldw	r6,0(r19)
    6b60:	99c00117 	ldw	r7,4(r19)
    6b64:	880b883a 	mov	r5,r17
    6b68:	8009883a 	mov	r4,r16
    6b6c:	000ef040 	call	ef04 <__muldf3>
    6b70:	1021883a 	mov	r16,r2
    6b74:	b5800044 	addi	r22,r22,1
    6b78:	1823883a 	mov	r17,r3
    6b7c:	9025d07a 	srai	r18,r18,1
    6b80:	9cc00204 	addi	r19,r19,8
    6b84:	903ff21e 	bne	r18,zero,6b50 <_dtoa_r+0x430>
    6b88:	a80b883a 	mov	r5,r21
    6b8c:	a009883a 	mov	r4,r20
    6b90:	880f883a 	mov	r7,r17
    6b94:	800d883a 	mov	r6,r16
    6b98:	000f2c80 	call	f2c8 <__divdf3>
    6b9c:	1029883a 	mov	r20,r2
    6ba0:	182b883a 	mov	r21,r3
    6ba4:	d8c00c17 	ldw	r3,48(sp)
    6ba8:	1805003a 	cmpeq	r2,r3,zero
    6bac:	1000081e 	bne	r2,zero,6bd0 <_dtoa_r+0x4b0>
    6bb0:	0005883a 	mov	r2,zero
    6bb4:	00cffc34 	movhi	r3,16368
    6bb8:	180f883a 	mov	r7,r3
    6bbc:	a009883a 	mov	r4,r20
    6bc0:	a80b883a 	mov	r5,r21
    6bc4:	100d883a 	mov	r6,r2
    6bc8:	000f7400 	call	f740 <__ltdf2>
    6bcc:	1003fe16 	blt	r2,zero,7bc8 <_dtoa_r+0x14a8>
    6bd0:	b009883a 	mov	r4,r22
    6bd4:	000f8500 	call	f850 <__floatsidf>
    6bd8:	180b883a 	mov	r5,r3
    6bdc:	1009883a 	mov	r4,r2
    6be0:	a00d883a 	mov	r6,r20
    6be4:	a80f883a 	mov	r7,r21
    6be8:	000ef040 	call	ef04 <__muldf3>
    6bec:	0011883a 	mov	r8,zero
    6bf0:	02500734 	movhi	r9,16412
    6bf4:	1009883a 	mov	r4,r2
    6bf8:	180b883a 	mov	r5,r3
    6bfc:	480f883a 	mov	r7,r9
    6c00:	400d883a 	mov	r6,r8
    6c04:	000ee900 	call	ee90 <__adddf3>
    6c08:	d9000f17 	ldw	r4,60(sp)
    6c0c:	102d883a 	mov	r22,r2
    6c10:	00bf3034 	movhi	r2,64704
    6c14:	18b9883a 	add	fp,r3,r2
    6c18:	e02f883a 	mov	r23,fp
    6c1c:	20028f1e 	bne	r4,zero,765c <_dtoa_r+0xf3c>
    6c20:	0005883a 	mov	r2,zero
    6c24:	00d00534 	movhi	r3,16404
    6c28:	a009883a 	mov	r4,r20
    6c2c:	a80b883a 	mov	r5,r21
    6c30:	180f883a 	mov	r7,r3
    6c34:	100d883a 	mov	r6,r2
    6c38:	000ee100 	call	ee10 <__subdf3>
    6c3c:	1009883a 	mov	r4,r2
    6c40:	e00f883a 	mov	r7,fp
    6c44:	180b883a 	mov	r5,r3
    6c48:	b00d883a 	mov	r6,r22
    6c4c:	1025883a 	mov	r18,r2
    6c50:	1827883a 	mov	r19,r3
    6c54:	000f6300 	call	f630 <__gtdf2>
    6c58:	00834f16 	blt	zero,r2,7998 <_dtoa_r+0x1278>
    6c5c:	e0e0003c 	xorhi	r3,fp,32768
    6c60:	9009883a 	mov	r4,r18
    6c64:	980b883a 	mov	r5,r19
    6c68:	180f883a 	mov	r7,r3
    6c6c:	b00d883a 	mov	r6,r22
    6c70:	000f7400 	call	f740 <__ltdf2>
    6c74:	1000080e 	bge	r2,zero,6c98 <_dtoa_r+0x578>
    6c78:	0027883a 	mov	r19,zero
    6c7c:	0025883a 	mov	r18,zero
    6c80:	d8802617 	ldw	r2,152(sp)
    6c84:	df000517 	ldw	fp,20(sp)
    6c88:	d8000615 	stw	zero,24(sp)
    6c8c:	0084303a 	nor	r2,zero,r2
    6c90:	d8800d15 	stw	r2,52(sp)
    6c94:	00019b06 	br	7304 <_dtoa_r+0xbe4>
    6c98:	d9801217 	ldw	r6,72(sp)
    6c9c:	d8801317 	ldw	r2,76(sp)
    6ca0:	3029883a 	mov	r20,r6
    6ca4:	102b883a 	mov	r21,r2
    6ca8:	d8c00217 	ldw	r3,8(sp)
    6cac:	18008516 	blt	r3,zero,6ec4 <_dtoa_r+0x7a4>
    6cb0:	d9000d17 	ldw	r4,52(sp)
    6cb4:	00800384 	movi	r2,14
    6cb8:	11008216 	blt	r2,r4,6ec4 <_dtoa_r+0x7a4>
    6cbc:	200490fa 	slli	r2,r4,3
    6cc0:	d9802617 	ldw	r6,152(sp)
    6cc4:	00c00074 	movhi	r3,1
    6cc8:	18cd8704 	addi	r3,r3,13852
    6ccc:	10c5883a 	add	r2,r2,r3
    6cd0:	14800017 	ldw	r18,0(r2)
    6cd4:	14c00117 	ldw	r19,4(r2)
    6cd8:	30031e16 	blt	r6,zero,7954 <_dtoa_r+0x1234>
    6cdc:	d9000517 	ldw	r4,20(sp)
    6ce0:	d8c00f17 	ldw	r3,60(sp)
    6ce4:	a823883a 	mov	r17,r21
    6ce8:	a021883a 	mov	r16,r20
    6cec:	192b883a 	add	r21,r3,r4
    6cf0:	2039883a 	mov	fp,r4
    6cf4:	00000f06 	br	6d34 <_dtoa_r+0x614>
    6cf8:	0005883a 	mov	r2,zero
    6cfc:	00d00934 	movhi	r3,16420
    6d00:	5009883a 	mov	r4,r10
    6d04:	580b883a 	mov	r5,r11
    6d08:	180f883a 	mov	r7,r3
    6d0c:	100d883a 	mov	r6,r2
    6d10:	000ef040 	call	ef04 <__muldf3>
    6d14:	180b883a 	mov	r5,r3
    6d18:	000d883a 	mov	r6,zero
    6d1c:	000f883a 	mov	r7,zero
    6d20:	1009883a 	mov	r4,r2
    6d24:	1021883a 	mov	r16,r2
    6d28:	1823883a 	mov	r17,r3
    6d2c:	000f5a80 	call	f5a8 <__nedf2>
    6d30:	10004526 	beq	r2,zero,6e48 <_dtoa_r+0x728>
    6d34:	900d883a 	mov	r6,r18
    6d38:	980f883a 	mov	r7,r19
    6d3c:	8009883a 	mov	r4,r16
    6d40:	880b883a 	mov	r5,r17
    6d44:	000f2c80 	call	f2c8 <__divdf3>
    6d48:	180b883a 	mov	r5,r3
    6d4c:	1009883a 	mov	r4,r2
    6d50:	000f9480 	call	f948 <__fixdfsi>
    6d54:	1009883a 	mov	r4,r2
    6d58:	1029883a 	mov	r20,r2
    6d5c:	000f8500 	call	f850 <__floatsidf>
    6d60:	180f883a 	mov	r7,r3
    6d64:	9009883a 	mov	r4,r18
    6d68:	980b883a 	mov	r5,r19
    6d6c:	100d883a 	mov	r6,r2
    6d70:	000ef040 	call	ef04 <__muldf3>
    6d74:	180f883a 	mov	r7,r3
    6d78:	880b883a 	mov	r5,r17
    6d7c:	8009883a 	mov	r4,r16
    6d80:	100d883a 	mov	r6,r2
    6d84:	000ee100 	call	ee10 <__subdf3>
    6d88:	1015883a 	mov	r10,r2
    6d8c:	a0800c04 	addi	r2,r20,48
    6d90:	e0800005 	stb	r2,0(fp)
    6d94:	e7000044 	addi	fp,fp,1
    6d98:	1817883a 	mov	r11,r3
    6d9c:	e57fd61e 	bne	fp,r21,6cf8 <_dtoa_r+0x5d8>
    6da0:	500d883a 	mov	r6,r10
    6da4:	180f883a 	mov	r7,r3
    6da8:	5009883a 	mov	r4,r10
    6dac:	180b883a 	mov	r5,r3
    6db0:	000ee900 	call	ee90 <__adddf3>
    6db4:	100d883a 	mov	r6,r2
    6db8:	9009883a 	mov	r4,r18
    6dbc:	980b883a 	mov	r5,r19
    6dc0:	180f883a 	mov	r7,r3
    6dc4:	1021883a 	mov	r16,r2
    6dc8:	1823883a 	mov	r17,r3
    6dcc:	000f7400 	call	f740 <__ltdf2>
    6dd0:	10000816 	blt	r2,zero,6df4 <_dtoa_r+0x6d4>
    6dd4:	980b883a 	mov	r5,r19
    6dd8:	800d883a 	mov	r6,r16
    6ddc:	880f883a 	mov	r7,r17
    6de0:	9009883a 	mov	r4,r18
    6de4:	000f5200 	call	f520 <__eqdf2>
    6de8:	1000171e 	bne	r2,zero,6e48 <_dtoa_r+0x728>
    6dec:	a080004c 	andi	r2,r20,1
    6df0:	10001526 	beq	r2,zero,6e48 <_dtoa_r+0x728>
    6df4:	d8800d17 	ldw	r2,52(sp)
    6df8:	d8800415 	stw	r2,16(sp)
    6dfc:	e009883a 	mov	r4,fp
    6e00:	213fffc4 	addi	r4,r4,-1
    6e04:	20c00007 	ldb	r3,0(r4)
    6e08:	00800e44 	movi	r2,57
    6e0c:	1880081e 	bne	r3,r2,6e30 <_dtoa_r+0x710>
    6e10:	d8800517 	ldw	r2,20(sp)
    6e14:	113ffa1e 	bne	r2,r4,6e00 <_dtoa_r+0x6e0>
    6e18:	d8c00417 	ldw	r3,16(sp)
    6e1c:	d9800517 	ldw	r6,20(sp)
    6e20:	00800c04 	movi	r2,48
    6e24:	18c00044 	addi	r3,r3,1
    6e28:	d8c00415 	stw	r3,16(sp)
    6e2c:	30800005 	stb	r2,0(r6)
    6e30:	20800003 	ldbu	r2,0(r4)
    6e34:	d8c00417 	ldw	r3,16(sp)
    6e38:	27000044 	addi	fp,r4,1
    6e3c:	10800044 	addi	r2,r2,1
    6e40:	d8c00d15 	stw	r3,52(sp)
    6e44:	20800005 	stb	r2,0(r4)
    6e48:	d9001617 	ldw	r4,88(sp)
    6e4c:	d9400717 	ldw	r5,28(sp)
    6e50:	000901c0 	call	901c <_Bfree>
    6e54:	e0000005 	stb	zero,0(fp)
    6e58:	d9800d17 	ldw	r6,52(sp)
    6e5c:	d8c02717 	ldw	r3,156(sp)
    6e60:	d9002917 	ldw	r4,164(sp)
    6e64:	30800044 	addi	r2,r6,1
    6e68:	18800015 	stw	r2,0(r3)
    6e6c:	20029c26 	beq	r4,zero,78e0 <_dtoa_r+0x11c0>
    6e70:	d8c00517 	ldw	r3,20(sp)
    6e74:	27000015 	stw	fp,0(r4)
    6e78:	003e5d06 	br	67f0 <_dtoa_r+0xd0>
    6e7c:	d9800d17 	ldw	r6,52(sp)
    6e80:	00c00074 	movhi	r3,1
    6e84:	18cd8704 	addi	r3,r3,13852
    6e88:	d9001217 	ldw	r4,72(sp)
    6e8c:	300490fa 	slli	r2,r6,3
    6e90:	d9401317 	ldw	r5,76(sp)
    6e94:	10c5883a 	add	r2,r2,r3
    6e98:	12000017 	ldw	r8,0(r2)
    6e9c:	12400117 	ldw	r9,4(r2)
    6ea0:	400d883a 	mov	r6,r8
    6ea4:	480f883a 	mov	r7,r9
    6ea8:	000f7400 	call	f740 <__ltdf2>
    6eac:	1000030e 	bge	r2,zero,6ebc <_dtoa_r+0x79c>
    6eb0:	d8800d17 	ldw	r2,52(sp)
    6eb4:	10bfffc4 	addi	r2,r2,-1
    6eb8:	d8800d15 	stw	r2,52(sp)
    6ebc:	d8000c15 	stw	zero,48(sp)
    6ec0:	003ea806 	br	6964 <_dtoa_r+0x244>
    6ec4:	d9000b17 	ldw	r4,44(sp)
    6ec8:	202cc03a 	cmpne	r22,r4,zero
    6ecc:	b000c71e 	bne	r22,zero,71ec <_dtoa_r+0xacc>
    6ed0:	dc001117 	ldw	r16,68(sp)
    6ed4:	dc801017 	ldw	r18,64(sp)
    6ed8:	0027883a 	mov	r19,zero
    6edc:	04000b0e 	bge	zero,r16,6f0c <_dtoa_r+0x7ec>
    6ee0:	d8c00a17 	ldw	r3,40(sp)
    6ee4:	00c0090e 	bge	zero,r3,6f0c <_dtoa_r+0x7ec>
    6ee8:	8005883a 	mov	r2,r16
    6eec:	1c011316 	blt	r3,r16,733c <_dtoa_r+0xc1c>
    6ef0:	d9000a17 	ldw	r4,40(sp)
    6ef4:	d9801117 	ldw	r6,68(sp)
    6ef8:	80a1c83a 	sub	r16,r16,r2
    6efc:	2089c83a 	sub	r4,r4,r2
    6f00:	308dc83a 	sub	r6,r6,r2
    6f04:	d9000a15 	stw	r4,40(sp)
    6f08:	d9801115 	stw	r6,68(sp)
    6f0c:	d8801017 	ldw	r2,64(sp)
    6f10:	0080150e 	bge	zero,r2,6f68 <_dtoa_r+0x848>
    6f14:	d8c00b17 	ldw	r3,44(sp)
    6f18:	1805003a 	cmpeq	r2,r3,zero
    6f1c:	1001c91e 	bne	r2,zero,7644 <_dtoa_r+0xf24>
    6f20:	04800e0e 	bge	zero,r18,6f5c <_dtoa_r+0x83c>
    6f24:	d9001617 	ldw	r4,88(sp)
    6f28:	980b883a 	mov	r5,r19
    6f2c:	900d883a 	mov	r6,r18
    6f30:	0009dd00 	call	9dd0 <__pow5mult>
    6f34:	d9001617 	ldw	r4,88(sp)
    6f38:	d9800717 	ldw	r6,28(sp)
    6f3c:	100b883a 	mov	r5,r2
    6f40:	1027883a 	mov	r19,r2
    6f44:	0009aac0 	call	9aac <__multiply>
    6f48:	d9001617 	ldw	r4,88(sp)
    6f4c:	d9400717 	ldw	r5,28(sp)
    6f50:	1023883a 	mov	r17,r2
    6f54:	000901c0 	call	901c <_Bfree>
    6f58:	dc400715 	stw	r17,28(sp)
    6f5c:	d9001017 	ldw	r4,64(sp)
    6f60:	248dc83a 	sub	r6,r4,r18
    6f64:	30010e1e 	bne	r6,zero,73a0 <_dtoa_r+0xc80>
    6f68:	d9001617 	ldw	r4,88(sp)
    6f6c:	04400044 	movi	r17,1
    6f70:	880b883a 	mov	r5,r17
    6f74:	0009c940 	call	9c94 <__i2b>
    6f78:	d9800917 	ldw	r6,36(sp)
    6f7c:	1025883a 	mov	r18,r2
    6f80:	0180040e 	bge	zero,r6,6f94 <_dtoa_r+0x874>
    6f84:	d9001617 	ldw	r4,88(sp)
    6f88:	100b883a 	mov	r5,r2
    6f8c:	0009dd00 	call	9dd0 <__pow5mult>
    6f90:	1025883a 	mov	r18,r2
    6f94:	d8801717 	ldw	r2,92(sp)
    6f98:	8880f30e 	bge	r17,r2,7368 <_dtoa_r+0xc48>
    6f9c:	0023883a 	mov	r17,zero
    6fa0:	d9800917 	ldw	r6,36(sp)
    6fa4:	30019e1e 	bne	r6,zero,7620 <_dtoa_r+0xf00>
    6fa8:	00c00044 	movi	r3,1
    6fac:	d9000a17 	ldw	r4,40(sp)
    6fb0:	20c5883a 	add	r2,r4,r3
    6fb4:	10c007cc 	andi	r3,r2,31
    6fb8:	1800841e 	bne	r3,zero,71cc <_dtoa_r+0xaac>
    6fbc:	00800704 	movi	r2,28
    6fc0:	d9000a17 	ldw	r4,40(sp)
    6fc4:	d9801117 	ldw	r6,68(sp)
    6fc8:	80a1883a 	add	r16,r16,r2
    6fcc:	2089883a 	add	r4,r4,r2
    6fd0:	308d883a 	add	r6,r6,r2
    6fd4:	d9000a15 	stw	r4,40(sp)
    6fd8:	d9801115 	stw	r6,68(sp)
    6fdc:	d8801117 	ldw	r2,68(sp)
    6fe0:	0080050e 	bge	zero,r2,6ff8 <_dtoa_r+0x8d8>
    6fe4:	d9400717 	ldw	r5,28(sp)
    6fe8:	d9001617 	ldw	r4,88(sp)
    6fec:	100d883a 	mov	r6,r2
    6ff0:	00099600 	call	9960 <__lshift>
    6ff4:	d8800715 	stw	r2,28(sp)
    6ff8:	d8c00a17 	ldw	r3,40(sp)
    6ffc:	00c0050e 	bge	zero,r3,7014 <_dtoa_r+0x8f4>
    7000:	d9001617 	ldw	r4,88(sp)
    7004:	900b883a 	mov	r5,r18
    7008:	180d883a 	mov	r6,r3
    700c:	00099600 	call	9960 <__lshift>
    7010:	1025883a 	mov	r18,r2
    7014:	d9000c17 	ldw	r4,48(sp)
    7018:	2005003a 	cmpeq	r2,r4,zero
    701c:	10016f26 	beq	r2,zero,75dc <_dtoa_r+0xebc>
    7020:	d9000f17 	ldw	r4,60(sp)
    7024:	0102170e 	bge	zero,r4,7884 <_dtoa_r+0x1164>
    7028:	d9800b17 	ldw	r6,44(sp)
    702c:	3005003a 	cmpeq	r2,r6,zero
    7030:	1000881e 	bne	r2,zero,7254 <_dtoa_r+0xb34>
    7034:	0400050e 	bge	zero,r16,704c <_dtoa_r+0x92c>
    7038:	d9001617 	ldw	r4,88(sp)
    703c:	980b883a 	mov	r5,r19
    7040:	800d883a 	mov	r6,r16
    7044:	00099600 	call	9960 <__lshift>
    7048:	1027883a 	mov	r19,r2
    704c:	8804c03a 	cmpne	r2,r17,zero
    7050:	1002541e 	bne	r2,zero,79a4 <_dtoa_r+0x1284>
    7054:	980b883a 	mov	r5,r19
    7058:	dd800517 	ldw	r22,20(sp)
    705c:	dcc00615 	stw	r19,24(sp)
    7060:	a700004c 	andi	fp,r20,1
    7064:	2827883a 	mov	r19,r5
    7068:	d9000717 	ldw	r4,28(sp)
    706c:	900b883a 	mov	r5,r18
    7070:	00065080 	call	6508 <quorem>
    7074:	d9000717 	ldw	r4,28(sp)
    7078:	d9400617 	ldw	r5,24(sp)
    707c:	1023883a 	mov	r17,r2
    7080:	8dc00c04 	addi	r23,r17,48
    7084:	00091780 	call	9178 <__mcmp>
    7088:	d9001617 	ldw	r4,88(sp)
    708c:	900b883a 	mov	r5,r18
    7090:	980d883a 	mov	r6,r19
    7094:	1029883a 	mov	r20,r2
    7098:	00097d40 	call	97d4 <__mdiff>
    709c:	102b883a 	mov	r21,r2
    70a0:	10800317 	ldw	r2,12(r2)
    70a4:	1001281e 	bne	r2,zero,7548 <_dtoa_r+0xe28>
    70a8:	d9000717 	ldw	r4,28(sp)
    70ac:	a80b883a 	mov	r5,r21
    70b0:	00091780 	call	9178 <__mcmp>
    70b4:	d9001617 	ldw	r4,88(sp)
    70b8:	1021883a 	mov	r16,r2
    70bc:	a80b883a 	mov	r5,r21
    70c0:	000901c0 	call	901c <_Bfree>
    70c4:	8000041e 	bne	r16,zero,70d8 <_dtoa_r+0x9b8>
    70c8:	d8801717 	ldw	r2,92(sp)
    70cc:	1000021e 	bne	r2,zero,70d8 <_dtoa_r+0x9b8>
    70d0:	e004c03a 	cmpne	r2,fp,zero
    70d4:	10011726 	beq	r2,zero,7534 <_dtoa_r+0xe14>
    70d8:	a0010616 	blt	r20,zero,74f4 <_dtoa_r+0xdd4>
    70dc:	a000041e 	bne	r20,zero,70f0 <_dtoa_r+0x9d0>
    70e0:	d8c01717 	ldw	r3,92(sp)
    70e4:	1800021e 	bne	r3,zero,70f0 <_dtoa_r+0x9d0>
    70e8:	e004c03a 	cmpne	r2,fp,zero
    70ec:	10010126 	beq	r2,zero,74f4 <_dtoa_r+0xdd4>
    70f0:	04023d16 	blt	zero,r16,79e8 <_dtoa_r+0x12c8>
    70f4:	b5c00005 	stb	r23,0(r22)
    70f8:	d9800517 	ldw	r6,20(sp)
    70fc:	d9000f17 	ldw	r4,60(sp)
    7100:	b5800044 	addi	r22,r22,1
    7104:	3105883a 	add	r2,r6,r4
    7108:	b0806526 	beq	r22,r2,72a0 <_dtoa_r+0xb80>
    710c:	d9400717 	ldw	r5,28(sp)
    7110:	d9001617 	ldw	r4,88(sp)
    7114:	01800284 	movi	r6,10
    7118:	000f883a 	mov	r7,zero
    711c:	0009cd00 	call	9cd0 <__multadd>
    7120:	d8800715 	stw	r2,28(sp)
    7124:	d8800617 	ldw	r2,24(sp)
    7128:	14c10c26 	beq	r2,r19,755c <_dtoa_r+0xe3c>
    712c:	d9400617 	ldw	r5,24(sp)
    7130:	d9001617 	ldw	r4,88(sp)
    7134:	01800284 	movi	r6,10
    7138:	000f883a 	mov	r7,zero
    713c:	0009cd00 	call	9cd0 <__multadd>
    7140:	d9001617 	ldw	r4,88(sp)
    7144:	980b883a 	mov	r5,r19
    7148:	01800284 	movi	r6,10
    714c:	000f883a 	mov	r7,zero
    7150:	d8800615 	stw	r2,24(sp)
    7154:	0009cd00 	call	9cd0 <__multadd>
    7158:	1027883a 	mov	r19,r2
    715c:	003fc206 	br	7068 <_dtoa_r+0x948>
    7160:	2445c83a 	sub	r2,r4,r17
    7164:	a088983a 	sll	r4,r20,r2
    7168:	003e4b06 	br	6a98 <_dtoa_r+0x378>
    716c:	01bfffc4 	movi	r6,-1
    7170:	00800044 	movi	r2,1
    7174:	d9800e15 	stw	r6,56(sp)
    7178:	d9800f15 	stw	r6,60(sp)
    717c:	d8800b15 	stw	r2,44(sp)
    7180:	d8c01617 	ldw	r3,88(sp)
    7184:	008005c4 	movi	r2,23
    7188:	18001115 	stw	zero,68(r3)
    718c:	1580082e 	bgeu	r2,r22,71b0 <_dtoa_r+0xa90>
    7190:	00c00104 	movi	r3,4
    7194:	0009883a 	mov	r4,zero
    7198:	18c7883a 	add	r3,r3,r3
    719c:	18800504 	addi	r2,r3,20
    71a0:	21000044 	addi	r4,r4,1
    71a4:	b0bffc2e 	bgeu	r22,r2,7198 <_dtoa_r+0xa78>
    71a8:	d9801617 	ldw	r6,88(sp)
    71ac:	31001115 	stw	r4,68(r6)
    71b0:	dc000f17 	ldw	r16,60(sp)
    71b4:	003e4b06 	br	6ae4 <_dtoa_r+0x3c4>
    71b8:	d9801717 	ldw	r6,92(sp)
    71bc:	0023883a 	mov	r17,zero
    71c0:	31bfff04 	addi	r6,r6,-4
    71c4:	d9801715 	stw	r6,92(sp)
    71c8:	003df806 	br	69ac <_dtoa_r+0x28c>
    71cc:	00800804 	movi	r2,32
    71d0:	10c9c83a 	sub	r4,r2,r3
    71d4:	00c00104 	movi	r3,4
    71d8:	19005a16 	blt	r3,r4,7344 <_dtoa_r+0xc24>
    71dc:	008000c4 	movi	r2,3
    71e0:	113f7e16 	blt	r2,r4,6fdc <_dtoa_r+0x8bc>
    71e4:	20800704 	addi	r2,r4,28
    71e8:	003f7506 	br	6fc0 <_dtoa_r+0x8a0>
    71ec:	d9801717 	ldw	r6,92(sp)
    71f0:	00800044 	movi	r2,1
    71f4:	1180a10e 	bge	r2,r6,747c <_dtoa_r+0xd5c>
    71f8:	d9800f17 	ldw	r6,60(sp)
    71fc:	d8c01017 	ldw	r3,64(sp)
    7200:	30bfffc4 	addi	r2,r6,-1
    7204:	1881c616 	blt	r3,r2,7920 <_dtoa_r+0x1200>
    7208:	18a5c83a 	sub	r18,r3,r2
    720c:	d8800f17 	ldw	r2,60(sp)
    7210:	10026216 	blt	r2,zero,7b9c <_dtoa_r+0x147c>
    7214:	dc001117 	ldw	r16,68(sp)
    7218:	1007883a 	mov	r3,r2
    721c:	d9800a17 	ldw	r6,40(sp)
    7220:	d8801117 	ldw	r2,68(sp)
    7224:	d9001617 	ldw	r4,88(sp)
    7228:	30cd883a 	add	r6,r6,r3
    722c:	10c5883a 	add	r2,r2,r3
    7230:	01400044 	movi	r5,1
    7234:	d9800a15 	stw	r6,40(sp)
    7238:	d8801115 	stw	r2,68(sp)
    723c:	0009c940 	call	9c94 <__i2b>
    7240:	1027883a 	mov	r19,r2
    7244:	003f2506 	br	6edc <_dtoa_r+0x7bc>
    7248:	00c00074 	movhi	r3,1
    724c:	18cd6004 	addi	r3,r3,13696
    7250:	003d6706 	br	67f0 <_dtoa_r+0xd0>
    7254:	dd800517 	ldw	r22,20(sp)
    7258:	04000044 	movi	r16,1
    725c:	00000706 	br	727c <_dtoa_r+0xb5c>
    7260:	d9400717 	ldw	r5,28(sp)
    7264:	d9001617 	ldw	r4,88(sp)
    7268:	01800284 	movi	r6,10
    726c:	000f883a 	mov	r7,zero
    7270:	0009cd00 	call	9cd0 <__multadd>
    7274:	d8800715 	stw	r2,28(sp)
    7278:	84000044 	addi	r16,r16,1
    727c:	d9000717 	ldw	r4,28(sp)
    7280:	900b883a 	mov	r5,r18
    7284:	00065080 	call	6508 <quorem>
    7288:	15c00c04 	addi	r23,r2,48
    728c:	b5c00005 	stb	r23,0(r22)
    7290:	d8c00f17 	ldw	r3,60(sp)
    7294:	b5800044 	addi	r22,r22,1
    7298:	80fff116 	blt	r16,r3,7260 <_dtoa_r+0xb40>
    729c:	d8000615 	stw	zero,24(sp)
    72a0:	d9400717 	ldw	r5,28(sp)
    72a4:	d9001617 	ldw	r4,88(sp)
    72a8:	01800044 	movi	r6,1
    72ac:	00099600 	call	9960 <__lshift>
    72b0:	1009883a 	mov	r4,r2
    72b4:	900b883a 	mov	r5,r18
    72b8:	d8800715 	stw	r2,28(sp)
    72bc:	00091780 	call	9178 <__mcmp>
    72c0:	00803c0e 	bge	zero,r2,73b4 <_dtoa_r+0xc94>
    72c4:	b009883a 	mov	r4,r22
    72c8:	213fffc4 	addi	r4,r4,-1
    72cc:	21400003 	ldbu	r5,0(r4)
    72d0:	00800e44 	movi	r2,57
    72d4:	28c03fcc 	andi	r3,r5,255
    72d8:	18c0201c 	xori	r3,r3,128
    72dc:	18ffe004 	addi	r3,r3,-128
    72e0:	1881981e 	bne	r3,r2,7944 <_dtoa_r+0x1224>
    72e4:	d9800517 	ldw	r6,20(sp)
    72e8:	21bff71e 	bne	r4,r6,72c8 <_dtoa_r+0xba8>
    72ec:	d8800d17 	ldw	r2,52(sp)
    72f0:	37000044 	addi	fp,r6,1
    72f4:	10800044 	addi	r2,r2,1
    72f8:	d8800d15 	stw	r2,52(sp)
    72fc:	00800c44 	movi	r2,49
    7300:	30800005 	stb	r2,0(r6)
    7304:	d9001617 	ldw	r4,88(sp)
    7308:	900b883a 	mov	r5,r18
    730c:	000901c0 	call	901c <_Bfree>
    7310:	983ecd26 	beq	r19,zero,6e48 <_dtoa_r+0x728>
    7314:	d8c00617 	ldw	r3,24(sp)
    7318:	18000426 	beq	r3,zero,732c <_dtoa_r+0xc0c>
    731c:	1cc00326 	beq	r3,r19,732c <_dtoa_r+0xc0c>
    7320:	d9001617 	ldw	r4,88(sp)
    7324:	180b883a 	mov	r5,r3
    7328:	000901c0 	call	901c <_Bfree>
    732c:	d9001617 	ldw	r4,88(sp)
    7330:	980b883a 	mov	r5,r19
    7334:	000901c0 	call	901c <_Bfree>
    7338:	003ec306 	br	6e48 <_dtoa_r+0x728>
    733c:	1805883a 	mov	r2,r3
    7340:	003eeb06 	br	6ef0 <_dtoa_r+0x7d0>
    7344:	d9800a17 	ldw	r6,40(sp)
    7348:	d8c01117 	ldw	r3,68(sp)
    734c:	20bfff04 	addi	r2,r4,-4
    7350:	308d883a 	add	r6,r6,r2
    7354:	1887883a 	add	r3,r3,r2
    7358:	80a1883a 	add	r16,r16,r2
    735c:	d9800a15 	stw	r6,40(sp)
    7360:	d8c01115 	stw	r3,68(sp)
    7364:	003f1d06 	br	6fdc <_dtoa_r+0x8bc>
    7368:	a03f0c1e 	bne	r20,zero,6f9c <_dtoa_r+0x87c>
    736c:	00800434 	movhi	r2,16
    7370:	10bfffc4 	addi	r2,r2,-1
    7374:	a884703a 	and	r2,r21,r2
    7378:	103f081e 	bne	r2,zero,6f9c <_dtoa_r+0x87c>
    737c:	a89ffc2c 	andhi	r2,r21,32752
    7380:	103f0626 	beq	r2,zero,6f9c <_dtoa_r+0x87c>
    7384:	d8c01117 	ldw	r3,68(sp)
    7388:	d9000a17 	ldw	r4,40(sp)
    738c:	18c00044 	addi	r3,r3,1
    7390:	21000044 	addi	r4,r4,1
    7394:	d8c01115 	stw	r3,68(sp)
    7398:	d9000a15 	stw	r4,40(sp)
    739c:	003f0006 	br	6fa0 <_dtoa_r+0x880>
    73a0:	d9400717 	ldw	r5,28(sp)
    73a4:	d9001617 	ldw	r4,88(sp)
    73a8:	0009dd00 	call	9dd0 <__pow5mult>
    73ac:	d8800715 	stw	r2,28(sp)
    73b0:	003eed06 	br	6f68 <_dtoa_r+0x848>
    73b4:	1000021e 	bne	r2,zero,73c0 <_dtoa_r+0xca0>
    73b8:	b880004c 	andi	r2,r23,1
    73bc:	103fc11e 	bne	r2,zero,72c4 <_dtoa_r+0xba4>
    73c0:	b5bfffc4 	addi	r22,r22,-1
    73c4:	b0c00007 	ldb	r3,0(r22)
    73c8:	00800c04 	movi	r2,48
    73cc:	18bffc26 	beq	r3,r2,73c0 <_dtoa_r+0xca0>
    73d0:	b7000044 	addi	fp,r22,1
    73d4:	003fcb06 	br	7304 <_dtoa_r+0xbe4>
    73d8:	d9800d17 	ldw	r6,52(sp)
    73dc:	018fc83a 	sub	r7,zero,r6
    73e0:	3801f726 	beq	r7,zero,7bc0 <_dtoa_r+0x14a0>
    73e4:	398003cc 	andi	r6,r7,15
    73e8:	300c90fa 	slli	r6,r6,3
    73ec:	01400074 	movhi	r5,1
    73f0:	294d8704 	addi	r5,r5,13852
    73f4:	d9001217 	ldw	r4,72(sp)
    73f8:	314d883a 	add	r6,r6,r5
    73fc:	30c00117 	ldw	r3,4(r6)
    7400:	30800017 	ldw	r2,0(r6)
    7404:	d9401317 	ldw	r5,76(sp)
    7408:	3821d13a 	srai	r16,r7,4
    740c:	100d883a 	mov	r6,r2
    7410:	180f883a 	mov	r7,r3
    7414:	000ef040 	call	ef04 <__muldf3>
    7418:	1011883a 	mov	r8,r2
    741c:	1813883a 	mov	r9,r3
    7420:	1029883a 	mov	r20,r2
    7424:	182b883a 	mov	r21,r3
    7428:	8001e526 	beq	r16,zero,7bc0 <_dtoa_r+0x14a0>
    742c:	05800084 	movi	r22,2
    7430:	04400074 	movhi	r17,1
    7434:	8c4db904 	addi	r17,r17,14052
    7438:	8080004c 	andi	r2,r16,1
    743c:	1005003a 	cmpeq	r2,r2,zero
    7440:	1000081e 	bne	r2,zero,7464 <_dtoa_r+0xd44>
    7444:	89800017 	ldw	r6,0(r17)
    7448:	89c00117 	ldw	r7,4(r17)
    744c:	480b883a 	mov	r5,r9
    7450:	4009883a 	mov	r4,r8
    7454:	000ef040 	call	ef04 <__muldf3>
    7458:	1011883a 	mov	r8,r2
    745c:	b5800044 	addi	r22,r22,1
    7460:	1813883a 	mov	r9,r3
    7464:	8021d07a 	srai	r16,r16,1
    7468:	8c400204 	addi	r17,r17,8
    746c:	803ff21e 	bne	r16,zero,7438 <_dtoa_r+0xd18>
    7470:	4029883a 	mov	r20,r8
    7474:	482b883a 	mov	r21,r9
    7478:	003dca06 	br	6ba4 <_dtoa_r+0x484>
    747c:	d9000817 	ldw	r4,32(sp)
    7480:	2005003a 	cmpeq	r2,r4,zero
    7484:	1001f61e 	bne	r2,zero,7c60 <_dtoa_r+0x1540>
    7488:	dc001117 	ldw	r16,68(sp)
    748c:	dc801017 	ldw	r18,64(sp)
    7490:	18c10cc4 	addi	r3,r3,1075
    7494:	003f6106 	br	721c <_dtoa_r+0xafc>
    7498:	d8000b15 	stw	zero,44(sp)
    749c:	d9802617 	ldw	r6,152(sp)
    74a0:	d8c00d17 	ldw	r3,52(sp)
    74a4:	30800044 	addi	r2,r6,1
    74a8:	18ad883a 	add	r22,r3,r2
    74ac:	b13fffc4 	addi	r4,r22,-1
    74b0:	d9000e15 	stw	r4,56(sp)
    74b4:	0581f60e 	bge	zero,r22,7c90 <_dtoa_r+0x1570>
    74b8:	dd800f15 	stw	r22,60(sp)
    74bc:	003f3006 	br	7180 <_dtoa_r+0xa60>
    74c0:	d8000b15 	stw	zero,44(sp)
    74c4:	d9002617 	ldw	r4,152(sp)
    74c8:	0101eb0e 	bge	zero,r4,7c78 <_dtoa_r+0x1558>
    74cc:	202d883a 	mov	r22,r4
    74d0:	d9000e15 	stw	r4,56(sp)
    74d4:	d9000f15 	stw	r4,60(sp)
    74d8:	003f2906 	br	7180 <_dtoa_r+0xa60>
    74dc:	01800044 	movi	r6,1
    74e0:	d9800b15 	stw	r6,44(sp)
    74e4:	003ff706 	br	74c4 <_dtoa_r+0xda4>
    74e8:	01000044 	movi	r4,1
    74ec:	d9000b15 	stw	r4,44(sp)
    74f0:	003fea06 	br	749c <_dtoa_r+0xd7c>
    74f4:	04000c0e 	bge	zero,r16,7528 <_dtoa_r+0xe08>
    74f8:	d9400717 	ldw	r5,28(sp)
    74fc:	d9001617 	ldw	r4,88(sp)
    7500:	01800044 	movi	r6,1
    7504:	00099600 	call	9960 <__lshift>
    7508:	1009883a 	mov	r4,r2
    750c:	900b883a 	mov	r5,r18
    7510:	d8800715 	stw	r2,28(sp)
    7514:	00091780 	call	9178 <__mcmp>
    7518:	0081e00e 	bge	zero,r2,7c9c <_dtoa_r+0x157c>
    751c:	bdc00044 	addi	r23,r23,1
    7520:	00800e84 	movi	r2,58
    7524:	b881a226 	beq	r23,r2,7bb0 <_dtoa_r+0x1490>
    7528:	b7000044 	addi	fp,r22,1
    752c:	b5c00005 	stb	r23,0(r22)
    7530:	003f7406 	br	7304 <_dtoa_r+0xbe4>
    7534:	00800e44 	movi	r2,57
    7538:	b8819d26 	beq	r23,r2,7bb0 <_dtoa_r+0x1490>
    753c:	053ffa0e 	bge	zero,r20,7528 <_dtoa_r+0xe08>
    7540:	8dc00c44 	addi	r23,r17,49
    7544:	003ff806 	br	7528 <_dtoa_r+0xe08>
    7548:	d9001617 	ldw	r4,88(sp)
    754c:	a80b883a 	mov	r5,r21
    7550:	04000044 	movi	r16,1
    7554:	000901c0 	call	901c <_Bfree>
    7558:	003edf06 	br	70d8 <_dtoa_r+0x9b8>
    755c:	d9001617 	ldw	r4,88(sp)
    7560:	980b883a 	mov	r5,r19
    7564:	01800284 	movi	r6,10
    7568:	000f883a 	mov	r7,zero
    756c:	0009cd00 	call	9cd0 <__multadd>
    7570:	1027883a 	mov	r19,r2
    7574:	d8800615 	stw	r2,24(sp)
    7578:	003ebb06 	br	7068 <_dtoa_r+0x948>
    757c:	d9801117 	ldw	r6,68(sp)
    7580:	d8800d17 	ldw	r2,52(sp)
    7584:	d8000915 	stw	zero,36(sp)
    7588:	308dc83a 	sub	r6,r6,r2
    758c:	0087c83a 	sub	r3,zero,r2
    7590:	d9801115 	stw	r6,68(sp)
    7594:	d8c01015 	stw	r3,64(sp)
    7598:	003cfe06 	br	6994 <_dtoa_r+0x274>
    759c:	018dc83a 	sub	r6,zero,r6
    75a0:	d9801115 	stw	r6,68(sp)
    75a4:	d8000a15 	stw	zero,40(sp)
    75a8:	003cf306 	br	6978 <_dtoa_r+0x258>
    75ac:	d9000d17 	ldw	r4,52(sp)
    75b0:	000f8500 	call	f850 <__floatsidf>
    75b4:	880b883a 	mov	r5,r17
    75b8:	8009883a 	mov	r4,r16
    75bc:	180f883a 	mov	r7,r3
    75c0:	100d883a 	mov	r6,r2
    75c4:	000f5a80 	call	f5a8 <__nedf2>
    75c8:	103ce126 	beq	r2,zero,6950 <_dtoa_r+0x230>
    75cc:	d9800d17 	ldw	r6,52(sp)
    75d0:	31bfffc4 	addi	r6,r6,-1
    75d4:	d9800d15 	stw	r6,52(sp)
    75d8:	003cdd06 	br	6950 <_dtoa_r+0x230>
    75dc:	d9000717 	ldw	r4,28(sp)
    75e0:	900b883a 	mov	r5,r18
    75e4:	00091780 	call	9178 <__mcmp>
    75e8:	103e8d0e 	bge	r2,zero,7020 <_dtoa_r+0x900>
    75ec:	d9400717 	ldw	r5,28(sp)
    75f0:	d9001617 	ldw	r4,88(sp)
    75f4:	01800284 	movi	r6,10
    75f8:	000f883a 	mov	r7,zero
    75fc:	0009cd00 	call	9cd0 <__multadd>
    7600:	d9800d17 	ldw	r6,52(sp)
    7604:	d8800715 	stw	r2,28(sp)
    7608:	31bfffc4 	addi	r6,r6,-1
    760c:	d9800d15 	stw	r6,52(sp)
    7610:	b001a71e 	bne	r22,zero,7cb0 <_dtoa_r+0x1590>
    7614:	d8800e17 	ldw	r2,56(sp)
    7618:	d8800f15 	stw	r2,60(sp)
    761c:	003e8006 	br	7020 <_dtoa_r+0x900>
    7620:	90800417 	ldw	r2,16(r18)
    7624:	1085883a 	add	r2,r2,r2
    7628:	1085883a 	add	r2,r2,r2
    762c:	1485883a 	add	r2,r2,r18
    7630:	11000417 	ldw	r4,16(r2)
    7634:	00090440 	call	9044 <__hi0bits>
    7638:	00c00804 	movi	r3,32
    763c:	1887c83a 	sub	r3,r3,r2
    7640:	003e5a06 	br	6fac <_dtoa_r+0x88c>
    7644:	d9400717 	ldw	r5,28(sp)
    7648:	d9801017 	ldw	r6,64(sp)
    764c:	d9001617 	ldw	r4,88(sp)
    7650:	0009dd00 	call	9dd0 <__pow5mult>
    7654:	d8800715 	stw	r2,28(sp)
    7658:	003e4306 	br	6f68 <_dtoa_r+0x848>
    765c:	d9800f17 	ldw	r6,60(sp)
    7660:	d8800d17 	ldw	r2,52(sp)
    7664:	d9800315 	stw	r6,12(sp)
    7668:	d8800415 	stw	r2,16(sp)
    766c:	d8c00b17 	ldw	r3,44(sp)
    7670:	1805003a 	cmpeq	r2,r3,zero
    7674:	1000e21e 	bne	r2,zero,7a00 <_dtoa_r+0x12e0>
    7678:	d9000317 	ldw	r4,12(sp)
    767c:	0005883a 	mov	r2,zero
    7680:	00cff834 	movhi	r3,16352
    7684:	200c90fa 	slli	r6,r4,3
    7688:	01000074 	movhi	r4,1
    768c:	210d8704 	addi	r4,r4,13852
    7690:	180b883a 	mov	r5,r3
    7694:	310d883a 	add	r6,r6,r4
    7698:	327fff17 	ldw	r9,-4(r6)
    769c:	323ffe17 	ldw	r8,-8(r6)
    76a0:	1009883a 	mov	r4,r2
    76a4:	480f883a 	mov	r7,r9
    76a8:	400d883a 	mov	r6,r8
    76ac:	000f2c80 	call	f2c8 <__divdf3>
    76b0:	180b883a 	mov	r5,r3
    76b4:	b00d883a 	mov	r6,r22
    76b8:	b80f883a 	mov	r7,r23
    76bc:	1009883a 	mov	r4,r2
    76c0:	000ee100 	call	ee10 <__subdf3>
    76c4:	a80b883a 	mov	r5,r21
    76c8:	a009883a 	mov	r4,r20
    76cc:	d8c01915 	stw	r3,100(sp)
    76d0:	d8801815 	stw	r2,96(sp)
    76d4:	000f9480 	call	f948 <__fixdfsi>
    76d8:	1009883a 	mov	r4,r2
    76dc:	1027883a 	mov	r19,r2
    76e0:	000f8500 	call	f850 <__floatsidf>
    76e4:	a80b883a 	mov	r5,r21
    76e8:	a009883a 	mov	r4,r20
    76ec:	180f883a 	mov	r7,r3
    76f0:	100d883a 	mov	r6,r2
    76f4:	000ee100 	call	ee10 <__subdf3>
    76f8:	d9801817 	ldw	r6,96(sp)
    76fc:	1823883a 	mov	r17,r3
    7700:	d8801415 	stw	r2,80(sp)
    7704:	302d883a 	mov	r22,r6
    7708:	d9800517 	ldw	r6,20(sp)
    770c:	9cc00c04 	addi	r19,r19,48
    7710:	dc401515 	stw	r17,84(sp)
    7714:	d8c01917 	ldw	r3,100(sp)
    7718:	34c00005 	stb	r19,0(r6)
    771c:	d8800517 	ldw	r2,20(sp)
    7720:	d9401917 	ldw	r5,100(sp)
    7724:	d9801417 	ldw	r6,80(sp)
    7728:	b009883a 	mov	r4,r22
    772c:	880f883a 	mov	r7,r17
    7730:	182f883a 	mov	r23,r3
    7734:	17000044 	addi	fp,r2,1
    7738:	000f6300 	call	f630 <__gtdf2>
    773c:	00804e16 	blt	zero,r2,7878 <_dtoa_r+0x1158>
    7740:	d9801417 	ldw	r6,80(sp)
    7744:	0005883a 	mov	r2,zero
    7748:	00cffc34 	movhi	r3,16368
    774c:	180b883a 	mov	r5,r3
    7750:	880f883a 	mov	r7,r17
    7754:	1009883a 	mov	r4,r2
    7758:	000ee100 	call	ee10 <__subdf3>
    775c:	d9401917 	ldw	r5,100(sp)
    7760:	180f883a 	mov	r7,r3
    7764:	b009883a 	mov	r4,r22
    7768:	100d883a 	mov	r6,r2
    776c:	000f6300 	call	f630 <__gtdf2>
    7770:	00bda216 	blt	zero,r2,6dfc <_dtoa_r+0x6dc>
    7774:	d8c00317 	ldw	r3,12(sp)
    7778:	00800044 	movi	r2,1
    777c:	10c01216 	blt	r2,r3,77c8 <_dtoa_r+0x10a8>
    7780:	003d4506 	br	6c98 <_dtoa_r+0x578>
    7784:	d9801417 	ldw	r6,80(sp)
    7788:	0005883a 	mov	r2,zero
    778c:	00cffc34 	movhi	r3,16368
    7790:	180b883a 	mov	r5,r3
    7794:	880f883a 	mov	r7,r17
    7798:	1009883a 	mov	r4,r2
    779c:	000ee100 	call	ee10 <__subdf3>
    77a0:	d9c01b17 	ldw	r7,108(sp)
    77a4:	180b883a 	mov	r5,r3
    77a8:	1009883a 	mov	r4,r2
    77ac:	b00d883a 	mov	r6,r22
    77b0:	000f7400 	call	f740 <__ltdf2>
    77b4:	103d9116 	blt	r2,zero,6dfc <_dtoa_r+0x6dc>
    77b8:	d9800517 	ldw	r6,20(sp)
    77bc:	d9000317 	ldw	r4,12(sp)
    77c0:	3105883a 	add	r2,r6,r4
    77c4:	e0bd3426 	beq	fp,r2,6c98 <_dtoa_r+0x578>
    77c8:	04500934 	movhi	r17,16420
    77cc:	0021883a 	mov	r16,zero
    77d0:	b80b883a 	mov	r5,r23
    77d4:	b009883a 	mov	r4,r22
    77d8:	800d883a 	mov	r6,r16
    77dc:	880f883a 	mov	r7,r17
    77e0:	000ef040 	call	ef04 <__muldf3>
    77e4:	d9401517 	ldw	r5,84(sp)
    77e8:	d9001417 	ldw	r4,80(sp)
    77ec:	880f883a 	mov	r7,r17
    77f0:	000d883a 	mov	r6,zero
    77f4:	d8801a15 	stw	r2,104(sp)
    77f8:	d8c01b15 	stw	r3,108(sp)
    77fc:	000ef040 	call	ef04 <__muldf3>
    7800:	180b883a 	mov	r5,r3
    7804:	1009883a 	mov	r4,r2
    7808:	1823883a 	mov	r17,r3
    780c:	1021883a 	mov	r16,r2
    7810:	000f9480 	call	f948 <__fixdfsi>
    7814:	1009883a 	mov	r4,r2
    7818:	102b883a 	mov	r21,r2
    781c:	000f8500 	call	f850 <__floatsidf>
    7820:	880b883a 	mov	r5,r17
    7824:	8009883a 	mov	r4,r16
    7828:	180f883a 	mov	r7,r3
    782c:	100d883a 	mov	r6,r2
    7830:	000ee100 	call	ee10 <__subdf3>
    7834:	1021883a 	mov	r16,r2
    7838:	d9001b17 	ldw	r4,108(sp)
    783c:	1823883a 	mov	r17,r3
    7840:	dc001415 	stw	r16,80(sp)
    7844:	ad400c04 	addi	r21,r21,48
    7848:	dc401515 	stw	r17,84(sp)
    784c:	d8801a17 	ldw	r2,104(sp)
    7850:	e5400005 	stb	r21,0(fp)
    7854:	202f883a 	mov	r23,r4
    7858:	d9c01b17 	ldw	r7,108(sp)
    785c:	d9001417 	ldw	r4,80(sp)
    7860:	880b883a 	mov	r5,r17
    7864:	100d883a 	mov	r6,r2
    7868:	102d883a 	mov	r22,r2
    786c:	e7000044 	addi	fp,fp,1
    7870:	000f7400 	call	f740 <__ltdf2>
    7874:	103fc30e 	bge	r2,zero,7784 <_dtoa_r+0x1064>
    7878:	d9000417 	ldw	r4,16(sp)
    787c:	d9000d15 	stw	r4,52(sp)
    7880:	003d7106 	br	6e48 <_dtoa_r+0x728>
    7884:	d9801717 	ldw	r6,92(sp)
    7888:	00800084 	movi	r2,2
    788c:	11bde60e 	bge	r2,r6,7028 <_dtoa_r+0x908>
    7890:	203cfb1e 	bne	r4,zero,6c80 <_dtoa_r+0x560>
    7894:	d9001617 	ldw	r4,88(sp)
    7898:	900b883a 	mov	r5,r18
    789c:	01800144 	movi	r6,5
    78a0:	000f883a 	mov	r7,zero
    78a4:	0009cd00 	call	9cd0 <__multadd>
    78a8:	d9000717 	ldw	r4,28(sp)
    78ac:	100b883a 	mov	r5,r2
    78b0:	1025883a 	mov	r18,r2
    78b4:	00091780 	call	9178 <__mcmp>
    78b8:	00bcf10e 	bge	zero,r2,6c80 <_dtoa_r+0x560>
    78bc:	d8c00d17 	ldw	r3,52(sp)
    78c0:	d9000517 	ldw	r4,20(sp)
    78c4:	d8000615 	stw	zero,24(sp)
    78c8:	18c00044 	addi	r3,r3,1
    78cc:	d8c00d15 	stw	r3,52(sp)
    78d0:	00800c44 	movi	r2,49
    78d4:	27000044 	addi	fp,r4,1
    78d8:	20800005 	stb	r2,0(r4)
    78dc:	003e8906 	br	7304 <_dtoa_r+0xbe4>
    78e0:	d8c00517 	ldw	r3,20(sp)
    78e4:	003bc206 	br	67f0 <_dtoa_r+0xd0>
    78e8:	01800074 	movhi	r6,1
    78ec:	318db904 	addi	r6,r6,14052
    78f0:	30c00917 	ldw	r3,36(r6)
    78f4:	30800817 	ldw	r2,32(r6)
    78f8:	d9001217 	ldw	r4,72(sp)
    78fc:	d9401317 	ldw	r5,76(sp)
    7900:	180f883a 	mov	r7,r3
    7904:	100d883a 	mov	r6,r2
    7908:	000f2c80 	call	f2c8 <__divdf3>
    790c:	948003cc 	andi	r18,r18,15
    7910:	058000c4 	movi	r22,3
    7914:	1029883a 	mov	r20,r2
    7918:	182b883a 	mov	r21,r3
    791c:	003c8906 	br	6b44 <_dtoa_r+0x424>
    7920:	d9001017 	ldw	r4,64(sp)
    7924:	d9800917 	ldw	r6,36(sp)
    7928:	0025883a 	mov	r18,zero
    792c:	1105c83a 	sub	r2,r2,r4
    7930:	2089883a 	add	r4,r4,r2
    7934:	308d883a 	add	r6,r6,r2
    7938:	d9001015 	stw	r4,64(sp)
    793c:	d9800915 	stw	r6,36(sp)
    7940:	003e3206 	br	720c <_dtoa_r+0xaec>
    7944:	28800044 	addi	r2,r5,1
    7948:	27000044 	addi	fp,r4,1
    794c:	20800005 	stb	r2,0(r4)
    7950:	003e6c06 	br	7304 <_dtoa_r+0xbe4>
    7954:	d8800f17 	ldw	r2,60(sp)
    7958:	00bce016 	blt	zero,r2,6cdc <_dtoa_r+0x5bc>
    795c:	d9800f17 	ldw	r6,60(sp)
    7960:	303cc51e 	bne	r6,zero,6c78 <_dtoa_r+0x558>
    7964:	0005883a 	mov	r2,zero
    7968:	00d00534 	movhi	r3,16404
    796c:	980b883a 	mov	r5,r19
    7970:	180f883a 	mov	r7,r3
    7974:	9009883a 	mov	r4,r18
    7978:	100d883a 	mov	r6,r2
    797c:	000ef040 	call	ef04 <__muldf3>
    7980:	180b883a 	mov	r5,r3
    7984:	a80f883a 	mov	r7,r21
    7988:	1009883a 	mov	r4,r2
    798c:	a00d883a 	mov	r6,r20
    7990:	000f6b80 	call	f6b8 <__gedf2>
    7994:	103cb80e 	bge	r2,zero,6c78 <_dtoa_r+0x558>
    7998:	0027883a 	mov	r19,zero
    799c:	0025883a 	mov	r18,zero
    79a0:	003fc606 	br	78bc <_dtoa_r+0x119c>
    79a4:	99400117 	ldw	r5,4(r19)
    79a8:	d9001617 	ldw	r4,88(sp)
    79ac:	000959c0 	call	959c <_Balloc>
    79b0:	99800417 	ldw	r6,16(r19)
    79b4:	11000304 	addi	r4,r2,12
    79b8:	99400304 	addi	r5,r19,12
    79bc:	318d883a 	add	r6,r6,r6
    79c0:	318d883a 	add	r6,r6,r6
    79c4:	31800204 	addi	r6,r6,8
    79c8:	1023883a 	mov	r17,r2
    79cc:	00021040 	call	2104 <memcpy>
    79d0:	d9001617 	ldw	r4,88(sp)
    79d4:	880b883a 	mov	r5,r17
    79d8:	01800044 	movi	r6,1
    79dc:	00099600 	call	9960 <__lshift>
    79e0:	100b883a 	mov	r5,r2
    79e4:	003d9c06 	br	7058 <_dtoa_r+0x938>
    79e8:	00800e44 	movi	r2,57
    79ec:	b8807026 	beq	r23,r2,7bb0 <_dtoa_r+0x1490>
    79f0:	b8800044 	addi	r2,r23,1
    79f4:	b7000044 	addi	fp,r22,1
    79f8:	b0800005 	stb	r2,0(r22)
    79fc:	003e4106 	br	7304 <_dtoa_r+0xbe4>
    7a00:	d8800317 	ldw	r2,12(sp)
    7a04:	01800074 	movhi	r6,1
    7a08:	318d8704 	addi	r6,r6,13852
    7a0c:	b009883a 	mov	r4,r22
    7a10:	100e90fa 	slli	r7,r2,3
    7a14:	b80b883a 	mov	r5,r23
    7a18:	398f883a 	add	r7,r7,r6
    7a1c:	38bffe17 	ldw	r2,-8(r7)
    7a20:	d9800517 	ldw	r6,20(sp)
    7a24:	38ffff17 	ldw	r3,-4(r7)
    7a28:	37000044 	addi	fp,r6,1
    7a2c:	180f883a 	mov	r7,r3
    7a30:	100d883a 	mov	r6,r2
    7a34:	000ef040 	call	ef04 <__muldf3>
    7a38:	a80b883a 	mov	r5,r21
    7a3c:	a009883a 	mov	r4,r20
    7a40:	182f883a 	mov	r23,r3
    7a44:	102d883a 	mov	r22,r2
    7a48:	000f9480 	call	f948 <__fixdfsi>
    7a4c:	1009883a 	mov	r4,r2
    7a50:	1027883a 	mov	r19,r2
    7a54:	000f8500 	call	f850 <__floatsidf>
    7a58:	a80b883a 	mov	r5,r21
    7a5c:	a009883a 	mov	r4,r20
    7a60:	180f883a 	mov	r7,r3
    7a64:	100d883a 	mov	r6,r2
    7a68:	000ee100 	call	ee10 <__subdf3>
    7a6c:	180b883a 	mov	r5,r3
    7a70:	d8c00517 	ldw	r3,20(sp)
    7a74:	9cc00c04 	addi	r19,r19,48
    7a78:	1009883a 	mov	r4,r2
    7a7c:	1cc00005 	stb	r19,0(r3)
    7a80:	2021883a 	mov	r16,r4
    7a84:	d9000317 	ldw	r4,12(sp)
    7a88:	00800044 	movi	r2,1
    7a8c:	2823883a 	mov	r17,r5
    7a90:	20802226 	beq	r4,r2,7b1c <_dtoa_r+0x13fc>
    7a94:	1029883a 	mov	r20,r2
    7a98:	0005883a 	mov	r2,zero
    7a9c:	00d00934 	movhi	r3,16420
    7aa0:	180f883a 	mov	r7,r3
    7aa4:	100d883a 	mov	r6,r2
    7aa8:	880b883a 	mov	r5,r17
    7aac:	8009883a 	mov	r4,r16
    7ab0:	000ef040 	call	ef04 <__muldf3>
    7ab4:	180b883a 	mov	r5,r3
    7ab8:	1009883a 	mov	r4,r2
    7abc:	1823883a 	mov	r17,r3
    7ac0:	1021883a 	mov	r16,r2
    7ac4:	000f9480 	call	f948 <__fixdfsi>
    7ac8:	1009883a 	mov	r4,r2
    7acc:	102b883a 	mov	r21,r2
    7ad0:	000f8500 	call	f850 <__floatsidf>
    7ad4:	880b883a 	mov	r5,r17
    7ad8:	8009883a 	mov	r4,r16
    7adc:	180f883a 	mov	r7,r3
    7ae0:	100d883a 	mov	r6,r2
    7ae4:	000ee100 	call	ee10 <__subdf3>
    7ae8:	180b883a 	mov	r5,r3
    7aec:	d8c00517 	ldw	r3,20(sp)
    7af0:	1009883a 	mov	r4,r2
    7af4:	ad400c04 	addi	r21,r21,48
    7af8:	1d05883a 	add	r2,r3,r20
    7afc:	15400005 	stb	r21,0(r2)
    7b00:	2021883a 	mov	r16,r4
    7b04:	d9000317 	ldw	r4,12(sp)
    7b08:	a5000044 	addi	r20,r20,1
    7b0c:	2823883a 	mov	r17,r5
    7b10:	a13fe11e 	bne	r20,r4,7a98 <_dtoa_r+0x1378>
    7b14:	e505883a 	add	r2,fp,r20
    7b18:	173fffc4 	addi	fp,r2,-1
    7b1c:	0025883a 	mov	r18,zero
    7b20:	04cff834 	movhi	r19,16352
    7b24:	b009883a 	mov	r4,r22
    7b28:	b80b883a 	mov	r5,r23
    7b2c:	900d883a 	mov	r6,r18
    7b30:	980f883a 	mov	r7,r19
    7b34:	000ee900 	call	ee90 <__adddf3>
    7b38:	180b883a 	mov	r5,r3
    7b3c:	1009883a 	mov	r4,r2
    7b40:	800d883a 	mov	r6,r16
    7b44:	880f883a 	mov	r7,r17
    7b48:	000f7400 	call	f740 <__ltdf2>
    7b4c:	103cab16 	blt	r2,zero,6dfc <_dtoa_r+0x6dc>
    7b50:	0009883a 	mov	r4,zero
    7b54:	980b883a 	mov	r5,r19
    7b58:	b80f883a 	mov	r7,r23
    7b5c:	b00d883a 	mov	r6,r22
    7b60:	000ee100 	call	ee10 <__subdf3>
    7b64:	180b883a 	mov	r5,r3
    7b68:	880f883a 	mov	r7,r17
    7b6c:	1009883a 	mov	r4,r2
    7b70:	800d883a 	mov	r6,r16
    7b74:	000f6300 	call	f630 <__gtdf2>
    7b78:	00bc470e 	bge	zero,r2,6c98 <_dtoa_r+0x578>
    7b7c:	00c00c04 	movi	r3,48
    7b80:	e73fffc4 	addi	fp,fp,-1
    7b84:	e0800007 	ldb	r2,0(fp)
    7b88:	10fffd26 	beq	r2,r3,7b80 <_dtoa_r+0x1460>
    7b8c:	d9800417 	ldw	r6,16(sp)
    7b90:	e7000044 	addi	fp,fp,1
    7b94:	d9800d15 	stw	r6,52(sp)
    7b98:	003cab06 	br	6e48 <_dtoa_r+0x728>
    7b9c:	d8c00f17 	ldw	r3,60(sp)
    7ba0:	d9001117 	ldw	r4,68(sp)
    7ba4:	20e1c83a 	sub	r16,r4,r3
    7ba8:	0007883a 	mov	r3,zero
    7bac:	003d9b06 	br	721c <_dtoa_r+0xafc>
    7bb0:	00800e44 	movi	r2,57
    7bb4:	b0800005 	stb	r2,0(r22)
    7bb8:	b5800044 	addi	r22,r22,1
    7bbc:	003dc106 	br	72c4 <_dtoa_r+0xba4>
    7bc0:	05800084 	movi	r22,2
    7bc4:	003bf706 	br	6ba4 <_dtoa_r+0x484>
    7bc8:	d9000f17 	ldw	r4,60(sp)
    7bcc:	013c000e 	bge	zero,r4,6bd0 <_dtoa_r+0x4b0>
    7bd0:	d9800e17 	ldw	r6,56(sp)
    7bd4:	01bc300e 	bge	zero,r6,6c98 <_dtoa_r+0x578>
    7bd8:	0005883a 	mov	r2,zero
    7bdc:	00d00934 	movhi	r3,16420
    7be0:	a80b883a 	mov	r5,r21
    7be4:	180f883a 	mov	r7,r3
    7be8:	a009883a 	mov	r4,r20
    7bec:	100d883a 	mov	r6,r2
    7bf0:	000ef040 	call	ef04 <__muldf3>
    7bf4:	b1000044 	addi	r4,r22,1
    7bf8:	1021883a 	mov	r16,r2
    7bfc:	1823883a 	mov	r17,r3
    7c00:	000f8500 	call	f850 <__floatsidf>
    7c04:	880b883a 	mov	r5,r17
    7c08:	8009883a 	mov	r4,r16
    7c0c:	180f883a 	mov	r7,r3
    7c10:	100d883a 	mov	r6,r2
    7c14:	000ef040 	call	ef04 <__muldf3>
    7c18:	0011883a 	mov	r8,zero
    7c1c:	02500734 	movhi	r9,16412
    7c20:	180b883a 	mov	r5,r3
    7c24:	480f883a 	mov	r7,r9
    7c28:	1009883a 	mov	r4,r2
    7c2c:	400d883a 	mov	r6,r8
    7c30:	000ee900 	call	ee90 <__adddf3>
    7c34:	102d883a 	mov	r22,r2
    7c38:	00bf3034 	movhi	r2,64704
    7c3c:	10ef883a 	add	r23,r2,r3
    7c40:	d8800d17 	ldw	r2,52(sp)
    7c44:	d8c00e17 	ldw	r3,56(sp)
    7c48:	8029883a 	mov	r20,r16
    7c4c:	10bfffc4 	addi	r2,r2,-1
    7c50:	882b883a 	mov	r21,r17
    7c54:	d8800415 	stw	r2,16(sp)
    7c58:	d8c00315 	stw	r3,12(sp)
    7c5c:	003e8306 	br	766c <_dtoa_r+0xf4c>
    7c60:	d8800117 	ldw	r2,4(sp)
    7c64:	dc001117 	ldw	r16,68(sp)
    7c68:	dc801017 	ldw	r18,64(sp)
    7c6c:	00c00d84 	movi	r3,54
    7c70:	1887c83a 	sub	r3,r3,r2
    7c74:	003d6906 	br	721c <_dtoa_r+0xafc>
    7c78:	01800044 	movi	r6,1
    7c7c:	3021883a 	mov	r16,r6
    7c80:	d9800f15 	stw	r6,60(sp)
    7c84:	d9802615 	stw	r6,152(sp)
    7c88:	d9800e15 	stw	r6,56(sp)
    7c8c:	003b9306 	br	6adc <_dtoa_r+0x3bc>
    7c90:	b021883a 	mov	r16,r22
    7c94:	dd800f15 	stw	r22,60(sp)
    7c98:	003b9006 	br	6adc <_dtoa_r+0x3bc>
    7c9c:	103e221e 	bne	r2,zero,7528 <_dtoa_r+0xe08>
    7ca0:	b880004c 	andi	r2,r23,1
    7ca4:	1005003a 	cmpeq	r2,r2,zero
    7ca8:	103e1f1e 	bne	r2,zero,7528 <_dtoa_r+0xe08>
    7cac:	003e1b06 	br	751c <_dtoa_r+0xdfc>
    7cb0:	d9001617 	ldw	r4,88(sp)
    7cb4:	980b883a 	mov	r5,r19
    7cb8:	01800284 	movi	r6,10
    7cbc:	000f883a 	mov	r7,zero
    7cc0:	0009cd00 	call	9cd0 <__multadd>
    7cc4:	d8c00e17 	ldw	r3,56(sp)
    7cc8:	1027883a 	mov	r19,r2
    7ccc:	d8c00f15 	stw	r3,60(sp)
    7cd0:	003cd306 	br	7020 <_dtoa_r+0x900>

00007cd4 <_fclose_r>:
    7cd4:	defffc04 	addi	sp,sp,-16
    7cd8:	dc400115 	stw	r17,4(sp)
    7cdc:	dc000015 	stw	r16,0(sp)
    7ce0:	dfc00315 	stw	ra,12(sp)
    7ce4:	dc800215 	stw	r18,8(sp)
    7ce8:	2821883a 	mov	r16,r5
    7cec:	2023883a 	mov	r17,r4
    7cf0:	28002926 	beq	r5,zero,7d98 <_fclose_r+0xc4>
    7cf4:	00014f80 	call	14f8 <__sfp_lock_acquire>
    7cf8:	88000226 	beq	r17,zero,7d04 <_fclose_r+0x30>
    7cfc:	88800e17 	ldw	r2,56(r17)
    7d00:	10002d26 	beq	r2,zero,7db8 <_fclose_r+0xe4>
    7d04:	8080030f 	ldh	r2,12(r16)
    7d08:	10002226 	beq	r2,zero,7d94 <_fclose_r+0xc0>
    7d0c:	8809883a 	mov	r4,r17
    7d10:	800b883a 	mov	r5,r16
    7d14:	0007df80 	call	7df8 <_fflush_r>
    7d18:	1025883a 	mov	r18,r2
    7d1c:	80800b17 	ldw	r2,44(r16)
    7d20:	10000426 	beq	r2,zero,7d34 <_fclose_r+0x60>
    7d24:	81400717 	ldw	r5,28(r16)
    7d28:	8809883a 	mov	r4,r17
    7d2c:	103ee83a 	callr	r2
    7d30:	10002a16 	blt	r2,zero,7ddc <_fclose_r+0x108>
    7d34:	8080030b 	ldhu	r2,12(r16)
    7d38:	1080200c 	andi	r2,r2,128
    7d3c:	1000231e 	bne	r2,zero,7dcc <_fclose_r+0xf8>
    7d40:	81400c17 	ldw	r5,48(r16)
    7d44:	28000526 	beq	r5,zero,7d5c <_fclose_r+0x88>
    7d48:	80801004 	addi	r2,r16,64
    7d4c:	28800226 	beq	r5,r2,7d58 <_fclose_r+0x84>
    7d50:	8809883a 	mov	r4,r17
    7d54:	00083900 	call	8390 <_free_r>
    7d58:	80000c15 	stw	zero,48(r16)
    7d5c:	81401117 	ldw	r5,68(r16)
    7d60:	28000326 	beq	r5,zero,7d70 <_fclose_r+0x9c>
    7d64:	8809883a 	mov	r4,r17
    7d68:	00083900 	call	8390 <_free_r>
    7d6c:	80001115 	stw	zero,68(r16)
    7d70:	8000030d 	sth	zero,12(r16)
    7d74:	00014fc0 	call	14fc <__sfp_lock_release>
    7d78:	9005883a 	mov	r2,r18
    7d7c:	dfc00317 	ldw	ra,12(sp)
    7d80:	dc800217 	ldw	r18,8(sp)
    7d84:	dc400117 	ldw	r17,4(sp)
    7d88:	dc000017 	ldw	r16,0(sp)
    7d8c:	dec00404 	addi	sp,sp,16
    7d90:	f800283a 	ret
    7d94:	00014fc0 	call	14fc <__sfp_lock_release>
    7d98:	0025883a 	mov	r18,zero
    7d9c:	9005883a 	mov	r2,r18
    7da0:	dfc00317 	ldw	ra,12(sp)
    7da4:	dc800217 	ldw	r18,8(sp)
    7da8:	dc400117 	ldw	r17,4(sp)
    7dac:	dc000017 	ldw	r16,0(sp)
    7db0:	dec00404 	addi	sp,sp,16
    7db4:	f800283a 	ret
    7db8:	8809883a 	mov	r4,r17
    7dbc:	00015080 	call	1508 <__sinit>
    7dc0:	8080030f 	ldh	r2,12(r16)
    7dc4:	103fd11e 	bne	r2,zero,7d0c <_fclose_r+0x38>
    7dc8:	003ff206 	br	7d94 <_fclose_r+0xc0>
    7dcc:	81400417 	ldw	r5,16(r16)
    7dd0:	8809883a 	mov	r4,r17
    7dd4:	00083900 	call	8390 <_free_r>
    7dd8:	003fd906 	br	7d40 <_fclose_r+0x6c>
    7ddc:	04bfffc4 	movi	r18,-1
    7de0:	003fd406 	br	7d34 <_fclose_r+0x60>

00007de4 <fclose>:
    7de4:	00800074 	movhi	r2,1
    7de8:	1094d804 	addi	r2,r2,21344
    7dec:	200b883a 	mov	r5,r4
    7df0:	11000017 	ldw	r4,0(r2)
    7df4:	0007cd41 	jmpi	7cd4 <_fclose_r>

00007df8 <_fflush_r>:
    7df8:	defffb04 	addi	sp,sp,-20
    7dfc:	dcc00315 	stw	r19,12(sp)
    7e00:	dc800215 	stw	r18,8(sp)
    7e04:	dfc00415 	stw	ra,16(sp)
    7e08:	dc400115 	stw	r17,4(sp)
    7e0c:	dc000015 	stw	r16,0(sp)
    7e10:	2027883a 	mov	r19,r4
    7e14:	2825883a 	mov	r18,r5
    7e18:	20000226 	beq	r4,zero,7e24 <_fflush_r+0x2c>
    7e1c:	20800e17 	ldw	r2,56(r4)
    7e20:	10005626 	beq	r2,zero,7f7c <_fflush_r+0x184>
    7e24:	9100030b 	ldhu	r4,12(r18)
    7e28:	20ffffcc 	andi	r3,r4,65535
    7e2c:	18e0001c 	xori	r3,r3,32768
    7e30:	18e00004 	addi	r3,r3,-32768
    7e34:	1880020c 	andi	r2,r3,8
    7e38:	1000261e 	bne	r2,zero,7ed4 <_fflush_r+0xdc>
    7e3c:	90c00117 	ldw	r3,4(r18)
    7e40:	20820014 	ori	r2,r4,2048
    7e44:	9080030d 	sth	r2,12(r18)
    7e48:	1009883a 	mov	r4,r2
    7e4c:	00c0400e 	bge	zero,r3,7f50 <_fflush_r+0x158>
    7e50:	92000a17 	ldw	r8,40(r18)
    7e54:	40004026 	beq	r8,zero,7f58 <_fflush_r+0x160>
    7e58:	2084000c 	andi	r2,r4,4096
    7e5c:	10005326 	beq	r2,zero,7fac <_fflush_r+0x1b4>
    7e60:	94001417 	ldw	r16,80(r18)
    7e64:	9080030b 	ldhu	r2,12(r18)
    7e68:	1080010c 	andi	r2,r2,4
    7e6c:	1000481e 	bne	r2,zero,7f90 <_fflush_r+0x198>
    7e70:	91400717 	ldw	r5,28(r18)
    7e74:	9809883a 	mov	r4,r19
    7e78:	800d883a 	mov	r6,r16
    7e7c:	000f883a 	mov	r7,zero
    7e80:	403ee83a 	callr	r8
    7e84:	8080261e 	bne	r16,r2,7f20 <_fflush_r+0x128>
    7e88:	9080030b 	ldhu	r2,12(r18)
    7e8c:	91000417 	ldw	r4,16(r18)
    7e90:	90000115 	stw	zero,4(r18)
    7e94:	10bdffcc 	andi	r2,r2,63487
    7e98:	10ffffcc 	andi	r3,r2,65535
    7e9c:	18c4000c 	andi	r3,r3,4096
    7ea0:	9080030d 	sth	r2,12(r18)
    7ea4:	91000015 	stw	r4,0(r18)
    7ea8:	18002b26 	beq	r3,zero,7f58 <_fflush_r+0x160>
    7eac:	0007883a 	mov	r3,zero
    7eb0:	1805883a 	mov	r2,r3
    7eb4:	94001415 	stw	r16,80(r18)
    7eb8:	dfc00417 	ldw	ra,16(sp)
    7ebc:	dcc00317 	ldw	r19,12(sp)
    7ec0:	dc800217 	ldw	r18,8(sp)
    7ec4:	dc400117 	ldw	r17,4(sp)
    7ec8:	dc000017 	ldw	r16,0(sp)
    7ecc:	dec00504 	addi	sp,sp,20
    7ed0:	f800283a 	ret
    7ed4:	94400417 	ldw	r17,16(r18)
    7ed8:	88001f26 	beq	r17,zero,7f58 <_fflush_r+0x160>
    7edc:	90800017 	ldw	r2,0(r18)
    7ee0:	18c000cc 	andi	r3,r3,3
    7ee4:	94400015 	stw	r17,0(r18)
    7ee8:	1461c83a 	sub	r16,r2,r17
    7eec:	18002526 	beq	r3,zero,7f84 <_fflush_r+0x18c>
    7ef0:	0005883a 	mov	r2,zero
    7ef4:	90800215 	stw	r2,8(r18)
    7ef8:	0400170e 	bge	zero,r16,7f58 <_fflush_r+0x160>
    7efc:	90c00917 	ldw	r3,36(r18)
    7f00:	91400717 	ldw	r5,28(r18)
    7f04:	880d883a 	mov	r6,r17
    7f08:	800f883a 	mov	r7,r16
    7f0c:	9809883a 	mov	r4,r19
    7f10:	183ee83a 	callr	r3
    7f14:	88a3883a 	add	r17,r17,r2
    7f18:	80a1c83a 	sub	r16,r16,r2
    7f1c:	00bff616 	blt	zero,r2,7ef8 <_fflush_r+0x100>
    7f20:	9080030b 	ldhu	r2,12(r18)
    7f24:	00ffffc4 	movi	r3,-1
    7f28:	10801014 	ori	r2,r2,64
    7f2c:	9080030d 	sth	r2,12(r18)
    7f30:	1805883a 	mov	r2,r3
    7f34:	dfc00417 	ldw	ra,16(sp)
    7f38:	dcc00317 	ldw	r19,12(sp)
    7f3c:	dc800217 	ldw	r18,8(sp)
    7f40:	dc400117 	ldw	r17,4(sp)
    7f44:	dc000017 	ldw	r16,0(sp)
    7f48:	dec00504 	addi	sp,sp,20
    7f4c:	f800283a 	ret
    7f50:	90800f17 	ldw	r2,60(r18)
    7f54:	00bfbe16 	blt	zero,r2,7e50 <_fflush_r+0x58>
    7f58:	0007883a 	mov	r3,zero
    7f5c:	1805883a 	mov	r2,r3
    7f60:	dfc00417 	ldw	ra,16(sp)
    7f64:	dcc00317 	ldw	r19,12(sp)
    7f68:	dc800217 	ldw	r18,8(sp)
    7f6c:	dc400117 	ldw	r17,4(sp)
    7f70:	dc000017 	ldw	r16,0(sp)
    7f74:	dec00504 	addi	sp,sp,20
    7f78:	f800283a 	ret
    7f7c:	00015080 	call	1508 <__sinit>
    7f80:	003fa806 	br	7e24 <_fflush_r+0x2c>
    7f84:	90800517 	ldw	r2,20(r18)
    7f88:	90800215 	stw	r2,8(r18)
    7f8c:	003fda06 	br	7ef8 <_fflush_r+0x100>
    7f90:	90800117 	ldw	r2,4(r18)
    7f94:	90c00c17 	ldw	r3,48(r18)
    7f98:	80a1c83a 	sub	r16,r16,r2
    7f9c:	183fb426 	beq	r3,zero,7e70 <_fflush_r+0x78>
    7fa0:	90800f17 	ldw	r2,60(r18)
    7fa4:	80a1c83a 	sub	r16,r16,r2
    7fa8:	003fb106 	br	7e70 <_fflush_r+0x78>
    7fac:	91400717 	ldw	r5,28(r18)
    7fb0:	9809883a 	mov	r4,r19
    7fb4:	000d883a 	mov	r6,zero
    7fb8:	01c00044 	movi	r7,1
    7fbc:	403ee83a 	callr	r8
    7fc0:	1021883a 	mov	r16,r2
    7fc4:	00bfffc4 	movi	r2,-1
    7fc8:	80800226 	beq	r16,r2,7fd4 <_fflush_r+0x1dc>
    7fcc:	92000a17 	ldw	r8,40(r18)
    7fd0:	003fa406 	br	7e64 <_fflush_r+0x6c>
    7fd4:	98c00017 	ldw	r3,0(r19)
    7fd8:	00800744 	movi	r2,29
    7fdc:	18bfde26 	beq	r3,r2,7f58 <_fflush_r+0x160>
    7fe0:	9080030b 	ldhu	r2,12(r18)
    7fe4:	8007883a 	mov	r3,r16
    7fe8:	10801014 	ori	r2,r2,64
    7fec:	9080030d 	sth	r2,12(r18)
    7ff0:	003fcf06 	br	7f30 <_fflush_r+0x138>

00007ff4 <fflush>:
    7ff4:	01400034 	movhi	r5,0
    7ff8:	295f7e04 	addi	r5,r5,32248
    7ffc:	2007883a 	mov	r3,r4
    8000:	20000526 	beq	r4,zero,8018 <fflush+0x24>
    8004:	00800074 	movhi	r2,1
    8008:	1094d804 	addi	r2,r2,21344
    800c:	11000017 	ldw	r4,0(r2)
    8010:	180b883a 	mov	r5,r3
    8014:	0007df81 	jmpi	7df8 <_fflush_r>
    8018:	00800074 	movhi	r2,1
    801c:	1094d904 	addi	r2,r2,21348
    8020:	11000017 	ldw	r4,0(r2)
    8024:	00017601 	jmpi	1760 <_fwalk_reent>

00008028 <_fread_r>:
    8028:	defff504 	addi	sp,sp,-44
    802c:	ddc00815 	stw	r23,32(sp)
    8030:	39af383a 	mul	r23,r7,r6
    8034:	df000915 	stw	fp,36(sp)
    8038:	dd800715 	stw	r22,28(sp)
    803c:	dcc00415 	stw	r19,16(sp)
    8040:	dc000115 	stw	r16,4(sp)
    8044:	dfc00a15 	stw	ra,40(sp)
    8048:	dd400615 	stw	r21,24(sp)
    804c:	dd000515 	stw	r20,20(sp)
    8050:	dc800315 	stw	r18,12(sp)
    8054:	dc400215 	stw	r17,8(sp)
    8058:	d9800015 	stw	r6,0(sp)
    805c:	3839883a 	mov	fp,r7
    8060:	2821883a 	mov	r16,r5
    8064:	202d883a 	mov	r22,r4
    8068:	dcc00b17 	ldw	r19,44(sp)
    806c:	b8005926 	beq	r23,zero,81d4 <_fread_r+0x1ac>
    8070:	20000226 	beq	r4,zero,807c <_fread_r+0x54>
    8074:	20800e17 	ldw	r2,56(r4)
    8078:	10005826 	beq	r2,zero,81dc <_fread_r+0x1b4>
    807c:	9c400117 	ldw	r17,4(r19)
    8080:	88005916 	blt	r17,zero,81e8 <_fread_r+0x1c0>
    8084:	9880030b 	ldhu	r2,12(r19)
    8088:	8029883a 	mov	r20,r16
    808c:	1080008c 	andi	r2,r2,2
    8090:	1000221e 	bne	r2,zero,811c <_fread_r+0xf4>
    8094:	b825883a 	mov	r18,r23
    8098:	00000106 	br	80a0 <_fread_r+0x78>
    809c:	9c400117 	ldw	r17,4(r19)
    80a0:	a009883a 	mov	r4,r20
    80a4:	880d883a 	mov	r6,r17
    80a8:	8c80542e 	bgeu	r17,r18,81fc <_fread_r+0x1d4>
    80ac:	99400017 	ldw	r5,0(r19)
    80b0:	a469883a 	add	r20,r20,r17
    80b4:	9465c83a 	sub	r18,r18,r17
    80b8:	00021040 	call	2104 <memcpy>
    80bc:	98800017 	ldw	r2,0(r19)
    80c0:	b009883a 	mov	r4,r22
    80c4:	980b883a 	mov	r5,r19
    80c8:	1461883a 	add	r16,r2,r17
    80cc:	9c000015 	stw	r16,0(r19)
    80d0:	000238c0 	call	238c <__srefill_r>
    80d4:	103ff126 	beq	r2,zero,809c <_fread_r+0x74>
    80d8:	d9400017 	ldw	r5,0(sp)
    80dc:	bc89c83a 	sub	r4,r23,r18
    80e0:	00013240 	call	1324 <__udivsi3>
    80e4:	1039883a 	mov	fp,r2
    80e8:	e005883a 	mov	r2,fp
    80ec:	dfc00a17 	ldw	ra,40(sp)
    80f0:	df000917 	ldw	fp,36(sp)
    80f4:	ddc00817 	ldw	r23,32(sp)
    80f8:	dd800717 	ldw	r22,28(sp)
    80fc:	dd400617 	ldw	r21,24(sp)
    8100:	dd000517 	ldw	r20,20(sp)
    8104:	dcc00417 	ldw	r19,16(sp)
    8108:	dc800317 	ldw	r18,12(sp)
    810c:	dc400217 	ldw	r17,8(sp)
    8110:	dc000117 	ldw	r16,4(sp)
    8114:	dec00b04 	addi	sp,sp,44
    8118:	f800283a 	ret
    811c:	b825883a 	mov	r18,r23
    8120:	8dc03436 	bltu	r17,r23,81f4 <_fread_r+0x1cc>
    8124:	99400017 	ldw	r5,0(r19)
    8128:	a009883a 	mov	r4,r20
    812c:	900d883a 	mov	r6,r18
    8130:	00021040 	call	2104 <memcpy>
    8134:	9c000017 	ldw	r16,0(r19)
    8138:	98800117 	ldw	r2,4(r19)
    813c:	99400c17 	ldw	r5,48(r19)
    8140:	84a1883a 	add	r16,r16,r18
    8144:	14a3c83a 	sub	r17,r2,r18
    8148:	a4ab883a 	add	r21,r20,r18
    814c:	9c400115 	stw	r17,4(r19)
    8150:	9c000015 	stw	r16,0(r19)
    8154:	bca9c83a 	sub	r20,r23,r18
    8158:	28000826 	beq	r5,zero,817c <_fread_r+0x154>
    815c:	a03fe226 	beq	r20,zero,80e8 <_fread_r+0xc0>
    8160:	98801004 	addi	r2,r19,64
    8164:	28800326 	beq	r5,r2,8174 <_fread_r+0x14c>
    8168:	b009883a 	mov	r4,r22
    816c:	00083900 	call	8390 <_free_r>
    8170:	9c000017 	ldw	r16,0(r19)
    8174:	98000c15 	stw	zero,48(r19)
    8178:	00000106 	br	8180 <_fread_r+0x158>
    817c:	a03fda26 	beq	r20,zero,80e8 <_fread_r+0xc0>
    8180:	9c800417 	ldw	r18,16(r19)
    8184:	9c400517 	ldw	r17,20(r19)
    8188:	9d400015 	stw	r21,0(r19)
    818c:	9d400415 	stw	r21,16(r19)
    8190:	9d000515 	stw	r20,20(r19)
    8194:	b009883a 	mov	r4,r22
    8198:	980b883a 	mov	r5,r19
    819c:	000238c0 	call	238c <__srefill_r>
    81a0:	98c00117 	ldw	r3,4(r19)
    81a4:	9c800415 	stw	r18,16(r19)
    81a8:	9c400515 	stw	r17,20(r19)
    81ac:	a8eb883a 	add	r21,r21,r3
    81b0:	9c000015 	stw	r16,0(r19)
    81b4:	a0e9c83a 	sub	r20,r20,r3
    81b8:	98000115 	stw	zero,4(r19)
    81bc:	103fef26 	beq	r2,zero,817c <_fread_r+0x154>
    81c0:	d9400017 	ldw	r5,0(sp)
    81c4:	bd09c83a 	sub	r4,r23,r20
    81c8:	00013240 	call	1324 <__udivsi3>
    81cc:	1039883a 	mov	fp,r2
    81d0:	003fc506 	br	80e8 <_fread_r+0xc0>
    81d4:	0039883a 	mov	fp,zero
    81d8:	003fc306 	br	80e8 <_fread_r+0xc0>
    81dc:	00015080 	call	1508 <__sinit>
    81e0:	9c400117 	ldw	r17,4(r19)
    81e4:	883fa70e 	bge	r17,zero,8084 <_fread_r+0x5c>
    81e8:	0023883a 	mov	r17,zero
    81ec:	98000115 	stw	zero,4(r19)
    81f0:	003fa406 	br	8084 <_fread_r+0x5c>
    81f4:	8825883a 	mov	r18,r17
    81f8:	003fca06 	br	8124 <_fread_r+0xfc>
    81fc:	99400017 	ldw	r5,0(r19)
    8200:	900d883a 	mov	r6,r18
    8204:	00021040 	call	2104 <memcpy>
    8208:	98c00117 	ldw	r3,4(r19)
    820c:	98800017 	ldw	r2,0(r19)
    8210:	1c87c83a 	sub	r3,r3,r18
    8214:	1485883a 	add	r2,r2,r18
    8218:	98800015 	stw	r2,0(r19)
    821c:	98c00115 	stw	r3,4(r19)
    8220:	003fb106 	br	80e8 <_fread_r+0xc0>

00008224 <fread>:
    8224:	00800074 	movhi	r2,1
    8228:	1094d804 	addi	r2,r2,21344
    822c:	2017883a 	mov	r11,r4
    8230:	11000017 	ldw	r4,0(r2)
    8234:	defffe04 	addi	sp,sp,-8
    8238:	3013883a 	mov	r9,r6
    823c:	2805883a 	mov	r2,r5
    8240:	d9c00015 	stw	r7,0(sp)
    8244:	580b883a 	mov	r5,r11
    8248:	100d883a 	mov	r6,r2
    824c:	480f883a 	mov	r7,r9
    8250:	dfc00115 	stw	ra,4(sp)
    8254:	00080280 	call	8028 <_fread_r>
    8258:	dfc00117 	ldw	ra,4(sp)
    825c:	dec00204 	addi	sp,sp,8
    8260:	f800283a 	ret

00008264 <_malloc_trim_r>:
    8264:	defffb04 	addi	sp,sp,-20
    8268:	dcc00315 	stw	r19,12(sp)
    826c:	04c00074 	movhi	r19,1
    8270:	9ccf4604 	addi	r19,r19,15640
    8274:	dc800215 	stw	r18,8(sp)
    8278:	dc400115 	stw	r17,4(sp)
    827c:	dc000015 	stw	r16,0(sp)
    8280:	2823883a 	mov	r17,r5
    8284:	2025883a 	mov	r18,r4
    8288:	dfc00415 	stw	ra,16(sp)
    828c:	0010b3c0 	call	10b3c <__malloc_lock>
    8290:	98800217 	ldw	r2,8(r19)
    8294:	9009883a 	mov	r4,r18
    8298:	000b883a 	mov	r5,zero
    829c:	10c00117 	ldw	r3,4(r2)
    82a0:	00bfff04 	movi	r2,-4
    82a4:	18a0703a 	and	r16,r3,r2
    82a8:	8463c83a 	sub	r17,r16,r17
    82ac:	8c43fbc4 	addi	r17,r17,4079
    82b0:	8822d33a 	srli	r17,r17,12
    82b4:	0083ffc4 	movi	r2,4095
    82b8:	8c7fffc4 	addi	r17,r17,-1
    82bc:	8822933a 	slli	r17,r17,12
    82c0:	1440060e 	bge	r2,r17,82dc <_malloc_trim_r+0x78>
    82c4:	000256c0 	call	256c <_sbrk_r>
    82c8:	98c00217 	ldw	r3,8(r19)
    82cc:	9009883a 	mov	r4,r18
    82d0:	044bc83a 	sub	r5,zero,r17
    82d4:	80c7883a 	add	r3,r16,r3
    82d8:	10c00926 	beq	r2,r3,8300 <_malloc_trim_r+0x9c>
    82dc:	0010b5c0 	call	10b5c <__malloc_unlock>
    82e0:	0005883a 	mov	r2,zero
    82e4:	dfc00417 	ldw	ra,16(sp)
    82e8:	dcc00317 	ldw	r19,12(sp)
    82ec:	dc800217 	ldw	r18,8(sp)
    82f0:	dc400117 	ldw	r17,4(sp)
    82f4:	dc000017 	ldw	r16,0(sp)
    82f8:	dec00504 	addi	sp,sp,20
    82fc:	f800283a 	ret
    8300:	9009883a 	mov	r4,r18
    8304:	000256c0 	call	256c <_sbrk_r>
    8308:	844dc83a 	sub	r6,r16,r17
    830c:	00ffffc4 	movi	r3,-1
    8310:	9009883a 	mov	r4,r18
    8314:	000b883a 	mov	r5,zero
    8318:	01c00074 	movhi	r7,1
    831c:	39dbab04 	addi	r7,r7,28332
    8320:	31800054 	ori	r6,r6,1
    8324:	10c00926 	beq	r2,r3,834c <_malloc_trim_r+0xe8>
    8328:	38800017 	ldw	r2,0(r7)
    832c:	98c00217 	ldw	r3,8(r19)
    8330:	9009883a 	mov	r4,r18
    8334:	1445c83a 	sub	r2,r2,r17
    8338:	38800015 	stw	r2,0(r7)
    833c:	19800115 	stw	r6,4(r3)
    8340:	0010b5c0 	call	10b5c <__malloc_unlock>
    8344:	00800044 	movi	r2,1
    8348:	003fe606 	br	82e4 <_malloc_trim_r+0x80>
    834c:	000256c0 	call	256c <_sbrk_r>
    8350:	99800217 	ldw	r6,8(r19)
    8354:	100f883a 	mov	r7,r2
    8358:	9009883a 	mov	r4,r18
    835c:	1187c83a 	sub	r3,r2,r6
    8360:	008003c4 	movi	r2,15
    8364:	19400054 	ori	r5,r3,1
    8368:	10ffdc0e 	bge	r2,r3,82dc <_malloc_trim_r+0x78>
    836c:	00800074 	movhi	r2,1
    8370:	1094db04 	addi	r2,r2,21356
    8374:	10c00017 	ldw	r3,0(r2)
    8378:	00800074 	movhi	r2,1
    837c:	109bab04 	addi	r2,r2,28332
    8380:	31400115 	stw	r5,4(r6)
    8384:	38c7c83a 	sub	r3,r7,r3
    8388:	10c00015 	stw	r3,0(r2)
    838c:	003fd306 	br	82dc <_malloc_trim_r+0x78>

00008390 <_free_r>:
    8390:	defffd04 	addi	sp,sp,-12
    8394:	dc400115 	stw	r17,4(sp)
    8398:	dc000015 	stw	r16,0(sp)
    839c:	dfc00215 	stw	ra,8(sp)
    83a0:	2821883a 	mov	r16,r5
    83a4:	2023883a 	mov	r17,r4
    83a8:	28005a26 	beq	r5,zero,8514 <_free_r+0x184>
    83ac:	0010b3c0 	call	10b3c <__malloc_lock>
    83b0:	823ffe04 	addi	r8,r16,-8
    83b4:	41400117 	ldw	r5,4(r8)
    83b8:	00bfff84 	movi	r2,-2
    83bc:	02800074 	movhi	r10,1
    83c0:	528f4604 	addi	r10,r10,15640
    83c4:	288e703a 	and	r7,r5,r2
    83c8:	41cd883a 	add	r6,r8,r7
    83cc:	30c00117 	ldw	r3,4(r6)
    83d0:	51000217 	ldw	r4,8(r10)
    83d4:	00bfff04 	movi	r2,-4
    83d8:	1892703a 	and	r9,r3,r2
    83dc:	5017883a 	mov	r11,r10
    83e0:	31006726 	beq	r6,r4,8580 <_free_r+0x1f0>
    83e4:	2880004c 	andi	r2,r5,1
    83e8:	1005003a 	cmpeq	r2,r2,zero
    83ec:	32400115 	stw	r9,4(r6)
    83f0:	10001a1e 	bne	r2,zero,845c <_free_r+0xcc>
    83f4:	000b883a 	mov	r5,zero
    83f8:	3247883a 	add	r3,r6,r9
    83fc:	18800117 	ldw	r2,4(r3)
    8400:	1080004c 	andi	r2,r2,1
    8404:	1000231e 	bne	r2,zero,8494 <_free_r+0x104>
    8408:	280ac03a 	cmpne	r5,r5,zero
    840c:	3a4f883a 	add	r7,r7,r9
    8410:	2800451e 	bne	r5,zero,8528 <_free_r+0x198>
    8414:	31000217 	ldw	r4,8(r6)
    8418:	00800074 	movhi	r2,1
    841c:	108f4804 	addi	r2,r2,15648
    8420:	20807b26 	beq	r4,r2,8610 <_free_r+0x280>
    8424:	30800317 	ldw	r2,12(r6)
    8428:	3a07883a 	add	r3,r7,r8
    842c:	19c00015 	stw	r7,0(r3)
    8430:	11000215 	stw	r4,8(r2)
    8434:	20800315 	stw	r2,12(r4)
    8438:	38800054 	ori	r2,r7,1
    843c:	40800115 	stw	r2,4(r8)
    8440:	28001a26 	beq	r5,zero,84ac <_free_r+0x11c>
    8444:	8809883a 	mov	r4,r17
    8448:	dfc00217 	ldw	ra,8(sp)
    844c:	dc400117 	ldw	r17,4(sp)
    8450:	dc000017 	ldw	r16,0(sp)
    8454:	dec00304 	addi	sp,sp,12
    8458:	0010b5c1 	jmpi	10b5c <__malloc_unlock>
    845c:	80bffe17 	ldw	r2,-8(r16)
    8460:	50c00204 	addi	r3,r10,8
    8464:	4091c83a 	sub	r8,r8,r2
    8468:	41000217 	ldw	r4,8(r8)
    846c:	388f883a 	add	r7,r7,r2
    8470:	20c06126 	beq	r4,r3,85f8 <_free_r+0x268>
    8474:	40800317 	ldw	r2,12(r8)
    8478:	3247883a 	add	r3,r6,r9
    847c:	000b883a 	mov	r5,zero
    8480:	11000215 	stw	r4,8(r2)
    8484:	20800315 	stw	r2,12(r4)
    8488:	18800117 	ldw	r2,4(r3)
    848c:	1080004c 	andi	r2,r2,1
    8490:	103fdd26 	beq	r2,zero,8408 <_free_r+0x78>
    8494:	38800054 	ori	r2,r7,1
    8498:	3a07883a 	add	r3,r7,r8
    849c:	280ac03a 	cmpne	r5,r5,zero
    84a0:	40800115 	stw	r2,4(r8)
    84a4:	19c00015 	stw	r7,0(r3)
    84a8:	283fe61e 	bne	r5,zero,8444 <_free_r+0xb4>
    84ac:	00807fc4 	movi	r2,511
    84b0:	11c01f2e 	bgeu	r2,r7,8530 <_free_r+0x1a0>
    84b4:	3806d27a 	srli	r3,r7,9
    84b8:	1800481e 	bne	r3,zero,85dc <_free_r+0x24c>
    84bc:	3804d0fa 	srli	r2,r7,3
    84c0:	100690fa 	slli	r3,r2,3
    84c4:	1acd883a 	add	r6,r3,r11
    84c8:	31400217 	ldw	r5,8(r6)
    84cc:	31405926 	beq	r6,r5,8634 <_free_r+0x2a4>
    84d0:	28800117 	ldw	r2,4(r5)
    84d4:	00ffff04 	movi	r3,-4
    84d8:	10c4703a 	and	r2,r2,r3
    84dc:	3880022e 	bgeu	r7,r2,84e8 <_free_r+0x158>
    84e0:	29400217 	ldw	r5,8(r5)
    84e4:	317ffa1e 	bne	r6,r5,84d0 <_free_r+0x140>
    84e8:	29800317 	ldw	r6,12(r5)
    84ec:	41800315 	stw	r6,12(r8)
    84f0:	41400215 	stw	r5,8(r8)
    84f4:	8809883a 	mov	r4,r17
    84f8:	2a000315 	stw	r8,12(r5)
    84fc:	32000215 	stw	r8,8(r6)
    8500:	dfc00217 	ldw	ra,8(sp)
    8504:	dc400117 	ldw	r17,4(sp)
    8508:	dc000017 	ldw	r16,0(sp)
    850c:	dec00304 	addi	sp,sp,12
    8510:	0010b5c1 	jmpi	10b5c <__malloc_unlock>
    8514:	dfc00217 	ldw	ra,8(sp)
    8518:	dc400117 	ldw	r17,4(sp)
    851c:	dc000017 	ldw	r16,0(sp)
    8520:	dec00304 	addi	sp,sp,12
    8524:	f800283a 	ret
    8528:	31000217 	ldw	r4,8(r6)
    852c:	003fbd06 	br	8424 <_free_r+0x94>
    8530:	3806d0fa 	srli	r3,r7,3
    8534:	00800044 	movi	r2,1
    8538:	51400117 	ldw	r5,4(r10)
    853c:	180890fa 	slli	r4,r3,3
    8540:	1807d0ba 	srai	r3,r3,2
    8544:	22c9883a 	add	r4,r4,r11
    8548:	21800217 	ldw	r6,8(r4)
    854c:	10c4983a 	sll	r2,r2,r3
    8550:	41000315 	stw	r4,12(r8)
    8554:	41800215 	stw	r6,8(r8)
    8558:	288ab03a 	or	r5,r5,r2
    855c:	22000215 	stw	r8,8(r4)
    8560:	8809883a 	mov	r4,r17
    8564:	51400115 	stw	r5,4(r10)
    8568:	32000315 	stw	r8,12(r6)
    856c:	dfc00217 	ldw	ra,8(sp)
    8570:	dc400117 	ldw	r17,4(sp)
    8574:	dc000017 	ldw	r16,0(sp)
    8578:	dec00304 	addi	sp,sp,12
    857c:	0010b5c1 	jmpi	10b5c <__malloc_unlock>
    8580:	2880004c 	andi	r2,r5,1
    8584:	3a4d883a 	add	r6,r7,r9
    8588:	1000071e 	bne	r2,zero,85a8 <_free_r+0x218>
    858c:	80bffe17 	ldw	r2,-8(r16)
    8590:	4091c83a 	sub	r8,r8,r2
    8594:	41000317 	ldw	r4,12(r8)
    8598:	40c00217 	ldw	r3,8(r8)
    859c:	308d883a 	add	r6,r6,r2
    85a0:	20c00215 	stw	r3,8(r4)
    85a4:	19000315 	stw	r4,12(r3)
    85a8:	00800074 	movhi	r2,1
    85ac:	1094da04 	addi	r2,r2,21352
    85b0:	11000017 	ldw	r4,0(r2)
    85b4:	30c00054 	ori	r3,r6,1
    85b8:	52000215 	stw	r8,8(r10)
    85bc:	40c00115 	stw	r3,4(r8)
    85c0:	313fa036 	bltu	r6,r4,8444 <_free_r+0xb4>
    85c4:	00800074 	movhi	r2,1
    85c8:	109b9904 	addi	r2,r2,28260
    85cc:	11400017 	ldw	r5,0(r2)
    85d0:	8809883a 	mov	r4,r17
    85d4:	00082640 	call	8264 <_malloc_trim_r>
    85d8:	003f9a06 	br	8444 <_free_r+0xb4>
    85dc:	00800104 	movi	r2,4
    85e0:	10c0072e 	bgeu	r2,r3,8600 <_free_r+0x270>
    85e4:	00800504 	movi	r2,20
    85e8:	10c01936 	bltu	r2,r3,8650 <_free_r+0x2c0>
    85ec:	188016c4 	addi	r2,r3,91
    85f0:	100690fa 	slli	r3,r2,3
    85f4:	003fb306 	br	84c4 <_free_r+0x134>
    85f8:	01400044 	movi	r5,1
    85fc:	003f7e06 	br	83f8 <_free_r+0x68>
    8600:	3804d1ba 	srli	r2,r7,6
    8604:	10800e04 	addi	r2,r2,56
    8608:	100690fa 	slli	r3,r2,3
    860c:	003fad06 	br	84c4 <_free_r+0x134>
    8610:	22000315 	stw	r8,12(r4)
    8614:	22000215 	stw	r8,8(r4)
    8618:	3a05883a 	add	r2,r7,r8
    861c:	38c00054 	ori	r3,r7,1
    8620:	11c00015 	stw	r7,0(r2)
    8624:	41000215 	stw	r4,8(r8)
    8628:	40c00115 	stw	r3,4(r8)
    862c:	41000315 	stw	r4,12(r8)
    8630:	003f8406 	br	8444 <_free_r+0xb4>
    8634:	1005d0ba 	srai	r2,r2,2
    8638:	00c00044 	movi	r3,1
    863c:	51000117 	ldw	r4,4(r10)
    8640:	1886983a 	sll	r3,r3,r2
    8644:	20c8b03a 	or	r4,r4,r3
    8648:	51000115 	stw	r4,4(r10)
    864c:	003fa706 	br	84ec <_free_r+0x15c>
    8650:	00801504 	movi	r2,84
    8654:	10c00436 	bltu	r2,r3,8668 <_free_r+0x2d8>
    8658:	3804d33a 	srli	r2,r7,12
    865c:	10801b84 	addi	r2,r2,110
    8660:	100690fa 	slli	r3,r2,3
    8664:	003f9706 	br	84c4 <_free_r+0x134>
    8668:	00805504 	movi	r2,340
    866c:	10c00436 	bltu	r2,r3,8680 <_free_r+0x2f0>
    8670:	3804d3fa 	srli	r2,r7,15
    8674:	10801dc4 	addi	r2,r2,119
    8678:	100690fa 	slli	r3,r2,3
    867c:	003f9106 	br	84c4 <_free_r+0x134>
    8680:	00815504 	movi	r2,1364
    8684:	10c0032e 	bgeu	r2,r3,8694 <_free_r+0x304>
    8688:	00801f84 	movi	r2,126
    868c:	00c0fc04 	movi	r3,1008
    8690:	003f8c06 	br	84c4 <_free_r+0x134>
    8694:	3804d4ba 	srli	r2,r7,18
    8698:	10801f04 	addi	r2,r2,124
    869c:	100690fa 	slli	r3,r2,3
    86a0:	003f8806 	br	84c4 <_free_r+0x134>

000086a4 <__sfvwrite_r>:
    86a4:	30800217 	ldw	r2,8(r6)
    86a8:	defff504 	addi	sp,sp,-44
    86ac:	df000915 	stw	fp,36(sp)
    86b0:	dd800715 	stw	r22,28(sp)
    86b4:	dc800315 	stw	r18,12(sp)
    86b8:	dfc00a15 	stw	ra,40(sp)
    86bc:	ddc00815 	stw	r23,32(sp)
    86c0:	dd400615 	stw	r21,24(sp)
    86c4:	dd000515 	stw	r20,20(sp)
    86c8:	dcc00415 	stw	r19,16(sp)
    86cc:	dc400215 	stw	r17,8(sp)
    86d0:	dc000115 	stw	r16,4(sp)
    86d4:	302d883a 	mov	r22,r6
    86d8:	2039883a 	mov	fp,r4
    86dc:	2825883a 	mov	r18,r5
    86e0:	10001c26 	beq	r2,zero,8754 <__sfvwrite_r+0xb0>
    86e4:	29c0030b 	ldhu	r7,12(r5)
    86e8:	3880020c 	andi	r2,r7,8
    86ec:	10002726 	beq	r2,zero,878c <__sfvwrite_r+0xe8>
    86f0:	28800417 	ldw	r2,16(r5)
    86f4:	10002526 	beq	r2,zero,878c <__sfvwrite_r+0xe8>
    86f8:	3880008c 	andi	r2,r7,2
    86fc:	b5400017 	ldw	r21,0(r22)
    8700:	10002826 	beq	r2,zero,87a4 <__sfvwrite_r+0x100>
    8704:	0021883a 	mov	r16,zero
    8708:	0023883a 	mov	r17,zero
    870c:	880d883a 	mov	r6,r17
    8710:	e009883a 	mov	r4,fp
    8714:	00810004 	movi	r2,1024
    8718:	80006e26 	beq	r16,zero,88d4 <__sfvwrite_r+0x230>
    871c:	800f883a 	mov	r7,r16
    8720:	91400717 	ldw	r5,28(r18)
    8724:	1400012e 	bgeu	r2,r16,872c <__sfvwrite_r+0x88>
    8728:	100f883a 	mov	r7,r2
    872c:	90c00917 	ldw	r3,36(r18)
    8730:	183ee83a 	callr	r3
    8734:	1007883a 	mov	r3,r2
    8738:	80a1c83a 	sub	r16,r16,r2
    873c:	88a3883a 	add	r17,r17,r2
    8740:	00806d0e 	bge	zero,r2,88f8 <__sfvwrite_r+0x254>
    8744:	b0800217 	ldw	r2,8(r22)
    8748:	10c5c83a 	sub	r2,r2,r3
    874c:	b0800215 	stw	r2,8(r22)
    8750:	103fee1e 	bne	r2,zero,870c <__sfvwrite_r+0x68>
    8754:	0009883a 	mov	r4,zero
    8758:	2005883a 	mov	r2,r4
    875c:	dfc00a17 	ldw	ra,40(sp)
    8760:	df000917 	ldw	fp,36(sp)
    8764:	ddc00817 	ldw	r23,32(sp)
    8768:	dd800717 	ldw	r22,28(sp)
    876c:	dd400617 	ldw	r21,24(sp)
    8770:	dd000517 	ldw	r20,20(sp)
    8774:	dcc00417 	ldw	r19,16(sp)
    8778:	dc800317 	ldw	r18,12(sp)
    877c:	dc400217 	ldw	r17,8(sp)
    8780:	dc000117 	ldw	r16,4(sp)
    8784:	dec00b04 	addi	sp,sp,44
    8788:	f800283a 	ret
    878c:	000635c0 	call	635c <__swsetup_r>
    8790:	1000e41e 	bne	r2,zero,8b24 <__sfvwrite_r+0x480>
    8794:	91c0030b 	ldhu	r7,12(r18)
    8798:	b5400017 	ldw	r21,0(r22)
    879c:	3880008c 	andi	r2,r7,2
    87a0:	103fd81e 	bne	r2,zero,8704 <__sfvwrite_r+0x60>
    87a4:	3880004c 	andi	r2,r7,1
    87a8:	1005003a 	cmpeq	r2,r2,zero
    87ac:	10005726 	beq	r2,zero,890c <__sfvwrite_r+0x268>
    87b0:	0029883a 	mov	r20,zero
    87b4:	002f883a 	mov	r23,zero
    87b8:	a0004226 	beq	r20,zero,88c4 <__sfvwrite_r+0x220>
    87bc:	3880800c 	andi	r2,r7,512
    87c0:	94000217 	ldw	r16,8(r18)
    87c4:	10008b26 	beq	r2,zero,89f4 <__sfvwrite_r+0x350>
    87c8:	800d883a 	mov	r6,r16
    87cc:	a400a536 	bltu	r20,r16,8a64 <__sfvwrite_r+0x3c0>
    87d0:	3881200c 	andi	r2,r7,1152
    87d4:	10002726 	beq	r2,zero,8874 <__sfvwrite_r+0x1d0>
    87d8:	90800517 	ldw	r2,20(r18)
    87dc:	92000417 	ldw	r8,16(r18)
    87e0:	91400017 	ldw	r5,0(r18)
    87e4:	1087883a 	add	r3,r2,r2
    87e8:	1887883a 	add	r3,r3,r2
    87ec:	1808d7fa 	srli	r4,r3,31
    87f0:	2a21c83a 	sub	r16,r5,r8
    87f4:	80800044 	addi	r2,r16,1
    87f8:	20c9883a 	add	r4,r4,r3
    87fc:	2027d07a 	srai	r19,r4,1
    8800:	a085883a 	add	r2,r20,r2
    8804:	980d883a 	mov	r6,r19
    8808:	9880022e 	bgeu	r19,r2,8814 <__sfvwrite_r+0x170>
    880c:	1027883a 	mov	r19,r2
    8810:	100d883a 	mov	r6,r2
    8814:	3881000c 	andi	r2,r7,1024
    8818:	1000b826 	beq	r2,zero,8afc <__sfvwrite_r+0x458>
    881c:	300b883a 	mov	r5,r6
    8820:	e009883a 	mov	r4,fp
    8824:	00018e00 	call	18e0 <_malloc_r>
    8828:	10003126 	beq	r2,zero,88f0 <__sfvwrite_r+0x24c>
    882c:	91400417 	ldw	r5,16(r18)
    8830:	1009883a 	mov	r4,r2
    8834:	800d883a 	mov	r6,r16
    8838:	1023883a 	mov	r17,r2
    883c:	00021040 	call	2104 <memcpy>
    8840:	90c0030b 	ldhu	r3,12(r18)
    8844:	00beffc4 	movi	r2,-1025
    8848:	1886703a 	and	r3,r3,r2
    884c:	18c02014 	ori	r3,r3,128
    8850:	90c0030d 	sth	r3,12(r18)
    8854:	9c07c83a 	sub	r3,r19,r16
    8858:	8c05883a 	add	r2,r17,r16
    885c:	a00d883a 	mov	r6,r20
    8860:	a021883a 	mov	r16,r20
    8864:	90800015 	stw	r2,0(r18)
    8868:	90c00215 	stw	r3,8(r18)
    886c:	94400415 	stw	r17,16(r18)
    8870:	94c00515 	stw	r19,20(r18)
    8874:	91000017 	ldw	r4,0(r18)
    8878:	b80b883a 	mov	r5,r23
    887c:	a023883a 	mov	r17,r20
    8880:	0008f3c0 	call	8f3c <memmove>
    8884:	90c00217 	ldw	r3,8(r18)
    8888:	90800017 	ldw	r2,0(r18)
    888c:	a027883a 	mov	r19,r20
    8890:	1c07c83a 	sub	r3,r3,r16
    8894:	1405883a 	add	r2,r2,r16
    8898:	90c00215 	stw	r3,8(r18)
    889c:	a021883a 	mov	r16,r20
    88a0:	90800015 	stw	r2,0(r18)
    88a4:	b0800217 	ldw	r2,8(r22)
    88a8:	1405c83a 	sub	r2,r2,r16
    88ac:	b0800215 	stw	r2,8(r22)
    88b0:	103fa826 	beq	r2,zero,8754 <__sfvwrite_r+0xb0>
    88b4:	a469c83a 	sub	r20,r20,r17
    88b8:	91c0030b 	ldhu	r7,12(r18)
    88bc:	bcef883a 	add	r23,r23,r19
    88c0:	a03fbe1e 	bne	r20,zero,87bc <__sfvwrite_r+0x118>
    88c4:	adc00017 	ldw	r23,0(r21)
    88c8:	ad000117 	ldw	r20,4(r21)
    88cc:	ad400204 	addi	r21,r21,8
    88d0:	003fb906 	br	87b8 <__sfvwrite_r+0x114>
    88d4:	ac400017 	ldw	r17,0(r21)
    88d8:	ac000117 	ldw	r16,4(r21)
    88dc:	ad400204 	addi	r21,r21,8
    88e0:	003f8a06 	br	870c <__sfvwrite_r+0x68>
    88e4:	91400417 	ldw	r5,16(r18)
    88e8:	e009883a 	mov	r4,fp
    88ec:	00083900 	call	8390 <_free_r>
    88f0:	00800304 	movi	r2,12
    88f4:	e0800015 	stw	r2,0(fp)
    88f8:	9080030b 	ldhu	r2,12(r18)
    88fc:	013fffc4 	movi	r4,-1
    8900:	10801014 	ori	r2,r2,64
    8904:	9080030d 	sth	r2,12(r18)
    8908:	003f9306 	br	8758 <__sfvwrite_r+0xb4>
    890c:	0027883a 	mov	r19,zero
    8910:	002f883a 	mov	r23,zero
    8914:	d8000015 	stw	zero,0(sp)
    8918:	0029883a 	mov	r20,zero
    891c:	98001e26 	beq	r19,zero,8998 <__sfvwrite_r+0x2f4>
    8920:	d8c00017 	ldw	r3,0(sp)
    8924:	1804c03a 	cmpne	r2,r3,zero
    8928:	10005e26 	beq	r2,zero,8aa4 <__sfvwrite_r+0x400>
    892c:	9821883a 	mov	r16,r19
    8930:	a4c0012e 	bgeu	r20,r19,8938 <__sfvwrite_r+0x294>
    8934:	a021883a 	mov	r16,r20
    8938:	91000017 	ldw	r4,0(r18)
    893c:	90800417 	ldw	r2,16(r18)
    8940:	91800217 	ldw	r6,8(r18)
    8944:	91c00517 	ldw	r7,20(r18)
    8948:	1100022e 	bgeu	r2,r4,8954 <__sfvwrite_r+0x2b0>
    894c:	31e3883a 	add	r17,r6,r7
    8950:	8c001616 	blt	r17,r16,89ac <__sfvwrite_r+0x308>
    8954:	81c03816 	blt	r16,r7,8a38 <__sfvwrite_r+0x394>
    8958:	90c00917 	ldw	r3,36(r18)
    895c:	91400717 	ldw	r5,28(r18)
    8960:	e009883a 	mov	r4,fp
    8964:	b80d883a 	mov	r6,r23
    8968:	183ee83a 	callr	r3
    896c:	1023883a 	mov	r17,r2
    8970:	00bfe10e 	bge	zero,r2,88f8 <__sfvwrite_r+0x254>
    8974:	a469c83a 	sub	r20,r20,r17
    8978:	a0001826 	beq	r20,zero,89dc <__sfvwrite_r+0x338>
    897c:	b0800217 	ldw	r2,8(r22)
    8980:	1445c83a 	sub	r2,r2,r17
    8984:	b0800215 	stw	r2,8(r22)
    8988:	103f7226 	beq	r2,zero,8754 <__sfvwrite_r+0xb0>
    898c:	9c67c83a 	sub	r19,r19,r17
    8990:	bc6f883a 	add	r23,r23,r17
    8994:	983fe21e 	bne	r19,zero,8920 <__sfvwrite_r+0x27c>
    8998:	adc00017 	ldw	r23,0(r21)
    899c:	acc00117 	ldw	r19,4(r21)
    89a0:	ad400204 	addi	r21,r21,8
    89a4:	d8000015 	stw	zero,0(sp)
    89a8:	003fdc06 	br	891c <__sfvwrite_r+0x278>
    89ac:	b80b883a 	mov	r5,r23
    89b0:	880d883a 	mov	r6,r17
    89b4:	0008f3c0 	call	8f3c <memmove>
    89b8:	90c00017 	ldw	r3,0(r18)
    89bc:	e009883a 	mov	r4,fp
    89c0:	900b883a 	mov	r5,r18
    89c4:	1c47883a 	add	r3,r3,r17
    89c8:	90c00015 	stw	r3,0(r18)
    89cc:	0007df80 	call	7df8 <_fflush_r>
    89d0:	103fc91e 	bne	r2,zero,88f8 <__sfvwrite_r+0x254>
    89d4:	a469c83a 	sub	r20,r20,r17
    89d8:	a03fe81e 	bne	r20,zero,897c <__sfvwrite_r+0x2d8>
    89dc:	e009883a 	mov	r4,fp
    89e0:	900b883a 	mov	r5,r18
    89e4:	0007df80 	call	7df8 <_fflush_r>
    89e8:	103fc31e 	bne	r2,zero,88f8 <__sfvwrite_r+0x254>
    89ec:	d8000015 	stw	zero,0(sp)
    89f0:	003fe206 	br	897c <__sfvwrite_r+0x2d8>
    89f4:	91000017 	ldw	r4,0(r18)
    89f8:	90800417 	ldw	r2,16(r18)
    89fc:	1100022e 	bgeu	r2,r4,8a08 <__sfvwrite_r+0x364>
    8a00:	8023883a 	mov	r17,r16
    8a04:	85003136 	bltu	r16,r20,8acc <__sfvwrite_r+0x428>
    8a08:	91c00517 	ldw	r7,20(r18)
    8a0c:	a1c01836 	bltu	r20,r7,8a70 <__sfvwrite_r+0x3cc>
    8a10:	90c00917 	ldw	r3,36(r18)
    8a14:	91400717 	ldw	r5,28(r18)
    8a18:	e009883a 	mov	r4,fp
    8a1c:	b80d883a 	mov	r6,r23
    8a20:	183ee83a 	callr	r3
    8a24:	1021883a 	mov	r16,r2
    8a28:	00bfb30e 	bge	zero,r2,88f8 <__sfvwrite_r+0x254>
    8a2c:	1023883a 	mov	r17,r2
    8a30:	1027883a 	mov	r19,r2
    8a34:	003f9b06 	br	88a4 <__sfvwrite_r+0x200>
    8a38:	b80b883a 	mov	r5,r23
    8a3c:	800d883a 	mov	r6,r16
    8a40:	0008f3c0 	call	8f3c <memmove>
    8a44:	90c00217 	ldw	r3,8(r18)
    8a48:	90800017 	ldw	r2,0(r18)
    8a4c:	8023883a 	mov	r17,r16
    8a50:	1c07c83a 	sub	r3,r3,r16
    8a54:	1405883a 	add	r2,r2,r16
    8a58:	90c00215 	stw	r3,8(r18)
    8a5c:	90800015 	stw	r2,0(r18)
    8a60:	003fc406 	br	8974 <__sfvwrite_r+0x2d0>
    8a64:	a00d883a 	mov	r6,r20
    8a68:	a021883a 	mov	r16,r20
    8a6c:	003f8106 	br	8874 <__sfvwrite_r+0x1d0>
    8a70:	b80b883a 	mov	r5,r23
    8a74:	a00d883a 	mov	r6,r20
    8a78:	0008f3c0 	call	8f3c <memmove>
    8a7c:	90c00217 	ldw	r3,8(r18)
    8a80:	90800017 	ldw	r2,0(r18)
    8a84:	a021883a 	mov	r16,r20
    8a88:	1d07c83a 	sub	r3,r3,r20
    8a8c:	1505883a 	add	r2,r2,r20
    8a90:	a023883a 	mov	r17,r20
    8a94:	a027883a 	mov	r19,r20
    8a98:	90c00215 	stw	r3,8(r18)
    8a9c:	90800015 	stw	r2,0(r18)
    8aa0:	003f8006 	br	88a4 <__sfvwrite_r+0x200>
    8aa4:	b809883a 	mov	r4,r23
    8aa8:	01400284 	movi	r5,10
    8aac:	980d883a 	mov	r6,r19
    8ab0:	00020200 	call	2020 <memchr>
    8ab4:	10001726 	beq	r2,zero,8b14 <__sfvwrite_r+0x470>
    8ab8:	15c5c83a 	sub	r2,r2,r23
    8abc:	15000044 	addi	r20,r2,1
    8ac0:	00800044 	movi	r2,1
    8ac4:	d8800015 	stw	r2,0(sp)
    8ac8:	003f9806 	br	892c <__sfvwrite_r+0x288>
    8acc:	b80b883a 	mov	r5,r23
    8ad0:	800d883a 	mov	r6,r16
    8ad4:	0008f3c0 	call	8f3c <memmove>
    8ad8:	90c00017 	ldw	r3,0(r18)
    8adc:	e009883a 	mov	r4,fp
    8ae0:	900b883a 	mov	r5,r18
    8ae4:	1c07883a 	add	r3,r3,r16
    8ae8:	90c00015 	stw	r3,0(r18)
    8aec:	8027883a 	mov	r19,r16
    8af0:	0007df80 	call	7df8 <_fflush_r>
    8af4:	103f6b26 	beq	r2,zero,88a4 <__sfvwrite_r+0x200>
    8af8:	003f7f06 	br	88f8 <__sfvwrite_r+0x254>
    8afc:	400b883a 	mov	r5,r8
    8b00:	e009883a 	mov	r4,fp
    8b04:	000a2740 	call	a274 <_realloc_r>
    8b08:	103f7626 	beq	r2,zero,88e4 <__sfvwrite_r+0x240>
    8b0c:	1023883a 	mov	r17,r2
    8b10:	003f5006 	br	8854 <__sfvwrite_r+0x1b0>
    8b14:	00c00044 	movi	r3,1
    8b18:	9d000044 	addi	r20,r19,1
    8b1c:	d8c00015 	stw	r3,0(sp)
    8b20:	003f8206 	br	892c <__sfvwrite_r+0x288>
    8b24:	9080030b 	ldhu	r2,12(r18)
    8b28:	00c00244 	movi	r3,9
    8b2c:	013fffc4 	movi	r4,-1
    8b30:	10801014 	ori	r2,r2,64
    8b34:	9080030d 	sth	r2,12(r18)
    8b38:	e0c00015 	stw	r3,0(fp)
    8b3c:	003f0606 	br	8758 <__sfvwrite_r+0xb4>

00008b40 <iswspace>:
    8b40:	00803fc4 	movi	r2,255
    8b44:	0007883a 	mov	r3,zero
    8b48:	11000636 	bltu	r2,r4,8b64 <iswspace+0x24>
    8b4c:	00800074 	movhi	r2,1
    8b50:	1094d704 	addi	r2,r2,21340
    8b54:	10c00017 	ldw	r3,0(r2)
    8b58:	1907883a 	add	r3,r3,r4
    8b5c:	18800003 	ldbu	r2,0(r3)
    8b60:	10c0020c 	andi	r3,r2,8
    8b64:	1805883a 	mov	r2,r3
    8b68:	f800283a 	ret

00008b6c <__locale_charset>:
    8b6c:	d0a00617 	ldw	r2,-32744(gp)
    8b70:	f800283a 	ret

00008b74 <_localeconv_r>:
    8b74:	00800074 	movhi	r2,1
    8b78:	108d7b04 	addi	r2,r2,13804
    8b7c:	f800283a 	ret

00008b80 <localeconv>:
    8b80:	00800074 	movhi	r2,1
    8b84:	1094d804 	addi	r2,r2,21344
    8b88:	11000017 	ldw	r4,0(r2)
    8b8c:	0008b741 	jmpi	8b74 <_localeconv_r>

00008b90 <_setlocale_r>:
    8b90:	defffc04 	addi	sp,sp,-16
    8b94:	00c00074 	movhi	r3,1
    8b98:	18cd4704 	addi	r3,r3,13596
    8b9c:	dc800215 	stw	r18,8(sp)
    8ba0:	dc400115 	stw	r17,4(sp)
    8ba4:	dc000015 	stw	r16,0(sp)
    8ba8:	2023883a 	mov	r17,r4
    8bac:	2825883a 	mov	r18,r5
    8bb0:	dfc00315 	stw	ra,12(sp)
    8bb4:	3021883a 	mov	r16,r6
    8bb8:	3009883a 	mov	r4,r6
    8bbc:	180b883a 	mov	r5,r3
    8bc0:	30000926 	beq	r6,zero,8be8 <_setlocale_r+0x58>
    8bc4:	0002a800 	call	2a80 <strcmp>
    8bc8:	8009883a 	mov	r4,r16
    8bcc:	01400074 	movhi	r5,1
    8bd0:	294d5804 	addi	r5,r5,13664
    8bd4:	10000b1e 	bne	r2,zero,8c04 <_setlocale_r+0x74>
    8bd8:	8c000d15 	stw	r16,52(r17)
    8bdc:	8c800c15 	stw	r18,48(r17)
    8be0:	00c00074 	movhi	r3,1
    8be4:	18cd4704 	addi	r3,r3,13596
    8be8:	1805883a 	mov	r2,r3
    8bec:	dfc00317 	ldw	ra,12(sp)
    8bf0:	dc800217 	ldw	r18,8(sp)
    8bf4:	dc400117 	ldw	r17,4(sp)
    8bf8:	dc000017 	ldw	r16,0(sp)
    8bfc:	dec00404 	addi	sp,sp,16
    8c00:	f800283a 	ret
    8c04:	0002a800 	call	2a80 <strcmp>
    8c08:	0007883a 	mov	r3,zero
    8c0c:	103ff226 	beq	r2,zero,8bd8 <_setlocale_r+0x48>
    8c10:	003ff506 	br	8be8 <_setlocale_r+0x58>

00008c14 <setlocale>:
    8c14:	01800074 	movhi	r6,1
    8c18:	3194d804 	addi	r6,r6,21344
    8c1c:	2007883a 	mov	r3,r4
    8c20:	31000017 	ldw	r4,0(r6)
    8c24:	280d883a 	mov	r6,r5
    8c28:	180b883a 	mov	r5,r3
    8c2c:	0008b901 	jmpi	8b90 <_setlocale_r>

00008c30 <_lseek_r>:
    8c30:	defffd04 	addi	sp,sp,-12
    8c34:	dc000015 	stw	r16,0(sp)
    8c38:	04000074 	movhi	r16,1
    8c3c:	841b9c04 	addi	r16,r16,28272
    8c40:	dc400115 	stw	r17,4(sp)
    8c44:	80000015 	stw	zero,0(r16)
    8c48:	2023883a 	mov	r17,r4
    8c4c:	2809883a 	mov	r4,r5
    8c50:	300b883a 	mov	r5,r6
    8c54:	380d883a 	mov	r6,r7
    8c58:	dfc00215 	stw	ra,8(sp)
    8c5c:	00109800 	call	10980 <lseek>
    8c60:	1007883a 	mov	r3,r2
    8c64:	00bfffc4 	movi	r2,-1
    8c68:	18800626 	beq	r3,r2,8c84 <_lseek_r+0x54>
    8c6c:	1805883a 	mov	r2,r3
    8c70:	dfc00217 	ldw	ra,8(sp)
    8c74:	dc400117 	ldw	r17,4(sp)
    8c78:	dc000017 	ldw	r16,0(sp)
    8c7c:	dec00304 	addi	sp,sp,12
    8c80:	f800283a 	ret
    8c84:	80800017 	ldw	r2,0(r16)
    8c88:	103ff826 	beq	r2,zero,8c6c <_lseek_r+0x3c>
    8c8c:	88800015 	stw	r2,0(r17)
    8c90:	1805883a 	mov	r2,r3
    8c94:	dfc00217 	ldw	ra,8(sp)
    8c98:	dc400117 	ldw	r17,4(sp)
    8c9c:	dc000017 	ldw	r16,0(sp)
    8ca0:	dec00304 	addi	sp,sp,12
    8ca4:	f800283a 	ret

00008ca8 <__smakebuf_r>:
    8ca8:	2880030b 	ldhu	r2,12(r5)
    8cac:	deffed04 	addi	sp,sp,-76
    8cb0:	dc401015 	stw	r17,64(sp)
    8cb4:	1080008c 	andi	r2,r2,2
    8cb8:	dc000f15 	stw	r16,60(sp)
    8cbc:	dfc01215 	stw	ra,72(sp)
    8cc0:	dc801115 	stw	r18,68(sp)
    8cc4:	2821883a 	mov	r16,r5
    8cc8:	2023883a 	mov	r17,r4
    8ccc:	10000b26 	beq	r2,zero,8cfc <__smakebuf_r+0x54>
    8cd0:	28c010c4 	addi	r3,r5,67
    8cd4:	00800044 	movi	r2,1
    8cd8:	28800515 	stw	r2,20(r5)
    8cdc:	28c00415 	stw	r3,16(r5)
    8ce0:	28c00015 	stw	r3,0(r5)
    8ce4:	dfc01217 	ldw	ra,72(sp)
    8ce8:	dc801117 	ldw	r18,68(sp)
    8cec:	dc401017 	ldw	r17,64(sp)
    8cf0:	dc000f17 	ldw	r16,60(sp)
    8cf4:	dec01304 	addi	sp,sp,76
    8cf8:	f800283a 	ret
    8cfc:	2940038f 	ldh	r5,14(r5)
    8d00:	28002116 	blt	r5,zero,8d88 <__smakebuf_r+0xe0>
    8d04:	d80d883a 	mov	r6,sp
    8d08:	000cf640 	call	cf64 <_fstat_r>
    8d0c:	10001e16 	blt	r2,zero,8d88 <__smakebuf_r+0xe0>
    8d10:	d8800117 	ldw	r2,4(sp)
    8d14:	00e00014 	movui	r3,32768
    8d18:	113c000c 	andi	r4,r2,61440
    8d1c:	20c03126 	beq	r4,r3,8de4 <__smakebuf_r+0x13c>
    8d20:	8080030b 	ldhu	r2,12(r16)
    8d24:	00c80004 	movi	r3,8192
    8d28:	10820014 	ori	r2,r2,2048
    8d2c:	8080030d 	sth	r2,12(r16)
    8d30:	20c01e26 	beq	r4,r3,8dac <__smakebuf_r+0x104>
    8d34:	04810004 	movi	r18,1024
    8d38:	8809883a 	mov	r4,r17
    8d3c:	900b883a 	mov	r5,r18
    8d40:	00018e00 	call	18e0 <_malloc_r>
    8d44:	1009883a 	mov	r4,r2
    8d48:	10003126 	beq	r2,zero,8e10 <__smakebuf_r+0x168>
    8d4c:	80c0030b 	ldhu	r3,12(r16)
    8d50:	00800034 	movhi	r2,0
    8d54:	10857b04 	addi	r2,r2,5612
    8d58:	88800f15 	stw	r2,60(r17)
    8d5c:	18c02014 	ori	r3,r3,128
    8d60:	84800515 	stw	r18,20(r16)
    8d64:	80c0030d 	sth	r3,12(r16)
    8d68:	81000415 	stw	r4,16(r16)
    8d6c:	81000015 	stw	r4,0(r16)
    8d70:	dfc01217 	ldw	ra,72(sp)
    8d74:	dc801117 	ldw	r18,68(sp)
    8d78:	dc401017 	ldw	r17,64(sp)
    8d7c:	dc000f17 	ldw	r16,60(sp)
    8d80:	dec01304 	addi	sp,sp,76
    8d84:	f800283a 	ret
    8d88:	80c0030b 	ldhu	r3,12(r16)
    8d8c:	1880200c 	andi	r2,r3,128
    8d90:	10000426 	beq	r2,zero,8da4 <__smakebuf_r+0xfc>
    8d94:	04801004 	movi	r18,64
    8d98:	18820014 	ori	r2,r3,2048
    8d9c:	8080030d 	sth	r2,12(r16)
    8da0:	003fe506 	br	8d38 <__smakebuf_r+0x90>
    8da4:	04810004 	movi	r18,1024
    8da8:	003ffb06 	br	8d98 <__smakebuf_r+0xf0>
    8dac:	8140038f 	ldh	r5,14(r16)
    8db0:	8809883a 	mov	r4,r17
    8db4:	000db600 	call	db60 <_isatty_r>
    8db8:	103fde26 	beq	r2,zero,8d34 <__smakebuf_r+0x8c>
    8dbc:	8080030b 	ldhu	r2,12(r16)
    8dc0:	80c010c4 	addi	r3,r16,67
    8dc4:	04810004 	movi	r18,1024
    8dc8:	10800054 	ori	r2,r2,1
    8dcc:	8080030d 	sth	r2,12(r16)
    8dd0:	00800044 	movi	r2,1
    8dd4:	80c00415 	stw	r3,16(r16)
    8dd8:	80800515 	stw	r2,20(r16)
    8ddc:	80c00015 	stw	r3,0(r16)
    8de0:	003fd506 	br	8d38 <__smakebuf_r+0x90>
    8de4:	80c00a17 	ldw	r3,40(r16)
    8de8:	00800034 	movhi	r2,0
    8dec:	1089f304 	addi	r2,r2,10188
    8df0:	18bfcb1e 	bne	r3,r2,8d20 <__smakebuf_r+0x78>
    8df4:	8080030b 	ldhu	r2,12(r16)
    8df8:	00c10004 	movi	r3,1024
    8dfc:	1825883a 	mov	r18,r3
    8e00:	10c4b03a 	or	r2,r2,r3
    8e04:	8080030d 	sth	r2,12(r16)
    8e08:	80c01315 	stw	r3,76(r16)
    8e0c:	003fca06 	br	8d38 <__smakebuf_r+0x90>
    8e10:	8100030b 	ldhu	r4,12(r16)
    8e14:	2080800c 	andi	r2,r4,512
    8e18:	103fb21e 	bne	r2,zero,8ce4 <__smakebuf_r+0x3c>
    8e1c:	80c010c4 	addi	r3,r16,67
    8e20:	21000094 	ori	r4,r4,2
    8e24:	00800044 	movi	r2,1
    8e28:	80800515 	stw	r2,20(r16)
    8e2c:	8100030d 	sth	r4,12(r16)
    8e30:	80c00415 	stw	r3,16(r16)
    8e34:	80c00015 	stw	r3,0(r16)
    8e38:	003faa06 	br	8ce4 <__smakebuf_r+0x3c>

00008e3c <_mbrtowc_r>:
    8e3c:	defffc04 	addi	sp,sp,-16
    8e40:	dc400215 	stw	r17,8(sp)
    8e44:	dc000115 	stw	r16,4(sp)
    8e48:	dfc00315 	stw	ra,12(sp)
    8e4c:	dc000417 	ldw	r16,16(sp)
    8e50:	2023883a 	mov	r17,r4
    8e54:	30000f26 	beq	r6,zero,8e94 <_mbrtowc_r+0x58>
    8e58:	dc000015 	stw	r16,0(sp)
    8e5c:	0008efc0 	call	8efc <_mbtowc_r>
    8e60:	1007883a 	mov	r3,r2
    8e64:	00bfffc4 	movi	r2,-1
    8e68:	1809883a 	mov	r4,r3
    8e6c:	1880111e 	bne	r3,r2,8eb4 <_mbrtowc_r+0x78>
    8e70:	80000015 	stw	zero,0(r16)
    8e74:	00802284 	movi	r2,138
    8e78:	88800015 	stw	r2,0(r17)
    8e7c:	2005883a 	mov	r2,r4
    8e80:	dfc00317 	ldw	ra,12(sp)
    8e84:	dc400217 	ldw	r17,8(sp)
    8e88:	dc000117 	ldw	r16,4(sp)
    8e8c:	dec00404 	addi	sp,sp,16
    8e90:	f800283a 	ret
    8e94:	000b883a 	mov	r5,zero
    8e98:	01800074 	movhi	r6,1
    8e9c:	318d5804 	addi	r6,r6,13664
    8ea0:	01c00044 	movi	r7,1
    8ea4:	dc000015 	stw	r16,0(sp)
    8ea8:	0008efc0 	call	8efc <_mbtowc_r>
    8eac:	1007883a 	mov	r3,r2
    8eb0:	003fec06 	br	8e64 <_mbrtowc_r+0x28>
    8eb4:	1809883a 	mov	r4,r3
    8eb8:	003ff006 	br	8e7c <_mbrtowc_r+0x40>

00008ebc <mbrtowc>:
    8ebc:	00800074 	movhi	r2,1
    8ec0:	1094d804 	addi	r2,r2,21344
    8ec4:	2017883a 	mov	r11,r4
    8ec8:	11000017 	ldw	r4,0(r2)
    8ecc:	defffe04 	addi	sp,sp,-8
    8ed0:	3013883a 	mov	r9,r6
    8ed4:	2805883a 	mov	r2,r5
    8ed8:	d9c00015 	stw	r7,0(sp)
    8edc:	580b883a 	mov	r5,r11
    8ee0:	100d883a 	mov	r6,r2
    8ee4:	480f883a 	mov	r7,r9
    8ee8:	dfc00115 	stw	ra,4(sp)
    8eec:	0008e3c0 	call	8e3c <_mbrtowc_r>
    8ef0:	dfc00117 	ldw	ra,4(sp)
    8ef4:	dec00204 	addi	sp,sp,8
    8ef8:	f800283a 	ret

00008efc <_mbtowc_r>:
    8efc:	deffff04 	addi	sp,sp,-4
    8f00:	0005883a 	mov	r2,zero
    8f04:	28000326 	beq	r5,zero,8f14 <_mbtowc_r+0x18>
    8f08:	3000041e 	bne	r6,zero,8f1c <_mbtowc_r+0x20>
    8f0c:	dec00104 	addi	sp,sp,4
    8f10:	f800283a 	ret
    8f14:	d80b883a 	mov	r5,sp
    8f18:	303ffc26 	beq	r6,zero,8f0c <_mbtowc_r+0x10>
    8f1c:	00bfff84 	movi	r2,-2
    8f20:	383ffa26 	beq	r7,zero,8f0c <_mbtowc_r+0x10>
    8f24:	30800003 	ldbu	r2,0(r6)
    8f28:	28800015 	stw	r2,0(r5)
    8f2c:	30c00003 	ldbu	r3,0(r6)
    8f30:	1804c03a 	cmpne	r2,r3,zero
    8f34:	dec00104 	addi	sp,sp,4
    8f38:	f800283a 	ret

00008f3c <memmove>:
    8f3c:	2807883a 	mov	r3,r5
    8f40:	2011883a 	mov	r8,r4
    8f44:	29000c2e 	bgeu	r5,r4,8f78 <memmove+0x3c>
    8f48:	298f883a 	add	r7,r5,r6
    8f4c:	21c00a2e 	bgeu	r4,r7,8f78 <memmove+0x3c>
    8f50:	30000726 	beq	r6,zero,8f70 <memmove+0x34>
    8f54:	2187883a 	add	r3,r4,r6
    8f58:	198dc83a 	sub	r6,r3,r6
    8f5c:	39ffffc4 	addi	r7,r7,-1
    8f60:	38800003 	ldbu	r2,0(r7)
    8f64:	18ffffc4 	addi	r3,r3,-1
    8f68:	18800005 	stb	r2,0(r3)
    8f6c:	19bffb1e 	bne	r3,r6,8f5c <memmove+0x20>
    8f70:	2005883a 	mov	r2,r4
    8f74:	f800283a 	ret
    8f78:	01c003c4 	movi	r7,15
    8f7c:	39800a36 	bltu	r7,r6,8fa8 <memmove+0x6c>
    8f80:	303ffb26 	beq	r6,zero,8f70 <memmove+0x34>
    8f84:	400f883a 	mov	r7,r8
    8f88:	320d883a 	add	r6,r6,r8
    8f8c:	28800003 	ldbu	r2,0(r5)
    8f90:	29400044 	addi	r5,r5,1
    8f94:	38800005 	stb	r2,0(r7)
    8f98:	39c00044 	addi	r7,r7,1
    8f9c:	39bffb1e 	bne	r7,r6,8f8c <memmove+0x50>
    8fa0:	2005883a 	mov	r2,r4
    8fa4:	f800283a 	ret
    8fa8:	1904b03a 	or	r2,r3,r4
    8fac:	108000cc 	andi	r2,r2,3
    8fb0:	103ff31e 	bne	r2,zero,8f80 <memmove+0x44>
    8fb4:	3811883a 	mov	r8,r7
    8fb8:	180b883a 	mov	r5,r3
    8fbc:	200f883a 	mov	r7,r4
    8fc0:	28c00017 	ldw	r3,0(r5)
    8fc4:	31bffc04 	addi	r6,r6,-16
    8fc8:	38c00015 	stw	r3,0(r7)
    8fcc:	28800117 	ldw	r2,4(r5)
    8fd0:	38800115 	stw	r2,4(r7)
    8fd4:	28c00217 	ldw	r3,8(r5)
    8fd8:	38c00215 	stw	r3,8(r7)
    8fdc:	28800317 	ldw	r2,12(r5)
    8fe0:	29400404 	addi	r5,r5,16
    8fe4:	38800315 	stw	r2,12(r7)
    8fe8:	39c00404 	addi	r7,r7,16
    8fec:	41bff436 	bltu	r8,r6,8fc0 <memmove+0x84>
    8ff0:	008000c4 	movi	r2,3
    8ff4:	1180072e 	bgeu	r2,r6,9014 <memmove+0xd8>
    8ff8:	1007883a 	mov	r3,r2
    8ffc:	28800017 	ldw	r2,0(r5)
    9000:	31bfff04 	addi	r6,r6,-4
    9004:	29400104 	addi	r5,r5,4
    9008:	38800015 	stw	r2,0(r7)
    900c:	39c00104 	addi	r7,r7,4
    9010:	19bffa36 	bltu	r3,r6,8ffc <memmove+0xc0>
    9014:	3811883a 	mov	r8,r7
    9018:	003fd906 	br	8f80 <memmove+0x44>

0000901c <_Bfree>:
    901c:	28000826 	beq	r5,zero,9040 <_Bfree+0x24>
    9020:	28800117 	ldw	r2,4(r5)
    9024:	21001317 	ldw	r4,76(r4)
    9028:	1085883a 	add	r2,r2,r2
    902c:	1085883a 	add	r2,r2,r2
    9030:	1105883a 	add	r2,r2,r4
    9034:	10c00017 	ldw	r3,0(r2)
    9038:	28c00015 	stw	r3,0(r5)
    903c:	11400015 	stw	r5,0(r2)
    9040:	f800283a 	ret

00009044 <__hi0bits>:
    9044:	20bfffec 	andhi	r2,r4,65535
    9048:	10001426 	beq	r2,zero,909c <__hi0bits+0x58>
    904c:	0007883a 	mov	r3,zero
    9050:	20bfc02c 	andhi	r2,r4,65280
    9054:	1000021e 	bne	r2,zero,9060 <__hi0bits+0x1c>
    9058:	2008923a 	slli	r4,r4,8
    905c:	18c00204 	addi	r3,r3,8
    9060:	20bc002c 	andhi	r2,r4,61440
    9064:	1000021e 	bne	r2,zero,9070 <__hi0bits+0x2c>
    9068:	2008913a 	slli	r4,r4,4
    906c:	18c00104 	addi	r3,r3,4
    9070:	20b0002c 	andhi	r2,r4,49152
    9074:	1000031e 	bne	r2,zero,9084 <__hi0bits+0x40>
    9078:	2105883a 	add	r2,r4,r4
    907c:	18c00084 	addi	r3,r3,2
    9080:	1089883a 	add	r4,r2,r2
    9084:	20000316 	blt	r4,zero,9094 <__hi0bits+0x50>
    9088:	2090002c 	andhi	r2,r4,16384
    908c:	10000626 	beq	r2,zero,90a8 <__hi0bits+0x64>
    9090:	18c00044 	addi	r3,r3,1
    9094:	1805883a 	mov	r2,r3
    9098:	f800283a 	ret
    909c:	2008943a 	slli	r4,r4,16
    90a0:	00c00404 	movi	r3,16
    90a4:	003fea06 	br	9050 <__hi0bits+0xc>
    90a8:	00c00804 	movi	r3,32
    90ac:	1805883a 	mov	r2,r3
    90b0:	f800283a 	ret

000090b4 <__lo0bits>:
    90b4:	20c00017 	ldw	r3,0(r4)
    90b8:	188001cc 	andi	r2,r3,7
    90bc:	10000a26 	beq	r2,zero,90e8 <__lo0bits+0x34>
    90c0:	1880004c 	andi	r2,r3,1
    90c4:	1005003a 	cmpeq	r2,r2,zero
    90c8:	10002126 	beq	r2,zero,9150 <__lo0bits+0x9c>
    90cc:	1880008c 	andi	r2,r3,2
    90d0:	1000251e 	bne	r2,zero,9168 <__lo0bits+0xb4>
    90d4:	1804d0ba 	srli	r2,r3,2
    90d8:	01400084 	movi	r5,2
    90dc:	20800015 	stw	r2,0(r4)
    90e0:	2805883a 	mov	r2,r5
    90e4:	f800283a 	ret
    90e8:	18bfffcc 	andi	r2,r3,65535
    90ec:	10001526 	beq	r2,zero,9144 <__lo0bits+0x90>
    90f0:	000b883a 	mov	r5,zero
    90f4:	18803fcc 	andi	r2,r3,255
    90f8:	1000021e 	bne	r2,zero,9104 <__lo0bits+0x50>
    90fc:	1806d23a 	srli	r3,r3,8
    9100:	29400204 	addi	r5,r5,8
    9104:	188003cc 	andi	r2,r3,15
    9108:	1000021e 	bne	r2,zero,9114 <__lo0bits+0x60>
    910c:	1806d13a 	srli	r3,r3,4
    9110:	29400104 	addi	r5,r5,4
    9114:	188000cc 	andi	r2,r3,3
    9118:	1000021e 	bne	r2,zero,9124 <__lo0bits+0x70>
    911c:	1806d0ba 	srli	r3,r3,2
    9120:	29400084 	addi	r5,r5,2
    9124:	1880004c 	andi	r2,r3,1
    9128:	1000031e 	bne	r2,zero,9138 <__lo0bits+0x84>
    912c:	1806d07a 	srli	r3,r3,1
    9130:	18000a26 	beq	r3,zero,915c <__lo0bits+0xa8>
    9134:	29400044 	addi	r5,r5,1
    9138:	2805883a 	mov	r2,r5
    913c:	20c00015 	stw	r3,0(r4)
    9140:	f800283a 	ret
    9144:	1806d43a 	srli	r3,r3,16
    9148:	01400404 	movi	r5,16
    914c:	003fe906 	br	90f4 <__lo0bits+0x40>
    9150:	000b883a 	mov	r5,zero
    9154:	2805883a 	mov	r2,r5
    9158:	f800283a 	ret
    915c:	01400804 	movi	r5,32
    9160:	2805883a 	mov	r2,r5
    9164:	f800283a 	ret
    9168:	1804d07a 	srli	r2,r3,1
    916c:	01400044 	movi	r5,1
    9170:	20800015 	stw	r2,0(r4)
    9174:	003fda06 	br	90e0 <__lo0bits+0x2c>

00009178 <__mcmp>:
    9178:	20800417 	ldw	r2,16(r4)
    917c:	28c00417 	ldw	r3,16(r5)
    9180:	10cfc83a 	sub	r7,r2,r3
    9184:	38000c1e 	bne	r7,zero,91b8 <__mcmp+0x40>
    9188:	18c5883a 	add	r2,r3,r3
    918c:	1085883a 	add	r2,r2,r2
    9190:	10c00504 	addi	r3,r2,20
    9194:	21000504 	addi	r4,r4,20
    9198:	28cb883a 	add	r5,r5,r3
    919c:	2085883a 	add	r2,r4,r2
    91a0:	10bfff04 	addi	r2,r2,-4
    91a4:	297fff04 	addi	r5,r5,-4
    91a8:	11800017 	ldw	r6,0(r2)
    91ac:	28c00017 	ldw	r3,0(r5)
    91b0:	30c0031e 	bne	r6,r3,91c0 <__mcmp+0x48>
    91b4:	20bffa36 	bltu	r4,r2,91a0 <__mcmp+0x28>
    91b8:	3805883a 	mov	r2,r7
    91bc:	f800283a 	ret
    91c0:	30c00336 	bltu	r6,r3,91d0 <__mcmp+0x58>
    91c4:	01c00044 	movi	r7,1
    91c8:	3805883a 	mov	r2,r7
    91cc:	f800283a 	ret
    91d0:	01ffffc4 	movi	r7,-1
    91d4:	003ff806 	br	91b8 <__mcmp+0x40>

000091d8 <__ulp>:
    91d8:	295ffc2c 	andhi	r5,r5,32752
    91dc:	013f3034 	movhi	r4,64704
    91e0:	290b883a 	add	r5,r5,r4
    91e4:	0145c83a 	sub	r2,zero,r5
    91e8:	1007d53a 	srai	r3,r2,20
    91ec:	000d883a 	mov	r6,zero
    91f0:	0140040e 	bge	zero,r5,9204 <__ulp+0x2c>
    91f4:	280f883a 	mov	r7,r5
    91f8:	3807883a 	mov	r3,r7
    91fc:	3005883a 	mov	r2,r6
    9200:	f800283a 	ret
    9204:	008004c4 	movi	r2,19
    9208:	193ffb04 	addi	r4,r3,-20
    920c:	10c00c0e 	bge	r2,r3,9240 <__ulp+0x68>
    9210:	008007c4 	movi	r2,31
    9214:	1107c83a 	sub	r3,r2,r4
    9218:	00800784 	movi	r2,30
    921c:	01400044 	movi	r5,1
    9220:	11000216 	blt	r2,r4,922c <__ulp+0x54>
    9224:	00800044 	movi	r2,1
    9228:	10ca983a 	sll	r5,r2,r3
    922c:	000f883a 	mov	r7,zero
    9230:	280d883a 	mov	r6,r5
    9234:	3807883a 	mov	r3,r7
    9238:	3005883a 	mov	r2,r6
    923c:	f800283a 	ret
    9240:	00800234 	movhi	r2,8
    9244:	10cfd83a 	sra	r7,r2,r3
    9248:	000d883a 	mov	r6,zero
    924c:	3005883a 	mov	r2,r6
    9250:	3807883a 	mov	r3,r7
    9254:	f800283a 	ret

00009258 <__b2d>:
    9258:	20800417 	ldw	r2,16(r4)
    925c:	defff904 	addi	sp,sp,-28
    9260:	dd000415 	stw	r20,16(sp)
    9264:	1085883a 	add	r2,r2,r2
    9268:	25000504 	addi	r20,r4,20
    926c:	1085883a 	add	r2,r2,r2
    9270:	dc000015 	stw	r16,0(sp)
    9274:	a0a1883a 	add	r16,r20,r2
    9278:	dd400515 	stw	r21,20(sp)
    927c:	857fff17 	ldw	r21,-4(r16)
    9280:	dc400115 	stw	r17,4(sp)
    9284:	dfc00615 	stw	ra,24(sp)
    9288:	a809883a 	mov	r4,r21
    928c:	2823883a 	mov	r17,r5
    9290:	dcc00315 	stw	r19,12(sp)
    9294:	dc800215 	stw	r18,8(sp)
    9298:	00090440 	call	9044 <__hi0bits>
    929c:	100b883a 	mov	r5,r2
    92a0:	00800804 	movi	r2,32
    92a4:	1145c83a 	sub	r2,r2,r5
    92a8:	88800015 	stw	r2,0(r17)
    92ac:	00800284 	movi	r2,10
    92b0:	80ffff04 	addi	r3,r16,-4
    92b4:	11401416 	blt	r2,r5,9308 <__b2d+0xb0>
    92b8:	008002c4 	movi	r2,11
    92bc:	1149c83a 	sub	r4,r2,r5
    92c0:	a0c02736 	bltu	r20,r3,9360 <__b2d+0x108>
    92c4:	000d883a 	mov	r6,zero
    92c8:	28800544 	addi	r2,r5,21
    92cc:	a906d83a 	srl	r3,r21,r4
    92d0:	a884983a 	sll	r2,r21,r2
    92d4:	1ccffc34 	orhi	r19,r3,16368
    92d8:	11a4b03a 	or	r18,r2,r6
    92dc:	9005883a 	mov	r2,r18
    92e0:	9807883a 	mov	r3,r19
    92e4:	dfc00617 	ldw	ra,24(sp)
    92e8:	dd400517 	ldw	r21,20(sp)
    92ec:	dd000417 	ldw	r20,16(sp)
    92f0:	dcc00317 	ldw	r19,12(sp)
    92f4:	dc800217 	ldw	r18,8(sp)
    92f8:	dc400117 	ldw	r17,4(sp)
    92fc:	dc000017 	ldw	r16,0(sp)
    9300:	dec00704 	addi	sp,sp,28
    9304:	f800283a 	ret
    9308:	a0c00e36 	bltu	r20,r3,9344 <__b2d+0xec>
    930c:	293ffd44 	addi	r4,r5,-11
    9310:	000d883a 	mov	r6,zero
    9314:	20000f26 	beq	r4,zero,9354 <__b2d+0xfc>
    9318:	00800804 	movi	r2,32
    931c:	110bc83a 	sub	r5,r2,r4
    9320:	a0c01236 	bltu	r20,r3,936c <__b2d+0x114>
    9324:	000f883a 	mov	r7,zero
    9328:	a904983a 	sll	r2,r21,r4
    932c:	3146d83a 	srl	r3,r6,r5
    9330:	3108983a 	sll	r4,r6,r4
    9334:	108ffc34 	orhi	r2,r2,16368
    9338:	18a6b03a 	or	r19,r3,r2
    933c:	3924b03a 	or	r18,r7,r4
    9340:	003fe606 	br	92dc <__b2d+0x84>
    9344:	293ffd44 	addi	r4,r5,-11
    9348:	81bffe17 	ldw	r6,-8(r16)
    934c:	80fffe04 	addi	r3,r16,-8
    9350:	203ff11e 	bne	r4,zero,9318 <__b2d+0xc0>
    9354:	accffc34 	orhi	r19,r21,16368
    9358:	3025883a 	mov	r18,r6
    935c:	003fdf06 	br	92dc <__b2d+0x84>
    9360:	18bfff17 	ldw	r2,-4(r3)
    9364:	110cd83a 	srl	r6,r2,r4
    9368:	003fd706 	br	92c8 <__b2d+0x70>
    936c:	18bfff17 	ldw	r2,-4(r3)
    9370:	114ed83a 	srl	r7,r2,r5
    9374:	003fec06 	br	9328 <__b2d+0xd0>

00009378 <__ratio>:
    9378:	defff904 	addi	sp,sp,-28
    937c:	dc400215 	stw	r17,8(sp)
    9380:	2823883a 	mov	r17,r5
    9384:	d80b883a 	mov	r5,sp
    9388:	dfc00615 	stw	ra,24(sp)
    938c:	dd000515 	stw	r20,20(sp)
    9390:	dcc00415 	stw	r19,16(sp)
    9394:	dc800315 	stw	r18,12(sp)
    9398:	2025883a 	mov	r18,r4
    939c:	00092580 	call	9258 <__b2d>
    93a0:	8809883a 	mov	r4,r17
    93a4:	d9400104 	addi	r5,sp,4
    93a8:	1027883a 	mov	r19,r2
    93ac:	1829883a 	mov	r20,r3
    93b0:	00092580 	call	9258 <__b2d>
    93b4:	89000417 	ldw	r4,16(r17)
    93b8:	91c00417 	ldw	r7,16(r18)
    93bc:	d9800117 	ldw	r6,4(sp)
    93c0:	180b883a 	mov	r5,r3
    93c4:	390fc83a 	sub	r7,r7,r4
    93c8:	1009883a 	mov	r4,r2
    93cc:	d8800017 	ldw	r2,0(sp)
    93d0:	380e917a 	slli	r7,r7,5
    93d4:	2011883a 	mov	r8,r4
    93d8:	1185c83a 	sub	r2,r2,r6
    93dc:	11c5883a 	add	r2,r2,r7
    93e0:	1006953a 	slli	r3,r2,20
    93e4:	2813883a 	mov	r9,r5
    93e8:	00800d0e 	bge	zero,r2,9420 <__ratio+0xa8>
    93ec:	1d29883a 	add	r20,r3,r20
    93f0:	a00b883a 	mov	r5,r20
    93f4:	480f883a 	mov	r7,r9
    93f8:	9809883a 	mov	r4,r19
    93fc:	400d883a 	mov	r6,r8
    9400:	000f2c80 	call	f2c8 <__divdf3>
    9404:	dfc00617 	ldw	ra,24(sp)
    9408:	dd000517 	ldw	r20,20(sp)
    940c:	dcc00417 	ldw	r19,16(sp)
    9410:	dc800317 	ldw	r18,12(sp)
    9414:	dc400217 	ldw	r17,8(sp)
    9418:	dec00704 	addi	sp,sp,28
    941c:	f800283a 	ret
    9420:	28d3c83a 	sub	r9,r5,r3
    9424:	003ff206 	br	93f0 <__ratio+0x78>

00009428 <_mprec_log10>:
    9428:	defffe04 	addi	sp,sp,-8
    942c:	008005c4 	movi	r2,23
    9430:	dc000015 	stw	r16,0(sp)
    9434:	dfc00115 	stw	ra,4(sp)
    9438:	2021883a 	mov	r16,r4
    943c:	11000c16 	blt	r2,r4,9470 <_mprec_log10+0x48>
    9440:	200490fa 	slli	r2,r4,3
    9444:	00c00074 	movhi	r3,1
    9448:	18cd8704 	addi	r3,r3,13852
    944c:	10c5883a 	add	r2,r2,r3
    9450:	12400117 	ldw	r9,4(r2)
    9454:	12000017 	ldw	r8,0(r2)
    9458:	4807883a 	mov	r3,r9
    945c:	4005883a 	mov	r2,r8
    9460:	dfc00117 	ldw	ra,4(sp)
    9464:	dc000017 	ldw	r16,0(sp)
    9468:	dec00204 	addi	sp,sp,8
    946c:	f800283a 	ret
    9470:	0011883a 	mov	r8,zero
    9474:	024ffc34 	movhi	r9,16368
    9478:	0005883a 	mov	r2,zero
    947c:	00d00934 	movhi	r3,16420
    9480:	480b883a 	mov	r5,r9
    9484:	4009883a 	mov	r4,r8
    9488:	180f883a 	mov	r7,r3
    948c:	100d883a 	mov	r6,r2
    9490:	000ef040 	call	ef04 <__muldf3>
    9494:	843fffc4 	addi	r16,r16,-1
    9498:	1011883a 	mov	r8,r2
    949c:	1813883a 	mov	r9,r3
    94a0:	803ff51e 	bne	r16,zero,9478 <_mprec_log10+0x50>
    94a4:	4005883a 	mov	r2,r8
    94a8:	4807883a 	mov	r3,r9
    94ac:	dfc00117 	ldw	ra,4(sp)
    94b0:	dc000017 	ldw	r16,0(sp)
    94b4:	dec00204 	addi	sp,sp,8
    94b8:	f800283a 	ret

000094bc <__copybits>:
    94bc:	297fffc4 	addi	r5,r5,-1
    94c0:	30800417 	ldw	r2,16(r6)
    94c4:	280bd17a 	srai	r5,r5,5
    94c8:	31800504 	addi	r6,r6,20
    94cc:	1085883a 	add	r2,r2,r2
    94d0:	294b883a 	add	r5,r5,r5
    94d4:	294b883a 	add	r5,r5,r5
    94d8:	1085883a 	add	r2,r2,r2
    94dc:	290b883a 	add	r5,r5,r4
    94e0:	3087883a 	add	r3,r6,r2
    94e4:	29400104 	addi	r5,r5,4
    94e8:	30c0052e 	bgeu	r6,r3,9500 <__copybits+0x44>
    94ec:	30800017 	ldw	r2,0(r6)
    94f0:	31800104 	addi	r6,r6,4
    94f4:	20800015 	stw	r2,0(r4)
    94f8:	21000104 	addi	r4,r4,4
    94fc:	30fffb36 	bltu	r6,r3,94ec <__copybits+0x30>
    9500:	2140032e 	bgeu	r4,r5,9510 <__copybits+0x54>
    9504:	20000015 	stw	zero,0(r4)
    9508:	21000104 	addi	r4,r4,4
    950c:	217ffd36 	bltu	r4,r5,9504 <__copybits+0x48>
    9510:	f800283a 	ret

00009514 <__any_on>:
    9514:	20800417 	ldw	r2,16(r4)
    9518:	2807d17a 	srai	r3,r5,5
    951c:	21000504 	addi	r4,r4,20
    9520:	10c00d0e 	bge	r2,r3,9558 <__any_on+0x44>
    9524:	1085883a 	add	r2,r2,r2
    9528:	1085883a 	add	r2,r2,r2
    952c:	208d883a 	add	r6,r4,r2
    9530:	2180182e 	bgeu	r4,r6,9594 <__any_on+0x80>
    9534:	30bfff17 	ldw	r2,-4(r6)
    9538:	30ffff04 	addi	r3,r6,-4
    953c:	1000041e 	bne	r2,zero,9550 <__any_on+0x3c>
    9540:	20c0142e 	bgeu	r4,r3,9594 <__any_on+0x80>
    9544:	18ffff04 	addi	r3,r3,-4
    9548:	18800017 	ldw	r2,0(r3)
    954c:	103ffc26 	beq	r2,zero,9540 <__any_on+0x2c>
    9550:	00800044 	movi	r2,1
    9554:	f800283a 	ret
    9558:	18800a0e 	bge	r3,r2,9584 <__any_on+0x70>
    955c:	294007cc 	andi	r5,r5,31
    9560:	28000826 	beq	r5,zero,9584 <__any_on+0x70>
    9564:	18c5883a 	add	r2,r3,r3
    9568:	1085883a 	add	r2,r2,r2
    956c:	208d883a 	add	r6,r4,r2
    9570:	30c00017 	ldw	r3,0(r6)
    9574:	1944d83a 	srl	r2,r3,r5
    9578:	1144983a 	sll	r2,r2,r5
    957c:	18bff41e 	bne	r3,r2,9550 <__any_on+0x3c>
    9580:	003feb06 	br	9530 <__any_on+0x1c>
    9584:	18c5883a 	add	r2,r3,r3
    9588:	1085883a 	add	r2,r2,r2
    958c:	208d883a 	add	r6,r4,r2
    9590:	003fe706 	br	9530 <__any_on+0x1c>
    9594:	0005883a 	mov	r2,zero
    9598:	f800283a 	ret

0000959c <_Balloc>:
    959c:	20c01317 	ldw	r3,76(r4)
    95a0:	defffb04 	addi	sp,sp,-20
    95a4:	dcc00315 	stw	r19,12(sp)
    95a8:	dc800215 	stw	r18,8(sp)
    95ac:	dfc00415 	stw	ra,16(sp)
    95b0:	2825883a 	mov	r18,r5
    95b4:	dc400115 	stw	r17,4(sp)
    95b8:	dc000015 	stw	r16,0(sp)
    95bc:	2027883a 	mov	r19,r4
    95c0:	01800404 	movi	r6,16
    95c4:	01400104 	movi	r5,4
    95c8:	18001726 	beq	r3,zero,9628 <_Balloc+0x8c>
    95cc:	01400044 	movi	r5,1
    95d0:	9485883a 	add	r2,r18,r18
    95d4:	2ca2983a 	sll	r17,r5,r18
    95d8:	1085883a 	add	r2,r2,r2
    95dc:	10c7883a 	add	r3,r2,r3
    95e0:	1c000017 	ldw	r16,0(r3)
    95e4:	8c4d883a 	add	r6,r17,r17
    95e8:	318d883a 	add	r6,r6,r6
    95ec:	9809883a 	mov	r4,r19
    95f0:	31800504 	addi	r6,r6,20
    95f4:	80001226 	beq	r16,zero,9640 <_Balloc+0xa4>
    95f8:	80800017 	ldw	r2,0(r16)
    95fc:	18800015 	stw	r2,0(r3)
    9600:	80000415 	stw	zero,16(r16)
    9604:	80000315 	stw	zero,12(r16)
    9608:	8005883a 	mov	r2,r16
    960c:	dfc00417 	ldw	ra,16(sp)
    9610:	dcc00317 	ldw	r19,12(sp)
    9614:	dc800217 	ldw	r18,8(sp)
    9618:	dc400117 	ldw	r17,4(sp)
    961c:	dc000017 	ldw	r16,0(sp)
    9620:	dec00504 	addi	sp,sp,20
    9624:	f800283a 	ret
    9628:	000ceb00 	call	ceb0 <_calloc_r>
    962c:	1007883a 	mov	r3,r2
    9630:	0021883a 	mov	r16,zero
    9634:	98801315 	stw	r2,76(r19)
    9638:	103fe41e 	bne	r2,zero,95cc <_Balloc+0x30>
    963c:	003ff206 	br	9608 <_Balloc+0x6c>
    9640:	000ceb00 	call	ceb0 <_calloc_r>
    9644:	103ff026 	beq	r2,zero,9608 <_Balloc+0x6c>
    9648:	1021883a 	mov	r16,r2
    964c:	14800115 	stw	r18,4(r2)
    9650:	14400215 	stw	r17,8(r2)
    9654:	003fea06 	br	9600 <_Balloc+0x64>

00009658 <__d2b>:
    9658:	defff504 	addi	sp,sp,-44
    965c:	dcc00515 	stw	r19,20(sp)
    9660:	04c00044 	movi	r19,1
    9664:	dc000215 	stw	r16,8(sp)
    9668:	2821883a 	mov	r16,r5
    966c:	980b883a 	mov	r5,r19
    9670:	ddc00915 	stw	r23,36(sp)
    9674:	dd800815 	stw	r22,32(sp)
    9678:	dd400715 	stw	r21,28(sp)
    967c:	dd000615 	stw	r20,24(sp)
    9680:	dc800415 	stw	r18,16(sp)
    9684:	dc400315 	stw	r17,12(sp)
    9688:	dfc00a15 	stw	ra,40(sp)
    968c:	3023883a 	mov	r17,r6
    9690:	382d883a 	mov	r22,r7
    9694:	ddc00b17 	ldw	r23,44(sp)
    9698:	000959c0 	call	959c <_Balloc>
    969c:	1025883a 	mov	r18,r2
    96a0:	00a00034 	movhi	r2,32768
    96a4:	10bfffc4 	addi	r2,r2,-1
    96a8:	8888703a 	and	r4,r17,r2
    96ac:	202ad53a 	srli	r21,r4,20
    96b0:	00800434 	movhi	r2,16
    96b4:	10bfffc4 	addi	r2,r2,-1
    96b8:	8886703a 	and	r3,r17,r2
    96bc:	a829003a 	cmpeq	r20,r21,zero
    96c0:	800b883a 	mov	r5,r16
    96c4:	d8c00115 	stw	r3,4(sp)
    96c8:	94000504 	addi	r16,r18,20
    96cc:	a000021e 	bne	r20,zero,96d8 <__d2b+0x80>
    96d0:	18c00434 	orhi	r3,r3,16
    96d4:	d8c00115 	stw	r3,4(sp)
    96d8:	28002726 	beq	r5,zero,9778 <__d2b+0x120>
    96dc:	d809883a 	mov	r4,sp
    96e0:	d9400015 	stw	r5,0(sp)
    96e4:	00090b40 	call	90b4 <__lo0bits>
    96e8:	100d883a 	mov	r6,r2
    96ec:	10003526 	beq	r2,zero,97c4 <__d2b+0x16c>
    96f0:	d8c00117 	ldw	r3,4(sp)
    96f4:	00800804 	movi	r2,32
    96f8:	1185c83a 	sub	r2,r2,r6
    96fc:	d9000017 	ldw	r4,0(sp)
    9700:	1886983a 	sll	r3,r3,r2
    9704:	1906b03a 	or	r3,r3,r4
    9708:	90c00515 	stw	r3,20(r18)
    970c:	d8c00117 	ldw	r3,4(sp)
    9710:	1986d83a 	srl	r3,r3,r6
    9714:	d8c00115 	stw	r3,4(sp)
    9718:	180b003a 	cmpeq	r5,r3,zero
    971c:	00800084 	movi	r2,2
    9720:	114bc83a 	sub	r5,r2,r5
    9724:	80c00115 	stw	r3,4(r16)
    9728:	91400415 	stw	r5,16(r18)
    972c:	a0001a1e 	bne	r20,zero,9798 <__d2b+0x140>
    9730:	3545883a 	add	r2,r6,r21
    9734:	10bef344 	addi	r2,r2,-1075
    9738:	00c00d44 	movi	r3,53
    973c:	b0800015 	stw	r2,0(r22)
    9740:	1987c83a 	sub	r3,r3,r6
    9744:	b8c00015 	stw	r3,0(r23)
    9748:	9005883a 	mov	r2,r18
    974c:	dfc00a17 	ldw	ra,40(sp)
    9750:	ddc00917 	ldw	r23,36(sp)
    9754:	dd800817 	ldw	r22,32(sp)
    9758:	dd400717 	ldw	r21,28(sp)
    975c:	dd000617 	ldw	r20,24(sp)
    9760:	dcc00517 	ldw	r19,20(sp)
    9764:	dc800417 	ldw	r18,16(sp)
    9768:	dc400317 	ldw	r17,12(sp)
    976c:	dc000217 	ldw	r16,8(sp)
    9770:	dec00b04 	addi	sp,sp,44
    9774:	f800283a 	ret
    9778:	d9000104 	addi	r4,sp,4
    977c:	00090b40 	call	90b4 <__lo0bits>
    9780:	11800804 	addi	r6,r2,32
    9784:	d8800117 	ldw	r2,4(sp)
    9788:	94c00415 	stw	r19,16(r18)
    978c:	980b883a 	mov	r5,r19
    9790:	90800515 	stw	r2,20(r18)
    9794:	a03fe626 	beq	r20,zero,9730 <__d2b+0xd8>
    9798:	2945883a 	add	r2,r5,r5
    979c:	1085883a 	add	r2,r2,r2
    97a0:	1405883a 	add	r2,r2,r16
    97a4:	113fff17 	ldw	r4,-4(r2)
    97a8:	30fef384 	addi	r3,r6,-1074
    97ac:	2820917a 	slli	r16,r5,5
    97b0:	b0c00015 	stw	r3,0(r22)
    97b4:	00090440 	call	9044 <__hi0bits>
    97b8:	80a1c83a 	sub	r16,r16,r2
    97bc:	bc000015 	stw	r16,0(r23)
    97c0:	003fe106 	br	9748 <__d2b+0xf0>
    97c4:	d8800017 	ldw	r2,0(sp)
    97c8:	90800515 	stw	r2,20(r18)
    97cc:	d8c00117 	ldw	r3,4(sp)
    97d0:	003fd106 	br	9718 <__d2b+0xc0>

000097d4 <__mdiff>:
    97d4:	defffb04 	addi	sp,sp,-20
    97d8:	dc000015 	stw	r16,0(sp)
    97dc:	2821883a 	mov	r16,r5
    97e0:	dc800215 	stw	r18,8(sp)
    97e4:	300b883a 	mov	r5,r6
    97e8:	2025883a 	mov	r18,r4
    97ec:	8009883a 	mov	r4,r16
    97f0:	dc400115 	stw	r17,4(sp)
    97f4:	dfc00415 	stw	ra,16(sp)
    97f8:	dcc00315 	stw	r19,12(sp)
    97fc:	3023883a 	mov	r17,r6
    9800:	00091780 	call	9178 <__mcmp>
    9804:	10004226 	beq	r2,zero,9910 <__mdiff+0x13c>
    9808:	10005016 	blt	r2,zero,994c <__mdiff+0x178>
    980c:	0027883a 	mov	r19,zero
    9810:	81400117 	ldw	r5,4(r16)
    9814:	9009883a 	mov	r4,r18
    9818:	000959c0 	call	959c <_Balloc>
    981c:	1019883a 	mov	r12,r2
    9820:	82800417 	ldw	r10,16(r16)
    9824:	88800417 	ldw	r2,16(r17)
    9828:	81800504 	addi	r6,r16,20
    982c:	5287883a 	add	r3,r10,r10
    9830:	1085883a 	add	r2,r2,r2
    9834:	18c7883a 	add	r3,r3,r3
    9838:	1085883a 	add	r2,r2,r2
    983c:	8a000504 	addi	r8,r17,20
    9840:	64c00315 	stw	r19,12(r12)
    9844:	30db883a 	add	r13,r6,r3
    9848:	4097883a 	add	r11,r8,r2
    984c:	61c00504 	addi	r7,r12,20
    9850:	0013883a 	mov	r9,zero
    9854:	31000017 	ldw	r4,0(r6)
    9858:	41400017 	ldw	r5,0(r8)
    985c:	42000104 	addi	r8,r8,4
    9860:	20bfffcc 	andi	r2,r4,65535
    9864:	28ffffcc 	andi	r3,r5,65535
    9868:	10c5c83a 	sub	r2,r2,r3
    986c:	1245883a 	add	r2,r2,r9
    9870:	2008d43a 	srli	r4,r4,16
    9874:	280ad43a 	srli	r5,r5,16
    9878:	1007d43a 	srai	r3,r2,16
    987c:	3880000d 	sth	r2,0(r7)
    9880:	2149c83a 	sub	r4,r4,r5
    9884:	20c9883a 	add	r4,r4,r3
    9888:	3900008d 	sth	r4,2(r7)
    988c:	31800104 	addi	r6,r6,4
    9890:	39c00104 	addi	r7,r7,4
    9894:	2013d43a 	srai	r9,r4,16
    9898:	42ffee36 	bltu	r8,r11,9854 <__mdiff+0x80>
    989c:	33400c2e 	bgeu	r6,r13,98d0 <__mdiff+0xfc>
    98a0:	30800017 	ldw	r2,0(r6)
    98a4:	31800104 	addi	r6,r6,4
    98a8:	10ffffcc 	andi	r3,r2,65535
    98ac:	1a47883a 	add	r3,r3,r9
    98b0:	1004d43a 	srli	r2,r2,16
    98b4:	1809d43a 	srai	r4,r3,16
    98b8:	38c0000d 	sth	r3,0(r7)
    98bc:	1105883a 	add	r2,r2,r4
    98c0:	3880008d 	sth	r2,2(r7)
    98c4:	1013d43a 	srai	r9,r2,16
    98c8:	39c00104 	addi	r7,r7,4
    98cc:	337ff436 	bltu	r6,r13,98a0 <__mdiff+0xcc>
    98d0:	38bfff17 	ldw	r2,-4(r7)
    98d4:	38ffff04 	addi	r3,r7,-4
    98d8:	1000041e 	bne	r2,zero,98ec <__mdiff+0x118>
    98dc:	18ffff04 	addi	r3,r3,-4
    98e0:	18800017 	ldw	r2,0(r3)
    98e4:	52bfffc4 	addi	r10,r10,-1
    98e8:	103ffc26 	beq	r2,zero,98dc <__mdiff+0x108>
    98ec:	6005883a 	mov	r2,r12
    98f0:	62800415 	stw	r10,16(r12)
    98f4:	dfc00417 	ldw	ra,16(sp)
    98f8:	dcc00317 	ldw	r19,12(sp)
    98fc:	dc800217 	ldw	r18,8(sp)
    9900:	dc400117 	ldw	r17,4(sp)
    9904:	dc000017 	ldw	r16,0(sp)
    9908:	dec00504 	addi	sp,sp,20
    990c:	f800283a 	ret
    9910:	9009883a 	mov	r4,r18
    9914:	000b883a 	mov	r5,zero
    9918:	000959c0 	call	959c <_Balloc>
    991c:	1019883a 	mov	r12,r2
    9920:	00800044 	movi	r2,1
    9924:	60800415 	stw	r2,16(r12)
    9928:	6005883a 	mov	r2,r12
    992c:	60000515 	stw	zero,20(r12)
    9930:	dfc00417 	ldw	ra,16(sp)
    9934:	dcc00317 	ldw	r19,12(sp)
    9938:	dc800217 	ldw	r18,8(sp)
    993c:	dc400117 	ldw	r17,4(sp)
    9940:	dc000017 	ldw	r16,0(sp)
    9944:	dec00504 	addi	sp,sp,20
    9948:	f800283a 	ret
    994c:	880d883a 	mov	r6,r17
    9950:	04c00044 	movi	r19,1
    9954:	8023883a 	mov	r17,r16
    9958:	3021883a 	mov	r16,r6
    995c:	003fac06 	br	9810 <__mdiff+0x3c>

00009960 <__lshift>:
    9960:	defff904 	addi	sp,sp,-28
    9964:	28800417 	ldw	r2,16(r5)
    9968:	dc000015 	stw	r16,0(sp)
    996c:	3021d17a 	srai	r16,r6,5
    9970:	28c00217 	ldw	r3,8(r5)
    9974:	10800044 	addi	r2,r2,1
    9978:	dc400115 	stw	r17,4(sp)
    997c:	80a3883a 	add	r17,r16,r2
    9980:	dd400515 	stw	r21,20(sp)
    9984:	dd000415 	stw	r20,16(sp)
    9988:	dc800215 	stw	r18,8(sp)
    998c:	dfc00615 	stw	ra,24(sp)
    9990:	2825883a 	mov	r18,r5
    9994:	dcc00315 	stw	r19,12(sp)
    9998:	3029883a 	mov	r20,r6
    999c:	202b883a 	mov	r21,r4
    99a0:	29400117 	ldw	r5,4(r5)
    99a4:	1c40030e 	bge	r3,r17,99b4 <__lshift+0x54>
    99a8:	18c7883a 	add	r3,r3,r3
    99ac:	29400044 	addi	r5,r5,1
    99b0:	1c7ffd16 	blt	r3,r17,99a8 <__lshift+0x48>
    99b4:	a809883a 	mov	r4,r21
    99b8:	000959c0 	call	959c <_Balloc>
    99bc:	1027883a 	mov	r19,r2
    99c0:	11400504 	addi	r5,r2,20
    99c4:	0400090e 	bge	zero,r16,99ec <__lshift+0x8c>
    99c8:	2805883a 	mov	r2,r5
    99cc:	0007883a 	mov	r3,zero
    99d0:	18c00044 	addi	r3,r3,1
    99d4:	10000015 	stw	zero,0(r2)
    99d8:	10800104 	addi	r2,r2,4
    99dc:	80fffc1e 	bne	r16,r3,99d0 <__lshift+0x70>
    99e0:	8405883a 	add	r2,r16,r16
    99e4:	1085883a 	add	r2,r2,r2
    99e8:	288b883a 	add	r5,r5,r2
    99ec:	90800417 	ldw	r2,16(r18)
    99f0:	91000504 	addi	r4,r18,20
    99f4:	a18007cc 	andi	r6,r20,31
    99f8:	1085883a 	add	r2,r2,r2
    99fc:	1085883a 	add	r2,r2,r2
    9a00:	208f883a 	add	r7,r4,r2
    9a04:	30001e26 	beq	r6,zero,9a80 <__lshift+0x120>
    9a08:	00800804 	movi	r2,32
    9a0c:	1191c83a 	sub	r8,r2,r6
    9a10:	0007883a 	mov	r3,zero
    9a14:	20800017 	ldw	r2,0(r4)
    9a18:	1184983a 	sll	r2,r2,r6
    9a1c:	1884b03a 	or	r2,r3,r2
    9a20:	28800015 	stw	r2,0(r5)
    9a24:	20c00017 	ldw	r3,0(r4)
    9a28:	21000104 	addi	r4,r4,4
    9a2c:	29400104 	addi	r5,r5,4
    9a30:	1a06d83a 	srl	r3,r3,r8
    9a34:	21fff736 	bltu	r4,r7,9a14 <__lshift+0xb4>
    9a38:	28c00015 	stw	r3,0(r5)
    9a3c:	18000126 	beq	r3,zero,9a44 <__lshift+0xe4>
    9a40:	8c400044 	addi	r17,r17,1
    9a44:	88bfffc4 	addi	r2,r17,-1
    9a48:	98800415 	stw	r2,16(r19)
    9a4c:	a809883a 	mov	r4,r21
    9a50:	900b883a 	mov	r5,r18
    9a54:	000901c0 	call	901c <_Bfree>
    9a58:	9805883a 	mov	r2,r19
    9a5c:	dfc00617 	ldw	ra,24(sp)
    9a60:	dd400517 	ldw	r21,20(sp)
    9a64:	dd000417 	ldw	r20,16(sp)
    9a68:	dcc00317 	ldw	r19,12(sp)
    9a6c:	dc800217 	ldw	r18,8(sp)
    9a70:	dc400117 	ldw	r17,4(sp)
    9a74:	dc000017 	ldw	r16,0(sp)
    9a78:	dec00704 	addi	sp,sp,28
    9a7c:	f800283a 	ret
    9a80:	20800017 	ldw	r2,0(r4)
    9a84:	21000104 	addi	r4,r4,4
    9a88:	28800015 	stw	r2,0(r5)
    9a8c:	29400104 	addi	r5,r5,4
    9a90:	21ffec2e 	bgeu	r4,r7,9a44 <__lshift+0xe4>
    9a94:	20800017 	ldw	r2,0(r4)
    9a98:	21000104 	addi	r4,r4,4
    9a9c:	28800015 	stw	r2,0(r5)
    9aa0:	29400104 	addi	r5,r5,4
    9aa4:	21fff636 	bltu	r4,r7,9a80 <__lshift+0x120>
    9aa8:	003fe606 	br	9a44 <__lshift+0xe4>

00009aac <__multiply>:
    9aac:	defff904 	addi	sp,sp,-28
    9ab0:	dcc00315 	stw	r19,12(sp)
    9ab4:	dc800215 	stw	r18,8(sp)
    9ab8:	2cc00417 	ldw	r19,16(r5)
    9abc:	34800417 	ldw	r18,16(r6)
    9ac0:	dd000415 	stw	r20,16(sp)
    9ac4:	dc400115 	stw	r17,4(sp)
    9ac8:	dfc00615 	stw	ra,24(sp)
    9acc:	dd400515 	stw	r21,20(sp)
    9ad0:	dc000015 	stw	r16,0(sp)
    9ad4:	2823883a 	mov	r17,r5
    9ad8:	3029883a 	mov	r20,r6
    9adc:	9c80040e 	bge	r19,r18,9af0 <__multiply+0x44>
    9ae0:	9027883a 	mov	r19,r18
    9ae4:	2c800417 	ldw	r18,16(r5)
    9ae8:	2829883a 	mov	r20,r5
    9aec:	3023883a 	mov	r17,r6
    9af0:	88800217 	ldw	r2,8(r17)
    9af4:	9ca1883a 	add	r16,r19,r18
    9af8:	89400117 	ldw	r5,4(r17)
    9afc:	1400010e 	bge	r2,r16,9b04 <__multiply+0x58>
    9b00:	29400044 	addi	r5,r5,1
    9b04:	000959c0 	call	959c <_Balloc>
    9b08:	102b883a 	mov	r21,r2
    9b0c:	8405883a 	add	r2,r16,r16
    9b10:	1085883a 	add	r2,r2,r2
    9b14:	a9000504 	addi	r4,r21,20
    9b18:	209d883a 	add	r14,r4,r2
    9b1c:	2380042e 	bgeu	r4,r14,9b30 <__multiply+0x84>
    9b20:	2005883a 	mov	r2,r4
    9b24:	10000015 	stw	zero,0(r2)
    9b28:	10800104 	addi	r2,r2,4
    9b2c:	13bffd36 	bltu	r2,r14,9b24 <__multiply+0x78>
    9b30:	9485883a 	add	r2,r18,r18
    9b34:	9cc7883a 	add	r3,r19,r19
    9b38:	a1800504 	addi	r6,r20,20
    9b3c:	1085883a 	add	r2,r2,r2
    9b40:	8b400504 	addi	r13,r17,20
    9b44:	18c7883a 	add	r3,r3,r3
    9b48:	309f883a 	add	r15,r6,r2
    9b4c:	68d7883a 	add	r11,r13,r3
    9b50:	33c03b2e 	bgeu	r6,r15,9c40 <__multiply+0x194>
    9b54:	2019883a 	mov	r12,r4
    9b58:	30800017 	ldw	r2,0(r6)
    9b5c:	127fffcc 	andi	r9,r2,65535
    9b60:	48001826 	beq	r9,zero,9bc4 <__multiply+0x118>
    9b64:	6811883a 	mov	r8,r13
    9b68:	600f883a 	mov	r7,r12
    9b6c:	0015883a 	mov	r10,zero
    9b70:	40c00017 	ldw	r3,0(r8)
    9b74:	39400017 	ldw	r5,0(r7)
    9b78:	42000104 	addi	r8,r8,4
    9b7c:	193fffcc 	andi	r4,r3,65535
    9b80:	4909383a 	mul	r4,r9,r4
    9b84:	1806d43a 	srli	r3,r3,16
    9b88:	28bfffcc 	andi	r2,r5,65535
    9b8c:	5085883a 	add	r2,r10,r2
    9b90:	2089883a 	add	r4,r4,r2
    9b94:	48c7383a 	mul	r3,r9,r3
    9b98:	280ad43a 	srli	r5,r5,16
    9b9c:	2004d43a 	srli	r2,r4,16
    9ba0:	3900000d 	sth	r4,0(r7)
    9ba4:	1947883a 	add	r3,r3,r5
    9ba8:	10c5883a 	add	r2,r2,r3
    9bac:	3880008d 	sth	r2,2(r7)
    9bb0:	1014d43a 	srli	r10,r2,16
    9bb4:	39c00104 	addi	r7,r7,4
    9bb8:	42ffed36 	bltu	r8,r11,9b70 <__multiply+0xc4>
    9bbc:	3a800015 	stw	r10,0(r7)
    9bc0:	30800017 	ldw	r2,0(r6)
    9bc4:	1012d43a 	srli	r9,r2,16
    9bc8:	48001926 	beq	r9,zero,9c30 <__multiply+0x184>
    9bcc:	60800017 	ldw	r2,0(r12)
    9bd0:	6811883a 	mov	r8,r13
    9bd4:	600f883a 	mov	r7,r12
    9bd8:	0015883a 	mov	r10,zero
    9bdc:	100b883a 	mov	r5,r2
    9be0:	41000017 	ldw	r4,0(r8)
    9be4:	2806d43a 	srli	r3,r5,16
    9be8:	3880000d 	sth	r2,0(r7)
    9bec:	20bfffcc 	andi	r2,r4,65535
    9bf0:	4885383a 	mul	r2,r9,r2
    9bf4:	50c7883a 	add	r3,r10,r3
    9bf8:	2008d43a 	srli	r4,r4,16
    9bfc:	10c5883a 	add	r2,r2,r3
    9c00:	3880008d 	sth	r2,2(r7)
    9c04:	39c00104 	addi	r7,r7,4
    9c08:	39400017 	ldw	r5,0(r7)
    9c0c:	4909383a 	mul	r4,r9,r4
    9c10:	1004d43a 	srli	r2,r2,16
    9c14:	28ffffcc 	andi	r3,r5,65535
    9c18:	20c9883a 	add	r4,r4,r3
    9c1c:	1105883a 	add	r2,r2,r4
    9c20:	42000104 	addi	r8,r8,4
    9c24:	1014d43a 	srli	r10,r2,16
    9c28:	42ffed36 	bltu	r8,r11,9be0 <__multiply+0x134>
    9c2c:	38800015 	stw	r2,0(r7)
    9c30:	31800104 	addi	r6,r6,4
    9c34:	33c0022e 	bgeu	r6,r15,9c40 <__multiply+0x194>
    9c38:	63000104 	addi	r12,r12,4
    9c3c:	003fc606 	br	9b58 <__multiply+0xac>
    9c40:	0400090e 	bge	zero,r16,9c68 <__multiply+0x1bc>
    9c44:	70bfff17 	ldw	r2,-4(r14)
    9c48:	70ffff04 	addi	r3,r14,-4
    9c4c:	10000326 	beq	r2,zero,9c5c <__multiply+0x1b0>
    9c50:	00000506 	br	9c68 <__multiply+0x1bc>
    9c54:	18800017 	ldw	r2,0(r3)
    9c58:	1000031e 	bne	r2,zero,9c68 <__multiply+0x1bc>
    9c5c:	843fffc4 	addi	r16,r16,-1
    9c60:	18ffff04 	addi	r3,r3,-4
    9c64:	803ffb1e 	bne	r16,zero,9c54 <__multiply+0x1a8>
    9c68:	a805883a 	mov	r2,r21
    9c6c:	ac000415 	stw	r16,16(r21)
    9c70:	dfc00617 	ldw	ra,24(sp)
    9c74:	dd400517 	ldw	r21,20(sp)
    9c78:	dd000417 	ldw	r20,16(sp)
    9c7c:	dcc00317 	ldw	r19,12(sp)
    9c80:	dc800217 	ldw	r18,8(sp)
    9c84:	dc400117 	ldw	r17,4(sp)
    9c88:	dc000017 	ldw	r16,0(sp)
    9c8c:	dec00704 	addi	sp,sp,28
    9c90:	f800283a 	ret

00009c94 <__i2b>:
    9c94:	defffd04 	addi	sp,sp,-12
    9c98:	dc000015 	stw	r16,0(sp)
    9c9c:	04000044 	movi	r16,1
    9ca0:	dc800115 	stw	r18,4(sp)
    9ca4:	2825883a 	mov	r18,r5
    9ca8:	800b883a 	mov	r5,r16
    9cac:	dfc00215 	stw	ra,8(sp)
    9cb0:	000959c0 	call	959c <_Balloc>
    9cb4:	14000415 	stw	r16,16(r2)
    9cb8:	14800515 	stw	r18,20(r2)
    9cbc:	dfc00217 	ldw	ra,8(sp)
    9cc0:	dc800117 	ldw	r18,4(sp)
    9cc4:	dc000017 	ldw	r16,0(sp)
    9cc8:	dec00304 	addi	sp,sp,12
    9ccc:	f800283a 	ret

00009cd0 <__multadd>:
    9cd0:	defffa04 	addi	sp,sp,-24
    9cd4:	dc800215 	stw	r18,8(sp)
    9cd8:	2c800417 	ldw	r18,16(r5)
    9cdc:	dd000415 	stw	r20,16(sp)
    9ce0:	dcc00315 	stw	r19,12(sp)
    9ce4:	dc000015 	stw	r16,0(sp)
    9ce8:	dfc00515 	stw	ra,20(sp)
    9cec:	3821883a 	mov	r16,r7
    9cf0:	dc400115 	stw	r17,4(sp)
    9cf4:	2827883a 	mov	r19,r5
    9cf8:	2029883a 	mov	r20,r4
    9cfc:	2a000504 	addi	r8,r5,20
    9d00:	000f883a 	mov	r7,zero
    9d04:	40800017 	ldw	r2,0(r8)
    9d08:	39c00044 	addi	r7,r7,1
    9d0c:	10ffffcc 	andi	r3,r2,65535
    9d10:	1987383a 	mul	r3,r3,r6
    9d14:	1004d43a 	srli	r2,r2,16
    9d18:	1c07883a 	add	r3,r3,r16
    9d1c:	180ad43a 	srli	r5,r3,16
    9d20:	1185383a 	mul	r2,r2,r6
    9d24:	18ffffcc 	andi	r3,r3,65535
    9d28:	1145883a 	add	r2,r2,r5
    9d2c:	1008943a 	slli	r4,r2,16
    9d30:	1020d43a 	srli	r16,r2,16
    9d34:	20c9883a 	add	r4,r4,r3
    9d38:	41000015 	stw	r4,0(r8)
    9d3c:	42000104 	addi	r8,r8,4
    9d40:	3cbff016 	blt	r7,r18,9d04 <__multadd+0x34>
    9d44:	80000826 	beq	r16,zero,9d68 <__multadd+0x98>
    9d48:	98800217 	ldw	r2,8(r19)
    9d4c:	90800f0e 	bge	r18,r2,9d8c <__multadd+0xbc>
    9d50:	9485883a 	add	r2,r18,r18
    9d54:	1085883a 	add	r2,r2,r2
    9d58:	14c5883a 	add	r2,r2,r19
    9d5c:	90c00044 	addi	r3,r18,1
    9d60:	14000515 	stw	r16,20(r2)
    9d64:	98c00415 	stw	r3,16(r19)
    9d68:	9805883a 	mov	r2,r19
    9d6c:	dfc00517 	ldw	ra,20(sp)
    9d70:	dd000417 	ldw	r20,16(sp)
    9d74:	dcc00317 	ldw	r19,12(sp)
    9d78:	dc800217 	ldw	r18,8(sp)
    9d7c:	dc400117 	ldw	r17,4(sp)
    9d80:	dc000017 	ldw	r16,0(sp)
    9d84:	dec00604 	addi	sp,sp,24
    9d88:	f800283a 	ret
    9d8c:	99400117 	ldw	r5,4(r19)
    9d90:	a009883a 	mov	r4,r20
    9d94:	29400044 	addi	r5,r5,1
    9d98:	000959c0 	call	959c <_Balloc>
    9d9c:	99800417 	ldw	r6,16(r19)
    9da0:	99400304 	addi	r5,r19,12
    9da4:	11000304 	addi	r4,r2,12
    9da8:	318d883a 	add	r6,r6,r6
    9dac:	318d883a 	add	r6,r6,r6
    9db0:	31800204 	addi	r6,r6,8
    9db4:	1023883a 	mov	r17,r2
    9db8:	00021040 	call	2104 <memcpy>
    9dbc:	980b883a 	mov	r5,r19
    9dc0:	a009883a 	mov	r4,r20
    9dc4:	000901c0 	call	901c <_Bfree>
    9dc8:	8827883a 	mov	r19,r17
    9dcc:	003fe006 	br	9d50 <__multadd+0x80>

00009dd0 <__pow5mult>:
    9dd0:	defffa04 	addi	sp,sp,-24
    9dd4:	308000cc 	andi	r2,r6,3
    9dd8:	dd000415 	stw	r20,16(sp)
    9ddc:	dcc00315 	stw	r19,12(sp)
    9de0:	dc000015 	stw	r16,0(sp)
    9de4:	dfc00515 	stw	ra,20(sp)
    9de8:	dc800215 	stw	r18,8(sp)
    9dec:	dc400115 	stw	r17,4(sp)
    9df0:	3021883a 	mov	r16,r6
    9df4:	2027883a 	mov	r19,r4
    9df8:	2829883a 	mov	r20,r5
    9dfc:	10002b1e 	bne	r2,zero,9eac <__pow5mult+0xdc>
    9e00:	8025d0ba 	srai	r18,r16,2
    9e04:	90001b26 	beq	r18,zero,9e74 <__pow5mult+0xa4>
    9e08:	9c001217 	ldw	r16,72(r19)
    9e0c:	8000081e 	bne	r16,zero,9e30 <__pow5mult+0x60>
    9e10:	00003006 	br	9ed4 <__pow5mult+0x104>
    9e14:	800b883a 	mov	r5,r16
    9e18:	800d883a 	mov	r6,r16
    9e1c:	9809883a 	mov	r4,r19
    9e20:	90001426 	beq	r18,zero,9e74 <__pow5mult+0xa4>
    9e24:	80800017 	ldw	r2,0(r16)
    9e28:	10001b26 	beq	r2,zero,9e98 <__pow5mult+0xc8>
    9e2c:	1021883a 	mov	r16,r2
    9e30:	9080004c 	andi	r2,r18,1
    9e34:	1005003a 	cmpeq	r2,r2,zero
    9e38:	9025d07a 	srai	r18,r18,1
    9e3c:	800d883a 	mov	r6,r16
    9e40:	9809883a 	mov	r4,r19
    9e44:	a00b883a 	mov	r5,r20
    9e48:	103ff21e 	bne	r2,zero,9e14 <__pow5mult+0x44>
    9e4c:	0009aac0 	call	9aac <__multiply>
    9e50:	a00b883a 	mov	r5,r20
    9e54:	9809883a 	mov	r4,r19
    9e58:	1023883a 	mov	r17,r2
    9e5c:	000901c0 	call	901c <_Bfree>
    9e60:	8829883a 	mov	r20,r17
    9e64:	800b883a 	mov	r5,r16
    9e68:	800d883a 	mov	r6,r16
    9e6c:	9809883a 	mov	r4,r19
    9e70:	903fec1e 	bne	r18,zero,9e24 <__pow5mult+0x54>
    9e74:	a005883a 	mov	r2,r20
    9e78:	dfc00517 	ldw	ra,20(sp)
    9e7c:	dd000417 	ldw	r20,16(sp)
    9e80:	dcc00317 	ldw	r19,12(sp)
    9e84:	dc800217 	ldw	r18,8(sp)
    9e88:	dc400117 	ldw	r17,4(sp)
    9e8c:	dc000017 	ldw	r16,0(sp)
    9e90:	dec00604 	addi	sp,sp,24
    9e94:	f800283a 	ret
    9e98:	0009aac0 	call	9aac <__multiply>
    9e9c:	80800015 	stw	r2,0(r16)
    9ea0:	1021883a 	mov	r16,r2
    9ea4:	10000015 	stw	zero,0(r2)
    9ea8:	003fe106 	br	9e30 <__pow5mult+0x60>
    9eac:	1085883a 	add	r2,r2,r2
    9eb0:	00c00074 	movhi	r3,1
    9eb4:	18cdcd04 	addi	r3,r3,14132
    9eb8:	1085883a 	add	r2,r2,r2
    9ebc:	10c5883a 	add	r2,r2,r3
    9ec0:	11bfff17 	ldw	r6,-4(r2)
    9ec4:	000f883a 	mov	r7,zero
    9ec8:	0009cd00 	call	9cd0 <__multadd>
    9ecc:	1029883a 	mov	r20,r2
    9ed0:	003fcb06 	br	9e00 <__pow5mult+0x30>
    9ed4:	9809883a 	mov	r4,r19
    9ed8:	01409c44 	movi	r5,625
    9edc:	0009c940 	call	9c94 <__i2b>
    9ee0:	98801215 	stw	r2,72(r19)
    9ee4:	1021883a 	mov	r16,r2
    9ee8:	10000015 	stw	zero,0(r2)
    9eec:	003fd006 	br	9e30 <__pow5mult+0x60>

00009ef0 <__s2b>:
    9ef0:	defff904 	addi	sp,sp,-28
    9ef4:	dcc00315 	stw	r19,12(sp)
    9ef8:	dc800215 	stw	r18,8(sp)
    9efc:	2827883a 	mov	r19,r5
    9f00:	2025883a 	mov	r18,r4
    9f04:	01400244 	movi	r5,9
    9f08:	39000204 	addi	r4,r7,8
    9f0c:	dd000415 	stw	r20,16(sp)
    9f10:	dc400115 	stw	r17,4(sp)
    9f14:	dfc00615 	stw	ra,24(sp)
    9f18:	dd400515 	stw	r21,20(sp)
    9f1c:	dc000015 	stw	r16,0(sp)
    9f20:	3829883a 	mov	r20,r7
    9f24:	3023883a 	mov	r17,r6
    9f28:	00012640 	call	1264 <__divsi3>
    9f2c:	00c00044 	movi	r3,1
    9f30:	1880350e 	bge	r3,r2,a008 <__s2b+0x118>
    9f34:	000b883a 	mov	r5,zero
    9f38:	18c7883a 	add	r3,r3,r3
    9f3c:	29400044 	addi	r5,r5,1
    9f40:	18bffd16 	blt	r3,r2,9f38 <__s2b+0x48>
    9f44:	9009883a 	mov	r4,r18
    9f48:	000959c0 	call	959c <_Balloc>
    9f4c:	1011883a 	mov	r8,r2
    9f50:	d8800717 	ldw	r2,28(sp)
    9f54:	00c00044 	movi	r3,1
    9f58:	01800244 	movi	r6,9
    9f5c:	40800515 	stw	r2,20(r8)
    9f60:	40c00415 	stw	r3,16(r8)
    9f64:	3440260e 	bge	r6,r17,a000 <__s2b+0x110>
    9f68:	3021883a 	mov	r16,r6
    9f6c:	99ab883a 	add	r21,r19,r6
    9f70:	9c05883a 	add	r2,r19,r16
    9f74:	11c00007 	ldb	r7,0(r2)
    9f78:	400b883a 	mov	r5,r8
    9f7c:	9009883a 	mov	r4,r18
    9f80:	39fff404 	addi	r7,r7,-48
    9f84:	01800284 	movi	r6,10
    9f88:	0009cd00 	call	9cd0 <__multadd>
    9f8c:	84000044 	addi	r16,r16,1
    9f90:	1011883a 	mov	r8,r2
    9f94:	8c3ff61e 	bne	r17,r16,9f70 <__s2b+0x80>
    9f98:	ac45883a 	add	r2,r21,r17
    9f9c:	117ffe04 	addi	r5,r2,-8
    9fa0:	880d883a 	mov	r6,r17
    9fa4:	35000c0e 	bge	r6,r20,9fd8 <__s2b+0xe8>
    9fa8:	a185c83a 	sub	r2,r20,r6
    9fac:	2821883a 	mov	r16,r5
    9fb0:	28a3883a 	add	r17,r5,r2
    9fb4:	81c00007 	ldb	r7,0(r16)
    9fb8:	400b883a 	mov	r5,r8
    9fbc:	9009883a 	mov	r4,r18
    9fc0:	39fff404 	addi	r7,r7,-48
    9fc4:	01800284 	movi	r6,10
    9fc8:	0009cd00 	call	9cd0 <__multadd>
    9fcc:	84000044 	addi	r16,r16,1
    9fd0:	1011883a 	mov	r8,r2
    9fd4:	847ff71e 	bne	r16,r17,9fb4 <__s2b+0xc4>
    9fd8:	4005883a 	mov	r2,r8
    9fdc:	dfc00617 	ldw	ra,24(sp)
    9fe0:	dd400517 	ldw	r21,20(sp)
    9fe4:	dd000417 	ldw	r20,16(sp)
    9fe8:	dcc00317 	ldw	r19,12(sp)
    9fec:	dc800217 	ldw	r18,8(sp)
    9ff0:	dc400117 	ldw	r17,4(sp)
    9ff4:	dc000017 	ldw	r16,0(sp)
    9ff8:	dec00704 	addi	sp,sp,28
    9ffc:	f800283a 	ret
    a000:	99400284 	addi	r5,r19,10
    a004:	003fe706 	br	9fa4 <__s2b+0xb4>
    a008:	000b883a 	mov	r5,zero
    a00c:	003fcd06 	br	9f44 <__s2b+0x54>

0000a010 <putc>:
    a010:	defffc04 	addi	sp,sp,-16
    a014:	dc800215 	stw	r18,8(sp)
    a018:	04800074 	movhi	r18,1
    a01c:	9494d804 	addi	r18,r18,21344
    a020:	90c00017 	ldw	r3,0(r18)
    a024:	dc400115 	stw	r17,4(sp)
    a028:	dc000015 	stw	r16,0(sp)
    a02c:	dfc00315 	stw	ra,12(sp)
    a030:	2023883a 	mov	r17,r4
    a034:	2821883a 	mov	r16,r5
    a038:	18000226 	beq	r3,zero,a044 <putc+0x34>
    a03c:	18800e17 	ldw	r2,56(r3)
    a040:	10001126 	beq	r2,zero,a088 <putc+0x78>
    a044:	80800217 	ldw	r2,8(r16)
    a048:	10ffffc4 	addi	r3,r2,-1
    a04c:	80c00215 	stw	r3,8(r16)
    a050:	18001316 	blt	r3,zero,a0a0 <putc+0x90>
    a054:	80800017 	ldw	r2,0(r16)
    a058:	14400005 	stb	r17,0(r2)
    a05c:	80c00017 	ldw	r3,0(r16)
    a060:	18800044 	addi	r2,r3,1
    a064:	18c00003 	ldbu	r3,0(r3)
    a068:	80800015 	stw	r2,0(r16)
    a06c:	1805883a 	mov	r2,r3
    a070:	dfc00317 	ldw	ra,12(sp)
    a074:	dc800217 	ldw	r18,8(sp)
    a078:	dc400117 	ldw	r17,4(sp)
    a07c:	dc000017 	ldw	r16,0(sp)
    a080:	dec00404 	addi	sp,sp,16
    a084:	f800283a 	ret
    a088:	1809883a 	mov	r4,r3
    a08c:	00015080 	call	1508 <__sinit>
    a090:	80800217 	ldw	r2,8(r16)
    a094:	10ffffc4 	addi	r3,r2,-1
    a098:	80c00215 	stw	r3,8(r16)
    a09c:	183fed0e 	bge	r3,zero,a054 <putc+0x44>
    a0a0:	80800617 	ldw	r2,24(r16)
    a0a4:	18800f16 	blt	r3,r2,a0e4 <putc+0xd4>
    a0a8:	80800017 	ldw	r2,0(r16)
    a0ac:	14400005 	stb	r17,0(r2)
    a0b0:	81000017 	ldw	r4,0(r16)
    a0b4:	00800284 	movi	r2,10
    a0b8:	20c00003 	ldbu	r3,0(r4)
    a0bc:	18801226 	beq	r3,r2,a108 <putc+0xf8>
    a0c0:	20800044 	addi	r2,r4,1
    a0c4:	80800015 	stw	r2,0(r16)
    a0c8:	1805883a 	mov	r2,r3
    a0cc:	dfc00317 	ldw	ra,12(sp)
    a0d0:	dc800217 	ldw	r18,8(sp)
    a0d4:	dc400117 	ldw	r17,4(sp)
    a0d8:	dc000017 	ldw	r16,0(sp)
    a0dc:	dec00404 	addi	sp,sp,16
    a0e0:	f800283a 	ret
    a0e4:	91000017 	ldw	r4,0(r18)
    a0e8:	880b883a 	mov	r5,r17
    a0ec:	800d883a 	mov	r6,r16
    a0f0:	dfc00317 	ldw	ra,12(sp)
    a0f4:	dc800217 	ldw	r18,8(sp)
    a0f8:	dc400117 	ldw	r17,4(sp)
    a0fc:	dc000017 	ldw	r16,0(sp)
    a100:	dec00404 	addi	sp,sp,16
    a104:	000cd641 	jmpi	cd64 <__swbuf_r>
    a108:	91000017 	ldw	r4,0(r18)
    a10c:	180b883a 	mov	r5,r3
    a110:	003ff606 	br	a0ec <putc+0xdc>

0000a114 <_putc_r>:
    a114:	defffc04 	addi	sp,sp,-16
    a118:	dc400215 	stw	r17,8(sp)
    a11c:	dc000115 	stw	r16,4(sp)
    a120:	dfc00315 	stw	ra,12(sp)
    a124:	2021883a 	mov	r16,r4
    a128:	2823883a 	mov	r17,r5
    a12c:	20000226 	beq	r4,zero,a138 <_putc_r+0x24>
    a130:	20800e17 	ldw	r2,56(r4)
    a134:	10001026 	beq	r2,zero,a178 <_putc_r+0x64>
    a138:	30800217 	ldw	r2,8(r6)
    a13c:	10ffffc4 	addi	r3,r2,-1
    a140:	30c00215 	stw	r3,8(r6)
    a144:	18001316 	blt	r3,zero,a194 <_putc_r+0x80>
    a148:	30800017 	ldw	r2,0(r6)
    a14c:	14400005 	stb	r17,0(r2)
    a150:	30c00017 	ldw	r3,0(r6)
    a154:	18800044 	addi	r2,r3,1
    a158:	18c00003 	ldbu	r3,0(r3)
    a15c:	30800015 	stw	r2,0(r6)
    a160:	1805883a 	mov	r2,r3
    a164:	dfc00317 	ldw	ra,12(sp)
    a168:	dc400217 	ldw	r17,8(sp)
    a16c:	dc000117 	ldw	r16,4(sp)
    a170:	dec00404 	addi	sp,sp,16
    a174:	f800283a 	ret
    a178:	d9800015 	stw	r6,0(sp)
    a17c:	00015080 	call	1508 <__sinit>
    a180:	d9800017 	ldw	r6,0(sp)
    a184:	30800217 	ldw	r2,8(r6)
    a188:	10ffffc4 	addi	r3,r2,-1
    a18c:	30c00215 	stw	r3,8(r6)
    a190:	183fed0e 	bge	r3,zero,a148 <_putc_r+0x34>
    a194:	30800617 	ldw	r2,24(r6)
    a198:	18800e16 	blt	r3,r2,a1d4 <_putc_r+0xc0>
    a19c:	30800017 	ldw	r2,0(r6)
    a1a0:	14400005 	stb	r17,0(r2)
    a1a4:	31000017 	ldw	r4,0(r6)
    a1a8:	00800284 	movi	r2,10
    a1ac:	20c00003 	ldbu	r3,0(r4)
    a1b0:	18800f26 	beq	r3,r2,a1f0 <_putc_r+0xdc>
    a1b4:	20800044 	addi	r2,r4,1
    a1b8:	30800015 	stw	r2,0(r6)
    a1bc:	1805883a 	mov	r2,r3
    a1c0:	dfc00317 	ldw	ra,12(sp)
    a1c4:	dc400217 	ldw	r17,8(sp)
    a1c8:	dc000117 	ldw	r16,4(sp)
    a1cc:	dec00404 	addi	sp,sp,16
    a1d0:	f800283a 	ret
    a1d4:	8009883a 	mov	r4,r16
    a1d8:	880b883a 	mov	r5,r17
    a1dc:	dfc00317 	ldw	ra,12(sp)
    a1e0:	dc400217 	ldw	r17,8(sp)
    a1e4:	dc000117 	ldw	r16,4(sp)
    a1e8:	dec00404 	addi	sp,sp,16
    a1ec:	000cd641 	jmpi	cd64 <__swbuf_r>
    a1f0:	8009883a 	mov	r4,r16
    a1f4:	180b883a 	mov	r5,r3
    a1f8:	003ff806 	br	a1dc <_putc_r+0xc8>

0000a1fc <_read_r>:
    a1fc:	defffd04 	addi	sp,sp,-12
    a200:	dc000015 	stw	r16,0(sp)
    a204:	04000074 	movhi	r16,1
    a208:	841b9c04 	addi	r16,r16,28272
    a20c:	dc400115 	stw	r17,4(sp)
    a210:	80000015 	stw	zero,0(r16)
    a214:	2023883a 	mov	r17,r4
    a218:	2809883a 	mov	r4,r5
    a21c:	300b883a 	mov	r5,r6
    a220:	380d883a 	mov	r6,r7
    a224:	dfc00215 	stw	ra,8(sp)
    a228:	0010b7c0 	call	10b7c <read>
    a22c:	1007883a 	mov	r3,r2
    a230:	00bfffc4 	movi	r2,-1
    a234:	18800626 	beq	r3,r2,a250 <_read_r+0x54>
    a238:	1805883a 	mov	r2,r3
    a23c:	dfc00217 	ldw	ra,8(sp)
    a240:	dc400117 	ldw	r17,4(sp)
    a244:	dc000017 	ldw	r16,0(sp)
    a248:	dec00304 	addi	sp,sp,12
    a24c:	f800283a 	ret
    a250:	80800017 	ldw	r2,0(r16)
    a254:	103ff826 	beq	r2,zero,a238 <_read_r+0x3c>
    a258:	88800015 	stw	r2,0(r17)
    a25c:	1805883a 	mov	r2,r3
    a260:	dfc00217 	ldw	ra,8(sp)
    a264:	dc400117 	ldw	r17,4(sp)
    a268:	dc000017 	ldw	r16,0(sp)
    a26c:	dec00304 	addi	sp,sp,12
    a270:	f800283a 	ret

0000a274 <_realloc_r>:
    a274:	defff404 	addi	sp,sp,-48
    a278:	dd800815 	stw	r22,32(sp)
    a27c:	dc800415 	stw	r18,16(sp)
    a280:	dc400315 	stw	r17,12(sp)
    a284:	dfc00b15 	stw	ra,44(sp)
    a288:	df000a15 	stw	fp,40(sp)
    a28c:	ddc00915 	stw	r23,36(sp)
    a290:	dd400715 	stw	r21,28(sp)
    a294:	dd000615 	stw	r20,24(sp)
    a298:	dcc00515 	stw	r19,20(sp)
    a29c:	dc000215 	stw	r16,8(sp)
    a2a0:	2825883a 	mov	r18,r5
    a2a4:	3023883a 	mov	r17,r6
    a2a8:	202d883a 	mov	r22,r4
    a2ac:	2800c926 	beq	r5,zero,a5d4 <_realloc_r+0x360>
    a2b0:	0010b3c0 	call	10b3c <__malloc_lock>
    a2b4:	943ffe04 	addi	r16,r18,-8
    a2b8:	88c002c4 	addi	r3,r17,11
    a2bc:	00800584 	movi	r2,22
    a2c0:	82000117 	ldw	r8,4(r16)
    a2c4:	10c01b2e 	bgeu	r2,r3,a334 <_realloc_r+0xc0>
    a2c8:	00bffe04 	movi	r2,-8
    a2cc:	188e703a 	and	r7,r3,r2
    a2d0:	3839883a 	mov	fp,r7
    a2d4:	38001a16 	blt	r7,zero,a340 <_realloc_r+0xcc>
    a2d8:	e4401936 	bltu	fp,r17,a340 <_realloc_r+0xcc>
    a2dc:	013fff04 	movi	r4,-4
    a2e0:	4126703a 	and	r19,r8,r4
    a2e4:	99c02616 	blt	r19,r7,a380 <_realloc_r+0x10c>
    a2e8:	802b883a 	mov	r21,r16
    a2ec:	9829883a 	mov	r20,r19
    a2f0:	84000204 	addi	r16,r16,8
    a2f4:	a80f883a 	mov	r7,r21
    a2f8:	a70dc83a 	sub	r6,r20,fp
    a2fc:	008003c4 	movi	r2,15
    a300:	1180c136 	bltu	r2,r6,a608 <_realloc_r+0x394>
    a304:	38800117 	ldw	r2,4(r7)
    a308:	a549883a 	add	r4,r20,r21
    a30c:	1080004c 	andi	r2,r2,1
    a310:	a084b03a 	or	r2,r20,r2
    a314:	38800115 	stw	r2,4(r7)
    a318:	20c00117 	ldw	r3,4(r4)
    a31c:	18c00054 	ori	r3,r3,1
    a320:	20c00115 	stw	r3,4(r4)
    a324:	b009883a 	mov	r4,r22
    a328:	0010b5c0 	call	10b5c <__malloc_unlock>
    a32c:	8023883a 	mov	r17,r16
    a330:	00000606 	br	a34c <_realloc_r+0xd8>
    a334:	01c00404 	movi	r7,16
    a338:	3839883a 	mov	fp,r7
    a33c:	e47fe72e 	bgeu	fp,r17,a2dc <_realloc_r+0x68>
    a340:	00800304 	movi	r2,12
    a344:	0023883a 	mov	r17,zero
    a348:	b0800015 	stw	r2,0(r22)
    a34c:	8805883a 	mov	r2,r17
    a350:	dfc00b17 	ldw	ra,44(sp)
    a354:	df000a17 	ldw	fp,40(sp)
    a358:	ddc00917 	ldw	r23,36(sp)
    a35c:	dd800817 	ldw	r22,32(sp)
    a360:	dd400717 	ldw	r21,28(sp)
    a364:	dd000617 	ldw	r20,24(sp)
    a368:	dcc00517 	ldw	r19,20(sp)
    a36c:	dc800417 	ldw	r18,16(sp)
    a370:	dc400317 	ldw	r17,12(sp)
    a374:	dc000217 	ldw	r16,8(sp)
    a378:	dec00c04 	addi	sp,sp,48
    a37c:	f800283a 	ret
    a380:	00800074 	movhi	r2,1
    a384:	108f4604 	addi	r2,r2,15640
    a388:	12400217 	ldw	r9,8(r2)
    a38c:	84cd883a 	add	r6,r16,r19
    a390:	802b883a 	mov	r21,r16
    a394:	3240b926 	beq	r6,r9,a67c <_realloc_r+0x408>
    a398:	31400117 	ldw	r5,4(r6)
    a39c:	00bfff84 	movi	r2,-2
    a3a0:	2884703a 	and	r2,r5,r2
    a3a4:	1185883a 	add	r2,r2,r6
    a3a8:	10c00117 	ldw	r3,4(r2)
    a3ac:	18c0004c 	andi	r3,r3,1
    a3b0:	1807003a 	cmpeq	r3,r3,zero
    a3b4:	1800a326 	beq	r3,zero,a644 <_realloc_r+0x3d0>
    a3b8:	2908703a 	and	r4,r5,r4
    a3bc:	9929883a 	add	r20,r19,r4
    a3c0:	a1c0a30e 	bge	r20,r7,a650 <_realloc_r+0x3dc>
    a3c4:	4080004c 	andi	r2,r8,1
    a3c8:	1000551e 	bne	r2,zero,a520 <_realloc_r+0x2ac>
    a3cc:	80800017 	ldw	r2,0(r16)
    a3d0:	80afc83a 	sub	r23,r16,r2
    a3d4:	b8c00117 	ldw	r3,4(r23)
    a3d8:	00bfff04 	movi	r2,-4
    a3dc:	1884703a 	and	r2,r3,r2
    a3e0:	30002e26 	beq	r6,zero,a49c <_realloc_r+0x228>
    a3e4:	3240b926 	beq	r6,r9,a6cc <_realloc_r+0x458>
    a3e8:	98a9883a 	add	r20,r19,r2
    a3ec:	2509883a 	add	r4,r4,r20
    a3f0:	d9000015 	stw	r4,0(sp)
    a3f4:	21c02a16 	blt	r4,r7,a4a0 <_realloc_r+0x22c>
    a3f8:	30800317 	ldw	r2,12(r6)
    a3fc:	30c00217 	ldw	r3,8(r6)
    a400:	01400904 	movi	r5,36
    a404:	99bfff04 	addi	r6,r19,-4
    a408:	18800315 	stw	r2,12(r3)
    a40c:	10c00215 	stw	r3,8(r2)
    a410:	b9000317 	ldw	r4,12(r23)
    a414:	b8800217 	ldw	r2,8(r23)
    a418:	b82b883a 	mov	r21,r23
    a41c:	bc000204 	addi	r16,r23,8
    a420:	20800215 	stw	r2,8(r4)
    a424:	11000315 	stw	r4,12(r2)
    a428:	2980e436 	bltu	r5,r6,a7bc <_realloc_r+0x548>
    a42c:	008004c4 	movi	r2,19
    a430:	9009883a 	mov	r4,r18
    a434:	8011883a 	mov	r8,r16
    a438:	11800f2e 	bgeu	r2,r6,a478 <_realloc_r+0x204>
    a43c:	90800017 	ldw	r2,0(r18)
    a440:	ba000404 	addi	r8,r23,16
    a444:	91000204 	addi	r4,r18,8
    a448:	b8800215 	stw	r2,8(r23)
    a44c:	90c00117 	ldw	r3,4(r18)
    a450:	008006c4 	movi	r2,27
    a454:	b8c00315 	stw	r3,12(r23)
    a458:	1180072e 	bgeu	r2,r6,a478 <_realloc_r+0x204>
    a45c:	90c00217 	ldw	r3,8(r18)
    a460:	ba000604 	addi	r8,r23,24
    a464:	91000404 	addi	r4,r18,16
    a468:	b8c00415 	stw	r3,16(r23)
    a46c:	90800317 	ldw	r2,12(r18)
    a470:	b8800515 	stw	r2,20(r23)
    a474:	3140e726 	beq	r6,r5,a814 <_realloc_r+0x5a0>
    a478:	20800017 	ldw	r2,0(r4)
    a47c:	dd000017 	ldw	r20,0(sp)
    a480:	b80f883a 	mov	r7,r23
    a484:	40800015 	stw	r2,0(r8)
    a488:	20c00117 	ldw	r3,4(r4)
    a48c:	40c00115 	stw	r3,4(r8)
    a490:	20800217 	ldw	r2,8(r4)
    a494:	40800215 	stw	r2,8(r8)
    a498:	003f9706 	br	a2f8 <_realloc_r+0x84>
    a49c:	98a9883a 	add	r20,r19,r2
    a4a0:	a1c01f16 	blt	r20,r7,a520 <_realloc_r+0x2ac>
    a4a4:	b8c00317 	ldw	r3,12(r23)
    a4a8:	b8800217 	ldw	r2,8(r23)
    a4ac:	99bfff04 	addi	r6,r19,-4
    a4b0:	01400904 	movi	r5,36
    a4b4:	b82b883a 	mov	r21,r23
    a4b8:	18800215 	stw	r2,8(r3)
    a4bc:	10c00315 	stw	r3,12(r2)
    a4c0:	bc000204 	addi	r16,r23,8
    a4c4:	2980c336 	bltu	r5,r6,a7d4 <_realloc_r+0x560>
    a4c8:	008004c4 	movi	r2,19
    a4cc:	9009883a 	mov	r4,r18
    a4d0:	8011883a 	mov	r8,r16
    a4d4:	11800f2e 	bgeu	r2,r6,a514 <_realloc_r+0x2a0>
    a4d8:	90800017 	ldw	r2,0(r18)
    a4dc:	ba000404 	addi	r8,r23,16
    a4e0:	91000204 	addi	r4,r18,8
    a4e4:	b8800215 	stw	r2,8(r23)
    a4e8:	90c00117 	ldw	r3,4(r18)
    a4ec:	008006c4 	movi	r2,27
    a4f0:	b8c00315 	stw	r3,12(r23)
    a4f4:	1180072e 	bgeu	r2,r6,a514 <_realloc_r+0x2a0>
    a4f8:	90c00217 	ldw	r3,8(r18)
    a4fc:	ba000604 	addi	r8,r23,24
    a500:	91000404 	addi	r4,r18,16
    a504:	b8c00415 	stw	r3,16(r23)
    a508:	90800317 	ldw	r2,12(r18)
    a50c:	b8800515 	stw	r2,20(r23)
    a510:	3140c726 	beq	r6,r5,a830 <_realloc_r+0x5bc>
    a514:	20800017 	ldw	r2,0(r4)
    a518:	b80f883a 	mov	r7,r23
    a51c:	003fd906 	br	a484 <_realloc_r+0x210>
    a520:	880b883a 	mov	r5,r17
    a524:	b009883a 	mov	r4,r22
    a528:	00018e00 	call	18e0 <_malloc_r>
    a52c:	1023883a 	mov	r17,r2
    a530:	10002526 	beq	r2,zero,a5c8 <_realloc_r+0x354>
    a534:	80800117 	ldw	r2,4(r16)
    a538:	00ffff84 	movi	r3,-2
    a53c:	893ffe04 	addi	r4,r17,-8
    a540:	10c4703a 	and	r2,r2,r3
    a544:	8085883a 	add	r2,r16,r2
    a548:	20809526 	beq	r4,r2,a7a0 <_realloc_r+0x52c>
    a54c:	99bfff04 	addi	r6,r19,-4
    a550:	01c00904 	movi	r7,36
    a554:	39804536 	bltu	r7,r6,a66c <_realloc_r+0x3f8>
    a558:	008004c4 	movi	r2,19
    a55c:	9009883a 	mov	r4,r18
    a560:	880b883a 	mov	r5,r17
    a564:	11800f2e 	bgeu	r2,r6,a5a4 <_realloc_r+0x330>
    a568:	90800017 	ldw	r2,0(r18)
    a56c:	89400204 	addi	r5,r17,8
    a570:	91000204 	addi	r4,r18,8
    a574:	88800015 	stw	r2,0(r17)
    a578:	90c00117 	ldw	r3,4(r18)
    a57c:	008006c4 	movi	r2,27
    a580:	88c00115 	stw	r3,4(r17)
    a584:	1180072e 	bgeu	r2,r6,a5a4 <_realloc_r+0x330>
    a588:	90c00217 	ldw	r3,8(r18)
    a58c:	89400404 	addi	r5,r17,16
    a590:	91000404 	addi	r4,r18,16
    a594:	88c00215 	stw	r3,8(r17)
    a598:	90800317 	ldw	r2,12(r18)
    a59c:	88800315 	stw	r2,12(r17)
    a5a0:	31c09126 	beq	r6,r7,a7e8 <_realloc_r+0x574>
    a5a4:	20800017 	ldw	r2,0(r4)
    a5a8:	28800015 	stw	r2,0(r5)
    a5ac:	20c00117 	ldw	r3,4(r4)
    a5b0:	28c00115 	stw	r3,4(r5)
    a5b4:	20800217 	ldw	r2,8(r4)
    a5b8:	28800215 	stw	r2,8(r5)
    a5bc:	900b883a 	mov	r5,r18
    a5c0:	b009883a 	mov	r4,r22
    a5c4:	00083900 	call	8390 <_free_r>
    a5c8:	b009883a 	mov	r4,r22
    a5cc:	0010b5c0 	call	10b5c <__malloc_unlock>
    a5d0:	003f5e06 	br	a34c <_realloc_r+0xd8>
    a5d4:	300b883a 	mov	r5,r6
    a5d8:	dfc00b17 	ldw	ra,44(sp)
    a5dc:	df000a17 	ldw	fp,40(sp)
    a5e0:	ddc00917 	ldw	r23,36(sp)
    a5e4:	dd800817 	ldw	r22,32(sp)
    a5e8:	dd400717 	ldw	r21,28(sp)
    a5ec:	dd000617 	ldw	r20,24(sp)
    a5f0:	dcc00517 	ldw	r19,20(sp)
    a5f4:	dc800417 	ldw	r18,16(sp)
    a5f8:	dc400317 	ldw	r17,12(sp)
    a5fc:	dc000217 	ldw	r16,8(sp)
    a600:	dec00c04 	addi	sp,sp,48
    a604:	00018e01 	jmpi	18e0 <_malloc_r>
    a608:	38800117 	ldw	r2,4(r7)
    a60c:	e54b883a 	add	r5,fp,r21
    a610:	31000054 	ori	r4,r6,1
    a614:	1080004c 	andi	r2,r2,1
    a618:	1704b03a 	or	r2,r2,fp
    a61c:	38800115 	stw	r2,4(r7)
    a620:	29000115 	stw	r4,4(r5)
    a624:	2987883a 	add	r3,r5,r6
    a628:	18800117 	ldw	r2,4(r3)
    a62c:	29400204 	addi	r5,r5,8
    a630:	b009883a 	mov	r4,r22
    a634:	10800054 	ori	r2,r2,1
    a638:	18800115 	stw	r2,4(r3)
    a63c:	00083900 	call	8390 <_free_r>
    a640:	003f3806 	br	a324 <_realloc_r+0xb0>
    a644:	000d883a 	mov	r6,zero
    a648:	0009883a 	mov	r4,zero
    a64c:	003f5d06 	br	a3c4 <_realloc_r+0x150>
    a650:	30c00217 	ldw	r3,8(r6)
    a654:	30800317 	ldw	r2,12(r6)
    a658:	800f883a 	mov	r7,r16
    a65c:	84000204 	addi	r16,r16,8
    a660:	10c00215 	stw	r3,8(r2)
    a664:	18800315 	stw	r2,12(r3)
    a668:	003f2306 	br	a2f8 <_realloc_r+0x84>
    a66c:	8809883a 	mov	r4,r17
    a670:	900b883a 	mov	r5,r18
    a674:	0008f3c0 	call	8f3c <memmove>
    a678:	003fd006 	br	a5bc <_realloc_r+0x348>
    a67c:	30800117 	ldw	r2,4(r6)
    a680:	e0c00404 	addi	r3,fp,16
    a684:	1108703a 	and	r4,r2,r4
    a688:	9905883a 	add	r2,r19,r4
    a68c:	10ff4d16 	blt	r2,r3,a3c4 <_realloc_r+0x150>
    a690:	1705c83a 	sub	r2,r2,fp
    a694:	870b883a 	add	r5,r16,fp
    a698:	10800054 	ori	r2,r2,1
    a69c:	28800115 	stw	r2,4(r5)
    a6a0:	80c00117 	ldw	r3,4(r16)
    a6a4:	00800074 	movhi	r2,1
    a6a8:	108f4604 	addi	r2,r2,15640
    a6ac:	b009883a 	mov	r4,r22
    a6b0:	18c0004c 	andi	r3,r3,1
    a6b4:	e0c6b03a 	or	r3,fp,r3
    a6b8:	11400215 	stw	r5,8(r2)
    a6bc:	80c00115 	stw	r3,4(r16)
    a6c0:	0010b5c0 	call	10b5c <__malloc_unlock>
    a6c4:	84400204 	addi	r17,r16,8
    a6c8:	003f2006 	br	a34c <_realloc_r+0xd8>
    a6cc:	98a9883a 	add	r20,r19,r2
    a6d0:	2509883a 	add	r4,r4,r20
    a6d4:	e0800404 	addi	r2,fp,16
    a6d8:	d9000115 	stw	r4,4(sp)
    a6dc:	20bf7016 	blt	r4,r2,a4a0 <_realloc_r+0x22c>
    a6e0:	b8c00317 	ldw	r3,12(r23)
    a6e4:	b8800217 	ldw	r2,8(r23)
    a6e8:	99bfff04 	addi	r6,r19,-4
    a6ec:	01400904 	movi	r5,36
    a6f0:	18800215 	stw	r2,8(r3)
    a6f4:	10c00315 	stw	r3,12(r2)
    a6f8:	bc400204 	addi	r17,r23,8
    a6fc:	29804136 	bltu	r5,r6,a804 <_realloc_r+0x590>
    a700:	008004c4 	movi	r2,19
    a704:	9009883a 	mov	r4,r18
    a708:	880f883a 	mov	r7,r17
    a70c:	11800f2e 	bgeu	r2,r6,a74c <_realloc_r+0x4d8>
    a710:	90800017 	ldw	r2,0(r18)
    a714:	b9c00404 	addi	r7,r23,16
    a718:	91000204 	addi	r4,r18,8
    a71c:	b8800215 	stw	r2,8(r23)
    a720:	90c00117 	ldw	r3,4(r18)
    a724:	008006c4 	movi	r2,27
    a728:	b8c00315 	stw	r3,12(r23)
    a72c:	1180072e 	bgeu	r2,r6,a74c <_realloc_r+0x4d8>
    a730:	90c00217 	ldw	r3,8(r18)
    a734:	b9c00604 	addi	r7,r23,24
    a738:	91000404 	addi	r4,r18,16
    a73c:	b8c00415 	stw	r3,16(r23)
    a740:	90800317 	ldw	r2,12(r18)
    a744:	b8800515 	stw	r2,20(r23)
    a748:	31404026 	beq	r6,r5,a84c <_realloc_r+0x5d8>
    a74c:	20800017 	ldw	r2,0(r4)
    a750:	38800015 	stw	r2,0(r7)
    a754:	20c00117 	ldw	r3,4(r4)
    a758:	38c00115 	stw	r3,4(r7)
    a75c:	20800217 	ldw	r2,8(r4)
    a760:	38800215 	stw	r2,8(r7)
    a764:	d8c00117 	ldw	r3,4(sp)
    a768:	bf0b883a 	add	r5,r23,fp
    a76c:	b009883a 	mov	r4,r22
    a770:	1f05c83a 	sub	r2,r3,fp
    a774:	10800054 	ori	r2,r2,1
    a778:	28800115 	stw	r2,4(r5)
    a77c:	b8c00117 	ldw	r3,4(r23)
    a780:	00800074 	movhi	r2,1
    a784:	108f4604 	addi	r2,r2,15640
    a788:	11400215 	stw	r5,8(r2)
    a78c:	18c0004c 	andi	r3,r3,1
    a790:	e0c6b03a 	or	r3,fp,r3
    a794:	b8c00115 	stw	r3,4(r23)
    a798:	0010b5c0 	call	10b5c <__malloc_unlock>
    a79c:	003eeb06 	br	a34c <_realloc_r+0xd8>
    a7a0:	20800117 	ldw	r2,4(r4)
    a7a4:	00ffff04 	movi	r3,-4
    a7a8:	800f883a 	mov	r7,r16
    a7ac:	10c4703a 	and	r2,r2,r3
    a7b0:	98a9883a 	add	r20,r19,r2
    a7b4:	84000204 	addi	r16,r16,8
    a7b8:	003ecf06 	br	a2f8 <_realloc_r+0x84>
    a7bc:	900b883a 	mov	r5,r18
    a7c0:	8009883a 	mov	r4,r16
    a7c4:	0008f3c0 	call	8f3c <memmove>
    a7c8:	dd000017 	ldw	r20,0(sp)
    a7cc:	b80f883a 	mov	r7,r23
    a7d0:	003ec906 	br	a2f8 <_realloc_r+0x84>
    a7d4:	900b883a 	mov	r5,r18
    a7d8:	8009883a 	mov	r4,r16
    a7dc:	0008f3c0 	call	8f3c <memmove>
    a7e0:	b80f883a 	mov	r7,r23
    a7e4:	003ec406 	br	a2f8 <_realloc_r+0x84>
    a7e8:	90c00417 	ldw	r3,16(r18)
    a7ec:	89400604 	addi	r5,r17,24
    a7f0:	91000604 	addi	r4,r18,24
    a7f4:	88c00415 	stw	r3,16(r17)
    a7f8:	90800517 	ldw	r2,20(r18)
    a7fc:	88800515 	stw	r2,20(r17)
    a800:	003f6806 	br	a5a4 <_realloc_r+0x330>
    a804:	900b883a 	mov	r5,r18
    a808:	8809883a 	mov	r4,r17
    a80c:	0008f3c0 	call	8f3c <memmove>
    a810:	003fd406 	br	a764 <_realloc_r+0x4f0>
    a814:	90c00417 	ldw	r3,16(r18)
    a818:	91000604 	addi	r4,r18,24
    a81c:	ba000804 	addi	r8,r23,32
    a820:	b8c00615 	stw	r3,24(r23)
    a824:	90800517 	ldw	r2,20(r18)
    a828:	b8800715 	stw	r2,28(r23)
    a82c:	003f1206 	br	a478 <_realloc_r+0x204>
    a830:	90c00417 	ldw	r3,16(r18)
    a834:	91000604 	addi	r4,r18,24
    a838:	ba000804 	addi	r8,r23,32
    a83c:	b8c00615 	stw	r3,24(r23)
    a840:	90800517 	ldw	r2,20(r18)
    a844:	b8800715 	stw	r2,28(r23)
    a848:	003f3206 	br	a514 <_realloc_r+0x2a0>
    a84c:	90c00417 	ldw	r3,16(r18)
    a850:	91000604 	addi	r4,r18,24
    a854:	b9c00804 	addi	r7,r23,32
    a858:	b8c00615 	stw	r3,24(r23)
    a85c:	90800517 	ldw	r2,20(r18)
    a860:	b8800715 	stw	r2,28(r23)
    a864:	003fb906 	br	a74c <_realloc_r+0x4d8>

0000a868 <__isinfd>:
    a868:	200d883a 	mov	r6,r4
    a86c:	0109c83a 	sub	r4,zero,r4
    a870:	2188b03a 	or	r4,r4,r6
    a874:	2008d7fa 	srli	r4,r4,31
    a878:	00a00034 	movhi	r2,32768
    a87c:	10bfffc4 	addi	r2,r2,-1
    a880:	1144703a 	and	r2,r2,r5
    a884:	2088b03a 	or	r4,r4,r2
    a888:	009ffc34 	movhi	r2,32752
    a88c:	1105c83a 	sub	r2,r2,r4
    a890:	0087c83a 	sub	r3,zero,r2
    a894:	10c4b03a 	or	r2,r2,r3
    a898:	1004d7fa 	srli	r2,r2,31
    a89c:	00c00044 	movi	r3,1
    a8a0:	1885c83a 	sub	r2,r3,r2
    a8a4:	f800283a 	ret

0000a8a8 <__isnand>:
    a8a8:	200d883a 	mov	r6,r4
    a8ac:	0109c83a 	sub	r4,zero,r4
    a8b0:	2188b03a 	or	r4,r4,r6
    a8b4:	2008d7fa 	srli	r4,r4,31
    a8b8:	00a00034 	movhi	r2,32768
    a8bc:	10bfffc4 	addi	r2,r2,-1
    a8c0:	1144703a 	and	r2,r2,r5
    a8c4:	2088b03a 	or	r4,r4,r2
    a8c8:	009ffc34 	movhi	r2,32752
    a8cc:	1105c83a 	sub	r2,r2,r4
    a8d0:	1004d7fa 	srli	r2,r2,31
    a8d4:	f800283a 	ret

0000a8d8 <__sccl>:
    a8d8:	28c00003 	ldbu	r3,0(r5)
    a8dc:	00801784 	movi	r2,94
    a8e0:	2a000044 	addi	r8,r5,1
    a8e4:	18802526 	beq	r3,r2,a97c <__sccl+0xa4>
    a8e8:	180f883a 	mov	r7,r3
    a8ec:	0013883a 	mov	r9,zero
    a8f0:	000d883a 	mov	r6,zero
    a8f4:	0007883a 	mov	r3,zero
    a8f8:	01404004 	movi	r5,256
    a8fc:	1905883a 	add	r2,r3,r4
    a900:	18c00044 	addi	r3,r3,1
    a904:	11800005 	stb	r6,0(r2)
    a908:	197ffc1e 	bne	r3,r5,a8fc <__sccl+0x24>
    a90c:	38000c26 	beq	r7,zero,a940 <__sccl+0x68>
    a910:	00800044 	movi	r2,1
    a914:	124dc83a 	sub	r6,r2,r9
    a918:	3905883a 	add	r2,r7,r4
    a91c:	11800005 	stb	r6,0(r2)
    a920:	41400044 	addi	r5,r8,1
    a924:	02400b44 	movi	r9,45
    a928:	02801744 	movi	r10,93
    a92c:	28bfffc3 	ldbu	r2,-1(r5)
    a930:	2811883a 	mov	r8,r5
    a934:	12400726 	beq	r2,r9,a954 <__sccl+0x7c>
    a938:	12800226 	beq	r2,r10,a944 <__sccl+0x6c>
    a93c:	1000031e 	bne	r2,zero,a94c <__sccl+0x74>
    a940:	423fffc4 	addi	r8,r8,-1
    a944:	4005883a 	mov	r2,r8
    a948:	f800283a 	ret
    a94c:	100f883a 	mov	r7,r2
    a950:	003ff106 	br	a918 <__sccl+0x40>
    a954:	28c00003 	ldbu	r3,0(r5)
    a958:	1a800d26 	beq	r3,r10,a990 <__sccl+0xb8>
    a95c:	19c00c16 	blt	r3,r7,a990 <__sccl+0xb8>
    a960:	21c5883a 	add	r2,r4,r7
    a964:	39c00044 	addi	r7,r7,1
    a968:	11800045 	stb	r6,1(r2)
    a96c:	10800044 	addi	r2,r2,1
    a970:	38fffc16 	blt	r7,r3,a964 <__sccl+0x8c>
    a974:	29400084 	addi	r5,r5,2
    a978:	003fec06 	br	a92c <__sccl+0x54>
    a97c:	29c00043 	ldbu	r7,1(r5)
    a980:	02400044 	movi	r9,1
    a984:	2a000084 	addi	r8,r5,2
    a988:	480d883a 	mov	r6,r9
    a98c:	003fd906 	br	a8f4 <__sccl+0x1c>
    a990:	01c00b44 	movi	r7,45
    a994:	003fe006 	br	a918 <__sccl+0x40>

0000a998 <nanf>:
    a998:	009ff034 	movhi	r2,32704
    a99c:	f800283a 	ret

0000a9a0 <match>:
    a9a0:	21800017 	ldw	r6,0(r4)
    a9a4:	01c01004 	movi	r7,64
    a9a8:	02001684 	movi	r8,90
    a9ac:	28800007 	ldb	r2,0(r5)
    a9b0:	29400044 	addi	r5,r5,1
    a9b4:	10000826 	beq	r2,zero,a9d8 <match+0x38>
    a9b8:	31800044 	addi	r6,r6,1
    a9bc:	30c00007 	ldb	r3,0(r6)
    a9c0:	38c0020e 	bge	r7,r3,a9cc <match+0x2c>
    a9c4:	40c00116 	blt	r8,r3,a9cc <match+0x2c>
    a9c8:	18c00804 	addi	r3,r3,32
    a9cc:	18bff726 	beq	r3,r2,a9ac <match+0xc>
    a9d0:	0005883a 	mov	r2,zero
    a9d4:	f800283a 	ret
    a9d8:	30800044 	addi	r2,r6,1
    a9dc:	20800015 	stw	r2,0(r4)
    a9e0:	00800044 	movi	r2,1
    a9e4:	f800283a 	ret

0000a9e8 <_strtod_r>:
    a9e8:	deffde04 	addi	sp,sp,-136
    a9ec:	df002015 	stw	fp,128(sp)
    a9f0:	dd401d15 	stw	r21,116(sp)
    a9f4:	dc401915 	stw	r17,100(sp)
    a9f8:	dfc02115 	stw	ra,132(sp)
    a9fc:	ddc01f15 	stw	r23,124(sp)
    aa00:	dd801e15 	stw	r22,120(sp)
    aa04:	dd001c15 	stw	r20,112(sp)
    aa08:	dcc01b15 	stw	r19,108(sp)
    aa0c:	dc801a15 	stw	r18,104(sp)
    aa10:	dc001815 	stw	r16,96(sp)
    aa14:	2823883a 	mov	r17,r5
    aa18:	202b883a 	mov	r21,r4
    aa1c:	d9801515 	stw	r6,84(sp)
    aa20:	d8000915 	stw	zero,36(sp)
    aa24:	d8000a15 	stw	zero,40(sp)
    aa28:	d9400415 	stw	r5,16(sp)
    aa2c:	df000904 	addi	fp,sp,36
    aa30:	da000417 	ldw	r8,16(sp)
    aa34:	00800b44 	movi	r2,45
    aa38:	40c00003 	ldbu	r3,0(r8)
    aa3c:	10c03536 	bltu	r2,r3,ab14 <_strtod_r+0x12c>
    aa40:	18c5883a 	add	r2,r3,r3
    aa44:	1085883a 	add	r2,r2,r2
    aa48:	00c00074 	movhi	r3,1
    aa4c:	18ea9704 	addi	r3,r3,-21924
    aa50:	10c5883a 	add	r2,r2,r3
    aa54:	11000017 	ldw	r4,0(r2)
    aa58:	2000683a 	jmp	r4
    aa5c:	0000ac50 	cmplti	zero,zero,689
    aa60:	0000ab14 	movui	zero,684
    aa64:	0000ab14 	movui	zero,684
    aa68:	0000ab14 	movui	zero,684
    aa6c:	0000ab14 	movui	zero,684
    aa70:	0000ab14 	movui	zero,684
    aa74:	0000ab14 	movui	zero,684
    aa78:	0000ab14 	movui	zero,684
    aa7c:	0000ab14 	movui	zero,684
    aa80:	0000af68 	cmpgeui	zero,zero,701
    aa84:	0000af68 	cmpgeui	zero,zero,701
    aa88:	0000af68 	cmpgeui	zero,zero,701
    aa8c:	0000af68 	cmpgeui	zero,zero,701
    aa90:	0000af68 	cmpgeui	zero,zero,701
    aa94:	0000ab14 	movui	zero,684
    aa98:	0000ab14 	movui	zero,684
    aa9c:	0000ab14 	movui	zero,684
    aaa0:	0000ab14 	movui	zero,684
    aaa4:	0000ab14 	movui	zero,684
    aaa8:	0000ab14 	movui	zero,684
    aaac:	0000ab14 	movui	zero,684
    aab0:	0000ab14 	movui	zero,684
    aab4:	0000ab14 	movui	zero,684
    aab8:	0000ab14 	movui	zero,684
    aabc:	0000ab14 	movui	zero,684
    aac0:	0000ab14 	movui	zero,684
    aac4:	0000ab14 	movui	zero,684
    aac8:	0000ab14 	movui	zero,684
    aacc:	0000ab14 	movui	zero,684
    aad0:	0000ab14 	movui	zero,684
    aad4:	0000ab14 	movui	zero,684
    aad8:	0000ab14 	movui	zero,684
    aadc:	0000af68 	cmpgeui	zero,zero,701
    aae0:	0000ab14 	movui	zero,684
    aae4:	0000ab14 	movui	zero,684
    aae8:	0000ab14 	movui	zero,684
    aaec:	0000ab14 	movui	zero,684
    aaf0:	0000ab14 	movui	zero,684
    aaf4:	0000ab14 	movui	zero,684
    aaf8:	0000ab14 	movui	zero,684
    aafc:	0000ab14 	movui	zero,684
    ab00:	0000ab14 	movui	zero,684
    ab04:	0000ab14 	movui	zero,684
    ab08:	0000af48 	cmpgei	zero,zero,701
    ab0c:	0000ab14 	movui	zero,684
    ab10:	0000af74 	movhi	zero,701
    ab14:	d8001115 	stw	zero,68(sp)
    ab18:	40c00007 	ldb	r3,0(r8)
    ab1c:	00800c04 	movi	r2,48
    ab20:	1880d026 	beq	r3,r2,ae64 <_strtod_r+0x47c>
    ab24:	001f883a 	mov	r15,zero
    ab28:	41000007 	ldb	r4,0(r8)
    ab2c:	00c00bc4 	movi	r3,47
    ab30:	402d883a 	mov	r22,r8
    ab34:	1903470e 	bge	r3,r4,b854 <_strtod_r+0xe6c>
    ab38:	00800e44 	movi	r2,57
    ab3c:	11034516 	blt	r2,r4,b854 <_strtod_r+0xe6c>
    ab40:	180f883a 	mov	r7,r3
    ab44:	1013883a 	mov	r9,r2
    ab48:	4007883a 	mov	r3,r8
    ab4c:	000d883a 	mov	r6,zero
    ab50:	0029883a 	mov	r20,zero
    ab54:	0021883a 	mov	r16,zero
    ab58:	01400204 	movi	r5,8
    ab5c:	028003c4 	movi	r10,15
    ab60:	29803116 	blt	r5,r6,ac28 <_strtod_r+0x240>
    ab64:	a08002a4 	muli	r2,r20,10
    ab68:	1105883a 	add	r2,r2,r4
    ab6c:	153ff404 	addi	r20,r2,-48
    ab70:	1a000044 	addi	r8,r3,1
    ab74:	da000415 	stw	r8,16(sp)
    ab78:	41000007 	ldb	r4,0(r8)
    ab7c:	31800044 	addi	r6,r6,1
    ab80:	4007883a 	mov	r3,r8
    ab84:	3900010e 	bge	r7,r4,ab8c <_strtod_r+0x1a4>
    ab88:	493ff50e 	bge	r9,r4,ab60 <_strtod_r+0x178>
    ab8c:	00800b84 	movi	r2,46
    ab90:	2080c126 	beq	r4,r2,ae98 <_strtod_r+0x4b0>
    ab94:	3027883a 	mov	r19,r6
    ab98:	0025883a 	mov	r18,zero
    ab9c:	0015883a 	mov	r10,zero
    aba0:	000f883a 	mov	r7,zero
    aba4:	00801944 	movi	r2,101
    aba8:	20802426 	beq	r4,r2,ac3c <_strtod_r+0x254>
    abac:	00801144 	movi	r2,69
    abb0:	20802226 	beq	r4,r2,ac3c <_strtod_r+0x254>
    abb4:	9816c03a 	cmpne	r11,r19,zero
    abb8:	000b883a 	mov	r5,zero
    abbc:	5800631e 	bne	r11,zero,ad4c <_strtod_r+0x364>
    abc0:	3800c126 	beq	r7,zero,aec8 <_strtod_r+0x4e0>
    abc4:	d8c01517 	ldw	r3,84(sp)
    abc8:	18000226 	beq	r3,zero,abd4 <_strtod_r+0x1ec>
    abcc:	d8800417 	ldw	r2,16(sp)
    abd0:	18800015 	stw	r2,0(r3)
    abd4:	d9001117 	ldw	r4,68(sp)
    abd8:	2005003a 	cmpeq	r2,r4,zero
    abdc:	10001f1e 	bne	r2,zero,ac5c <_strtod_r+0x274>
    abe0:	e0800017 	ldw	r2,0(fp)
    abe4:	e0c00117 	ldw	r3,4(fp)
    abe8:	1009883a 	mov	r4,r2
    abec:	1960003c 	xorhi	r5,r3,32768
    abf0:	2005883a 	mov	r2,r4
    abf4:	2807883a 	mov	r3,r5
    abf8:	dfc02117 	ldw	ra,132(sp)
    abfc:	df002017 	ldw	fp,128(sp)
    ac00:	ddc01f17 	ldw	r23,124(sp)
    ac04:	dd801e17 	ldw	r22,120(sp)
    ac08:	dd401d17 	ldw	r21,116(sp)
    ac0c:	dd001c17 	ldw	r20,112(sp)
    ac10:	dcc01b17 	ldw	r19,108(sp)
    ac14:	dc801a17 	ldw	r18,104(sp)
    ac18:	dc401917 	ldw	r17,100(sp)
    ac1c:	dc001817 	ldw	r16,96(sp)
    ac20:	dec02204 	addi	sp,sp,136
    ac24:	f800283a 	ret
    ac28:	51bfd116 	blt	r10,r6,ab70 <_strtod_r+0x188>
    ac2c:	808002a4 	muli	r2,r16,10
    ac30:	1105883a 	add	r2,r2,r4
    ac34:	143ff404 	addi	r16,r2,-48
    ac38:	003fcd06 	br	ab70 <_strtod_r+0x188>
    ac3c:	9816c03a 	cmpne	r11,r19,zero
    ac40:	5800091e 	bne	r11,zero,ac68 <_strtod_r+0x280>
    ac44:	3800081e 	bne	r7,zero,ac68 <_strtod_r+0x280>
    ac48:	7805003a 	cmpeq	r2,r15,zero
    ac4c:	10000626 	beq	r2,zero,ac68 <_strtod_r+0x280>
    ac50:	d8001115 	stw	zero,68(sp)
    ac54:	dc400415 	stw	r17,16(sp)
    ac58:	003fda06 	br	abc4 <_strtod_r+0x1dc>
    ac5c:	e1000017 	ldw	r4,0(fp)
    ac60:	e1400117 	ldw	r5,4(fp)
    ac64:	003fe206 	br	abf0 <_strtod_r+0x208>
    ac68:	dc400417 	ldw	r17,16(sp)
    ac6c:	00800ac4 	movi	r2,43
    ac70:	8a000044 	addi	r8,r17,1
    ac74:	da000415 	stw	r8,16(sp)
    ac78:	88c00047 	ldb	r3,1(r17)
    ac7c:	4009883a 	mov	r4,r8
    ac80:	1880bf26 	beq	r3,r2,af80 <_strtod_r+0x598>
    ac84:	00800b44 	movi	r2,45
    ac88:	18834526 	beq	r3,r2,b9a0 <_strtod_r+0xfb8>
    ac8c:	1809883a 	mov	r4,r3
    ac90:	20fff404 	addi	r3,r4,-48
    ac94:	00800244 	movi	r2,9
    ac98:	001d883a 	mov	r14,zero
    ac9c:	10c0bf36 	bltu	r2,r3,af9c <_strtod_r+0x5b4>
    aca0:	00800c04 	movi	r2,48
    aca4:	2080061e 	bne	r4,r2,acc0 <_strtod_r+0x2d8>
    aca8:	da000417 	ldw	r8,16(sp)
    acac:	2005883a 	mov	r2,r4
    acb0:	42000044 	addi	r8,r8,1
    acb4:	da000415 	stw	r8,16(sp)
    acb8:	41000007 	ldb	r4,0(r8)
    acbc:	20bffc26 	beq	r4,r2,acb0 <_strtod_r+0x2c8>
    acc0:	20fff3c4 	addi	r3,r4,-49
    acc4:	00800204 	movi	r2,8
    acc8:	10ffbb36 	bltu	r2,r3,abb8 <_strtod_r+0x1d0>
    accc:	da000417 	ldw	r8,16(sp)
    acd0:	227ff404 	addi	r9,r4,-48
    acd4:	03000bc4 	movi	r12,47
    acd8:	4007883a 	mov	r3,r8
    acdc:	42000044 	addi	r8,r8,1
    ace0:	da000415 	stw	r8,16(sp)
    ace4:	41000007 	ldb	r4,0(r8)
    ace8:	61000d0e 	bge	r12,r4,ad20 <_strtod_r+0x338>
    acec:	00800e44 	movi	r2,57
    acf0:	11000b16 	blt	r2,r4,ad20 <_strtod_r+0x338>
    acf4:	601b883a 	mov	r13,r12
    acf8:	1019883a 	mov	r12,r2
    acfc:	00000106 	br	ad04 <_strtod_r+0x31c>
    ad00:	61000716 	blt	r12,r4,ad20 <_strtod_r+0x338>
    ad04:	488002a4 	muli	r2,r9,10
    ad08:	42000044 	addi	r8,r8,1
    ad0c:	da000415 	stw	r8,16(sp)
    ad10:	2085883a 	add	r2,r4,r2
    ad14:	41000007 	ldb	r4,0(r8)
    ad18:	127ff404 	addi	r9,r2,-48
    ad1c:	693ff816 	blt	r13,r4,ad00 <_strtod_r+0x318>
    ad20:	40c7c83a 	sub	r3,r8,r3
    ad24:	00800204 	movi	r2,8
    ad28:	10c2e416 	blt	r2,r3,b8bc <_strtod_r+0xed4>
    ad2c:	009387c4 	movi	r2,19999
    ad30:	480b883a 	mov	r5,r9
    ad34:	1240010e 	bge	r2,r9,ad3c <_strtod_r+0x354>
    ad38:	100b883a 	mov	r5,r2
    ad3c:	7005003a 	cmpeq	r2,r14,zero
    ad40:	103f9e1e 	bne	r2,zero,abbc <_strtod_r+0x1d4>
    ad44:	014bc83a 	sub	r5,zero,r5
    ad48:	583f9d26 	beq	r11,zero,abc0 <_strtod_r+0x1d8>
    ad4c:	2a8bc83a 	sub	r5,r5,r10
    ad50:	d9400f15 	stw	r5,60(sp)
    ad54:	30007a1e 	bne	r6,zero,af40 <_strtod_r+0x558>
    ad58:	dcc01215 	stw	r19,72(sp)
    ad5c:	00800404 	movi	r2,16
    ad60:	9825883a 	mov	r18,r19
    ad64:	14c0010e 	bge	r2,r19,ad6c <_strtod_r+0x384>
    ad68:	1025883a 	mov	r18,r2
    ad6c:	a009883a 	mov	r4,r20
    ad70:	000fa940 	call	fa94 <__floatunsidf>
    ad74:	100f883a 	mov	r7,r2
    ad78:	e0800015 	stw	r2,0(fp)
    ad7c:	00800244 	movi	r2,9
    ad80:	e0c00115 	stw	r3,4(fp)
    ad84:	1480160e 	bge	r2,r18,ade0 <_strtod_r+0x3f8>
    ad88:	900c90fa 	slli	r6,r18,3
    ad8c:	01000074 	movhi	r4,1
    ad90:	210d8704 	addi	r4,r4,13852
    ad94:	180b883a 	mov	r5,r3
    ad98:	310d883a 	add	r6,r6,r4
    ad9c:	30ffef17 	ldw	r3,-68(r6)
    ada0:	30bfee17 	ldw	r2,-72(r6)
    ada4:	3809883a 	mov	r4,r7
    ada8:	180f883a 	mov	r7,r3
    adac:	100d883a 	mov	r6,r2
    adb0:	000ef040 	call	ef04 <__muldf3>
    adb4:	8009883a 	mov	r4,r16
    adb8:	1823883a 	mov	r17,r3
    adbc:	1021883a 	mov	r16,r2
    adc0:	000fa940 	call	fa94 <__floatunsidf>
    adc4:	880b883a 	mov	r5,r17
    adc8:	180f883a 	mov	r7,r3
    adcc:	8009883a 	mov	r4,r16
    add0:	100d883a 	mov	r6,r2
    add4:	000ee900 	call	ee90 <__adddf3>
    add8:	e0c00115 	stw	r3,4(fp)
    addc:	e0800015 	stw	r2,0(fp)
    ade0:	010003c4 	movi	r4,15
    ade4:	24c09816 	blt	r4,r19,b048 <_strtod_r+0x660>
    ade8:	d9800f17 	ldw	r6,60(sp)
    adec:	303f7526 	beq	r6,zero,abc4 <_strtod_r+0x1dc>
    adf0:	0183be0e 	bge	zero,r6,bcec <_strtod_r+0x1304>
    adf4:	00800584 	movi	r2,22
    adf8:	1182b20e 	bge	r2,r6,b8c4 <_strtod_r+0xedc>
    adfc:	d8c00f17 	ldw	r3,60(sp)
    ae00:	24e3c83a 	sub	r17,r4,r19
    ae04:	88800584 	addi	r2,r17,22
    ae08:	10c08f16 	blt	r2,r3,b048 <_strtod_r+0x660>
    ae0c:	880890fa 	slli	r4,r17,3
    ae10:	04000074 	movhi	r16,1
    ae14:	840d8704 	addi	r16,r16,13852
    ae18:	e0800017 	ldw	r2,0(fp)
    ae1c:	2409883a 	add	r4,r4,r16
    ae20:	22000017 	ldw	r8,0(r4)
    ae24:	22400117 	ldw	r9,4(r4)
    ae28:	e0c00117 	ldw	r3,4(fp)
    ae2c:	1009883a 	mov	r4,r2
    ae30:	480f883a 	mov	r7,r9
    ae34:	180b883a 	mov	r5,r3
    ae38:	400d883a 	mov	r6,r8
    ae3c:	000ef040 	call	ef04 <__muldf3>
    ae40:	d9000f17 	ldw	r4,60(sp)
    ae44:	180b883a 	mov	r5,r3
    ae48:	2455c83a 	sub	r10,r4,r17
    ae4c:	501490fa 	slli	r10,r10,3
    ae50:	1009883a 	mov	r4,r2
    ae54:	5415883a 	add	r10,r10,r16
    ae58:	52000017 	ldw	r8,0(r10)
    ae5c:	52400117 	ldw	r9,4(r10)
    ae60:	0002a206 	br	b8ec <_strtod_r+0xf04>
    ae64:	40c00047 	ldb	r3,1(r8)
    ae68:	00801604 	movi	r2,88
    ae6c:	18804e26 	beq	r3,r2,afa8 <_strtod_r+0x5c0>
    ae70:	00801e04 	movi	r2,120
    ae74:	18804c26 	beq	r3,r2,afa8 <_strtod_r+0x5c0>
    ae78:	42000044 	addi	r8,r8,1
    ae7c:	da000415 	stw	r8,16(sp)
    ae80:	40c00007 	ldb	r3,0(r8)
    ae84:	00800c04 	movi	r2,48
    ae88:	18bffb26 	beq	r3,r2,ae78 <_strtod_r+0x490>
    ae8c:	183f4d26 	beq	r3,zero,abc4 <_strtod_r+0x1dc>
    ae90:	03c00044 	movi	r15,1
    ae94:	003f2406 	br	ab28 <_strtod_r+0x140>
    ae98:	42000044 	addi	r8,r8,1
    ae9c:	da000415 	stw	r8,16(sp)
    aea0:	19000047 	ldb	r4,1(r3)
    aea4:	3000b726 	beq	r6,zero,b184 <_strtod_r+0x79c>
    aea8:	3027883a 	mov	r19,r6
    aeac:	0015883a 	mov	r10,zero
    aeb0:	000f883a 	mov	r7,zero
    aeb4:	227ff404 	addi	r9,r4,-48
    aeb8:	00800244 	movi	r2,9
    aebc:	1242592e 	bgeu	r2,r9,b824 <_strtod_r+0xe3c>
    aec0:	04800044 	movi	r18,1
    aec4:	003f3706 	br	aba4 <_strtod_r+0x1bc>
    aec8:	7804c03a 	cmpne	r2,r15,zero
    aecc:	103f3d1e 	bne	r2,zero,abc4 <_strtod_r+0x1dc>
    aed0:	9004c03a 	cmpne	r2,r18,zero
    aed4:	103f5e1e 	bne	r2,zero,ac50 <_strtod_r+0x268>
    aed8:	00801384 	movi	r2,78
    aedc:	2083a226 	beq	r4,r2,bd68 <_strtod_r+0x1380>
    aee0:	11039d16 	blt	r2,r4,bd58 <_strtod_r+0x1370>
    aee4:	00801244 	movi	r2,73
    aee8:	20bf591e 	bne	r4,r2,ac50 <_strtod_r+0x268>
    aeec:	dc000404 	addi	r16,sp,16
    aef0:	8009883a 	mov	r4,r16
    aef4:	01400074 	movhi	r5,1
    aef8:	294dd004 	addi	r5,r5,14144
    aefc:	000a9a00 	call	a9a0 <match>
    af00:	103f5326 	beq	r2,zero,ac50 <_strtod_r+0x268>
    af04:	d8800417 	ldw	r2,16(sp)
    af08:	8009883a 	mov	r4,r16
    af0c:	01400074 	movhi	r5,1
    af10:	294dd104 	addi	r5,r5,14148
    af14:	123fffc4 	addi	r8,r2,-1
    af18:	da000415 	stw	r8,16(sp)
    af1c:	000a9a00 	call	a9a0 <match>
    af20:	1000031e 	bne	r2,zero,af30 <_strtod_r+0x548>
    af24:	d8800417 	ldw	r2,16(sp)
    af28:	12000044 	addi	r8,r2,1
    af2c:	da000415 	stw	r8,16(sp)
    af30:	019ffc34 	movhi	r6,32752
    af34:	e1800115 	stw	r6,4(fp)
    af38:	e0000015 	stw	zero,0(fp)
    af3c:	003f2106 	br	abc4 <_strtod_r+0x1dc>
    af40:	d9801215 	stw	r6,72(sp)
    af44:	003f8506 	br	ad5c <_strtod_r+0x374>
    af48:	d8001115 	stw	zero,68(sp)
    af4c:	42000044 	addi	r8,r8,1
    af50:	da000415 	stw	r8,16(sp)
    af54:	40800007 	ldb	r2,0(r8)
    af58:	103eef1e 	bne	r2,zero,ab18 <_strtod_r+0x130>
    af5c:	d8001115 	stw	zero,68(sp)
    af60:	dc400415 	stw	r17,16(sp)
    af64:	003f1706 	br	abc4 <_strtod_r+0x1dc>
    af68:	42000044 	addi	r8,r8,1
    af6c:	da000415 	stw	r8,16(sp)
    af70:	003eaf06 	br	aa30 <_strtod_r+0x48>
    af74:	00800044 	movi	r2,1
    af78:	d8801115 	stw	r2,68(sp)
    af7c:	003ff306 	br	af4c <_strtod_r+0x564>
    af80:	001d883a 	mov	r14,zero
    af84:	42000044 	addi	r8,r8,1
    af88:	da000415 	stw	r8,16(sp)
    af8c:	21000047 	ldb	r4,1(r4)
    af90:	00800244 	movi	r2,9
    af94:	20fff404 	addi	r3,r4,-48
    af98:	10ff412e 	bgeu	r2,r3,aca0 <_strtod_r+0x2b8>
    af9c:	000b883a 	mov	r5,zero
    afa0:	dc400415 	stw	r17,16(sp)
    afa4:	003f0506 	br	abbc <_strtod_r+0x1d4>
    afa8:	d8c01117 	ldw	r3,68(sp)
    afac:	04800074 	movhi	r18,1
    afb0:	94905004 	addi	r18,r18,16704
    afb4:	d8800504 	addi	r2,sp,20
    afb8:	a809883a 	mov	r4,r21
    afbc:	d9400404 	addi	r5,sp,16
    afc0:	900d883a 	mov	r6,r18
    afc4:	d9c00604 	addi	r7,sp,24
    afc8:	d8800015 	stw	r2,0(sp)
    afcc:	d8c00115 	stw	r3,4(sp)
    afd0:	000d1140 	call	d114 <__gethex>
    afd4:	140001cc 	andi	r16,r2,7
    afd8:	1027883a 	mov	r19,r2
    afdc:	803ef926 	beq	r16,zero,abc4 <_strtod_r+0x1dc>
    afe0:	05000184 	movi	r20,6
    afe4:	853f1a26 	beq	r16,r20,ac50 <_strtod_r+0x268>
    afe8:	d9800517 	ldw	r6,20(sp)
    afec:	30000626 	beq	r6,zero,b008 <_strtod_r+0x620>
    aff0:	91400017 	ldw	r5,0(r18)
    aff4:	d9000d04 	addi	r4,sp,52
    aff8:	00094bc0 	call	94bc <__copybits>
    affc:	d9400517 	ldw	r5,20(sp)
    b000:	a809883a 	mov	r4,r21
    b004:	000901c0 	call	901c <_Bfree>
    b008:	d9400617 	ldw	r5,24(sp)
    b00c:	a4024136 	bltu	r20,r16,b914 <_strtod_r+0xf2c>
    b010:	8405883a 	add	r2,r16,r16
    b014:	1085883a 	add	r2,r2,r2
    b018:	00c00074 	movhi	r3,1
    b01c:	18ec0b04 	addi	r3,r3,-20436
    b020:	10c5883a 	add	r2,r2,r3
    b024:	11000017 	ldw	r4,0(r2)
    b028:	2000683a 	jmp	r4
    b02c:	0000b954 	movui	zero,741
    b030:	0000b960 	cmpeqi	zero,zero,741
    b034:	0000b904 	movi	zero,740
    b038:	0000b92c 	andhi	zero,zero,740
    b03c:	0000b93c 	xorhi	zero,zero,740
    b040:	0000b960 	cmpeqi	zero,zero,741
    b044:	0000b954 	movui	zero,741
    b048:	d8c00f17 	ldw	r3,60(sp)
    b04c:	9c85c83a 	sub	r2,r19,r18
    b050:	18a1883a 	add	r16,r3,r2
    b054:	0402d00e 	bge	zero,r16,bb98 <_strtod_r+0x11b0>
    b058:	814003cc 	andi	r5,r16,15
    b05c:	28000f26 	beq	r5,zero,b09c <_strtod_r+0x6b4>
    b060:	280a90fa 	slli	r5,r5,3
    b064:	01000074 	movhi	r4,1
    b068:	210d8704 	addi	r4,r4,13852
    b06c:	e0800017 	ldw	r2,0(fp)
    b070:	290b883a 	add	r5,r5,r4
    b074:	2a000017 	ldw	r8,0(r5)
    b078:	e0c00117 	ldw	r3,4(fp)
    b07c:	2a400117 	ldw	r9,4(r5)
    b080:	1009883a 	mov	r4,r2
    b084:	180b883a 	mov	r5,r3
    b088:	480f883a 	mov	r7,r9
    b08c:	400d883a 	mov	r6,r8
    b090:	000ef040 	call	ef04 <__muldf3>
    b094:	e0c00115 	stw	r3,4(fp)
    b098:	e0800015 	stw	r2,0(fp)
    b09c:	00bffc04 	movi	r2,-16
    b0a0:	808c703a 	and	r6,r16,r2
    b0a4:	30005b26 	beq	r6,zero,b214 <_strtod_r+0x82c>
    b0a8:	00804d04 	movi	r2,308
    b0ac:	1181fd16 	blt	r2,r6,b8a4 <_strtod_r+0xebc>
    b0b0:	3021d13a 	srai	r16,r6,4
    b0b4:	00800044 	movi	r2,1
    b0b8:	1403610e 	bge	r2,r16,be40 <_strtod_r+0x1458>
    b0bc:	102f883a 	mov	r23,r2
    b0c0:	0025883a 	mov	r18,zero
    b0c4:	04400074 	movhi	r17,1
    b0c8:	8c4db904 	addi	r17,r17,14052
    b0cc:	8080004c 	andi	r2,r16,1
    b0d0:	1005003a 	cmpeq	r2,r2,zero
    b0d4:	1000091e 	bne	r2,zero,b0fc <_strtod_r+0x714>
    b0d8:	e0800017 	ldw	r2,0(fp)
    b0dc:	e0c00117 	ldw	r3,4(fp)
    b0e0:	89800017 	ldw	r6,0(r17)
    b0e4:	89c00117 	ldw	r7,4(r17)
    b0e8:	180b883a 	mov	r5,r3
    b0ec:	1009883a 	mov	r4,r2
    b0f0:	000ef040 	call	ef04 <__muldf3>
    b0f4:	e0c00115 	stw	r3,4(fp)
    b0f8:	e0800015 	stw	r2,0(fp)
    b0fc:	8021d07a 	srai	r16,r16,1
    b100:	94800044 	addi	r18,r18,1
    b104:	8c400204 	addi	r17,r17,8
    b108:	bc3ff016 	blt	r23,r16,b0cc <_strtod_r+0x6e4>
    b10c:	900e90fa 	slli	r7,r18,3
    b110:	01800074 	movhi	r6,1
    b114:	318db904 	addi	r6,r6,14052
    b118:	e2000117 	ldw	r8,4(fp)
    b11c:	398f883a 	add	r7,r7,r6
    b120:	38800017 	ldw	r2,0(r7)
    b124:	38c00117 	ldw	r3,4(r7)
    b128:	e1000017 	ldw	r4,0(fp)
    b12c:	01bf2c34 	movhi	r6,64688
    b130:	418d883a 	add	r6,r8,r6
    b134:	300b883a 	mov	r5,r6
    b138:	180f883a 	mov	r7,r3
    b13c:	100d883a 	mov	r6,r2
    b140:	000ef040 	call	ef04 <__muldf3>
    b144:	1009883a 	mov	r4,r2
    b148:	180b883a 	mov	r5,r3
    b14c:	199ffc2c 	andhi	r6,r3,32752
    b150:	009f2834 	movhi	r2,31904
    b154:	e1000015 	stw	r4,0(fp)
    b158:	e1400115 	stw	r5,4(fp)
    b15c:	1181d136 	bltu	r2,r6,b8a4 <_strtod_r+0xebc>
    b160:	009f2434 	movhi	r2,31888
    b164:	1183202e 	bgeu	r2,r6,bde8 <_strtod_r+0x1400>
    b168:	d8001415 	stw	zero,80(sp)
    b16c:	019ffc34 	movhi	r6,32752
    b170:	31bfffc4 	addi	r6,r6,-1
    b174:	01ffffc4 	movi	r7,-1
    b178:	e1800115 	stw	r6,4(fp)
    b17c:	e1c00015 	stw	r7,0(fp)
    b180:	00002506 	br	b218 <_strtod_r+0x830>
    b184:	00800c04 	movi	r2,48
    b188:	2083151e 	bne	r4,r2,bde0 <_strtod_r+0x13f8>
    b18c:	2005883a 	mov	r2,r4
    b190:	000f883a 	mov	r7,zero
    b194:	42000044 	addi	r8,r8,1
    b198:	da000415 	stw	r8,16(sp)
    b19c:	41000007 	ldb	r4,0(r8)
    b1a0:	39c00044 	addi	r7,r7,1
    b1a4:	20bffb26 	beq	r4,r2,b194 <_strtod_r+0x7ac>
    b1a8:	20fff3c4 	addi	r3,r4,-49
    b1ac:	00800204 	movi	r2,8
    b1b0:	10c1b836 	bltu	r2,r3,b894 <_strtod_r+0xeac>
    b1b4:	dd800417 	ldw	r22,16(sp)
    b1b8:	3815883a 	mov	r10,r7
    b1bc:	227ff404 	addi	r9,r4,-48
    b1c0:	b011883a 	mov	r8,r22
    b1c4:	0027883a 	mov	r19,zero
    b1c8:	01c00044 	movi	r7,1
    b1cc:	4801fe26 	beq	r9,zero,b9c8 <_strtod_r+0xfe0>
    b1d0:	00800044 	movi	r2,1
    b1d4:	51d5883a 	add	r10,r10,r7
    b1d8:	11c31f0e 	bge	r2,r7,be58 <_strtod_r+0x1470>
    b1dc:	1009883a 	mov	r4,r2
    b1e0:	9807883a 	mov	r3,r19
    b1e4:	02c00204 	movi	r11,8
    b1e8:	03000404 	movi	r12,16
    b1ec:	00000306 	br	b1fc <_strtod_r+0x814>
    b1f0:	a50002a4 	muli	r20,r20,10
    b1f4:	21000044 	addi	r4,r4,1
    b1f8:	21c1eb26 	beq	r4,r7,b9a8 <_strtod_r+0xfc0>
    b1fc:	18c00044 	addi	r3,r3,1
    b200:	18bfffc4 	addi	r2,r3,-1
    b204:	58bffa0e 	bge	r11,r2,b1f0 <_strtod_r+0x808>
    b208:	60fffa16 	blt	r12,r3,b1f4 <_strtod_r+0x80c>
    b20c:	840002a4 	muli	r16,r16,10
    b210:	003ff806 	br	b1f4 <_strtod_r+0x80c>
    b214:	d8001415 	stw	zero,80(sp)
    b218:	d9801217 	ldw	r6,72(sp)
    b21c:	a809883a 	mov	r4,r21
    b220:	b00b883a 	mov	r5,r22
    b224:	980f883a 	mov	r7,r19
    b228:	dd000015 	stw	r20,0(sp)
    b22c:	0009ef00 	call	9ef0 <__s2b>
    b230:	d9800f17 	ldw	r6,60(sp)
    b234:	11000304 	addi	r4,r2,12
    b238:	d8801015 	stw	r2,64(sp)
    b23c:	300c803a 	cmplt	r6,r6,zero
    b240:	d9001715 	stw	r4,92(sp)
    b244:	d9801615 	stw	r6,88(sp)
    b248:	d8801017 	ldw	r2,64(sp)
    b24c:	a809883a 	mov	r4,r21
    b250:	11400117 	ldw	r5,4(r2)
    b254:	000959c0 	call	959c <_Balloc>
    b258:	d8c01017 	ldw	r3,64(sp)
    b25c:	d9401717 	ldw	r5,92(sp)
    b260:	11000304 	addi	r4,r2,12
    b264:	19800417 	ldw	r6,16(r3)
    b268:	102f883a 	mov	r23,r2
    b26c:	318d883a 	add	r6,r6,r6
    b270:	318d883a 	add	r6,r6,r6
    b274:	31800204 	addi	r6,r6,8
    b278:	00021040 	call	2104 <memcpy>
    b27c:	e2000017 	ldw	r8,0(fp)
    b280:	e2400117 	ldw	r9,4(fp)
    b284:	d9800304 	addi	r6,sp,12
    b288:	400b883a 	mov	r5,r8
    b28c:	a809883a 	mov	r4,r21
    b290:	d9c00204 	addi	r7,sp,8
    b294:	d9800015 	stw	r6,0(sp)
    b298:	480d883a 	mov	r6,r9
    b29c:	00096580 	call	9658 <__d2b>
    b2a0:	a809883a 	mov	r4,r21
    b2a4:	01400044 	movi	r5,1
    b2a8:	d8800515 	stw	r2,20(sp)
    b2ac:	0009c940 	call	9c94 <__i2b>
    b2b0:	102d883a 	mov	r22,r2
    b2b4:	d8801617 	ldw	r2,88(sp)
    b2b8:	1001051e 	bne	r2,zero,b6d0 <_strtod_r+0xce8>
    b2bc:	dd000f17 	ldw	r20,60(sp)
    b2c0:	000f883a 	mov	r7,zero
    b2c4:	0013883a 	mov	r9,zero
    b2c8:	a011883a 	mov	r8,r20
    b2cc:	d8800217 	ldw	r2,8(sp)
    b2d0:	1000fd16 	blt	r2,zero,b6c8 <_strtod_r+0xce0>
    b2d4:	388f883a 	add	r7,r7,r2
    b2d8:	d9801417 	ldw	r6,80(sp)
    b2dc:	d9400317 	ldw	r5,12(sp)
    b2e0:	00ff0084 	movi	r3,-1022
    b2e4:	1189c83a 	sub	r4,r2,r6
    b2e8:	2145883a 	add	r2,r4,r5
    b2ec:	10bfffc4 	addi	r2,r2,-1
    b2f0:	10c09f0e 	bge	r2,r3,b570 <_strtod_r+0xb88>
    b2f4:	21810cc4 	addi	r6,r4,1075
    b2f8:	d8c01417 	ldw	r3,80(sp)
    b2fc:	4185883a 	add	r2,r8,r6
    b300:	39a1883a 	add	r16,r7,r6
    b304:	18a5883a 	add	r18,r3,r2
    b308:	3807883a 	mov	r3,r7
    b30c:	81c0010e 	bge	r16,r7,b314 <_strtod_r+0x92c>
    b310:	8007883a 	mov	r3,r16
    b314:	9005883a 	mov	r2,r18
    b318:	1c80010e 	bge	r3,r18,b320 <_strtod_r+0x938>
    b31c:	1805883a 	mov	r2,r3
    b320:	0080e70e 	bge	zero,r2,b6c0 <_strtod_r+0xcd8>
    b324:	38a7c83a 	sub	r19,r7,r2
    b328:	80a1c83a 	sub	r16,r16,r2
    b32c:	90a5c83a 	sub	r18,r18,r2
    b330:	02400e0e 	bge	zero,r9,b36c <_strtod_r+0x984>
    b334:	480d883a 	mov	r6,r9
    b338:	b00b883a 	mov	r5,r22
    b33c:	a809883a 	mov	r4,r21
    b340:	0009dd00 	call	9dd0 <__pow5mult>
    b344:	d9800517 	ldw	r6,20(sp)
    b348:	a809883a 	mov	r4,r21
    b34c:	100b883a 	mov	r5,r2
    b350:	102d883a 	mov	r22,r2
    b354:	0009aac0 	call	9aac <__multiply>
    b358:	d9400517 	ldw	r5,20(sp)
    b35c:	1023883a 	mov	r17,r2
    b360:	a809883a 	mov	r4,r21
    b364:	000901c0 	call	901c <_Bfree>
    b368:	dc400515 	stw	r17,20(sp)
    b36c:	0400050e 	bge	zero,r16,b384 <_strtod_r+0x99c>
    b370:	d9400517 	ldw	r5,20(sp)
    b374:	800d883a 	mov	r6,r16
    b378:	a809883a 	mov	r4,r21
    b37c:	00099600 	call	9960 <__lshift>
    b380:	d8800515 	stw	r2,20(sp)
    b384:	a000741e 	bne	r20,zero,b558 <_strtod_r+0xb70>
    b388:	0480050e 	bge	zero,r18,b3a0 <_strtod_r+0x9b8>
    b38c:	b80b883a 	mov	r5,r23
    b390:	900d883a 	mov	r6,r18
    b394:	a809883a 	mov	r4,r21
    b398:	00099600 	call	9960 <__lshift>
    b39c:	102f883a 	mov	r23,r2
    b3a0:	04c0050e 	bge	zero,r19,b3b8 <_strtod_r+0x9d0>
    b3a4:	b00b883a 	mov	r5,r22
    b3a8:	980d883a 	mov	r6,r19
    b3ac:	a809883a 	mov	r4,r21
    b3b0:	00099600 	call	9960 <__lshift>
    b3b4:	102d883a 	mov	r22,r2
    b3b8:	d9400517 	ldw	r5,20(sp)
    b3bc:	a809883a 	mov	r4,r21
    b3c0:	b80d883a 	mov	r6,r23
    b3c4:	00097d40 	call	97d4 <__mdiff>
    b3c8:	11000317 	ldw	r4,12(r2)
    b3cc:	b00b883a 	mov	r5,r22
    b3d0:	10000315 	stw	zero,12(r2)
    b3d4:	d9001315 	stw	r4,76(sp)
    b3d8:	1009883a 	mov	r4,r2
    b3dc:	1029883a 	mov	r20,r2
    b3e0:	00091780 	call	9178 <__mcmp>
    b3e4:	10017c16 	blt	r2,zero,b9d8 <_strtod_r+0xff0>
    b3e8:	1001af26 	beq	r2,zero,baa8 <_strtod_r+0x10c0>
    b3ec:	a009883a 	mov	r4,r20
    b3f0:	b00b883a 	mov	r5,r22
    b3f4:	00093780 	call	9378 <__ratio>
    b3f8:	0011883a 	mov	r8,zero
    b3fc:	02500034 	movhi	r9,16384
    b400:	480f883a 	mov	r7,r9
    b404:	1009883a 	mov	r4,r2
    b408:	180b883a 	mov	r5,r3
    b40c:	400d883a 	mov	r6,r8
    b410:	1021883a 	mov	r16,r2
    b414:	1823883a 	mov	r17,r3
    b418:	000f7c80 	call	f7c8 <__ledf2>
    b41c:	00805716 	blt	zero,r2,b57c <_strtod_r+0xb94>
    b420:	d9801317 	ldw	r6,76(sp)
    b424:	3025003a 	cmpeq	r18,r6,zero
    b428:	90008b1e 	bne	r18,zero,b658 <_strtod_r+0xc70>
    b42c:	008ffc34 	movhi	r2,16368
    b430:	0021883a 	mov	r16,zero
    b434:	1023883a 	mov	r17,r2
    b438:	d8000715 	stw	zero,28(sp)
    b43c:	d8800815 	stw	r2,32(sp)
    b440:	e1c00117 	ldw	r7,4(fp)
    b444:	009ff834 	movhi	r2,32736
    b448:	3cdffc2c 	andhi	r19,r7,32752
    b44c:	98805e26 	beq	r19,r2,b5c8 <_strtod_r+0xbe0>
    b450:	d8801417 	ldw	r2,80(sp)
    b454:	10001b26 	beq	r2,zero,b4c4 <_strtod_r+0xadc>
    b458:	0081a834 	movhi	r2,1696
    b45c:	14c01936 	bltu	r2,r19,b4c4 <_strtod_r+0xadc>
    b460:	00bff034 	movhi	r2,65472
    b464:	00d07834 	movhi	r3,16864
    b468:	18ffffc4 	addi	r3,r3,-1
    b46c:	180f883a 	mov	r7,r3
    b470:	8009883a 	mov	r4,r16
    b474:	880b883a 	mov	r5,r17
    b478:	100d883a 	mov	r6,r2
    b47c:	000f7c80 	call	f7c8 <__ledf2>
    b480:	00800b16 	blt	zero,r2,b4b0 <_strtod_r+0xac8>
    b484:	880b883a 	mov	r5,r17
    b488:	8009883a 	mov	r4,r16
    b48c:	000dc680 	call	dc68 <__fixunsdfsi>
    b490:	1000df1e 	bne	r2,zero,b810 <_strtod_r+0xe28>
    b494:	0021883a 	mov	r16,zero
    b498:	044ffc34 	movhi	r17,16368
    b49c:	9000d91e 	bne	r18,zero,b804 <_strtod_r+0xe1c>
    b4a0:	8005883a 	mov	r2,r16
    b4a4:	8807883a 	mov	r3,r17
    b4a8:	d8c00815 	stw	r3,32(sp)
    b4ac:	d8800715 	stw	r2,28(sp)
    b4b0:	d8800817 	ldw	r2,32(sp)
    b4b4:	00c1ac34 	movhi	r3,1712
    b4b8:	14c5c83a 	sub	r2,r2,r19
    b4bc:	10c5883a 	add	r2,r2,r3
    b4c0:	d8800815 	stw	r2,32(sp)
    b4c4:	e0800017 	ldw	r2,0(fp)
    b4c8:	e0c00117 	ldw	r3,4(fp)
    b4cc:	1009883a 	mov	r4,r2
    b4d0:	180b883a 	mov	r5,r3
    b4d4:	00091d80 	call	91d8 <__ulp>
    b4d8:	d9800717 	ldw	r6,28(sp)
    b4dc:	d9c00817 	ldw	r7,32(sp)
    b4e0:	180b883a 	mov	r5,r3
    b4e4:	1009883a 	mov	r4,r2
    b4e8:	000ef040 	call	ef04 <__muldf3>
    b4ec:	e2000017 	ldw	r8,0(fp)
    b4f0:	e2400117 	ldw	r9,4(fp)
    b4f4:	180b883a 	mov	r5,r3
    b4f8:	1009883a 	mov	r4,r2
    b4fc:	480f883a 	mov	r7,r9
    b500:	400d883a 	mov	r6,r8
    b504:	000ee900 	call	ee90 <__adddf3>
    b508:	e0c00115 	stw	r3,4(fp)
    b50c:	e0800015 	stw	r2,0(fp)
    b510:	d8c01417 	ldw	r3,80(sp)
    b514:	e4800117 	ldw	r18,4(fp)
    b518:	1800021e 	bne	r3,zero,b524 <_strtod_r+0xb3c>
    b51c:	909ffc2c 	andhi	r2,r18,32752
    b520:	98807b26 	beq	r19,r2,b710 <_strtod_r+0xd28>
    b524:	d9400517 	ldw	r5,20(sp)
    b528:	a809883a 	mov	r4,r21
    b52c:	000901c0 	call	901c <_Bfree>
    b530:	a809883a 	mov	r4,r21
    b534:	b80b883a 	mov	r5,r23
    b538:	000901c0 	call	901c <_Bfree>
    b53c:	a809883a 	mov	r4,r21
    b540:	b00b883a 	mov	r5,r22
    b544:	000901c0 	call	901c <_Bfree>
    b548:	a809883a 	mov	r4,r21
    b54c:	a00b883a 	mov	r5,r20
    b550:	000901c0 	call	901c <_Bfree>
    b554:	003f3c06 	br	b248 <_strtod_r+0x860>
    b558:	b80b883a 	mov	r5,r23
    b55c:	a00d883a 	mov	r6,r20
    b560:	a809883a 	mov	r4,r21
    b564:	0009dd00 	call	9dd0 <__pow5mult>
    b568:	102f883a 	mov	r23,r2
    b56c:	003f8606 	br	b388 <_strtod_r+0x9a0>
    b570:	00800d84 	movi	r2,54
    b574:	114dc83a 	sub	r6,r2,r5
    b578:	003f5f06 	br	b2f8 <_strtod_r+0x910>
    b57c:	0005883a 	mov	r2,zero
    b580:	00cff834 	movhi	r3,16352
    b584:	880b883a 	mov	r5,r17
    b588:	8009883a 	mov	r4,r16
    b58c:	100d883a 	mov	r6,r2
    b590:	180f883a 	mov	r7,r3
    b594:	000ef040 	call	ef04 <__muldf3>
    b598:	d9801317 	ldw	r6,76(sp)
    b59c:	1021883a 	mov	r16,r2
    b5a0:	1823883a 	mov	r17,r3
    b5a4:	3025003a 	cmpeq	r18,r6,zero
    b5a8:	90000126 	beq	r18,zero,b5b0 <_strtod_r+0xbc8>
    b5ac:	18e0003c 	xorhi	r3,r3,32768
    b5b0:	d8800715 	stw	r2,28(sp)
    b5b4:	d8c00815 	stw	r3,32(sp)
    b5b8:	e1c00117 	ldw	r7,4(fp)
    b5bc:	009ff834 	movhi	r2,32736
    b5c0:	3cdffc2c 	andhi	r19,r7,32752
    b5c4:	98bfa21e 	bne	r19,r2,b450 <_strtod_r+0xa68>
    b5c8:	e1000017 	ldw	r4,0(fp)
    b5cc:	01bf2c34 	movhi	r6,64688
    b5d0:	398d883a 	add	r6,r7,r6
    b5d4:	d9000b15 	stw	r4,44(sp)
    b5d8:	d9c00c15 	stw	r7,48(sp)
    b5dc:	300b883a 	mov	r5,r6
    b5e0:	e1800115 	stw	r6,4(fp)
    b5e4:	00091d80 	call	91d8 <__ulp>
    b5e8:	d9800717 	ldw	r6,28(sp)
    b5ec:	d9c00817 	ldw	r7,32(sp)
    b5f0:	180b883a 	mov	r5,r3
    b5f4:	1009883a 	mov	r4,r2
    b5f8:	000ef040 	call	ef04 <__muldf3>
    b5fc:	e2000017 	ldw	r8,0(fp)
    b600:	e2400117 	ldw	r9,4(fp)
    b604:	180b883a 	mov	r5,r3
    b608:	1009883a 	mov	r4,r2
    b60c:	480f883a 	mov	r7,r9
    b610:	400d883a 	mov	r6,r8
    b614:	000ee900 	call	ee90 <__adddf3>
    b618:	1009883a 	mov	r4,r2
    b61c:	180b883a 	mov	r5,r3
    b620:	009f2834 	movhi	r2,31904
    b624:	10bfffc4 	addi	r2,r2,-1
    b628:	18dffc2c 	andhi	r3,r3,32752
    b62c:	e1000015 	stw	r4,0(fp)
    b630:	e1400115 	stw	r5,4(fp)
    b634:	10c06f2e 	bgeu	r2,r3,b7f4 <_strtod_r+0xe0c>
    b638:	d8800c17 	ldw	r2,48(sp)
    b63c:	011ffc34 	movhi	r4,32752
    b640:	213fffc4 	addi	r4,r4,-1
    b644:	11007a26 	beq	r2,r4,b830 <_strtod_r+0xe48>
    b648:	01ffffc4 	movi	r7,-1
    b64c:	e1000115 	stw	r4,4(fp)
    b650:	e1c00015 	stw	r7,0(fp)
    b654:	003fb306 	br	b524 <_strtod_r+0xb3c>
    b658:	e0c00017 	ldw	r3,0(fp)
    b65c:	1800221e 	bne	r3,zero,b6e8 <_strtod_r+0xd00>
    b660:	e0800117 	ldw	r2,4(fp)
    b664:	00c00434 	movhi	r3,16
    b668:	18ffffc4 	addi	r3,r3,-1
    b66c:	10c4703a 	and	r2,r2,r3
    b670:	1000211e 	bne	r2,zero,b6f8 <_strtod_r+0xd10>
    b674:	0005883a 	mov	r2,zero
    b678:	00cffc34 	movhi	r3,16368
    b67c:	180f883a 	mov	r7,r3
    b680:	8009883a 	mov	r4,r16
    b684:	880b883a 	mov	r5,r17
    b688:	100d883a 	mov	r6,r2
    b68c:	000f7400 	call	f740 <__ltdf2>
    b690:	10013c16 	blt	r2,zero,bb84 <_strtod_r+0x119c>
    b694:	0005883a 	mov	r2,zero
    b698:	00cff834 	movhi	r3,16352
    b69c:	880b883a 	mov	r5,r17
    b6a0:	8009883a 	mov	r4,r16
    b6a4:	180f883a 	mov	r7,r3
    b6a8:	100d883a 	mov	r6,r2
    b6ac:	000ef040 	call	ef04 <__muldf3>
    b6b0:	1823883a 	mov	r17,r3
    b6b4:	1021883a 	mov	r16,r2
    b6b8:	18e0003c 	xorhi	r3,r3,32768
    b6bc:	003fbc06 	br	b5b0 <_strtod_r+0xbc8>
    b6c0:	3827883a 	mov	r19,r7
    b6c4:	003f1a06 	br	b330 <_strtod_r+0x948>
    b6c8:	4091c83a 	sub	r8,r8,r2
    b6cc:	003f0206 	br	b2d8 <_strtod_r+0x8f0>
    b6d0:	d8c00f17 	ldw	r3,60(sp)
    b6d4:	0011883a 	mov	r8,zero
    b6d8:	0029883a 	mov	r20,zero
    b6dc:	00d3c83a 	sub	r9,zero,r3
    b6e0:	480f883a 	mov	r7,r9
    b6e4:	003ef906 	br	b2cc <_strtod_r+0x8e4>
    b6e8:	00800044 	movi	r2,1
    b6ec:	1880021e 	bne	r3,r2,b6f8 <_strtod_r+0xd10>
    b6f0:	e0800117 	ldw	r2,4(fp)
    b6f4:	1000a526 	beq	r2,zero,b98c <_strtod_r+0xfa4>
    b6f8:	00affc34 	movhi	r2,49136
    b6fc:	0021883a 	mov	r16,zero
    b700:	044ffc34 	movhi	r17,16368
    b704:	d8800815 	stw	r2,32(sp)
    b708:	d8000715 	stw	zero,28(sp)
    b70c:	003f4c06 	br	b440 <_strtod_r+0xa58>
    b710:	880b883a 	mov	r5,r17
    b714:	8009883a 	mov	r4,r16
    b718:	000f9480 	call	f948 <__fixdfsi>
    b71c:	1009883a 	mov	r4,r2
    b720:	000f8500 	call	f850 <__floatsidf>
    b724:	880b883a 	mov	r5,r17
    b728:	8009883a 	mov	r4,r16
    b72c:	100d883a 	mov	r6,r2
    b730:	180f883a 	mov	r7,r3
    b734:	000ee100 	call	ee10 <__subdf3>
    b738:	d9001317 	ldw	r4,76(sp)
    b73c:	100b883a 	mov	r5,r2
    b740:	180d883a 	mov	r6,r3
    b744:	1021883a 	mov	r16,r2
    b748:	1823883a 	mov	r17,r3
    b74c:	2000061e 	bne	r4,zero,b768 <_strtod_r+0xd80>
    b750:	e0800017 	ldw	r2,0(fp)
    b754:	1000041e 	bne	r2,zero,b768 <_strtod_r+0xd80>
    b758:	00c00434 	movhi	r3,16
    b75c:	18ffffc4 	addi	r3,r3,-1
    b760:	90c4703a 	and	r2,r18,r3
    b764:	10004026 	beq	r2,zero,b868 <_strtod_r+0xe80>
    b768:	00a52834 	movhi	r2,38048
    b76c:	108d6544 	addi	r2,r2,13717
    b770:	00cff834 	movhi	r3,16352
    b774:	18ffffc4 	addi	r3,r3,-1
    b778:	180f883a 	mov	r7,r3
    b77c:	8009883a 	mov	r4,r16
    b780:	880b883a 	mov	r5,r17
    b784:	100d883a 	mov	r6,r2
    b788:	000f7400 	call	f740 <__ltdf2>
    b78c:	10000916 	blt	r2,zero,b7b4 <_strtod_r+0xdcc>
    b790:	008d6c34 	movhi	r2,13744
    b794:	10b94d44 	addi	r2,r2,-6859
    b798:	00cff834 	movhi	r3,16352
    b79c:	880b883a 	mov	r5,r17
    b7a0:	180f883a 	mov	r7,r3
    b7a4:	8009883a 	mov	r4,r16
    b7a8:	100d883a 	mov	r6,r2
    b7ac:	000f6300 	call	f630 <__gtdf2>
    b7b0:	00bf5c0e 	bge	zero,r2,b524 <_strtod_r+0xb3c>
    b7b4:	d9400517 	ldw	r5,20(sp)
    b7b8:	a809883a 	mov	r4,r21
    b7bc:	000901c0 	call	901c <_Bfree>
    b7c0:	a809883a 	mov	r4,r21
    b7c4:	b80b883a 	mov	r5,r23
    b7c8:	000901c0 	call	901c <_Bfree>
    b7cc:	a809883a 	mov	r4,r21
    b7d0:	b00b883a 	mov	r5,r22
    b7d4:	000901c0 	call	901c <_Bfree>
    b7d8:	d9401017 	ldw	r5,64(sp)
    b7dc:	a809883a 	mov	r4,r21
    b7e0:	000901c0 	call	901c <_Bfree>
    b7e4:	a809883a 	mov	r4,r21
    b7e8:	a00b883a 	mov	r5,r20
    b7ec:	000901c0 	call	901c <_Bfree>
    b7f0:	003cf406 	br	abc4 <_strtod_r+0x1dc>
    b7f4:	0080d434 	movhi	r2,848
    b7f8:	288d883a 	add	r6,r5,r2
    b7fc:	e1800115 	stw	r6,4(fp)
    b800:	003f4306 	br	b510 <_strtod_r+0xb28>
    b804:	8005883a 	mov	r2,r16
    b808:	88e0003c 	xorhi	r3,r17,32768
    b80c:	003f2606 	br	b4a8 <_strtod_r+0xac0>
    b810:	1009883a 	mov	r4,r2
    b814:	000fa940 	call	fa94 <__floatunsidf>
    b818:	1021883a 	mov	r16,r2
    b81c:	1823883a 	mov	r17,r3
    b820:	003f1e06 	br	b49c <_strtod_r+0xab4>
    b824:	da000417 	ldw	r8,16(sp)
    b828:	39c00044 	addi	r7,r7,1
    b82c:	003e6706 	br	b1cc <_strtod_r+0x7e4>
    b830:	d8c00b17 	ldw	r3,44(sp)
    b834:	00bfffc4 	movi	r2,-1
    b838:	18bf831e 	bne	r3,r2,b648 <_strtod_r+0xc60>
    b83c:	00c00884 	movi	r3,34
    b840:	a8c00015 	stw	r3,0(r21)
    b844:	009ffc34 	movhi	r2,32752
    b848:	e0800115 	stw	r2,4(fp)
    b84c:	e0000015 	stw	zero,0(fp)
    b850:	003fd806 	br	b7b4 <_strtod_r+0xdcc>
    b854:	4007883a 	mov	r3,r8
    b858:	000d883a 	mov	r6,zero
    b85c:	0029883a 	mov	r20,zero
    b860:	0021883a 	mov	r16,zero
    b864:	003cc906 	br	ab8c <_strtod_r+0x1a4>
    b868:	00a52834 	movhi	r2,38048
    b86c:	108d6544 	addi	r2,r2,13717
    b870:	00cff434 	movhi	r3,16336
    b874:	18ffffc4 	addi	r3,r3,-1
    b878:	2809883a 	mov	r4,r5
    b87c:	180f883a 	mov	r7,r3
    b880:	300b883a 	mov	r5,r6
    b884:	100d883a 	mov	r6,r2
    b888:	000f7400 	call	f740 <__ltdf2>
    b88c:	103f250e 	bge	r2,zero,b524 <_strtod_r+0xb3c>
    b890:	003fc806 	br	b7b4 <_strtod_r+0xdcc>
    b894:	0027883a 	mov	r19,zero
    b898:	04800044 	movi	r18,1
    b89c:	0015883a 	mov	r10,zero
    b8a0:	003cc006 	br	aba4 <_strtod_r+0x1bc>
    b8a4:	00800884 	movi	r2,34
    b8a8:	a8800015 	stw	r2,0(r21)
    b8ac:	019ffc34 	movhi	r6,32752
    b8b0:	e1800115 	stw	r6,4(fp)
    b8b4:	e0000015 	stw	zero,0(fp)
    b8b8:	003cc206 	br	abc4 <_strtod_r+0x1dc>
    b8bc:	015387c4 	movi	r5,19999
    b8c0:	003d1e06 	br	ad3c <_strtod_r+0x354>
    b8c4:	300a90fa 	slli	r5,r6,3
    b8c8:	e0800017 	ldw	r2,0(fp)
    b8cc:	e0c00117 	ldw	r3,4(fp)
    b8d0:	01000074 	movhi	r4,1
    b8d4:	210d8704 	addi	r4,r4,13852
    b8d8:	290b883a 	add	r5,r5,r4
    b8dc:	2a000017 	ldw	r8,0(r5)
    b8e0:	2a400117 	ldw	r9,4(r5)
    b8e4:	1009883a 	mov	r4,r2
    b8e8:	180b883a 	mov	r5,r3
    b8ec:	480f883a 	mov	r7,r9
    b8f0:	400d883a 	mov	r6,r8
    b8f4:	000ef040 	call	ef04 <__muldf3>
    b8f8:	e0c00115 	stw	r3,4(fp)
    b8fc:	e0800015 	stw	r2,0(fp)
    b900:	003cb006 	br	abc4 <_strtod_r+0x1dc>
    b904:	d8800d17 	ldw	r2,52(sp)
    b908:	e0800015 	stw	r2,0(fp)
    b90c:	d8c00e17 	ldw	r3,56(sp)
    b910:	e0c00115 	stw	r3,4(fp)
    b914:	9880020c 	andi	r2,r19,8
    b918:	103caa26 	beq	r2,zero,abc4 <_strtod_r+0x1dc>
    b91c:	e0800117 	ldw	r2,4(fp)
    b920:	10a00034 	orhi	r2,r2,32768
    b924:	e0800115 	stw	r2,4(fp)
    b928:	003ca606 	br	abc4 <_strtod_r+0x1dc>
    b92c:	009ffc34 	movhi	r2,32752
    b930:	e0800115 	stw	r2,4(fp)
    b934:	e0000015 	stw	zero,0(fp)
    b938:	003ff606 	br	b914 <_strtod_r+0xf2c>
    b93c:	00a00034 	movhi	r2,32768
    b940:	10bfffc4 	addi	r2,r2,-1
    b944:	00ffffc4 	movi	r3,-1
    b948:	e0800115 	stw	r2,4(fp)
    b94c:	e0c00015 	stw	r3,0(fp)
    b950:	003ff006 	br	b914 <_strtod_r+0xf2c>
    b954:	e0000115 	stw	zero,4(fp)
    b958:	e0000015 	stw	zero,0(fp)
    b95c:	003fed06 	br	b914 <_strtod_r+0xf2c>
    b960:	d8800e17 	ldw	r2,56(sp)
    b964:	29010cc4 	addi	r4,r5,1075
    b968:	00fffc34 	movhi	r3,65520
    b96c:	18ffffc4 	addi	r3,r3,-1
    b970:	2008953a 	slli	r4,r4,20
    b974:	10c4703a 	and	r2,r2,r3
    b978:	d8c00d17 	ldw	r3,52(sp)
    b97c:	1104b03a 	or	r2,r2,r4
    b980:	e0800115 	stw	r2,4(fp)
    b984:	e0c00015 	stw	r3,0(fp)
    b988:	003fe206 	br	b914 <_strtod_r+0xf2c>
    b98c:	00800884 	movi	r2,34
    b990:	a8800015 	stw	r2,0(r21)
    b994:	e0000015 	stw	zero,0(fp)
    b998:	e0000115 	stw	zero,4(fp)
    b99c:	003f8506 	br	b7b4 <_strtod_r+0xdcc>
    b9a0:	03800044 	movi	r14,1
    b9a4:	003d7706 	br	af84 <_strtod_r+0x59c>
    b9a8:	99c5883a 	add	r2,r19,r7
    b9ac:	11ffffc4 	addi	r7,r2,-1
    b9b0:	00800204 	movi	r2,8
    b9b4:	3cc00044 	addi	r19,r7,1
    b9b8:	11c0df16 	blt	r2,r7,bd38 <_strtod_r+0x1350>
    b9bc:	a08002a4 	muli	r2,r20,10
    b9c0:	000f883a 	mov	r7,zero
    b9c4:	1269883a 	add	r20,r2,r9
    b9c8:	42000044 	addi	r8,r8,1
    b9cc:	da000415 	stw	r8,16(sp)
    b9d0:	41000007 	ldb	r4,0(r8)
    b9d4:	003d3706 	br	aeb4 <_strtod_r+0x4cc>
    b9d8:	d9801317 	ldw	r6,76(sp)
    b9dc:	3000511e 	bne	r6,zero,bb24 <_strtod_r+0x113c>
    b9e0:	e0800017 	ldw	r2,0(fp)
    b9e4:	1000d81e 	bne	r2,zero,bd48 <_strtod_r+0x1360>
    b9e8:	e0c00117 	ldw	r3,4(fp)
    b9ec:	01000434 	movhi	r4,16
    b9f0:	213fffc4 	addi	r4,r4,-1
    b9f4:	1904703a 	and	r2,r3,r4
    b9f8:	1000b01e 	bne	r2,zero,bcbc <_strtod_r+0x12d4>
    b9fc:	18dffc2c 	andhi	r3,r3,32752
    ba00:	0081ac34 	movhi	r2,1712
    ba04:	10c1102e 	bgeu	r2,r3,be48 <_strtod_r+0x1460>
    ba08:	a0800517 	ldw	r2,20(r20)
    ba0c:	1000031e 	bne	r2,zero,ba1c <_strtod_r+0x1034>
    ba10:	a0c00417 	ldw	r3,16(r20)
    ba14:	00800044 	movi	r2,1
    ba18:	10c0420e 	bge	r2,r3,bb24 <_strtod_r+0x113c>
    ba1c:	a00b883a 	mov	r5,r20
    ba20:	a809883a 	mov	r4,r21
    ba24:	01800044 	movi	r6,1
    ba28:	00099600 	call	9960 <__lshift>
    ba2c:	1009883a 	mov	r4,r2
    ba30:	b00b883a 	mov	r5,r22
    ba34:	1029883a 	mov	r20,r2
    ba38:	00091780 	call	9178 <__mcmp>
    ba3c:	0080c20e 	bge	zero,r2,bd48 <_strtod_r+0x1360>
    ba40:	e1800117 	ldw	r6,4(fp)
    ba44:	d9001417 	ldw	r4,80(sp)
    ba48:	2013003a 	cmpeq	r9,r4,zero
    ba4c:	4800ef1e 	bne	r9,zero,be0c <_strtod_r+0x1424>
    ba50:	30dffc2c 	andhi	r3,r6,32752
    ba54:	0081ac34 	movhi	r2,1712
    ba58:	10c0ec36 	bltu	r2,r3,be0c <_strtod_r+0x1424>
    ba5c:	0080dc34 	movhi	r2,880
    ba60:	10ffca2e 	bgeu	r2,r3,b98c <_strtod_r+0xfa4>
    ba64:	e0800017 	ldw	r2,0(fp)
    ba68:	e0c00117 	ldw	r3,4(fp)
    ba6c:	020e5434 	movhi	r8,14672
    ba70:	000d883a 	mov	r6,zero
    ba74:	400f883a 	mov	r7,r8
    ba78:	180b883a 	mov	r5,r3
    ba7c:	1009883a 	mov	r4,r2
    ba80:	da000c15 	stw	r8,48(sp)
    ba84:	d8000b15 	stw	zero,44(sp)
    ba88:	000ef040 	call	ef04 <__muldf3>
    ba8c:	e0800015 	stw	r2,0(fp)
    ba90:	e0c00115 	stw	r3,4(fp)
    ba94:	183f471e 	bne	r3,zero,b7b4 <_strtod_r+0xdcc>
    ba98:	103f461e 	bne	r2,zero,b7b4 <_strtod_r+0xdcc>
    ba9c:	00800884 	movi	r2,34
    baa0:	a8800015 	stw	r2,0(r21)
    baa4:	003f4306 	br	b7b4 <_strtod_r+0xdcc>
    baa8:	d8801317 	ldw	r2,76(sp)
    baac:	1025003a 	cmpeq	r18,r2,zero
    bab0:	9000861e 	bne	r18,zero,bccc <_strtod_r+0x12e4>
    bab4:	e1400117 	ldw	r5,4(fp)
    bab8:	00c00434 	movhi	r3,16
    babc:	18ffffc4 	addi	r3,r3,-1
    bac0:	28c4703a 	and	r2,r5,r3
    bac4:	10c01b26 	beq	r2,r3,bb34 <_strtod_r+0x114c>
    bac8:	e1c00017 	ldw	r7,0(fp)
    bacc:	3880004c 	andi	r2,r7,1
    bad0:	1005003a 	cmpeq	r2,r2,zero
    bad4:	1000791e 	bne	r2,zero,bcbc <_strtod_r+0x12d4>
    bad8:	9000b126 	beq	r18,zero,bda0 <_strtod_r+0x13b8>
    badc:	e4400117 	ldw	r17,4(fp)
    bae0:	3809883a 	mov	r4,r7
    bae4:	3821883a 	mov	r16,r7
    bae8:	880b883a 	mov	r5,r17
    baec:	00091d80 	call	91d8 <__ulp>
    baf0:	180f883a 	mov	r7,r3
    baf4:	880b883a 	mov	r5,r17
    baf8:	8009883a 	mov	r4,r16
    bafc:	100d883a 	mov	r6,r2
    bb00:	000ee100 	call	ee10 <__subdf3>
    bb04:	1009883a 	mov	r4,r2
    bb08:	000d883a 	mov	r6,zero
    bb0c:	000f883a 	mov	r7,zero
    bb10:	180b883a 	mov	r5,r3
    bb14:	e0800015 	stw	r2,0(fp)
    bb18:	e0c00115 	stw	r3,4(fp)
    bb1c:	000f5a80 	call	f5a8 <__nedf2>
    bb20:	103f9a26 	beq	r2,zero,b98c <_strtod_r+0xfa4>
    bb24:	d9001417 	ldw	r4,80(sp)
    bb28:	2013003a 	cmpeq	r9,r4,zero
    bb2c:	483f211e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    bb30:	003fcc06 	br	ba64 <_strtod_r+0x107c>
    bb34:	d9001417 	ldw	r4,80(sp)
    bb38:	e1c00017 	ldw	r7,0(fp)
    bb3c:	2013003a 	cmpeq	r9,r4,zero
    bb40:	4800bd1e 	bne	r9,zero,be38 <_strtod_r+0x1450>
    bb44:	28dffc2c 	andhi	r3,r5,32752
    bb48:	0081a834 	movhi	r2,1696
    bb4c:	10c0ba36 	bltu	r2,r3,be38 <_strtod_r+0x1450>
    bb50:	1804d53a 	srli	r2,r3,20
    bb54:	00c01ac4 	movi	r3,107
    bb58:	013fffc4 	movi	r4,-1
    bb5c:	1887c83a 	sub	r3,r3,r2
    bb60:	20c4983a 	sll	r2,r4,r3
    bb64:	11ffd91e 	bne	r2,r7,bacc <_strtod_r+0x10e4>
    bb68:	28dffc2c 	andhi	r3,r5,32752
    bb6c:	00800434 	movhi	r2,16
    bb70:	188d883a 	add	r6,r3,r2
    bb74:	e1800115 	stw	r6,4(fp)
    bb78:	e0000015 	stw	zero,0(fp)
    bb7c:	483f0d1e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    bb80:	003fb806 	br	ba64 <_strtod_r+0x107c>
    bb84:	0021883a 	mov	r16,zero
    bb88:	0005883a 	mov	r2,zero
    bb8c:	044ff834 	movhi	r17,16352
    bb90:	00eff834 	movhi	r3,49120
    bb94:	003e8606 	br	b5b0 <_strtod_r+0xbc8>
    bb98:	803d9e26 	beq	r16,zero,b214 <_strtod_r+0x82c>
    bb9c:	0421c83a 	sub	r16,zero,r16
    bba0:	814003cc 	andi	r5,r16,15
    bba4:	28000f26 	beq	r5,zero,bbe4 <_strtod_r+0x11fc>
    bba8:	280a90fa 	slli	r5,r5,3
    bbac:	01000074 	movhi	r4,1
    bbb0:	210d8704 	addi	r4,r4,13852
    bbb4:	e0800017 	ldw	r2,0(fp)
    bbb8:	290b883a 	add	r5,r5,r4
    bbbc:	2a000017 	ldw	r8,0(r5)
    bbc0:	e0c00117 	ldw	r3,4(fp)
    bbc4:	2a400117 	ldw	r9,4(r5)
    bbc8:	1009883a 	mov	r4,r2
    bbcc:	180b883a 	mov	r5,r3
    bbd0:	480f883a 	mov	r7,r9
    bbd4:	400d883a 	mov	r6,r8
    bbd8:	000f2c80 	call	f2c8 <__divdf3>
    bbdc:	e0c00115 	stw	r3,4(fp)
    bbe0:	e0800015 	stw	r2,0(fp)
    bbe4:	8021d13a 	srai	r16,r16,4
    bbe8:	803d8a26 	beq	r16,zero,b214 <_strtod_r+0x82c>
    bbec:	008007c4 	movi	r2,31
    bbf0:	14002d16 	blt	r2,r16,bca8 <_strtod_r+0x12c0>
    bbf4:	8080040c 	andi	r2,r16,16
    bbf8:	10009926 	beq	r2,zero,be60 <_strtod_r+0x1478>
    bbfc:	00801a84 	movi	r2,106
    bc00:	d8801415 	stw	r2,80(sp)
    bc04:	0400110e 	bge	zero,r16,bc4c <_strtod_r+0x1264>
    bc08:	04400074 	movhi	r17,1
    bc0c:	8c4dd404 	addi	r17,r17,14160
    bc10:	8080004c 	andi	r2,r16,1
    bc14:	1005003a 	cmpeq	r2,r2,zero
    bc18:	1000091e 	bne	r2,zero,bc40 <_strtod_r+0x1258>
    bc1c:	e0800017 	ldw	r2,0(fp)
    bc20:	e0c00117 	ldw	r3,4(fp)
    bc24:	89800017 	ldw	r6,0(r17)
    bc28:	89c00117 	ldw	r7,4(r17)
    bc2c:	180b883a 	mov	r5,r3
    bc30:	1009883a 	mov	r4,r2
    bc34:	000ef040 	call	ef04 <__muldf3>
    bc38:	e0c00115 	stw	r3,4(fp)
    bc3c:	e0800015 	stw	r2,0(fp)
    bc40:	8021d07a 	srai	r16,r16,1
    bc44:	8c400204 	addi	r17,r17,8
    bc48:	043ff116 	blt	zero,r16,bc10 <_strtod_r+0x1228>
    bc4c:	d8c01417 	ldw	r3,80(sp)
    bc50:	18000d26 	beq	r3,zero,bc88 <_strtod_r+0x12a0>
    bc54:	e1000117 	ldw	r4,4(fp)
    bc58:	00c01ac4 	movi	r3,107
    bc5c:	209ffc2c 	andhi	r2,r4,32752
    bc60:	1004d53a 	srli	r2,r2,20
    bc64:	1887c83a 	sub	r3,r3,r2
    bc68:	00c0070e 	bge	zero,r3,bc88 <_strtod_r+0x12a0>
    bc6c:	008007c4 	movi	r2,31
    bc70:	10c0900e 	bge	r2,r3,beb4 <_strtod_r+0x14cc>
    bc74:	00800d04 	movi	r2,52
    bc78:	e0000015 	stw	zero,0(fp)
    bc7c:	10c0870e 	bge	r2,r3,be9c <_strtod_r+0x14b4>
    bc80:	0180dc34 	movhi	r6,880
    bc84:	e1800115 	stw	r6,4(fp)
    bc88:	e0800017 	ldw	r2,0(fp)
    bc8c:	e0c00117 	ldw	r3,4(fp)
    bc90:	000d883a 	mov	r6,zero
    bc94:	000f883a 	mov	r7,zero
    bc98:	180b883a 	mov	r5,r3
    bc9c:	1009883a 	mov	r4,r2
    bca0:	000f5a80 	call	f5a8 <__nedf2>
    bca4:	103d5c1e 	bne	r2,zero,b218 <_strtod_r+0x830>
    bca8:	00800884 	movi	r2,34
    bcac:	a8800015 	stw	r2,0(r21)
    bcb0:	e0000015 	stw	zero,0(fp)
    bcb4:	e0000115 	stw	zero,4(fp)
    bcb8:	003bc206 	br	abc4 <_strtod_r+0x1dc>
    bcbc:	d8801417 	ldw	r2,80(sp)
    bcc0:	1013003a 	cmpeq	r9,r2,zero
    bcc4:	483ebb1e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    bcc8:	003f6606 	br	ba64 <_strtod_r+0x107c>
    bccc:	e1800117 	ldw	r6,4(fp)
    bcd0:	00c00434 	movhi	r3,16
    bcd4:	18ffffc4 	addi	r3,r3,-1
    bcd8:	30c4703a 	and	r2,r6,r3
    bcdc:	103f7a1e 	bne	r2,zero,bac8 <_strtod_r+0x10e0>
    bce0:	e1c00017 	ldw	r7,0(fp)
    bce4:	383f791e 	bne	r7,zero,bacc <_strtod_r+0x10e4>
    bce8:	003f5606 	br	ba44 <_strtod_r+0x105c>
    bcec:	d9800f17 	ldw	r6,60(sp)
    bcf0:	00bffa84 	movi	r2,-22
    bcf4:	30bcd416 	blt	r6,r2,b048 <_strtod_r+0x660>
    bcf8:	317ffe24 	muli	r5,r6,-8
    bcfc:	01000074 	movhi	r4,1
    bd00:	210d8704 	addi	r4,r4,13852
    bd04:	e0800017 	ldw	r2,0(fp)
    bd08:	290b883a 	add	r5,r5,r4
    bd0c:	2a000017 	ldw	r8,0(r5)
    bd10:	e0c00117 	ldw	r3,4(fp)
    bd14:	2a400117 	ldw	r9,4(r5)
    bd18:	1009883a 	mov	r4,r2
    bd1c:	180b883a 	mov	r5,r3
    bd20:	480f883a 	mov	r7,r9
    bd24:	400d883a 	mov	r6,r8
    bd28:	000f2c80 	call	f2c8 <__divdf3>
    bd2c:	e0c00115 	stw	r3,4(fp)
    bd30:	e0800015 	stw	r2,0(fp)
    bd34:	003ba306 	br	abc4 <_strtod_r+0x1dc>
    bd38:	00800404 	movi	r2,16
    bd3c:	14c02f0e 	bge	r2,r19,bdfc <_strtod_r+0x1414>
    bd40:	000f883a 	mov	r7,zero
    bd44:	003f2006 	br	b9c8 <_strtod_r+0xfe0>
    bd48:	d9801417 	ldw	r6,80(sp)
    bd4c:	3013003a 	cmpeq	r9,r6,zero
    bd50:	483e981e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    bd54:	003f4306 	br	ba64 <_strtod_r+0x107c>
    bd58:	00801a44 	movi	r2,105
    bd5c:	20bc6326 	beq	r4,r2,aeec <_strtod_r+0x504>
    bd60:	00801b84 	movi	r2,110
    bd64:	20bbba1e 	bne	r4,r2,ac50 <_strtod_r+0x268>
    bd68:	dc000404 	addi	r16,sp,16
    bd6c:	8009883a 	mov	r4,r16
    bd70:	01400074 	movhi	r5,1
    bd74:	294dd304 	addi	r5,r5,14156
    bd78:	000a9a00 	call	a9a0 <match>
    bd7c:	103bb426 	beq	r2,zero,ac50 <_strtod_r+0x268>
    bd80:	d8800417 	ldw	r2,16(sp)
    bd84:	00c00a04 	movi	r3,40
    bd88:	11000007 	ldb	r4,0(r2)
    bd8c:	20c03626 	beq	r4,r3,be68 <_strtod_r+0x1480>
    bd90:	01bffe34 	movhi	r6,65528
    bd94:	e1800115 	stw	r6,4(fp)
    bd98:	e0000015 	stw	zero,0(fp)
    bd9c:	003b8906 	br	abc4 <_strtod_r+0x1dc>
    bda0:	e4400117 	ldw	r17,4(fp)
    bda4:	3809883a 	mov	r4,r7
    bda8:	3821883a 	mov	r16,r7
    bdac:	880b883a 	mov	r5,r17
    bdb0:	00091d80 	call	91d8 <__ulp>
    bdb4:	100d883a 	mov	r6,r2
    bdb8:	880b883a 	mov	r5,r17
    bdbc:	180f883a 	mov	r7,r3
    bdc0:	8009883a 	mov	r4,r16
    bdc4:	000ee900 	call	ee90 <__adddf3>
    bdc8:	d9801417 	ldw	r6,80(sp)
    bdcc:	e0c00115 	stw	r3,4(fp)
    bdd0:	e0800015 	stw	r2,0(fp)
    bdd4:	3013003a 	cmpeq	r9,r6,zero
    bdd8:	483e761e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    bddc:	003f2106 	br	ba64 <_strtod_r+0x107c>
    bde0:	000f883a 	mov	r7,zero
    bde4:	003cf006 	br	b1a8 <_strtod_r+0x7c0>
    bde8:	0080d434 	movhi	r2,848
    bdec:	188d883a 	add	r6,r3,r2
    bdf0:	d8001415 	stw	zero,80(sp)
    bdf4:	e1800115 	stw	r6,4(fp)
    bdf8:	003d0706 	br	b218 <_strtod_r+0x830>
    bdfc:	808002a4 	muli	r2,r16,10
    be00:	000f883a 	mov	r7,zero
    be04:	1261883a 	add	r16,r2,r9
    be08:	003eef06 	br	b9c8 <_strtod_r+0xfe0>
    be0c:	309ffc2c 	andhi	r2,r6,32752
    be10:	00fffc34 	movhi	r3,65520
    be14:	10c5883a 	add	r2,r2,r3
    be18:	00c00434 	movhi	r3,16
    be1c:	18ffffc4 	addi	r3,r3,-1
    be20:	10ccb03a 	or	r6,r2,r3
    be24:	01ffffc4 	movi	r7,-1
    be28:	e1800115 	stw	r6,4(fp)
    be2c:	e1c00015 	stw	r7,0(fp)
    be30:	483e601e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    be34:	003f0b06 	br	ba64 <_strtod_r+0x107c>
    be38:	00bfffc4 	movi	r2,-1
    be3c:	003f4906 	br	bb64 <_strtod_r+0x117c>
    be40:	0025883a 	mov	r18,zero
    be44:	003cb106 	br	b10c <_strtod_r+0x724>
    be48:	d8c01417 	ldw	r3,80(sp)
    be4c:	1813003a 	cmpeq	r9,r3,zero
    be50:	483e581e 	bne	r9,zero,b7b4 <_strtod_r+0xdcc>
    be54:	003f0306 	br	ba64 <_strtod_r+0x107c>
    be58:	980f883a 	mov	r7,r19
    be5c:	003ed406 	br	b9b0 <_strtod_r+0xfc8>
    be60:	d8001415 	stw	zero,80(sp)
    be64:	003f6706 	br	bc04 <_strtod_r+0x121c>
    be68:	8009883a 	mov	r4,r16
    be6c:	01400074 	movhi	r5,1
    be70:	29504b04 	addi	r5,r5,16684
    be74:	d9800d04 	addi	r6,sp,52
    be78:	000d9180 	call	d918 <__hexnan>
    be7c:	00c00144 	movi	r3,5
    be80:	10ffc31e 	bne	r2,r3,bd90 <_strtod_r+0x13a8>
    be84:	d8800e17 	ldw	r2,56(sp)
    be88:	d9c00d17 	ldw	r7,52(sp)
    be8c:	119ffc34 	orhi	r6,r2,32752
    be90:	e1800115 	stw	r6,4(fp)
    be94:	e1c00015 	stw	r7,0(fp)
    be98:	003b4a06 	br	abc4 <_strtod_r+0x1dc>
    be9c:	18fff804 	addi	r3,r3,-32
    bea0:	00bfffc4 	movi	r2,-1
    bea4:	10c4983a 	sll	r2,r2,r3
    bea8:	208c703a 	and	r6,r4,r2
    beac:	e1800115 	stw	r6,4(fp)
    beb0:	003f7506 	br	bc88 <_strtod_r+0x12a0>
    beb4:	00bfffc4 	movi	r2,-1
    beb8:	10c4983a 	sll	r2,r2,r3
    bebc:	e0c00017 	ldw	r3,0(fp)
    bec0:	188e703a 	and	r7,r3,r2
    bec4:	e1c00015 	stw	r7,0(fp)
    bec8:	003f6f06 	br	bc88 <_strtod_r+0x12a0>

0000becc <strtof>:
    becc:	defffa04 	addi	sp,sp,-24
    bed0:	dd000415 	stw	r20,16(sp)
    bed4:	05000074 	movhi	r20,1
    bed8:	a514d804 	addi	r20,r20,21344
    bedc:	2007883a 	mov	r3,r4
    bee0:	a1000017 	ldw	r4,0(r20)
    bee4:	280d883a 	mov	r6,r5
    bee8:	180b883a 	mov	r5,r3
    beec:	dfc00515 	stw	ra,20(sp)
    bef0:	dcc00315 	stw	r19,12(sp)
    bef4:	dc800215 	stw	r18,8(sp)
    bef8:	dc400115 	stw	r17,4(sp)
    befc:	dc000015 	stw	r16,0(sp)
    bf00:	000a9e80 	call	a9e8 <_strtod_r>
    bf04:	180b883a 	mov	r5,r3
    bf08:	1009883a 	mov	r4,r2
    bf0c:	1823883a 	mov	r17,r3
    bf10:	1021883a 	mov	r16,r2
    bf14:	000fa200 	call	fa20 <__truncdfsf2>
    bf18:	1009883a 	mov	r4,r2
    bf1c:	000b883a 	mov	r5,zero
    bf20:	1025883a 	mov	r18,r2
    bf24:	1027883a 	mov	r19,r2
    bf28:	000e8980 	call	e898 <__nesf2>
    bf2c:	000d883a 	mov	r6,zero
    bf30:	000f883a 	mov	r7,zero
    bf34:	8009883a 	mov	r4,r16
    bf38:	880b883a 	mov	r5,r17
    bf3c:	10000e1e 	bne	r2,zero,bf78 <strtof+0xac>
    bf40:	000f5a80 	call	f5a8 <__nedf2>
    bf44:	10000c26 	beq	r2,zero,bf78 <strtof+0xac>
    bf48:	a0c00017 	ldw	r3,0(r20)
    bf4c:	00800884 	movi	r2,34
    bf50:	18800015 	stw	r2,0(r3)
    bf54:	9805883a 	mov	r2,r19
    bf58:	dfc00517 	ldw	ra,20(sp)
    bf5c:	dd000417 	ldw	r20,16(sp)
    bf60:	dcc00317 	ldw	r19,12(sp)
    bf64:	dc800217 	ldw	r18,8(sp)
    bf68:	dc400117 	ldw	r17,4(sp)
    bf6c:	dc000017 	ldw	r16,0(sp)
    bf70:	dec00604 	addi	sp,sp,24
    bf74:	f800283a 	ret
    bf78:	9009883a 	mov	r4,r18
    bf7c:	015fe034 	movhi	r5,32640
    bf80:	297fffc4 	addi	r5,r5,-1
    bf84:	000e9100 	call	e910 <__gtsf2>
    bf88:	00ffffc4 	movi	r3,-1
    bf8c:	011ffc34 	movhi	r4,32752
    bf90:	213fffc4 	addi	r4,r4,-1
    bf94:	200f883a 	mov	r7,r4
    bf98:	180d883a 	mov	r6,r3
    bf9c:	8009883a 	mov	r4,r16
    bfa0:	880b883a 	mov	r5,r17
    bfa4:	00800f16 	blt	zero,r2,bfe4 <strtof+0x118>
    bfa8:	9009883a 	mov	r4,r18
    bfac:	017fe034 	movhi	r5,65408
    bfb0:	297fffc4 	addi	r5,r5,-1
    bfb4:	000e9880 	call	e988 <__ltsf2>
    bfb8:	023fffc4 	movi	r8,-1
    bfbc:	027ffc34 	movhi	r9,65520
    bfc0:	4a7fffc4 	addi	r9,r9,-1
    bfc4:	880b883a 	mov	r5,r17
    bfc8:	480f883a 	mov	r7,r9
    bfcc:	8009883a 	mov	r4,r16
    bfd0:	400d883a 	mov	r6,r8
    bfd4:	103fdf0e 	bge	r2,zero,bf54 <strtof+0x88>
    bfd8:	000f7400 	call	f740 <__ltdf2>
    bfdc:	103fda0e 	bge	r2,zero,bf48 <strtof+0x7c>
    bfe0:	003fdc06 	br	bf54 <strtof+0x88>
    bfe4:	000f6300 	call	f630 <__gtdf2>
    bfe8:	00bfd70e 	bge	zero,r2,bf48 <strtof+0x7c>
    bfec:	003fee06 	br	bfa8 <strtof+0xdc>

0000bff0 <strtod>:
    bff0:	01800074 	movhi	r6,1
    bff4:	3194d804 	addi	r6,r6,21344
    bff8:	2007883a 	mov	r3,r4
    bffc:	31000017 	ldw	r4,0(r6)
    c000:	280d883a 	mov	r6,r5
    c004:	180b883a 	mov	r5,r3
    c008:	000a9e81 	jmpi	a9e8 <_strtod_r>

0000c00c <_strtol_r>:
    c00c:	defff304 	addi	sp,sp,-52
    c010:	00800074 	movhi	r2,1
    c014:	1094d704 	addi	r2,r2,21340
    c018:	dcc00615 	stw	r19,24(sp)
    c01c:	14c00017 	ldw	r19,0(r2)
    c020:	ddc00a15 	stw	r23,40(sp)
    c024:	dc000315 	stw	r16,12(sp)
    c028:	dfc00c15 	stw	ra,48(sp)
    c02c:	df000b15 	stw	fp,44(sp)
    c030:	dd800915 	stw	r22,36(sp)
    c034:	dd400815 	stw	r21,32(sp)
    c038:	dd000715 	stw	r20,28(sp)
    c03c:	dc800515 	stw	r18,20(sp)
    c040:	dc400415 	stw	r17,16(sp)
    c044:	282f883a 	mov	r23,r5
    c048:	d9000015 	stw	r4,0(sp)
    c04c:	d9800115 	stw	r6,4(sp)
    c050:	2821883a 	mov	r16,r5
    c054:	84400007 	ldb	r17,0(r16)
    c058:	84000044 	addi	r16,r16,1
    c05c:	9c47883a 	add	r3,r19,r17
    c060:	18800003 	ldbu	r2,0(r3)
    c064:	1080020c 	andi	r2,r2,8
    c068:	103ffa1e 	bne	r2,zero,c054 <_strtol_r+0x48>
    c06c:	00800b44 	movi	r2,45
    c070:	88805c26 	beq	r17,r2,c1e4 <_strtol_r+0x1d8>
    c074:	00800ac4 	movi	r2,43
    c078:	88805726 	beq	r17,r2,c1d8 <_strtol_r+0x1cc>
    c07c:	0039883a 	mov	fp,zero
    c080:	3807003a 	cmpeq	r3,r7,zero
    c084:	1800431e 	bne	r3,zero,c194 <_strtol_r+0x188>
    c088:	00800404 	movi	r2,16
    c08c:	38804126 	beq	r7,r2,c194 <_strtol_r+0x188>
    c090:	3829883a 	mov	r20,r7
    c094:	e02cc03a 	cmpne	r22,fp,zero
    c098:	b0004b1e 	bne	r22,zero,c1c8 <_strtol_r+0x1bc>
    c09c:	04a00034 	movhi	r18,32768
    c0a0:	94bfffc4 	addi	r18,r18,-1
    c0a4:	9009883a 	mov	r4,r18
    c0a8:	a00b883a 	mov	r5,r20
    c0ac:	d9c00215 	stw	r7,8(sp)
    c0b0:	000132c0 	call	132c <__umodsi3>
    c0b4:	9009883a 	mov	r4,r18
    c0b8:	a00b883a 	mov	r5,r20
    c0bc:	102b883a 	mov	r21,r2
    c0c0:	00013240 	call	1324 <__udivsi3>
    c0c4:	1011883a 	mov	r8,r2
    c0c8:	9c45883a 	add	r2,r19,r17
    c0cc:	11000003 	ldbu	r4,0(r2)
    c0d0:	000b883a 	mov	r5,zero
    c0d4:	000d883a 	mov	r6,zero
    c0d8:	20c0010c 	andi	r3,r4,4
    c0dc:	d9c00217 	ldw	r7,8(sp)
    c0e0:	18000e26 	beq	r3,zero,c11c <_strtol_r+0x110>
    c0e4:	88fff404 	addi	r3,r17,-48
    c0e8:	19c0140e 	bge	r3,r7,c13c <_strtol_r+0x130>
    c0ec:	30003116 	blt	r6,zero,c1b4 <_strtol_r+0x1a8>
    c0f0:	41403036 	bltu	r8,r5,c1b4 <_strtol_r+0x1a8>
    c0f4:	2a002e26 	beq	r5,r8,c1b0 <_strtol_r+0x1a4>
    c0f8:	2d05383a 	mul	r2,r5,r20
    c0fc:	01800044 	movi	r6,1
    c100:	10cb883a 	add	r5,r2,r3
    c104:	84400007 	ldb	r17,0(r16)
    c108:	84000044 	addi	r16,r16,1
    c10c:	9c45883a 	add	r2,r19,r17
    c110:	11000003 	ldbu	r4,0(r2)
    c114:	20c0010c 	andi	r3,r4,4
    c118:	183ff21e 	bne	r3,zero,c0e4 <_strtol_r+0xd8>
    c11c:	208000cc 	andi	r2,r4,3
    c120:	10000626 	beq	r2,zero,c13c <_strtol_r+0x130>
    c124:	2080004c 	andi	r2,r4,1
    c128:	1005003a 	cmpeq	r2,r2,zero
    c12c:	1000231e 	bne	r2,zero,c1bc <_strtol_r+0x1b0>
    c130:	00800dc4 	movi	r2,55
    c134:	8887c83a 	sub	r3,r17,r2
    c138:	19ffec16 	blt	r3,r7,c0ec <_strtol_r+0xe0>
    c13c:	30002d16 	blt	r6,zero,c1f4 <_strtol_r+0x1e8>
    c140:	b000231e 	bne	r22,zero,c1d0 <_strtol_r+0x1c4>
    c144:	2807883a 	mov	r3,r5
    c148:	d8800117 	ldw	r2,4(sp)
    c14c:	10000426 	beq	r2,zero,c160 <_strtol_r+0x154>
    c150:	30000126 	beq	r6,zero,c158 <_strtol_r+0x14c>
    c154:	85ffffc4 	addi	r23,r16,-1
    c158:	d9000117 	ldw	r4,4(sp)
    c15c:	25c00015 	stw	r23,0(r4)
    c160:	1805883a 	mov	r2,r3
    c164:	dfc00c17 	ldw	ra,48(sp)
    c168:	df000b17 	ldw	fp,44(sp)
    c16c:	ddc00a17 	ldw	r23,40(sp)
    c170:	dd800917 	ldw	r22,36(sp)
    c174:	dd400817 	ldw	r21,32(sp)
    c178:	dd000717 	ldw	r20,28(sp)
    c17c:	dcc00617 	ldw	r19,24(sp)
    c180:	dc800517 	ldw	r18,20(sp)
    c184:	dc400417 	ldw	r17,16(sp)
    c188:	dc000317 	ldw	r16,12(sp)
    c18c:	dec00d04 	addi	sp,sp,52
    c190:	f800283a 	ret
    c194:	00800c04 	movi	r2,48
    c198:	88801d26 	beq	r17,r2,c210 <_strtol_r+0x204>
    c19c:	183fbc26 	beq	r3,zero,c090 <_strtol_r+0x84>
    c1a0:	00800c04 	movi	r2,48
    c1a4:	88802726 	beq	r17,r2,c244 <_strtol_r+0x238>
    c1a8:	01c00284 	movi	r7,10
    c1ac:	003fb806 	br	c090 <_strtol_r+0x84>
    c1b0:	a8ffd10e 	bge	r21,r3,c0f8 <_strtol_r+0xec>
    c1b4:	01bfffc4 	movi	r6,-1
    c1b8:	003fd206 	br	c104 <_strtol_r+0xf8>
    c1bc:	008015c4 	movi	r2,87
    c1c0:	8887c83a 	sub	r3,r17,r2
    c1c4:	003fdc06 	br	c138 <_strtol_r+0x12c>
    c1c8:	04a00034 	movhi	r18,32768
    c1cc:	003fb506 	br	c0a4 <_strtol_r+0x98>
    c1d0:	0147c83a 	sub	r3,zero,r5
    c1d4:	003fdc06 	br	c148 <_strtol_r+0x13c>
    c1d8:	84400007 	ldb	r17,0(r16)
    c1dc:	84000044 	addi	r16,r16,1
    c1e0:	003fa606 	br	c07c <_strtol_r+0x70>
    c1e4:	84400007 	ldb	r17,0(r16)
    c1e8:	07000044 	movi	fp,1
    c1ec:	84000044 	addi	r16,r16,1
    c1f0:	003fa306 	br	c080 <_strtol_r+0x74>
    c1f4:	e005003a 	cmpeq	r2,fp,zero
    c1f8:	10000f1e 	bne	r2,zero,c238 <_strtol_r+0x22c>
    c1fc:	00e00034 	movhi	r3,32768
    c200:	d9000017 	ldw	r4,0(sp)
    c204:	00800884 	movi	r2,34
    c208:	20800015 	stw	r2,0(r4)
    c20c:	003fce06 	br	c148 <_strtol_r+0x13c>
    c210:	81000007 	ldb	r4,0(r16)
    c214:	00801e04 	movi	r2,120
    c218:	20800226 	beq	r4,r2,c224 <_strtol_r+0x218>
    c21c:	00801604 	movi	r2,88
    c220:	20bfde1e 	bne	r4,r2,c19c <_strtol_r+0x190>
    c224:	84400047 	ldb	r17,1(r16)
    c228:	01c00404 	movi	r7,16
    c22c:	84000084 	addi	r16,r16,2
    c230:	3829883a 	mov	r20,r7
    c234:	003f9706 	br	c094 <_strtol_r+0x88>
    c238:	00e00034 	movhi	r3,32768
    c23c:	18ffffc4 	addi	r3,r3,-1
    c240:	003fef06 	br	c200 <_strtol_r+0x1f4>
    c244:	01c00204 	movi	r7,8
    c248:	3829883a 	mov	r20,r7
    c24c:	003f9106 	br	c094 <_strtol_r+0x88>

0000c250 <strtol>:
    c250:	00800074 	movhi	r2,1
    c254:	1094d804 	addi	r2,r2,21344
    c258:	2013883a 	mov	r9,r4
    c25c:	11000017 	ldw	r4,0(r2)
    c260:	2805883a 	mov	r2,r5
    c264:	300f883a 	mov	r7,r6
    c268:	480b883a 	mov	r5,r9
    c26c:	100d883a 	mov	r6,r2
    c270:	000c00c1 	jmpi	c00c <_strtol_r>

0000c274 <_strtoll_r>:
    c274:	defff004 	addi	sp,sp,-64
    c278:	00800074 	movhi	r2,1
    c27c:	1094d704 	addi	r2,r2,21340
    c280:	df000e15 	stw	fp,56(sp)
    c284:	17000017 	ldw	fp,0(r2)
    c288:	ddc00d15 	stw	r23,52(sp)
    c28c:	dd000a15 	stw	r20,40(sp)
    c290:	dfc00f15 	stw	ra,60(sp)
    c294:	dd800c15 	stw	r22,48(sp)
    c298:	dd400b15 	stw	r21,44(sp)
    c29c:	dcc00915 	stw	r19,36(sp)
    c2a0:	dc800815 	stw	r18,32(sp)
    c2a4:	dc400715 	stw	r17,28(sp)
    c2a8:	dc000615 	stw	r16,24(sp)
    c2ac:	d9400315 	stw	r5,12(sp)
    c2b0:	d9000215 	stw	r4,8(sp)
    c2b4:	d9800415 	stw	r6,16(sp)
    c2b8:	382f883a 	mov	r23,r7
    c2bc:	2829883a 	mov	r20,r5
    c2c0:	a4c00007 	ldb	r19,0(r20)
    c2c4:	a5000044 	addi	r20,r20,1
    c2c8:	e4c7883a 	add	r3,fp,r19
    c2cc:	18800003 	ldbu	r2,0(r3)
    c2d0:	1080020c 	andi	r2,r2,8
    c2d4:	103ffa1e 	bne	r2,zero,c2c0 <_strtoll_r+0x4c>
    c2d8:	00800b44 	movi	r2,45
    c2dc:	98808826 	beq	r19,r2,c500 <_strtoll_r+0x28c>
    c2e0:	00800ac4 	movi	r2,43
    c2e4:	98808326 	beq	r19,r2,c4f4 <_strtoll_r+0x280>
    c2e8:	d8000115 	stw	zero,4(sp)
    c2ec:	b807003a 	cmpeq	r3,r23,zero
    c2f0:	18005f1e 	bne	r3,zero,c470 <_strtoll_r+0x1fc>
    c2f4:	00800404 	movi	r2,16
    c2f8:	b8805d26 	beq	r23,r2,c470 <_strtoll_r+0x1fc>
    c2fc:	b82dd7fa 	srai	r22,r23,31
    c300:	b82b883a 	mov	r21,r23
    c304:	d8c00117 	ldw	r3,4(sp)
    c308:	1806c03a 	cmpne	r3,r3,zero
    c30c:	d8c00515 	stw	r3,20(sp)
    c310:	1800631e 	bne	r3,zero,c4a0 <_strtoll_r+0x22c>
    c314:	043fffc4 	movi	r16,-1
    c318:	04600034 	movhi	r17,32768
    c31c:	8c7fffc4 	addi	r17,r17,-1
    c320:	880b883a 	mov	r5,r17
    c324:	8009883a 	mov	r4,r16
    c328:	a80d883a 	mov	r6,r21
    c32c:	b00f883a 	mov	r7,r22
    c330:	000e2e80 	call	e2e8 <__umoddi3>
    c334:	880b883a 	mov	r5,r17
    c338:	8009883a 	mov	r4,r16
    c33c:	b00f883a 	mov	r7,r22
    c340:	a80d883a 	mov	r6,r21
    c344:	d8800015 	stw	r2,0(sp)
    c348:	000dd0c0 	call	dd0c <__udivdi3>
    c34c:	1023883a 	mov	r17,r2
    c350:	e4c5883a 	add	r2,fp,r19
    c354:	11000003 	ldbu	r4,0(r2)
    c358:	1825883a 	mov	r18,r3
    c35c:	0015883a 	mov	r10,zero
    c360:	20c0010c 	andi	r3,r4,4
    c364:	0017883a 	mov	r11,zero
    c368:	000f883a 	mov	r7,zero
    c36c:	18001a26 	beq	r3,zero,c3d8 <_strtoll_r+0x164>
    c370:	9c3ff404 	addi	r16,r19,-48
    c374:	85c0200e 	bge	r16,r23,c3f8 <_strtoll_r+0x184>
    c378:	38003b16 	blt	r7,zero,c468 <_strtoll_r+0x1f4>
    c37c:	92c03a36 	bltu	r18,r11,c468 <_strtoll_r+0x1f4>
    c380:	5c803826 	beq	r11,r18,c464 <_strtoll_r+0x1f0>
    c384:	54404c26 	beq	r10,r17,c4b8 <_strtoll_r+0x244>
    c388:	580b883a 	mov	r5,r11
    c38c:	5009883a 	mov	r4,r10
    c390:	a80d883a 	mov	r6,r21
    c394:	b00f883a 	mov	r7,r22
    c398:	000dbd00 	call	dbd0 <__muldi3>
    c39c:	8013d7fa 	srai	r9,r16,31
    c3a0:	100d883a 	mov	r6,r2
    c3a4:	1405883a 	add	r2,r2,r16
    c3a8:	118d803a 	cmpltu	r6,r2,r6
    c3ac:	1a47883a 	add	r3,r3,r9
    c3b0:	30cd883a 	add	r6,r6,r3
    c3b4:	1015883a 	mov	r10,r2
    c3b8:	3017883a 	mov	r11,r6
    c3bc:	01c00044 	movi	r7,1
    c3c0:	a4c00007 	ldb	r19,0(r20)
    c3c4:	a5000044 	addi	r20,r20,1
    c3c8:	e4c5883a 	add	r2,fp,r19
    c3cc:	11000003 	ldbu	r4,0(r2)
    c3d0:	20c0010c 	andi	r3,r4,4
    c3d4:	183fe61e 	bne	r3,zero,c370 <_strtoll_r+0xfc>
    c3d8:	208000cc 	andi	r2,r4,3
    c3dc:	10000626 	beq	r2,zero,c3f8 <_strtoll_r+0x184>
    c3e0:	2080004c 	andi	r2,r4,1
    c3e4:	1005003a 	cmpeq	r2,r2,zero
    c3e8:	1000301e 	bne	r2,zero,c4ac <_strtoll_r+0x238>
    c3ec:	02000dc4 	movi	r8,55
    c3f0:	9a21c83a 	sub	r16,r19,r8
    c3f4:	85ffe016 	blt	r16,r23,c378 <_strtoll_r+0x104>
    c3f8:	38004616 	blt	r7,zero,c514 <_strtoll_r+0x2a0>
    c3fc:	d8800517 	ldw	r2,20(sp)
    c400:	1000341e 	bne	r2,zero,c4d4 <_strtoll_r+0x260>
    c404:	500b883a 	mov	r5,r10
    c408:	580d883a 	mov	r6,r11
    c40c:	d8c00417 	ldw	r3,16(sp)
    c410:	18000626 	beq	r3,zero,c42c <_strtoll_r+0x1b8>
    c414:	38000226 	beq	r7,zero,c420 <_strtoll_r+0x1ac>
    c418:	a53fffc4 	addi	r20,r20,-1
    c41c:	dd000315 	stw	r20,12(sp)
    c420:	d8c00317 	ldw	r3,12(sp)
    c424:	d8800417 	ldw	r2,16(sp)
    c428:	10c00015 	stw	r3,0(r2)
    c42c:	2805883a 	mov	r2,r5
    c430:	3007883a 	mov	r3,r6
    c434:	dfc00f17 	ldw	ra,60(sp)
    c438:	df000e17 	ldw	fp,56(sp)
    c43c:	ddc00d17 	ldw	r23,52(sp)
    c440:	dd800c17 	ldw	r22,48(sp)
    c444:	dd400b17 	ldw	r21,44(sp)
    c448:	dd000a17 	ldw	r20,40(sp)
    c44c:	dcc00917 	ldw	r19,36(sp)
    c450:	dc800817 	ldw	r18,32(sp)
    c454:	dc400717 	ldw	r17,28(sp)
    c458:	dc000617 	ldw	r16,24(sp)
    c45c:	dec01004 	addi	sp,sp,64
    c460:	f800283a 	ret
    c464:	8abfc72e 	bgeu	r17,r10,c384 <_strtoll_r+0x110>
    c468:	01ffffc4 	movi	r7,-1
    c46c:	003fd406 	br	c3c0 <_strtoll_r+0x14c>
    c470:	00800c04 	movi	r2,48
    c474:	98803226 	beq	r19,r2,c540 <_strtoll_r+0x2cc>
    c478:	183fa026 	beq	r3,zero,c2fc <_strtoll_r+0x88>
    c47c:	00800c04 	movi	r2,48
    c480:	98803e26 	beq	r19,r2,c57c <_strtoll_r+0x308>
    c484:	d8c00117 	ldw	r3,4(sp)
    c488:	05c00284 	movi	r23,10
    c48c:	b82b883a 	mov	r21,r23
    c490:	1806c03a 	cmpne	r3,r3,zero
    c494:	002d883a 	mov	r22,zero
    c498:	d8c00515 	stw	r3,20(sp)
    c49c:	183f9d26 	beq	r3,zero,c314 <_strtoll_r+0xa0>
    c4a0:	0021883a 	mov	r16,zero
    c4a4:	04600034 	movhi	r17,32768
    c4a8:	003f9d06 	br	c320 <_strtoll_r+0xac>
    c4ac:	020015c4 	movi	r8,87
    c4b0:	9a21c83a 	sub	r16,r19,r8
    c4b4:	003fcf06 	br	c3f4 <_strtoll_r+0x180>
    c4b8:	5cbfb31e 	bne	r11,r18,c388 <_strtoll_r+0x114>
    c4bc:	d8800017 	ldw	r2,0(sp)
    c4c0:	143fb10e 	bge	r2,r16,c388 <_strtoll_r+0x114>
    c4c4:	8815883a 	mov	r10,r17
    c4c8:	9017883a 	mov	r11,r18
    c4cc:	01ffffc4 	movi	r7,-1
    c4d0:	003fbb06 	br	c3c0 <_strtoll_r+0x14c>
    c4d4:	0009883a 	mov	r4,zero
    c4d8:	2285c83a 	sub	r2,r4,r10
    c4dc:	2089803a 	cmpltu	r4,r4,r2
    c4e0:	02c7c83a 	sub	r3,zero,r11
    c4e4:	1909c83a 	sub	r4,r3,r4
    c4e8:	100b883a 	mov	r5,r2
    c4ec:	200d883a 	mov	r6,r4
    c4f0:	003fc606 	br	c40c <_strtoll_r+0x198>
    c4f4:	a4c00007 	ldb	r19,0(r20)
    c4f8:	a5000044 	addi	r20,r20,1
    c4fc:	003f7a06 	br	c2e8 <_strtoll_r+0x74>
    c500:	a4c00007 	ldb	r19,0(r20)
    c504:	00800044 	movi	r2,1
    c508:	a5000044 	addi	r20,r20,1
    c50c:	d8800115 	stw	r2,4(sp)
    c510:	003f7606 	br	c2ec <_strtoll_r+0x78>
    c514:	d8c00117 	ldw	r3,4(sp)
    c518:	1805003a 	cmpeq	r2,r3,zero
    c51c:	1000131e 	bne	r2,zero,c56c <_strtoll_r+0x2f8>
    c520:	0005883a 	mov	r2,zero
    c524:	00e00034 	movhi	r3,32768
    c528:	100b883a 	mov	r5,r2
    c52c:	180d883a 	mov	r6,r3
    c530:	d8c00217 	ldw	r3,8(sp)
    c534:	00800884 	movi	r2,34
    c538:	18800015 	stw	r2,0(r3)
    c53c:	003fb306 	br	c40c <_strtoll_r+0x198>
    c540:	a1000007 	ldb	r4,0(r20)
    c544:	00801e04 	movi	r2,120
    c548:	20800226 	beq	r4,r2,c554 <_strtoll_r+0x2e0>
    c54c:	00801604 	movi	r2,88
    c550:	20bfc91e 	bne	r4,r2,c478 <_strtoll_r+0x204>
    c554:	a4c00047 	ldb	r19,1(r20)
    c558:	05c00404 	movi	r23,16
    c55c:	b82b883a 	mov	r21,r23
    c560:	a5000084 	addi	r20,r20,2
    c564:	002d883a 	mov	r22,zero
    c568:	003f6606 	br	c304 <_strtoll_r+0x90>
    c56c:	017fffc4 	movi	r5,-1
    c570:	01a00034 	movhi	r6,32768
    c574:	31bfffc4 	addi	r6,r6,-1
    c578:	003fed06 	br	c530 <_strtoll_r+0x2bc>
    c57c:	05c00204 	movi	r23,8
    c580:	b82b883a 	mov	r21,r23
    c584:	002d883a 	mov	r22,zero
    c588:	003f5e06 	br	c304 <_strtoll_r+0x90>

0000c58c <_strtoul_r>:
    c58c:	defff604 	addi	sp,sp,-40
    c590:	00800074 	movhi	r2,1
    c594:	1094d704 	addi	r2,r2,21340
    c598:	dd000415 	stw	r20,16(sp)
    c59c:	15000017 	ldw	r20,0(r2)
    c5a0:	ddc00715 	stw	r23,28(sp)
    c5a4:	dd800615 	stw	r22,24(sp)
    c5a8:	dd400515 	stw	r21,20(sp)
    c5ac:	dc800215 	stw	r18,8(sp)
    c5b0:	dc000015 	stw	r16,0(sp)
    c5b4:	dfc00915 	stw	ra,36(sp)
    c5b8:	df000815 	stw	fp,32(sp)
    c5bc:	dcc00315 	stw	r19,12(sp)
    c5c0:	dc400115 	stw	r17,4(sp)
    c5c4:	282b883a 	mov	r21,r5
    c5c8:	202f883a 	mov	r23,r4
    c5cc:	302d883a 	mov	r22,r6
    c5d0:	3825883a 	mov	r18,r7
    c5d4:	2821883a 	mov	r16,r5
    c5d8:	84400007 	ldb	r17,0(r16)
    c5dc:	84000044 	addi	r16,r16,1
    c5e0:	a447883a 	add	r3,r20,r17
    c5e4:	18800003 	ldbu	r2,0(r3)
    c5e8:	1080020c 	andi	r2,r2,8
    c5ec:	103ffa1e 	bne	r2,zero,c5d8 <_strtoul_r+0x4c>
    c5f0:	00800b44 	movi	r2,45
    c5f4:	88805626 	beq	r17,r2,c750 <_strtoul_r+0x1c4>
    c5f8:	00800ac4 	movi	r2,43
    c5fc:	88805126 	beq	r17,r2,c744 <_strtoul_r+0x1b8>
    c600:	0039883a 	mov	fp,zero
    c604:	9007003a 	cmpeq	r3,r18,zero
    c608:	18003b1e 	bne	r3,zero,c6f8 <_strtoul_r+0x16c>
    c60c:	00800404 	movi	r2,16
    c610:	90803926 	beq	r18,r2,c6f8 <_strtoul_r+0x16c>
    c614:	013fffc4 	movi	r4,-1
    c618:	900b883a 	mov	r5,r18
    c61c:	00013240 	call	1324 <__udivsi3>
    c620:	013fffc4 	movi	r4,-1
    c624:	900b883a 	mov	r5,r18
    c628:	1027883a 	mov	r19,r2
    c62c:	000132c0 	call	132c <__umodsi3>
    c630:	1011883a 	mov	r8,r2
    c634:	900f883a 	mov	r7,r18
    c638:	a445883a 	add	r2,r20,r17
    c63c:	11000003 	ldbu	r4,0(r2)
    c640:	000b883a 	mov	r5,zero
    c644:	000d883a 	mov	r6,zero
    c648:	20c0010c 	andi	r3,r4,4
    c64c:	18000e26 	beq	r3,zero,c688 <_strtoul_r+0xfc>
    c650:	88fff404 	addi	r3,r17,-48
    c654:	1c80140e 	bge	r3,r18,c6a8 <_strtoul_r+0x11c>
    c658:	30003316 	blt	r6,zero,c728 <_strtoul_r+0x19c>
    c65c:	99403236 	bltu	r19,r5,c728 <_strtoul_r+0x19c>
    c660:	2cc03026 	beq	r5,r19,c724 <_strtoul_r+0x198>
    c664:	29c5383a 	mul	r2,r5,r7
    c668:	01800044 	movi	r6,1
    c66c:	10cb883a 	add	r5,r2,r3
    c670:	84400007 	ldb	r17,0(r16)
    c674:	84000044 	addi	r16,r16,1
    c678:	a445883a 	add	r2,r20,r17
    c67c:	11000003 	ldbu	r4,0(r2)
    c680:	20c0010c 	andi	r3,r4,4
    c684:	183ff21e 	bne	r3,zero,c650 <_strtoul_r+0xc4>
    c688:	208000cc 	andi	r2,r4,3
    c68c:	10000626 	beq	r2,zero,c6a8 <_strtoul_r+0x11c>
    c690:	2080004c 	andi	r2,r4,1
    c694:	1005003a 	cmpeq	r2,r2,zero
    c698:	1000251e 	bne	r2,zero,c730 <_strtoul_r+0x1a4>
    c69c:	00800dc4 	movi	r2,55
    c6a0:	8887c83a 	sub	r3,r17,r2
    c6a4:	1cbfec16 	blt	r3,r18,c658 <_strtoul_r+0xcc>
    c6a8:	3000400e 	bge	r6,zero,c7ac <_strtoul_r+0x220>
    c6ac:	00800884 	movi	r2,34
    c6b0:	017fffc4 	movi	r5,-1
    c6b4:	b8800015 	stw	r2,0(r23)
    c6b8:	b0000226 	beq	r22,zero,c6c4 <_strtoul_r+0x138>
    c6bc:	30001f1e 	bne	r6,zero,c73c <_strtoul_r+0x1b0>
    c6c0:	b5400015 	stw	r21,0(r22)
    c6c4:	2805883a 	mov	r2,r5
    c6c8:	dfc00917 	ldw	ra,36(sp)
    c6cc:	df000817 	ldw	fp,32(sp)
    c6d0:	ddc00717 	ldw	r23,28(sp)
    c6d4:	dd800617 	ldw	r22,24(sp)
    c6d8:	dd400517 	ldw	r21,20(sp)
    c6dc:	dd000417 	ldw	r20,16(sp)
    c6e0:	dcc00317 	ldw	r19,12(sp)
    c6e4:	dc800217 	ldw	r18,8(sp)
    c6e8:	dc400117 	ldw	r17,4(sp)
    c6ec:	dc000017 	ldw	r16,0(sp)
    c6f0:	dec00a04 	addi	sp,sp,40
    c6f4:	f800283a 	ret
    c6f8:	00800c04 	movi	r2,48
    c6fc:	88801826 	beq	r17,r2,c760 <_strtoul_r+0x1d4>
    c700:	183fc426 	beq	r3,zero,c614 <_strtoul_r+0x88>
    c704:	00800c04 	movi	r2,48
    c708:	88802226 	beq	r17,r2,c794 <_strtoul_r+0x208>
    c70c:	04800284 	movi	r18,10
    c710:	900f883a 	mov	r7,r18
    c714:	04c666b4 	movhi	r19,6554
    c718:	9ce66644 	addi	r19,r19,-26215
    c71c:	02000144 	movi	r8,5
    c720:	003fc506 	br	c638 <_strtoul_r+0xac>
    c724:	40ffcf0e 	bge	r8,r3,c664 <_strtoul_r+0xd8>
    c728:	01bfffc4 	movi	r6,-1
    c72c:	003fd006 	br	c670 <_strtoul_r+0xe4>
    c730:	008015c4 	movi	r2,87
    c734:	8887c83a 	sub	r3,r17,r2
    c738:	003fda06 	br	c6a4 <_strtoul_r+0x118>
    c73c:	857fffc4 	addi	r21,r16,-1
    c740:	003fdf06 	br	c6c0 <_strtoul_r+0x134>
    c744:	84400007 	ldb	r17,0(r16)
    c748:	84000044 	addi	r16,r16,1
    c74c:	003fac06 	br	c600 <_strtoul_r+0x74>
    c750:	84400007 	ldb	r17,0(r16)
    c754:	07000044 	movi	fp,1
    c758:	84000044 	addi	r16,r16,1
    c75c:	003fa906 	br	c604 <_strtoul_r+0x78>
    c760:	81000007 	ldb	r4,0(r16)
    c764:	00801e04 	movi	r2,120
    c768:	20800226 	beq	r4,r2,c774 <_strtoul_r+0x1e8>
    c76c:	00801604 	movi	r2,88
    c770:	20bfe31e 	bne	r4,r2,c700 <_strtoul_r+0x174>
    c774:	84400047 	ldb	r17,1(r16)
    c778:	04800404 	movi	r18,16
    c77c:	84000084 	addi	r16,r16,2
    c780:	900f883a 	mov	r7,r18
    c784:	04c40034 	movhi	r19,4096
    c788:	9cffffc4 	addi	r19,r19,-1
    c78c:	020003c4 	movi	r8,15
    c790:	003fa906 	br	c638 <_strtoul_r+0xac>
    c794:	04800204 	movi	r18,8
    c798:	900f883a 	mov	r7,r18
    c79c:	04c80034 	movhi	r19,8192
    c7a0:	9cffffc4 	addi	r19,r19,-1
    c7a4:	020001c4 	movi	r8,7
    c7a8:	003fa306 	br	c638 <_strtoul_r+0xac>
    c7ac:	e005003a 	cmpeq	r2,fp,zero
    c7b0:	103fc11e 	bne	r2,zero,c6b8 <_strtoul_r+0x12c>
    c7b4:	014bc83a 	sub	r5,zero,r5
    c7b8:	003fbf06 	br	c6b8 <_strtoul_r+0x12c>

0000c7bc <strtoul>:
    c7bc:	00800074 	movhi	r2,1
    c7c0:	1094d804 	addi	r2,r2,21344
    c7c4:	2013883a 	mov	r9,r4
    c7c8:	11000017 	ldw	r4,0(r2)
    c7cc:	2805883a 	mov	r2,r5
    c7d0:	300f883a 	mov	r7,r6
    c7d4:	480b883a 	mov	r5,r9
    c7d8:	100d883a 	mov	r6,r2
    c7dc:	000c58c1 	jmpi	c58c <_strtoul_r>

0000c7e0 <_strtoull_r>:
    c7e0:	defff104 	addi	sp,sp,-60
    c7e4:	00800074 	movhi	r2,1
    c7e8:	1094d704 	addi	r2,r2,21340
    c7ec:	df000d15 	stw	fp,52(sp)
    c7f0:	17000017 	ldw	fp,0(r2)
    c7f4:	ddc00c15 	stw	r23,48(sp)
    c7f8:	dcc00815 	stw	r19,32(sp)
    c7fc:	dfc00e15 	stw	ra,56(sp)
    c800:	dd800b15 	stw	r22,44(sp)
    c804:	dd400a15 	stw	r21,40(sp)
    c808:	dd000915 	stw	r20,36(sp)
    c80c:	dc800715 	stw	r18,28(sp)
    c810:	dc400615 	stw	r17,24(sp)
    c814:	dc000515 	stw	r16,20(sp)
    c818:	d9400215 	stw	r5,8(sp)
    c81c:	d9000115 	stw	r4,4(sp)
    c820:	d9800315 	stw	r6,12(sp)
    c824:	382f883a 	mov	r23,r7
    c828:	2827883a 	mov	r19,r5
    c82c:	9d000007 	ldb	r20,0(r19)
    c830:	9cc00044 	addi	r19,r19,1
    c834:	e507883a 	add	r3,fp,r20
    c838:	18800003 	ldbu	r2,0(r3)
    c83c:	1080020c 	andi	r2,r2,8
    c840:	103ffa1e 	bne	r2,zero,c82c <_strtoull_r+0x4c>
    c844:	00800b44 	movi	r2,45
    c848:	a0807a26 	beq	r20,r2,ca34 <_strtoull_r+0x254>
    c84c:	00800ac4 	movi	r2,43
    c850:	a0807526 	beq	r20,r2,ca28 <_strtoull_r+0x248>
    c854:	d8000015 	stw	zero,0(sp)
    c858:	b807003a 	cmpeq	r3,r23,zero
    c85c:	18005a1e 	bne	r3,zero,c9c8 <_strtoull_r+0x1e8>
    c860:	00800404 	movi	r2,16
    c864:	b8805826 	beq	r23,r2,c9c8 <_strtoull_r+0x1e8>
    c868:	b82dd7fa 	srai	r22,r23,31
    c86c:	043fffc4 	movi	r16,-1
    c870:	8009883a 	mov	r4,r16
    c874:	800b883a 	mov	r5,r16
    c878:	b80d883a 	mov	r6,r23
    c87c:	b00f883a 	mov	r7,r22
    c880:	000dd0c0 	call	dd0c <__udivdi3>
    c884:	8009883a 	mov	r4,r16
    c888:	800b883a 	mov	r5,r16
    c88c:	b80d883a 	mov	r6,r23
    c890:	b00f883a 	mov	r7,r22
    c894:	1023883a 	mov	r17,r2
    c898:	1825883a 	mov	r18,r3
    c89c:	000e2e80 	call	e2e8 <__umoddi3>
    c8a0:	b82b883a 	mov	r21,r23
    c8a4:	1019883a 	mov	r12,r2
    c8a8:	e505883a 	add	r2,fp,r20
    c8ac:	11000003 	ldbu	r4,0(r2)
    c8b0:	0015883a 	mov	r10,zero
    c8b4:	0017883a 	mov	r11,zero
    c8b8:	20c0010c 	andi	r3,r4,4
    c8bc:	000d883a 	mov	r6,zero
    c8c0:	18001c26 	beq	r3,zero,c934 <_strtoull_r+0x154>
    c8c4:	a43ff404 	addi	r16,r20,-48
    c8c8:	85c0220e 	bge	r16,r23,c954 <_strtoull_r+0x174>
    c8cc:	30003c16 	blt	r6,zero,c9c0 <_strtoull_r+0x1e0>
    c8d0:	92c03b36 	bltu	r18,r11,c9c0 <_strtoull_r+0x1e0>
    c8d4:	5c803926 	beq	r11,r18,c9bc <_strtoull_r+0x1dc>
    c8d8:	54404c26 	beq	r10,r17,ca0c <_strtoull_r+0x22c>
    c8dc:	580b883a 	mov	r5,r11
    c8e0:	5009883a 	mov	r4,r10
    c8e4:	a80d883a 	mov	r6,r21
    c8e8:	b00f883a 	mov	r7,r22
    c8ec:	db000415 	stw	r12,16(sp)
    c8f0:	000dbd00 	call	dbd0 <__muldi3>
    c8f4:	8013d7fa 	srai	r9,r16,31
    c8f8:	100d883a 	mov	r6,r2
    c8fc:	1405883a 	add	r2,r2,r16
    c900:	118d803a 	cmpltu	r6,r2,r6
    c904:	1a47883a 	add	r3,r3,r9
    c908:	db000417 	ldw	r12,16(sp)
    c90c:	30cd883a 	add	r6,r6,r3
    c910:	3017883a 	mov	r11,r6
    c914:	1015883a 	mov	r10,r2
    c918:	01800044 	movi	r6,1
    c91c:	9d000007 	ldb	r20,0(r19)
    c920:	9cc00044 	addi	r19,r19,1
    c924:	e505883a 	add	r2,fp,r20
    c928:	11000003 	ldbu	r4,0(r2)
    c92c:	20c0010c 	andi	r3,r4,4
    c930:	183fe41e 	bne	r3,zero,c8c4 <_strtoull_r+0xe4>
    c934:	208000cc 	andi	r2,r4,3
    c938:	10000626 	beq	r2,zero,c954 <_strtoull_r+0x174>
    c93c:	2080004c 	andi	r2,r4,1
    c940:	1005003a 	cmpeq	r2,r2,zero
    c944:	10002e1e 	bne	r2,zero,ca00 <_strtoull_r+0x220>
    c948:	02000dc4 	movi	r8,55
    c94c:	a221c83a 	sub	r16,r20,r8
    c950:	85ffde16 	blt	r16,r23,c8cc <_strtoull_r+0xec>
    c954:	3000530e 	bge	r6,zero,caa4 <_strtoull_r+0x2c4>
    c958:	d8c00117 	ldw	r3,4(sp)
    c95c:	02bfffc4 	movi	r10,-1
    c960:	00800884 	movi	r2,34
    c964:	5017883a 	mov	r11,r10
    c968:	18800015 	stw	r2,0(r3)
    c96c:	d8800317 	ldw	r2,12(sp)
    c970:	10000426 	beq	r2,zero,c984 <_strtoull_r+0x1a4>
    c974:	3000291e 	bne	r6,zero,ca1c <_strtoull_r+0x23c>
    c978:	d8800217 	ldw	r2,8(sp)
    c97c:	d8c00317 	ldw	r3,12(sp)
    c980:	18800015 	stw	r2,0(r3)
    c984:	5005883a 	mov	r2,r10
    c988:	5807883a 	mov	r3,r11
    c98c:	dfc00e17 	ldw	ra,56(sp)
    c990:	df000d17 	ldw	fp,52(sp)
    c994:	ddc00c17 	ldw	r23,48(sp)
    c998:	dd800b17 	ldw	r22,44(sp)
    c99c:	dd400a17 	ldw	r21,40(sp)
    c9a0:	dd000917 	ldw	r20,36(sp)
    c9a4:	dcc00817 	ldw	r19,32(sp)
    c9a8:	dc800717 	ldw	r18,28(sp)
    c9ac:	dc400617 	ldw	r17,24(sp)
    c9b0:	dc000517 	ldw	r16,20(sp)
    c9b4:	dec00f04 	addi	sp,sp,60
    c9b8:	f800283a 	ret
    c9bc:	8abfc62e 	bgeu	r17,r10,c8d8 <_strtoull_r+0xf8>
    c9c0:	01bfffc4 	movi	r6,-1
    c9c4:	003fd506 	br	c91c <_strtoull_r+0x13c>
    c9c8:	00800c04 	movi	r2,48
    c9cc:	a0801e26 	beq	r20,r2,ca48 <_strtoull_r+0x268>
    c9d0:	183fa526 	beq	r3,zero,c868 <_strtoull_r+0x88>
    c9d4:	00800c04 	movi	r2,48
    c9d8:	a0802a26 	beq	r20,r2,ca84 <_strtoull_r+0x2a4>
    c9dc:	05c00284 	movi	r23,10
    c9e0:	b82b883a 	mov	r21,r23
    c9e4:	046666b4 	movhi	r17,39322
    c9e8:	8c666644 	addi	r17,r17,-26215
    c9ec:	002d883a 	mov	r22,zero
    c9f0:	048666b4 	movhi	r18,6554
    c9f4:	94a66644 	addi	r18,r18,-26215
    c9f8:	03000144 	movi	r12,5
    c9fc:	003faa06 	br	c8a8 <_strtoull_r+0xc8>
    ca00:	020015c4 	movi	r8,87
    ca04:	a221c83a 	sub	r16,r20,r8
    ca08:	003fd106 	br	c950 <_strtoull_r+0x170>
    ca0c:	5cbfb31e 	bne	r11,r18,c8dc <_strtoull_r+0xfc>
    ca10:	643fb20e 	bge	r12,r16,c8dc <_strtoull_r+0xfc>
    ca14:	01bfffc4 	movi	r6,-1
    ca18:	003fc006 	br	c91c <_strtoull_r+0x13c>
    ca1c:	9cffffc4 	addi	r19,r19,-1
    ca20:	dcc00215 	stw	r19,8(sp)
    ca24:	003fd406 	br	c978 <_strtoull_r+0x198>
    ca28:	9d000007 	ldb	r20,0(r19)
    ca2c:	9cc00044 	addi	r19,r19,1
    ca30:	003f8806 	br	c854 <_strtoull_r+0x74>
    ca34:	9d000007 	ldb	r20,0(r19)
    ca38:	00800044 	movi	r2,1
    ca3c:	9cc00044 	addi	r19,r19,1
    ca40:	d8800015 	stw	r2,0(sp)
    ca44:	003f8406 	br	c858 <_strtoull_r+0x78>
    ca48:	99000007 	ldb	r4,0(r19)
    ca4c:	00801e04 	movi	r2,120
    ca50:	20800226 	beq	r4,r2,ca5c <_strtoull_r+0x27c>
    ca54:	00801604 	movi	r2,88
    ca58:	20bfdd1e 	bne	r4,r2,c9d0 <_strtoull_r+0x1f0>
    ca5c:	9d000047 	ldb	r20,1(r19)
    ca60:	05c00404 	movi	r23,16
    ca64:	b82b883a 	mov	r21,r23
    ca68:	047fffc4 	movi	r17,-1
    ca6c:	9cc00084 	addi	r19,r19,2
    ca70:	002d883a 	mov	r22,zero
    ca74:	04840034 	movhi	r18,4096
    ca78:	94bfffc4 	addi	r18,r18,-1
    ca7c:	030003c4 	movi	r12,15
    ca80:	003f8906 	br	c8a8 <_strtoull_r+0xc8>
    ca84:	05c00204 	movi	r23,8
    ca88:	b82b883a 	mov	r21,r23
    ca8c:	047fffc4 	movi	r17,-1
    ca90:	002d883a 	mov	r22,zero
    ca94:	04880034 	movhi	r18,8192
    ca98:	94bfffc4 	addi	r18,r18,-1
    ca9c:	030001c4 	movi	r12,7
    caa0:	003f8106 	br	c8a8 <_strtoull_r+0xc8>
    caa4:	d8c00017 	ldw	r3,0(sp)
    caa8:	1805003a 	cmpeq	r2,r3,zero
    caac:	103faf1e 	bne	r2,zero,c96c <_strtoull_r+0x18c>
    cab0:	0009883a 	mov	r4,zero
    cab4:	2285c83a 	sub	r2,r4,r10
    cab8:	02c7c83a 	sub	r3,zero,r11
    cabc:	2089803a 	cmpltu	r4,r4,r2
    cac0:	1909c83a 	sub	r4,r3,r4
    cac4:	1015883a 	mov	r10,r2
    cac8:	2017883a 	mov	r11,r4
    cacc:	003fa706 	br	c96c <_strtoull_r+0x18c>

0000cad0 <__submore>:
    cad0:	defffa04 	addi	sp,sp,-24
    cad4:	28c00c17 	ldw	r3,48(r5)
    cad8:	dc800215 	stw	r18,8(sp)
    cadc:	2825883a 	mov	r18,r5
    cae0:	dc000015 	stw	r16,0(sp)
    cae4:	90801004 	addi	r2,r18,64
    cae8:	04010004 	movi	r16,1024
    caec:	dfc00515 	stw	ra,20(sp)
    caf0:	dd000415 	stw	r20,16(sp)
    caf4:	dcc00315 	stw	r19,12(sp)
    caf8:	dc400115 	stw	r17,4(sp)
    cafc:	800b883a 	mov	r5,r16
    cb00:	18801b26 	beq	r3,r2,cb70 <__submore+0xa0>
    cb04:	94400d17 	ldw	r17,52(r18)
    cb08:	180b883a 	mov	r5,r3
    cb0c:	8c69883a 	add	r20,r17,r17
    cb10:	a00d883a 	mov	r6,r20
    cb14:	000a2740 	call	a274 <_realloc_r>
    cb18:	1467883a 	add	r19,r2,r17
    cb1c:	1021883a 	mov	r16,r2
    cb20:	880d883a 	mov	r6,r17
    cb24:	9809883a 	mov	r4,r19
    cb28:	100b883a 	mov	r5,r2
    cb2c:	10000e26 	beq	r2,zero,cb68 <__submore+0x98>
    cb30:	00021040 	call	2104 <memcpy>
    cb34:	000d883a 	mov	r6,zero
    cb38:	95000d15 	stw	r20,52(r18)
    cb3c:	94c00015 	stw	r19,0(r18)
    cb40:	94000c15 	stw	r16,48(r18)
    cb44:	3005883a 	mov	r2,r6
    cb48:	dfc00517 	ldw	ra,20(sp)
    cb4c:	dd000417 	ldw	r20,16(sp)
    cb50:	dcc00317 	ldw	r19,12(sp)
    cb54:	dc800217 	ldw	r18,8(sp)
    cb58:	dc400117 	ldw	r17,4(sp)
    cb5c:	dc000017 	ldw	r16,0(sp)
    cb60:	dec00604 	addi	sp,sp,24
    cb64:	f800283a 	ret
    cb68:	01bfffc4 	movi	r6,-1
    cb6c:	003ff506 	br	cb44 <__submore+0x74>
    cb70:	00018e00 	call	18e0 <_malloc_r>
    cb74:	1009883a 	mov	r4,r2
    cb78:	1140ff44 	addi	r5,r2,1021
    cb7c:	000d883a 	mov	r6,zero
    cb80:	103ff926 	beq	r2,zero,cb68 <__submore+0x98>
    cb84:	90801083 	ldbu	r2,66(r18)
    cb88:	94000d15 	stw	r16,52(r18)
    cb8c:	91000c15 	stw	r4,48(r18)
    cb90:	28800085 	stb	r2,2(r5)
    cb94:	90c01043 	ldbu	r3,65(r18)
    cb98:	28c00045 	stb	r3,1(r5)
    cb9c:	90801003 	ldbu	r2,64(r18)
    cba0:	2080ff45 	stb	r2,1021(r4)
    cba4:	91400015 	stw	r5,0(r18)
    cba8:	003fe606 	br	cb44 <__submore+0x74>

0000cbac <_ungetc_r>:
    cbac:	defffc04 	addi	sp,sp,-16
    cbb0:	00bfffc4 	movi	r2,-1
    cbb4:	dc400215 	stw	r17,8(sp)
    cbb8:	dc000115 	stw	r16,4(sp)
    cbbc:	dfc00315 	stw	ra,12(sp)
    cbc0:	2821883a 	mov	r16,r5
    cbc4:	2023883a 	mov	r17,r4
    cbc8:	28801826 	beq	r5,r2,cc2c <_ungetc_r+0x80>
    cbcc:	20000226 	beq	r4,zero,cbd8 <_ungetc_r+0x2c>
    cbd0:	20800e17 	ldw	r2,56(r4)
    cbd4:	10001b26 	beq	r2,zero,cc44 <_ungetc_r+0x98>
    cbd8:	3100030b 	ldhu	r4,12(r6)
    cbdc:	00bff7c4 	movi	r2,-33
    cbe0:	2084703a 	and	r2,r4,r2
    cbe4:	117fffcc 	andi	r5,r2,65535
    cbe8:	28c0010c 	andi	r3,r5,4
    cbec:	1009883a 	mov	r4,r2
    cbf0:	3080030d 	sth	r2,12(r6)
    cbf4:	18003526 	beq	r3,zero,cccc <_ungetc_r+0x120>
    cbf8:	30800c17 	ldw	r2,48(r6)
    cbfc:	84003fcc 	andi	r16,r16,255
    cc00:	10001426 	beq	r2,zero,cc54 <_ungetc_r+0xa8>
    cc04:	30c00117 	ldw	r3,4(r6)
    cc08:	30800d17 	ldw	r2,52(r6)
    cc0c:	1880380e 	bge	r3,r2,ccf0 <_ungetc_r+0x144>
    cc10:	30c00017 	ldw	r3,0(r6)
    cc14:	19ffffc4 	addi	r7,r3,-1
    cc18:	31c00015 	stw	r7,0(r6)
    cc1c:	1c3fffc5 	stb	r16,-1(r3)
    cc20:	30800117 	ldw	r2,4(r6)
    cc24:	10800044 	addi	r2,r2,1
    cc28:	30800115 	stw	r2,4(r6)
    cc2c:	8005883a 	mov	r2,r16
    cc30:	dfc00317 	ldw	ra,12(sp)
    cc34:	dc400217 	ldw	r17,8(sp)
    cc38:	dc000117 	ldw	r16,4(sp)
    cc3c:	dec00404 	addi	sp,sp,16
    cc40:	f800283a 	ret
    cc44:	d9800015 	stw	r6,0(sp)
    cc48:	00015080 	call	1508 <__sinit>
    cc4c:	d9800017 	ldw	r6,0(sp)
    cc50:	003fe106 	br	cbd8 <_ungetc_r+0x2c>
    cc54:	30800417 	ldw	r2,16(r6)
    cc58:	10002326 	beq	r2,zero,cce8 <_ungetc_r+0x13c>
    cc5c:	31c00017 	ldw	r7,0(r6)
    cc60:	11c0022e 	bgeu	r2,r7,cc6c <_ungetc_r+0xc0>
    cc64:	38bfffc3 	ldbu	r2,-1(r7)
    cc68:	80801226 	beq	r16,r2,ccb4 <_ungetc_r+0x108>
    cc6c:	30c00117 	ldw	r3,4(r6)
    cc70:	00800044 	movi	r2,1
    cc74:	30800115 	stw	r2,4(r6)
    cc78:	008000c4 	movi	r2,3
    cc7c:	31001004 	addi	r4,r6,64
    cc80:	31401084 	addi	r5,r6,66
    cc84:	30800d15 	stw	r2,52(r6)
    cc88:	8005883a 	mov	r2,r16
    cc8c:	30c00f15 	stw	r3,60(r6)
    cc90:	31c00e15 	stw	r7,56(r6)
    cc94:	31000c15 	stw	r4,48(r6)
    cc98:	31400015 	stw	r5,0(r6)
    cc9c:	34001085 	stb	r16,66(r6)
    cca0:	dfc00317 	ldw	ra,12(sp)
    cca4:	dc400217 	ldw	r17,8(sp)
    cca8:	dc000117 	ldw	r16,4(sp)
    ccac:	dec00404 	addi	sp,sp,16
    ccb0:	f800283a 	ret
    ccb4:	30800117 	ldw	r2,4(r6)
    ccb8:	39ffffc4 	addi	r7,r7,-1
    ccbc:	31c00015 	stw	r7,0(r6)
    ccc0:	10800044 	addi	r2,r2,1
    ccc4:	30800115 	stw	r2,4(r6)
    ccc8:	003fd806 	br	cc2c <_ungetc_r+0x80>
    cccc:	2880040c 	andi	r2,r5,16
    ccd0:	10000d26 	beq	r2,zero,cd08 <_ungetc_r+0x15c>
    ccd4:	2880020c 	andi	r2,r5,8
    ccd8:	10000d1e 	bne	r2,zero,cd10 <_ungetc_r+0x164>
    ccdc:	20800114 	ori	r2,r4,4
    cce0:	3080030d 	sth	r2,12(r6)
    cce4:	003fc406 	br	cbf8 <_ungetc_r+0x4c>
    cce8:	31c00017 	ldw	r7,0(r6)
    ccec:	003fdf06 	br	cc6c <_ungetc_r+0xc0>
    ccf0:	300b883a 	mov	r5,r6
    ccf4:	8809883a 	mov	r4,r17
    ccf8:	d9800015 	stw	r6,0(sp)
    ccfc:	000cad00 	call	cad0 <__submore>
    cd00:	d9800017 	ldw	r6,0(sp)
    cd04:	103fc226 	beq	r2,zero,cc10 <_ungetc_r+0x64>
    cd08:	043fffc4 	movi	r16,-1
    cd0c:	003fc706 	br	cc2c <_ungetc_r+0x80>
    cd10:	300b883a 	mov	r5,r6
    cd14:	8809883a 	mov	r4,r17
    cd18:	d9800015 	stw	r6,0(sp)
    cd1c:	0007df80 	call	7df8 <_fflush_r>
    cd20:	d9800017 	ldw	r6,0(sp)
    cd24:	103ff81e 	bne	r2,zero,cd08 <_ungetc_r+0x15c>
    cd28:	3100030b 	ldhu	r4,12(r6)
    cd2c:	00bffdc4 	movi	r2,-9
    cd30:	30000215 	stw	zero,8(r6)
    cd34:	2084703a 	and	r2,r4,r2
    cd38:	1009883a 	mov	r4,r2
    cd3c:	3080030d 	sth	r2,12(r6)
    cd40:	30000615 	stw	zero,24(r6)
    cd44:	003fe506 	br	ccdc <_ungetc_r+0x130>

0000cd48 <ungetc>:
    cd48:	01800074 	movhi	r6,1
    cd4c:	3194d804 	addi	r6,r6,21344
    cd50:	2007883a 	mov	r3,r4
    cd54:	31000017 	ldw	r4,0(r6)
    cd58:	280d883a 	mov	r6,r5
    cd5c:	180b883a 	mov	r5,r3
    cd60:	000cbac1 	jmpi	cbac <_ungetc_r>

0000cd64 <__swbuf_r>:
    cd64:	defffc04 	addi	sp,sp,-16
    cd68:	dc400215 	stw	r17,8(sp)
    cd6c:	dc000115 	stw	r16,4(sp)
    cd70:	dfc00315 	stw	ra,12(sp)
    cd74:	2023883a 	mov	r17,r4
    cd78:	2821883a 	mov	r16,r5
    cd7c:	20000226 	beq	r4,zero,cd88 <__swbuf_r+0x24>
    cd80:	20800e17 	ldw	r2,56(r4)
    cd84:	10002f26 	beq	r2,zero,ce44 <__swbuf_r+0xe0>
    cd88:	3080030b 	ldhu	r2,12(r6)
    cd8c:	30c00617 	ldw	r3,24(r6)
    cd90:	1080020c 	andi	r2,r2,8
    cd94:	30c00215 	stw	r3,8(r6)
    cd98:	10002226 	beq	r2,zero,ce24 <__swbuf_r+0xc0>
    cd9c:	30c00417 	ldw	r3,16(r6)
    cda0:	18002026 	beq	r3,zero,ce24 <__swbuf_r+0xc0>
    cda4:	31000017 	ldw	r4,0(r6)
    cda8:	30800517 	ldw	r2,20(r6)
    cdac:	20c7c83a 	sub	r3,r4,r3
    cdb0:	18802f0e 	bge	r3,r2,ce70 <__swbuf_r+0x10c>
    cdb4:	19400044 	addi	r5,r3,1
    cdb8:	30800217 	ldw	r2,8(r6)
    cdbc:	84003fcc 	andi	r16,r16,255
    cdc0:	20c00044 	addi	r3,r4,1
    cdc4:	10bfffc4 	addi	r2,r2,-1
    cdc8:	30800215 	stw	r2,8(r6)
    cdcc:	24000005 	stb	r16,0(r4)
    cdd0:	30800517 	ldw	r2,20(r6)
    cdd4:	30c00015 	stw	r3,0(r6)
    cdd8:	11400c26 	beq	r2,r5,ce0c <__swbuf_r+0xa8>
    cddc:	3080030b 	ldhu	r2,12(r6)
    cde0:	1080004c 	andi	r2,r2,1
    cde4:	1005003a 	cmpeq	r2,r2,zero
    cde8:	10000626 	beq	r2,zero,ce04 <__swbuf_r+0xa0>
    cdec:	8005883a 	mov	r2,r16
    cdf0:	dfc00317 	ldw	ra,12(sp)
    cdf4:	dc400217 	ldw	r17,8(sp)
    cdf8:	dc000117 	ldw	r16,4(sp)
    cdfc:	dec00404 	addi	sp,sp,16
    ce00:	f800283a 	ret
    ce04:	00800284 	movi	r2,10
    ce08:	80bff81e 	bne	r16,r2,cdec <__swbuf_r+0x88>
    ce0c:	8809883a 	mov	r4,r17
    ce10:	300b883a 	mov	r5,r6
    ce14:	0007df80 	call	7df8 <_fflush_r>
    ce18:	103ff426 	beq	r2,zero,cdec <__swbuf_r+0x88>
    ce1c:	043fffc4 	movi	r16,-1
    ce20:	003ff206 	br	cdec <__swbuf_r+0x88>
    ce24:	300b883a 	mov	r5,r6
    ce28:	8809883a 	mov	r4,r17
    ce2c:	d9800015 	stw	r6,0(sp)
    ce30:	000635c0 	call	635c <__swsetup_r>
    ce34:	d9800017 	ldw	r6,0(sp)
    ce38:	1000061e 	bne	r2,zero,ce54 <__swbuf_r+0xf0>
    ce3c:	30c00417 	ldw	r3,16(r6)
    ce40:	003fd806 	br	cda4 <__swbuf_r+0x40>
    ce44:	d9800015 	stw	r6,0(sp)
    ce48:	00015080 	call	1508 <__sinit>
    ce4c:	d9800017 	ldw	r6,0(sp)
    ce50:	003fcd06 	br	cd88 <__swbuf_r+0x24>
    ce54:	3080030b 	ldhu	r2,12(r6)
    ce58:	00c00244 	movi	r3,9
    ce5c:	043fffc4 	movi	r16,-1
    ce60:	10801014 	ori	r2,r2,64
    ce64:	3080030d 	sth	r2,12(r6)
    ce68:	88c00015 	stw	r3,0(r17)
    ce6c:	003fdf06 	br	cdec <__swbuf_r+0x88>
    ce70:	300b883a 	mov	r5,r6
    ce74:	8809883a 	mov	r4,r17
    ce78:	d9800015 	stw	r6,0(sp)
    ce7c:	0007df80 	call	7df8 <_fflush_r>
    ce80:	d9800017 	ldw	r6,0(sp)
    ce84:	103fe51e 	bne	r2,zero,ce1c <__swbuf_r+0xb8>
    ce88:	31000017 	ldw	r4,0(r6)
    ce8c:	01400044 	movi	r5,1
    ce90:	003fc906 	br	cdb8 <__swbuf_r+0x54>

0000ce94 <__swbuf>:
    ce94:	01800074 	movhi	r6,1
    ce98:	3194d804 	addi	r6,r6,21344
    ce9c:	2007883a 	mov	r3,r4
    cea0:	31000017 	ldw	r4,0(r6)
    cea4:	280d883a 	mov	r6,r5
    cea8:	180b883a 	mov	r5,r3
    ceac:	000cd641 	jmpi	cd64 <__swbuf_r>

0000ceb0 <_calloc_r>:
    ceb0:	298b383a 	mul	r5,r5,r6
    ceb4:	defffe04 	addi	sp,sp,-8
    ceb8:	dc000015 	stw	r16,0(sp)
    cebc:	dfc00115 	stw	ra,4(sp)
    cec0:	00018e00 	call	18e0 <_malloc_r>
    cec4:	1021883a 	mov	r16,r2
    cec8:	01c00904 	movi	r7,36
    cecc:	10000d26 	beq	r2,zero,cf04 <_calloc_r+0x54>
    ced0:	10ffff17 	ldw	r3,-4(r2)
    ced4:	1009883a 	mov	r4,r2
    ced8:	00bfff04 	movi	r2,-4
    cedc:	1886703a 	and	r3,r3,r2
    cee0:	1887883a 	add	r3,r3,r2
    cee4:	180d883a 	mov	r6,r3
    cee8:	000b883a 	mov	r5,zero
    ceec:	38c01736 	bltu	r7,r3,cf4c <_calloc_r+0x9c>
    cef0:	008004c4 	movi	r2,19
    cef4:	10c00836 	bltu	r2,r3,cf18 <_calloc_r+0x68>
    cef8:	20000215 	stw	zero,8(r4)
    cefc:	20000015 	stw	zero,0(r4)
    cf00:	20000115 	stw	zero,4(r4)
    cf04:	8005883a 	mov	r2,r16
    cf08:	dfc00117 	ldw	ra,4(sp)
    cf0c:	dc000017 	ldw	r16,0(sp)
    cf10:	dec00204 	addi	sp,sp,8
    cf14:	f800283a 	ret
    cf18:	008006c4 	movi	r2,27
    cf1c:	80000015 	stw	zero,0(r16)
    cf20:	80000115 	stw	zero,4(r16)
    cf24:	81000204 	addi	r4,r16,8
    cf28:	10fff32e 	bgeu	r2,r3,cef8 <_calloc_r+0x48>
    cf2c:	80000215 	stw	zero,8(r16)
    cf30:	80000315 	stw	zero,12(r16)
    cf34:	81000404 	addi	r4,r16,16
    cf38:	19ffef1e 	bne	r3,r7,cef8 <_calloc_r+0x48>
    cf3c:	81000604 	addi	r4,r16,24
    cf40:	80000415 	stw	zero,16(r16)
    cf44:	80000515 	stw	zero,20(r16)
    cf48:	003feb06 	br	cef8 <_calloc_r+0x48>
    cf4c:	00021a40 	call	21a4 <memset>
    cf50:	8005883a 	mov	r2,r16
    cf54:	dfc00117 	ldw	ra,4(sp)
    cf58:	dc000017 	ldw	r16,0(sp)
    cf5c:	dec00204 	addi	sp,sp,8
    cf60:	f800283a 	ret

0000cf64 <_fstat_r>:
    cf64:	defffd04 	addi	sp,sp,-12
    cf68:	dc000015 	stw	r16,0(sp)
    cf6c:	04000074 	movhi	r16,1
    cf70:	841b9c04 	addi	r16,r16,28272
    cf74:	dc400115 	stw	r17,4(sp)
    cf78:	80000015 	stw	zero,0(r16)
    cf7c:	2023883a 	mov	r17,r4
    cf80:	2809883a 	mov	r4,r5
    cf84:	300b883a 	mov	r5,r6
    cf88:	dfc00215 	stw	ra,8(sp)
    cf8c:	00106400 	call	10640 <fstat>
    cf90:	1007883a 	mov	r3,r2
    cf94:	00bfffc4 	movi	r2,-1
    cf98:	18800626 	beq	r3,r2,cfb4 <_fstat_r+0x50>
    cf9c:	1805883a 	mov	r2,r3
    cfa0:	dfc00217 	ldw	ra,8(sp)
    cfa4:	dc400117 	ldw	r17,4(sp)
    cfa8:	dc000017 	ldw	r16,0(sp)
    cfac:	dec00304 	addi	sp,sp,12
    cfb0:	f800283a 	ret
    cfb4:	80800017 	ldw	r2,0(r16)
    cfb8:	103ff826 	beq	r2,zero,cf9c <_fstat_r+0x38>
    cfbc:	88800015 	stw	r2,0(r17)
    cfc0:	1805883a 	mov	r2,r3
    cfc4:	dfc00217 	ldw	ra,8(sp)
    cfc8:	dc400117 	ldw	r17,4(sp)
    cfcc:	dc000017 	ldw	r16,0(sp)
    cfd0:	dec00304 	addi	sp,sp,12
    cfd4:	f800283a 	ret

0000cfd8 <htinit>:
    cfd8:	28800003 	ldbu	r2,0(r5)
    cfdc:	10000626 	beq	r2,zero,cff8 <htinit+0x20>
    cfe0:	1105883a 	add	r2,r2,r4
    cfe4:	11800005 	stb	r6,0(r2)
    cfe8:	28800043 	ldbu	r2,1(r5)
    cfec:	31800044 	addi	r6,r6,1
    cff0:	29400044 	addi	r5,r5,1
    cff4:	103ffa1e 	bne	r2,zero,cfe0 <htinit+0x8>
    cff8:	f800283a 	ret

0000cffc <__hexdig_init>:
    cffc:	defffd04 	addi	sp,sp,-12
    d000:	dc400015 	stw	r17,0(sp)
    d004:	04400074 	movhi	r17,1
    d008:	8c5bb504 	addi	r17,r17,28372
    d00c:	dcc00115 	stw	r19,4(sp)
    d010:	8809883a 	mov	r4,r17
    d014:	04c00684 	movi	r19,26
    d018:	01400074 	movhi	r5,1
    d01c:	294dde04 	addi	r5,r5,14200
    d020:	01800404 	movi	r6,16
    d024:	dfc00215 	stw	ra,8(sp)
    d028:	000cfd80 	call	cfd8 <htinit>
    d02c:	980d883a 	mov	r6,r19
    d030:	8809883a 	mov	r4,r17
    d034:	01400074 	movhi	r5,1
    d038:	294de104 	addi	r5,r5,14212
    d03c:	000cfd80 	call	cfd8 <htinit>
    d040:	8809883a 	mov	r4,r17
    d044:	980d883a 	mov	r6,r19
    d048:	01400074 	movhi	r5,1
    d04c:	294de304 	addi	r5,r5,14220
    d050:	dfc00217 	ldw	ra,8(sp)
    d054:	dcc00117 	ldw	r19,4(sp)
    d058:	dc400017 	ldw	r17,0(sp)
    d05c:	dec00304 	addi	sp,sp,12
    d060:	000cfd81 	jmpi	cfd8 <htinit>

0000d064 <rshift>:
    d064:	2807d17a 	srai	r3,r5,5
    d068:	20800417 	ldw	r2,16(r4)
    d06c:	22400504 	addi	r9,r4,20
    d070:	480f883a 	mov	r7,r9
    d074:	1880190e 	bge	r3,r2,d0dc <rshift+0x78>
    d078:	1085883a 	add	r2,r2,r2
    d07c:	18c7883a 	add	r3,r3,r3
    d080:	1085883a 	add	r2,r2,r2
    d084:	18c7883a 	add	r3,r3,r3
    d088:	294007cc 	andi	r5,r5,31
    d08c:	4891883a 	add	r8,r9,r2
    d090:	48cd883a 	add	r6,r9,r3
    d094:	28001726 	beq	r5,zero,d0f4 <rshift+0x90>
    d098:	30c00017 	ldw	r3,0(r6)
    d09c:	00800804 	movi	r2,32
    d0a0:	31800104 	addi	r6,r6,4
    d0a4:	1155c83a 	sub	r10,r2,r5
    d0a8:	1946d83a 	srl	r3,r3,r5
    d0ac:	3200092e 	bgeu	r6,r8,d0d4 <rshift+0x70>
    d0b0:	30800017 	ldw	r2,0(r6)
    d0b4:	1284983a 	sll	r2,r2,r10
    d0b8:	10c4b03a 	or	r2,r2,r3
    d0bc:	38800015 	stw	r2,0(r7)
    d0c0:	30c00017 	ldw	r3,0(r6)
    d0c4:	31800104 	addi	r6,r6,4
    d0c8:	39c00104 	addi	r7,r7,4
    d0cc:	1946d83a 	srl	r3,r3,r5
    d0d0:	323ff736 	bltu	r6,r8,d0b0 <rshift+0x4c>
    d0d4:	38c00015 	stw	r3,0(r7)
    d0d8:	18000c1e 	bne	r3,zero,d10c <rshift+0xa8>
    d0dc:	3a45c83a 	sub	r2,r7,r9
    d0e0:	1005d0ba 	srai	r2,r2,2
    d0e4:	20800415 	stw	r2,16(r4)
    d0e8:	1000011e 	bne	r2,zero,d0f0 <rshift+0x8c>
    d0ec:	20000515 	stw	zero,20(r4)
    d0f0:	f800283a 	ret
    d0f4:	323ff92e 	bgeu	r6,r8,d0dc <rshift+0x78>
    d0f8:	30800017 	ldw	r2,0(r6)
    d0fc:	31800104 	addi	r6,r6,4
    d100:	38800015 	stw	r2,0(r7)
    d104:	39c00104 	addi	r7,r7,4
    d108:	003ffa06 	br	d0f4 <rshift+0x90>
    d10c:	39c00104 	addi	r7,r7,4
    d110:	003ff206 	br	d0dc <rshift+0x78>

0000d114 <__gethex>:
    d114:	defff304 	addi	sp,sp,-52
    d118:	dd400815 	stw	r21,32(sp)
    d11c:	dd000715 	stw	r20,28(sp)
    d120:	dcc00615 	stw	r19,24(sp)
    d124:	dc400415 	stw	r17,16(sp)
    d128:	dfc00c15 	stw	ra,48(sp)
    d12c:	df000b15 	stw	fp,44(sp)
    d130:	ddc00a15 	stw	r23,40(sp)
    d134:	dd800915 	stw	r22,36(sp)
    d138:	dc800515 	stw	r18,20(sp)
    d13c:	dc000315 	stw	r16,12(sp)
    d140:	04400074 	movhi	r17,1
    d144:	8c5bb504 	addi	r17,r17,28372
    d148:	88800c03 	ldbu	r2,48(r17)
    d14c:	202b883a 	mov	r21,r4
    d150:	2827883a 	mov	r19,r5
    d154:	3029883a 	mov	r20,r6
    d158:	d9c00115 	stw	r7,4(sp)
    d15c:	10006e26 	beq	r2,zero,d318 <__gethex+0x204>
    d160:	99800017 	ldw	r6,0(r19)
    d164:	00800c04 	movi	r2,48
    d168:	31000083 	ldbu	r4,2(r6)
    d16c:	30c00084 	addi	r3,r6,2
    d170:	20806f1e 	bne	r4,r2,d330 <__gethex+0x21c>
    d174:	200b883a 	mov	r5,r4
    d178:	3007883a 	mov	r3,r6
    d17c:	188000c3 	ldbu	r2,3(r3)
    d180:	18c00044 	addi	r3,r3,1
    d184:	1009883a 	mov	r4,r2
    d188:	117ffc26 	beq	r2,r5,d17c <__gethex+0x68>
    d18c:	1997c83a 	sub	r11,r3,r6
    d190:	19400084 	addi	r5,r3,2
    d194:	2445883a 	add	r2,r4,r17
    d198:	10c00003 	ldbu	r3,0(r2)
    d19c:	18002d26 	beq	r3,zero,d254 <__gethex+0x140>
    d1a0:	29000003 	ldbu	r4,0(r5)
    d1a4:	2825883a 	mov	r18,r5
    d1a8:	000d883a 	mov	r6,zero
    d1ac:	0013883a 	mov	r9,zero
    d1b0:	21003fcc 	andi	r4,r4,255
    d1b4:	2445883a 	add	r2,r4,r17
    d1b8:	10c00003 	ldbu	r3,0(r2)
    d1bc:	18000526 	beq	r3,zero,d1d4 <__gethex+0xc0>
    d1c0:	29400044 	addi	r5,r5,1
    d1c4:	29000003 	ldbu	r4,0(r5)
    d1c8:	2445883a 	add	r2,r4,r17
    d1cc:	10c00003 	ldbu	r3,0(r2)
    d1d0:	183ffb1e 	bne	r3,zero,d1c0 <__gethex+0xac>
    d1d4:	00800b84 	movi	r2,46
    d1d8:	20805826 	beq	r4,r2,d33c <__gethex+0x228>
    d1dc:	30007a26 	beq	r6,zero,d3c8 <__gethex+0x2b4>
    d1e0:	2985c83a 	sub	r2,r5,r6
    d1e4:	1085883a 	add	r2,r2,r2
    d1e8:	1085883a 	add	r2,r2,r2
    d1ec:	00adc83a 	sub	r22,zero,r2
    d1f0:	2821883a 	mov	r16,r5
    d1f4:	80c00003 	ldbu	r3,0(r16)
    d1f8:	00801404 	movi	r2,80
    d1fc:	18801e26 	beq	r3,r2,d278 <__gethex+0x164>
    d200:	00801c04 	movi	r2,112
    d204:	18801c26 	beq	r3,r2,d278 <__gethex+0x164>
    d208:	800d883a 	mov	r6,r16
    d20c:	4805003a 	cmpeq	r2,r9,zero
    d210:	99800015 	stw	r6,0(r19)
    d214:	1000861e 	bne	r2,zero,d430 <__gethex+0x31c>
    d218:	58003d26 	beq	r11,zero,d310 <__gethex+0x1fc>
    d21c:	0025883a 	mov	r18,zero
    d220:	9005883a 	mov	r2,r18
    d224:	dfc00c17 	ldw	ra,48(sp)
    d228:	df000b17 	ldw	fp,44(sp)
    d22c:	ddc00a17 	ldw	r23,40(sp)
    d230:	dd800917 	ldw	r22,36(sp)
    d234:	dd400817 	ldw	r21,32(sp)
    d238:	dd000717 	ldw	r20,28(sp)
    d23c:	dcc00617 	ldw	r19,24(sp)
    d240:	dc800517 	ldw	r18,20(sp)
    d244:	dc400417 	ldw	r17,16(sp)
    d248:	dc000317 	ldw	r16,12(sp)
    d24c:	dec00d04 	addi	sp,sp,52
    d250:	f800283a 	ret
    d254:	00800b84 	movi	r2,46
    d258:	20804a26 	beq	r4,r2,d384 <__gethex+0x270>
    d25c:	2821883a 	mov	r16,r5
    d260:	80c00003 	ldbu	r3,0(r16)
    d264:	00801404 	movi	r2,80
    d268:	2825883a 	mov	r18,r5
    d26c:	02400044 	movi	r9,1
    d270:	002d883a 	mov	r22,zero
    d274:	18bfe21e 	bne	r3,r2,d200 <__gethex+0xec>
    d278:	80c00043 	ldbu	r3,1(r16)
    d27c:	00800ac4 	movi	r2,43
    d280:	81000044 	addi	r4,r16,1
    d284:	18804a26 	beq	r3,r2,d3b0 <__gethex+0x29c>
    d288:	00800b44 	movi	r2,45
    d28c:	18804c26 	beq	r3,r2,d3c0 <__gethex+0x2ac>
    d290:	0015883a 	mov	r10,zero
    d294:	1c45883a 	add	r2,r3,r17
    d298:	10800003 	ldbu	r2,0(r2)
    d29c:	103fda26 	beq	r2,zero,d208 <__gethex+0xf4>
    d2a0:	02000644 	movi	r8,25
    d2a4:	40bfd816 	blt	r8,r2,d208 <__gethex+0xf4>
    d2a8:	20c00043 	ldbu	r3,1(r4)
    d2ac:	11fffc04 	addi	r7,r2,-16
    d2b0:	00800074 	movhi	r2,1
    d2b4:	109bb504 	addi	r2,r2,28372
    d2b8:	1887883a 	add	r3,r3,r2
    d2bc:	18800003 	ldbu	r2,0(r3)
    d2c0:	21800044 	addi	r6,r4,1
    d2c4:	10000d26 	beq	r2,zero,d2fc <__gethex+0x1e8>
    d2c8:	100b883a 	mov	r5,r2
    d2cc:	4080020e 	bge	r8,r2,d2d8 <__gethex+0x1c4>
    d2d0:	00000a06 	br	d2fc <__gethex+0x1e8>
    d2d4:	41000916 	blt	r8,r4,d2fc <__gethex+0x1e8>
    d2d8:	31800044 	addi	r6,r6,1
    d2dc:	30800003 	ldbu	r2,0(r6)
    d2e0:	38c002a4 	muli	r3,r7,10
    d2e4:	1445883a 	add	r2,r2,r17
    d2e8:	11000003 	ldbu	r4,0(r2)
    d2ec:	1947883a 	add	r3,r3,r5
    d2f0:	19fffc04 	addi	r7,r3,-16
    d2f4:	200b883a 	mov	r5,r4
    d2f8:	203ff61e 	bne	r4,zero,d2d4 <__gethex+0x1c0>
    d2fc:	5005003a 	cmpeq	r2,r10,zero
    d300:	1000011e 	bne	r2,zero,d308 <__gethex+0x1f4>
    d304:	01cfc83a 	sub	r7,zero,r7
    d308:	b1ed883a 	add	r22,r22,r7
    d30c:	003fbf06 	br	d20c <__gethex+0xf8>
    d310:	04800184 	movi	r18,6
    d314:	003fc206 	br	d220 <__gethex+0x10c>
    d318:	000cffc0 	call	cffc <__hexdig_init>
    d31c:	99800017 	ldw	r6,0(r19)
    d320:	00800c04 	movi	r2,48
    d324:	31000083 	ldbu	r4,2(r6)
    d328:	30c00084 	addi	r3,r6,2
    d32c:	20bf9126 	beq	r4,r2,d174 <__gethex+0x60>
    d330:	180b883a 	mov	r5,r3
    d334:	0017883a 	mov	r11,zero
    d338:	003f9606 	br	d194 <__gethex+0x80>
    d33c:	303fa81e 	bne	r6,zero,d1e0 <__gethex+0xcc>
    d340:	29400044 	addi	r5,r5,1
    d344:	28800003 	ldbu	r2,0(r5)
    d348:	1445883a 	add	r2,r2,r17
    d34c:	10c00003 	ldbu	r3,0(r2)
    d350:	1800ad26 	beq	r3,zero,d608 <__gethex+0x4f4>
    d354:	2809883a 	mov	r4,r5
    d358:	21000044 	addi	r4,r4,1
    d35c:	20800003 	ldbu	r2,0(r4)
    d360:	1445883a 	add	r2,r2,r17
    d364:	10c00003 	ldbu	r3,0(r2)
    d368:	183ffb1e 	bne	r3,zero,d358 <__gethex+0x244>
    d36c:	2145c83a 	sub	r2,r4,r5
    d370:	1085883a 	add	r2,r2,r2
    d374:	1085883a 	add	r2,r2,r2
    d378:	00adc83a 	sub	r22,zero,r2
    d37c:	200b883a 	mov	r5,r4
    d380:	003f9b06 	br	d1f0 <__gethex+0xdc>
    d384:	29000043 	ldbu	r4,1(r5)
    d388:	00800074 	movhi	r2,1
    d38c:	109bb504 	addi	r2,r2,28372
    d390:	2c000044 	addi	r16,r5,1
    d394:	2085883a 	add	r2,r4,r2
    d398:	10c00003 	ldbu	r3,0(r2)
    d39c:	18000d1e 	bne	r3,zero,d3d4 <__gethex+0x2c0>
    d3a0:	2825883a 	mov	r18,r5
    d3a4:	02400044 	movi	r9,1
    d3a8:	002d883a 	mov	r22,zero
    d3ac:	003f9106 	br	d1f4 <__gethex+0xe0>
    d3b0:	0015883a 	mov	r10,zero
    d3b4:	21000044 	addi	r4,r4,1
    d3b8:	20c00003 	ldbu	r3,0(r4)
    d3bc:	003fb506 	br	d294 <__gethex+0x180>
    d3c0:	02800044 	movi	r10,1
    d3c4:	003ffb06 	br	d3b4 <__gethex+0x2a0>
    d3c8:	2821883a 	mov	r16,r5
    d3cc:	002d883a 	mov	r22,zero
    d3d0:	003f8806 	br	d1f4 <__gethex+0xe0>
    d3d4:	00800c04 	movi	r2,48
    d3d8:	20800e1e 	bne	r4,r2,d414 <__gethex+0x300>
    d3dc:	2007883a 	mov	r3,r4
    d3e0:	800b883a 	mov	r5,r16
    d3e4:	29400044 	addi	r5,r5,1
    d3e8:	29000003 	ldbu	r4,0(r5)
    d3ec:	20803fcc 	andi	r2,r4,255
    d3f0:	10fffc26 	beq	r2,r3,d3e4 <__gethex+0x2d0>
    d3f4:	1445883a 	add	r2,r2,r17
    d3f8:	10c00003 	ldbu	r3,0(r2)
    d3fc:	1800071e 	bne	r3,zero,d41c <__gethex+0x308>
    d400:	02c00044 	movi	r11,1
    d404:	800d883a 	mov	r6,r16
    d408:	2825883a 	mov	r18,r5
    d40c:	5813883a 	mov	r9,r11
    d410:	003f6706 	br	d1b0 <__gethex+0x9c>
    d414:	81000003 	ldbu	r4,0(r16)
    d418:	800b883a 	mov	r5,r16
    d41c:	800d883a 	mov	r6,r16
    d420:	2825883a 	mov	r18,r5
    d424:	02c00044 	movi	r11,1
    d428:	0013883a 	mov	r9,zero
    d42c:	003f6006 	br	d1b0 <__gethex+0x9c>
    d430:	8485c83a 	sub	r2,r16,r18
    d434:	10bfffc4 	addi	r2,r2,-1
    d438:	00c001c4 	movi	r3,7
    d43c:	1880700e 	bge	r3,r2,d600 <__gethex+0x4ec>
    d440:	000b883a 	mov	r5,zero
    d444:	1005d07a 	srai	r2,r2,1
    d448:	29400044 	addi	r5,r5,1
    d44c:	18bffd16 	blt	r3,r2,d444 <__gethex+0x330>
    d450:	a809883a 	mov	r4,r21
    d454:	000959c0 	call	959c <_Balloc>
    d458:	1027883a 	mov	r19,r2
    d45c:	10800504 	addi	r2,r2,20
    d460:	d8800215 	stw	r2,8(sp)
    d464:	9400522e 	bgeu	r18,r16,d5b0 <__gethex+0x49c>
    d468:	da000217 	ldw	r8,8(sp)
    d46c:	800b883a 	mov	r5,r16
    d470:	000f883a 	mov	r7,zero
    d474:	0009883a 	mov	r4,zero
    d478:	02400b84 	movi	r9,46
    d47c:	02800804 	movi	r10,32
    d480:	297fffc4 	addi	r5,r5,-1
    d484:	28c00003 	ldbu	r3,0(r5)
    d488:	1a400826 	beq	r3,r9,d4ac <__gethex+0x398>
    d48c:	380d883a 	mov	r6,r7
    d490:	3a802726 	beq	r7,r10,d530 <__gethex+0x41c>
    d494:	39c00104 	addi	r7,r7,4
    d498:	1c47883a 	add	r3,r3,r17
    d49c:	18800003 	ldbu	r2,0(r3)
    d4a0:	108003cc 	andi	r2,r2,15
    d4a4:	1184983a 	sll	r2,r2,r6
    d4a8:	2088b03a 	or	r4,r4,r2
    d4ac:	917ff436 	bltu	r18,r5,d480 <__gethex+0x36c>
    d4b0:	d8c00217 	ldw	r3,8(sp)
    d4b4:	40800104 	addi	r2,r8,4
    d4b8:	41000015 	stw	r4,0(r8)
    d4bc:	10c5c83a 	sub	r2,r2,r3
    d4c0:	1021d0ba 	srai	r16,r2,2
    d4c4:	9c000415 	stw	r16,16(r19)
    d4c8:	00090440 	call	9044 <__hi0bits>
    d4cc:	8006917a 	slli	r3,r16,5
    d4d0:	a5c00017 	ldw	r23,0(r20)
    d4d4:	1885c83a 	sub	r2,r3,r2
    d4d8:	b8801c16 	blt	r23,r2,d54c <__gethex+0x438>
    d4dc:	15c00a16 	blt	r2,r23,d508 <__gethex+0x3f4>
    d4e0:	0039883a 	mov	fp,zero
    d4e4:	a0800217 	ldw	r2,8(r20)
    d4e8:	1580340e 	bge	r2,r22,d5bc <__gethex+0x4a8>
    d4ec:	a809883a 	mov	r4,r21
    d4f0:	980b883a 	mov	r5,r19
    d4f4:	000901c0 	call	901c <_Bfree>
    d4f8:	d8c00d17 	ldw	r3,52(sp)
    d4fc:	048028c4 	movi	r18,163
    d500:	18000015 	stw	zero,0(r3)
    d504:	003f4606 	br	d220 <__gethex+0x10c>
    d508:	b8a1c83a 	sub	r16,r23,r2
    d50c:	980b883a 	mov	r5,r19
    d510:	a809883a 	mov	r4,r21
    d514:	800d883a 	mov	r6,r16
    d518:	00099600 	call	9960 <__lshift>
    d51c:	1027883a 	mov	r19,r2
    d520:	b42dc83a 	sub	r22,r22,r16
    d524:	10800504 	addi	r2,r2,20
    d528:	d8800215 	stw	r2,8(sp)
    d52c:	003fec06 	br	d4e0 <__gethex+0x3cc>
    d530:	41000015 	stw	r4,0(r8)
    d534:	28c00003 	ldbu	r3,0(r5)
    d538:	01c00104 	movi	r7,4
    d53c:	000d883a 	mov	r6,zero
    d540:	41d1883a 	add	r8,r8,r7
    d544:	0009883a 	mov	r4,zero
    d548:	003fd306 	br	d498 <__gethex+0x384>
    d54c:	15e1c83a 	sub	r16,r2,r23
    d550:	9809883a 	mov	r4,r19
    d554:	800b883a 	mov	r5,r16
    d558:	00095140 	call	9514 <__any_on>
    d55c:	1000061e 	bne	r2,zero,d578 <__gethex+0x464>
    d560:	0039883a 	mov	fp,zero
    d564:	9809883a 	mov	r4,r19
    d568:	800b883a 	mov	r5,r16
    d56c:	000d0640 	call	d064 <rshift>
    d570:	b42d883a 	add	r22,r22,r16
    d574:	003fdb06 	br	d4e4 <__gethex+0x3d0>
    d578:	817fffc4 	addi	r5,r16,-1
    d57c:	2805d17a 	srai	r2,r5,5
    d580:	d8c00217 	ldw	r3,8(sp)
    d584:	290007cc 	andi	r4,r5,31
    d588:	1085883a 	add	r2,r2,r2
    d58c:	1085883a 	add	r2,r2,r2
    d590:	01800044 	movi	r6,1
    d594:	10c5883a 	add	r2,r2,r3
    d598:	3108983a 	sll	r4,r6,r4
    d59c:	10c00017 	ldw	r3,0(r2)
    d5a0:	20c8703a 	and	r4,r4,r3
    d5a4:	20001a1e 	bne	r4,zero,d610 <__gethex+0x4fc>
    d5a8:	3039883a 	mov	fp,r6
    d5ac:	003fed06 	br	d564 <__gethex+0x450>
    d5b0:	1011883a 	mov	r8,r2
    d5b4:	0009883a 	mov	r4,zero
    d5b8:	003fbd06 	br	d4b0 <__gethex+0x39c>
    d5bc:	a1000117 	ldw	r4,4(r20)
    d5c0:	b1001a16 	blt	r22,r4,d62c <__gethex+0x518>
    d5c4:	04800044 	movi	r18,1
    d5c8:	e0000826 	beq	fp,zero,d5ec <__gethex+0x4d8>
    d5cc:	a1000317 	ldw	r4,12(r20)
    d5d0:	00800084 	movi	r2,2
    d5d4:	20809426 	beq	r4,r2,d828 <__gethex+0x714>
    d5d8:	008000c4 	movi	r2,3
    d5dc:	20805826 	beq	r4,r2,d740 <__gethex+0x62c>
    d5e0:	00800044 	movi	r2,1
    d5e4:	20803f26 	beq	r4,r2,d6e4 <__gethex+0x5d0>
    d5e8:	94800414 	ori	r18,r18,16
    d5ec:	d8800d17 	ldw	r2,52(sp)
    d5f0:	d8c00117 	ldw	r3,4(sp)
    d5f4:	14c00015 	stw	r19,0(r2)
    d5f8:	1d800015 	stw	r22,0(r3)
    d5fc:	003f0806 	br	d220 <__gethex+0x10c>
    d600:	000b883a 	mov	r5,zero
    d604:	003f9206 	br	d450 <__gethex+0x33c>
    d608:	002d883a 	mov	r22,zero
    d60c:	003ef806 	br	d1f0 <__gethex+0xdc>
    d610:	3140160e 	bge	r6,r5,d66c <__gethex+0x558>
    d614:	9809883a 	mov	r4,r19
    d618:	817fff84 	addi	r5,r16,-2
    d61c:	00095140 	call	9514 <__any_on>
    d620:	10001226 	beq	r2,zero,d66c <__gethex+0x558>
    d624:	070000c4 	movi	fp,3
    d628:	003fce06 	br	d564 <__gethex+0x450>
    d62c:	25a3c83a 	sub	r17,r4,r22
    d630:	8dc01016 	blt	r17,r23,d674 <__gethex+0x560>
    d634:	a0c00317 	ldw	r3,12(r20)
    d638:	00800084 	movi	r2,2
    d63c:	18809326 	beq	r3,r2,d88c <__gethex+0x778>
    d640:	008000c4 	movi	r2,3
    d644:	18808e26 	beq	r3,r2,d880 <__gethex+0x76c>
    d648:	00800044 	movi	r2,1
    d64c:	18807b26 	beq	r3,r2,d83c <__gethex+0x728>
    d650:	a809883a 	mov	r4,r21
    d654:	980b883a 	mov	r5,r19
    d658:	000901c0 	call	901c <_Bfree>
    d65c:	d8c00d17 	ldw	r3,52(sp)
    d660:	04801404 	movi	r18,80
    d664:	18000015 	stw	zero,0(r3)
    d668:	003eed06 	br	d220 <__gethex+0x10c>
    d66c:	07000084 	movi	fp,2
    d670:	003fbc06 	br	d564 <__gethex+0x450>
    d674:	8c3fffc4 	addi	r16,r17,-1
    d678:	e0001426 	beq	fp,zero,d6cc <__gethex+0x5b8>
    d67c:	07000044 	movi	fp,1
    d680:	8005d17a 	srai	r2,r16,5
    d684:	d8c00217 	ldw	r3,8(sp)
    d688:	814007cc 	andi	r5,r16,31
    d68c:	1085883a 	add	r2,r2,r2
    d690:	1085883a 	add	r2,r2,r2
    d694:	10c5883a 	add	r2,r2,r3
    d698:	00c00044 	movi	r3,1
    d69c:	1946983a 	sll	r3,r3,r5
    d6a0:	11000017 	ldw	r4,0(r2)
    d6a4:	1906703a 	and	r3,r3,r4
    d6a8:	18000126 	beq	r3,zero,d6b0 <__gethex+0x59c>
    d6ac:	e7000094 	ori	fp,fp,2
    d6b0:	880b883a 	mov	r5,r17
    d6b4:	9809883a 	mov	r4,r19
    d6b8:	000d0640 	call	d064 <rshift>
    d6bc:	a5800117 	ldw	r22,4(r20)
    d6c0:	bc6fc83a 	sub	r23,r23,r17
    d6c4:	04800084 	movi	r18,2
    d6c8:	003fbf06 	br	d5c8 <__gethex+0x4b4>
    d6cc:	043fec0e 	bge	zero,r16,d680 <__gethex+0x56c>
    d6d0:	9809883a 	mov	r4,r19
    d6d4:	800b883a 	mov	r5,r16
    d6d8:	00095140 	call	9514 <__any_on>
    d6dc:	1039883a 	mov	fp,r2
    d6e0:	003fe706 	br	d680 <__gethex+0x56c>
    d6e4:	e080008c 	andi	r2,fp,2
    d6e8:	103fbf26 	beq	r2,zero,d5e8 <__gethex+0x4d4>
    d6ec:	d8c00217 	ldw	r3,8(sp)
    d6f0:	18800017 	ldw	r2,0(r3)
    d6f4:	e084b03a 	or	r2,fp,r2
    d6f8:	1104703a 	and	r2,r2,r4
    d6fc:	103fba26 	beq	r2,zero,d5e8 <__gethex+0x4d4>
    d700:	9c000417 	ldw	r16,16(r19)
    d704:	d8c00217 	ldw	r3,8(sp)
    d708:	017fffc4 	movi	r5,-1
    d70c:	8405883a 	add	r2,r16,r16
    d710:	10b9883a 	add	fp,r2,r2
    d714:	1f09883a 	add	r4,r3,fp
    d718:	dc000015 	stw	r16,0(sp)
    d71c:	00000306 	br	d72c <__gethex+0x618>
    d720:	18000015 	stw	zero,0(r3)
    d724:	18c00104 	addi	r3,r3,4
    d728:	1900082e 	bgeu	r3,r4,d74c <__gethex+0x638>
    d72c:	18800017 	ldw	r2,0(r3)
    d730:	117ffb26 	beq	r2,r5,d720 <__gethex+0x60c>
    d734:	10800044 	addi	r2,r2,1
    d738:	18800015 	stw	r2,0(r3)
    d73c:	00001f06 	br	d7bc <__gethex+0x6a8>
    d740:	d8800e17 	ldw	r2,56(sp)
    d744:	103fa826 	beq	r2,zero,d5e8 <__gethex+0x4d4>
    d748:	003fed06 	br	d700 <__gethex+0x5ec>
    d74c:	98800217 	ldw	r2,8(r19)
    d750:	80801316 	blt	r16,r2,d7a0 <__gethex+0x68c>
    d754:	99400117 	ldw	r5,4(r19)
    d758:	a809883a 	mov	r4,r21
    d75c:	29400044 	addi	r5,r5,1
    d760:	000959c0 	call	959c <_Balloc>
    d764:	99800417 	ldw	r6,16(r19)
    d768:	99400304 	addi	r5,r19,12
    d76c:	11000304 	addi	r4,r2,12
    d770:	318d883a 	add	r6,r6,r6
    d774:	318d883a 	add	r6,r6,r6
    d778:	31800204 	addi	r6,r6,8
    d77c:	1023883a 	mov	r17,r2
    d780:	00021040 	call	2104 <memcpy>
    d784:	980b883a 	mov	r5,r19
    d788:	a809883a 	mov	r4,r21
    d78c:	000901c0 	call	901c <_Bfree>
    d790:	8c000417 	ldw	r16,16(r17)
    d794:	88800504 	addi	r2,r17,20
    d798:	8827883a 	mov	r19,r17
    d79c:	d8800215 	stw	r2,8(sp)
    d7a0:	8405883a 	add	r2,r16,r16
    d7a4:	1085883a 	add	r2,r2,r2
    d7a8:	14c5883a 	add	r2,r2,r19
    d7ac:	84000044 	addi	r16,r16,1
    d7b0:	00c00044 	movi	r3,1
    d7b4:	10c00515 	stw	r3,20(r2)
    d7b8:	9c000415 	stw	r16,16(r19)
    d7bc:	00800084 	movi	r2,2
    d7c0:	90801426 	beq	r18,r2,d814 <__gethex+0x700>
    d7c4:	d8800017 	ldw	r2,0(sp)
    d7c8:	14000b16 	blt	r2,r16,d7f8 <__gethex+0x6e4>
    d7cc:	bc0007cc 	andi	r16,r23,31
    d7d0:	8000021e 	bne	r16,zero,d7dc <__gethex+0x6c8>
    d7d4:	94800814 	ori	r18,r18,32
    d7d8:	003f8406 	br	d5ec <__gethex+0x4d8>
    d7dc:	d8c00217 	ldw	r3,8(sp)
    d7e0:	1f05883a 	add	r2,r3,fp
    d7e4:	113fff17 	ldw	r4,-4(r2)
    d7e8:	00090440 	call	9044 <__hi0bits>
    d7ec:	00c00804 	movi	r3,32
    d7f0:	1c07c83a 	sub	r3,r3,r16
    d7f4:	10fff70e 	bge	r2,r3,d7d4 <__gethex+0x6c0>
    d7f8:	9809883a 	mov	r4,r19
    d7fc:	01400044 	movi	r5,1
    d800:	000d0640 	call	d064 <rshift>
    d804:	a0800217 	ldw	r2,8(r20)
    d808:	b5800044 	addi	r22,r22,1
    d80c:	15bf3716 	blt	r2,r22,d4ec <__gethex+0x3d8>
    d810:	003ff006 	br	d7d4 <__gethex+0x6c0>
    d814:	a0800017 	ldw	r2,0(r20)
    d818:	10bfffc4 	addi	r2,r2,-1
    d81c:	b8801e26 	beq	r23,r2,d898 <__gethex+0x784>
    d820:	04800884 	movi	r18,34
    d824:	003f7106 	br	d5ec <__gethex+0x4d8>
    d828:	d8c00e17 	ldw	r3,56(sp)
    d82c:	00800044 	movi	r2,1
    d830:	10c5c83a 	sub	r2,r2,r3
    d834:	103f6c26 	beq	r2,zero,d5e8 <__gethex+0x4d4>
    d838:	003fb106 	br	d700 <__gethex+0x5ec>
    d83c:	bc7f841e 	bne	r23,r17,d650 <__gethex+0x53c>
    d840:	1dc0050e 	bge	r3,r23,d858 <__gethex+0x744>
    d844:	b8cbc83a 	sub	r5,r23,r3
    d848:	9809883a 	mov	r4,r19
    d84c:	00095140 	call	9514 <__any_on>
    d850:	103f7f26 	beq	r2,zero,d650 <__gethex+0x53c>
    d854:	a1000117 	ldw	r4,4(r20)
    d858:	d8800117 	ldw	r2,4(sp)
    d85c:	d8c00217 	ldw	r3,8(sp)
    d860:	04000044 	movi	r16,1
    d864:	11000015 	stw	r4,0(r2)
    d868:	d8800d17 	ldw	r2,52(sp)
    d86c:	04801884 	movi	r18,98
    d870:	1c000015 	stw	r16,0(r3)
    d874:	14c00015 	stw	r19,0(r2)
    d878:	9c000415 	stw	r16,16(r19)
    d87c:	003e6806 	br	d220 <__gethex+0x10c>
    d880:	d8c00e17 	ldw	r3,56(sp)
    d884:	183f7226 	beq	r3,zero,d650 <__gethex+0x53c>
    d888:	003ff306 	br	d858 <__gethex+0x744>
    d88c:	d8800e17 	ldw	r2,56(sp)
    d890:	103ff126 	beq	r2,zero,d858 <__gethex+0x744>
    d894:	003f6e06 	br	d650 <__gethex+0x53c>
    d898:	b805d17a 	srai	r2,r23,5
    d89c:	d8c00217 	ldw	r3,8(sp)
    d8a0:	b94007cc 	andi	r5,r23,31
    d8a4:	1085883a 	add	r2,r2,r2
    d8a8:	1085883a 	add	r2,r2,r2
    d8ac:	10c5883a 	add	r2,r2,r3
    d8b0:	00c00044 	movi	r3,1
    d8b4:	1946983a 	sll	r3,r3,r5
    d8b8:	11000017 	ldw	r4,0(r2)
    d8bc:	1906703a 	and	r3,r3,r4
    d8c0:	183fd726 	beq	r3,zero,d820 <__gethex+0x70c>
    d8c4:	04800844 	movi	r18,33
    d8c8:	003f4806 	br	d5ec <__gethex+0x4d8>

0000d8cc <L_shift>:
    d8cc:	00800204 	movi	r2,8
    d8d0:	1185c83a 	sub	r2,r2,r6
    d8d4:	1085883a 	add	r2,r2,r2
    d8d8:	21c00017 	ldw	r7,0(r4)
    d8dc:	1093883a 	add	r9,r2,r2
    d8e0:	00800804 	movi	r2,32
    d8e4:	200d883a 	mov	r6,r4
    d8e8:	1251c83a 	sub	r8,r2,r9
    d8ec:	31800104 	addi	r6,r6,4
    d8f0:	3805883a 	mov	r2,r7
    d8f4:	31c00017 	ldw	r7,0(r6)
    d8f8:	3a08983a 	sll	r4,r7,r8
    d8fc:	3a46d83a 	srl	r3,r7,r9
    d900:	1104b03a 	or	r2,r2,r4
    d904:	180f883a 	mov	r7,r3
    d908:	30bfff15 	stw	r2,-4(r6)
    d90c:	30c00015 	stw	r3,0(r6)
    d910:	317ff636 	bltu	r6,r5,d8ec <L_shift+0x20>
    d914:	f800283a 	ret

0000d918 <__hexnan>:
    d918:	defff404 	addi	sp,sp,-48
    d91c:	dd800815 	stw	r22,32(sp)
    d920:	05800074 	movhi	r22,1
    d924:	b59bb504 	addi	r22,r22,28372
    d928:	b0800c03 	ldbu	r2,48(r22)
    d92c:	dcc00515 	stw	r19,20(sp)
    d930:	dc000215 	stw	r16,8(sp)
    d934:	dfc00b15 	stw	ra,44(sp)
    d938:	df000a15 	stw	fp,40(sp)
    d93c:	ddc00915 	stw	r23,36(sp)
    d940:	dd400715 	stw	r21,28(sp)
    d944:	dd000615 	stw	r20,24(sp)
    d948:	dc800415 	stw	r18,16(sp)
    d94c:	dc400315 	stw	r17,12(sp)
    d950:	d9000115 	stw	r4,4(sp)
    d954:	2821883a 	mov	r16,r5
    d958:	3027883a 	mov	r19,r6
    d95c:	10007426 	beq	r2,zero,db30 <__hexnan+0x218>
    d960:	80c00017 	ldw	r3,0(r16)
    d964:	1805d17a 	srai	r2,r3,5
    d968:	18c007cc 	andi	r3,r3,31
    d96c:	1839003a 	cmpeq	fp,r3,zero
    d970:	1085883a 	add	r2,r2,r2
    d974:	1085883a 	add	r2,r2,r2
    d978:	d8c00015 	stw	r3,0(sp)
    d97c:	14c5883a 	add	r2,r2,r19
    d980:	e000011e 	bne	fp,zero,d988 <__hexnan+0x70>
    d984:	10800104 	addi	r2,r2,4
    d988:	d8c00117 	ldw	r3,4(sp)
    d98c:	153fff04 	addi	r20,r2,-4
    d990:	a021883a 	mov	r16,r20
    d994:	1c400017 	ldw	r17,0(r3)
    d998:	a02b883a 	mov	r21,r20
    d99c:	0025883a 	mov	r18,zero
    d9a0:	002f883a 	mov	r23,zero
    d9a4:	000d883a 	mov	r6,zero
    d9a8:	103fff15 	stw	zero,-4(r2)
    d9ac:	8c400044 	addi	r17,r17,1
    d9b0:	89000003 	ldbu	r4,0(r17)
    d9b4:	20000e26 	beq	r4,zero,d9f0 <__hexnan+0xd8>
    d9b8:	2585883a 	add	r2,r4,r22
    d9bc:	10c00003 	ldbu	r3,0(r2)
    d9c0:	18002e1e 	bne	r3,zero,da7c <__hexnan+0x164>
    d9c4:	00800804 	movi	r2,32
    d9c8:	11005536 	bltu	r2,r4,db20 <__hexnan+0x208>
    d9cc:	bcbff70e 	bge	r23,r18,d9ac <__hexnan+0x94>
    d9d0:	8540022e 	bgeu	r16,r21,d9dc <__hexnan+0xc4>
    d9d4:	008001c4 	movi	r2,7
    d9d8:	11803c0e 	bge	r2,r6,dacc <__hexnan+0x1b4>
    d9dc:	9c003536 	bltu	r19,r16,dab4 <__hexnan+0x19c>
    d9e0:	8c400044 	addi	r17,r17,1
    d9e4:	89000003 	ldbu	r4,0(r17)
    d9e8:	01800204 	movi	r6,8
    d9ec:	203ff21e 	bne	r4,zero,d9b8 <__hexnan+0xa0>
    d9f0:	90004d26 	beq	r18,zero,db28 <__hexnan+0x210>
    d9f4:	85404336 	bltu	r16,r21,db04 <__hexnan+0x1ec>
    d9f8:	9c00382e 	bgeu	r19,r16,dadc <__hexnan+0x1c4>
    d9fc:	9807883a 	mov	r3,r19
    da00:	80800017 	ldw	r2,0(r16)
    da04:	84000104 	addi	r16,r16,4
    da08:	18800015 	stw	r2,0(r3)
    da0c:	18c00104 	addi	r3,r3,4
    da10:	a43ffb2e 	bgeu	r20,r16,da00 <__hexnan+0xe8>
    da14:	18000015 	stw	zero,0(r3)
    da18:	18c00104 	addi	r3,r3,4
    da1c:	a0fffd2e 	bgeu	r20,r3,da14 <__hexnan+0xfc>
    da20:	a0800017 	ldw	r2,0(r20)
    da24:	1000071e 	bne	r2,zero,da44 <__hexnan+0x12c>
    da28:	9d004326 	beq	r19,r20,db38 <__hexnan+0x220>
    da2c:	a007883a 	mov	r3,r20
    da30:	00000106 	br	da38 <__hexnan+0x120>
    da34:	98c04026 	beq	r19,r3,db38 <__hexnan+0x220>
    da38:	18ffff04 	addi	r3,r3,-4
    da3c:	18800017 	ldw	r2,0(r3)
    da40:	103ffc26 	beq	r2,zero,da34 <__hexnan+0x11c>
    da44:	00c00144 	movi	r3,5
    da48:	1805883a 	mov	r2,r3
    da4c:	dfc00b17 	ldw	ra,44(sp)
    da50:	df000a17 	ldw	fp,40(sp)
    da54:	ddc00917 	ldw	r23,36(sp)
    da58:	dd800817 	ldw	r22,32(sp)
    da5c:	dd400717 	ldw	r21,28(sp)
    da60:	dd000617 	ldw	r20,24(sp)
    da64:	dcc00517 	ldw	r19,20(sp)
    da68:	dc800417 	ldw	r18,16(sp)
    da6c:	dc400317 	ldw	r17,12(sp)
    da70:	dc000217 	ldw	r16,8(sp)
    da74:	dec00c04 	addi	sp,sp,48
    da78:	f800283a 	ret
    da7c:	31800044 	addi	r6,r6,1
    da80:	00800204 	movi	r2,8
    da84:	94800044 	addi	r18,r18,1
    da88:	1180040e 	bge	r2,r6,da9c <__hexnan+0x184>
    da8c:	9c3fc72e 	bgeu	r19,r16,d9ac <__hexnan+0x94>
    da90:	843fff04 	addi	r16,r16,-4
    da94:	80000015 	stw	zero,0(r16)
    da98:	01800044 	movi	r6,1
    da9c:	80800017 	ldw	r2,0(r16)
    daa0:	18c003cc 	andi	r3,r3,15
    daa4:	1004913a 	slli	r2,r2,4
    daa8:	10c4b03a 	or	r2,r2,r3
    daac:	80800015 	stw	r2,0(r16)
    dab0:	003fbe06 	br	d9ac <__hexnan+0x94>
    dab4:	843fff04 	addi	r16,r16,-4
    dab8:	802b883a 	mov	r21,r16
    dabc:	902f883a 	mov	r23,r18
    dac0:	000d883a 	mov	r6,zero
    dac4:	80000015 	stw	zero,0(r16)
    dac8:	003fb806 	br	d9ac <__hexnan+0x94>
    dacc:	8009883a 	mov	r4,r16
    dad0:	a80b883a 	mov	r5,r21
    dad4:	000d8cc0 	call	d8cc <L_shift>
    dad8:	003fc006 	br	d9dc <__hexnan+0xc4>
    dadc:	e03fd01e 	bne	fp,zero,da20 <__hexnan+0x108>
    dae0:	d8c00017 	ldw	r3,0(sp)
    dae4:	00800804 	movi	r2,32
    dae8:	10c5c83a 	sub	r2,r2,r3
    daec:	00ffffc4 	movi	r3,-1
    daf0:	1886d83a 	srl	r3,r3,r2
    daf4:	a0800017 	ldw	r2,0(r20)
    daf8:	10c4703a 	and	r2,r2,r3
    dafc:	a0800015 	stw	r2,0(r20)
    db00:	003fc806 	br	da24 <__hexnan+0x10c>
    db04:	008001c4 	movi	r2,7
    db08:	11bfbb16 	blt	r2,r6,d9f8 <__hexnan+0xe0>
    db0c:	a80b883a 	mov	r5,r21
    db10:	8009883a 	mov	r4,r16
    db14:	000d8cc0 	call	d8cc <L_shift>
    db18:	9c3ff02e 	bgeu	r19,r16,dadc <__hexnan+0x1c4>
    db1c:	003fb706 	br	d9fc <__hexnan+0xe4>
    db20:	00800a44 	movi	r2,41
    db24:	20800826 	beq	r4,r2,db48 <__hexnan+0x230>
    db28:	00c00104 	movi	r3,4
    db2c:	003fc606 	br	da48 <__hexnan+0x130>
    db30:	000cffc0 	call	cffc <__hexdig_init>
    db34:	003f8a06 	br	d960 <__hexnan+0x48>
    db38:	00800044 	movi	r2,1
    db3c:	00c00144 	movi	r3,5
    db40:	98800015 	stw	r2,0(r19)
    db44:	003fc006 	br	da48 <__hexnan+0x130>
    db48:	903ff726 	beq	r18,zero,db28 <__hexnan+0x210>
    db4c:	d8c00117 	ldw	r3,4(sp)
    db50:	88800044 	addi	r2,r17,1
    db54:	18800015 	stw	r2,0(r3)
    db58:	857fa72e 	bgeu	r16,r21,d9f8 <__hexnan+0xe0>
    db5c:	003fe906 	br	db04 <__hexnan+0x1ec>

0000db60 <_isatty_r>:
    db60:	defffd04 	addi	sp,sp,-12
    db64:	dc000015 	stw	r16,0(sp)
    db68:	04000074 	movhi	r16,1
    db6c:	841b9c04 	addi	r16,r16,28272
    db70:	dc400115 	stw	r17,4(sp)
    db74:	80000015 	stw	zero,0(r16)
    db78:	2023883a 	mov	r17,r4
    db7c:	2809883a 	mov	r4,r5
    db80:	dfc00215 	stw	ra,8(sp)
    db84:	00107740 	call	10774 <isatty>
    db88:	1007883a 	mov	r3,r2
    db8c:	00bfffc4 	movi	r2,-1
    db90:	18800626 	beq	r3,r2,dbac <_isatty_r+0x4c>
    db94:	1805883a 	mov	r2,r3
    db98:	dfc00217 	ldw	ra,8(sp)
    db9c:	dc400117 	ldw	r17,4(sp)
    dba0:	dc000017 	ldw	r16,0(sp)
    dba4:	dec00304 	addi	sp,sp,12
    dba8:	f800283a 	ret
    dbac:	80800017 	ldw	r2,0(r16)
    dbb0:	103ff826 	beq	r2,zero,db94 <_isatty_r+0x34>
    dbb4:	88800015 	stw	r2,0(r17)
    dbb8:	1805883a 	mov	r2,r3
    dbbc:	dfc00217 	ldw	ra,8(sp)
    dbc0:	dc400117 	ldw	r17,4(sp)
    dbc4:	dc000017 	ldw	r16,0(sp)
    dbc8:	dec00304 	addi	sp,sp,12
    dbcc:	f800283a 	ret

0000dbd0 <__muldi3>:
    dbd0:	2011883a 	mov	r8,r4
    dbd4:	427fffcc 	andi	r9,r8,65535
    dbd8:	4018d43a 	srli	r12,r8,16
    dbdc:	32bfffcc 	andi	r10,r6,65535
    dbe0:	3016d43a 	srli	r11,r6,16
    dbe4:	4a85383a 	mul	r2,r9,r10
    dbe8:	6295383a 	mul	r10,r12,r10
    dbec:	4ad3383a 	mul	r9,r9,r11
    dbf0:	113fffcc 	andi	r4,r2,65535
    dbf4:	1004d43a 	srli	r2,r2,16
    dbf8:	4a93883a 	add	r9,r9,r10
    dbfc:	3807883a 	mov	r3,r7
    dc00:	1245883a 	add	r2,r2,r9
    dc04:	280f883a 	mov	r7,r5
    dc08:	180b883a 	mov	r5,r3
    dc0c:	1006943a 	slli	r3,r2,16
    dc10:	defffd04 	addi	sp,sp,-12
    dc14:	dc800215 	stw	r18,8(sp)
    dc18:	1907883a 	add	r3,r3,r4
    dc1c:	dc400115 	stw	r17,4(sp)
    dc20:	dc000015 	stw	r16,0(sp)
    dc24:	4165383a 	mul	r18,r8,r5
    dc28:	31e3383a 	mul	r17,r6,r7
    dc2c:	1012d43a 	srli	r9,r2,16
    dc30:	62d9383a 	mul	r12,r12,r11
    dc34:	181f883a 	mov	r15,r3
    dc38:	1280022e 	bgeu	r2,r10,dc44 <__muldi3+0x74>
    dc3c:	00800074 	movhi	r2,1
    dc40:	6099883a 	add	r12,r12,r2
    dc44:	624d883a 	add	r6,r12,r9
    dc48:	9187883a 	add	r3,r18,r6
    dc4c:	88c7883a 	add	r3,r17,r3
    dc50:	7805883a 	mov	r2,r15
    dc54:	dc800217 	ldw	r18,8(sp)
    dc58:	dc400117 	ldw	r17,4(sp)
    dc5c:	dc000017 	ldw	r16,0(sp)
    dc60:	dec00304 	addi	sp,sp,12
    dc64:	f800283a 	ret

0000dc68 <__fixunsdfsi>:
    dc68:	defffb04 	addi	sp,sp,-20
    dc6c:	dc400115 	stw	r17,4(sp)
    dc70:	dc000015 	stw	r16,0(sp)
    dc74:	04507834 	movhi	r17,16864
    dc78:	0021883a 	mov	r16,zero
    dc7c:	800d883a 	mov	r6,r16
    dc80:	880f883a 	mov	r7,r17
    dc84:	dcc00315 	stw	r19,12(sp)
    dc88:	dc800215 	stw	r18,8(sp)
    dc8c:	2827883a 	mov	r19,r5
    dc90:	2025883a 	mov	r18,r4
    dc94:	dfc00415 	stw	ra,16(sp)
    dc98:	000f6b80 	call	f6b8 <__gedf2>
    dc9c:	000d883a 	mov	r6,zero
    dca0:	880f883a 	mov	r7,r17
    dca4:	980b883a 	mov	r5,r19
    dca8:	9009883a 	mov	r4,r18
    dcac:	10000d16 	blt	r2,zero,dce4 <__fixunsdfsi+0x7c>
    dcb0:	000ee100 	call	ee10 <__subdf3>
    dcb4:	180b883a 	mov	r5,r3
    dcb8:	1009883a 	mov	r4,r2
    dcbc:	000f9480 	call	f948 <__fixdfsi>
    dcc0:	00e00034 	movhi	r3,32768
    dcc4:	10c5883a 	add	r2,r2,r3
    dcc8:	dfc00417 	ldw	ra,16(sp)
    dccc:	dcc00317 	ldw	r19,12(sp)
    dcd0:	dc800217 	ldw	r18,8(sp)
    dcd4:	dc400117 	ldw	r17,4(sp)
    dcd8:	dc000017 	ldw	r16,0(sp)
    dcdc:	dec00504 	addi	sp,sp,20
    dce0:	f800283a 	ret
    dce4:	980b883a 	mov	r5,r19
    dce8:	9009883a 	mov	r4,r18
    dcec:	000f9480 	call	f948 <__fixdfsi>
    dcf0:	dfc00417 	ldw	ra,16(sp)
    dcf4:	dcc00317 	ldw	r19,12(sp)
    dcf8:	dc800217 	ldw	r18,8(sp)
    dcfc:	dc400117 	ldw	r17,4(sp)
    dd00:	dc000017 	ldw	r16,0(sp)
    dd04:	dec00504 	addi	sp,sp,20
    dd08:	f800283a 	ret

0000dd0c <__udivdi3>:
    dd0c:	defff004 	addi	sp,sp,-64
    dd10:	2005883a 	mov	r2,r4
    dd14:	3011883a 	mov	r8,r6
    dd18:	df000e15 	stw	fp,56(sp)
    dd1c:	dd000a15 	stw	r20,40(sp)
    dd20:	dc000615 	stw	r16,24(sp)
    dd24:	dfc00f15 	stw	ra,60(sp)
    dd28:	ddc00d15 	stw	r23,52(sp)
    dd2c:	dd800c15 	stw	r22,48(sp)
    dd30:	dd400b15 	stw	r21,44(sp)
    dd34:	dcc00915 	stw	r19,36(sp)
    dd38:	dc800815 	stw	r18,32(sp)
    dd3c:	dc400715 	stw	r17,28(sp)
    dd40:	4021883a 	mov	r16,r8
    dd44:	1039883a 	mov	fp,r2
    dd48:	2829883a 	mov	r20,r5
    dd4c:	38003b1e 	bne	r7,zero,de3c <__udivdi3+0x130>
    dd50:	2a005c36 	bltu	r5,r8,dec4 <__udivdi3+0x1b8>
    dd54:	4000a626 	beq	r8,zero,dff0 <__udivdi3+0x2e4>
    dd58:	00bfffd4 	movui	r2,65535
    dd5c:	14009e36 	bltu	r2,r16,dfd8 <__udivdi3+0x2cc>
    dd60:	00803fc4 	movi	r2,255
    dd64:	14013d36 	bltu	r2,r16,e25c <__udivdi3+0x550>
    dd68:	000b883a 	mov	r5,zero
    dd6c:	0005883a 	mov	r2,zero
    dd70:	8084d83a 	srl	r2,r16,r2
    dd74:	01000074 	movhi	r4,1
    dd78:	210dea04 	addi	r4,r4,14248
    dd7c:	01800804 	movi	r6,32
    dd80:	1105883a 	add	r2,r2,r4
    dd84:	10c00003 	ldbu	r3,0(r2)
    dd88:	28c7883a 	add	r3,r5,r3
    dd8c:	30edc83a 	sub	r22,r6,r3
    dd90:	b000ee1e 	bne	r22,zero,e14c <__udivdi3+0x440>
    dd94:	802ad43a 	srli	r21,r16,16
    dd98:	00800044 	movi	r2,1
    dd9c:	a423c83a 	sub	r17,r20,r16
    dda0:	85ffffcc 	andi	r23,r16,65535
    dda4:	d8800315 	stw	r2,12(sp)
    dda8:	8809883a 	mov	r4,r17
    ddac:	a80b883a 	mov	r5,r21
    ddb0:	00013240 	call	1324 <__udivsi3>
    ddb4:	8809883a 	mov	r4,r17
    ddb8:	a80b883a 	mov	r5,r21
    ddbc:	102d883a 	mov	r22,r2
    ddc0:	000132c0 	call	132c <__umodsi3>
    ddc4:	1004943a 	slli	r2,r2,16
    ddc8:	e006d43a 	srli	r3,fp,16
    ddcc:	bda3383a 	mul	r17,r23,r22
    ddd0:	10c4b03a 	or	r2,r2,r3
    ddd4:	1440042e 	bgeu	r2,r17,dde8 <__udivdi3+0xdc>
    ddd8:	1405883a 	add	r2,r2,r16
    dddc:	b5bfffc4 	addi	r22,r22,-1
    dde0:	14000136 	bltu	r2,r16,dde8 <__udivdi3+0xdc>
    dde4:	14413d36 	bltu	r2,r17,e2dc <__udivdi3+0x5d0>
    dde8:	1463c83a 	sub	r17,r2,r17
    ddec:	8809883a 	mov	r4,r17
    ddf0:	a80b883a 	mov	r5,r21
    ddf4:	00013240 	call	1324 <__udivsi3>
    ddf8:	8809883a 	mov	r4,r17
    ddfc:	a80b883a 	mov	r5,r21
    de00:	1029883a 	mov	r20,r2
    de04:	000132c0 	call	132c <__umodsi3>
    de08:	1004943a 	slli	r2,r2,16
    de0c:	bd09383a 	mul	r4,r23,r20
    de10:	e0ffffcc 	andi	r3,fp,65535
    de14:	10c4b03a 	or	r2,r2,r3
    de18:	1100042e 	bgeu	r2,r4,de2c <__udivdi3+0x120>
    de1c:	8085883a 	add	r2,r16,r2
    de20:	a53fffc4 	addi	r20,r20,-1
    de24:	14000136 	bltu	r2,r16,de2c <__udivdi3+0x120>
    de28:	11012036 	bltu	r2,r4,e2ac <__udivdi3+0x5a0>
    de2c:	b004943a 	slli	r2,r22,16
    de30:	d9000317 	ldw	r4,12(sp)
    de34:	a084b03a 	or	r2,r20,r2
    de38:	00001506 	br	de90 <__udivdi3+0x184>
    de3c:	380d883a 	mov	r6,r7
    de40:	29c06236 	bltu	r5,r7,dfcc <__udivdi3+0x2c0>
    de44:	00bfffd4 	movui	r2,65535
    de48:	11c05a36 	bltu	r2,r7,dfb4 <__udivdi3+0x2a8>
    de4c:	00803fc4 	movi	r2,255
    de50:	11c0fc36 	bltu	r2,r7,e244 <__udivdi3+0x538>
    de54:	000b883a 	mov	r5,zero
    de58:	0005883a 	mov	r2,zero
    de5c:	3084d83a 	srl	r2,r6,r2
    de60:	01000074 	movhi	r4,1
    de64:	210dea04 	addi	r4,r4,14248
    de68:	01c00804 	movi	r7,32
    de6c:	1105883a 	add	r2,r2,r4
    de70:	10c00003 	ldbu	r3,0(r2)
    de74:	28c7883a 	add	r3,r5,r3
    de78:	38efc83a 	sub	r23,r7,r3
    de7c:	b800691e 	bne	r23,zero,e024 <__udivdi3+0x318>
    de80:	35000136 	bltu	r6,r20,de88 <__udivdi3+0x17c>
    de84:	e4005136 	bltu	fp,r16,dfcc <__udivdi3+0x2c0>
    de88:	00800044 	movi	r2,1
    de8c:	0009883a 	mov	r4,zero
    de90:	2007883a 	mov	r3,r4
    de94:	dfc00f17 	ldw	ra,60(sp)
    de98:	df000e17 	ldw	fp,56(sp)
    de9c:	ddc00d17 	ldw	r23,52(sp)
    dea0:	dd800c17 	ldw	r22,48(sp)
    dea4:	dd400b17 	ldw	r21,44(sp)
    dea8:	dd000a17 	ldw	r20,40(sp)
    deac:	dcc00917 	ldw	r19,36(sp)
    deb0:	dc800817 	ldw	r18,32(sp)
    deb4:	dc400717 	ldw	r17,28(sp)
    deb8:	dc000617 	ldw	r16,24(sp)
    debc:	dec01004 	addi	sp,sp,64
    dec0:	f800283a 	ret
    dec4:	00bfffd4 	movui	r2,65535
    dec8:	12005036 	bltu	r2,r8,e00c <__udivdi3+0x300>
    decc:	00803fc4 	movi	r2,255
    ded0:	1200e836 	bltu	r2,r8,e274 <__udivdi3+0x568>
    ded4:	000b883a 	mov	r5,zero
    ded8:	0005883a 	mov	r2,zero
    dedc:	8084d83a 	srl	r2,r16,r2
    dee0:	01000074 	movhi	r4,1
    dee4:	210dea04 	addi	r4,r4,14248
    dee8:	01800804 	movi	r6,32
    deec:	1105883a 	add	r2,r2,r4
    def0:	10c00003 	ldbu	r3,0(r2)
    def4:	28c7883a 	add	r3,r5,r3
    def8:	30cbc83a 	sub	r5,r6,r3
    defc:	28000626 	beq	r5,zero,df18 <__udivdi3+0x20c>
    df00:	3145c83a 	sub	r2,r6,r5
    df04:	e084d83a 	srl	r2,fp,r2
    df08:	a146983a 	sll	r3,r20,r5
    df0c:	e178983a 	sll	fp,fp,r5
    df10:	8160983a 	sll	r16,r16,r5
    df14:	18a8b03a 	or	r20,r3,r2
    df18:	802ad43a 	srli	r21,r16,16
    df1c:	a009883a 	mov	r4,r20
    df20:	85ffffcc 	andi	r23,r16,65535
    df24:	a80b883a 	mov	r5,r21
    df28:	00013240 	call	1324 <__udivsi3>
    df2c:	a009883a 	mov	r4,r20
    df30:	a80b883a 	mov	r5,r21
    df34:	102d883a 	mov	r22,r2
    df38:	000132c0 	call	132c <__umodsi3>
    df3c:	1004943a 	slli	r2,r2,16
    df40:	e006d43a 	srli	r3,fp,16
    df44:	bda3383a 	mul	r17,r23,r22
    df48:	10c4b03a 	or	r2,r2,r3
    df4c:	1440042e 	bgeu	r2,r17,df60 <__udivdi3+0x254>
    df50:	1405883a 	add	r2,r2,r16
    df54:	b5bfffc4 	addi	r22,r22,-1
    df58:	14000136 	bltu	r2,r16,df60 <__udivdi3+0x254>
    df5c:	1440d536 	bltu	r2,r17,e2b4 <__udivdi3+0x5a8>
    df60:	1463c83a 	sub	r17,r2,r17
    df64:	8809883a 	mov	r4,r17
    df68:	a80b883a 	mov	r5,r21
    df6c:	00013240 	call	1324 <__udivsi3>
    df70:	8809883a 	mov	r4,r17
    df74:	a80b883a 	mov	r5,r21
    df78:	1029883a 	mov	r20,r2
    df7c:	000132c0 	call	132c <__umodsi3>
    df80:	1004943a 	slli	r2,r2,16
    df84:	bd09383a 	mul	r4,r23,r20
    df88:	e0ffffcc 	andi	r3,fp,65535
    df8c:	10c4b03a 	or	r2,r2,r3
    df90:	1100042e 	bgeu	r2,r4,dfa4 <__udivdi3+0x298>
    df94:	8085883a 	add	r2,r16,r2
    df98:	a53fffc4 	addi	r20,r20,-1
    df9c:	14000136 	bltu	r2,r16,dfa4 <__udivdi3+0x298>
    dfa0:	1100c736 	bltu	r2,r4,e2c0 <__udivdi3+0x5b4>
    dfa4:	b004943a 	slli	r2,r22,16
    dfa8:	0009883a 	mov	r4,zero
    dfac:	a084b03a 	or	r2,r20,r2
    dfb0:	003fb706 	br	de90 <__udivdi3+0x184>
    dfb4:	00804034 	movhi	r2,256
    dfb8:	10bfffc4 	addi	r2,r2,-1
    dfbc:	11c0a436 	bltu	r2,r7,e250 <__udivdi3+0x544>
    dfc0:	01400404 	movi	r5,16
    dfc4:	2805883a 	mov	r2,r5
    dfc8:	003fa406 	br	de5c <__udivdi3+0x150>
    dfcc:	0005883a 	mov	r2,zero
    dfd0:	0009883a 	mov	r4,zero
    dfd4:	003fae06 	br	de90 <__udivdi3+0x184>
    dfd8:	00804034 	movhi	r2,256
    dfdc:	10bfffc4 	addi	r2,r2,-1
    dfe0:	1400a136 	bltu	r2,r16,e268 <__udivdi3+0x55c>
    dfe4:	01400404 	movi	r5,16
    dfe8:	2805883a 	mov	r2,r5
    dfec:	003f6006 	br	dd70 <__udivdi3+0x64>
    dff0:	01000044 	movi	r4,1
    dff4:	000b883a 	mov	r5,zero
    dff8:	00013240 	call	1324 <__udivsi3>
    dffc:	1021883a 	mov	r16,r2
    e000:	00bfffd4 	movui	r2,65535
    e004:	143ff436 	bltu	r2,r16,dfd8 <__udivdi3+0x2cc>
    e008:	003f5506 	br	dd60 <__udivdi3+0x54>
    e00c:	00804034 	movhi	r2,256
    e010:	10bfffc4 	addi	r2,r2,-1
    e014:	12009a36 	bltu	r2,r8,e280 <__udivdi3+0x574>
    e018:	01400404 	movi	r5,16
    e01c:	2805883a 	mov	r2,r5
    e020:	003fae06 	br	dedc <__udivdi3+0x1d0>
    e024:	3dc5c83a 	sub	r2,r7,r23
    e028:	35c8983a 	sll	r4,r6,r23
    e02c:	8086d83a 	srl	r3,r16,r2
    e030:	a0a2d83a 	srl	r17,r20,r2
    e034:	e084d83a 	srl	r2,fp,r2
    e038:	20eab03a 	or	r21,r4,r3
    e03c:	a82cd43a 	srli	r22,r21,16
    e040:	a5c6983a 	sll	r3,r20,r23
    e044:	8809883a 	mov	r4,r17
    e048:	b00b883a 	mov	r5,r22
    e04c:	1886b03a 	or	r3,r3,r2
    e050:	d8c00215 	stw	r3,8(sp)
    e054:	00013240 	call	1324 <__udivsi3>
    e058:	8809883a 	mov	r4,r17
    e05c:	b00b883a 	mov	r5,r22
    e060:	1029883a 	mov	r20,r2
    e064:	000132c0 	call	132c <__umodsi3>
    e068:	a8ffffcc 	andi	r3,r21,65535
    e06c:	d8c00515 	stw	r3,20(sp)
    e070:	d9000217 	ldw	r4,8(sp)
    e074:	d9400517 	ldw	r5,20(sp)
    e078:	1004943a 	slli	r2,r2,16
    e07c:	2006d43a 	srli	r3,r4,16
    e080:	85e0983a 	sll	r16,r16,r23
    e084:	2d23383a 	mul	r17,r5,r20
    e088:	10c4b03a 	or	r2,r2,r3
    e08c:	dc000015 	stw	r16,0(sp)
    e090:	1440032e 	bgeu	r2,r17,e0a0 <__udivdi3+0x394>
    e094:	1545883a 	add	r2,r2,r21
    e098:	a53fffc4 	addi	r20,r20,-1
    e09c:	15407f2e 	bgeu	r2,r21,e29c <__udivdi3+0x590>
    e0a0:	1463c83a 	sub	r17,r2,r17
    e0a4:	8809883a 	mov	r4,r17
    e0a8:	b00b883a 	mov	r5,r22
    e0ac:	00013240 	call	1324 <__udivsi3>
    e0b0:	8809883a 	mov	r4,r17
    e0b4:	b00b883a 	mov	r5,r22
    e0b8:	1021883a 	mov	r16,r2
    e0bc:	000132c0 	call	132c <__umodsi3>
    e0c0:	d8c00517 	ldw	r3,20(sp)
    e0c4:	d9000217 	ldw	r4,8(sp)
    e0c8:	1004943a 	slli	r2,r2,16
    e0cc:	1c0f383a 	mul	r7,r3,r16
    e0d0:	20ffffcc 	andi	r3,r4,65535
    e0d4:	10e2b03a 	or	r17,r2,r3
    e0d8:	89c0032e 	bgeu	r17,r7,e0e8 <__udivdi3+0x3dc>
    e0dc:	8d63883a 	add	r17,r17,r21
    e0e0:	843fffc4 	addi	r16,r16,-1
    e0e4:	8d40692e 	bgeu	r17,r21,e28c <__udivdi3+0x580>
    e0e8:	a008943a 	slli	r4,r20,16
    e0ec:	d9400017 	ldw	r5,0(sp)
    e0f0:	89e3c83a 	sub	r17,r17,r7
    e0f4:	8110b03a 	or	r8,r16,r4
    e0f8:	280cd43a 	srli	r6,r5,16
    e0fc:	28ffffcc 	andi	r3,r5,65535
    e100:	40bfffcc 	andi	r2,r8,65535
    e104:	400ad43a 	srli	r5,r8,16
    e108:	10d3383a 	mul	r9,r2,r3
    e10c:	1185383a 	mul	r2,r2,r6
    e110:	28c7383a 	mul	r3,r5,r3
    e114:	4808d43a 	srli	r4,r9,16
    e118:	298b383a 	mul	r5,r5,r6
    e11c:	10c5883a 	add	r2,r2,r3
    e120:	2089883a 	add	r4,r4,r2
    e124:	20c0022e 	bgeu	r4,r3,e130 <__udivdi3+0x424>
    e128:	00800074 	movhi	r2,1
    e12c:	288b883a 	add	r5,r5,r2
    e130:	2004d43a 	srli	r2,r4,16
    e134:	288b883a 	add	r5,r5,r2
    e138:	89403f36 	bltu	r17,r5,e238 <__udivdi3+0x52c>
    e13c:	89403926 	beq	r17,r5,e224 <__udivdi3+0x518>
    e140:	4005883a 	mov	r2,r8
    e144:	0009883a 	mov	r4,zero
    e148:	003f5106 	br	de90 <__udivdi3+0x184>
    e14c:	85a0983a 	sll	r16,r16,r22
    e150:	3585c83a 	sub	r2,r6,r22
    e154:	a0a2d83a 	srl	r17,r20,r2
    e158:	802ad43a 	srli	r21,r16,16
    e15c:	e084d83a 	srl	r2,fp,r2
    e160:	a586983a 	sll	r3,r20,r22
    e164:	8809883a 	mov	r4,r17
    e168:	a80b883a 	mov	r5,r21
    e16c:	1886b03a 	or	r3,r3,r2
    e170:	d8c00115 	stw	r3,4(sp)
    e174:	00013240 	call	1324 <__udivsi3>
    e178:	8809883a 	mov	r4,r17
    e17c:	a80b883a 	mov	r5,r21
    e180:	d8800415 	stw	r2,16(sp)
    e184:	000132c0 	call	132c <__umodsi3>
    e188:	d9000117 	ldw	r4,4(sp)
    e18c:	d9400417 	ldw	r5,16(sp)
    e190:	1004943a 	slli	r2,r2,16
    e194:	85ffffcc 	andi	r23,r16,65535
    e198:	2006d43a 	srli	r3,r4,16
    e19c:	b963383a 	mul	r17,r23,r5
    e1a0:	10c4b03a 	or	r2,r2,r3
    e1a4:	1440042e 	bgeu	r2,r17,e1b8 <__udivdi3+0x4ac>
    e1a8:	297fffc4 	addi	r5,r5,-1
    e1ac:	1405883a 	add	r2,r2,r16
    e1b0:	d9400415 	stw	r5,16(sp)
    e1b4:	1400442e 	bgeu	r2,r16,e2c8 <__udivdi3+0x5bc>
    e1b8:	1463c83a 	sub	r17,r2,r17
    e1bc:	8809883a 	mov	r4,r17
    e1c0:	a80b883a 	mov	r5,r21
    e1c4:	00013240 	call	1324 <__udivsi3>
    e1c8:	8809883a 	mov	r4,r17
    e1cc:	a80b883a 	mov	r5,r21
    e1d0:	1029883a 	mov	r20,r2
    e1d4:	000132c0 	call	132c <__umodsi3>
    e1d8:	d9400117 	ldw	r5,4(sp)
    e1dc:	1004943a 	slli	r2,r2,16
    e1e0:	bd09383a 	mul	r4,r23,r20
    e1e4:	28ffffcc 	andi	r3,r5,65535
    e1e8:	10c6b03a 	or	r3,r2,r3
    e1ec:	1900062e 	bgeu	r3,r4,e208 <__udivdi3+0x4fc>
    e1f0:	1c07883a 	add	r3,r3,r16
    e1f4:	a53fffc4 	addi	r20,r20,-1
    e1f8:	1c000336 	bltu	r3,r16,e208 <__udivdi3+0x4fc>
    e1fc:	1900022e 	bgeu	r3,r4,e208 <__udivdi3+0x4fc>
    e200:	a53fffc4 	addi	r20,r20,-1
    e204:	1c07883a 	add	r3,r3,r16
    e208:	d9400417 	ldw	r5,16(sp)
    e20c:	e5b8983a 	sll	fp,fp,r22
    e210:	1923c83a 	sub	r17,r3,r4
    e214:	2804943a 	slli	r2,r5,16
    e218:	a0a8b03a 	or	r20,r20,r2
    e21c:	dd000315 	stw	r20,12(sp)
    e220:	003ee106 	br	dda8 <__udivdi3+0x9c>
    e224:	2004943a 	slli	r2,r4,16
    e228:	e5c8983a 	sll	r4,fp,r23
    e22c:	48ffffcc 	andi	r3,r9,65535
    e230:	10c5883a 	add	r2,r2,r3
    e234:	20bfc22e 	bgeu	r4,r2,e140 <__udivdi3+0x434>
    e238:	40bfffc4 	addi	r2,r8,-1
    e23c:	0009883a 	mov	r4,zero
    e240:	003f1306 	br	de90 <__udivdi3+0x184>
    e244:	01400204 	movi	r5,8
    e248:	2805883a 	mov	r2,r5
    e24c:	003f0306 	br	de5c <__udivdi3+0x150>
    e250:	01400604 	movi	r5,24
    e254:	2805883a 	mov	r2,r5
    e258:	003f0006 	br	de5c <__udivdi3+0x150>
    e25c:	01400204 	movi	r5,8
    e260:	2805883a 	mov	r2,r5
    e264:	003ec206 	br	dd70 <__udivdi3+0x64>
    e268:	01400604 	movi	r5,24
    e26c:	2805883a 	mov	r2,r5
    e270:	003ebf06 	br	dd70 <__udivdi3+0x64>
    e274:	01400204 	movi	r5,8
    e278:	2805883a 	mov	r2,r5
    e27c:	003f1706 	br	dedc <__udivdi3+0x1d0>
    e280:	01400604 	movi	r5,24
    e284:	2805883a 	mov	r2,r5
    e288:	003f1406 	br	dedc <__udivdi3+0x1d0>
    e28c:	89ff962e 	bgeu	r17,r7,e0e8 <__udivdi3+0x3dc>
    e290:	8d63883a 	add	r17,r17,r21
    e294:	843fffc4 	addi	r16,r16,-1
    e298:	003f9306 	br	e0e8 <__udivdi3+0x3dc>
    e29c:	147f802e 	bgeu	r2,r17,e0a0 <__udivdi3+0x394>
    e2a0:	a53fffc4 	addi	r20,r20,-1
    e2a4:	1545883a 	add	r2,r2,r21
    e2a8:	003f7d06 	br	e0a0 <__udivdi3+0x394>
    e2ac:	a53fffc4 	addi	r20,r20,-1
    e2b0:	003ede06 	br	de2c <__udivdi3+0x120>
    e2b4:	b5bfffc4 	addi	r22,r22,-1
    e2b8:	1405883a 	add	r2,r2,r16
    e2bc:	003f2806 	br	df60 <__udivdi3+0x254>
    e2c0:	a53fffc4 	addi	r20,r20,-1
    e2c4:	003f3706 	br	dfa4 <__udivdi3+0x298>
    e2c8:	147fbb2e 	bgeu	r2,r17,e1b8 <__udivdi3+0x4ac>
    e2cc:	297fffc4 	addi	r5,r5,-1
    e2d0:	1405883a 	add	r2,r2,r16
    e2d4:	d9400415 	stw	r5,16(sp)
    e2d8:	003fb706 	br	e1b8 <__udivdi3+0x4ac>
    e2dc:	b5bfffc4 	addi	r22,r22,-1
    e2e0:	1405883a 	add	r2,r2,r16
    e2e4:	003ec006 	br	dde8 <__udivdi3+0xdc>

0000e2e8 <__umoddi3>:
    e2e8:	defff104 	addi	sp,sp,-60
    e2ec:	dd800b15 	stw	r22,44(sp)
    e2f0:	dd000915 	stw	r20,36(sp)
    e2f4:	dc000515 	stw	r16,20(sp)
    e2f8:	dfc00e15 	stw	ra,56(sp)
    e2fc:	df000d15 	stw	fp,52(sp)
    e300:	ddc00c15 	stw	r23,48(sp)
    e304:	dd400a15 	stw	r21,40(sp)
    e308:	dcc00815 	stw	r19,32(sp)
    e30c:	dc800715 	stw	r18,28(sp)
    e310:	dc400615 	stw	r17,24(sp)
    e314:	3021883a 	mov	r16,r6
    e318:	202d883a 	mov	r22,r4
    e31c:	2829883a 	mov	r20,r5
    e320:	38002b1e 	bne	r7,zero,e3d0 <__umoddi3+0xe8>
    e324:	29805036 	bltu	r5,r6,e468 <__umoddi3+0x180>
    e328:	30008a26 	beq	r6,zero,e554 <__umoddi3+0x26c>
    e32c:	00bfffd4 	movui	r2,65535
    e330:	14008236 	bltu	r2,r16,e53c <__umoddi3+0x254>
    e334:	00803fc4 	movi	r2,255
    e338:	14013636 	bltu	r2,r16,e814 <__umoddi3+0x52c>
    e33c:	000b883a 	mov	r5,zero
    e340:	0005883a 	mov	r2,zero
    e344:	8084d83a 	srl	r2,r16,r2
    e348:	01000074 	movhi	r4,1
    e34c:	210dea04 	addi	r4,r4,14248
    e350:	01800804 	movi	r6,32
    e354:	1105883a 	add	r2,r2,r4
    e358:	10c00003 	ldbu	r3,0(r2)
    e35c:	28c7883a 	add	r3,r5,r3
    e360:	30efc83a 	sub	r23,r6,r3
    e364:	b800941e 	bne	r23,zero,e5b8 <__umoddi3+0x2d0>
    e368:	802ad43a 	srli	r21,r16,16
    e36c:	a423c83a 	sub	r17,r20,r16
    e370:	0039883a 	mov	fp,zero
    e374:	853fffcc 	andi	r20,r16,65535
    e378:	8809883a 	mov	r4,r17
    e37c:	a80b883a 	mov	r5,r21
    e380:	00013240 	call	1324 <__udivsi3>
    e384:	8809883a 	mov	r4,r17
    e388:	a80b883a 	mov	r5,r21
    e38c:	a0a3383a 	mul	r17,r20,r2
    e390:	000132c0 	call	132c <__umodsi3>
    e394:	1004943a 	slli	r2,r2,16
    e398:	b006d43a 	srli	r3,r22,16
    e39c:	10c4b03a 	or	r2,r2,r3
    e3a0:	1440032e 	bgeu	r2,r17,e3b0 <__umoddi3+0xc8>
    e3a4:	1405883a 	add	r2,r2,r16
    e3a8:	14000136 	bltu	r2,r16,e3b0 <__umoddi3+0xc8>
    e3ac:	14413536 	bltu	r2,r17,e884 <__umoddi3+0x59c>
    e3b0:	1463c83a 	sub	r17,r2,r17
    e3b4:	8809883a 	mov	r4,r17
    e3b8:	a80b883a 	mov	r5,r21
    e3bc:	00013240 	call	1324 <__udivsi3>
    e3c0:	8809883a 	mov	r4,r17
    e3c4:	a0a3383a 	mul	r17,r20,r2
    e3c8:	a80b883a 	mov	r5,r21
    e3cc:	00004d06 	br	e504 <__umoddi3+0x21c>
    e3d0:	380d883a 	mov	r6,r7
    e3d4:	29c0102e 	bgeu	r5,r7,e418 <__umoddi3+0x130>
    e3d8:	2011883a 	mov	r8,r4
    e3dc:	2813883a 	mov	r9,r5
    e3e0:	4005883a 	mov	r2,r8
    e3e4:	4807883a 	mov	r3,r9
    e3e8:	dfc00e17 	ldw	ra,56(sp)
    e3ec:	df000d17 	ldw	fp,52(sp)
    e3f0:	ddc00c17 	ldw	r23,48(sp)
    e3f4:	dd800b17 	ldw	r22,44(sp)
    e3f8:	dd400a17 	ldw	r21,40(sp)
    e3fc:	dd000917 	ldw	r20,36(sp)
    e400:	dcc00817 	ldw	r19,32(sp)
    e404:	dc800717 	ldw	r18,28(sp)
    e408:	dc400617 	ldw	r17,24(sp)
    e40c:	dc000517 	ldw	r16,20(sp)
    e410:	dec00f04 	addi	sp,sp,60
    e414:	f800283a 	ret
    e418:	00bfffd4 	movui	r2,65535
    e41c:	11c05a36 	bltu	r2,r7,e588 <__umoddi3+0x2a0>
    e420:	00803fc4 	movi	r2,255
    e424:	11c0fe36 	bltu	r2,r7,e820 <__umoddi3+0x538>
    e428:	000b883a 	mov	r5,zero
    e42c:	0005883a 	mov	r2,zero
    e430:	3084d83a 	srl	r2,r6,r2
    e434:	01000074 	movhi	r4,1
    e438:	210dea04 	addi	r4,r4,14248
    e43c:	01c00804 	movi	r7,32
    e440:	1105883a 	add	r2,r2,r4
    e444:	10c00003 	ldbu	r3,0(r2)
    e448:	28c7883a 	add	r3,r5,r3
    e44c:	38ebc83a 	sub	r21,r7,r3
    e450:	a800851e 	bne	r21,zero,e668 <__umoddi3+0x380>
    e454:	35005236 	bltu	r6,r20,e5a0 <__umoddi3+0x2b8>
    e458:	b400512e 	bgeu	r22,r16,e5a0 <__umoddi3+0x2b8>
    e45c:	b011883a 	mov	r8,r22
    e460:	a013883a 	mov	r9,r20
    e464:	003fde06 	br	e3e0 <__umoddi3+0xf8>
    e468:	00bfffd4 	movui	r2,65535
    e46c:	11804036 	bltu	r2,r6,e570 <__umoddi3+0x288>
    e470:	00803fc4 	movi	r2,255
    e474:	1180ed36 	bltu	r2,r6,e82c <__umoddi3+0x544>
    e478:	000b883a 	mov	r5,zero
    e47c:	0005883a 	mov	r2,zero
    e480:	8084d83a 	srl	r2,r16,r2
    e484:	01000074 	movhi	r4,1
    e488:	210dea04 	addi	r4,r4,14248
    e48c:	01800804 	movi	r6,32
    e490:	1105883a 	add	r2,r2,r4
    e494:	10c00003 	ldbu	r3,0(r2)
    e498:	28c7883a 	add	r3,r5,r3
    e49c:	30c7c83a 	sub	r3,r6,r3
    e4a0:	1800bf1e 	bne	r3,zero,e7a0 <__umoddi3+0x4b8>
    e4a4:	0039883a 	mov	fp,zero
    e4a8:	802ad43a 	srli	r21,r16,16
    e4ac:	a009883a 	mov	r4,r20
    e4b0:	85ffffcc 	andi	r23,r16,65535
    e4b4:	a80b883a 	mov	r5,r21
    e4b8:	00013240 	call	1324 <__udivsi3>
    e4bc:	a009883a 	mov	r4,r20
    e4c0:	a80b883a 	mov	r5,r21
    e4c4:	b8a3383a 	mul	r17,r23,r2
    e4c8:	000132c0 	call	132c <__umodsi3>
    e4cc:	1004943a 	slli	r2,r2,16
    e4d0:	b006d43a 	srli	r3,r22,16
    e4d4:	10c4b03a 	or	r2,r2,r3
    e4d8:	1440032e 	bgeu	r2,r17,e4e8 <__umoddi3+0x200>
    e4dc:	1405883a 	add	r2,r2,r16
    e4e0:	14000136 	bltu	r2,r16,e4e8 <__umoddi3+0x200>
    e4e4:	1440e536 	bltu	r2,r17,e87c <__umoddi3+0x594>
    e4e8:	1463c83a 	sub	r17,r2,r17
    e4ec:	8809883a 	mov	r4,r17
    e4f0:	a80b883a 	mov	r5,r21
    e4f4:	00013240 	call	1324 <__udivsi3>
    e4f8:	8809883a 	mov	r4,r17
    e4fc:	b8a3383a 	mul	r17,r23,r2
    e500:	a80b883a 	mov	r5,r21
    e504:	000132c0 	call	132c <__umodsi3>
    e508:	1004943a 	slli	r2,r2,16
    e50c:	b0ffffcc 	andi	r3,r22,65535
    e510:	10c4b03a 	or	r2,r2,r3
    e514:	1440042e 	bgeu	r2,r17,e528 <__umoddi3+0x240>
    e518:	1405883a 	add	r2,r2,r16
    e51c:	14000236 	bltu	r2,r16,e528 <__umoddi3+0x240>
    e520:	1440012e 	bgeu	r2,r17,e528 <__umoddi3+0x240>
    e524:	1405883a 	add	r2,r2,r16
    e528:	1445c83a 	sub	r2,r2,r17
    e52c:	1724d83a 	srl	r18,r2,fp
    e530:	0013883a 	mov	r9,zero
    e534:	9011883a 	mov	r8,r18
    e538:	003fa906 	br	e3e0 <__umoddi3+0xf8>
    e53c:	00804034 	movhi	r2,256
    e540:	10bfffc4 	addi	r2,r2,-1
    e544:	1400b036 	bltu	r2,r16,e808 <__umoddi3+0x520>
    e548:	01400404 	movi	r5,16
    e54c:	2805883a 	mov	r2,r5
    e550:	003f7c06 	br	e344 <__umoddi3+0x5c>
    e554:	01000044 	movi	r4,1
    e558:	000b883a 	mov	r5,zero
    e55c:	00013240 	call	1324 <__udivsi3>
    e560:	1021883a 	mov	r16,r2
    e564:	00bfffd4 	movui	r2,65535
    e568:	143ff436 	bltu	r2,r16,e53c <__umoddi3+0x254>
    e56c:	003f7106 	br	e334 <__umoddi3+0x4c>
    e570:	00804034 	movhi	r2,256
    e574:	10bfffc4 	addi	r2,r2,-1
    e578:	1180af36 	bltu	r2,r6,e838 <__umoddi3+0x550>
    e57c:	01400404 	movi	r5,16
    e580:	2805883a 	mov	r2,r5
    e584:	003fbe06 	br	e480 <__umoddi3+0x198>
    e588:	00804034 	movhi	r2,256
    e58c:	10bfffc4 	addi	r2,r2,-1
    e590:	11c0ac36 	bltu	r2,r7,e844 <__umoddi3+0x55c>
    e594:	01400404 	movi	r5,16
    e598:	2805883a 	mov	r2,r5
    e59c:	003fa406 	br	e430 <__umoddi3+0x148>
    e5a0:	b409c83a 	sub	r4,r22,r16
    e5a4:	b105803a 	cmpltu	r2,r22,r4
    e5a8:	a187c83a 	sub	r3,r20,r6
    e5ac:	18a9c83a 	sub	r20,r3,r2
    e5b0:	202d883a 	mov	r22,r4
    e5b4:	003fa906 	br	e45c <__umoddi3+0x174>
    e5b8:	85e0983a 	sll	r16,r16,r23
    e5bc:	35c5c83a 	sub	r2,r6,r23
    e5c0:	a0a2d83a 	srl	r17,r20,r2
    e5c4:	802ad43a 	srli	r21,r16,16
    e5c8:	b084d83a 	srl	r2,r22,r2
    e5cc:	a5c6983a 	sll	r3,r20,r23
    e5d0:	8809883a 	mov	r4,r17
    e5d4:	a80b883a 	mov	r5,r21
    e5d8:	1886b03a 	or	r3,r3,r2
    e5dc:	d8c00115 	stw	r3,4(sp)
    e5e0:	853fffcc 	andi	r20,r16,65535
    e5e4:	00013240 	call	1324 <__udivsi3>
    e5e8:	8809883a 	mov	r4,r17
    e5ec:	a80b883a 	mov	r5,r21
    e5f0:	a0a3383a 	mul	r17,r20,r2
    e5f4:	000132c0 	call	132c <__umodsi3>
    e5f8:	d9000117 	ldw	r4,4(sp)
    e5fc:	1004943a 	slli	r2,r2,16
    e600:	b839883a 	mov	fp,r23
    e604:	2006d43a 	srli	r3,r4,16
    e608:	10c4b03a 	or	r2,r2,r3
    e60c:	1440022e 	bgeu	r2,r17,e618 <__umoddi3+0x330>
    e610:	1405883a 	add	r2,r2,r16
    e614:	1400962e 	bgeu	r2,r16,e870 <__umoddi3+0x588>
    e618:	1463c83a 	sub	r17,r2,r17
    e61c:	8809883a 	mov	r4,r17
    e620:	a80b883a 	mov	r5,r21
    e624:	00013240 	call	1324 <__udivsi3>
    e628:	8809883a 	mov	r4,r17
    e62c:	a80b883a 	mov	r5,r21
    e630:	a0a3383a 	mul	r17,r20,r2
    e634:	000132c0 	call	132c <__umodsi3>
    e638:	d9400117 	ldw	r5,4(sp)
    e63c:	1004943a 	slli	r2,r2,16
    e640:	28ffffcc 	andi	r3,r5,65535
    e644:	10c4b03a 	or	r2,r2,r3
    e648:	1440042e 	bgeu	r2,r17,e65c <__umoddi3+0x374>
    e64c:	1405883a 	add	r2,r2,r16
    e650:	14000236 	bltu	r2,r16,e65c <__umoddi3+0x374>
    e654:	1440012e 	bgeu	r2,r17,e65c <__umoddi3+0x374>
    e658:	1405883a 	add	r2,r2,r16
    e65c:	b5ec983a 	sll	r22,r22,r23
    e660:	1463c83a 	sub	r17,r2,r17
    e664:	003f4406 	br	e378 <__umoddi3+0x90>
    e668:	3d4fc83a 	sub	r7,r7,r21
    e66c:	3546983a 	sll	r3,r6,r21
    e670:	81c4d83a 	srl	r2,r16,r7
    e674:	a1e2d83a 	srl	r17,r20,r7
    e678:	a54c983a 	sll	r6,r20,r21
    e67c:	18aeb03a 	or	r23,r3,r2
    e680:	b828d43a 	srli	r20,r23,16
    e684:	b1c4d83a 	srl	r2,r22,r7
    e688:	8809883a 	mov	r4,r17
    e68c:	a00b883a 	mov	r5,r20
    e690:	308cb03a 	or	r6,r6,r2
    e694:	d9c00315 	stw	r7,12(sp)
    e698:	d9800215 	stw	r6,8(sp)
    e69c:	00013240 	call	1324 <__udivsi3>
    e6a0:	8809883a 	mov	r4,r17
    e6a4:	a00b883a 	mov	r5,r20
    e6a8:	1039883a 	mov	fp,r2
    e6ac:	000132c0 	call	132c <__umodsi3>
    e6b0:	b8ffffcc 	andi	r3,r23,65535
    e6b4:	d8c00415 	stw	r3,16(sp)
    e6b8:	d9000217 	ldw	r4,8(sp)
    e6bc:	d9400417 	ldw	r5,16(sp)
    e6c0:	1004943a 	slli	r2,r2,16
    e6c4:	2006d43a 	srli	r3,r4,16
    e6c8:	8560983a 	sll	r16,r16,r21
    e6cc:	2f23383a 	mul	r17,r5,fp
    e6d0:	10c4b03a 	or	r2,r2,r3
    e6d4:	dc000015 	stw	r16,0(sp)
    e6d8:	b56c983a 	sll	r22,r22,r21
    e6dc:	1440032e 	bgeu	r2,r17,e6ec <__umoddi3+0x404>
    e6e0:	15c5883a 	add	r2,r2,r23
    e6e4:	e73fffc4 	addi	fp,fp,-1
    e6e8:	15c05d2e 	bgeu	r2,r23,e860 <__umoddi3+0x578>
    e6ec:	1463c83a 	sub	r17,r2,r17
    e6f0:	8809883a 	mov	r4,r17
    e6f4:	a00b883a 	mov	r5,r20
    e6f8:	00013240 	call	1324 <__udivsi3>
    e6fc:	8809883a 	mov	r4,r17
    e700:	a00b883a 	mov	r5,r20
    e704:	1021883a 	mov	r16,r2
    e708:	000132c0 	call	132c <__umodsi3>
    e70c:	d8c00417 	ldw	r3,16(sp)
    e710:	d9000217 	ldw	r4,8(sp)
    e714:	1004943a 	slli	r2,r2,16
    e718:	1c23383a 	mul	r17,r3,r16
    e71c:	20ffffcc 	andi	r3,r4,65535
    e720:	10ceb03a 	or	r7,r2,r3
    e724:	3c40032e 	bgeu	r7,r17,e734 <__umoddi3+0x44c>
    e728:	3dcf883a 	add	r7,r7,r23
    e72c:	843fffc4 	addi	r16,r16,-1
    e730:	3dc0472e 	bgeu	r7,r23,e850 <__umoddi3+0x568>
    e734:	e004943a 	slli	r2,fp,16
    e738:	d9400017 	ldw	r5,0(sp)
    e73c:	3c4fc83a 	sub	r7,r7,r17
    e740:	8084b03a 	or	r2,r16,r2
    e744:	28ffffcc 	andi	r3,r5,65535
    e748:	280cd43a 	srli	r6,r5,16
    e74c:	100ad43a 	srli	r5,r2,16
    e750:	10bfffcc 	andi	r2,r2,65535
    e754:	10d1383a 	mul	r8,r2,r3
    e758:	28c7383a 	mul	r3,r5,r3
    e75c:	1185383a 	mul	r2,r2,r6
    e760:	4008d43a 	srli	r4,r8,16
    e764:	298b383a 	mul	r5,r5,r6
    e768:	10c5883a 	add	r2,r2,r3
    e76c:	2089883a 	add	r4,r4,r2
    e770:	20c0022e 	bgeu	r4,r3,e77c <__umoddi3+0x494>
    e774:	00800074 	movhi	r2,1
    e778:	288b883a 	add	r5,r5,r2
    e77c:	2004d43a 	srli	r2,r4,16
    e780:	2008943a 	slli	r4,r4,16
    e784:	40ffffcc 	andi	r3,r8,65535
    e788:	288b883a 	add	r5,r5,r2
    e78c:	20c9883a 	add	r4,r4,r3
    e790:	39400b36 	bltu	r7,r5,e7c0 <__umoddi3+0x4d8>
    e794:	39403d26 	beq	r7,r5,e88c <__umoddi3+0x5a4>
    e798:	394bc83a 	sub	r5,r7,r5
    e79c:	00000f06 	br	e7dc <__umoddi3+0x4f4>
    e7a0:	30c5c83a 	sub	r2,r6,r3
    e7a4:	1839883a 	mov	fp,r3
    e7a8:	b084d83a 	srl	r2,r22,r2
    e7ac:	a0c6983a 	sll	r3,r20,r3
    e7b0:	8720983a 	sll	r16,r16,fp
    e7b4:	b72c983a 	sll	r22,r22,fp
    e7b8:	18a8b03a 	or	r20,r3,r2
    e7bc:	003f3a06 	br	e4a8 <__umoddi3+0x1c0>
    e7c0:	d8c00017 	ldw	r3,0(sp)
    e7c4:	20c5c83a 	sub	r2,r4,r3
    e7c8:	2089803a 	cmpltu	r4,r4,r2
    e7cc:	2dc7c83a 	sub	r3,r5,r23
    e7d0:	1907c83a 	sub	r3,r3,r4
    e7d4:	38cbc83a 	sub	r5,r7,r3
    e7d8:	1009883a 	mov	r4,r2
    e7dc:	b105c83a 	sub	r2,r22,r4
    e7e0:	b087803a 	cmpltu	r3,r22,r2
    e7e4:	28c7c83a 	sub	r3,r5,r3
    e7e8:	d9400317 	ldw	r5,12(sp)
    e7ec:	1544d83a 	srl	r2,r2,r21
    e7f0:	1948983a 	sll	r4,r3,r5
    e7f4:	1d46d83a 	srl	r3,r3,r21
    e7f8:	20a4b03a 	or	r18,r4,r2
    e7fc:	9011883a 	mov	r8,r18
    e800:	1813883a 	mov	r9,r3
    e804:	003ef606 	br	e3e0 <__umoddi3+0xf8>
    e808:	01400604 	movi	r5,24
    e80c:	2805883a 	mov	r2,r5
    e810:	003ecc06 	br	e344 <__umoddi3+0x5c>
    e814:	01400204 	movi	r5,8
    e818:	2805883a 	mov	r2,r5
    e81c:	003ec906 	br	e344 <__umoddi3+0x5c>
    e820:	01400204 	movi	r5,8
    e824:	2805883a 	mov	r2,r5
    e828:	003f0106 	br	e430 <__umoddi3+0x148>
    e82c:	01400204 	movi	r5,8
    e830:	2805883a 	mov	r2,r5
    e834:	003f1206 	br	e480 <__umoddi3+0x198>
    e838:	01400604 	movi	r5,24
    e83c:	2805883a 	mov	r2,r5
    e840:	003f0f06 	br	e480 <__umoddi3+0x198>
    e844:	01400604 	movi	r5,24
    e848:	2805883a 	mov	r2,r5
    e84c:	003ef806 	br	e430 <__umoddi3+0x148>
    e850:	3c7fb82e 	bgeu	r7,r17,e734 <__umoddi3+0x44c>
    e854:	843fffc4 	addi	r16,r16,-1
    e858:	3dcf883a 	add	r7,r7,r23
    e85c:	003fb506 	br	e734 <__umoddi3+0x44c>
    e860:	147fa22e 	bgeu	r2,r17,e6ec <__umoddi3+0x404>
    e864:	e73fffc4 	addi	fp,fp,-1
    e868:	15c5883a 	add	r2,r2,r23
    e86c:	003f9f06 	br	e6ec <__umoddi3+0x404>
    e870:	147f692e 	bgeu	r2,r17,e618 <__umoddi3+0x330>
    e874:	1405883a 	add	r2,r2,r16
    e878:	003f6706 	br	e618 <__umoddi3+0x330>
    e87c:	1405883a 	add	r2,r2,r16
    e880:	003f1906 	br	e4e8 <__umoddi3+0x200>
    e884:	1405883a 	add	r2,r2,r16
    e888:	003ec906 	br	e3b0 <__umoddi3+0xc8>
    e88c:	b13fcc36 	bltu	r22,r4,e7c0 <__umoddi3+0x4d8>
    e890:	000b883a 	mov	r5,zero
    e894:	003fd106 	br	e7dc <__umoddi3+0x4f4>

0000e898 <__nesf2>:
    e898:	defff304 	addi	sp,sp,-52
    e89c:	dc400b15 	stw	r17,44(sp)
    e8a0:	dc400204 	addi	r17,sp,8
    e8a4:	dc000a15 	stw	r16,40(sp)
    e8a8:	d9000015 	stw	r4,0(sp)
    e8ac:	d9400115 	stw	r5,4(sp)
    e8b0:	d809883a 	mov	r4,sp
    e8b4:	880b883a 	mov	r5,r17
    e8b8:	dc000604 	addi	r16,sp,24
    e8bc:	dfc00c15 	stw	ra,48(sp)
    e8c0:	000fca80 	call	fca8 <__unpack_f>
    e8c4:	d9000104 	addi	r4,sp,4
    e8c8:	800b883a 	mov	r5,r16
    e8cc:	000fca80 	call	fca8 <__unpack_f>
    e8d0:	d8800217 	ldw	r2,8(sp)
    e8d4:	00c00044 	movi	r3,1
    e8d8:	180d883a 	mov	r6,r3
    e8dc:	1880062e 	bgeu	r3,r2,e8f8 <__nesf2+0x60>
    e8e0:	d8800617 	ldw	r2,24(sp)
    e8e4:	8809883a 	mov	r4,r17
    e8e8:	800b883a 	mov	r5,r16
    e8ec:	1880022e 	bgeu	r3,r2,e8f8 <__nesf2+0x60>
    e8f0:	000fd700 	call	fd70 <__fpcmp_parts_f>
    e8f4:	100d883a 	mov	r6,r2
    e8f8:	3005883a 	mov	r2,r6
    e8fc:	dfc00c17 	ldw	ra,48(sp)
    e900:	dc400b17 	ldw	r17,44(sp)
    e904:	dc000a17 	ldw	r16,40(sp)
    e908:	dec00d04 	addi	sp,sp,52
    e90c:	f800283a 	ret

0000e910 <__gtsf2>:
    e910:	defff304 	addi	sp,sp,-52
    e914:	dc400b15 	stw	r17,44(sp)
    e918:	dc400204 	addi	r17,sp,8
    e91c:	dc000a15 	stw	r16,40(sp)
    e920:	d9000015 	stw	r4,0(sp)
    e924:	d9400115 	stw	r5,4(sp)
    e928:	d809883a 	mov	r4,sp
    e92c:	880b883a 	mov	r5,r17
    e930:	dc000604 	addi	r16,sp,24
    e934:	dfc00c15 	stw	ra,48(sp)
    e938:	000fca80 	call	fca8 <__unpack_f>
    e93c:	d9000104 	addi	r4,sp,4
    e940:	800b883a 	mov	r5,r16
    e944:	000fca80 	call	fca8 <__unpack_f>
    e948:	d8800217 	ldw	r2,8(sp)
    e94c:	00c00044 	movi	r3,1
    e950:	01bfffc4 	movi	r6,-1
    e954:	1880062e 	bgeu	r3,r2,e970 <__gtsf2+0x60>
    e958:	d8800617 	ldw	r2,24(sp)
    e95c:	8809883a 	mov	r4,r17
    e960:	800b883a 	mov	r5,r16
    e964:	1880022e 	bgeu	r3,r2,e970 <__gtsf2+0x60>
    e968:	000fd700 	call	fd70 <__fpcmp_parts_f>
    e96c:	100d883a 	mov	r6,r2
    e970:	3005883a 	mov	r2,r6
    e974:	dfc00c17 	ldw	ra,48(sp)
    e978:	dc400b17 	ldw	r17,44(sp)
    e97c:	dc000a17 	ldw	r16,40(sp)
    e980:	dec00d04 	addi	sp,sp,52
    e984:	f800283a 	ret

0000e988 <__ltsf2>:
    e988:	defff304 	addi	sp,sp,-52
    e98c:	dc400b15 	stw	r17,44(sp)
    e990:	dc400204 	addi	r17,sp,8
    e994:	dc000a15 	stw	r16,40(sp)
    e998:	d9000015 	stw	r4,0(sp)
    e99c:	d9400115 	stw	r5,4(sp)
    e9a0:	d809883a 	mov	r4,sp
    e9a4:	880b883a 	mov	r5,r17
    e9a8:	dc000604 	addi	r16,sp,24
    e9ac:	dfc00c15 	stw	ra,48(sp)
    e9b0:	000fca80 	call	fca8 <__unpack_f>
    e9b4:	d9000104 	addi	r4,sp,4
    e9b8:	800b883a 	mov	r5,r16
    e9bc:	000fca80 	call	fca8 <__unpack_f>
    e9c0:	d8800217 	ldw	r2,8(sp)
    e9c4:	00c00044 	movi	r3,1
    e9c8:	180d883a 	mov	r6,r3
    e9cc:	1880062e 	bgeu	r3,r2,e9e8 <__ltsf2+0x60>
    e9d0:	d8800617 	ldw	r2,24(sp)
    e9d4:	8809883a 	mov	r4,r17
    e9d8:	800b883a 	mov	r5,r16
    e9dc:	1880022e 	bgeu	r3,r2,e9e8 <__ltsf2+0x60>
    e9e0:	000fd700 	call	fd70 <__fpcmp_parts_f>
    e9e4:	100d883a 	mov	r6,r2
    e9e8:	3005883a 	mov	r2,r6
    e9ec:	dfc00c17 	ldw	ra,48(sp)
    e9f0:	dc400b17 	ldw	r17,44(sp)
    e9f4:	dc000a17 	ldw	r16,40(sp)
    e9f8:	dec00d04 	addi	sp,sp,52
    e9fc:	f800283a 	ret

0000ea00 <_fpadd_parts>:
    ea00:	defff804 	addi	sp,sp,-32
    ea04:	dcc00315 	stw	r19,12(sp)
    ea08:	2027883a 	mov	r19,r4
    ea0c:	21000017 	ldw	r4,0(r4)
    ea10:	00c00044 	movi	r3,1
    ea14:	dd400515 	stw	r21,20(sp)
    ea18:	dd000415 	stw	r20,16(sp)
    ea1c:	ddc00715 	stw	r23,28(sp)
    ea20:	dd800615 	stw	r22,24(sp)
    ea24:	dc800215 	stw	r18,8(sp)
    ea28:	dc400115 	stw	r17,4(sp)
    ea2c:	dc000015 	stw	r16,0(sp)
    ea30:	282b883a 	mov	r21,r5
    ea34:	3029883a 	mov	r20,r6
    ea38:	1900632e 	bgeu	r3,r4,ebc8 <_fpadd_parts+0x1c8>
    ea3c:	28800017 	ldw	r2,0(r5)
    ea40:	1880812e 	bgeu	r3,r2,ec48 <_fpadd_parts+0x248>
    ea44:	00c00104 	movi	r3,4
    ea48:	20c0dc26 	beq	r4,r3,edbc <_fpadd_parts+0x3bc>
    ea4c:	10c07e26 	beq	r2,r3,ec48 <_fpadd_parts+0x248>
    ea50:	00c00084 	movi	r3,2
    ea54:	10c06726 	beq	r2,r3,ebf4 <_fpadd_parts+0x1f4>
    ea58:	20c07b26 	beq	r4,r3,ec48 <_fpadd_parts+0x248>
    ea5c:	9dc00217 	ldw	r23,8(r19)
    ea60:	28c00217 	ldw	r3,8(r5)
    ea64:	9c400317 	ldw	r17,12(r19)
    ea68:	2bc00317 	ldw	r15,12(r5)
    ea6c:	b8cdc83a 	sub	r6,r23,r3
    ea70:	9c800417 	ldw	r18,16(r19)
    ea74:	2c000417 	ldw	r16,16(r5)
    ea78:	3009883a 	mov	r4,r6
    ea7c:	30009716 	blt	r6,zero,ecdc <_fpadd_parts+0x2dc>
    ea80:	00800fc4 	movi	r2,63
    ea84:	11806b16 	blt	r2,r6,ec34 <_fpadd_parts+0x234>
    ea88:	0100a40e 	bge	zero,r4,ed1c <_fpadd_parts+0x31c>
    ea8c:	35bff804 	addi	r22,r6,-32
    ea90:	b000bc16 	blt	r22,zero,ed84 <_fpadd_parts+0x384>
    ea94:	8596d83a 	srl	r11,r16,r22
    ea98:	0019883a 	mov	r12,zero
    ea9c:	0013883a 	mov	r9,zero
    eaa0:	01000044 	movi	r4,1
    eaa4:	0015883a 	mov	r10,zero
    eaa8:	b000be16 	blt	r22,zero,eda4 <_fpadd_parts+0x3a4>
    eaac:	2590983a 	sll	r8,r4,r22
    eab0:	000f883a 	mov	r7,zero
    eab4:	00bfffc4 	movi	r2,-1
    eab8:	3889883a 	add	r4,r7,r2
    eabc:	408b883a 	add	r5,r8,r2
    eac0:	21cd803a 	cmpltu	r6,r4,r7
    eac4:	314b883a 	add	r5,r6,r5
    eac8:	7904703a 	and	r2,r15,r4
    eacc:	8146703a 	and	r3,r16,r5
    ead0:	10c4b03a 	or	r2,r2,r3
    ead4:	10000226 	beq	r2,zero,eae0 <_fpadd_parts+0xe0>
    ead8:	02400044 	movi	r9,1
    eadc:	0015883a 	mov	r10,zero
    eae0:	5a5eb03a 	or	r15,r11,r9
    eae4:	62a0b03a 	or	r16,r12,r10
    eae8:	99400117 	ldw	r5,4(r19)
    eaec:	a8800117 	ldw	r2,4(r21)
    eaf0:	28806e26 	beq	r5,r2,ecac <_fpadd_parts+0x2ac>
    eaf4:	28006626 	beq	r5,zero,ec90 <_fpadd_parts+0x290>
    eaf8:	7c45c83a 	sub	r2,r15,r17
    eafc:	7889803a 	cmpltu	r4,r15,r2
    eb00:	8487c83a 	sub	r3,r16,r18
    eb04:	1909c83a 	sub	r4,r3,r4
    eb08:	100d883a 	mov	r6,r2
    eb0c:	200f883a 	mov	r7,r4
    eb10:	38007716 	blt	r7,zero,ecf0 <_fpadd_parts+0x2f0>
    eb14:	a5c00215 	stw	r23,8(r20)
    eb18:	a1c00415 	stw	r7,16(r20)
    eb1c:	a0000115 	stw	zero,4(r20)
    eb20:	a1800315 	stw	r6,12(r20)
    eb24:	a2000317 	ldw	r8,12(r20)
    eb28:	a2400417 	ldw	r9,16(r20)
    eb2c:	00bfffc4 	movi	r2,-1
    eb30:	408b883a 	add	r5,r8,r2
    eb34:	2a09803a 	cmpltu	r4,r5,r8
    eb38:	488d883a 	add	r6,r9,r2
    eb3c:	01c40034 	movhi	r7,4096
    eb40:	39ffffc4 	addi	r7,r7,-1
    eb44:	218d883a 	add	r6,r4,r6
    eb48:	39801736 	bltu	r7,r6,eba8 <_fpadd_parts+0x1a8>
    eb4c:	31c06526 	beq	r6,r7,ece4 <_fpadd_parts+0x2e4>
    eb50:	a3000217 	ldw	r12,8(r20)
    eb54:	4209883a 	add	r4,r8,r8
    eb58:	00bfffc4 	movi	r2,-1
    eb5c:	220f803a 	cmpltu	r7,r4,r8
    eb60:	4a4b883a 	add	r5,r9,r9
    eb64:	394f883a 	add	r7,r7,r5
    eb68:	2095883a 	add	r10,r4,r2
    eb6c:	3897883a 	add	r11,r7,r2
    eb70:	510d803a 	cmpltu	r6,r10,r4
    eb74:	6099883a 	add	r12,r12,r2
    eb78:	32d7883a 	add	r11,r6,r11
    eb7c:	00840034 	movhi	r2,4096
    eb80:	10bfffc4 	addi	r2,r2,-1
    eb84:	2011883a 	mov	r8,r4
    eb88:	3813883a 	mov	r9,r7
    eb8c:	a1000315 	stw	r4,12(r20)
    eb90:	a1c00415 	stw	r7,16(r20)
    eb94:	a3000215 	stw	r12,8(r20)
    eb98:	12c00336 	bltu	r2,r11,eba8 <_fpadd_parts+0x1a8>
    eb9c:	58bfed1e 	bne	r11,r2,eb54 <_fpadd_parts+0x154>
    eba0:	00bfff84 	movi	r2,-2
    eba4:	12bfeb2e 	bgeu	r2,r10,eb54 <_fpadd_parts+0x154>
    eba8:	a2800417 	ldw	r10,16(r20)
    ebac:	008000c4 	movi	r2,3
    ebb0:	00c80034 	movhi	r3,8192
    ebb4:	18ffffc4 	addi	r3,r3,-1
    ebb8:	a2400317 	ldw	r9,12(r20)
    ebbc:	a0800015 	stw	r2,0(r20)
    ebc0:	1a802336 	bltu	r3,r10,ec50 <_fpadd_parts+0x250>
    ebc4:	a027883a 	mov	r19,r20
    ebc8:	9805883a 	mov	r2,r19
    ebcc:	ddc00717 	ldw	r23,28(sp)
    ebd0:	dd800617 	ldw	r22,24(sp)
    ebd4:	dd400517 	ldw	r21,20(sp)
    ebd8:	dd000417 	ldw	r20,16(sp)
    ebdc:	dcc00317 	ldw	r19,12(sp)
    ebe0:	dc800217 	ldw	r18,8(sp)
    ebe4:	dc400117 	ldw	r17,4(sp)
    ebe8:	dc000017 	ldw	r16,0(sp)
    ebec:	dec00804 	addi	sp,sp,32
    ebf0:	f800283a 	ret
    ebf4:	20fff41e 	bne	r4,r3,ebc8 <_fpadd_parts+0x1c8>
    ebf8:	31000015 	stw	r4,0(r6)
    ebfc:	98800117 	ldw	r2,4(r19)
    ec00:	30800115 	stw	r2,4(r6)
    ec04:	98c00217 	ldw	r3,8(r19)
    ec08:	30c00215 	stw	r3,8(r6)
    ec0c:	98800317 	ldw	r2,12(r19)
    ec10:	30800315 	stw	r2,12(r6)
    ec14:	98c00417 	ldw	r3,16(r19)
    ec18:	30c00415 	stw	r3,16(r6)
    ec1c:	98800117 	ldw	r2,4(r19)
    ec20:	28c00117 	ldw	r3,4(r5)
    ec24:	3027883a 	mov	r19,r6
    ec28:	10c4703a 	and	r2,r2,r3
    ec2c:	30800115 	stw	r2,4(r6)
    ec30:	003fe506 	br	ebc8 <_fpadd_parts+0x1c8>
    ec34:	1dc02616 	blt	r3,r23,ecd0 <_fpadd_parts+0x2d0>
    ec38:	0023883a 	mov	r17,zero
    ec3c:	182f883a 	mov	r23,r3
    ec40:	0025883a 	mov	r18,zero
    ec44:	003fa806 	br	eae8 <_fpadd_parts+0xe8>
    ec48:	a827883a 	mov	r19,r21
    ec4c:	003fde06 	br	ebc8 <_fpadd_parts+0x1c8>
    ec50:	01800044 	movi	r6,1
    ec54:	500497fa 	slli	r2,r10,31
    ec58:	4808d07a 	srli	r4,r9,1
    ec5c:	518ad83a 	srl	r5,r10,r6
    ec60:	a2000217 	ldw	r8,8(r20)
    ec64:	1108b03a 	or	r4,r2,r4
    ec68:	0007883a 	mov	r3,zero
    ec6c:	4984703a 	and	r2,r9,r6
    ec70:	208cb03a 	or	r6,r4,r2
    ec74:	28ceb03a 	or	r7,r5,r3
    ec78:	42000044 	addi	r8,r8,1
    ec7c:	a027883a 	mov	r19,r20
    ec80:	a1c00415 	stw	r7,16(r20)
    ec84:	a2000215 	stw	r8,8(r20)
    ec88:	a1800315 	stw	r6,12(r20)
    ec8c:	003fce06 	br	ebc8 <_fpadd_parts+0x1c8>
    ec90:	8bc5c83a 	sub	r2,r17,r15
    ec94:	8889803a 	cmpltu	r4,r17,r2
    ec98:	9407c83a 	sub	r3,r18,r16
    ec9c:	1909c83a 	sub	r4,r3,r4
    eca0:	100d883a 	mov	r6,r2
    eca4:	200f883a 	mov	r7,r4
    eca8:	003f9906 	br	eb10 <_fpadd_parts+0x110>
    ecac:	7c45883a 	add	r2,r15,r17
    ecb0:	13c9803a 	cmpltu	r4,r2,r15
    ecb4:	8487883a 	add	r3,r16,r18
    ecb8:	20c9883a 	add	r4,r4,r3
    ecbc:	a1400115 	stw	r5,4(r20)
    ecc0:	a5c00215 	stw	r23,8(r20)
    ecc4:	a0800315 	stw	r2,12(r20)
    ecc8:	a1000415 	stw	r4,16(r20)
    eccc:	003fb606 	br	eba8 <_fpadd_parts+0x1a8>
    ecd0:	001f883a 	mov	r15,zero
    ecd4:	0021883a 	mov	r16,zero
    ecd8:	003f8306 	br	eae8 <_fpadd_parts+0xe8>
    ecdc:	018dc83a 	sub	r6,zero,r6
    ece0:	003f6706 	br	ea80 <_fpadd_parts+0x80>
    ece4:	00bfff84 	movi	r2,-2
    ece8:	117faf36 	bltu	r2,r5,eba8 <_fpadd_parts+0x1a8>
    ecec:	003f9806 	br	eb50 <_fpadd_parts+0x150>
    ecf0:	0005883a 	mov	r2,zero
    ecf4:	1189c83a 	sub	r4,r2,r6
    ecf8:	1105803a 	cmpltu	r2,r2,r4
    ecfc:	01cbc83a 	sub	r5,zero,r7
    ed00:	2885c83a 	sub	r2,r5,r2
    ed04:	01800044 	movi	r6,1
    ed08:	a1800115 	stw	r6,4(r20)
    ed0c:	a5c00215 	stw	r23,8(r20)
    ed10:	a1000315 	stw	r4,12(r20)
    ed14:	a0800415 	stw	r2,16(r20)
    ed18:	003f8206 	br	eb24 <_fpadd_parts+0x124>
    ed1c:	203f7226 	beq	r4,zero,eae8 <_fpadd_parts+0xe8>
    ed20:	35bff804 	addi	r22,r6,-32
    ed24:	b9af883a 	add	r23,r23,r6
    ed28:	b0003116 	blt	r22,zero,edf0 <_fpadd_parts+0x3f0>
    ed2c:	959ad83a 	srl	r13,r18,r22
    ed30:	001d883a 	mov	r14,zero
    ed34:	000f883a 	mov	r7,zero
    ed38:	01000044 	movi	r4,1
    ed3c:	0011883a 	mov	r8,zero
    ed40:	b0002516 	blt	r22,zero,edd8 <_fpadd_parts+0x3d8>
    ed44:	2594983a 	sll	r10,r4,r22
    ed48:	0013883a 	mov	r9,zero
    ed4c:	00bfffc4 	movi	r2,-1
    ed50:	4889883a 	add	r4,r9,r2
    ed54:	508b883a 	add	r5,r10,r2
    ed58:	224d803a 	cmpltu	r6,r4,r9
    ed5c:	314b883a 	add	r5,r6,r5
    ed60:	8904703a 	and	r2,r17,r4
    ed64:	9146703a 	and	r3,r18,r5
    ed68:	10c4b03a 	or	r2,r2,r3
    ed6c:	10000226 	beq	r2,zero,ed78 <_fpadd_parts+0x378>
    ed70:	01c00044 	movi	r7,1
    ed74:	0011883a 	mov	r8,zero
    ed78:	69e2b03a 	or	r17,r13,r7
    ed7c:	7224b03a 	or	r18,r14,r8
    ed80:	003f5906 	br	eae8 <_fpadd_parts+0xe8>
    ed84:	8407883a 	add	r3,r16,r16
    ed88:	008007c4 	movi	r2,31
    ed8c:	1185c83a 	sub	r2,r2,r6
    ed90:	1886983a 	sll	r3,r3,r2
    ed94:	7996d83a 	srl	r11,r15,r6
    ed98:	8198d83a 	srl	r12,r16,r6
    ed9c:	1ad6b03a 	or	r11,r3,r11
    eda0:	003f3e06 	br	ea9c <_fpadd_parts+0x9c>
    eda4:	2006d07a 	srli	r3,r4,1
    eda8:	008007c4 	movi	r2,31
    edac:	1185c83a 	sub	r2,r2,r6
    edb0:	1890d83a 	srl	r8,r3,r2
    edb4:	218e983a 	sll	r7,r4,r6
    edb8:	003f3e06 	br	eab4 <_fpadd_parts+0xb4>
    edbc:	113f821e 	bne	r2,r4,ebc8 <_fpadd_parts+0x1c8>
    edc0:	28c00117 	ldw	r3,4(r5)
    edc4:	98800117 	ldw	r2,4(r19)
    edc8:	10ff7f26 	beq	r2,r3,ebc8 <_fpadd_parts+0x1c8>
    edcc:	04c00074 	movhi	r19,1
    edd0:	9ccde504 	addi	r19,r19,14228
    edd4:	003f7c06 	br	ebc8 <_fpadd_parts+0x1c8>
    edd8:	2006d07a 	srli	r3,r4,1
    eddc:	008007c4 	movi	r2,31
    ede0:	1185c83a 	sub	r2,r2,r6
    ede4:	1894d83a 	srl	r10,r3,r2
    ede8:	2192983a 	sll	r9,r4,r6
    edec:	003fd706 	br	ed4c <_fpadd_parts+0x34c>
    edf0:	9487883a 	add	r3,r18,r18
    edf4:	008007c4 	movi	r2,31
    edf8:	1185c83a 	sub	r2,r2,r6
    edfc:	1886983a 	sll	r3,r3,r2
    ee00:	899ad83a 	srl	r13,r17,r6
    ee04:	919cd83a 	srl	r14,r18,r6
    ee08:	1b5ab03a 	or	r13,r3,r13
    ee0c:	003fc906 	br	ed34 <_fpadd_parts+0x334>

0000ee10 <__subdf3>:
    ee10:	deffea04 	addi	sp,sp,-88
    ee14:	dcc01415 	stw	r19,80(sp)
    ee18:	dcc00404 	addi	r19,sp,16
    ee1c:	2011883a 	mov	r8,r4
    ee20:	2813883a 	mov	r9,r5
    ee24:	dc401315 	stw	r17,76(sp)
    ee28:	d809883a 	mov	r4,sp
    ee2c:	980b883a 	mov	r5,r19
    ee30:	dc400904 	addi	r17,sp,36
    ee34:	dfc01515 	stw	ra,84(sp)
    ee38:	da400115 	stw	r9,4(sp)
    ee3c:	d9c00315 	stw	r7,12(sp)
    ee40:	da000015 	stw	r8,0(sp)
    ee44:	d9800215 	stw	r6,8(sp)
    ee48:	00101580 	call	10158 <__unpack_d>
    ee4c:	d9000204 	addi	r4,sp,8
    ee50:	880b883a 	mov	r5,r17
    ee54:	00101580 	call	10158 <__unpack_d>
    ee58:	d8800a17 	ldw	r2,40(sp)
    ee5c:	880b883a 	mov	r5,r17
    ee60:	9809883a 	mov	r4,r19
    ee64:	d9800e04 	addi	r6,sp,56
    ee68:	1080005c 	xori	r2,r2,1
    ee6c:	d8800a15 	stw	r2,40(sp)
    ee70:	000ea000 	call	ea00 <_fpadd_parts>
    ee74:	1009883a 	mov	r4,r2
    ee78:	000fe440 	call	fe44 <__pack_d>
    ee7c:	dfc01517 	ldw	ra,84(sp)
    ee80:	dcc01417 	ldw	r19,80(sp)
    ee84:	dc401317 	ldw	r17,76(sp)
    ee88:	dec01604 	addi	sp,sp,88
    ee8c:	f800283a 	ret

0000ee90 <__adddf3>:
    ee90:	deffea04 	addi	sp,sp,-88
    ee94:	dcc01415 	stw	r19,80(sp)
    ee98:	dcc00404 	addi	r19,sp,16
    ee9c:	2011883a 	mov	r8,r4
    eea0:	2813883a 	mov	r9,r5
    eea4:	dc401315 	stw	r17,76(sp)
    eea8:	d809883a 	mov	r4,sp
    eeac:	980b883a 	mov	r5,r19
    eeb0:	dc400904 	addi	r17,sp,36
    eeb4:	dfc01515 	stw	ra,84(sp)
    eeb8:	da400115 	stw	r9,4(sp)
    eebc:	d9c00315 	stw	r7,12(sp)
    eec0:	da000015 	stw	r8,0(sp)
    eec4:	d9800215 	stw	r6,8(sp)
    eec8:	00101580 	call	10158 <__unpack_d>
    eecc:	d9000204 	addi	r4,sp,8
    eed0:	880b883a 	mov	r5,r17
    eed4:	00101580 	call	10158 <__unpack_d>
    eed8:	d9800e04 	addi	r6,sp,56
    eedc:	9809883a 	mov	r4,r19
    eee0:	880b883a 	mov	r5,r17
    eee4:	000ea000 	call	ea00 <_fpadd_parts>
    eee8:	1009883a 	mov	r4,r2
    eeec:	000fe440 	call	fe44 <__pack_d>
    eef0:	dfc01517 	ldw	ra,84(sp)
    eef4:	dcc01417 	ldw	r19,80(sp)
    eef8:	dc401317 	ldw	r17,76(sp)
    eefc:	dec01604 	addi	sp,sp,88
    ef00:	f800283a 	ret

0000ef04 <__muldf3>:
    ef04:	deffe004 	addi	sp,sp,-128
    ef08:	dc401815 	stw	r17,96(sp)
    ef0c:	dc400404 	addi	r17,sp,16
    ef10:	2011883a 	mov	r8,r4
    ef14:	2813883a 	mov	r9,r5
    ef18:	dc001715 	stw	r16,92(sp)
    ef1c:	d809883a 	mov	r4,sp
    ef20:	880b883a 	mov	r5,r17
    ef24:	dc000904 	addi	r16,sp,36
    ef28:	dfc01f15 	stw	ra,124(sp)
    ef2c:	da400115 	stw	r9,4(sp)
    ef30:	d9c00315 	stw	r7,12(sp)
    ef34:	da000015 	stw	r8,0(sp)
    ef38:	d9800215 	stw	r6,8(sp)
    ef3c:	ddc01e15 	stw	r23,120(sp)
    ef40:	dd801d15 	stw	r22,116(sp)
    ef44:	dd401c15 	stw	r21,112(sp)
    ef48:	dd001b15 	stw	r20,108(sp)
    ef4c:	dcc01a15 	stw	r19,104(sp)
    ef50:	dc801915 	stw	r18,100(sp)
    ef54:	00101580 	call	10158 <__unpack_d>
    ef58:	d9000204 	addi	r4,sp,8
    ef5c:	800b883a 	mov	r5,r16
    ef60:	00101580 	call	10158 <__unpack_d>
    ef64:	d9000417 	ldw	r4,16(sp)
    ef68:	00800044 	movi	r2,1
    ef6c:	1100102e 	bgeu	r2,r4,efb0 <__muldf3+0xac>
    ef70:	d8c00917 	ldw	r3,36(sp)
    ef74:	10c0062e 	bgeu	r2,r3,ef90 <__muldf3+0x8c>
    ef78:	00800104 	movi	r2,4
    ef7c:	20800a26 	beq	r4,r2,efa8 <__muldf3+0xa4>
    ef80:	1880cc26 	beq	r3,r2,f2b4 <__muldf3+0x3b0>
    ef84:	00800084 	movi	r2,2
    ef88:	20800926 	beq	r4,r2,efb0 <__muldf3+0xac>
    ef8c:	1880191e 	bne	r3,r2,eff4 <__muldf3+0xf0>
    ef90:	d8c00a17 	ldw	r3,40(sp)
    ef94:	d8800517 	ldw	r2,20(sp)
    ef98:	8009883a 	mov	r4,r16
    ef9c:	10c4c03a 	cmpne	r2,r2,r3
    efa0:	d8800a15 	stw	r2,40(sp)
    efa4:	00000706 	br	efc4 <__muldf3+0xc0>
    efa8:	00800084 	movi	r2,2
    efac:	1880c326 	beq	r3,r2,f2bc <__muldf3+0x3b8>
    efb0:	d8800517 	ldw	r2,20(sp)
    efb4:	d8c00a17 	ldw	r3,40(sp)
    efb8:	8809883a 	mov	r4,r17
    efbc:	10c4c03a 	cmpne	r2,r2,r3
    efc0:	d8800515 	stw	r2,20(sp)
    efc4:	000fe440 	call	fe44 <__pack_d>
    efc8:	dfc01f17 	ldw	ra,124(sp)
    efcc:	ddc01e17 	ldw	r23,120(sp)
    efd0:	dd801d17 	ldw	r22,116(sp)
    efd4:	dd401c17 	ldw	r21,112(sp)
    efd8:	dd001b17 	ldw	r20,108(sp)
    efdc:	dcc01a17 	ldw	r19,104(sp)
    efe0:	dc801917 	ldw	r18,100(sp)
    efe4:	dc401817 	ldw	r17,96(sp)
    efe8:	dc001717 	ldw	r16,92(sp)
    efec:	dec02004 	addi	sp,sp,128
    eff0:	f800283a 	ret
    eff4:	dd800717 	ldw	r22,28(sp)
    eff8:	dc800c17 	ldw	r18,48(sp)
    effc:	002b883a 	mov	r21,zero
    f000:	0023883a 	mov	r17,zero
    f004:	a80b883a 	mov	r5,r21
    f008:	b00d883a 	mov	r6,r22
    f00c:	880f883a 	mov	r7,r17
    f010:	ddc00817 	ldw	r23,32(sp)
    f014:	dcc00d17 	ldw	r19,52(sp)
    f018:	9009883a 	mov	r4,r18
    f01c:	000dbd00 	call	dbd0 <__muldi3>
    f020:	001b883a 	mov	r13,zero
    f024:	680f883a 	mov	r7,r13
    f028:	b009883a 	mov	r4,r22
    f02c:	000b883a 	mov	r5,zero
    f030:	980d883a 	mov	r6,r19
    f034:	b82d883a 	mov	r22,r23
    f038:	002f883a 	mov	r23,zero
    f03c:	db401615 	stw	r13,88(sp)
    f040:	d8801315 	stw	r2,76(sp)
    f044:	d8c01415 	stw	r3,80(sp)
    f048:	dcc01515 	stw	r19,84(sp)
    f04c:	000dbd00 	call	dbd0 <__muldi3>
    f050:	b00d883a 	mov	r6,r22
    f054:	000b883a 	mov	r5,zero
    f058:	9009883a 	mov	r4,r18
    f05c:	b80f883a 	mov	r7,r23
    f060:	1021883a 	mov	r16,r2
    f064:	1823883a 	mov	r17,r3
    f068:	000dbd00 	call	dbd0 <__muldi3>
    f06c:	8085883a 	add	r2,r16,r2
    f070:	140d803a 	cmpltu	r6,r2,r16
    f074:	88c7883a 	add	r3,r17,r3
    f078:	30cd883a 	add	r6,r6,r3
    f07c:	1029883a 	mov	r20,r2
    f080:	302b883a 	mov	r21,r6
    f084:	da801317 	ldw	r10,76(sp)
    f088:	dac01417 	ldw	r11,80(sp)
    f08c:	db001517 	ldw	r12,84(sp)
    f090:	db401617 	ldw	r13,88(sp)
    f094:	3440612e 	bgeu	r6,r17,f21c <__muldf3+0x318>
    f098:	0009883a 	mov	r4,zero
    f09c:	5105883a 	add	r2,r10,r4
    f0a0:	128d803a 	cmpltu	r6,r2,r10
    f0a4:	5d07883a 	add	r3,r11,r20
    f0a8:	30cd883a 	add	r6,r6,r3
    f0ac:	0021883a 	mov	r16,zero
    f0b0:	04400044 	movi	r17,1
    f0b4:	1025883a 	mov	r18,r2
    f0b8:	3027883a 	mov	r19,r6
    f0bc:	32c06236 	bltu	r6,r11,f248 <__muldf3+0x344>
    f0c0:	59807a26 	beq	r11,r6,f2ac <__muldf3+0x3a8>
    f0c4:	680b883a 	mov	r5,r13
    f0c8:	b80f883a 	mov	r7,r23
    f0cc:	6009883a 	mov	r4,r12
    f0d0:	b00d883a 	mov	r6,r22
    f0d4:	000dbd00 	call	dbd0 <__muldi3>
    f0d8:	1009883a 	mov	r4,r2
    f0dc:	000f883a 	mov	r7,zero
    f0e0:	1545883a 	add	r2,r2,r21
    f0e4:	1111803a 	cmpltu	r8,r2,r4
    f0e8:	19c7883a 	add	r3,r3,r7
    f0ec:	40c7883a 	add	r3,r8,r3
    f0f0:	88cb883a 	add	r5,r17,r3
    f0f4:	d8c00617 	ldw	r3,24(sp)
    f0f8:	8089883a 	add	r4,r16,r2
    f0fc:	d8800b17 	ldw	r2,44(sp)
    f100:	18c00104 	addi	r3,r3,4
    f104:	240d803a 	cmpltu	r6,r4,r16
    f108:	10c7883a 	add	r3,r2,r3
    f10c:	2013883a 	mov	r9,r4
    f110:	d8800a17 	ldw	r2,40(sp)
    f114:	d9000517 	ldw	r4,20(sp)
    f118:	314d883a 	add	r6,r6,r5
    f11c:	3015883a 	mov	r10,r6
    f120:	2088c03a 	cmpne	r4,r4,r2
    f124:	00880034 	movhi	r2,8192
    f128:	10bfffc4 	addi	r2,r2,-1
    f12c:	d9000f15 	stw	r4,60(sp)
    f130:	d8c01015 	stw	r3,64(sp)
    f134:	1180162e 	bgeu	r2,r6,f190 <__muldf3+0x28c>
    f138:	1811883a 	mov	r8,r3
    f13c:	101f883a 	mov	r15,r2
    f140:	980497fa 	slli	r2,r19,31
    f144:	9016d07a 	srli	r11,r18,1
    f148:	500697fa 	slli	r3,r10,31
    f14c:	480cd07a 	srli	r6,r9,1
    f150:	500ed07a 	srli	r7,r10,1
    f154:	12d6b03a 	or	r11,r2,r11
    f158:	00800044 	movi	r2,1
    f15c:	198cb03a 	or	r6,r3,r6
    f160:	4888703a 	and	r4,r9,r2
    f164:	9818d07a 	srli	r12,r19,1
    f168:	001b883a 	mov	r13,zero
    f16c:	03a00034 	movhi	r14,32768
    f170:	3013883a 	mov	r9,r6
    f174:	3815883a 	mov	r10,r7
    f178:	4091883a 	add	r8,r8,r2
    f17c:	20000226 	beq	r4,zero,f188 <__muldf3+0x284>
    f180:	5b64b03a 	or	r18,r11,r13
    f184:	63a6b03a 	or	r19,r12,r14
    f188:	7abfed36 	bltu	r15,r10,f140 <__muldf3+0x23c>
    f18c:	da001015 	stw	r8,64(sp)
    f190:	00840034 	movhi	r2,4096
    f194:	10bfffc4 	addi	r2,r2,-1
    f198:	12801436 	bltu	r2,r10,f1ec <__muldf3+0x2e8>
    f19c:	da001017 	ldw	r8,64(sp)
    f1a0:	101f883a 	mov	r15,r2
    f1a4:	4a45883a 	add	r2,r9,r9
    f1a8:	124d803a 	cmpltu	r6,r2,r9
    f1ac:	5287883a 	add	r3,r10,r10
    f1b0:	9497883a 	add	r11,r18,r18
    f1b4:	5c8f803a 	cmpltu	r7,r11,r18
    f1b8:	9cd9883a 	add	r12,r19,r19
    f1bc:	01000044 	movi	r4,1
    f1c0:	30cd883a 	add	r6,r6,r3
    f1c4:	3b0f883a 	add	r7,r7,r12
    f1c8:	423fffc4 	addi	r8,r8,-1
    f1cc:	1013883a 	mov	r9,r2
    f1d0:	3015883a 	mov	r10,r6
    f1d4:	111ab03a 	or	r13,r2,r4
    f1d8:	98003016 	blt	r19,zero,f29c <__muldf3+0x398>
    f1dc:	5825883a 	mov	r18,r11
    f1e0:	3827883a 	mov	r19,r7
    f1e4:	7abfef2e 	bgeu	r15,r10,f1a4 <__muldf3+0x2a0>
    f1e8:	da001015 	stw	r8,64(sp)
    f1ec:	00803fc4 	movi	r2,255
    f1f0:	488e703a 	and	r7,r9,r2
    f1f4:	00802004 	movi	r2,128
    f1f8:	0007883a 	mov	r3,zero
    f1fc:	0011883a 	mov	r8,zero
    f200:	38801826 	beq	r7,r2,f264 <__muldf3+0x360>
    f204:	008000c4 	movi	r2,3
    f208:	d9000e04 	addi	r4,sp,56
    f20c:	da801215 	stw	r10,72(sp)
    f210:	d8800e15 	stw	r2,56(sp)
    f214:	da401115 	stw	r9,68(sp)
    f218:	003f6a06 	br	efc4 <__muldf3+0xc0>
    f21c:	89802126 	beq	r17,r6,f2a4 <__muldf3+0x3a0>
    f220:	0009883a 	mov	r4,zero
    f224:	5105883a 	add	r2,r10,r4
    f228:	128d803a 	cmpltu	r6,r2,r10
    f22c:	5d07883a 	add	r3,r11,r20
    f230:	30cd883a 	add	r6,r6,r3
    f234:	0021883a 	mov	r16,zero
    f238:	0023883a 	mov	r17,zero
    f23c:	1025883a 	mov	r18,r2
    f240:	3027883a 	mov	r19,r6
    f244:	32ff9e2e 	bgeu	r6,r11,f0c0 <__muldf3+0x1bc>
    f248:	00800044 	movi	r2,1
    f24c:	8089883a 	add	r4,r16,r2
    f250:	240d803a 	cmpltu	r6,r4,r16
    f254:	344d883a 	add	r6,r6,r17
    f258:	2021883a 	mov	r16,r4
    f25c:	3023883a 	mov	r17,r6
    f260:	003f9806 	br	f0c4 <__muldf3+0x1c0>
    f264:	403fe71e 	bne	r8,zero,f204 <__muldf3+0x300>
    f268:	01004004 	movi	r4,256
    f26c:	4904703a 	and	r2,r9,r4
    f270:	10c4b03a 	or	r2,r2,r3
    f274:	103fe31e 	bne	r2,zero,f204 <__muldf3+0x300>
    f278:	94c4b03a 	or	r2,r18,r19
    f27c:	103fe126 	beq	r2,zero,f204 <__muldf3+0x300>
    f280:	49c5883a 	add	r2,r9,r7
    f284:	1251803a 	cmpltu	r8,r2,r9
    f288:	4291883a 	add	r8,r8,r10
    f28c:	013fc004 	movi	r4,-256
    f290:	1112703a 	and	r9,r2,r4
    f294:	4015883a 	mov	r10,r8
    f298:	003fda06 	br	f204 <__muldf3+0x300>
    f29c:	6813883a 	mov	r9,r13
    f2a0:	003fce06 	br	f1dc <__muldf3+0x2d8>
    f2a4:	143f7c36 	bltu	r2,r16,f098 <__muldf3+0x194>
    f2a8:	003fdd06 	br	f220 <__muldf3+0x31c>
    f2ac:	12bf852e 	bgeu	r2,r10,f0c4 <__muldf3+0x1c0>
    f2b0:	003fe506 	br	f248 <__muldf3+0x344>
    f2b4:	00800084 	movi	r2,2
    f2b8:	20bf351e 	bne	r4,r2,ef90 <__muldf3+0x8c>
    f2bc:	01000074 	movhi	r4,1
    f2c0:	210de504 	addi	r4,r4,14228
    f2c4:	003f3f06 	br	efc4 <__muldf3+0xc0>

0000f2c8 <__divdf3>:
    f2c8:	deffed04 	addi	sp,sp,-76
    f2cc:	dcc01115 	stw	r19,68(sp)
    f2d0:	dcc00404 	addi	r19,sp,16
    f2d4:	2011883a 	mov	r8,r4
    f2d8:	2813883a 	mov	r9,r5
    f2dc:	dc000e15 	stw	r16,56(sp)
    f2e0:	d809883a 	mov	r4,sp
    f2e4:	980b883a 	mov	r5,r19
    f2e8:	dc000904 	addi	r16,sp,36
    f2ec:	dfc01215 	stw	ra,72(sp)
    f2f0:	da400115 	stw	r9,4(sp)
    f2f4:	d9c00315 	stw	r7,12(sp)
    f2f8:	da000015 	stw	r8,0(sp)
    f2fc:	d9800215 	stw	r6,8(sp)
    f300:	dc801015 	stw	r18,64(sp)
    f304:	dc400f15 	stw	r17,60(sp)
    f308:	00101580 	call	10158 <__unpack_d>
    f30c:	d9000204 	addi	r4,sp,8
    f310:	800b883a 	mov	r5,r16
    f314:	00101580 	call	10158 <__unpack_d>
    f318:	d9000417 	ldw	r4,16(sp)
    f31c:	00800044 	movi	r2,1
    f320:	11000b2e 	bgeu	r2,r4,f350 <__divdf3+0x88>
    f324:	d9400917 	ldw	r5,36(sp)
    f328:	1140762e 	bgeu	r2,r5,f504 <__divdf3+0x23c>
    f32c:	d8800517 	ldw	r2,20(sp)
    f330:	d8c00a17 	ldw	r3,40(sp)
    f334:	01800104 	movi	r6,4
    f338:	10c4f03a 	xor	r2,r2,r3
    f33c:	d8800515 	stw	r2,20(sp)
    f340:	21800226 	beq	r4,r6,f34c <__divdf3+0x84>
    f344:	00800084 	movi	r2,2
    f348:	2080141e 	bne	r4,r2,f39c <__divdf3+0xd4>
    f34c:	29000926 	beq	r5,r4,f374 <__divdf3+0xac>
    f350:	9809883a 	mov	r4,r19
    f354:	000fe440 	call	fe44 <__pack_d>
    f358:	dfc01217 	ldw	ra,72(sp)
    f35c:	dcc01117 	ldw	r19,68(sp)
    f360:	dc801017 	ldw	r18,64(sp)
    f364:	dc400f17 	ldw	r17,60(sp)
    f368:	dc000e17 	ldw	r16,56(sp)
    f36c:	dec01304 	addi	sp,sp,76
    f370:	f800283a 	ret
    f374:	01000074 	movhi	r4,1
    f378:	210de504 	addi	r4,r4,14228
    f37c:	000fe440 	call	fe44 <__pack_d>
    f380:	dfc01217 	ldw	ra,72(sp)
    f384:	dcc01117 	ldw	r19,68(sp)
    f388:	dc801017 	ldw	r18,64(sp)
    f38c:	dc400f17 	ldw	r17,60(sp)
    f390:	dc000e17 	ldw	r16,56(sp)
    f394:	dec01304 	addi	sp,sp,76
    f398:	f800283a 	ret
    f39c:	29805b26 	beq	r5,r6,f50c <__divdf3+0x244>
    f3a0:	28802d26 	beq	r5,r2,f458 <__divdf3+0x190>
    f3a4:	d8c00617 	ldw	r3,24(sp)
    f3a8:	d8800b17 	ldw	r2,44(sp)
    f3ac:	d9c00817 	ldw	r7,32(sp)
    f3b0:	dc400d17 	ldw	r17,52(sp)
    f3b4:	188bc83a 	sub	r5,r3,r2
    f3b8:	d9800717 	ldw	r6,28(sp)
    f3bc:	dc000c17 	ldw	r16,48(sp)
    f3c0:	d9400615 	stw	r5,24(sp)
    f3c4:	3c403836 	bltu	r7,r17,f4a8 <__divdf3+0x1e0>
    f3c8:	89c03626 	beq	r17,r7,f4a4 <__divdf3+0x1dc>
    f3cc:	0015883a 	mov	r10,zero
    f3d0:	001d883a 	mov	r14,zero
    f3d4:	02c40034 	movhi	r11,4096
    f3d8:	001f883a 	mov	r15,zero
    f3dc:	003f883a 	mov	ra,zero
    f3e0:	04800f44 	movi	r18,61
    f3e4:	00000f06 	br	f424 <__divdf3+0x15c>
    f3e8:	601d883a 	mov	r14,r12
    f3ec:	681f883a 	mov	r15,r13
    f3f0:	400d883a 	mov	r6,r8
    f3f4:	100f883a 	mov	r7,r2
    f3f8:	3191883a 	add	r8,r6,r6
    f3fc:	5808d07a 	srli	r4,r11,1
    f400:	4185803a 	cmpltu	r2,r8,r6
    f404:	39d3883a 	add	r9,r7,r7
    f408:	28c6b03a 	or	r3,r5,r3
    f40c:	1245883a 	add	r2,r2,r9
    f410:	1815883a 	mov	r10,r3
    f414:	2017883a 	mov	r11,r4
    f418:	400d883a 	mov	r6,r8
    f41c:	100f883a 	mov	r7,r2
    f420:	fc801726 	beq	ra,r18,f480 <__divdf3+0x1b8>
    f424:	580a97fa 	slli	r5,r11,31
    f428:	5006d07a 	srli	r3,r10,1
    f42c:	ffc00044 	addi	ra,ra,1
    f430:	3c7ff136 	bltu	r7,r17,f3f8 <__divdf3+0x130>
    f434:	3411c83a 	sub	r8,r6,r16
    f438:	3205803a 	cmpltu	r2,r6,r8
    f43c:	3c53c83a 	sub	r9,r7,r17
    f440:	7298b03a 	or	r12,r14,r10
    f444:	7adab03a 	or	r13,r15,r11
    f448:	4885c83a 	sub	r2,r9,r2
    f44c:	89ffe61e 	bne	r17,r7,f3e8 <__divdf3+0x120>
    f450:	343fe936 	bltu	r6,r16,f3f8 <__divdf3+0x130>
    f454:	003fe406 	br	f3e8 <__divdf3+0x120>
    f458:	9809883a 	mov	r4,r19
    f45c:	d9800415 	stw	r6,16(sp)
    f460:	000fe440 	call	fe44 <__pack_d>
    f464:	dfc01217 	ldw	ra,72(sp)
    f468:	dcc01117 	ldw	r19,68(sp)
    f46c:	dc801017 	ldw	r18,64(sp)
    f470:	dc400f17 	ldw	r17,60(sp)
    f474:	dc000e17 	ldw	r16,56(sp)
    f478:	dec01304 	addi	sp,sp,76
    f47c:	f800283a 	ret
    f480:	00803fc4 	movi	r2,255
    f484:	7090703a 	and	r8,r14,r2
    f488:	00802004 	movi	r2,128
    f48c:	0007883a 	mov	r3,zero
    f490:	0013883a 	mov	r9,zero
    f494:	40800d26 	beq	r8,r2,f4cc <__divdf3+0x204>
    f498:	dbc00815 	stw	r15,32(sp)
    f49c:	db800715 	stw	r14,28(sp)
    f4a0:	003fab06 	br	f350 <__divdf3+0x88>
    f4a4:	343fc92e 	bgeu	r6,r16,f3cc <__divdf3+0x104>
    f4a8:	3185883a 	add	r2,r6,r6
    f4ac:	1189803a 	cmpltu	r4,r2,r6
    f4b0:	39c7883a 	add	r3,r7,r7
    f4b4:	20c9883a 	add	r4,r4,r3
    f4b8:	297fffc4 	addi	r5,r5,-1
    f4bc:	100d883a 	mov	r6,r2
    f4c0:	200f883a 	mov	r7,r4
    f4c4:	d9400615 	stw	r5,24(sp)
    f4c8:	003fc006 	br	f3cc <__divdf3+0x104>
    f4cc:	483ff21e 	bne	r9,zero,f498 <__divdf3+0x1d0>
    f4d0:	01004004 	movi	r4,256
    f4d4:	7104703a 	and	r2,r14,r4
    f4d8:	10c4b03a 	or	r2,r2,r3
    f4dc:	103fee1e 	bne	r2,zero,f498 <__divdf3+0x1d0>
    f4e0:	31c4b03a 	or	r2,r6,r7
    f4e4:	103fec26 	beq	r2,zero,f498 <__divdf3+0x1d0>
    f4e8:	7205883a 	add	r2,r14,r8
    f4ec:	1391803a 	cmpltu	r8,r2,r14
    f4f0:	43d1883a 	add	r8,r8,r15
    f4f4:	013fc004 	movi	r4,-256
    f4f8:	111c703a 	and	r14,r2,r4
    f4fc:	401f883a 	mov	r15,r8
    f500:	003fe506 	br	f498 <__divdf3+0x1d0>
    f504:	8009883a 	mov	r4,r16
    f508:	003f9206 	br	f354 <__divdf3+0x8c>
    f50c:	9809883a 	mov	r4,r19
    f510:	d8000715 	stw	zero,28(sp)
    f514:	d8000815 	stw	zero,32(sp)
    f518:	d8000615 	stw	zero,24(sp)
    f51c:	003f8d06 	br	f354 <__divdf3+0x8c>

0000f520 <__eqdf2>:
    f520:	deffef04 	addi	sp,sp,-68
    f524:	dc400f15 	stw	r17,60(sp)
    f528:	dc400404 	addi	r17,sp,16
    f52c:	2005883a 	mov	r2,r4
    f530:	2807883a 	mov	r3,r5
    f534:	dc000e15 	stw	r16,56(sp)
    f538:	d809883a 	mov	r4,sp
    f53c:	880b883a 	mov	r5,r17
    f540:	dc000904 	addi	r16,sp,36
    f544:	d8c00115 	stw	r3,4(sp)
    f548:	d8800015 	stw	r2,0(sp)
    f54c:	d9800215 	stw	r6,8(sp)
    f550:	dfc01015 	stw	ra,64(sp)
    f554:	d9c00315 	stw	r7,12(sp)
    f558:	00101580 	call	10158 <__unpack_d>
    f55c:	d9000204 	addi	r4,sp,8
    f560:	800b883a 	mov	r5,r16
    f564:	00101580 	call	10158 <__unpack_d>
    f568:	d8800417 	ldw	r2,16(sp)
    f56c:	00c00044 	movi	r3,1
    f570:	180d883a 	mov	r6,r3
    f574:	1880062e 	bgeu	r3,r2,f590 <__eqdf2+0x70>
    f578:	d8800917 	ldw	r2,36(sp)
    f57c:	8809883a 	mov	r4,r17
    f580:	800b883a 	mov	r5,r16
    f584:	1880022e 	bgeu	r3,r2,f590 <__eqdf2+0x70>
    f588:	00102900 	call	10290 <__fpcmp_parts_d>
    f58c:	100d883a 	mov	r6,r2
    f590:	3005883a 	mov	r2,r6
    f594:	dfc01017 	ldw	ra,64(sp)
    f598:	dc400f17 	ldw	r17,60(sp)
    f59c:	dc000e17 	ldw	r16,56(sp)
    f5a0:	dec01104 	addi	sp,sp,68
    f5a4:	f800283a 	ret

0000f5a8 <__nedf2>:
    f5a8:	deffef04 	addi	sp,sp,-68
    f5ac:	dc400f15 	stw	r17,60(sp)
    f5b0:	dc400404 	addi	r17,sp,16
    f5b4:	2005883a 	mov	r2,r4
    f5b8:	2807883a 	mov	r3,r5
    f5bc:	dc000e15 	stw	r16,56(sp)
    f5c0:	d809883a 	mov	r4,sp
    f5c4:	880b883a 	mov	r5,r17
    f5c8:	dc000904 	addi	r16,sp,36
    f5cc:	d8c00115 	stw	r3,4(sp)
    f5d0:	d8800015 	stw	r2,0(sp)
    f5d4:	d9800215 	stw	r6,8(sp)
    f5d8:	dfc01015 	stw	ra,64(sp)
    f5dc:	d9c00315 	stw	r7,12(sp)
    f5e0:	00101580 	call	10158 <__unpack_d>
    f5e4:	d9000204 	addi	r4,sp,8
    f5e8:	800b883a 	mov	r5,r16
    f5ec:	00101580 	call	10158 <__unpack_d>
    f5f0:	d8800417 	ldw	r2,16(sp)
    f5f4:	00c00044 	movi	r3,1
    f5f8:	180d883a 	mov	r6,r3
    f5fc:	1880062e 	bgeu	r3,r2,f618 <__nedf2+0x70>
    f600:	d8800917 	ldw	r2,36(sp)
    f604:	8809883a 	mov	r4,r17
    f608:	800b883a 	mov	r5,r16
    f60c:	1880022e 	bgeu	r3,r2,f618 <__nedf2+0x70>
    f610:	00102900 	call	10290 <__fpcmp_parts_d>
    f614:	100d883a 	mov	r6,r2
    f618:	3005883a 	mov	r2,r6
    f61c:	dfc01017 	ldw	ra,64(sp)
    f620:	dc400f17 	ldw	r17,60(sp)
    f624:	dc000e17 	ldw	r16,56(sp)
    f628:	dec01104 	addi	sp,sp,68
    f62c:	f800283a 	ret

0000f630 <__gtdf2>:
    f630:	deffef04 	addi	sp,sp,-68
    f634:	dc400f15 	stw	r17,60(sp)
    f638:	dc400404 	addi	r17,sp,16
    f63c:	2005883a 	mov	r2,r4
    f640:	2807883a 	mov	r3,r5
    f644:	dc000e15 	stw	r16,56(sp)
    f648:	d809883a 	mov	r4,sp
    f64c:	880b883a 	mov	r5,r17
    f650:	dc000904 	addi	r16,sp,36
    f654:	d8c00115 	stw	r3,4(sp)
    f658:	d8800015 	stw	r2,0(sp)
    f65c:	d9800215 	stw	r6,8(sp)
    f660:	dfc01015 	stw	ra,64(sp)
    f664:	d9c00315 	stw	r7,12(sp)
    f668:	00101580 	call	10158 <__unpack_d>
    f66c:	d9000204 	addi	r4,sp,8
    f670:	800b883a 	mov	r5,r16
    f674:	00101580 	call	10158 <__unpack_d>
    f678:	d8800417 	ldw	r2,16(sp)
    f67c:	00c00044 	movi	r3,1
    f680:	01bfffc4 	movi	r6,-1
    f684:	1880062e 	bgeu	r3,r2,f6a0 <__gtdf2+0x70>
    f688:	d8800917 	ldw	r2,36(sp)
    f68c:	8809883a 	mov	r4,r17
    f690:	800b883a 	mov	r5,r16
    f694:	1880022e 	bgeu	r3,r2,f6a0 <__gtdf2+0x70>
    f698:	00102900 	call	10290 <__fpcmp_parts_d>
    f69c:	100d883a 	mov	r6,r2
    f6a0:	3005883a 	mov	r2,r6
    f6a4:	dfc01017 	ldw	ra,64(sp)
    f6a8:	dc400f17 	ldw	r17,60(sp)
    f6ac:	dc000e17 	ldw	r16,56(sp)
    f6b0:	dec01104 	addi	sp,sp,68
    f6b4:	f800283a 	ret

0000f6b8 <__gedf2>:
    f6b8:	deffef04 	addi	sp,sp,-68
    f6bc:	dc400f15 	stw	r17,60(sp)
    f6c0:	dc400404 	addi	r17,sp,16
    f6c4:	2005883a 	mov	r2,r4
    f6c8:	2807883a 	mov	r3,r5
    f6cc:	dc000e15 	stw	r16,56(sp)
    f6d0:	d809883a 	mov	r4,sp
    f6d4:	880b883a 	mov	r5,r17
    f6d8:	dc000904 	addi	r16,sp,36
    f6dc:	d8c00115 	stw	r3,4(sp)
    f6e0:	d8800015 	stw	r2,0(sp)
    f6e4:	d9800215 	stw	r6,8(sp)
    f6e8:	dfc01015 	stw	ra,64(sp)
    f6ec:	d9c00315 	stw	r7,12(sp)
    f6f0:	00101580 	call	10158 <__unpack_d>
    f6f4:	d9000204 	addi	r4,sp,8
    f6f8:	800b883a 	mov	r5,r16
    f6fc:	00101580 	call	10158 <__unpack_d>
    f700:	d8800417 	ldw	r2,16(sp)
    f704:	00c00044 	movi	r3,1
    f708:	01bfffc4 	movi	r6,-1
    f70c:	1880062e 	bgeu	r3,r2,f728 <__gedf2+0x70>
    f710:	d8800917 	ldw	r2,36(sp)
    f714:	8809883a 	mov	r4,r17
    f718:	800b883a 	mov	r5,r16
    f71c:	1880022e 	bgeu	r3,r2,f728 <__gedf2+0x70>
    f720:	00102900 	call	10290 <__fpcmp_parts_d>
    f724:	100d883a 	mov	r6,r2
    f728:	3005883a 	mov	r2,r6
    f72c:	dfc01017 	ldw	ra,64(sp)
    f730:	dc400f17 	ldw	r17,60(sp)
    f734:	dc000e17 	ldw	r16,56(sp)
    f738:	dec01104 	addi	sp,sp,68
    f73c:	f800283a 	ret

0000f740 <__ltdf2>:
    f740:	deffef04 	addi	sp,sp,-68
    f744:	dc400f15 	stw	r17,60(sp)
    f748:	dc400404 	addi	r17,sp,16
    f74c:	2005883a 	mov	r2,r4
    f750:	2807883a 	mov	r3,r5
    f754:	dc000e15 	stw	r16,56(sp)
    f758:	d809883a 	mov	r4,sp
    f75c:	880b883a 	mov	r5,r17
    f760:	dc000904 	addi	r16,sp,36
    f764:	d8c00115 	stw	r3,4(sp)
    f768:	d8800015 	stw	r2,0(sp)
    f76c:	d9800215 	stw	r6,8(sp)
    f770:	dfc01015 	stw	ra,64(sp)
    f774:	d9c00315 	stw	r7,12(sp)
    f778:	00101580 	call	10158 <__unpack_d>
    f77c:	d9000204 	addi	r4,sp,8
    f780:	800b883a 	mov	r5,r16
    f784:	00101580 	call	10158 <__unpack_d>
    f788:	d8800417 	ldw	r2,16(sp)
    f78c:	00c00044 	movi	r3,1
    f790:	180d883a 	mov	r6,r3
    f794:	1880062e 	bgeu	r3,r2,f7b0 <__ltdf2+0x70>
    f798:	d8800917 	ldw	r2,36(sp)
    f79c:	8809883a 	mov	r4,r17
    f7a0:	800b883a 	mov	r5,r16
    f7a4:	1880022e 	bgeu	r3,r2,f7b0 <__ltdf2+0x70>
    f7a8:	00102900 	call	10290 <__fpcmp_parts_d>
    f7ac:	100d883a 	mov	r6,r2
    f7b0:	3005883a 	mov	r2,r6
    f7b4:	dfc01017 	ldw	ra,64(sp)
    f7b8:	dc400f17 	ldw	r17,60(sp)
    f7bc:	dc000e17 	ldw	r16,56(sp)
    f7c0:	dec01104 	addi	sp,sp,68
    f7c4:	f800283a 	ret

0000f7c8 <__ledf2>:
    f7c8:	deffef04 	addi	sp,sp,-68
    f7cc:	dc400f15 	stw	r17,60(sp)
    f7d0:	dc400404 	addi	r17,sp,16
    f7d4:	2005883a 	mov	r2,r4
    f7d8:	2807883a 	mov	r3,r5
    f7dc:	dc000e15 	stw	r16,56(sp)
    f7e0:	d809883a 	mov	r4,sp
    f7e4:	880b883a 	mov	r5,r17
    f7e8:	dc000904 	addi	r16,sp,36
    f7ec:	d8c00115 	stw	r3,4(sp)
    f7f0:	d8800015 	stw	r2,0(sp)
    f7f4:	d9800215 	stw	r6,8(sp)
    f7f8:	dfc01015 	stw	ra,64(sp)
    f7fc:	d9c00315 	stw	r7,12(sp)
    f800:	00101580 	call	10158 <__unpack_d>
    f804:	d9000204 	addi	r4,sp,8
    f808:	800b883a 	mov	r5,r16
    f80c:	00101580 	call	10158 <__unpack_d>
    f810:	d8800417 	ldw	r2,16(sp)
    f814:	00c00044 	movi	r3,1
    f818:	180d883a 	mov	r6,r3
    f81c:	1880062e 	bgeu	r3,r2,f838 <__ledf2+0x70>
    f820:	d8800917 	ldw	r2,36(sp)
    f824:	8809883a 	mov	r4,r17
    f828:	800b883a 	mov	r5,r16
    f82c:	1880022e 	bgeu	r3,r2,f838 <__ledf2+0x70>
    f830:	00102900 	call	10290 <__fpcmp_parts_d>
    f834:	100d883a 	mov	r6,r2
    f838:	3005883a 	mov	r2,r6
    f83c:	dfc01017 	ldw	ra,64(sp)
    f840:	dc400f17 	ldw	r17,60(sp)
    f844:	dc000e17 	ldw	r16,56(sp)
    f848:	dec01104 	addi	sp,sp,68
    f84c:	f800283a 	ret

0000f850 <__floatsidf>:
    f850:	2006d7fa 	srli	r3,r4,31
    f854:	defff604 	addi	sp,sp,-40
    f858:	008000c4 	movi	r2,3
    f85c:	dfc00915 	stw	ra,36(sp)
    f860:	dcc00815 	stw	r19,32(sp)
    f864:	dc800715 	stw	r18,28(sp)
    f868:	dc400615 	stw	r17,24(sp)
    f86c:	dc000515 	stw	r16,20(sp)
    f870:	d8800015 	stw	r2,0(sp)
    f874:	d8c00115 	stw	r3,4(sp)
    f878:	20000f1e 	bne	r4,zero,f8b8 <__floatsidf+0x68>
    f87c:	00800084 	movi	r2,2
    f880:	d8800015 	stw	r2,0(sp)
    f884:	d809883a 	mov	r4,sp
    f888:	000fe440 	call	fe44 <__pack_d>
    f88c:	1009883a 	mov	r4,r2
    f890:	180b883a 	mov	r5,r3
    f894:	2005883a 	mov	r2,r4
    f898:	2807883a 	mov	r3,r5
    f89c:	dfc00917 	ldw	ra,36(sp)
    f8a0:	dcc00817 	ldw	r19,32(sp)
    f8a4:	dc800717 	ldw	r18,28(sp)
    f8a8:	dc400617 	ldw	r17,24(sp)
    f8ac:	dc000517 	ldw	r16,20(sp)
    f8b0:	dec00a04 	addi	sp,sp,40
    f8b4:	f800283a 	ret
    f8b8:	00800f04 	movi	r2,60
    f8bc:	1807003a 	cmpeq	r3,r3,zero
    f8c0:	d8800215 	stw	r2,8(sp)
    f8c4:	18001126 	beq	r3,zero,f90c <__floatsidf+0xbc>
    f8c8:	0027883a 	mov	r19,zero
    f8cc:	2025883a 	mov	r18,r4
    f8d0:	d9000315 	stw	r4,12(sp)
    f8d4:	dcc00415 	stw	r19,16(sp)
    f8d8:	000fc280 	call	fc28 <__clzsi2>
    f8dc:	11000744 	addi	r4,r2,29
    f8e0:	013fe80e 	bge	zero,r4,f884 <__floatsidf+0x34>
    f8e4:	10bfff44 	addi	r2,r2,-3
    f8e8:	10000c16 	blt	r2,zero,f91c <__floatsidf+0xcc>
    f8ec:	90a2983a 	sll	r17,r18,r2
    f8f0:	0021883a 	mov	r16,zero
    f8f4:	d8800217 	ldw	r2,8(sp)
    f8f8:	dc400415 	stw	r17,16(sp)
    f8fc:	dc000315 	stw	r16,12(sp)
    f900:	1105c83a 	sub	r2,r2,r4
    f904:	d8800215 	stw	r2,8(sp)
    f908:	003fde06 	br	f884 <__floatsidf+0x34>
    f90c:	00a00034 	movhi	r2,32768
    f910:	20800a26 	beq	r4,r2,f93c <__floatsidf+0xec>
    f914:	0109c83a 	sub	r4,zero,r4
    f918:	003feb06 	br	f8c8 <__floatsidf+0x78>
    f91c:	9006d07a 	srli	r3,r18,1
    f920:	008007c4 	movi	r2,31
    f924:	1105c83a 	sub	r2,r2,r4
    f928:	1886d83a 	srl	r3,r3,r2
    f92c:	9922983a 	sll	r17,r19,r4
    f930:	9120983a 	sll	r16,r18,r4
    f934:	1c62b03a 	or	r17,r3,r17
    f938:	003fee06 	br	f8f4 <__floatsidf+0xa4>
    f93c:	0009883a 	mov	r4,zero
    f940:	01707834 	movhi	r5,49632
    f944:	003fd306 	br	f894 <__floatsidf+0x44>

0000f948 <__fixdfsi>:
    f948:	defff804 	addi	sp,sp,-32
    f94c:	2005883a 	mov	r2,r4
    f950:	2807883a 	mov	r3,r5
    f954:	d809883a 	mov	r4,sp
    f958:	d9400204 	addi	r5,sp,8
    f95c:	d8c00115 	stw	r3,4(sp)
    f960:	d8800015 	stw	r2,0(sp)
    f964:	dfc00715 	stw	ra,28(sp)
    f968:	00101580 	call	10158 <__unpack_d>
    f96c:	d8c00217 	ldw	r3,8(sp)
    f970:	00800084 	movi	r2,2
    f974:	1880051e 	bne	r3,r2,f98c <__fixdfsi+0x44>
    f978:	0007883a 	mov	r3,zero
    f97c:	1805883a 	mov	r2,r3
    f980:	dfc00717 	ldw	ra,28(sp)
    f984:	dec00804 	addi	sp,sp,32
    f988:	f800283a 	ret
    f98c:	00800044 	movi	r2,1
    f990:	10fff92e 	bgeu	r2,r3,f978 <__fixdfsi+0x30>
    f994:	00800104 	movi	r2,4
    f998:	18800426 	beq	r3,r2,f9ac <__fixdfsi+0x64>
    f99c:	d8c00417 	ldw	r3,16(sp)
    f9a0:	183ff516 	blt	r3,zero,f978 <__fixdfsi+0x30>
    f9a4:	00800784 	movi	r2,30
    f9a8:	10c0080e 	bge	r2,r3,f9cc <__fixdfsi+0x84>
    f9ac:	d8800317 	ldw	r2,12(sp)
    f9b0:	1000121e 	bne	r2,zero,f9fc <__fixdfsi+0xb4>
    f9b4:	00e00034 	movhi	r3,32768
    f9b8:	18ffffc4 	addi	r3,r3,-1
    f9bc:	1805883a 	mov	r2,r3
    f9c0:	dfc00717 	ldw	ra,28(sp)
    f9c4:	dec00804 	addi	sp,sp,32
    f9c8:	f800283a 	ret
    f9cc:	00800f04 	movi	r2,60
    f9d0:	10d1c83a 	sub	r8,r2,r3
    f9d4:	40bff804 	addi	r2,r8,-32
    f9d8:	d9800517 	ldw	r6,20(sp)
    f9dc:	d9c00617 	ldw	r7,24(sp)
    f9e0:	10000816 	blt	r2,zero,fa04 <__fixdfsi+0xbc>
    f9e4:	3888d83a 	srl	r4,r7,r2
    f9e8:	d8800317 	ldw	r2,12(sp)
    f9ec:	2007883a 	mov	r3,r4
    f9f0:	103fe226 	beq	r2,zero,f97c <__fixdfsi+0x34>
    f9f4:	0107c83a 	sub	r3,zero,r4
    f9f8:	003fe006 	br	f97c <__fixdfsi+0x34>
    f9fc:	00e00034 	movhi	r3,32768
    fa00:	003fde06 	br	f97c <__fixdfsi+0x34>
    fa04:	39c7883a 	add	r3,r7,r7
    fa08:	008007c4 	movi	r2,31
    fa0c:	1205c83a 	sub	r2,r2,r8
    fa10:	1886983a 	sll	r3,r3,r2
    fa14:	3208d83a 	srl	r4,r6,r8
    fa18:	1908b03a 	or	r4,r3,r4
    fa1c:	003ff206 	br	f9e8 <__fixdfsi+0xa0>

0000fa20 <__truncdfsf2>:
    fa20:	defff804 	addi	sp,sp,-32
    fa24:	2005883a 	mov	r2,r4
    fa28:	2807883a 	mov	r3,r5
    fa2c:	d809883a 	mov	r4,sp
    fa30:	d9400204 	addi	r5,sp,8
    fa34:	d8c00115 	stw	r3,4(sp)
    fa38:	d8800015 	stw	r2,0(sp)
    fa3c:	dfc00715 	stw	ra,28(sp)
    fa40:	00101580 	call	10158 <__unpack_d>
    fa44:	d9c00517 	ldw	r7,20(sp)
    fa48:	da000617 	ldw	r8,24(sp)
    fa4c:	02d00034 	movhi	r11,16384
    fa50:	5affffc4 	addi	r11,r11,-1
    fa54:	3812d7ba 	srli	r9,r7,30
    fa58:	401a90ba 	slli	r13,r8,2
    fa5c:	3ac4703a 	and	r2,r7,r11
    fa60:	0007883a 	mov	r3,zero
    fa64:	6a52b03a 	or	r9,r13,r9
    fa68:	10c4b03a 	or	r2,r2,r3
    fa6c:	d9000217 	ldw	r4,8(sp)
    fa70:	d9400317 	ldw	r5,12(sp)
    fa74:	d9800417 	ldw	r6,16(sp)
    fa78:	480f883a 	mov	r7,r9
    fa7c:	10000126 	beq	r2,zero,fa84 <__truncdfsf2+0x64>
    fa80:	49c00054 	ori	r7,r9,1
    fa84:	000fe180 	call	fe18 <__make_fp>
    fa88:	dfc00717 	ldw	ra,28(sp)
    fa8c:	dec00804 	addi	sp,sp,32
    fa90:	f800283a 	ret

0000fa94 <__floatunsidf>:
    fa94:	defff204 	addi	sp,sp,-56
    fa98:	dfc00d15 	stw	ra,52(sp)
    fa9c:	ddc00c15 	stw	r23,48(sp)
    faa0:	dd800b15 	stw	r22,44(sp)
    faa4:	dd400a15 	stw	r21,40(sp)
    faa8:	dd000915 	stw	r20,36(sp)
    faac:	dcc00815 	stw	r19,32(sp)
    fab0:	dc800715 	stw	r18,28(sp)
    fab4:	dc400615 	stw	r17,24(sp)
    fab8:	dc000515 	stw	r16,20(sp)
    fabc:	d8000115 	stw	zero,4(sp)
    fac0:	20000f1e 	bne	r4,zero,fb00 <__floatunsidf+0x6c>
    fac4:	00800084 	movi	r2,2
    fac8:	d8800015 	stw	r2,0(sp)
    facc:	d809883a 	mov	r4,sp
    fad0:	000fe440 	call	fe44 <__pack_d>
    fad4:	dfc00d17 	ldw	ra,52(sp)
    fad8:	ddc00c17 	ldw	r23,48(sp)
    fadc:	dd800b17 	ldw	r22,44(sp)
    fae0:	dd400a17 	ldw	r21,40(sp)
    fae4:	dd000917 	ldw	r20,36(sp)
    fae8:	dcc00817 	ldw	r19,32(sp)
    faec:	dc800717 	ldw	r18,28(sp)
    faf0:	dc400617 	ldw	r17,24(sp)
    faf4:	dc000517 	ldw	r16,20(sp)
    faf8:	dec00e04 	addi	sp,sp,56
    fafc:	f800283a 	ret
    fb00:	008000c4 	movi	r2,3
    fb04:	00c00f04 	movi	r3,60
    fb08:	002f883a 	mov	r23,zero
    fb0c:	202d883a 	mov	r22,r4
    fb10:	d8800015 	stw	r2,0(sp)
    fb14:	d8c00215 	stw	r3,8(sp)
    fb18:	d9000315 	stw	r4,12(sp)
    fb1c:	ddc00415 	stw	r23,16(sp)
    fb20:	000fc280 	call	fc28 <__clzsi2>
    fb24:	12400744 	addi	r9,r2,29
    fb28:	48000b16 	blt	r9,zero,fb58 <__floatunsidf+0xc4>
    fb2c:	483fe726 	beq	r9,zero,facc <__floatunsidf+0x38>
    fb30:	10bfff44 	addi	r2,r2,-3
    fb34:	10002e16 	blt	r2,zero,fbf0 <__floatunsidf+0x15c>
    fb38:	b0a2983a 	sll	r17,r22,r2
    fb3c:	0021883a 	mov	r16,zero
    fb40:	d8800217 	ldw	r2,8(sp)
    fb44:	dc400415 	stw	r17,16(sp)
    fb48:	dc000315 	stw	r16,12(sp)
    fb4c:	1245c83a 	sub	r2,r2,r9
    fb50:	d8800215 	stw	r2,8(sp)
    fb54:	003fdd06 	br	facc <__floatunsidf+0x38>
    fb58:	0255c83a 	sub	r10,zero,r9
    fb5c:	51bff804 	addi	r6,r10,-32
    fb60:	30001b16 	blt	r6,zero,fbd0 <__floatunsidf+0x13c>
    fb64:	b9a8d83a 	srl	r20,r23,r6
    fb68:	002b883a 	mov	r21,zero
    fb6c:	000f883a 	mov	r7,zero
    fb70:	01000044 	movi	r4,1
    fb74:	0011883a 	mov	r8,zero
    fb78:	30002516 	blt	r6,zero,fc10 <__floatunsidf+0x17c>
    fb7c:	21a6983a 	sll	r19,r4,r6
    fb80:	0025883a 	mov	r18,zero
    fb84:	00bfffc4 	movi	r2,-1
    fb88:	9089883a 	add	r4,r18,r2
    fb8c:	988b883a 	add	r5,r19,r2
    fb90:	248d803a 	cmpltu	r6,r4,r18
    fb94:	314b883a 	add	r5,r6,r5
    fb98:	b104703a 	and	r2,r22,r4
    fb9c:	b946703a 	and	r3,r23,r5
    fba0:	10c4b03a 	or	r2,r2,r3
    fba4:	10000226 	beq	r2,zero,fbb0 <__floatunsidf+0x11c>
    fba8:	01c00044 	movi	r7,1
    fbac:	0011883a 	mov	r8,zero
    fbb0:	d9000217 	ldw	r4,8(sp)
    fbb4:	a1c4b03a 	or	r2,r20,r7
    fbb8:	aa06b03a 	or	r3,r21,r8
    fbbc:	2249c83a 	sub	r4,r4,r9
    fbc0:	d8c00415 	stw	r3,16(sp)
    fbc4:	d9000215 	stw	r4,8(sp)
    fbc8:	d8800315 	stw	r2,12(sp)
    fbcc:	003fbf06 	br	facc <__floatunsidf+0x38>
    fbd0:	bdc7883a 	add	r3,r23,r23
    fbd4:	008007c4 	movi	r2,31
    fbd8:	1285c83a 	sub	r2,r2,r10
    fbdc:	1886983a 	sll	r3,r3,r2
    fbe0:	b2a8d83a 	srl	r20,r22,r10
    fbe4:	baaad83a 	srl	r21,r23,r10
    fbe8:	1d28b03a 	or	r20,r3,r20
    fbec:	003fdf06 	br	fb6c <__floatunsidf+0xd8>
    fbf0:	b006d07a 	srli	r3,r22,1
    fbf4:	008007c4 	movi	r2,31
    fbf8:	1245c83a 	sub	r2,r2,r9
    fbfc:	1886d83a 	srl	r3,r3,r2
    fc00:	ba62983a 	sll	r17,r23,r9
    fc04:	b260983a 	sll	r16,r22,r9
    fc08:	1c62b03a 	or	r17,r3,r17
    fc0c:	003fcc06 	br	fb40 <__floatunsidf+0xac>
    fc10:	2006d07a 	srli	r3,r4,1
    fc14:	008007c4 	movi	r2,31
    fc18:	1285c83a 	sub	r2,r2,r10
    fc1c:	18a6d83a 	srl	r19,r3,r2
    fc20:	22a4983a 	sll	r18,r4,r10
    fc24:	003fd706 	br	fb84 <__floatunsidf+0xf0>

0000fc28 <__clzsi2>:
    fc28:	00bfffd4 	movui	r2,65535
    fc2c:	11000e36 	bltu	r2,r4,fc68 <__clzsi2+0x40>
    fc30:	00803fc4 	movi	r2,255
    fc34:	01400204 	movi	r5,8
    fc38:	0007883a 	mov	r3,zero
    fc3c:	11001036 	bltu	r2,r4,fc80 <__clzsi2+0x58>
    fc40:	000b883a 	mov	r5,zero
    fc44:	20c6d83a 	srl	r3,r4,r3
    fc48:	00800074 	movhi	r2,1
    fc4c:	108dea04 	addi	r2,r2,14248
    fc50:	1887883a 	add	r3,r3,r2
    fc54:	18800003 	ldbu	r2,0(r3)
    fc58:	00c00804 	movi	r3,32
    fc5c:	2885883a 	add	r2,r5,r2
    fc60:	1885c83a 	sub	r2,r3,r2
    fc64:	f800283a 	ret
    fc68:	01400404 	movi	r5,16
    fc6c:	00804034 	movhi	r2,256
    fc70:	10bfffc4 	addi	r2,r2,-1
    fc74:	2807883a 	mov	r3,r5
    fc78:	113ff22e 	bgeu	r2,r4,fc44 <__clzsi2+0x1c>
    fc7c:	01400604 	movi	r5,24
    fc80:	2807883a 	mov	r3,r5
    fc84:	20c6d83a 	srl	r3,r4,r3
    fc88:	00800074 	movhi	r2,1
    fc8c:	108dea04 	addi	r2,r2,14248
    fc90:	1887883a 	add	r3,r3,r2
    fc94:	18800003 	ldbu	r2,0(r3)
    fc98:	00c00804 	movi	r3,32
    fc9c:	2885883a 	add	r2,r5,r2
    fca0:	1885c83a 	sub	r2,r3,r2
    fca4:	f800283a 	ret

0000fca8 <__unpack_f>:
    fca8:	21800017 	ldw	r6,0(r4)
    fcac:	00c02034 	movhi	r3,128
    fcb0:	18ffffc4 	addi	r3,r3,-1
    fcb4:	3004d5fa 	srli	r2,r6,23
    fcb8:	3008d7fa 	srli	r4,r6,31
    fcbc:	30ce703a 	and	r7,r6,r3
    fcc0:	10c03fcc 	andi	r3,r2,255
    fcc4:	29000115 	stw	r4,4(r5)
    fcc8:	1800131e 	bne	r3,zero,fd18 <__unpack_f+0x70>
    fccc:	38000f26 	beq	r7,zero,fd0c <__unpack_f+0x64>
    fcd0:	380691fa 	slli	r3,r7,7
    fcd4:	01bfe084 	movi	r6,-126
    fcd8:	008000c4 	movi	r2,3
    fcdc:	01100034 	movhi	r4,16384
    fce0:	213fffc4 	addi	r4,r4,-1
    fce4:	28800015 	stw	r2,0(r5)
    fce8:	29800215 	stw	r6,8(r5)
    fcec:	20c00536 	bltu	r4,r3,fd04 <__unpack_f+0x5c>
    fcf0:	3005883a 	mov	r2,r6
    fcf4:	18c7883a 	add	r3,r3,r3
    fcf8:	10bfffc4 	addi	r2,r2,-1
    fcfc:	20fffd2e 	bgeu	r4,r3,fcf4 <__unpack_f+0x4c>
    fd00:	28800215 	stw	r2,8(r5)
    fd04:	28c00315 	stw	r3,12(r5)
    fd08:	f800283a 	ret
    fd0c:	00800084 	movi	r2,2
    fd10:	28800015 	stw	r2,0(r5)
    fd14:	f800283a 	ret
    fd18:	00803fc4 	movi	r2,255
    fd1c:	18800826 	beq	r3,r2,fd40 <__unpack_f+0x98>
    fd20:	380491fa 	slli	r2,r7,7
    fd24:	18ffe044 	addi	r3,r3,-127
    fd28:	28c00215 	stw	r3,8(r5)
    fd2c:	10900034 	orhi	r2,r2,16384
    fd30:	28800315 	stw	r2,12(r5)
    fd34:	008000c4 	movi	r2,3
    fd38:	28800015 	stw	r2,0(r5)
    fd3c:	f800283a 	ret
    fd40:	3800031e 	bne	r7,zero,fd50 <__unpack_f+0xa8>
    fd44:	00800104 	movi	r2,4
    fd48:	28800015 	stw	r2,0(r5)
    fd4c:	f800283a 	ret
    fd50:	3080042c 	andhi	r2,r6,16
    fd54:	10000426 	beq	r2,zero,fd68 <__unpack_f+0xc0>
    fd58:	00800044 	movi	r2,1
    fd5c:	28800015 	stw	r2,0(r5)
    fd60:	29c00315 	stw	r7,12(r5)
    fd64:	f800283a 	ret
    fd68:	28000015 	stw	zero,0(r5)
    fd6c:	003ffc06 	br	fd60 <__unpack_f+0xb8>

0000fd70 <__fpcmp_parts_f>:
    fd70:	21800017 	ldw	r6,0(r4)
    fd74:	00c00044 	movi	r3,1
    fd78:	19800a2e 	bgeu	r3,r6,fda4 <__fpcmp_parts_f+0x34>
    fd7c:	28800017 	ldw	r2,0(r5)
    fd80:	1880082e 	bgeu	r3,r2,fda4 <__fpcmp_parts_f+0x34>
    fd84:	00c00104 	movi	r3,4
    fd88:	30c01e26 	beq	r6,r3,fe04 <__fpcmp_parts_f+0x94>
    fd8c:	10c01a26 	beq	r2,r3,fdf8 <__fpcmp_parts_f+0x88>
    fd90:	00c00084 	movi	r3,2
    fd94:	30c00526 	beq	r6,r3,fdac <__fpcmp_parts_f+0x3c>
    fd98:	10c0071e 	bne	r2,r3,fdb8 <__fpcmp_parts_f+0x48>
    fd9c:	20800117 	ldw	r2,4(r4)
    fda0:	1000091e 	bne	r2,zero,fdc8 <__fpcmp_parts_f+0x58>
    fda4:	00800044 	movi	r2,1
    fda8:	f800283a 	ret
    fdac:	10c0121e 	bne	r2,r3,fdf8 <__fpcmp_parts_f+0x88>
    fdb0:	0005883a 	mov	r2,zero
    fdb4:	f800283a 	ret
    fdb8:	20c00117 	ldw	r3,4(r4)
    fdbc:	28800117 	ldw	r2,4(r5)
    fdc0:	18800326 	beq	r3,r2,fdd0 <__fpcmp_parts_f+0x60>
    fdc4:	183ff726 	beq	r3,zero,fda4 <__fpcmp_parts_f+0x34>
    fdc8:	00bfffc4 	movi	r2,-1
    fdcc:	f800283a 	ret
    fdd0:	21800217 	ldw	r6,8(r4)
    fdd4:	28800217 	ldw	r2,8(r5)
    fdd8:	11bffa16 	blt	r2,r6,fdc4 <__fpcmp_parts_f+0x54>
    fddc:	30800416 	blt	r6,r2,fdf0 <__fpcmp_parts_f+0x80>
    fde0:	21000317 	ldw	r4,12(r4)
    fde4:	29400317 	ldw	r5,12(r5)
    fde8:	293ff636 	bltu	r5,r4,fdc4 <__fpcmp_parts_f+0x54>
    fdec:	217ff02e 	bgeu	r4,r5,fdb0 <__fpcmp_parts_f+0x40>
    fdf0:	183fec1e 	bne	r3,zero,fda4 <__fpcmp_parts_f+0x34>
    fdf4:	003ff406 	br	fdc8 <__fpcmp_parts_f+0x58>
    fdf8:	28800117 	ldw	r2,4(r5)
    fdfc:	103fe91e 	bne	r2,zero,fda4 <__fpcmp_parts_f+0x34>
    fe00:	003ff106 	br	fdc8 <__fpcmp_parts_f+0x58>
    fe04:	11bfe51e 	bne	r2,r6,fd9c <__fpcmp_parts_f+0x2c>
    fe08:	28c00117 	ldw	r3,4(r5)
    fe0c:	20800117 	ldw	r2,4(r4)
    fe10:	1885c83a 	sub	r2,r3,r2
    fe14:	f800283a 	ret

0000fe18 <__make_fp>:
    fe18:	defffb04 	addi	sp,sp,-20
    fe1c:	d9000015 	stw	r4,0(sp)
    fe20:	d809883a 	mov	r4,sp
    fe24:	dfc00415 	stw	ra,16(sp)
    fe28:	d9400115 	stw	r5,4(sp)
    fe2c:	d9800215 	stw	r6,8(sp)
    fe30:	d9c00315 	stw	r7,12(sp)
    fe34:	00103580 	call	10358 <__pack_f>
    fe38:	dfc00417 	ldw	ra,16(sp)
    fe3c:	dec00504 	addi	sp,sp,20
    fe40:	f800283a 	ret

0000fe44 <__pack_d>:
    fe44:	20c00017 	ldw	r3,0(r4)
    fe48:	defffd04 	addi	sp,sp,-12
    fe4c:	dc000015 	stw	r16,0(sp)
    fe50:	dc800215 	stw	r18,8(sp)
    fe54:	dc400115 	stw	r17,4(sp)
    fe58:	00800044 	movi	r2,1
    fe5c:	22000317 	ldw	r8,12(r4)
    fe60:	001f883a 	mov	r15,zero
    fe64:	22400417 	ldw	r9,16(r4)
    fe68:	24000117 	ldw	r16,4(r4)
    fe6c:	10c0552e 	bgeu	r2,r3,ffc4 <__pack_d+0x180>
    fe70:	00800104 	movi	r2,4
    fe74:	18804f26 	beq	r3,r2,ffb4 <__pack_d+0x170>
    fe78:	00800084 	movi	r2,2
    fe7c:	18800226 	beq	r3,r2,fe88 <__pack_d+0x44>
    fe80:	4244b03a 	or	r2,r8,r9
    fe84:	10001a1e 	bne	r2,zero,fef0 <__pack_d+0xac>
    fe88:	000d883a 	mov	r6,zero
    fe8c:	000f883a 	mov	r7,zero
    fe90:	0011883a 	mov	r8,zero
    fe94:	00800434 	movhi	r2,16
    fe98:	10bfffc4 	addi	r2,r2,-1
    fe9c:	301d883a 	mov	r14,r6
    fea0:	3884703a 	and	r2,r7,r2
    fea4:	400a953a 	slli	r5,r8,20
    fea8:	79bffc2c 	andhi	r6,r15,65520
    feac:	308cb03a 	or	r6,r6,r2
    feb0:	00e00434 	movhi	r3,32784
    feb4:	18ffffc4 	addi	r3,r3,-1
    feb8:	800497fa 	slli	r2,r16,31
    febc:	30c6703a 	and	r3,r6,r3
    fec0:	1946b03a 	or	r3,r3,r5
    fec4:	01600034 	movhi	r5,32768
    fec8:	297fffc4 	addi	r5,r5,-1
    fecc:	194a703a 	and	r5,r3,r5
    fed0:	288ab03a 	or	r5,r5,r2
    fed4:	2807883a 	mov	r3,r5
    fed8:	7005883a 	mov	r2,r14
    fedc:	dc800217 	ldw	r18,8(sp)
    fee0:	dc400117 	ldw	r17,4(sp)
    fee4:	dc000017 	ldw	r16,0(sp)
    fee8:	dec00304 	addi	sp,sp,12
    feec:	f800283a 	ret
    fef0:	21000217 	ldw	r4,8(r4)
    fef4:	00bf0084 	movi	r2,-1022
    fef8:	20803f16 	blt	r4,r2,fff8 <__pack_d+0x1b4>
    fefc:	0080ffc4 	movi	r2,1023
    ff00:	11002c16 	blt	r2,r4,ffb4 <__pack_d+0x170>
    ff04:	00803fc4 	movi	r2,255
    ff08:	408c703a 	and	r6,r8,r2
    ff0c:	00802004 	movi	r2,128
    ff10:	0007883a 	mov	r3,zero
    ff14:	000f883a 	mov	r7,zero
    ff18:	2280ffc4 	addi	r10,r4,1023
    ff1c:	30801e26 	beq	r6,r2,ff98 <__pack_d+0x154>
    ff20:	00801fc4 	movi	r2,127
    ff24:	4089883a 	add	r4,r8,r2
    ff28:	220d803a 	cmpltu	r6,r4,r8
    ff2c:	324d883a 	add	r6,r6,r9
    ff30:	2011883a 	mov	r8,r4
    ff34:	3013883a 	mov	r9,r6
    ff38:	00880034 	movhi	r2,8192
    ff3c:	10bfffc4 	addi	r2,r2,-1
    ff40:	12400d36 	bltu	r2,r9,ff78 <__pack_d+0x134>
    ff44:	4804963a 	slli	r2,r9,24
    ff48:	400cd23a 	srli	r6,r8,8
    ff4c:	480ed23a 	srli	r7,r9,8
    ff50:	013fffc4 	movi	r4,-1
    ff54:	118cb03a 	or	r6,r2,r6
    ff58:	01400434 	movhi	r5,16
    ff5c:	297fffc4 	addi	r5,r5,-1
    ff60:	3104703a 	and	r2,r6,r4
    ff64:	3946703a 	and	r3,r7,r5
    ff68:	5201ffcc 	andi	r8,r10,2047
    ff6c:	100d883a 	mov	r6,r2
    ff70:	180f883a 	mov	r7,r3
    ff74:	003fc706 	br	fe94 <__pack_d+0x50>
    ff78:	480897fa 	slli	r4,r9,31
    ff7c:	4004d07a 	srli	r2,r8,1
    ff80:	4806d07a 	srli	r3,r9,1
    ff84:	52800044 	addi	r10,r10,1
    ff88:	2084b03a 	or	r2,r4,r2
    ff8c:	1011883a 	mov	r8,r2
    ff90:	1813883a 	mov	r9,r3
    ff94:	003feb06 	br	ff44 <__pack_d+0x100>
    ff98:	383fe11e 	bne	r7,zero,ff20 <__pack_d+0xdc>
    ff9c:	01004004 	movi	r4,256
    ffa0:	4104703a 	and	r2,r8,r4
    ffa4:	10c4b03a 	or	r2,r2,r3
    ffa8:	103fe326 	beq	r2,zero,ff38 <__pack_d+0xf4>
    ffac:	3005883a 	mov	r2,r6
    ffb0:	003fdc06 	br	ff24 <__pack_d+0xe0>
    ffb4:	000d883a 	mov	r6,zero
    ffb8:	000f883a 	mov	r7,zero
    ffbc:	0201ffc4 	movi	r8,2047
    ffc0:	003fb406 	br	fe94 <__pack_d+0x50>
    ffc4:	0005883a 	mov	r2,zero
    ffc8:	00c00234 	movhi	r3,8
    ffcc:	408cb03a 	or	r6,r8,r2
    ffd0:	48ceb03a 	or	r7,r9,r3
    ffd4:	013fffc4 	movi	r4,-1
    ffd8:	01400434 	movhi	r5,16
    ffdc:	297fffc4 	addi	r5,r5,-1
    ffe0:	3104703a 	and	r2,r6,r4
    ffe4:	3946703a 	and	r3,r7,r5
    ffe8:	100d883a 	mov	r6,r2
    ffec:	180f883a 	mov	r7,r3
    fff0:	0201ffc4 	movi	r8,2047
    fff4:	003fa706 	br	fe94 <__pack_d+0x50>
    fff8:	1109c83a 	sub	r4,r2,r4
    fffc:	00800e04 	movi	r2,56
   10000:	11004316 	blt	r2,r4,10110 <__pack_d+0x2cc>
   10004:	21fff804 	addi	r7,r4,-32
   10008:	38004516 	blt	r7,zero,10120 <__pack_d+0x2dc>
   1000c:	49d8d83a 	srl	r12,r9,r7
   10010:	001b883a 	mov	r13,zero
   10014:	0023883a 	mov	r17,zero
   10018:	01400044 	movi	r5,1
   1001c:	0025883a 	mov	r18,zero
   10020:	38004716 	blt	r7,zero,10140 <__pack_d+0x2fc>
   10024:	29d6983a 	sll	r11,r5,r7
   10028:	0015883a 	mov	r10,zero
   1002c:	00bfffc4 	movi	r2,-1
   10030:	5089883a 	add	r4,r10,r2
   10034:	588b883a 	add	r5,r11,r2
   10038:	228d803a 	cmpltu	r6,r4,r10
   1003c:	314b883a 	add	r5,r6,r5
   10040:	4104703a 	and	r2,r8,r4
   10044:	4946703a 	and	r3,r9,r5
   10048:	10c4b03a 	or	r2,r2,r3
   1004c:	10000226 	beq	r2,zero,10058 <__pack_d+0x214>
   10050:	04400044 	movi	r17,1
   10054:	0025883a 	mov	r18,zero
   10058:	00803fc4 	movi	r2,255
   1005c:	644eb03a 	or	r7,r12,r17
   10060:	3892703a 	and	r9,r7,r2
   10064:	00802004 	movi	r2,128
   10068:	6c90b03a 	or	r8,r13,r18
   1006c:	0015883a 	mov	r10,zero
   10070:	48801626 	beq	r9,r2,100cc <__pack_d+0x288>
   10074:	01001fc4 	movi	r4,127
   10078:	3905883a 	add	r2,r7,r4
   1007c:	11cd803a 	cmpltu	r6,r2,r7
   10080:	320d883a 	add	r6,r6,r8
   10084:	100f883a 	mov	r7,r2
   10088:	00840034 	movhi	r2,4096
   1008c:	10bfffc4 	addi	r2,r2,-1
   10090:	3011883a 	mov	r8,r6
   10094:	0007883a 	mov	r3,zero
   10098:	11801b36 	bltu	r2,r6,10108 <__pack_d+0x2c4>
   1009c:	4004963a 	slli	r2,r8,24
   100a0:	3808d23a 	srli	r4,r7,8
   100a4:	400ad23a 	srli	r5,r8,8
   100a8:	1813883a 	mov	r9,r3
   100ac:	1108b03a 	or	r4,r2,r4
   100b0:	00bfffc4 	movi	r2,-1
   100b4:	00c00434 	movhi	r3,16
   100b8:	18ffffc4 	addi	r3,r3,-1
   100bc:	208c703a 	and	r6,r4,r2
   100c0:	28ce703a 	and	r7,r5,r3
   100c4:	4a01ffcc 	andi	r8,r9,2047
   100c8:	003f7206 	br	fe94 <__pack_d+0x50>
   100cc:	503fe91e 	bne	r10,zero,10074 <__pack_d+0x230>
   100d0:	01004004 	movi	r4,256
   100d4:	3904703a 	and	r2,r7,r4
   100d8:	0007883a 	mov	r3,zero
   100dc:	10c4b03a 	or	r2,r2,r3
   100e0:	10000626 	beq	r2,zero,100fc <__pack_d+0x2b8>
   100e4:	3a45883a 	add	r2,r7,r9
   100e8:	11cd803a 	cmpltu	r6,r2,r7
   100ec:	320d883a 	add	r6,r6,r8
   100f0:	100f883a 	mov	r7,r2
   100f4:	3011883a 	mov	r8,r6
   100f8:	0007883a 	mov	r3,zero
   100fc:	00840034 	movhi	r2,4096
   10100:	10bfffc4 	addi	r2,r2,-1
   10104:	123fe52e 	bgeu	r2,r8,1009c <__pack_d+0x258>
   10108:	00c00044 	movi	r3,1
   1010c:	003fe306 	br	1009c <__pack_d+0x258>
   10110:	0009883a 	mov	r4,zero
   10114:	0013883a 	mov	r9,zero
   10118:	000b883a 	mov	r5,zero
   1011c:	003fe406 	br	100b0 <__pack_d+0x26c>
   10120:	4a47883a 	add	r3,r9,r9
   10124:	008007c4 	movi	r2,31
   10128:	1105c83a 	sub	r2,r2,r4
   1012c:	1886983a 	sll	r3,r3,r2
   10130:	4118d83a 	srl	r12,r8,r4
   10134:	491ad83a 	srl	r13,r9,r4
   10138:	1b18b03a 	or	r12,r3,r12
   1013c:	003fb506 	br	10014 <__pack_d+0x1d0>
   10140:	2806d07a 	srli	r3,r5,1
   10144:	008007c4 	movi	r2,31
   10148:	1105c83a 	sub	r2,r2,r4
   1014c:	1896d83a 	srl	r11,r3,r2
   10150:	2914983a 	sll	r10,r5,r4
   10154:	003fb506 	br	1002c <__pack_d+0x1e8>

00010158 <__unpack_d>:
   10158:	20c00117 	ldw	r3,4(r4)
   1015c:	22400017 	ldw	r9,0(r4)
   10160:	00800434 	movhi	r2,16
   10164:	10bfffc4 	addi	r2,r2,-1
   10168:	1808d53a 	srli	r4,r3,20
   1016c:	180cd7fa 	srli	r6,r3,31
   10170:	1894703a 	and	r10,r3,r2
   10174:	2201ffcc 	andi	r8,r4,2047
   10178:	281b883a 	mov	r13,r5
   1017c:	4817883a 	mov	r11,r9
   10180:	29800115 	stw	r6,4(r5)
   10184:	5019883a 	mov	r12,r10
   10188:	40001e1e 	bne	r8,zero,10204 <__unpack_d+0xac>
   1018c:	4a84b03a 	or	r2,r9,r10
   10190:	10001926 	beq	r2,zero,101f8 <__unpack_d+0xa0>
   10194:	4804d63a 	srli	r2,r9,24
   10198:	500c923a 	slli	r6,r10,8
   1019c:	013f0084 	movi	r4,-1022
   101a0:	00c40034 	movhi	r3,4096
   101a4:	18ffffc4 	addi	r3,r3,-1
   101a8:	118cb03a 	or	r6,r2,r6
   101ac:	008000c4 	movi	r2,3
   101b0:	480a923a 	slli	r5,r9,8
   101b4:	68800015 	stw	r2,0(r13)
   101b8:	69000215 	stw	r4,8(r13)
   101bc:	19800b36 	bltu	r3,r6,101ec <__unpack_d+0x94>
   101c0:	200f883a 	mov	r7,r4
   101c4:	1811883a 	mov	r8,r3
   101c8:	2945883a 	add	r2,r5,r5
   101cc:	1149803a 	cmpltu	r4,r2,r5
   101d0:	3187883a 	add	r3,r6,r6
   101d4:	20c9883a 	add	r4,r4,r3
   101d8:	100b883a 	mov	r5,r2
   101dc:	200d883a 	mov	r6,r4
   101e0:	39ffffc4 	addi	r7,r7,-1
   101e4:	413ff82e 	bgeu	r8,r4,101c8 <__unpack_d+0x70>
   101e8:	69c00215 	stw	r7,8(r13)
   101ec:	69800415 	stw	r6,16(r13)
   101f0:	69400315 	stw	r5,12(r13)
   101f4:	f800283a 	ret
   101f8:	00800084 	movi	r2,2
   101fc:	28800015 	stw	r2,0(r5)
   10200:	f800283a 	ret
   10204:	0081ffc4 	movi	r2,2047
   10208:	40800f26 	beq	r8,r2,10248 <__unpack_d+0xf0>
   1020c:	480cd63a 	srli	r6,r9,24
   10210:	5006923a 	slli	r3,r10,8
   10214:	4804923a 	slli	r2,r9,8
   10218:	0009883a 	mov	r4,zero
   1021c:	30c6b03a 	or	r3,r6,r3
   10220:	01440034 	movhi	r5,4096
   10224:	110cb03a 	or	r6,r2,r4
   10228:	423f0044 	addi	r8,r8,-1023
   1022c:	194eb03a 	or	r7,r3,r5
   10230:	008000c4 	movi	r2,3
   10234:	69c00415 	stw	r7,16(r13)
   10238:	6a000215 	stw	r8,8(r13)
   1023c:	68800015 	stw	r2,0(r13)
   10240:	69800315 	stw	r6,12(r13)
   10244:	f800283a 	ret
   10248:	4a84b03a 	or	r2,r9,r10
   1024c:	1000031e 	bne	r2,zero,1025c <__unpack_d+0x104>
   10250:	00800104 	movi	r2,4
   10254:	28800015 	stw	r2,0(r5)
   10258:	f800283a 	ret
   1025c:	0009883a 	mov	r4,zero
   10260:	01400234 	movhi	r5,8
   10264:	4904703a 	and	r2,r9,r4
   10268:	5146703a 	and	r3,r10,r5
   1026c:	10c4b03a 	or	r2,r2,r3
   10270:	10000526 	beq	r2,zero,10288 <__unpack_d+0x130>
   10274:	00800044 	movi	r2,1
   10278:	68800015 	stw	r2,0(r13)
   1027c:	6b000415 	stw	r12,16(r13)
   10280:	6ac00315 	stw	r11,12(r13)
   10284:	f800283a 	ret
   10288:	68000015 	stw	zero,0(r13)
   1028c:	003ffb06 	br	1027c <__unpack_d+0x124>

00010290 <__fpcmp_parts_d>:
   10290:	21800017 	ldw	r6,0(r4)
   10294:	00c00044 	movi	r3,1
   10298:	19800a2e 	bgeu	r3,r6,102c4 <__fpcmp_parts_d+0x34>
   1029c:	28800017 	ldw	r2,0(r5)
   102a0:	1880082e 	bgeu	r3,r2,102c4 <__fpcmp_parts_d+0x34>
   102a4:	00c00104 	movi	r3,4
   102a8:	30c02626 	beq	r6,r3,10344 <__fpcmp_parts_d+0xb4>
   102ac:	10c02226 	beq	r2,r3,10338 <__fpcmp_parts_d+0xa8>
   102b0:	00c00084 	movi	r3,2
   102b4:	30c00526 	beq	r6,r3,102cc <__fpcmp_parts_d+0x3c>
   102b8:	10c0071e 	bne	r2,r3,102d8 <__fpcmp_parts_d+0x48>
   102bc:	20800117 	ldw	r2,4(r4)
   102c0:	1000091e 	bne	r2,zero,102e8 <__fpcmp_parts_d+0x58>
   102c4:	00800044 	movi	r2,1
   102c8:	f800283a 	ret
   102cc:	10c01a1e 	bne	r2,r3,10338 <__fpcmp_parts_d+0xa8>
   102d0:	0005883a 	mov	r2,zero
   102d4:	f800283a 	ret
   102d8:	22000117 	ldw	r8,4(r4)
   102dc:	28800117 	ldw	r2,4(r5)
   102e0:	40800326 	beq	r8,r2,102f0 <__fpcmp_parts_d+0x60>
   102e4:	403ff726 	beq	r8,zero,102c4 <__fpcmp_parts_d+0x34>
   102e8:	00bfffc4 	movi	r2,-1
   102ec:	f800283a 	ret
   102f0:	20c00217 	ldw	r3,8(r4)
   102f4:	28800217 	ldw	r2,8(r5)
   102f8:	10fffa16 	blt	r2,r3,102e4 <__fpcmp_parts_d+0x54>
   102fc:	18800916 	blt	r3,r2,10324 <__fpcmp_parts_d+0x94>
   10300:	21c00417 	ldw	r7,16(r4)
   10304:	28c00417 	ldw	r3,16(r5)
   10308:	21800317 	ldw	r6,12(r4)
   1030c:	28800317 	ldw	r2,12(r5)
   10310:	19fff436 	bltu	r3,r7,102e4 <__fpcmp_parts_d+0x54>
   10314:	38c00526 	beq	r7,r3,1032c <__fpcmp_parts_d+0x9c>
   10318:	38c00236 	bltu	r7,r3,10324 <__fpcmp_parts_d+0x94>
   1031c:	19ffec1e 	bne	r3,r7,102d0 <__fpcmp_parts_d+0x40>
   10320:	30bfeb2e 	bgeu	r6,r2,102d0 <__fpcmp_parts_d+0x40>
   10324:	403fe71e 	bne	r8,zero,102c4 <__fpcmp_parts_d+0x34>
   10328:	003fef06 	br	102e8 <__fpcmp_parts_d+0x58>
   1032c:	11bffa2e 	bgeu	r2,r6,10318 <__fpcmp_parts_d+0x88>
   10330:	403fe426 	beq	r8,zero,102c4 <__fpcmp_parts_d+0x34>
   10334:	003fec06 	br	102e8 <__fpcmp_parts_d+0x58>
   10338:	28800117 	ldw	r2,4(r5)
   1033c:	103fe11e 	bne	r2,zero,102c4 <__fpcmp_parts_d+0x34>
   10340:	003fe906 	br	102e8 <__fpcmp_parts_d+0x58>
   10344:	11bfdd1e 	bne	r2,r6,102bc <__fpcmp_parts_d+0x2c>
   10348:	28c00117 	ldw	r3,4(r5)
   1034c:	20800117 	ldw	r2,4(r4)
   10350:	1885c83a 	sub	r2,r3,r2
   10354:	f800283a 	ret

00010358 <__pack_f>:
   10358:	20c00017 	ldw	r3,0(r4)
   1035c:	01c00044 	movi	r7,1
   10360:	21800317 	ldw	r6,12(r4)
   10364:	21400117 	ldw	r5,4(r4)
   10368:	38c02d2e 	bgeu	r7,r3,10420 <__pack_f+0xc8>
   1036c:	00800104 	movi	r2,4
   10370:	18802826 	beq	r3,r2,10414 <__pack_f+0xbc>
   10374:	00800084 	movi	r2,2
   10378:	18800126 	beq	r3,r2,10380 <__pack_f+0x28>
   1037c:	3000101e 	bne	r6,zero,103c0 <__pack_f+0x68>
   10380:	000d883a 	mov	r6,zero
   10384:	0007883a 	mov	r3,zero
   10388:	19003fcc 	andi	r4,r3,255
   1038c:	200895fa 	slli	r4,r4,23
   10390:	00c02034 	movhi	r3,128
   10394:	18ffffc4 	addi	r3,r3,-1
   10398:	30c6703a 	and	r3,r6,r3
   1039c:	10a0002c 	andhi	r2,r2,32768
   103a0:	10c4b03a 	or	r2,r2,r3
   103a4:	280a97fa 	slli	r5,r5,31
   103a8:	1104b03a 	or	r2,r2,r4
   103ac:	00e00034 	movhi	r3,32768
   103b0:	18ffffc4 	addi	r3,r3,-1
   103b4:	10c4703a 	and	r2,r2,r3
   103b8:	1144b03a 	or	r2,r2,r5
   103bc:	f800283a 	ret
   103c0:	21000217 	ldw	r4,8(r4)
   103c4:	00bfe084 	movi	r2,-126
   103c8:	20801b16 	blt	r4,r2,10438 <__pack_f+0xe0>
   103cc:	00801fc4 	movi	r2,127
   103d0:	11001016 	blt	r2,r4,10414 <__pack_f+0xbc>
   103d4:	308e703a 	and	r7,r6,r2
   103d8:	2087883a 	add	r3,r4,r2
   103dc:	00801004 	movi	r2,64
   103e0:	38800526 	beq	r7,r2,103f8 <__pack_f+0xa0>
   103e4:	31800fc4 	addi	r6,r6,63
   103e8:	30000716 	blt	r6,zero,10408 <__pack_f+0xb0>
   103ec:	300490ba 	slli	r2,r6,2
   103f0:	100cd27a 	srli	r6,r2,9
   103f4:	003fe406 	br	10388 <__pack_f+0x30>
   103f8:	3080200c 	andi	r2,r6,128
   103fc:	103ffa26 	beq	r2,zero,103e8 <__pack_f+0x90>
   10400:	31cd883a 	add	r6,r6,r7
   10404:	003ff806 	br	103e8 <__pack_f+0x90>
   10408:	300cd07a 	srli	r6,r6,1
   1040c:	18c00044 	addi	r3,r3,1
   10410:	003ff606 	br	103ec <__pack_f+0x94>
   10414:	000d883a 	mov	r6,zero
   10418:	00ffffc4 	movi	r3,-1
   1041c:	003fda06 	br	10388 <__pack_f+0x30>
   10420:	31800434 	orhi	r6,r6,16
   10424:	00802034 	movhi	r2,128
   10428:	10bfffc4 	addi	r2,r2,-1
   1042c:	308c703a 	and	r6,r6,r2
   10430:	00ffffc4 	movi	r3,-1
   10434:	003fd406 	br	10388 <__pack_f+0x30>
   10438:	1109c83a 	sub	r4,r2,r4
   1043c:	00800644 	movi	r2,25
   10440:	11001216 	blt	r2,r4,1048c <__pack_f+0x134>
   10444:	3904983a 	sll	r2,r7,r4
   10448:	3106d83a 	srl	r3,r6,r4
   1044c:	10bfffc4 	addi	r2,r2,-1
   10450:	3084703a 	and	r2,r6,r2
   10454:	1004c03a 	cmpne	r2,r2,zero
   10458:	1886b03a 	or	r3,r3,r2
   1045c:	19001fcc 	andi	r4,r3,127
   10460:	00801004 	movi	r2,64
   10464:	20800c26 	beq	r4,r2,10498 <__pack_f+0x140>
   10468:	18c00fc4 	addi	r3,r3,63
   1046c:	00900034 	movhi	r2,16384
   10470:	10bfffc4 	addi	r2,r2,-1
   10474:	180cd1fa 	srli	r6,r3,7
   10478:	10c7803a 	cmpltu	r3,r2,r3
   1047c:	00802034 	movhi	r2,128
   10480:	10bfffc4 	addi	r2,r2,-1
   10484:	308c703a 	and	r6,r6,r2
   10488:	003fbf06 	br	10388 <__pack_f+0x30>
   1048c:	0007883a 	mov	r3,zero
   10490:	000d883a 	mov	r6,zero
   10494:	003ff906 	br	1047c <__pack_f+0x124>
   10498:	1880200c 	andi	r2,r3,128
   1049c:	10000126 	beq	r2,zero,104a4 <__pack_f+0x14c>
   104a0:	1907883a 	add	r3,r3,r4
   104a4:	180cd1fa 	srli	r6,r3,7
   104a8:	00900034 	movhi	r2,16384
   104ac:	10bfffc4 	addi	r2,r2,-1
   104b0:	10c7803a 	cmpltu	r3,r2,r3
   104b4:	003ff106 	br	1047c <__pack_f+0x124>

000104b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   104b8:	defff804 	addi	sp,sp,-32
   104bc:	dfc00715 	stw	ra,28(sp)
   104c0:	df000615 	stw	fp,24(sp)
   104c4:	df000604 	addi	fp,sp,24
   104c8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   104cc:	e0bffc17 	ldw	r2,-16(fp)
   104d0:	1004803a 	cmplt	r2,r2,zero
   104d4:	1000081e 	bne	r2,zero,104f8 <close+0x40>
   104d8:	e0bffc17 	ldw	r2,-16(fp)
   104dc:	10800324 	muli	r2,r2,12
   104e0:	1007883a 	mov	r3,r2
   104e4:	00800074 	movhi	r2,1
   104e8:	10905f04 	addi	r2,r2,16764
   104ec:	1887883a 	add	r3,r3,r2
   104f0:	e0ffff15 	stw	r3,-4(fp)
   104f4:	00000106 	br	104fc <close+0x44>
   104f8:	e03fff15 	stw	zero,-4(fp)
   104fc:	e0bfff17 	ldw	r2,-4(fp)
   10500:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   10504:	e0bffb17 	ldw	r2,-20(fp)
   10508:	1005003a 	cmpeq	r2,r2,zero
   1050c:	10001d1e 	bne	r2,zero,10584 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   10510:	e0bffb17 	ldw	r2,-20(fp)
   10514:	10800017 	ldw	r2,0(r2)
   10518:	10800417 	ldw	r2,16(r2)
   1051c:	1005003a 	cmpeq	r2,r2,zero
   10520:	1000071e 	bne	r2,zero,10540 <close+0x88>
   10524:	e0bffb17 	ldw	r2,-20(fp)
   10528:	10800017 	ldw	r2,0(r2)
   1052c:	10800417 	ldw	r2,16(r2)
   10530:	e13ffb17 	ldw	r4,-20(fp)
   10534:	103ee83a 	callr	r2
   10538:	e0bffe15 	stw	r2,-8(fp)
   1053c:	00000106 	br	10544 <close+0x8c>
   10540:	e03ffe15 	stw	zero,-8(fp)
   10544:	e0bffe17 	ldw	r2,-8(fp)
   10548:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   1054c:	e13ffc17 	ldw	r4,-16(fp)
   10550:	0010cfc0 	call	10cfc <alt_release_fd>
    if (rval < 0)
   10554:	e0bffa17 	ldw	r2,-24(fp)
   10558:	1004403a 	cmpge	r2,r2,zero
   1055c:	1000071e 	bne	r2,zero,1057c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   10560:	00105b40 	call	105b4 <alt_get_errno>
   10564:	e0fffa17 	ldw	r3,-24(fp)
   10568:	00c7c83a 	sub	r3,zero,r3
   1056c:	10c00015 	stw	r3,0(r2)
      return -1;
   10570:	00bfffc4 	movi	r2,-1
   10574:	e0bffd15 	stw	r2,-12(fp)
   10578:	00000806 	br	1059c <close+0xe4>
    }
    return 0;
   1057c:	e03ffd15 	stw	zero,-12(fp)
   10580:	00000606 	br	1059c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10584:	00105b40 	call	105b4 <alt_get_errno>
   10588:	1007883a 	mov	r3,r2
   1058c:	00801444 	movi	r2,81
   10590:	18800015 	stw	r2,0(r3)
    return -1;
   10594:	00bfffc4 	movi	r2,-1
   10598:	e0bffd15 	stw	r2,-12(fp)
   1059c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   105a0:	e037883a 	mov	sp,fp
   105a4:	dfc00117 	ldw	ra,4(sp)
   105a8:	df000017 	ldw	fp,0(sp)
   105ac:	dec00204 	addi	sp,sp,8
   105b0:	f800283a 	ret

000105b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   105b4:	defffd04 	addi	sp,sp,-12
   105b8:	dfc00215 	stw	ra,8(sp)
   105bc:	df000115 	stw	fp,4(sp)
   105c0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   105c4:	00800074 	movhi	r2,1
   105c8:	1094e304 	addi	r2,r2,21388
   105cc:	10800017 	ldw	r2,0(r2)
   105d0:	1005003a 	cmpeq	r2,r2,zero
   105d4:	1000061e 	bne	r2,zero,105f0 <alt_get_errno+0x3c>
   105d8:	00800074 	movhi	r2,1
   105dc:	1094e304 	addi	r2,r2,21388
   105e0:	10800017 	ldw	r2,0(r2)
   105e4:	103ee83a 	callr	r2
   105e8:	e0bfff15 	stw	r2,-4(fp)
   105ec:	00000306 	br	105fc <alt_get_errno+0x48>
   105f0:	00800074 	movhi	r2,1
   105f4:	109b9c04 	addi	r2,r2,28272
   105f8:	e0bfff15 	stw	r2,-4(fp)
   105fc:	e0bfff17 	ldw	r2,-4(fp)
}
   10600:	e037883a 	mov	sp,fp
   10604:	dfc00117 	ldw	ra,4(sp)
   10608:	df000017 	ldw	fp,0(sp)
   1060c:	dec00204 	addi	sp,sp,8
   10610:	f800283a 	ret

00010614 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   10614:	defffc04 	addi	sp,sp,-16
   10618:	df000315 	stw	fp,12(sp)
   1061c:	df000304 	addi	fp,sp,12
   10620:	e13ffd15 	stw	r4,-12(fp)
   10624:	e17ffe15 	stw	r5,-8(fp)
   10628:	e1bfff15 	stw	r6,-4(fp)
  return len;
   1062c:	e0bfff17 	ldw	r2,-4(fp)
}
   10630:	e037883a 	mov	sp,fp
   10634:	df000017 	ldw	fp,0(sp)
   10638:	dec00104 	addi	sp,sp,4
   1063c:	f800283a 	ret

00010640 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   10640:	defff904 	addi	sp,sp,-28
   10644:	dfc00615 	stw	ra,24(sp)
   10648:	df000515 	stw	fp,20(sp)
   1064c:	df000504 	addi	fp,sp,20
   10650:	e13ffc15 	stw	r4,-16(fp)
   10654:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10658:	e0bffc17 	ldw	r2,-16(fp)
   1065c:	1004803a 	cmplt	r2,r2,zero
   10660:	1000081e 	bne	r2,zero,10684 <fstat+0x44>
   10664:	e0bffc17 	ldw	r2,-16(fp)
   10668:	10800324 	muli	r2,r2,12
   1066c:	1007883a 	mov	r3,r2
   10670:	00800074 	movhi	r2,1
   10674:	10905f04 	addi	r2,r2,16764
   10678:	1887883a 	add	r3,r3,r2
   1067c:	e0ffff15 	stw	r3,-4(fp)
   10680:	00000106 	br	10688 <fstat+0x48>
   10684:	e03fff15 	stw	zero,-4(fp)
   10688:	e0bfff17 	ldw	r2,-4(fp)
   1068c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   10690:	e0bffb17 	ldw	r2,-20(fp)
   10694:	1005003a 	cmpeq	r2,r2,zero
   10698:	1000121e 	bne	r2,zero,106e4 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   1069c:	e0bffb17 	ldw	r2,-20(fp)
   106a0:	10800017 	ldw	r2,0(r2)
   106a4:	10800817 	ldw	r2,32(r2)
   106a8:	1005003a 	cmpeq	r2,r2,zero
   106ac:	1000081e 	bne	r2,zero,106d0 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   106b0:	e0bffb17 	ldw	r2,-20(fp)
   106b4:	10800017 	ldw	r2,0(r2)
   106b8:	10800817 	ldw	r2,32(r2)
   106bc:	e13ffb17 	ldw	r4,-20(fp)
   106c0:	e17ffd17 	ldw	r5,-12(fp)
   106c4:	103ee83a 	callr	r2
   106c8:	e0bffe15 	stw	r2,-8(fp)
   106cc:	00000b06 	br	106fc <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   106d0:	e0fffd17 	ldw	r3,-12(fp)
   106d4:	00880004 	movi	r2,8192
   106d8:	18800115 	stw	r2,4(r3)
      return 0;
   106dc:	e03ffe15 	stw	zero,-8(fp)
   106e0:	00000606 	br	106fc <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   106e4:	00107140 	call	10714 <alt_get_errno>
   106e8:	1007883a 	mov	r3,r2
   106ec:	00801444 	movi	r2,81
   106f0:	18800015 	stw	r2,0(r3)
    return -1;
   106f4:	00bfffc4 	movi	r2,-1
   106f8:	e0bffe15 	stw	r2,-8(fp)
   106fc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   10700:	e037883a 	mov	sp,fp
   10704:	dfc00117 	ldw	ra,4(sp)
   10708:	df000017 	ldw	fp,0(sp)
   1070c:	dec00204 	addi	sp,sp,8
   10710:	f800283a 	ret

00010714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10714:	defffd04 	addi	sp,sp,-12
   10718:	dfc00215 	stw	ra,8(sp)
   1071c:	df000115 	stw	fp,4(sp)
   10720:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10724:	00800074 	movhi	r2,1
   10728:	1094e304 	addi	r2,r2,21388
   1072c:	10800017 	ldw	r2,0(r2)
   10730:	1005003a 	cmpeq	r2,r2,zero
   10734:	1000061e 	bne	r2,zero,10750 <alt_get_errno+0x3c>
   10738:	00800074 	movhi	r2,1
   1073c:	1094e304 	addi	r2,r2,21388
   10740:	10800017 	ldw	r2,0(r2)
   10744:	103ee83a 	callr	r2
   10748:	e0bfff15 	stw	r2,-4(fp)
   1074c:	00000306 	br	1075c <alt_get_errno+0x48>
   10750:	00800074 	movhi	r2,1
   10754:	109b9c04 	addi	r2,r2,28272
   10758:	e0bfff15 	stw	r2,-4(fp)
   1075c:	e0bfff17 	ldw	r2,-4(fp)
}
   10760:	e037883a 	mov	sp,fp
   10764:	dfc00117 	ldw	ra,4(sp)
   10768:	df000017 	ldw	fp,0(sp)
   1076c:	dec00204 	addi	sp,sp,8
   10770:	f800283a 	ret

00010774 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   10774:	deffeb04 	addi	sp,sp,-84
   10778:	dfc01415 	stw	ra,80(sp)
   1077c:	df001315 	stw	fp,76(sp)
   10780:	df001304 	addi	fp,sp,76
   10784:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10788:	e0bffd17 	ldw	r2,-12(fp)
   1078c:	1004803a 	cmplt	r2,r2,zero
   10790:	1000081e 	bne	r2,zero,107b4 <isatty+0x40>
   10794:	e0bffd17 	ldw	r2,-12(fp)
   10798:	10800324 	muli	r2,r2,12
   1079c:	1007883a 	mov	r3,r2
   107a0:	00800074 	movhi	r2,1
   107a4:	10905f04 	addi	r2,r2,16764
   107a8:	1887883a 	add	r3,r3,r2
   107ac:	e0ffff15 	stw	r3,-4(fp)
   107b0:	00000106 	br	107b8 <isatty+0x44>
   107b4:	e03fff15 	stw	zero,-4(fp)
   107b8:	e0bfff17 	ldw	r2,-4(fp)
   107bc:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   107c0:	e0bfed17 	ldw	r2,-76(fp)
   107c4:	1005003a 	cmpeq	r2,r2,zero
   107c8:	10000f1e 	bne	r2,zero,10808 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   107cc:	e0bfed17 	ldw	r2,-76(fp)
   107d0:	10800017 	ldw	r2,0(r2)
   107d4:	10800817 	ldw	r2,32(r2)
   107d8:	1004c03a 	cmpne	r2,r2,zero
   107dc:	1000031e 	bne	r2,zero,107ec <isatty+0x78>
    {
      return 1;
   107e0:	00800044 	movi	r2,1
   107e4:	e0bffe15 	stw	r2,-8(fp)
   107e8:	00000c06 	br	1081c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   107ec:	e17fee04 	addi	r5,fp,-72
   107f0:	e13ffd17 	ldw	r4,-12(fp)
   107f4:	00106400 	call	10640 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   107f8:	e0bfef17 	ldw	r2,-68(fp)
   107fc:	10880020 	cmpeqi	r2,r2,8192
   10800:	e0bffe15 	stw	r2,-8(fp)
   10804:	00000506 	br	1081c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   10808:	00108340 	call	10834 <alt_get_errno>
   1080c:	1007883a 	mov	r3,r2
   10810:	00801444 	movi	r2,81
   10814:	18800015 	stw	r2,0(r3)
    return 0;
   10818:	e03ffe15 	stw	zero,-8(fp)
   1081c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   10820:	e037883a 	mov	sp,fp
   10824:	dfc00117 	ldw	ra,4(sp)
   10828:	df000017 	ldw	fp,0(sp)
   1082c:	dec00204 	addi	sp,sp,8
   10830:	f800283a 	ret

00010834 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10834:	defffd04 	addi	sp,sp,-12
   10838:	dfc00215 	stw	ra,8(sp)
   1083c:	df000115 	stw	fp,4(sp)
   10840:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10844:	00800074 	movhi	r2,1
   10848:	1094e304 	addi	r2,r2,21388
   1084c:	10800017 	ldw	r2,0(r2)
   10850:	1005003a 	cmpeq	r2,r2,zero
   10854:	1000061e 	bne	r2,zero,10870 <alt_get_errno+0x3c>
   10858:	00800074 	movhi	r2,1
   1085c:	1094e304 	addi	r2,r2,21388
   10860:	10800017 	ldw	r2,0(r2)
   10864:	103ee83a 	callr	r2
   10868:	e0bfff15 	stw	r2,-4(fp)
   1086c:	00000306 	br	1087c <alt_get_errno+0x48>
   10870:	00800074 	movhi	r2,1
   10874:	109b9c04 	addi	r2,r2,28272
   10878:	e0bfff15 	stw	r2,-4(fp)
   1087c:	e0bfff17 	ldw	r2,-4(fp)
}
   10880:	e037883a 	mov	sp,fp
   10884:	dfc00117 	ldw	ra,4(sp)
   10888:	df000017 	ldw	fp,0(sp)
   1088c:	dec00204 	addi	sp,sp,8
   10890:	f800283a 	ret

00010894 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   10894:	defffe04 	addi	sp,sp,-8
   10898:	dfc00115 	stw	ra,4(sp)
   1089c:	df000015 	stw	fp,0(sp)
   108a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   108a4:	01000074 	movhi	r4,1
   108a8:	2114e804 	addi	r4,r4,21408
   108ac:	01400074 	movhi	r5,1
   108b0:	294e3704 	addi	r5,r5,14556
   108b4:	01800074 	movhi	r6,1
   108b8:	3194e804 	addi	r6,r6,21408
   108bc:	00109140 	call	10914 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   108c0:	01000034 	movhi	r4,0
   108c4:	21000804 	addi	r4,r4,32
   108c8:	01400034 	movhi	r5,0
   108cc:	29400804 	addi	r5,r5,32
   108d0:	01800034 	movhi	r6,0
   108d4:	31806d04 	addi	r6,r6,436
   108d8:	00109140 	call	10914 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   108dc:	01000074 	movhi	r4,1
   108e0:	210bd204 	addi	r4,r4,12104
   108e4:	01400074 	movhi	r5,1
   108e8:	294bd204 	addi	r5,r5,12104
   108ec:	01800074 	movhi	r6,1
   108f0:	318e3704 	addi	r6,r6,14556
   108f4:	00109140 	call	10914 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   108f8:	0011d600 	call	11d60 <alt_dcache_flush_all>
  alt_icache_flush_all();
   108fc:	0011f800 	call	11f80 <alt_icache_flush_all>
}
   10900:	e037883a 	mov	sp,fp
   10904:	dfc00117 	ldw	ra,4(sp)
   10908:	df000017 	ldw	fp,0(sp)
   1090c:	dec00204 	addi	sp,sp,8
   10910:	f800283a 	ret

00010914 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   10914:	defffc04 	addi	sp,sp,-16
   10918:	df000315 	stw	fp,12(sp)
   1091c:	df000304 	addi	fp,sp,12
   10920:	e13ffd15 	stw	r4,-12(fp)
   10924:	e17ffe15 	stw	r5,-8(fp)
   10928:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   1092c:	e0fffe17 	ldw	r3,-8(fp)
   10930:	e0bffd17 	ldw	r2,-12(fp)
   10934:	18800e26 	beq	r3,r2,10970 <alt_load_section+0x5c>
  {
    while( to != end )
   10938:	00000a06 	br	10964 <alt_load_section+0x50>
    {
      *to++ = *from++;
   1093c:	e0bffd17 	ldw	r2,-12(fp)
   10940:	10c00017 	ldw	r3,0(r2)
   10944:	e0bffe17 	ldw	r2,-8(fp)
   10948:	10c00015 	stw	r3,0(r2)
   1094c:	e0bffe17 	ldw	r2,-8(fp)
   10950:	10800104 	addi	r2,r2,4
   10954:	e0bffe15 	stw	r2,-8(fp)
   10958:	e0bffd17 	ldw	r2,-12(fp)
   1095c:	10800104 	addi	r2,r2,4
   10960:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   10964:	e0fffe17 	ldw	r3,-8(fp)
   10968:	e0bfff17 	ldw	r2,-4(fp)
   1096c:	18bff31e 	bne	r3,r2,1093c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   10970:	e037883a 	mov	sp,fp
   10974:	df000017 	ldw	fp,0(sp)
   10978:	dec00104 	addi	sp,sp,4
   1097c:	f800283a 	ret

00010980 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   10980:	defff804 	addi	sp,sp,-32
   10984:	dfc00715 	stw	ra,28(sp)
   10988:	df000615 	stw	fp,24(sp)
   1098c:	df000604 	addi	fp,sp,24
   10990:	e13ffc15 	stw	r4,-16(fp)
   10994:	e17ffd15 	stw	r5,-12(fp)
   10998:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1099c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   109a0:	e0bffc17 	ldw	r2,-16(fp)
   109a4:	1004803a 	cmplt	r2,r2,zero
   109a8:	1000081e 	bne	r2,zero,109cc <lseek+0x4c>
   109ac:	e0bffc17 	ldw	r2,-16(fp)
   109b0:	10800324 	muli	r2,r2,12
   109b4:	1007883a 	mov	r3,r2
   109b8:	00800074 	movhi	r2,1
   109bc:	10905f04 	addi	r2,r2,16764
   109c0:	1887883a 	add	r3,r3,r2
   109c4:	e0ffff15 	stw	r3,-4(fp)
   109c8:	00000106 	br	109d0 <lseek+0x50>
   109cc:	e03fff15 	stw	zero,-4(fp)
   109d0:	e0bfff17 	ldw	r2,-4(fp)
   109d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   109d8:	e0bffb17 	ldw	r2,-20(fp)
   109dc:	1005003a 	cmpeq	r2,r2,zero
   109e0:	1000111e 	bne	r2,zero,10a28 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   109e4:	e0bffb17 	ldw	r2,-20(fp)
   109e8:	10800017 	ldw	r2,0(r2)
   109ec:	10800717 	ldw	r2,28(r2)
   109f0:	1005003a 	cmpeq	r2,r2,zero
   109f4:	1000091e 	bne	r2,zero,10a1c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   109f8:	e0bffb17 	ldw	r2,-20(fp)
   109fc:	10800017 	ldw	r2,0(r2)
   10a00:	10800717 	ldw	r2,28(r2)
   10a04:	e13ffb17 	ldw	r4,-20(fp)
   10a08:	e17ffd17 	ldw	r5,-12(fp)
   10a0c:	e1bffe17 	ldw	r6,-8(fp)
   10a10:	103ee83a 	callr	r2
   10a14:	e0bffa15 	stw	r2,-24(fp)
   10a18:	00000506 	br	10a30 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   10a1c:	00bfde84 	movi	r2,-134
   10a20:	e0bffa15 	stw	r2,-24(fp)
   10a24:	00000206 	br	10a30 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   10a28:	00bfebc4 	movi	r2,-81
   10a2c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   10a30:	e0bffa17 	ldw	r2,-24(fp)
   10a34:	1004403a 	cmpge	r2,r2,zero
   10a38:	1000071e 	bne	r2,zero,10a58 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   10a3c:	0010a700 	call	10a70 <alt_get_errno>
   10a40:	1007883a 	mov	r3,r2
   10a44:	e0bffa17 	ldw	r2,-24(fp)
   10a48:	0085c83a 	sub	r2,zero,r2
   10a4c:	18800015 	stw	r2,0(r3)
    rc = -1;
   10a50:	00bfffc4 	movi	r2,-1
   10a54:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   10a58:	e0bffa17 	ldw	r2,-24(fp)
}
   10a5c:	e037883a 	mov	sp,fp
   10a60:	dfc00117 	ldw	ra,4(sp)
   10a64:	df000017 	ldw	fp,0(sp)
   10a68:	dec00204 	addi	sp,sp,8
   10a6c:	f800283a 	ret

00010a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10a70:	defffd04 	addi	sp,sp,-12
   10a74:	dfc00215 	stw	ra,8(sp)
   10a78:	df000115 	stw	fp,4(sp)
   10a7c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10a80:	00800074 	movhi	r2,1
   10a84:	1094e304 	addi	r2,r2,21388
   10a88:	10800017 	ldw	r2,0(r2)
   10a8c:	1005003a 	cmpeq	r2,r2,zero
   10a90:	1000061e 	bne	r2,zero,10aac <alt_get_errno+0x3c>
   10a94:	00800074 	movhi	r2,1
   10a98:	1094e304 	addi	r2,r2,21388
   10a9c:	10800017 	ldw	r2,0(r2)
   10aa0:	103ee83a 	callr	r2
   10aa4:	e0bfff15 	stw	r2,-4(fp)
   10aa8:	00000306 	br	10ab8 <alt_get_errno+0x48>
   10aac:	00800074 	movhi	r2,1
   10ab0:	109b9c04 	addi	r2,r2,28272
   10ab4:	e0bfff15 	stw	r2,-4(fp)
   10ab8:	e0bfff17 	ldw	r2,-4(fp)
}
   10abc:	e037883a 	mov	sp,fp
   10ac0:	dfc00117 	ldw	ra,4(sp)
   10ac4:	df000017 	ldw	fp,0(sp)
   10ac8:	dec00204 	addi	sp,sp,8
   10acc:	f800283a 	ret

00010ad0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10ad0:	defffd04 	addi	sp,sp,-12
   10ad4:	dfc00215 	stw	ra,8(sp)
   10ad8:	df000115 	stw	fp,4(sp)
   10adc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10ae0:	0009883a 	mov	r4,zero
   10ae4:	0010f980 	call	10f98 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10ae8:	0010fcc0 	call	10fcc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   10aec:	01000074 	movhi	r4,1
   10af0:	210e2d04 	addi	r4,r4,14516
   10af4:	01400074 	movhi	r5,1
   10af8:	294e2d04 	addi	r5,r5,14516
   10afc:	01800074 	movhi	r6,1
   10b00:	318e2d04 	addi	r6,r6,14516
   10b04:	00123400 	call	12340 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   10b08:	0011eb80 	call	11eb8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   10b0c:	01000074 	movhi	r4,1
   10b10:	2107c704 	addi	r4,r4,7964
   10b14:	0012b3c0 	call	12b3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   10b18:	d126c917 	ldw	r4,-25820(gp)
   10b1c:	d166ca17 	ldw	r5,-25816(gp)
   10b20:	d1a6cb17 	ldw	r6,-25812(gp)
   10b24:	00010e40 	call	10e4 <main>
   10b28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   10b2c:	01000044 	movi	r4,1
   10b30:	00104b80 	call	104b8 <close>
  exit (result);
   10b34:	e13fff17 	ldw	r4,-4(fp)
   10b38:	0012b500 	call	12b50 <exit>

00010b3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   10b3c:	defffe04 	addi	sp,sp,-8
   10b40:	df000115 	stw	fp,4(sp)
   10b44:	df000104 	addi	fp,sp,4
   10b48:	e13fff15 	stw	r4,-4(fp)
}
   10b4c:	e037883a 	mov	sp,fp
   10b50:	df000017 	ldw	fp,0(sp)
   10b54:	dec00104 	addi	sp,sp,4
   10b58:	f800283a 	ret

00010b5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   10b5c:	defffe04 	addi	sp,sp,-8
   10b60:	df000115 	stw	fp,4(sp)
   10b64:	df000104 	addi	fp,sp,4
   10b68:	e13fff15 	stw	r4,-4(fp)
}
   10b6c:	e037883a 	mov	sp,fp
   10b70:	df000017 	ldw	fp,0(sp)
   10b74:	dec00104 	addi	sp,sp,4
   10b78:	f800283a 	ret

00010b7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   10b7c:	defff704 	addi	sp,sp,-36
   10b80:	dfc00815 	stw	ra,32(sp)
   10b84:	df000715 	stw	fp,28(sp)
   10b88:	df000704 	addi	fp,sp,28
   10b8c:	e13ffb15 	stw	r4,-20(fp)
   10b90:	e17ffc15 	stw	r5,-16(fp)
   10b94:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10b98:	e0bffb17 	ldw	r2,-20(fp)
   10b9c:	1004803a 	cmplt	r2,r2,zero
   10ba0:	1000081e 	bne	r2,zero,10bc4 <read+0x48>
   10ba4:	e0bffb17 	ldw	r2,-20(fp)
   10ba8:	10800324 	muli	r2,r2,12
   10bac:	1007883a 	mov	r3,r2
   10bb0:	00800074 	movhi	r2,1
   10bb4:	10905f04 	addi	r2,r2,16764
   10bb8:	1887883a 	add	r3,r3,r2
   10bbc:	e0ffff15 	stw	r3,-4(fp)
   10bc0:	00000106 	br	10bc8 <read+0x4c>
   10bc4:	e03fff15 	stw	zero,-4(fp)
   10bc8:	e0bfff17 	ldw	r2,-4(fp)
   10bcc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   10bd0:	e0bffa17 	ldw	r2,-24(fp)
   10bd4:	1005003a 	cmpeq	r2,r2,zero
   10bd8:	1000241e 	bne	r2,zero,10c6c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   10bdc:	e0bffa17 	ldw	r2,-24(fp)
   10be0:	10800217 	ldw	r2,8(r2)
   10be4:	108000cc 	andi	r2,r2,3
   10be8:	10800060 	cmpeqi	r2,r2,1
   10bec:	10001a1e 	bne	r2,zero,10c58 <read+0xdc>
   10bf0:	e0bffa17 	ldw	r2,-24(fp)
   10bf4:	10800017 	ldw	r2,0(r2)
   10bf8:	10800517 	ldw	r2,20(r2)
   10bfc:	1005003a 	cmpeq	r2,r2,zero
   10c00:	1000151e 	bne	r2,zero,10c58 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   10c04:	e0bffa17 	ldw	r2,-24(fp)
   10c08:	10800017 	ldw	r2,0(r2)
   10c0c:	10800517 	ldw	r2,20(r2)
   10c10:	e17ffc17 	ldw	r5,-16(fp)
   10c14:	e1bffd17 	ldw	r6,-12(fp)
   10c18:	e13ffa17 	ldw	r4,-24(fp)
   10c1c:	103ee83a 	callr	r2
   10c20:	e0bff915 	stw	r2,-28(fp)
   10c24:	e0bff917 	ldw	r2,-28(fp)
   10c28:	1004403a 	cmpge	r2,r2,zero
   10c2c:	1000071e 	bne	r2,zero,10c4c <read+0xd0>
        {
          ALT_ERRNO = -rval;
   10c30:	0010c9c0 	call	10c9c <alt_get_errno>
   10c34:	e0fff917 	ldw	r3,-28(fp)
   10c38:	00c7c83a 	sub	r3,zero,r3
   10c3c:	10c00015 	stw	r3,0(r2)
          return -1;
   10c40:	00bfffc4 	movi	r2,-1
   10c44:	e0bffe15 	stw	r2,-8(fp)
   10c48:	00000e06 	br	10c84 <read+0x108>
        }
        return rval;
   10c4c:	e0bff917 	ldw	r2,-28(fp)
   10c50:	e0bffe15 	stw	r2,-8(fp)
   10c54:	00000b06 	br	10c84 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   10c58:	0010c9c0 	call	10c9c <alt_get_errno>
   10c5c:	1007883a 	mov	r3,r2
   10c60:	00800344 	movi	r2,13
   10c64:	18800015 	stw	r2,0(r3)
   10c68:	00000406 	br	10c7c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   10c6c:	0010c9c0 	call	10c9c <alt_get_errno>
   10c70:	1007883a 	mov	r3,r2
   10c74:	00801444 	movi	r2,81
   10c78:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10c7c:	00bfffc4 	movi	r2,-1
   10c80:	e0bffe15 	stw	r2,-8(fp)
   10c84:	e0bffe17 	ldw	r2,-8(fp)
}
   10c88:	e037883a 	mov	sp,fp
   10c8c:	dfc00117 	ldw	ra,4(sp)
   10c90:	df000017 	ldw	fp,0(sp)
   10c94:	dec00204 	addi	sp,sp,8
   10c98:	f800283a 	ret

00010c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10c9c:	defffd04 	addi	sp,sp,-12
   10ca0:	dfc00215 	stw	ra,8(sp)
   10ca4:	df000115 	stw	fp,4(sp)
   10ca8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10cac:	00800074 	movhi	r2,1
   10cb0:	1094e304 	addi	r2,r2,21388
   10cb4:	10800017 	ldw	r2,0(r2)
   10cb8:	1005003a 	cmpeq	r2,r2,zero
   10cbc:	1000061e 	bne	r2,zero,10cd8 <alt_get_errno+0x3c>
   10cc0:	00800074 	movhi	r2,1
   10cc4:	1094e304 	addi	r2,r2,21388
   10cc8:	10800017 	ldw	r2,0(r2)
   10ccc:	103ee83a 	callr	r2
   10cd0:	e0bfff15 	stw	r2,-4(fp)
   10cd4:	00000306 	br	10ce4 <alt_get_errno+0x48>
   10cd8:	00800074 	movhi	r2,1
   10cdc:	109b9c04 	addi	r2,r2,28272
   10ce0:	e0bfff15 	stw	r2,-4(fp)
   10ce4:	e0bfff17 	ldw	r2,-4(fp)
}
   10ce8:	e037883a 	mov	sp,fp
   10cec:	dfc00117 	ldw	ra,4(sp)
   10cf0:	df000017 	ldw	fp,0(sp)
   10cf4:	dec00204 	addi	sp,sp,8
   10cf8:	f800283a 	ret

00010cfc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   10cfc:	defffe04 	addi	sp,sp,-8
   10d00:	df000115 	stw	fp,4(sp)
   10d04:	df000104 	addi	fp,sp,4
   10d08:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   10d0c:	e0bfff17 	ldw	r2,-4(fp)
   10d10:	108000d0 	cmplti	r2,r2,3
   10d14:	10000d1e 	bne	r2,zero,10d4c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   10d18:	e0bfff17 	ldw	r2,-4(fp)
   10d1c:	00c00074 	movhi	r3,1
   10d20:	18d05f04 	addi	r3,r3,16764
   10d24:	10800324 	muli	r2,r2,12
   10d28:	10c5883a 	add	r2,r2,r3
   10d2c:	10800204 	addi	r2,r2,8
   10d30:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   10d34:	e0bfff17 	ldw	r2,-4(fp)
   10d38:	00c00074 	movhi	r3,1
   10d3c:	18d05f04 	addi	r3,r3,16764
   10d40:	10800324 	muli	r2,r2,12
   10d44:	10c5883a 	add	r2,r2,r3
   10d48:	10000015 	stw	zero,0(r2)
  }
}
   10d4c:	e037883a 	mov	sp,fp
   10d50:	df000017 	ldw	fp,0(sp)
   10d54:	dec00104 	addi	sp,sp,4
   10d58:	f800283a 	ret

00010d5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   10d5c:	defff804 	addi	sp,sp,-32
   10d60:	df000715 	stw	fp,28(sp)
   10d64:	df000704 	addi	fp,sp,28
   10d68:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   10d6c:	0005303a 	rdctl	r2,status
   10d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   10d74:	e0fffb17 	ldw	r3,-20(fp)
   10d78:	00bfff84 	movi	r2,-2
   10d7c:	1884703a 	and	r2,r3,r2
   10d80:	1001703a 	wrctl	status,r2
  
  return context;
   10d84:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   10d88:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   10d8c:	d0a00d17 	ldw	r2,-32716(gp)
   10d90:	10c000c4 	addi	r3,r2,3
   10d94:	00bfff04 	movi	r2,-4
   10d98:	1884703a 	and	r2,r3,r2
   10d9c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   10da0:	d0e00d17 	ldw	r3,-32716(gp)
   10da4:	e0bffe17 	ldw	r2,-8(fp)
   10da8:	1887883a 	add	r3,r3,r2
   10dac:	00802034 	movhi	r2,128
   10db0:	10800004 	addi	r2,r2,0
   10db4:	10c0072e 	bgeu	r2,r3,10dd4 <sbrk+0x78>
   10db8:	e0bffd17 	ldw	r2,-12(fp)
   10dbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   10dc0:	e0bffa17 	ldw	r2,-24(fp)
   10dc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   10dc8:	00bfffc4 	movi	r2,-1
   10dcc:	e0bfff15 	stw	r2,-4(fp)
   10dd0:	00000c06 	br	10e04 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   10dd4:	d0a00d17 	ldw	r2,-32716(gp)
   10dd8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   10ddc:	d0e00d17 	ldw	r3,-32716(gp)
   10de0:	e0bffe17 	ldw	r2,-8(fp)
   10de4:	1885883a 	add	r2,r3,r2
   10de8:	d0a00d15 	stw	r2,-32716(gp)
   10dec:	e0bffd17 	ldw	r2,-12(fp)
   10df0:	e0bff915 	stw	r2,-28(fp)
   10df4:	e0bff917 	ldw	r2,-28(fp)
   10df8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   10dfc:	e0bffc17 	ldw	r2,-16(fp)
   10e00:	e0bfff15 	stw	r2,-4(fp)
   10e04:	e0bfff17 	ldw	r2,-4(fp)
} 
   10e08:	e037883a 	mov	sp,fp
   10e0c:	df000017 	ldw	fp,0(sp)
   10e10:	dec00104 	addi	sp,sp,4
   10e14:	f800283a 	ret

00010e18 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   10e18:	defff704 	addi	sp,sp,-36
   10e1c:	dfc00815 	stw	ra,32(sp)
   10e20:	df000715 	stw	fp,28(sp)
   10e24:	df000704 	addi	fp,sp,28
   10e28:	e13ffb15 	stw	r4,-20(fp)
   10e2c:	e17ffc15 	stw	r5,-16(fp)
   10e30:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   10e34:	e0bffb17 	ldw	r2,-20(fp)
   10e38:	1004803a 	cmplt	r2,r2,zero
   10e3c:	1000081e 	bne	r2,zero,10e60 <write+0x48>
   10e40:	e0bffb17 	ldw	r2,-20(fp)
   10e44:	10800324 	muli	r2,r2,12
   10e48:	1007883a 	mov	r3,r2
   10e4c:	00800074 	movhi	r2,1
   10e50:	10905f04 	addi	r2,r2,16764
   10e54:	1887883a 	add	r3,r3,r2
   10e58:	e0ffff15 	stw	r3,-4(fp)
   10e5c:	00000106 	br	10e64 <write+0x4c>
   10e60:	e03fff15 	stw	zero,-4(fp)
   10e64:	e0bfff17 	ldw	r2,-4(fp)
   10e68:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   10e6c:	e0bffa17 	ldw	r2,-24(fp)
   10e70:	1005003a 	cmpeq	r2,r2,zero
   10e74:	1000241e 	bne	r2,zero,10f08 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   10e78:	e0bffa17 	ldw	r2,-24(fp)
   10e7c:	10800217 	ldw	r2,8(r2)
   10e80:	108000cc 	andi	r2,r2,3
   10e84:	1005003a 	cmpeq	r2,r2,zero
   10e88:	10001a1e 	bne	r2,zero,10ef4 <write+0xdc>
   10e8c:	e0bffa17 	ldw	r2,-24(fp)
   10e90:	10800017 	ldw	r2,0(r2)
   10e94:	10800617 	ldw	r2,24(r2)
   10e98:	1005003a 	cmpeq	r2,r2,zero
   10e9c:	1000151e 	bne	r2,zero,10ef4 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   10ea0:	e0bffa17 	ldw	r2,-24(fp)
   10ea4:	10800017 	ldw	r2,0(r2)
   10ea8:	10800617 	ldw	r2,24(r2)
   10eac:	e17ffc17 	ldw	r5,-16(fp)
   10eb0:	e1bffd17 	ldw	r6,-12(fp)
   10eb4:	e13ffa17 	ldw	r4,-24(fp)
   10eb8:	103ee83a 	callr	r2
   10ebc:	e0bff915 	stw	r2,-28(fp)
   10ec0:	e0bff917 	ldw	r2,-28(fp)
   10ec4:	1004403a 	cmpge	r2,r2,zero
   10ec8:	1000071e 	bne	r2,zero,10ee8 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   10ecc:	0010f380 	call	10f38 <alt_get_errno>
   10ed0:	e0fff917 	ldw	r3,-28(fp)
   10ed4:	00c7c83a 	sub	r3,zero,r3
   10ed8:	10c00015 	stw	r3,0(r2)
        return -1;
   10edc:	00bfffc4 	movi	r2,-1
   10ee0:	e0bffe15 	stw	r2,-8(fp)
   10ee4:	00000e06 	br	10f20 <write+0x108>
      }
      return rval;
   10ee8:	e0bff917 	ldw	r2,-28(fp)
   10eec:	e0bffe15 	stw	r2,-8(fp)
   10ef0:	00000b06 	br	10f20 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   10ef4:	0010f380 	call	10f38 <alt_get_errno>
   10ef8:	1007883a 	mov	r3,r2
   10efc:	00800344 	movi	r2,13
   10f00:	18800015 	stw	r2,0(r3)
   10f04:	00000406 	br	10f18 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   10f08:	0010f380 	call	10f38 <alt_get_errno>
   10f0c:	1007883a 	mov	r3,r2
   10f10:	00801444 	movi	r2,81
   10f14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   10f18:	00bfffc4 	movi	r2,-1
   10f1c:	e0bffe15 	stw	r2,-8(fp)
   10f20:	e0bffe17 	ldw	r2,-8(fp)
}
   10f24:	e037883a 	mov	sp,fp
   10f28:	dfc00117 	ldw	ra,4(sp)
   10f2c:	df000017 	ldw	fp,0(sp)
   10f30:	dec00204 	addi	sp,sp,8
   10f34:	f800283a 	ret

00010f38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   10f38:	defffd04 	addi	sp,sp,-12
   10f3c:	dfc00215 	stw	ra,8(sp)
   10f40:	df000115 	stw	fp,4(sp)
   10f44:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   10f48:	00800074 	movhi	r2,1
   10f4c:	1094e304 	addi	r2,r2,21388
   10f50:	10800017 	ldw	r2,0(r2)
   10f54:	1005003a 	cmpeq	r2,r2,zero
   10f58:	1000061e 	bne	r2,zero,10f74 <alt_get_errno+0x3c>
   10f5c:	00800074 	movhi	r2,1
   10f60:	1094e304 	addi	r2,r2,21388
   10f64:	10800017 	ldw	r2,0(r2)
   10f68:	103ee83a 	callr	r2
   10f6c:	e0bfff15 	stw	r2,-4(fp)
   10f70:	00000306 	br	10f80 <alt_get_errno+0x48>
   10f74:	00800074 	movhi	r2,1
   10f78:	109b9c04 	addi	r2,r2,28272
   10f7c:	e0bfff15 	stw	r2,-4(fp)
   10f80:	e0bfff17 	ldw	r2,-4(fp)
}
   10f84:	e037883a 	mov	sp,fp
   10f88:	dfc00117 	ldw	ra,4(sp)
   10f8c:	df000017 	ldw	fp,0(sp)
   10f90:	dec00204 	addi	sp,sp,8
   10f94:	f800283a 	ret

00010f98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   10f98:	defffd04 	addi	sp,sp,-12
   10f9c:	dfc00215 	stw	ra,8(sp)
   10fa0:	df000115 	stw	fp,4(sp)
   10fa4:	df000104 	addi	fp,sp,4
   10fa8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   10fac:	00128200 	call	12820 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   10fb0:	00800044 	movi	r2,1
   10fb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   10fb8:	e037883a 	mov	sp,fp
   10fbc:	dfc00117 	ldw	ra,4(sp)
   10fc0:	df000017 	ldw	fp,0(sp)
   10fc4:	dec00204 	addi	sp,sp,8
   10fc8:	f800283a 	ret

00010fcc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   10fcc:	defffe04 	addi	sp,sp,-8
   10fd0:	dfc00115 	stw	ra,4(sp)
   10fd4:	df000015 	stw	fp,0(sp)
   10fd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   10fdc:	01002034 	movhi	r4,128
   10fe0:	21081004 	addi	r4,r4,8256
   10fe4:	000b883a 	mov	r5,zero
   10fe8:	000d883a 	mov	r6,zero
   10fec:	01c0fa04 	movi	r7,1000
   10ff0:	0011b7c0 	call	11b7c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   10ff4:	01000074 	movhi	r4,1
   10ff8:	2110c904 	addi	r4,r4,17188
   10ffc:	000b883a 	mov	r5,zero
   11000:	01800204 	movi	r6,8
   11004:	00111a80 	call	111a8 <altera_avalon_jtag_uart_init>
   11008:	01000074 	movhi	r4,1
   1100c:	2110bf04 	addi	r4,r4,17148
   11010:	00110280 	call	11028 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   11014:	e037883a 	mov	sp,fp
   11018:	dfc00117 	ldw	ra,4(sp)
   1101c:	df000017 	ldw	fp,0(sp)
   11020:	dec00204 	addi	sp,sp,8
   11024:	f800283a 	ret

00011028 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   11028:	defffd04 	addi	sp,sp,-12
   1102c:	dfc00215 	stw	ra,8(sp)
   11030:	df000115 	stw	fp,4(sp)
   11034:	df000104 	addi	fp,sp,4
   11038:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   1103c:	e13fff17 	ldw	r4,-4(fp)
   11040:	01400074 	movhi	r5,1
   11044:	2954e004 	addi	r5,r5,21376
   11048:	0011da40 	call	11da4 <alt_dev_llist_insert>
}
   1104c:	e037883a 	mov	sp,fp
   11050:	dfc00117 	ldw	ra,4(sp)
   11054:	df000017 	ldw	fp,0(sp)
   11058:	dec00204 	addi	sp,sp,8
   1105c:	f800283a 	ret

00011060 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   11060:	defffa04 	addi	sp,sp,-24
   11064:	dfc00515 	stw	ra,20(sp)
   11068:	df000415 	stw	fp,16(sp)
   1106c:	df000404 	addi	fp,sp,16
   11070:	e13ffd15 	stw	r4,-12(fp)
   11074:	e17ffe15 	stw	r5,-8(fp)
   11078:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1107c:	e0bffd17 	ldw	r2,-12(fp)
   11080:	10800017 	ldw	r2,0(r2)
   11084:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   11088:	e0bffc17 	ldw	r2,-16(fp)
   1108c:	11000a04 	addi	r4,r2,40
   11090:	e0bffd17 	ldw	r2,-12(fp)
   11094:	11c00217 	ldw	r7,8(r2)
   11098:	e17ffe17 	ldw	r5,-8(fp)
   1109c:	e1bfff17 	ldw	r6,-4(fp)
   110a0:	00116a80 	call	116a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   110a4:	e037883a 	mov	sp,fp
   110a8:	dfc00117 	ldw	ra,4(sp)
   110ac:	df000017 	ldw	fp,0(sp)
   110b0:	dec00204 	addi	sp,sp,8
   110b4:	f800283a 	ret

000110b8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   110b8:	defffa04 	addi	sp,sp,-24
   110bc:	dfc00515 	stw	ra,20(sp)
   110c0:	df000415 	stw	fp,16(sp)
   110c4:	df000404 	addi	fp,sp,16
   110c8:	e13ffd15 	stw	r4,-12(fp)
   110cc:	e17ffe15 	stw	r5,-8(fp)
   110d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   110d4:	e0bffd17 	ldw	r2,-12(fp)
   110d8:	10800017 	ldw	r2,0(r2)
   110dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   110e0:	e0bffc17 	ldw	r2,-16(fp)
   110e4:	11000a04 	addi	r4,r2,40
   110e8:	e0bffd17 	ldw	r2,-12(fp)
   110ec:	11c00217 	ldw	r7,8(r2)
   110f0:	e17ffe17 	ldw	r5,-8(fp)
   110f4:	e1bfff17 	ldw	r6,-4(fp)
   110f8:	00118cc0 	call	118cc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   110fc:	e037883a 	mov	sp,fp
   11100:	dfc00117 	ldw	ra,4(sp)
   11104:	df000017 	ldw	fp,0(sp)
   11108:	dec00204 	addi	sp,sp,8
   1110c:	f800283a 	ret

00011110 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   11110:	defffc04 	addi	sp,sp,-16
   11114:	dfc00315 	stw	ra,12(sp)
   11118:	df000215 	stw	fp,8(sp)
   1111c:	df000204 	addi	fp,sp,8
   11120:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   11124:	e0bfff17 	ldw	r2,-4(fp)
   11128:	10800017 	ldw	r2,0(r2)
   1112c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   11130:	e0bffe17 	ldw	r2,-8(fp)
   11134:	11000a04 	addi	r4,r2,40
   11138:	e0bfff17 	ldw	r2,-4(fp)
   1113c:	11400217 	ldw	r5,8(r2)
   11140:	00115400 	call	11540 <altera_avalon_jtag_uart_close>
}
   11144:	e037883a 	mov	sp,fp
   11148:	dfc00117 	ldw	ra,4(sp)
   1114c:	df000017 	ldw	fp,0(sp)
   11150:	dec00204 	addi	sp,sp,8
   11154:	f800283a 	ret

00011158 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   11158:	defffa04 	addi	sp,sp,-24
   1115c:	dfc00515 	stw	ra,20(sp)
   11160:	df000415 	stw	fp,16(sp)
   11164:	df000404 	addi	fp,sp,16
   11168:	e13ffd15 	stw	r4,-12(fp)
   1116c:	e17ffe15 	stw	r5,-8(fp)
   11170:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   11174:	e0bffd17 	ldw	r2,-12(fp)
   11178:	10800017 	ldw	r2,0(r2)
   1117c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   11180:	e0bffc17 	ldw	r2,-16(fp)
   11184:	11000a04 	addi	r4,r2,40
   11188:	e17ffe17 	ldw	r5,-8(fp)
   1118c:	e1bfff17 	ldw	r6,-4(fp)
   11190:	00115b40 	call	115b4 <altera_avalon_jtag_uart_ioctl>
}
   11194:	e037883a 	mov	sp,fp
   11198:	dfc00117 	ldw	ra,4(sp)
   1119c:	df000017 	ldw	fp,0(sp)
   111a0:	dec00204 	addi	sp,sp,8
   111a4:	f800283a 	ret

000111a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   111a8:	defffa04 	addi	sp,sp,-24
   111ac:	dfc00515 	stw	ra,20(sp)
   111b0:	df000415 	stw	fp,16(sp)
   111b4:	df000404 	addi	fp,sp,16
   111b8:	e13ffd15 	stw	r4,-12(fp)
   111bc:	e17ffe15 	stw	r5,-8(fp)
   111c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   111c4:	e0fffd17 	ldw	r3,-12(fp)
   111c8:	00800044 	movi	r2,1
   111cc:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   111d0:	e0bffd17 	ldw	r2,-12(fp)
   111d4:	10800017 	ldw	r2,0(r2)
   111d8:	11000104 	addi	r4,r2,4
   111dc:	e0bffd17 	ldw	r2,-12(fp)
   111e0:	10800817 	ldw	r2,32(r2)
   111e4:	1007883a 	mov	r3,r2
   111e8:	2005883a 	mov	r2,r4
   111ec:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   111f0:	e13ffe17 	ldw	r4,-8(fp)
   111f4:	e17fff17 	ldw	r5,-4(fp)
   111f8:	d8000015 	stw	zero,0(sp)
   111fc:	01800074 	movhi	r6,1
   11200:	31849a04 	addi	r6,r6,4712
   11204:	e1fffd17 	ldw	r7,-12(fp)
   11208:	0011fb00 	call	11fb0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1120c:	e0bffd17 	ldw	r2,-12(fp)
   11210:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   11214:	e0bffd17 	ldw	r2,-12(fp)
   11218:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1121c:	00800074 	movhi	r2,1
   11220:	109ba404 	addi	r2,r2,28304
   11224:	10800017 	ldw	r2,0(r2)
   11228:	100b883a 	mov	r5,r2
   1122c:	01800074 	movhi	r6,1
   11230:	31852404 	addi	r6,r6,5264
   11234:	e1fffd17 	ldw	r7,-12(fp)
   11238:	0011c0c0 	call	11c0c <alt_alarm_start>
   1123c:	1004403a 	cmpge	r2,r2,zero
   11240:	1000041e 	bne	r2,zero,11254 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   11244:	e0fffd17 	ldw	r3,-12(fp)
   11248:	00a00034 	movhi	r2,32768
   1124c:	10bfffc4 	addi	r2,r2,-1
   11250:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   11254:	e037883a 	mov	sp,fp
   11258:	dfc00117 	ldw	ra,4(sp)
   1125c:	df000017 	ldw	fp,0(sp)
   11260:	dec00204 	addi	sp,sp,8
   11264:	f800283a 	ret

00011268 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   11268:	defff804 	addi	sp,sp,-32
   1126c:	df000715 	stw	fp,28(sp)
   11270:	df000704 	addi	fp,sp,28
   11274:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   11278:	e0bfff17 	ldw	r2,-4(fp)
   1127c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   11280:	e0bffe17 	ldw	r2,-8(fp)
   11284:	10800017 	ldw	r2,0(r2)
   11288:	e0bffd15 	stw	r2,-12(fp)
   1128c:	00000006 	br	11290 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11290:	e0bffd17 	ldw	r2,-12(fp)
   11294:	10800104 	addi	r2,r2,4
   11298:	10800037 	ldwio	r2,0(r2)
   1129c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   112a0:	e0bffc17 	ldw	r2,-16(fp)
   112a4:	1080c00c 	andi	r2,r2,768
   112a8:	1005003a 	cmpeq	r2,r2,zero
   112ac:	1000741e 	bne	r2,zero,11480 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   112b0:	e0bffc17 	ldw	r2,-16(fp)
   112b4:	1080400c 	andi	r2,r2,256
   112b8:	1005003a 	cmpeq	r2,r2,zero
   112bc:	1000351e 	bne	r2,zero,11394 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   112c0:	00800074 	movhi	r2,1
   112c4:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   112c8:	e0bffe17 	ldw	r2,-8(fp)
   112cc:	10800a17 	ldw	r2,40(r2)
   112d0:	10800044 	addi	r2,r2,1
   112d4:	1081ffcc 	andi	r2,r2,2047
   112d8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   112dc:	e0bffe17 	ldw	r2,-8(fp)
   112e0:	10c00b17 	ldw	r3,44(r2)
   112e4:	e0bffa17 	ldw	r2,-24(fp)
   112e8:	18801626 	beq	r3,r2,11344 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   112ec:	e0bffd17 	ldw	r2,-12(fp)
   112f0:	10800037 	ldwio	r2,0(r2)
   112f4:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   112f8:	e0bffb17 	ldw	r2,-20(fp)
   112fc:	10a0000c 	andi	r2,r2,32768
   11300:	1005003a 	cmpeq	r2,r2,zero
   11304:	10000f1e 	bne	r2,zero,11344 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   11308:	e0bffe17 	ldw	r2,-8(fp)
   1130c:	10c00a17 	ldw	r3,40(r2)
   11310:	e0bffb17 	ldw	r2,-20(fp)
   11314:	1009883a 	mov	r4,r2
   11318:	e0bffe17 	ldw	r2,-8(fp)
   1131c:	1885883a 	add	r2,r3,r2
   11320:	10800e04 	addi	r2,r2,56
   11324:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11328:	e0bffe17 	ldw	r2,-8(fp)
   1132c:	10800a17 	ldw	r2,40(r2)
   11330:	10800044 	addi	r2,r2,1
   11334:	10c1ffcc 	andi	r3,r2,2047
   11338:	e0bffe17 	ldw	r2,-8(fp)
   1133c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   11340:	003fe106 	br	112c8 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   11344:	e0bffb17 	ldw	r2,-20(fp)
   11348:	10bfffec 	andhi	r2,r2,65535
   1134c:	1005003a 	cmpeq	r2,r2,zero
   11350:	1000101e 	bne	r2,zero,11394 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   11354:	e0bffe17 	ldw	r2,-8(fp)
   11358:	10c00817 	ldw	r3,32(r2)
   1135c:	00bfff84 	movi	r2,-2
   11360:	1886703a 	and	r3,r3,r2
   11364:	e0bffe17 	ldw	r2,-8(fp)
   11368:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1136c:	e0bffd17 	ldw	r2,-12(fp)
   11370:	11000104 	addi	r4,r2,4
   11374:	e0bffe17 	ldw	r2,-8(fp)
   11378:	10800817 	ldw	r2,32(r2)
   1137c:	1007883a 	mov	r3,r2
   11380:	2005883a 	mov	r2,r4
   11384:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11388:	e0bffd17 	ldw	r2,-12(fp)
   1138c:	10800104 	addi	r2,r2,4
   11390:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   11394:	e0bffc17 	ldw	r2,-16(fp)
   11398:	1080800c 	andi	r2,r2,512
   1139c:	1005003a 	cmpeq	r2,r2,zero
   113a0:	103fbb1e 	bne	r2,zero,11290 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   113a4:	e0bffc17 	ldw	r2,-16(fp)
   113a8:	10bfffec 	andhi	r2,r2,65535
   113ac:	1004d43a 	srli	r2,r2,16
   113b0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   113b4:	00001506 	br	1140c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   113b8:	e13ffd17 	ldw	r4,-12(fp)
   113bc:	e0bffe17 	ldw	r2,-8(fp)
   113c0:	10c00d17 	ldw	r3,52(r2)
   113c4:	e0bffe17 	ldw	r2,-8(fp)
   113c8:	1885883a 	add	r2,r3,r2
   113cc:	10820e04 	addi	r2,r2,2104
   113d0:	10800003 	ldbu	r2,0(r2)
   113d4:	10c03fcc 	andi	r3,r2,255
   113d8:	18c0201c 	xori	r3,r3,128
   113dc:	18ffe004 	addi	r3,r3,-128
   113e0:	2005883a 	mov	r2,r4
   113e4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   113e8:	e0bffe17 	ldw	r2,-8(fp)
   113ec:	10800d17 	ldw	r2,52(r2)
   113f0:	10800044 	addi	r2,r2,1
   113f4:	10c1ffcc 	andi	r3,r2,2047
   113f8:	e0bffe17 	ldw	r2,-8(fp)
   113fc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   11400:	e0bff917 	ldw	r2,-28(fp)
   11404:	10bfffc4 	addi	r2,r2,-1
   11408:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   1140c:	e0bff917 	ldw	r2,-28(fp)
   11410:	1005003a 	cmpeq	r2,r2,zero
   11414:	1000051e 	bne	r2,zero,1142c <altera_avalon_jtag_uart_irq+0x1c4>
   11418:	e0bffe17 	ldw	r2,-8(fp)
   1141c:	10c00d17 	ldw	r3,52(r2)
   11420:	e0bffe17 	ldw	r2,-8(fp)
   11424:	10800c17 	ldw	r2,48(r2)
   11428:	18bfe31e 	bne	r3,r2,113b8 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   1142c:	e0bff917 	ldw	r2,-28(fp)
   11430:	1005003a 	cmpeq	r2,r2,zero
   11434:	103f961e 	bne	r2,zero,11290 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11438:	e0bffe17 	ldw	r2,-8(fp)
   1143c:	10c00817 	ldw	r3,32(r2)
   11440:	00bfff44 	movi	r2,-3
   11444:	1886703a 	and	r3,r3,r2
   11448:	e0bffe17 	ldw	r2,-8(fp)
   1144c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11450:	e0bffe17 	ldw	r2,-8(fp)
   11454:	10800017 	ldw	r2,0(r2)
   11458:	11000104 	addi	r4,r2,4
   1145c:	e0bffe17 	ldw	r2,-8(fp)
   11460:	10800817 	ldw	r2,32(r2)
   11464:	1007883a 	mov	r3,r2
   11468:	2005883a 	mov	r2,r4
   1146c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   11470:	e0bffd17 	ldw	r2,-12(fp)
   11474:	10800104 	addi	r2,r2,4
   11478:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1147c:	003f8406 	br	11290 <altera_avalon_jtag_uart_irq+0x28>
}
   11480:	e037883a 	mov	sp,fp
   11484:	df000017 	ldw	fp,0(sp)
   11488:	dec00104 	addi	sp,sp,4
   1148c:	f800283a 	ret

00011490 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   11490:	defffc04 	addi	sp,sp,-16
   11494:	df000315 	stw	fp,12(sp)
   11498:	df000304 	addi	fp,sp,12
   1149c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   114a0:	e0bfff17 	ldw	r2,-4(fp)
   114a4:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   114a8:	e0bffe17 	ldw	r2,-8(fp)
   114ac:	10800017 	ldw	r2,0(r2)
   114b0:	10800104 	addi	r2,r2,4
   114b4:	10800037 	ldwio	r2,0(r2)
   114b8:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   114bc:	e0bffd17 	ldw	r2,-12(fp)
   114c0:	1081000c 	andi	r2,r2,1024
   114c4:	1005003a 	cmpeq	r2,r2,zero
   114c8:	10000c1e 	bne	r2,zero,114fc <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   114cc:	e0bffe17 	ldw	r2,-8(fp)
   114d0:	10800017 	ldw	r2,0(r2)
   114d4:	11000104 	addi	r4,r2,4
   114d8:	e0bffe17 	ldw	r2,-8(fp)
   114dc:	10800817 	ldw	r2,32(r2)
   114e0:	10810014 	ori	r2,r2,1024
   114e4:	1007883a 	mov	r3,r2
   114e8:	2005883a 	mov	r2,r4
   114ec:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   114f0:	e0bffe17 	ldw	r2,-8(fp)
   114f4:	10000915 	stw	zero,36(r2)
   114f8:	00000a06 	br	11524 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   114fc:	e0bffe17 	ldw	r2,-8(fp)
   11500:	10c00917 	ldw	r3,36(r2)
   11504:	00a00034 	movhi	r2,32768
   11508:	10bfff04 	addi	r2,r2,-4
   1150c:	10c00536 	bltu	r2,r3,11524 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   11510:	e0bffe17 	ldw	r2,-8(fp)
   11514:	10800917 	ldw	r2,36(r2)
   11518:	10c00044 	addi	r3,r2,1
   1151c:	e0bffe17 	ldw	r2,-8(fp)
   11520:	10c00915 	stw	r3,36(r2)
   11524:	00800074 	movhi	r2,1
   11528:	109ba404 	addi	r2,r2,28304
   1152c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   11530:	e037883a 	mov	sp,fp
   11534:	df000017 	ldw	fp,0(sp)
   11538:	dec00104 	addi	sp,sp,4
   1153c:	f800283a 	ret

00011540 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   11540:	defffc04 	addi	sp,sp,-16
   11544:	df000315 	stw	fp,12(sp)
   11548:	df000304 	addi	fp,sp,12
   1154c:	e13ffd15 	stw	r4,-12(fp)
   11550:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11554:	00000706 	br	11574 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   11558:	e0bffe17 	ldw	r2,-8(fp)
   1155c:	1090000c 	andi	r2,r2,16384
   11560:	1005003a 	cmpeq	r2,r2,zero
   11564:	1000031e 	bne	r2,zero,11574 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   11568:	00bffd44 	movi	r2,-11
   1156c:	e0bfff15 	stw	r2,-4(fp)
   11570:	00000b06 	br	115a0 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   11574:	e0bffd17 	ldw	r2,-12(fp)
   11578:	10c00d17 	ldw	r3,52(r2)
   1157c:	e0bffd17 	ldw	r2,-12(fp)
   11580:	10800c17 	ldw	r2,48(r2)
   11584:	18800526 	beq	r3,r2,1159c <altera_avalon_jtag_uart_close+0x5c>
   11588:	e0bffd17 	ldw	r2,-12(fp)
   1158c:	10c00917 	ldw	r3,36(r2)
   11590:	e0bffd17 	ldw	r2,-12(fp)
   11594:	10800117 	ldw	r2,4(r2)
   11598:	18bfef36 	bltu	r3,r2,11558 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   1159c:	e03fff15 	stw	zero,-4(fp)
   115a0:	e0bfff17 	ldw	r2,-4(fp)
}
   115a4:	e037883a 	mov	sp,fp
   115a8:	df000017 	ldw	fp,0(sp)
   115ac:	dec00104 	addi	sp,sp,4
   115b0:	f800283a 	ret

000115b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   115b4:	defff804 	addi	sp,sp,-32
   115b8:	df000715 	stw	fp,28(sp)
   115bc:	df000704 	addi	fp,sp,28
   115c0:	e13ffb15 	stw	r4,-20(fp)
   115c4:	e17ffc15 	stw	r5,-16(fp)
   115c8:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   115cc:	00bff9c4 	movi	r2,-25
   115d0:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   115d4:	e0bffc17 	ldw	r2,-16(fp)
   115d8:	e0bfff15 	stw	r2,-4(fp)
   115dc:	e0ffff17 	ldw	r3,-4(fp)
   115e0:	189a8060 	cmpeqi	r2,r3,27137
   115e4:	1000041e 	bne	r2,zero,115f8 <altera_avalon_jtag_uart_ioctl+0x44>
   115e8:	e0ffff17 	ldw	r3,-4(fp)
   115ec:	189a80a0 	cmpeqi	r2,r3,27138
   115f0:	10001b1e 	bne	r2,zero,11660 <altera_avalon_jtag_uart_ioctl+0xac>
   115f4:	00002706 	br	11694 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   115f8:	e0bffb17 	ldw	r2,-20(fp)
   115fc:	10c00117 	ldw	r3,4(r2)
   11600:	00a00034 	movhi	r2,32768
   11604:	10bfffc4 	addi	r2,r2,-1
   11608:	18802226 	beq	r3,r2,11694 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   1160c:	e0bffd17 	ldw	r2,-12(fp)
   11610:	10800017 	ldw	r2,0(r2)
   11614:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   11618:	e0bff917 	ldw	r2,-28(fp)
   1161c:	10800090 	cmplti	r2,r2,2
   11620:	1000071e 	bne	r2,zero,11640 <altera_avalon_jtag_uart_ioctl+0x8c>
   11624:	e0fff917 	ldw	r3,-28(fp)
   11628:	00a00034 	movhi	r2,32768
   1162c:	10bfffc4 	addi	r2,r2,-1
   11630:	18800326 	beq	r3,r2,11640 <altera_avalon_jtag_uart_ioctl+0x8c>
   11634:	e0bff917 	ldw	r2,-28(fp)
   11638:	e0bffe15 	stw	r2,-8(fp)
   1163c:	00000306 	br	1164c <altera_avalon_jtag_uart_ioctl+0x98>
   11640:	00e00034 	movhi	r3,32768
   11644:	18ffff84 	addi	r3,r3,-2
   11648:	e0fffe15 	stw	r3,-8(fp)
   1164c:	e0bffb17 	ldw	r2,-20(fp)
   11650:	e0fffe17 	ldw	r3,-8(fp)
   11654:	10c00115 	stw	r3,4(r2)
      rc = 0;
   11658:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   1165c:	00000d06 	br	11694 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   11660:	e0bffb17 	ldw	r2,-20(fp)
   11664:	10c00117 	ldw	r3,4(r2)
   11668:	00a00034 	movhi	r2,32768
   1166c:	10bfffc4 	addi	r2,r2,-1
   11670:	18800826 	beq	r3,r2,11694 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   11674:	e13ffd17 	ldw	r4,-12(fp)
   11678:	e0bffb17 	ldw	r2,-20(fp)
   1167c:	10c00917 	ldw	r3,36(r2)
   11680:	e0bffb17 	ldw	r2,-20(fp)
   11684:	10800117 	ldw	r2,4(r2)
   11688:	1885803a 	cmpltu	r2,r3,r2
   1168c:	20800015 	stw	r2,0(r4)
      rc = 0;
   11690:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   11694:	e0bffa17 	ldw	r2,-24(fp)
}
   11698:	e037883a 	mov	sp,fp
   1169c:	df000017 	ldw	fp,0(sp)
   116a0:	dec00104 	addi	sp,sp,4
   116a4:	f800283a 	ret

000116a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   116a8:	defff204 	addi	sp,sp,-56
   116ac:	dfc00d15 	stw	ra,52(sp)
   116b0:	df000c15 	stw	fp,48(sp)
   116b4:	df000c04 	addi	fp,sp,48
   116b8:	e13ffb15 	stw	r4,-20(fp)
   116bc:	e17ffc15 	stw	r5,-16(fp)
   116c0:	e1bffd15 	stw	r6,-12(fp)
   116c4:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   116c8:	e0bffc17 	ldw	r2,-16(fp)
   116cc:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   116d0:	00004806 	br	117f4 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   116d4:	e0bffb17 	ldw	r2,-20(fp)
   116d8:	10800a17 	ldw	r2,40(r2)
   116dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   116e0:	e0bffb17 	ldw	r2,-20(fp)
   116e4:	10800b17 	ldw	r2,44(r2)
   116e8:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   116ec:	e0fff717 	ldw	r3,-36(fp)
   116f0:	e0bff617 	ldw	r2,-40(fp)
   116f4:	18800536 	bltu	r3,r2,1170c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   116f8:	e0bff717 	ldw	r2,-36(fp)
   116fc:	e0fff617 	ldw	r3,-40(fp)
   11700:	10c5c83a 	sub	r2,r2,r3
   11704:	e0bff815 	stw	r2,-32(fp)
   11708:	00000406 	br	1171c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   1170c:	00820004 	movi	r2,2048
   11710:	e0fff617 	ldw	r3,-40(fp)
   11714:	10c5c83a 	sub	r2,r2,r3
   11718:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   1171c:	e0bff817 	ldw	r2,-32(fp)
   11720:	1005003a 	cmpeq	r2,r2,zero
   11724:	10001f1e 	bne	r2,zero,117a4 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   11728:	e0fffd17 	ldw	r3,-12(fp)
   1172c:	e0bff817 	ldw	r2,-32(fp)
   11730:	1880022e 	bgeu	r3,r2,1173c <altera_avalon_jtag_uart_read+0x94>
        n = space;
   11734:	e0bffd17 	ldw	r2,-12(fp)
   11738:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   1173c:	e0bffb17 	ldw	r2,-20(fp)
   11740:	10c00e04 	addi	r3,r2,56
   11744:	e0bff617 	ldw	r2,-40(fp)
   11748:	1887883a 	add	r3,r3,r2
   1174c:	e0bffa17 	ldw	r2,-24(fp)
   11750:	1009883a 	mov	r4,r2
   11754:	180b883a 	mov	r5,r3
   11758:	e1bff817 	ldw	r6,-32(fp)
   1175c:	00021040 	call	2104 <memcpy>
      ptr   += n;
   11760:	e0fff817 	ldw	r3,-32(fp)
   11764:	e0bffa17 	ldw	r2,-24(fp)
   11768:	10c5883a 	add	r2,r2,r3
   1176c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   11770:	e0fffd17 	ldw	r3,-12(fp)
   11774:	e0bff817 	ldw	r2,-32(fp)
   11778:	1885c83a 	sub	r2,r3,r2
   1177c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   11780:	e0fff617 	ldw	r3,-40(fp)
   11784:	e0bff817 	ldw	r2,-32(fp)
   11788:	1885883a 	add	r2,r3,r2
   1178c:	10c1ffcc 	andi	r3,r2,2047
   11790:	e0bffb17 	ldw	r2,-20(fp)
   11794:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   11798:	e0bffd17 	ldw	r2,-12(fp)
   1179c:	10800048 	cmpgei	r2,r2,1
   117a0:	103fcc1e 	bne	r2,zero,116d4 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   117a4:	e0fffa17 	ldw	r3,-24(fp)
   117a8:	e0bffc17 	ldw	r2,-16(fp)
   117ac:	1880141e 	bne	r3,r2,11800 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   117b0:	e0bffe17 	ldw	r2,-8(fp)
   117b4:	1090000c 	andi	r2,r2,16384
   117b8:	1004c03a 	cmpne	r2,r2,zero
   117bc:	1000101e 	bne	r2,zero,11800 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   117c0:	e0bffb17 	ldw	r2,-20(fp)
   117c4:	10c00a17 	ldw	r3,40(r2)
   117c8:	e0bff717 	ldw	r2,-36(fp)
   117cc:	1880051e 	bne	r3,r2,117e4 <altera_avalon_jtag_uart_read+0x13c>
   117d0:	e0bffb17 	ldw	r2,-20(fp)
   117d4:	10c00917 	ldw	r3,36(r2)
   117d8:	e0bffb17 	ldw	r2,-20(fp)
   117dc:	10800117 	ldw	r2,4(r2)
   117e0:	18bff736 	bltu	r3,r2,117c0 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   117e4:	e0bffb17 	ldw	r2,-20(fp)
   117e8:	10c00a17 	ldw	r3,40(r2)
   117ec:	e0bff717 	ldw	r2,-36(fp)
   117f0:	18800326 	beq	r3,r2,11800 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   117f4:	e0bffd17 	ldw	r2,-12(fp)
   117f8:	10800048 	cmpgei	r2,r2,1
   117fc:	103fb51e 	bne	r2,zero,116d4 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   11800:	e0fffa17 	ldw	r3,-24(fp)
   11804:	e0bffc17 	ldw	r2,-16(fp)
   11808:	18801926 	beq	r3,r2,11870 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1180c:	0005303a 	rdctl	r2,status
   11810:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11814:	e0fff517 	ldw	r3,-44(fp)
   11818:	00bfff84 	movi	r2,-2
   1181c:	1884703a 	and	r2,r3,r2
   11820:	1001703a 	wrctl	status,r2
  
  return context;
   11824:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   11828:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   1182c:	e0bffb17 	ldw	r2,-20(fp)
   11830:	10800817 	ldw	r2,32(r2)
   11834:	10c00054 	ori	r3,r2,1
   11838:	e0bffb17 	ldw	r2,-20(fp)
   1183c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11840:	e0bffb17 	ldw	r2,-20(fp)
   11844:	10800017 	ldw	r2,0(r2)
   11848:	11000104 	addi	r4,r2,4
   1184c:	e0bffb17 	ldw	r2,-20(fp)
   11850:	10800817 	ldw	r2,32(r2)
   11854:	1007883a 	mov	r3,r2
   11858:	2005883a 	mov	r2,r4
   1185c:	10c00035 	stwio	r3,0(r2)
   11860:	e0bff917 	ldw	r2,-28(fp)
   11864:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11868:	e0bff417 	ldw	r2,-48(fp)
   1186c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   11870:	e0fffa17 	ldw	r3,-24(fp)
   11874:	e0bffc17 	ldw	r2,-16(fp)
   11878:	18800526 	beq	r3,r2,11890 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   1187c:	e0fffa17 	ldw	r3,-24(fp)
   11880:	e0bffc17 	ldw	r2,-16(fp)
   11884:	1887c83a 	sub	r3,r3,r2
   11888:	e0ffff15 	stw	r3,-4(fp)
   1188c:	00000906 	br	118b4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   11890:	e0bffe17 	ldw	r2,-8(fp)
   11894:	1090000c 	andi	r2,r2,16384
   11898:	1005003a 	cmpeq	r2,r2,zero
   1189c:	1000031e 	bne	r2,zero,118ac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   118a0:	00bffd44 	movi	r2,-11
   118a4:	e0bfff15 	stw	r2,-4(fp)
   118a8:	00000206 	br	118b4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   118ac:	00bffec4 	movi	r2,-5
   118b0:	e0bfff15 	stw	r2,-4(fp)
   118b4:	e0bfff17 	ldw	r2,-4(fp)
}
   118b8:	e037883a 	mov	sp,fp
   118bc:	dfc00117 	ldw	ra,4(sp)
   118c0:	df000017 	ldw	fp,0(sp)
   118c4:	dec00204 	addi	sp,sp,8
   118c8:	f800283a 	ret

000118cc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   118cc:	defff204 	addi	sp,sp,-56
   118d0:	dfc00d15 	stw	ra,52(sp)
   118d4:	df000c15 	stw	fp,48(sp)
   118d8:	df000c04 	addi	fp,sp,48
   118dc:	e13ffb15 	stw	r4,-20(fp)
   118e0:	e17ffc15 	stw	r5,-16(fp)
   118e4:	e1bffd15 	stw	r6,-12(fp)
   118e8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   118ec:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   118f0:	e0bffc17 	ldw	r2,-16(fp)
   118f4:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   118f8:	00003a06 	br	119e4 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   118fc:	e0bffb17 	ldw	r2,-20(fp)
   11900:	10800c17 	ldw	r2,48(r2)
   11904:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   11908:	e0bffb17 	ldw	r2,-20(fp)
   1190c:	10800d17 	ldw	r2,52(r2)
   11910:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   11914:	e0fffa17 	ldw	r3,-24(fp)
   11918:	e0bff917 	ldw	r2,-28(fp)
   1191c:	1880062e 	bgeu	r3,r2,11938 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   11920:	e0fff917 	ldw	r3,-28(fp)
   11924:	e0bffa17 	ldw	r2,-24(fp)
   11928:	1885c83a 	sub	r2,r3,r2
   1192c:	10bfffc4 	addi	r2,r2,-1
   11930:	e0bff815 	stw	r2,-32(fp)
   11934:	00000c06 	br	11968 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   11938:	e0bff917 	ldw	r2,-28(fp)
   1193c:	1005003a 	cmpeq	r2,r2,zero
   11940:	1000051e 	bne	r2,zero,11958 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   11944:	00820004 	movi	r2,2048
   11948:	e0fffa17 	ldw	r3,-24(fp)
   1194c:	10c5c83a 	sub	r2,r2,r3
   11950:	e0bff815 	stw	r2,-32(fp)
   11954:	00000406 	br	11968 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   11958:	0081ffc4 	movi	r2,2047
   1195c:	e0fffa17 	ldw	r3,-24(fp)
   11960:	10c5c83a 	sub	r2,r2,r3
   11964:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   11968:	e0bff817 	ldw	r2,-32(fp)
   1196c:	1005003a 	cmpeq	r2,r2,zero
   11970:	10001f1e 	bne	r2,zero,119f0 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   11974:	e0fffd17 	ldw	r3,-12(fp)
   11978:	e0bff817 	ldw	r2,-32(fp)
   1197c:	1880022e 	bgeu	r3,r2,11988 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   11980:	e0bffd17 	ldw	r2,-12(fp)
   11984:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   11988:	e0bffb17 	ldw	r2,-20(fp)
   1198c:	10c20e04 	addi	r3,r2,2104
   11990:	e0bffa17 	ldw	r2,-24(fp)
   11994:	1885883a 	add	r2,r3,r2
   11998:	e0fffc17 	ldw	r3,-16(fp)
   1199c:	1009883a 	mov	r4,r2
   119a0:	180b883a 	mov	r5,r3
   119a4:	e1bff817 	ldw	r6,-32(fp)
   119a8:	00021040 	call	2104 <memcpy>
      ptr   += n;
   119ac:	e0fff817 	ldw	r3,-32(fp)
   119b0:	e0bffc17 	ldw	r2,-16(fp)
   119b4:	10c5883a 	add	r2,r2,r3
   119b8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   119bc:	e0fffd17 	ldw	r3,-12(fp)
   119c0:	e0bff817 	ldw	r2,-32(fp)
   119c4:	1885c83a 	sub	r2,r3,r2
   119c8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   119cc:	e0fffa17 	ldw	r3,-24(fp)
   119d0:	e0bff817 	ldw	r2,-32(fp)
   119d4:	1885883a 	add	r2,r3,r2
   119d8:	10c1ffcc 	andi	r3,r2,2047
   119dc:	e0bffb17 	ldw	r2,-20(fp)
   119e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   119e4:	e0bffd17 	ldw	r2,-12(fp)
   119e8:	10800048 	cmpgei	r2,r2,1
   119ec:	103fc31e 	bne	r2,zero,118fc <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   119f0:	0005303a 	rdctl	r2,status
   119f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   119f8:	e0fff517 	ldw	r3,-44(fp)
   119fc:	00bfff84 	movi	r2,-2
   11a00:	1884703a 	and	r2,r3,r2
   11a04:	1001703a 	wrctl	status,r2
  
  return context;
   11a08:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   11a0c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   11a10:	e0bffb17 	ldw	r2,-20(fp)
   11a14:	10800817 	ldw	r2,32(r2)
   11a18:	10c00094 	ori	r3,r2,2
   11a1c:	e0bffb17 	ldw	r2,-20(fp)
   11a20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   11a24:	e0bffb17 	ldw	r2,-20(fp)
   11a28:	10800017 	ldw	r2,0(r2)
   11a2c:	11000104 	addi	r4,r2,4
   11a30:	e0bffb17 	ldw	r2,-20(fp)
   11a34:	10800817 	ldw	r2,32(r2)
   11a38:	1007883a 	mov	r3,r2
   11a3c:	2005883a 	mov	r2,r4
   11a40:	10c00035 	stwio	r3,0(r2)
   11a44:	e0bff717 	ldw	r2,-36(fp)
   11a48:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11a4c:	e0bff417 	ldw	r2,-48(fp)
   11a50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   11a54:	e0bffd17 	ldw	r2,-12(fp)
   11a58:	10800050 	cmplti	r2,r2,1
   11a5c:	1000111e 	bne	r2,zero,11aa4 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   11a60:	e0bffe17 	ldw	r2,-8(fp)
   11a64:	1090000c 	andi	r2,r2,16384
   11a68:	1004c03a 	cmpne	r2,r2,zero
   11a6c:	1000101e 	bne	r2,zero,11ab0 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   11a70:	e0bffb17 	ldw	r2,-20(fp)
   11a74:	10c00d17 	ldw	r3,52(r2)
   11a78:	e0bff917 	ldw	r2,-28(fp)
   11a7c:	1880051e 	bne	r3,r2,11a94 <altera_avalon_jtag_uart_write+0x1c8>
   11a80:	e0bffb17 	ldw	r2,-20(fp)
   11a84:	10c00917 	ldw	r3,36(r2)
   11a88:	e0bffb17 	ldw	r2,-20(fp)
   11a8c:	10800117 	ldw	r2,4(r2)
   11a90:	18bff736 	bltu	r3,r2,11a70 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   11a94:	e0bffb17 	ldw	r2,-20(fp)
   11a98:	10c00d17 	ldw	r3,52(r2)
   11a9c:	e0bff917 	ldw	r2,-28(fp)
   11aa0:	18800326 	beq	r3,r2,11ab0 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   11aa4:	e0bffd17 	ldw	r2,-12(fp)
   11aa8:	10800048 	cmpgei	r2,r2,1
   11aac:	103fcd1e 	bne	r2,zero,119e4 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   11ab0:	e0fffc17 	ldw	r3,-16(fp)
   11ab4:	e0bff617 	ldw	r2,-40(fp)
   11ab8:	18800526 	beq	r3,r2,11ad0 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   11abc:	e0fffc17 	ldw	r3,-16(fp)
   11ac0:	e0bff617 	ldw	r2,-40(fp)
   11ac4:	1887c83a 	sub	r3,r3,r2
   11ac8:	e0ffff15 	stw	r3,-4(fp)
   11acc:	00000906 	br	11af4 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   11ad0:	e0bffe17 	ldw	r2,-8(fp)
   11ad4:	1090000c 	andi	r2,r2,16384
   11ad8:	1005003a 	cmpeq	r2,r2,zero
   11adc:	1000031e 	bne	r2,zero,11aec <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   11ae0:	00bffd44 	movi	r2,-11
   11ae4:	e0bfff15 	stw	r2,-4(fp)
   11ae8:	00000206 	br	11af4 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   11aec:	00bffec4 	movi	r2,-5
   11af0:	e0bfff15 	stw	r2,-4(fp)
   11af4:	e0bfff17 	ldw	r2,-4(fp)
}
   11af8:	e037883a 	mov	sp,fp
   11afc:	dfc00117 	ldw	ra,4(sp)
   11b00:	df000017 	ldw	fp,0(sp)
   11b04:	dec00204 	addi	sp,sp,8
   11b08:	f800283a 	ret

00011b0c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   11b0c:	defffa04 	addi	sp,sp,-24
   11b10:	dfc00515 	stw	ra,20(sp)
   11b14:	df000415 	stw	fp,16(sp)
   11b18:	df000404 	addi	fp,sp,16
   11b1c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   11b20:	e0bfff17 	ldw	r2,-4(fp)
   11b24:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   11b28:	e0bfff17 	ldw	r2,-4(fp)
   11b2c:	10800104 	addi	r2,r2,4
   11b30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11b34:	0005303a 	rdctl	r2,status
   11b38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11b3c:	e0fffd17 	ldw	r3,-12(fp)
   11b40:	00bfff84 	movi	r2,-2
   11b44:	1884703a 	and	r2,r3,r2
   11b48:	1001703a 	wrctl	status,r2
  
  return context;
   11b4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   11b50:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   11b54:	00127140 	call	12714 <alt_tick>
   11b58:	e0bffe17 	ldw	r2,-8(fp)
   11b5c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11b60:	e0bffc17 	ldw	r2,-16(fp)
   11b64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   11b68:	e037883a 	mov	sp,fp
   11b6c:	dfc00117 	ldw	ra,4(sp)
   11b70:	df000017 	ldw	fp,0(sp)
   11b74:	dec00204 	addi	sp,sp,8
   11b78:	f800283a 	ret

00011b7c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   11b7c:	defff804 	addi	sp,sp,-32
   11b80:	dfc00715 	stw	ra,28(sp)
   11b84:	df000615 	stw	fp,24(sp)
   11b88:	df000604 	addi	fp,sp,24
   11b8c:	e13ffc15 	stw	r4,-16(fp)
   11b90:	e17ffd15 	stw	r5,-12(fp)
   11b94:	e1bffe15 	stw	r6,-8(fp)
   11b98:	e1ffff15 	stw	r7,-4(fp)
   11b9c:	e0bfff17 	ldw	r2,-4(fp)
   11ba0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   11ba4:	00800074 	movhi	r2,1
   11ba8:	109ba404 	addi	r2,r2,28304
   11bac:	10800017 	ldw	r2,0(r2)
   11bb0:	1004c03a 	cmpne	r2,r2,zero
   11bb4:	1000041e 	bne	r2,zero,11bc8 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   11bb8:	00c00074 	movhi	r3,1
   11bbc:	18dba404 	addi	r3,r3,28304
   11bc0:	e0bffb17 	ldw	r2,-20(fp)
   11bc4:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   11bc8:	e0bffc17 	ldw	r2,-16(fp)
   11bcc:	10800104 	addi	r2,r2,4
   11bd0:	1007883a 	mov	r3,r2
   11bd4:	008001c4 	movi	r2,7
   11bd8:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   11bdc:	d8000015 	stw	zero,0(sp)
   11be0:	e13ffd17 	ldw	r4,-12(fp)
   11be4:	e17ffe17 	ldw	r5,-8(fp)
   11be8:	01800074 	movhi	r6,1
   11bec:	3186c304 	addi	r6,r6,6924
   11bf0:	e1fffc17 	ldw	r7,-16(fp)
   11bf4:	0011fb00 	call	11fb0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   11bf8:	e037883a 	mov	sp,fp
   11bfc:	dfc00117 	ldw	ra,4(sp)
   11c00:	df000017 	ldw	fp,0(sp)
   11c04:	dec00204 	addi	sp,sp,8
   11c08:	f800283a 	ret

00011c0c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   11c0c:	defff404 	addi	sp,sp,-48
   11c10:	df000b15 	stw	fp,44(sp)
   11c14:	df000b04 	addi	fp,sp,44
   11c18:	e13ffb15 	stw	r4,-20(fp)
   11c1c:	e17ffc15 	stw	r5,-16(fp)
   11c20:	e1bffd15 	stw	r6,-12(fp)
   11c24:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   11c28:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   11c2c:	00800074 	movhi	r2,1
   11c30:	109ba404 	addi	r2,r2,28304
   11c34:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   11c38:	1005003a 	cmpeq	r2,r2,zero
   11c3c:	1000411e 	bne	r2,zero,11d44 <alt_alarm_start+0x138>
  {
    if (alarm)
   11c40:	e0bffb17 	ldw	r2,-20(fp)
   11c44:	1005003a 	cmpeq	r2,r2,zero
   11c48:	10003b1e 	bne	r2,zero,11d38 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   11c4c:	e0fffb17 	ldw	r3,-20(fp)
   11c50:	e0bffd17 	ldw	r2,-12(fp)
   11c54:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   11c58:	e0fffb17 	ldw	r3,-20(fp)
   11c5c:	e0bffe17 	ldw	r2,-8(fp)
   11c60:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   11c64:	0005303a 	rdctl	r2,status
   11c68:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   11c6c:	e0fff817 	ldw	r3,-32(fp)
   11c70:	00bfff84 	movi	r2,-2
   11c74:	1884703a 	and	r2,r3,r2
   11c78:	1001703a 	wrctl	status,r2
  
  return context;
   11c7c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   11c80:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   11c84:	00800074 	movhi	r2,1
   11c88:	109ba504 	addi	r2,r2,28308
   11c8c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   11c90:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   11c94:	e0fffc17 	ldw	r3,-16(fp)
   11c98:	e0bff917 	ldw	r2,-28(fp)
   11c9c:	1885883a 	add	r2,r3,r2
   11ca0:	10c00044 	addi	r3,r2,1
   11ca4:	e0bffb17 	ldw	r2,-20(fp)
   11ca8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   11cac:	e0bffb17 	ldw	r2,-20(fp)
   11cb0:	10c00217 	ldw	r3,8(r2)
   11cb4:	e0bff917 	ldw	r2,-28(fp)
   11cb8:	1880042e 	bgeu	r3,r2,11ccc <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   11cbc:	e0fffb17 	ldw	r3,-20(fp)
   11cc0:	00800044 	movi	r2,1
   11cc4:	18800405 	stb	r2,16(r3)
   11cc8:	00000206 	br	11cd4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   11ccc:	e0bffb17 	ldw	r2,-20(fp)
   11cd0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   11cd4:	e0fffb17 	ldw	r3,-20(fp)
   11cd8:	00800074 	movhi	r2,1
   11cdc:	1094e604 	addi	r2,r2,21400
   11ce0:	e0bff615 	stw	r2,-40(fp)
   11ce4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11ce8:	e0fff717 	ldw	r3,-36(fp)
   11cec:	e0bff617 	ldw	r2,-40(fp)
   11cf0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11cf4:	e0bff617 	ldw	r2,-40(fp)
   11cf8:	10c00017 	ldw	r3,0(r2)
   11cfc:	e0bff717 	ldw	r2,-36(fp)
   11d00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11d04:	e0bff617 	ldw	r2,-40(fp)
   11d08:	10c00017 	ldw	r3,0(r2)
   11d0c:	e0bff717 	ldw	r2,-36(fp)
   11d10:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   11d14:	e0fff617 	ldw	r3,-40(fp)
   11d18:	e0bff717 	ldw	r2,-36(fp)
   11d1c:	18800015 	stw	r2,0(r3)
   11d20:	e0bffa17 	ldw	r2,-24(fp)
   11d24:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   11d28:	e0bff517 	ldw	r2,-44(fp)
   11d2c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   11d30:	e03fff15 	stw	zero,-4(fp)
   11d34:	00000506 	br	11d4c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   11d38:	00bffa84 	movi	r2,-22
   11d3c:	e0bfff15 	stw	r2,-4(fp)
   11d40:	00000206 	br	11d4c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   11d44:	00bfde84 	movi	r2,-134
   11d48:	e0bfff15 	stw	r2,-4(fp)
   11d4c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   11d50:	e037883a 	mov	sp,fp
   11d54:	df000017 	ldw	fp,0(sp)
   11d58:	dec00104 	addi	sp,sp,4
   11d5c:	f800283a 	ret

00011d60 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   11d60:	defffe04 	addi	sp,sp,-8
   11d64:	df000115 	stw	fp,4(sp)
   11d68:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11d6c:	e03fff15 	stw	zero,-4(fp)
   11d70:	00000506 	br	11d88 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   11d74:	e0bfff17 	ldw	r2,-4(fp)
   11d78:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   11d7c:	e0bfff17 	ldw	r2,-4(fp)
   11d80:	10800804 	addi	r2,r2,32
   11d84:	e0bfff15 	stw	r2,-4(fp)
   11d88:	e0bfff17 	ldw	r2,-4(fp)
   11d8c:	10820030 	cmpltui	r2,r2,2048
   11d90:	103ff81e 	bne	r2,zero,11d74 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   11d94:	e037883a 	mov	sp,fp
   11d98:	df000017 	ldw	fp,0(sp)
   11d9c:	dec00104 	addi	sp,sp,4
   11da0:	f800283a 	ret

00011da4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   11da4:	defff904 	addi	sp,sp,-28
   11da8:	dfc00615 	stw	ra,24(sp)
   11dac:	df000515 	stw	fp,20(sp)
   11db0:	df000504 	addi	fp,sp,20
   11db4:	e13ffd15 	stw	r4,-12(fp)
   11db8:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   11dbc:	e0bffd17 	ldw	r2,-12(fp)
   11dc0:	1005003a 	cmpeq	r2,r2,zero
   11dc4:	1000041e 	bne	r2,zero,11dd8 <alt_dev_llist_insert+0x34>
   11dc8:	e0bffd17 	ldw	r2,-12(fp)
   11dcc:	10800217 	ldw	r2,8(r2)
   11dd0:	1004c03a 	cmpne	r2,r2,zero
   11dd4:	1000071e 	bne	r2,zero,11df4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   11dd8:	0011e580 	call	11e58 <alt_get_errno>
   11ddc:	1007883a 	mov	r3,r2
   11de0:	00800584 	movi	r2,22
   11de4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   11de8:	00bffa84 	movi	r2,-22
   11dec:	e0bfff15 	stw	r2,-4(fp)
   11df0:	00001306 	br	11e40 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   11df4:	e0fffd17 	ldw	r3,-12(fp)
   11df8:	e0bffe17 	ldw	r2,-8(fp)
   11dfc:	e0bffb15 	stw	r2,-20(fp)
   11e00:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   11e04:	e0fffc17 	ldw	r3,-16(fp)
   11e08:	e0bffb17 	ldw	r2,-20(fp)
   11e0c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   11e10:	e0bffb17 	ldw	r2,-20(fp)
   11e14:	10c00017 	ldw	r3,0(r2)
   11e18:	e0bffc17 	ldw	r2,-16(fp)
   11e1c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   11e20:	e0bffb17 	ldw	r2,-20(fp)
   11e24:	10c00017 	ldw	r3,0(r2)
   11e28:	e0bffc17 	ldw	r2,-16(fp)
   11e2c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   11e30:	e0fffb17 	ldw	r3,-20(fp)
   11e34:	e0bffc17 	ldw	r2,-16(fp)
   11e38:	18800015 	stw	r2,0(r3)

  return 0;  
   11e3c:	e03fff15 	stw	zero,-4(fp)
   11e40:	e0bfff17 	ldw	r2,-4(fp)
}
   11e44:	e037883a 	mov	sp,fp
   11e48:	dfc00117 	ldw	ra,4(sp)
   11e4c:	df000017 	ldw	fp,0(sp)
   11e50:	dec00204 	addi	sp,sp,8
   11e54:	f800283a 	ret

00011e58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e58:	defffd04 	addi	sp,sp,-12
   11e5c:	dfc00215 	stw	ra,8(sp)
   11e60:	df000115 	stw	fp,4(sp)
   11e64:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11e68:	00800074 	movhi	r2,1
   11e6c:	1094e304 	addi	r2,r2,21388
   11e70:	10800017 	ldw	r2,0(r2)
   11e74:	1005003a 	cmpeq	r2,r2,zero
   11e78:	1000061e 	bne	r2,zero,11e94 <alt_get_errno+0x3c>
   11e7c:	00800074 	movhi	r2,1
   11e80:	1094e304 	addi	r2,r2,21388
   11e84:	10800017 	ldw	r2,0(r2)
   11e88:	103ee83a 	callr	r2
   11e8c:	e0bfff15 	stw	r2,-4(fp)
   11e90:	00000306 	br	11ea0 <alt_get_errno+0x48>
   11e94:	00800074 	movhi	r2,1
   11e98:	109b9c04 	addi	r2,r2,28272
   11e9c:	e0bfff15 	stw	r2,-4(fp)
   11ea0:	e0bfff17 	ldw	r2,-4(fp)
}
   11ea4:	e037883a 	mov	sp,fp
   11ea8:	dfc00117 	ldw	ra,4(sp)
   11eac:	df000017 	ldw	fp,0(sp)
   11eb0:	dec00204 	addi	sp,sp,8
   11eb4:	f800283a 	ret

00011eb8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   11eb8:	defffd04 	addi	sp,sp,-12
   11ebc:	dfc00215 	stw	ra,8(sp)
   11ec0:	df000115 	stw	fp,4(sp)
   11ec4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11ec8:	00bfff04 	movi	r2,-4
   11ecc:	00c00074 	movhi	r3,1
   11ed0:	18cbd204 	addi	r3,r3,12104
   11ed4:	1885883a 	add	r2,r3,r2
   11ed8:	e0bfff15 	stw	r2,-4(fp)
   11edc:	00000606 	br	11ef8 <_do_ctors+0x40>
        (*ctor) (); 
   11ee0:	e0bfff17 	ldw	r2,-4(fp)
   11ee4:	10800017 	ldw	r2,0(r2)
   11ee8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   11eec:	e0bfff17 	ldw	r2,-4(fp)
   11ef0:	10bfff04 	addi	r2,r2,-4
   11ef4:	e0bfff15 	stw	r2,-4(fp)
   11ef8:	e0ffff17 	ldw	r3,-4(fp)
   11efc:	00800074 	movhi	r2,1
   11f00:	108bd104 	addi	r2,r2,12100
   11f04:	18bff62e 	bgeu	r3,r2,11ee0 <_do_ctors+0x28>
        (*ctor) (); 
}
   11f08:	e037883a 	mov	sp,fp
   11f0c:	dfc00117 	ldw	ra,4(sp)
   11f10:	df000017 	ldw	fp,0(sp)
   11f14:	dec00204 	addi	sp,sp,8
   11f18:	f800283a 	ret

00011f1c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   11f1c:	defffd04 	addi	sp,sp,-12
   11f20:	dfc00215 	stw	ra,8(sp)
   11f24:	df000115 	stw	fp,4(sp)
   11f28:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11f2c:	00bfff04 	movi	r2,-4
   11f30:	00c00074 	movhi	r3,1
   11f34:	18cbd204 	addi	r3,r3,12104
   11f38:	1885883a 	add	r2,r3,r2
   11f3c:	e0bfff15 	stw	r2,-4(fp)
   11f40:	00000606 	br	11f5c <_do_dtors+0x40>
        (*dtor) (); 
   11f44:	e0bfff17 	ldw	r2,-4(fp)
   11f48:	10800017 	ldw	r2,0(r2)
   11f4c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   11f50:	e0bfff17 	ldw	r2,-4(fp)
   11f54:	10bfff04 	addi	r2,r2,-4
   11f58:	e0bfff15 	stw	r2,-4(fp)
   11f5c:	e0ffff17 	ldw	r3,-4(fp)
   11f60:	00800074 	movhi	r2,1
   11f64:	108bd204 	addi	r2,r2,12104
   11f68:	18bff62e 	bgeu	r3,r2,11f44 <_do_dtors+0x28>
        (*dtor) (); 
}
   11f6c:	e037883a 	mov	sp,fp
   11f70:	dfc00117 	ldw	ra,4(sp)
   11f74:	df000017 	ldw	fp,0(sp)
   11f78:	dec00204 	addi	sp,sp,8
   11f7c:	f800283a 	ret

00011f80 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   11f80:	defffe04 	addi	sp,sp,-8
   11f84:	dfc00115 	stw	ra,4(sp)
   11f88:	df000015 	stw	fp,0(sp)
   11f8c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   11f90:	0009883a 	mov	r4,zero
   11f94:	01440004 	movi	r5,4096
   11f98:	0012aac0 	call	12aac <alt_icache_flush>
#endif
}
   11f9c:	e037883a 	mov	sp,fp
   11fa0:	dfc00117 	ldw	ra,4(sp)
   11fa4:	df000017 	ldw	fp,0(sp)
   11fa8:	dec00204 	addi	sp,sp,8
   11fac:	f800283a 	ret

00011fb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   11fb0:	defff904 	addi	sp,sp,-28
   11fb4:	dfc00615 	stw	ra,24(sp)
   11fb8:	df000515 	stw	fp,20(sp)
   11fbc:	df000504 	addi	fp,sp,20
   11fc0:	e13ffc15 	stw	r4,-16(fp)
   11fc4:	e17ffd15 	stw	r5,-12(fp)
   11fc8:	e1bffe15 	stw	r6,-8(fp)
   11fcc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   11fd0:	e0800217 	ldw	r2,8(fp)
   11fd4:	d8800015 	stw	r2,0(sp)
   11fd8:	e13ffc17 	ldw	r4,-16(fp)
   11fdc:	e17ffd17 	ldw	r5,-12(fp)
   11fe0:	e1bffe17 	ldw	r6,-8(fp)
   11fe4:	e1ffff17 	ldw	r7,-4(fp)
   11fe8:	00121840 	call	12184 <alt_iic_isr_register>
}  
   11fec:	e037883a 	mov	sp,fp
   11ff0:	dfc00117 	ldw	ra,4(sp)
   11ff4:	df000017 	ldw	fp,0(sp)
   11ff8:	dec00204 	addi	sp,sp,8
   11ffc:	f800283a 	ret

00012000 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   12000:	defff904 	addi	sp,sp,-28
   12004:	df000615 	stw	fp,24(sp)
   12008:	df000604 	addi	fp,sp,24
   1200c:	e13ffe15 	stw	r4,-8(fp)
   12010:	e17fff15 	stw	r5,-4(fp)
   12014:	e0bfff17 	ldw	r2,-4(fp)
   12018:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1201c:	0005303a 	rdctl	r2,status
   12020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12024:	e0fffb17 	ldw	r3,-20(fp)
   12028:	00bfff84 	movi	r2,-2
   1202c:	1884703a 	and	r2,r3,r2
   12030:	1001703a 	wrctl	status,r2
  
  return context;
   12034:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   12038:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   1203c:	e0fffc17 	ldw	r3,-16(fp)
   12040:	00800044 	movi	r2,1
   12044:	10c4983a 	sll	r2,r2,r3
   12048:	1007883a 	mov	r3,r2
   1204c:	00800074 	movhi	r2,1
   12050:	109ba304 	addi	r2,r2,28300
   12054:	10800017 	ldw	r2,0(r2)
   12058:	1886b03a 	or	r3,r3,r2
   1205c:	00800074 	movhi	r2,1
   12060:	109ba304 	addi	r2,r2,28300
   12064:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12068:	00800074 	movhi	r2,1
   1206c:	109ba304 	addi	r2,r2,28300
   12070:	10800017 	ldw	r2,0(r2)
   12074:	100170fa 	wrctl	ienable,r2
   12078:	e0bffd17 	ldw	r2,-12(fp)
   1207c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12080:	e0bffa17 	ldw	r2,-24(fp)
   12084:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12088:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1208c:	e037883a 	mov	sp,fp
   12090:	df000017 	ldw	fp,0(sp)
   12094:	dec00104 	addi	sp,sp,4
   12098:	f800283a 	ret

0001209c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1209c:	defff904 	addi	sp,sp,-28
   120a0:	df000615 	stw	fp,24(sp)
   120a4:	df000604 	addi	fp,sp,24
   120a8:	e13ffe15 	stw	r4,-8(fp)
   120ac:	e17fff15 	stw	r5,-4(fp)
   120b0:	e0bfff17 	ldw	r2,-4(fp)
   120b4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   120b8:	0005303a 	rdctl	r2,status
   120bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   120c0:	e0fffb17 	ldw	r3,-20(fp)
   120c4:	00bfff84 	movi	r2,-2
   120c8:	1884703a 	and	r2,r3,r2
   120cc:	1001703a 	wrctl	status,r2
  
  return context;
   120d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   120d4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   120d8:	e0fffc17 	ldw	r3,-16(fp)
   120dc:	00800044 	movi	r2,1
   120e0:	10c4983a 	sll	r2,r2,r3
   120e4:	0084303a 	nor	r2,zero,r2
   120e8:	1007883a 	mov	r3,r2
   120ec:	00800074 	movhi	r2,1
   120f0:	109ba304 	addi	r2,r2,28300
   120f4:	10800017 	ldw	r2,0(r2)
   120f8:	1886703a 	and	r3,r3,r2
   120fc:	00800074 	movhi	r2,1
   12100:	109ba304 	addi	r2,r2,28300
   12104:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   12108:	00800074 	movhi	r2,1
   1210c:	109ba304 	addi	r2,r2,28300
   12110:	10800017 	ldw	r2,0(r2)
   12114:	100170fa 	wrctl	ienable,r2
   12118:	e0bffd17 	ldw	r2,-12(fp)
   1211c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12120:	e0bffa17 	ldw	r2,-24(fp)
   12124:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   12128:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   1212c:	e037883a 	mov	sp,fp
   12130:	df000017 	ldw	fp,0(sp)
   12134:	dec00104 	addi	sp,sp,4
   12138:	f800283a 	ret

0001213c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   1213c:	defffc04 	addi	sp,sp,-16
   12140:	df000315 	stw	fp,12(sp)
   12144:	df000304 	addi	fp,sp,12
   12148:	e13ffe15 	stw	r4,-8(fp)
   1214c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   12150:	000530fa 	rdctl	r2,ienable
   12154:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   12158:	e0ffff17 	ldw	r3,-4(fp)
   1215c:	00800044 	movi	r2,1
   12160:	10c4983a 	sll	r2,r2,r3
   12164:	1007883a 	mov	r3,r2
   12168:	e0bffd17 	ldw	r2,-12(fp)
   1216c:	1884703a 	and	r2,r3,r2
   12170:	1004c03a 	cmpne	r2,r2,zero
}
   12174:	e037883a 	mov	sp,fp
   12178:	df000017 	ldw	fp,0(sp)
   1217c:	dec00104 	addi	sp,sp,4
   12180:	f800283a 	ret

00012184 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   12184:	defff404 	addi	sp,sp,-48
   12188:	dfc00b15 	stw	ra,44(sp)
   1218c:	df000a15 	stw	fp,40(sp)
   12190:	df000a04 	addi	fp,sp,40
   12194:	e13ffb15 	stw	r4,-20(fp)
   12198:	e17ffc15 	stw	r5,-16(fp)
   1219c:	e1bffd15 	stw	r6,-12(fp)
   121a0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   121a4:	00bffa84 	movi	r2,-22
   121a8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   121ac:	e0bffc17 	ldw	r2,-16(fp)
   121b0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   121b4:	e0bff917 	ldw	r2,-28(fp)
   121b8:	10800808 	cmpgei	r2,r2,32
   121bc:	1000291e 	bne	r2,zero,12264 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   121c0:	0005303a 	rdctl	r2,status
   121c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   121c8:	e0fff717 	ldw	r3,-36(fp)
   121cc:	00bfff84 	movi	r2,-2
   121d0:	1884703a 	and	r2,r3,r2
   121d4:	1001703a 	wrctl	status,r2
  
  return context;
   121d8:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   121dc:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   121e0:	e0bff917 	ldw	r2,-28(fp)
   121e4:	00c00074 	movhi	r3,1
   121e8:	18dbf504 	addi	r3,r3,28628
   121ec:	100490fa 	slli	r2,r2,3
   121f0:	10c7883a 	add	r3,r2,r3
   121f4:	e0bffd17 	ldw	r2,-12(fp)
   121f8:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   121fc:	e0bff917 	ldw	r2,-28(fp)
   12200:	00c00074 	movhi	r3,1
   12204:	18dbf504 	addi	r3,r3,28628
   12208:	100490fa 	slli	r2,r2,3
   1220c:	10c5883a 	add	r2,r2,r3
   12210:	10c00104 	addi	r3,r2,4
   12214:	e0bffe17 	ldw	r2,-8(fp)
   12218:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1221c:	e0bffd17 	ldw	r2,-12(fp)
   12220:	1005003a 	cmpeq	r2,r2,zero
   12224:	1000051e 	bne	r2,zero,1223c <alt_iic_isr_register+0xb8>
   12228:	e17ff917 	ldw	r5,-28(fp)
   1222c:	e13ffb17 	ldw	r4,-20(fp)
   12230:	00120000 	call	12000 <alt_ic_irq_enable>
   12234:	e0bfff15 	stw	r2,-4(fp)
   12238:	00000406 	br	1224c <alt_iic_isr_register+0xc8>
   1223c:	e17ff917 	ldw	r5,-28(fp)
   12240:	e13ffb17 	ldw	r4,-20(fp)
   12244:	001209c0 	call	1209c <alt_ic_irq_disable>
   12248:	e0bfff15 	stw	r2,-4(fp)
   1224c:	e0bfff17 	ldw	r2,-4(fp)
   12250:	e0bffa15 	stw	r2,-24(fp)
   12254:	e0bff817 	ldw	r2,-32(fp)
   12258:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   1225c:	e0bff617 	ldw	r2,-40(fp)
   12260:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   12264:	e0bffa17 	ldw	r2,-24(fp)
}
   12268:	e037883a 	mov	sp,fp
   1226c:	dfc00117 	ldw	ra,4(sp)
   12270:	df000017 	ldw	fp,0(sp)
   12274:	dec00204 	addi	sp,sp,8
   12278:	f800283a 	ret

0001227c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1227c:	defff904 	addi	sp,sp,-28
   12280:	dfc00615 	stw	ra,24(sp)
   12284:	df000515 	stw	fp,20(sp)
   12288:	df000504 	addi	fp,sp,20
   1228c:	e13ffc15 	stw	r4,-16(fp)
   12290:	e17ffd15 	stw	r5,-12(fp)
   12294:	e1bffe15 	stw	r6,-8(fp)
   12298:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1229c:	e13ffd17 	ldw	r4,-12(fp)
   122a0:	e17ffe17 	ldw	r5,-8(fp)
   122a4:	e1bfff17 	ldw	r6,-4(fp)
   122a8:	00124940 	call	12494 <open>
   122ac:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   122b0:	e0bffb17 	ldw	r2,-20(fp)
   122b4:	1004803a 	cmplt	r2,r2,zero
   122b8:	10001c1e 	bne	r2,zero,1232c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   122bc:	e0bffb17 	ldw	r2,-20(fp)
   122c0:	00c00074 	movhi	r3,1
   122c4:	18d05f04 	addi	r3,r3,16764
   122c8:	10800324 	muli	r2,r2,12
   122cc:	10c5883a 	add	r2,r2,r3
   122d0:	10c00017 	ldw	r3,0(r2)
   122d4:	e0bffc17 	ldw	r2,-16(fp)
   122d8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   122dc:	e0bffb17 	ldw	r2,-20(fp)
   122e0:	00c00074 	movhi	r3,1
   122e4:	18d05f04 	addi	r3,r3,16764
   122e8:	10800324 	muli	r2,r2,12
   122ec:	10c5883a 	add	r2,r2,r3
   122f0:	10800104 	addi	r2,r2,4
   122f4:	10c00017 	ldw	r3,0(r2)
   122f8:	e0bffc17 	ldw	r2,-16(fp)
   122fc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   12300:	e0bffb17 	ldw	r2,-20(fp)
   12304:	00c00074 	movhi	r3,1
   12308:	18d05f04 	addi	r3,r3,16764
   1230c:	10800324 	muli	r2,r2,12
   12310:	10c5883a 	add	r2,r2,r3
   12314:	10800204 	addi	r2,r2,8
   12318:	10c00017 	ldw	r3,0(r2)
   1231c:	e0bffc17 	ldw	r2,-16(fp)
   12320:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   12324:	e13ffb17 	ldw	r4,-20(fp)
   12328:	0010cfc0 	call	10cfc <alt_release_fd>
  }
} 
   1232c:	e037883a 	mov	sp,fp
   12330:	dfc00117 	ldw	ra,4(sp)
   12334:	df000017 	ldw	fp,0(sp)
   12338:	dec00204 	addi	sp,sp,8
   1233c:	f800283a 	ret

00012340 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   12340:	defffb04 	addi	sp,sp,-20
   12344:	dfc00415 	stw	ra,16(sp)
   12348:	df000315 	stw	fp,12(sp)
   1234c:	df000304 	addi	fp,sp,12
   12350:	e13ffd15 	stw	r4,-12(fp)
   12354:	e17ffe15 	stw	r5,-8(fp)
   12358:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   1235c:	01000074 	movhi	r4,1
   12360:	21106204 	addi	r4,r4,16776
   12364:	e17ffd17 	ldw	r5,-12(fp)
   12368:	01800044 	movi	r6,1
   1236c:	01c07fc4 	movi	r7,511
   12370:	001227c0 	call	1227c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   12374:	01000074 	movhi	r4,1
   12378:	21105f04 	addi	r4,r4,16764
   1237c:	e17ffe17 	ldw	r5,-8(fp)
   12380:	000d883a 	mov	r6,zero
   12384:	01c07fc4 	movi	r7,511
   12388:	001227c0 	call	1227c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1238c:	01000074 	movhi	r4,1
   12390:	21106504 	addi	r4,r4,16788
   12394:	e17fff17 	ldw	r5,-4(fp)
   12398:	01800044 	movi	r6,1
   1239c:	01c07fc4 	movi	r7,511
   123a0:	001227c0 	call	1227c <alt_open_fd>
}  
   123a4:	e037883a 	mov	sp,fp
   123a8:	dfc00117 	ldw	ra,4(sp)
   123ac:	df000017 	ldw	fp,0(sp)
   123b0:	dec00204 	addi	sp,sp,8
   123b4:	f800283a 	ret

000123b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   123b8:	defffc04 	addi	sp,sp,-16
   123bc:	df000315 	stw	fp,12(sp)
   123c0:	df000304 	addi	fp,sp,12
   123c4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   123c8:	e0bffe17 	ldw	r2,-8(fp)
   123cc:	10800217 	ldw	r2,8(r2)
   123d0:	10d00034 	orhi	r3,r2,16384
   123d4:	e0bffe17 	ldw	r2,-8(fp)
   123d8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   123dc:	e03ffd15 	stw	zero,-12(fp)
   123e0:	00002006 	br	12464 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   123e4:	e0bffd17 	ldw	r2,-12(fp)
   123e8:	00c00074 	movhi	r3,1
   123ec:	18d05f04 	addi	r3,r3,16764
   123f0:	10800324 	muli	r2,r2,12
   123f4:	10c5883a 	add	r2,r2,r3
   123f8:	10c00017 	ldw	r3,0(r2)
   123fc:	e0bffe17 	ldw	r2,-8(fp)
   12400:	10800017 	ldw	r2,0(r2)
   12404:	1880141e 	bne	r3,r2,12458 <alt_file_locked+0xa0>
   12408:	e0bffd17 	ldw	r2,-12(fp)
   1240c:	00c00074 	movhi	r3,1
   12410:	18d05f04 	addi	r3,r3,16764
   12414:	10800324 	muli	r2,r2,12
   12418:	10c5883a 	add	r2,r2,r3
   1241c:	10800204 	addi	r2,r2,8
   12420:	10800017 	ldw	r2,0(r2)
   12424:	1004403a 	cmpge	r2,r2,zero
   12428:	10000b1e 	bne	r2,zero,12458 <alt_file_locked+0xa0>
   1242c:	e0bffd17 	ldw	r2,-12(fp)
   12430:	10800324 	muli	r2,r2,12
   12434:	1007883a 	mov	r3,r2
   12438:	00800074 	movhi	r2,1
   1243c:	10905f04 	addi	r2,r2,16764
   12440:	1887883a 	add	r3,r3,r2
   12444:	e0bffe17 	ldw	r2,-8(fp)
   12448:	18800326 	beq	r3,r2,12458 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   1244c:	00bffcc4 	movi	r2,-13
   12450:	e0bfff15 	stw	r2,-4(fp)
   12454:	00000a06 	br	12480 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   12458:	e0bffd17 	ldw	r2,-12(fp)
   1245c:	10800044 	addi	r2,r2,1
   12460:	e0bffd15 	stw	r2,-12(fp)
   12464:	00800074 	movhi	r2,1
   12468:	1094e204 	addi	r2,r2,21384
   1246c:	10800017 	ldw	r2,0(r2)
   12470:	1007883a 	mov	r3,r2
   12474:	e0bffd17 	ldw	r2,-12(fp)
   12478:	18bfda2e 	bgeu	r3,r2,123e4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1247c:	e03fff15 	stw	zero,-4(fp)
   12480:	e0bfff17 	ldw	r2,-4(fp)
}
   12484:	e037883a 	mov	sp,fp
   12488:	df000017 	ldw	fp,0(sp)
   1248c:	dec00104 	addi	sp,sp,4
   12490:	f800283a 	ret

00012494 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   12494:	defff404 	addi	sp,sp,-48
   12498:	dfc00b15 	stw	ra,44(sp)
   1249c:	df000a15 	stw	fp,40(sp)
   124a0:	df000a04 	addi	fp,sp,40
   124a4:	e13ffb15 	stw	r4,-20(fp)
   124a8:	e17ffc15 	stw	r5,-16(fp)
   124ac:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   124b0:	00bfffc4 	movi	r2,-1
   124b4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   124b8:	00bffb44 	movi	r2,-19
   124bc:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   124c0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   124c4:	e13ffb17 	ldw	r4,-20(fp)
   124c8:	01400074 	movhi	r5,1
   124cc:	2954e004 	addi	r5,r5,21376
   124d0:	00128400 	call	12840 <alt_find_dev>
   124d4:	e0bffa15 	stw	r2,-24(fp)
   124d8:	e0bffa17 	ldw	r2,-24(fp)
   124dc:	1004c03a 	cmpne	r2,r2,zero
   124e0:	1000051e 	bne	r2,zero,124f8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   124e4:	e13ffb17 	ldw	r4,-20(fp)
   124e8:	00128d40 	call	128d4 <alt_find_file>
   124ec:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   124f0:	00800044 	movi	r2,1
   124f4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   124f8:	e0bffa17 	ldw	r2,-24(fp)
   124fc:	1005003a 	cmpeq	r2,r2,zero
   12500:	1000301e 	bne	r2,zero,125c4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   12504:	e13ffa17 	ldw	r4,-24(fp)
   12508:	00129f40 	call	129f4 <alt_get_fd>
   1250c:	e0bff815 	stw	r2,-32(fp)
   12510:	e0bff817 	ldw	r2,-32(fp)
   12514:	1004403a 	cmpge	r2,r2,zero
   12518:	1000031e 	bne	r2,zero,12528 <open+0x94>
    {
      status = index;
   1251c:	e0bff817 	ldw	r2,-32(fp)
   12520:	e0bff715 	stw	r2,-36(fp)
   12524:	00002906 	br	125cc <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   12528:	e0bff817 	ldw	r2,-32(fp)
   1252c:	10800324 	muli	r2,r2,12
   12530:	1007883a 	mov	r3,r2
   12534:	00800074 	movhi	r2,1
   12538:	10905f04 	addi	r2,r2,16764
   1253c:	1885883a 	add	r2,r3,r2
   12540:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   12544:	e0fffc17 	ldw	r3,-16(fp)
   12548:	00900034 	movhi	r2,16384
   1254c:	10bfffc4 	addi	r2,r2,-1
   12550:	1886703a 	and	r3,r3,r2
   12554:	e0bff917 	ldw	r2,-28(fp)
   12558:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   1255c:	e0bff617 	ldw	r2,-40(fp)
   12560:	1004c03a 	cmpne	r2,r2,zero
   12564:	1000061e 	bne	r2,zero,12580 <open+0xec>
   12568:	e13ff917 	ldw	r4,-28(fp)
   1256c:	00123b80 	call	123b8 <alt_file_locked>
   12570:	e0bff715 	stw	r2,-36(fp)
   12574:	e0bff717 	ldw	r2,-36(fp)
   12578:	1004803a 	cmplt	r2,r2,zero
   1257c:	1000131e 	bne	r2,zero,125cc <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   12580:	e0bffa17 	ldw	r2,-24(fp)
   12584:	10800317 	ldw	r2,12(r2)
   12588:	1005003a 	cmpeq	r2,r2,zero
   1258c:	1000091e 	bne	r2,zero,125b4 <open+0x120>
   12590:	e0bffa17 	ldw	r2,-24(fp)
   12594:	10800317 	ldw	r2,12(r2)
   12598:	e13ff917 	ldw	r4,-28(fp)
   1259c:	e17ffb17 	ldw	r5,-20(fp)
   125a0:	e1bffc17 	ldw	r6,-16(fp)
   125a4:	e1fffd17 	ldw	r7,-12(fp)
   125a8:	103ee83a 	callr	r2
   125ac:	e0bfff15 	stw	r2,-4(fp)
   125b0:	00000106 	br	125b8 <open+0x124>
   125b4:	e03fff15 	stw	zero,-4(fp)
   125b8:	e0bfff17 	ldw	r2,-4(fp)
   125bc:	e0bff715 	stw	r2,-36(fp)
   125c0:	00000206 	br	125cc <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   125c4:	00bffb44 	movi	r2,-19
   125c8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   125cc:	e0bff717 	ldw	r2,-36(fp)
   125d0:	1004403a 	cmpge	r2,r2,zero
   125d4:	1000091e 	bne	r2,zero,125fc <open+0x168>
  {
    alt_release_fd (index);  
   125d8:	e13ff817 	ldw	r4,-32(fp)
   125dc:	0010cfc0 	call	10cfc <alt_release_fd>
    ALT_ERRNO = -status;
   125e0:	001261c0 	call	1261c <alt_get_errno>
   125e4:	e0fff717 	ldw	r3,-36(fp)
   125e8:	00c7c83a 	sub	r3,zero,r3
   125ec:	10c00015 	stw	r3,0(r2)
    return -1;
   125f0:	00bfffc4 	movi	r2,-1
   125f4:	e0bffe15 	stw	r2,-8(fp)
   125f8:	00000206 	br	12604 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   125fc:	e0bff817 	ldw	r2,-32(fp)
   12600:	e0bffe15 	stw	r2,-8(fp)
   12604:	e0bffe17 	ldw	r2,-8(fp)
}
   12608:	e037883a 	mov	sp,fp
   1260c:	dfc00117 	ldw	ra,4(sp)
   12610:	df000017 	ldw	fp,0(sp)
   12614:	dec00204 	addi	sp,sp,8
   12618:	f800283a 	ret

0001261c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1261c:	defffd04 	addi	sp,sp,-12
   12620:	dfc00215 	stw	ra,8(sp)
   12624:	df000115 	stw	fp,4(sp)
   12628:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1262c:	00800074 	movhi	r2,1
   12630:	1094e304 	addi	r2,r2,21388
   12634:	10800017 	ldw	r2,0(r2)
   12638:	1005003a 	cmpeq	r2,r2,zero
   1263c:	1000061e 	bne	r2,zero,12658 <alt_get_errno+0x3c>
   12640:	00800074 	movhi	r2,1
   12644:	1094e304 	addi	r2,r2,21388
   12648:	10800017 	ldw	r2,0(r2)
   1264c:	103ee83a 	callr	r2
   12650:	e0bfff15 	stw	r2,-4(fp)
   12654:	00000306 	br	12664 <alt_get_errno+0x48>
   12658:	00800074 	movhi	r2,1
   1265c:	109b9c04 	addi	r2,r2,28272
   12660:	e0bfff15 	stw	r2,-4(fp)
   12664:	e0bfff17 	ldw	r2,-4(fp)
}
   12668:	e037883a 	mov	sp,fp
   1266c:	dfc00117 	ldw	ra,4(sp)
   12670:	df000017 	ldw	fp,0(sp)
   12674:	dec00204 	addi	sp,sp,8
   12678:	f800283a 	ret

0001267c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   1267c:	defffa04 	addi	sp,sp,-24
   12680:	df000515 	stw	fp,20(sp)
   12684:	df000504 	addi	fp,sp,20
   12688:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1268c:	0005303a 	rdctl	r2,status
   12690:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12694:	e0fffd17 	ldw	r3,-12(fp)
   12698:	00bfff84 	movi	r2,-2
   1269c:	1884703a 	and	r2,r3,r2
   126a0:	1001703a 	wrctl	status,r2
  
  return context;
   126a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   126a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   126ac:	e0bfff17 	ldw	r2,-4(fp)
   126b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   126b4:	e0bffc17 	ldw	r2,-16(fp)
   126b8:	10c00017 	ldw	r3,0(r2)
   126bc:	e0bffc17 	ldw	r2,-16(fp)
   126c0:	10800117 	ldw	r2,4(r2)
   126c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   126c8:	e0bffc17 	ldw	r2,-16(fp)
   126cc:	10c00117 	ldw	r3,4(r2)
   126d0:	e0bffc17 	ldw	r2,-16(fp)
   126d4:	10800017 	ldw	r2,0(r2)
   126d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   126dc:	e0fffc17 	ldw	r3,-16(fp)
   126e0:	e0bffc17 	ldw	r2,-16(fp)
   126e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   126e8:	e0fffc17 	ldw	r3,-16(fp)
   126ec:	e0bffc17 	ldw	r2,-16(fp)
   126f0:	18800015 	stw	r2,0(r3)
   126f4:	e0bffe17 	ldw	r2,-8(fp)
   126f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   126fc:	e0bffb17 	ldw	r2,-20(fp)
   12700:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   12704:	e037883a 	mov	sp,fp
   12708:	df000017 	ldw	fp,0(sp)
   1270c:	dec00104 	addi	sp,sp,4
   12710:	f800283a 	ret

00012714 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   12714:	defffb04 	addi	sp,sp,-20
   12718:	dfc00415 	stw	ra,16(sp)
   1271c:	df000315 	stw	fp,12(sp)
   12720:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   12724:	d0a00f17 	ldw	r2,-32708(gp)
   12728:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   1272c:	d0a6ce17 	ldw	r2,-25800(gp)
   12730:	10800044 	addi	r2,r2,1
   12734:	d0a6ce15 	stw	r2,-25800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12738:	00003106 	br	12800 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   1273c:	e0bffe17 	ldw	r2,-8(fp)
   12740:	10800017 	ldw	r2,0(r2)
   12744:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   12748:	e0bffe17 	ldw	r2,-8(fp)
   1274c:	10800403 	ldbu	r2,16(r2)
   12750:	10803fcc 	andi	r2,r2,255
   12754:	1005003a 	cmpeq	r2,r2,zero
   12758:	1000051e 	bne	r2,zero,12770 <alt_tick+0x5c>
   1275c:	d0a6ce17 	ldw	r2,-25800(gp)
   12760:	1004c03a 	cmpne	r2,r2,zero
   12764:	1000021e 	bne	r2,zero,12770 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   12768:	e0bffe17 	ldw	r2,-8(fp)
   1276c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   12770:	e0bffe17 	ldw	r2,-8(fp)
   12774:	10c00217 	ldw	r3,8(r2)
   12778:	d0a6ce17 	ldw	r2,-25800(gp)
   1277c:	10c01e36 	bltu	r2,r3,127f8 <alt_tick+0xe4>
   12780:	e0bffe17 	ldw	r2,-8(fp)
   12784:	10800403 	ldbu	r2,16(r2)
   12788:	10803fcc 	andi	r2,r2,255
   1278c:	1004c03a 	cmpne	r2,r2,zero
   12790:	1000191e 	bne	r2,zero,127f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   12794:	e0bffe17 	ldw	r2,-8(fp)
   12798:	10c00317 	ldw	r3,12(r2)
   1279c:	e0bffe17 	ldw	r2,-8(fp)
   127a0:	11000517 	ldw	r4,20(r2)
   127a4:	183ee83a 	callr	r3
   127a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   127ac:	e0bffd17 	ldw	r2,-12(fp)
   127b0:	1004c03a 	cmpne	r2,r2,zero
   127b4:	1000031e 	bne	r2,zero,127c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   127b8:	e13ffe17 	ldw	r4,-8(fp)
   127bc:	001267c0 	call	1267c <alt_alarm_stop>
   127c0:	00000d06 	br	127f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   127c4:	e0bffe17 	ldw	r2,-8(fp)
   127c8:	10c00217 	ldw	r3,8(r2)
   127cc:	e0bffd17 	ldw	r2,-12(fp)
   127d0:	1887883a 	add	r3,r3,r2
   127d4:	e0bffe17 	ldw	r2,-8(fp)
   127d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   127dc:	e0bffe17 	ldw	r2,-8(fp)
   127e0:	10c00217 	ldw	r3,8(r2)
   127e4:	d0a6ce17 	ldw	r2,-25800(gp)
   127e8:	1880032e 	bgeu	r3,r2,127f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   127ec:	e0fffe17 	ldw	r3,-8(fp)
   127f0:	00800044 	movi	r2,1
   127f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   127f8:	e0bfff17 	ldw	r2,-4(fp)
   127fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   12800:	d0e00f04 	addi	r3,gp,-32708
   12804:	e0bffe17 	ldw	r2,-8(fp)
   12808:	10ffcc1e 	bne	r2,r3,1273c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   1280c:	e037883a 	mov	sp,fp
   12810:	dfc00117 	ldw	ra,4(sp)
   12814:	df000017 	ldw	fp,0(sp)
   12818:	dec00204 	addi	sp,sp,8
   1281c:	f800283a 	ret

00012820 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   12820:	deffff04 	addi	sp,sp,-4
   12824:	df000015 	stw	fp,0(sp)
   12828:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   1282c:	000170fa 	wrctl	ienable,zero
}
   12830:	e037883a 	mov	sp,fp
   12834:	df000017 	ldw	fp,0(sp)
   12838:	dec00104 	addi	sp,sp,4
   1283c:	f800283a 	ret

00012840 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   12840:	defff904 	addi	sp,sp,-28
   12844:	dfc00615 	stw	ra,24(sp)
   12848:	df000515 	stw	fp,20(sp)
   1284c:	df000504 	addi	fp,sp,20
   12850:	e13ffd15 	stw	r4,-12(fp)
   12854:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   12858:	e0bffe17 	ldw	r2,-8(fp)
   1285c:	10800017 	ldw	r2,0(r2)
   12860:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   12864:	e13ffd17 	ldw	r4,-12(fp)
   12868:	0002bc80 	call	2bc8 <strlen>
   1286c:	10800044 	addi	r2,r2,1
   12870:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   12874:	00000d06 	br	128ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   12878:	e0bffc17 	ldw	r2,-16(fp)
   1287c:	11000217 	ldw	r4,8(r2)
   12880:	e1bffb17 	ldw	r6,-20(fp)
   12884:	e17ffd17 	ldw	r5,-12(fp)
   12888:	0012b880 	call	12b88 <memcmp>
   1288c:	1004c03a 	cmpne	r2,r2,zero
   12890:	1000031e 	bne	r2,zero,128a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   12894:	e0bffc17 	ldw	r2,-16(fp)
   12898:	e0bfff15 	stw	r2,-4(fp)
   1289c:	00000706 	br	128bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   128a0:	e0bffc17 	ldw	r2,-16(fp)
   128a4:	10800017 	ldw	r2,0(r2)
   128a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   128ac:	e0fffe17 	ldw	r3,-8(fp)
   128b0:	e0bffc17 	ldw	r2,-16(fp)
   128b4:	10fff01e 	bne	r2,r3,12878 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   128b8:	e03fff15 	stw	zero,-4(fp)
   128bc:	e0bfff17 	ldw	r2,-4(fp)
}
   128c0:	e037883a 	mov	sp,fp
   128c4:	dfc00117 	ldw	ra,4(sp)
   128c8:	df000017 	ldw	fp,0(sp)
   128cc:	dec00204 	addi	sp,sp,8
   128d0:	f800283a 	ret

000128d4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   128d4:	defffa04 	addi	sp,sp,-24
   128d8:	dfc00515 	stw	ra,20(sp)
   128dc:	df000415 	stw	fp,16(sp)
   128e0:	df000404 	addi	fp,sp,16
   128e4:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   128e8:	00800074 	movhi	r2,1
   128ec:	1094de04 	addi	r2,r2,21368
   128f0:	10800017 	ldw	r2,0(r2)
   128f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   128f8:	00003306 	br	129c8 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   128fc:	e0bffd17 	ldw	r2,-12(fp)
   12900:	11000217 	ldw	r4,8(r2)
   12904:	0002bc80 	call	2bc8 <strlen>
   12908:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1290c:	e0bffd17 	ldw	r2,-12(fp)
   12910:	10c00217 	ldw	r3,8(r2)
   12914:	e0bffc17 	ldw	r2,-16(fp)
   12918:	1885883a 	add	r2,r3,r2
   1291c:	10bfffc4 	addi	r2,r2,-1
   12920:	10800003 	ldbu	r2,0(r2)
   12924:	10803fcc 	andi	r2,r2,255
   12928:	1080201c 	xori	r2,r2,128
   1292c:	10bfe004 	addi	r2,r2,-128
   12930:	10800bd8 	cmpnei	r2,r2,47
   12934:	1000031e 	bne	r2,zero,12944 <alt_find_file+0x70>
    {
      len -= 1;
   12938:	e0bffc17 	ldw	r2,-16(fp)
   1293c:	10bfffc4 	addi	r2,r2,-1
   12940:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   12944:	e0bffc17 	ldw	r2,-16(fp)
   12948:	1007883a 	mov	r3,r2
   1294c:	e0bffe17 	ldw	r2,-8(fp)
   12950:	1885883a 	add	r2,r3,r2
   12954:	10800003 	ldbu	r2,0(r2)
   12958:	10803fcc 	andi	r2,r2,255
   1295c:	1080201c 	xori	r2,r2,128
   12960:	10bfe004 	addi	r2,r2,-128
   12964:	10800be0 	cmpeqi	r2,r2,47
   12968:	10000a1e 	bne	r2,zero,12994 <alt_find_file+0xc0>
   1296c:	e0bffc17 	ldw	r2,-16(fp)
   12970:	1007883a 	mov	r3,r2
   12974:	e0bffe17 	ldw	r2,-8(fp)
   12978:	1885883a 	add	r2,r3,r2
   1297c:	10800003 	ldbu	r2,0(r2)
   12980:	10803fcc 	andi	r2,r2,255
   12984:	1080201c 	xori	r2,r2,128
   12988:	10bfe004 	addi	r2,r2,-128
   1298c:	1004c03a 	cmpne	r2,r2,zero
   12990:	10000a1e 	bne	r2,zero,129bc <alt_find_file+0xe8>
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	11000217 	ldw	r4,8(r2)
   1299c:	e1bffc17 	ldw	r6,-16(fp)
   129a0:	e17ffe17 	ldw	r5,-8(fp)
   129a4:	0012b880 	call	12b88 <memcmp>
   129a8:	1004c03a 	cmpne	r2,r2,zero
   129ac:	1000031e 	bne	r2,zero,129bc <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   129b0:	e0bffd17 	ldw	r2,-12(fp)
   129b4:	e0bfff15 	stw	r2,-4(fp)
   129b8:	00000806 	br	129dc <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   129bc:	e0bffd17 	ldw	r2,-12(fp)
   129c0:	10800017 	ldw	r2,0(r2)
   129c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   129c8:	00c00074 	movhi	r3,1
   129cc:	18d4de04 	addi	r3,r3,21368
   129d0:	e0bffd17 	ldw	r2,-12(fp)
   129d4:	10ffc91e 	bne	r2,r3,128fc <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   129d8:	e03fff15 	stw	zero,-4(fp)
   129dc:	e0bfff17 	ldw	r2,-4(fp)
}
   129e0:	e037883a 	mov	sp,fp
   129e4:	dfc00117 	ldw	ra,4(sp)
   129e8:	df000017 	ldw	fp,0(sp)
   129ec:	dec00204 	addi	sp,sp,8
   129f0:	f800283a 	ret

000129f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   129f4:	defffc04 	addi	sp,sp,-16
   129f8:	df000315 	stw	fp,12(sp)
   129fc:	df000304 	addi	fp,sp,12
   12a00:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   12a04:	00bffa04 	movi	r2,-24
   12a08:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12a0c:	e03ffe15 	stw	zero,-8(fp)
   12a10:	00001e06 	br	12a8c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   12a14:	e0bffe17 	ldw	r2,-8(fp)
   12a18:	00c00074 	movhi	r3,1
   12a1c:	18d05f04 	addi	r3,r3,16764
   12a20:	10800324 	muli	r2,r2,12
   12a24:	10c5883a 	add	r2,r2,r3
   12a28:	10800017 	ldw	r2,0(r2)
   12a2c:	1004c03a 	cmpne	r2,r2,zero
   12a30:	1000131e 	bne	r2,zero,12a80 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   12a34:	e0bffe17 	ldw	r2,-8(fp)
   12a38:	00c00074 	movhi	r3,1
   12a3c:	18d05f04 	addi	r3,r3,16764
   12a40:	10800324 	muli	r2,r2,12
   12a44:	10c7883a 	add	r3,r2,r3
   12a48:	e0bfff17 	ldw	r2,-4(fp)
   12a4c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   12a50:	00800074 	movhi	r2,1
   12a54:	1094e204 	addi	r2,r2,21384
   12a58:	10c00017 	ldw	r3,0(r2)
   12a5c:	e0bffe17 	ldw	r2,-8(fp)
   12a60:	1880040e 	bge	r3,r2,12a74 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   12a64:	00c00074 	movhi	r3,1
   12a68:	18d4e204 	addi	r3,r3,21384
   12a6c:	e0bffe17 	ldw	r2,-8(fp)
   12a70:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   12a74:	e0bffe17 	ldw	r2,-8(fp)
   12a78:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   12a7c:	00000606 	br	12a98 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   12a80:	e0bffe17 	ldw	r2,-8(fp)
   12a84:	10800044 	addi	r2,r2,1
   12a88:	e0bffe15 	stw	r2,-8(fp)
   12a8c:	e0bffe17 	ldw	r2,-8(fp)
   12a90:	10800810 	cmplti	r2,r2,32
   12a94:	103fdf1e 	bne	r2,zero,12a14 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   12a98:	e0bffd17 	ldw	r2,-12(fp)
}
   12a9c:	e037883a 	mov	sp,fp
   12aa0:	df000017 	ldw	fp,0(sp)
   12aa4:	dec00104 	addi	sp,sp,4
   12aa8:	f800283a 	ret

00012aac <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   12aac:	defffb04 	addi	sp,sp,-20
   12ab0:	df000415 	stw	fp,16(sp)
   12ab4:	df000404 	addi	fp,sp,16
   12ab8:	e13ffe15 	stw	r4,-8(fp)
   12abc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   12ac0:	e0bfff17 	ldw	r2,-4(fp)
   12ac4:	10840070 	cmpltui	r2,r2,4097
   12ac8:	1000021e 	bne	r2,zero,12ad4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   12acc:	00840004 	movi	r2,4096
   12ad0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   12ad4:	e0fffe17 	ldw	r3,-8(fp)
   12ad8:	e0bfff17 	ldw	r2,-4(fp)
   12adc:	1885883a 	add	r2,r3,r2
   12ae0:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12ae4:	e0bffe17 	ldw	r2,-8(fp)
   12ae8:	e0bffd15 	stw	r2,-12(fp)
   12aec:	00000506 	br	12b04 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   12af0:	e0bffd17 	ldw	r2,-12(fp)
   12af4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   12af8:	e0bffd17 	ldw	r2,-12(fp)
   12afc:	10800804 	addi	r2,r2,32
   12b00:	e0bffd15 	stw	r2,-12(fp)
   12b04:	e0fffd17 	ldw	r3,-12(fp)
   12b08:	e0bffc17 	ldw	r2,-16(fp)
   12b0c:	18bff836 	bltu	r3,r2,12af0 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   12b10:	e0bffe17 	ldw	r2,-8(fp)
   12b14:	108007cc 	andi	r2,r2,31
   12b18:	1005003a 	cmpeq	r2,r2,zero
   12b1c:	1000021e 	bne	r2,zero,12b28 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   12b20:	e0bffd17 	ldw	r2,-12(fp)
   12b24:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   12b28:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   12b2c:	e037883a 	mov	sp,fp
   12b30:	df000017 	ldw	fp,0(sp)
   12b34:	dec00104 	addi	sp,sp,4
   12b38:	f800283a 	ret

00012b3c <atexit>:
   12b3c:	200b883a 	mov	r5,r4
   12b40:	000d883a 	mov	r6,zero
   12b44:	0009883a 	mov	r4,zero
   12b48:	000f883a 	mov	r7,zero
   12b4c:	0012bfc1 	jmpi	12bfc <__register_exitproc>

00012b50 <exit>:
   12b50:	defffe04 	addi	sp,sp,-8
   12b54:	000b883a 	mov	r5,zero
   12b58:	dc000015 	stw	r16,0(sp)
   12b5c:	dfc00115 	stw	ra,4(sp)
   12b60:	2021883a 	mov	r16,r4
   12b64:	0012d340 	call	12d34 <__call_exitprocs>
   12b68:	00800074 	movhi	r2,1
   12b6c:	1094d904 	addi	r2,r2,21348
   12b70:	11000017 	ldw	r4,0(r2)
   12b74:	20800f17 	ldw	r2,60(r4)
   12b78:	10000126 	beq	r2,zero,12b80 <exit+0x30>
   12b7c:	103ee83a 	callr	r2
   12b80:	8009883a 	mov	r4,r16
   12b84:	0012f240 	call	12f24 <_exit>

00012b88 <memcmp>:
   12b88:	00c000c4 	movi	r3,3
   12b8c:	1980032e 	bgeu	r3,r6,12b9c <memcmp+0x14>
   12b90:	2144b03a 	or	r2,r4,r5
   12b94:	10c4703a 	and	r2,r2,r3
   12b98:	10000f26 	beq	r2,zero,12bd8 <memcmp+0x50>
   12b9c:	31ffffc4 	addi	r7,r6,-1
   12ba0:	3000061e 	bne	r6,zero,12bbc <memcmp+0x34>
   12ba4:	00000a06 	br	12bd0 <memcmp+0x48>
   12ba8:	39ffffc4 	addi	r7,r7,-1
   12bac:	00bfffc4 	movi	r2,-1
   12bb0:	21000044 	addi	r4,r4,1
   12bb4:	29400044 	addi	r5,r5,1
   12bb8:	38800526 	beq	r7,r2,12bd0 <memcmp+0x48>
   12bbc:	20c00003 	ldbu	r3,0(r4)
   12bc0:	28800003 	ldbu	r2,0(r5)
   12bc4:	18bff826 	beq	r3,r2,12ba8 <memcmp+0x20>
   12bc8:	1885c83a 	sub	r2,r3,r2
   12bcc:	f800283a 	ret
   12bd0:	0005883a 	mov	r2,zero
   12bd4:	f800283a 	ret
   12bd8:	180f883a 	mov	r7,r3
   12bdc:	20c00017 	ldw	r3,0(r4)
   12be0:	28800017 	ldw	r2,0(r5)
   12be4:	18bfed1e 	bne	r3,r2,12b9c <memcmp+0x14>
   12be8:	31bfff04 	addi	r6,r6,-4
   12bec:	21000104 	addi	r4,r4,4
   12bf0:	29400104 	addi	r5,r5,4
   12bf4:	39bff936 	bltu	r7,r6,12bdc <memcmp+0x54>
   12bf8:	003fe806 	br	12b9c <memcmp+0x14>

00012bfc <__register_exitproc>:
   12bfc:	defffa04 	addi	sp,sp,-24
   12c00:	00800074 	movhi	r2,1
   12c04:	1094d904 	addi	r2,r2,21348
   12c08:	dc000015 	stw	r16,0(sp)
   12c0c:	14000017 	ldw	r16,0(r2)
   12c10:	dd000415 	stw	r20,16(sp)
   12c14:	2829883a 	mov	r20,r5
   12c18:	81405217 	ldw	r5,328(r16)
   12c1c:	dcc00315 	stw	r19,12(sp)
   12c20:	dc800215 	stw	r18,8(sp)
   12c24:	dc400115 	stw	r17,4(sp)
   12c28:	dfc00515 	stw	ra,20(sp)
   12c2c:	2023883a 	mov	r17,r4
   12c30:	3027883a 	mov	r19,r6
   12c34:	3825883a 	mov	r18,r7
   12c38:	28002526 	beq	r5,zero,12cd0 <__register_exitproc+0xd4>
   12c3c:	29000117 	ldw	r4,4(r5)
   12c40:	008007c4 	movi	r2,31
   12c44:	11002716 	blt	r2,r4,12ce4 <__register_exitproc+0xe8>
   12c48:	8800101e 	bne	r17,zero,12c8c <__register_exitproc+0x90>
   12c4c:	2105883a 	add	r2,r4,r4
   12c50:	1085883a 	add	r2,r2,r2
   12c54:	20c00044 	addi	r3,r4,1
   12c58:	1145883a 	add	r2,r2,r5
   12c5c:	0009883a 	mov	r4,zero
   12c60:	15000215 	stw	r20,8(r2)
   12c64:	28c00115 	stw	r3,4(r5)
   12c68:	2005883a 	mov	r2,r4
   12c6c:	dfc00517 	ldw	ra,20(sp)
   12c70:	dd000417 	ldw	r20,16(sp)
   12c74:	dcc00317 	ldw	r19,12(sp)
   12c78:	dc800217 	ldw	r18,8(sp)
   12c7c:	dc400117 	ldw	r17,4(sp)
   12c80:	dc000017 	ldw	r16,0(sp)
   12c84:	dec00604 	addi	sp,sp,24
   12c88:	f800283a 	ret
   12c8c:	29802204 	addi	r6,r5,136
   12c90:	00800044 	movi	r2,1
   12c94:	110e983a 	sll	r7,r2,r4
   12c98:	30c04017 	ldw	r3,256(r6)
   12c9c:	2105883a 	add	r2,r4,r4
   12ca0:	1085883a 	add	r2,r2,r2
   12ca4:	1185883a 	add	r2,r2,r6
   12ca8:	19c6b03a 	or	r3,r3,r7
   12cac:	14802015 	stw	r18,128(r2)
   12cb0:	14c00015 	stw	r19,0(r2)
   12cb4:	00800084 	movi	r2,2
   12cb8:	30c04015 	stw	r3,256(r6)
   12cbc:	88bfe31e 	bne	r17,r2,12c4c <__register_exitproc+0x50>
   12cc0:	30804117 	ldw	r2,260(r6)
   12cc4:	11c4b03a 	or	r2,r2,r7
   12cc8:	30804115 	stw	r2,260(r6)
   12ccc:	003fdf06 	br	12c4c <__register_exitproc+0x50>
   12cd0:	00800074 	movhi	r2,1
   12cd4:	109c3504 	addi	r2,r2,28884
   12cd8:	100b883a 	mov	r5,r2
   12cdc:	80805215 	stw	r2,328(r16)
   12ce0:	003fd606 	br	12c3c <__register_exitproc+0x40>
   12ce4:	00800034 	movhi	r2,0
   12ce8:	10800004 	addi	r2,r2,0
   12cec:	1000021e 	bne	r2,zero,12cf8 <__register_exitproc+0xfc>
   12cf0:	013fffc4 	movi	r4,-1
   12cf4:	003fdc06 	br	12c68 <__register_exitproc+0x6c>
   12cf8:	01006404 	movi	r4,400
   12cfc:	103ee83a 	callr	r2
   12d00:	1007883a 	mov	r3,r2
   12d04:	103ffa26 	beq	r2,zero,12cf0 <__register_exitproc+0xf4>
   12d08:	80805217 	ldw	r2,328(r16)
   12d0c:	180b883a 	mov	r5,r3
   12d10:	18000115 	stw	zero,4(r3)
   12d14:	18800015 	stw	r2,0(r3)
   12d18:	80c05215 	stw	r3,328(r16)
   12d1c:	18006215 	stw	zero,392(r3)
   12d20:	18006315 	stw	zero,396(r3)
   12d24:	0009883a 	mov	r4,zero
   12d28:	883fc826 	beq	r17,zero,12c4c <__register_exitproc+0x50>
   12d2c:	003fd706 	br	12c8c <__register_exitproc+0x90>

00012d30 <register_fini>:
   12d30:	f800283a 	ret

00012d34 <__call_exitprocs>:
   12d34:	00800074 	movhi	r2,1
   12d38:	1094d904 	addi	r2,r2,21348
   12d3c:	10800017 	ldw	r2,0(r2)
   12d40:	defff304 	addi	sp,sp,-52
   12d44:	df000b15 	stw	fp,44(sp)
   12d48:	d8800115 	stw	r2,4(sp)
   12d4c:	00800034 	movhi	r2,0
   12d50:	10800004 	addi	r2,r2,0
   12d54:	1005003a 	cmpeq	r2,r2,zero
   12d58:	d8800215 	stw	r2,8(sp)
   12d5c:	d8800117 	ldw	r2,4(sp)
   12d60:	dd400815 	stw	r21,32(sp)
   12d64:	dd000715 	stw	r20,28(sp)
   12d68:	10805204 	addi	r2,r2,328
   12d6c:	dfc00c15 	stw	ra,48(sp)
   12d70:	ddc00a15 	stw	r23,40(sp)
   12d74:	dd800915 	stw	r22,36(sp)
   12d78:	dcc00615 	stw	r19,24(sp)
   12d7c:	dc800515 	stw	r18,20(sp)
   12d80:	dc400415 	stw	r17,16(sp)
   12d84:	dc000315 	stw	r16,12(sp)
   12d88:	282b883a 	mov	r21,r5
   12d8c:	2039883a 	mov	fp,r4
   12d90:	d8800015 	stw	r2,0(sp)
   12d94:	2829003a 	cmpeq	r20,r5,zero
   12d98:	d8800117 	ldw	r2,4(sp)
   12d9c:	14405217 	ldw	r17,328(r2)
   12da0:	88001026 	beq	r17,zero,12de4 <__call_exitprocs+0xb0>
   12da4:	ddc00017 	ldw	r23,0(sp)
   12da8:	88800117 	ldw	r2,4(r17)
   12dac:	8c802204 	addi	r18,r17,136
   12db0:	143fffc4 	addi	r16,r2,-1
   12db4:	80000916 	blt	r16,zero,12ddc <__call_exitprocs+0xa8>
   12db8:	05bfffc4 	movi	r22,-1
   12dbc:	a000151e 	bne	r20,zero,12e14 <__call_exitprocs+0xe0>
   12dc0:	8409883a 	add	r4,r16,r16
   12dc4:	2105883a 	add	r2,r4,r4
   12dc8:	1485883a 	add	r2,r2,r18
   12dcc:	10c02017 	ldw	r3,128(r2)
   12dd0:	a8c01126 	beq	r21,r3,12e18 <__call_exitprocs+0xe4>
   12dd4:	843fffc4 	addi	r16,r16,-1
   12dd8:	85bff81e 	bne	r16,r22,12dbc <__call_exitprocs+0x88>
   12ddc:	d8800217 	ldw	r2,8(sp)
   12de0:	10003126 	beq	r2,zero,12ea8 <__call_exitprocs+0x174>
   12de4:	dfc00c17 	ldw	ra,48(sp)
   12de8:	df000b17 	ldw	fp,44(sp)
   12dec:	ddc00a17 	ldw	r23,40(sp)
   12df0:	dd800917 	ldw	r22,36(sp)
   12df4:	dd400817 	ldw	r21,32(sp)
   12df8:	dd000717 	ldw	r20,28(sp)
   12dfc:	dcc00617 	ldw	r19,24(sp)
   12e00:	dc800517 	ldw	r18,20(sp)
   12e04:	dc400417 	ldw	r17,16(sp)
   12e08:	dc000317 	ldw	r16,12(sp)
   12e0c:	dec00d04 	addi	sp,sp,52
   12e10:	f800283a 	ret
   12e14:	8409883a 	add	r4,r16,r16
   12e18:	88c00117 	ldw	r3,4(r17)
   12e1c:	2105883a 	add	r2,r4,r4
   12e20:	1445883a 	add	r2,r2,r17
   12e24:	18ffffc4 	addi	r3,r3,-1
   12e28:	11800217 	ldw	r6,8(r2)
   12e2c:	1c001526 	beq	r3,r16,12e84 <__call_exitprocs+0x150>
   12e30:	10000215 	stw	zero,8(r2)
   12e34:	303fe726 	beq	r6,zero,12dd4 <__call_exitprocs+0xa0>
   12e38:	00c00044 	movi	r3,1
   12e3c:	1c06983a 	sll	r3,r3,r16
   12e40:	90804017 	ldw	r2,256(r18)
   12e44:	8cc00117 	ldw	r19,4(r17)
   12e48:	1884703a 	and	r2,r3,r2
   12e4c:	10001426 	beq	r2,zero,12ea0 <__call_exitprocs+0x16c>
   12e50:	90804117 	ldw	r2,260(r18)
   12e54:	1884703a 	and	r2,r3,r2
   12e58:	10000c1e 	bne	r2,zero,12e8c <__call_exitprocs+0x158>
   12e5c:	2105883a 	add	r2,r4,r4
   12e60:	1485883a 	add	r2,r2,r18
   12e64:	11400017 	ldw	r5,0(r2)
   12e68:	e009883a 	mov	r4,fp
   12e6c:	303ee83a 	callr	r6
   12e70:	88800117 	ldw	r2,4(r17)
   12e74:	98bfc81e 	bne	r19,r2,12d98 <__call_exitprocs+0x64>
   12e78:	b8800017 	ldw	r2,0(r23)
   12e7c:	147fd526 	beq	r2,r17,12dd4 <__call_exitprocs+0xa0>
   12e80:	003fc506 	br	12d98 <__call_exitprocs+0x64>
   12e84:	8c000115 	stw	r16,4(r17)
   12e88:	003fea06 	br	12e34 <__call_exitprocs+0x100>
   12e8c:	2105883a 	add	r2,r4,r4
   12e90:	1485883a 	add	r2,r2,r18
   12e94:	11000017 	ldw	r4,0(r2)
   12e98:	303ee83a 	callr	r6
   12e9c:	003ff406 	br	12e70 <__call_exitprocs+0x13c>
   12ea0:	303ee83a 	callr	r6
   12ea4:	003ff206 	br	12e70 <__call_exitprocs+0x13c>
   12ea8:	88800117 	ldw	r2,4(r17)
   12eac:	1000081e 	bne	r2,zero,12ed0 <__call_exitprocs+0x19c>
   12eb0:	89000017 	ldw	r4,0(r17)
   12eb4:	20000726 	beq	r4,zero,12ed4 <__call_exitprocs+0x1a0>
   12eb8:	b9000015 	stw	r4,0(r23)
   12ebc:	8809883a 	mov	r4,r17
   12ec0:	00000000 	call	0 <__alt_mem_sdram>
   12ec4:	bc400017 	ldw	r17,0(r23)
   12ec8:	883fb71e 	bne	r17,zero,12da8 <__call_exitprocs+0x74>
   12ecc:	003fc506 	br	12de4 <__call_exitprocs+0xb0>
   12ed0:	89000017 	ldw	r4,0(r17)
   12ed4:	882f883a 	mov	r23,r17
   12ed8:	2023883a 	mov	r17,r4
   12edc:	883fb21e 	bne	r17,zero,12da8 <__call_exitprocs+0x74>
   12ee0:	003fc006 	br	12de4 <__call_exitprocs+0xb0>

00012ee4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   12ee4:	defffd04 	addi	sp,sp,-12
   12ee8:	df000215 	stw	fp,8(sp)
   12eec:	df000204 	addi	fp,sp,8
   12ef0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   12ef4:	e0bfff17 	ldw	r2,-4(fp)
   12ef8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   12efc:	e0bffe17 	ldw	r2,-8(fp)
   12f00:	1005003a 	cmpeq	r2,r2,zero
   12f04:	1000021e 	bne	r2,zero,12f10 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   12f08:	002af070 	cmpltui	zero,zero,43969
   12f0c:	00000106 	br	12f14 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   12f10:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   12f14:	e037883a 	mov	sp,fp
   12f18:	df000017 	ldw	fp,0(sp)
   12f1c:	dec00104 	addi	sp,sp,4
   12f20:	f800283a 	ret

00012f24 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   12f24:	defffd04 	addi	sp,sp,-12
   12f28:	dfc00215 	stw	ra,8(sp)
   12f2c:	df000115 	stw	fp,4(sp)
   12f30:	df000104 	addi	fp,sp,4
   12f34:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   12f38:	e13fff17 	ldw	r4,-4(fp)
   12f3c:	0012ee40 	call	12ee4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   12f40:	003fff06 	br	12f40 <_exit+0x1c>
   12f44:	00012d30 	cmpltui	zero,zero,1204
