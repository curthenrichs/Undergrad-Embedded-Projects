
Milestone_4.elf:     file format elf32-littlenios2
Milestone_4.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00015388 memsz 0x00015388 flags r-x
    LOAD off    0x000163a8 vaddr 0x000153a8 paddr 0x00016e9c align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00018990 vaddr 0x00018990 paddr 0x00018990 align 2**12
         filesz 0x00000000 memsz 0x000004d8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014514  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000ce0  000146c8  000146c8  000156c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000153a8  00016e9c  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004d8  00018990  00018990  00018990  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00017e9c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001278  00000000  00000000  00017ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001c8d  00000000  00000000  00019140  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033ea9  00000000  00000000  0001adcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b3d8  00000000  00000000  0004ec76  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d13a  00000000  00000000  0005a04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002744  00000000  00000000  00077188  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c99  00000000  00000000  000798cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012d48  00000000  00000000  0007c565  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008f2b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  0008f2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00094091  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00094094  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00094097  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00094098  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00094099  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009409d  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000940a1  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000940a5  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000940b0  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000940bb  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000940c6  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  000940d7  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00093cf1  00000000  00000000  00094117  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000146c8 l    d  .rodata	00000000 .rodata
000153a8 l    d  .rwdata	00000000 .rwdata
00018990 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Camera.c
000189b0 l     O .bss	00000002 fd
00018990 l     O .bss	00000001 pixel.1403
00018994 l     O .bss	00000004 vgaPtr.1402
00018998 l     O .bss	00000004 col.1401
0001899c l     O .bss	00000004 row.1400
000189a0 l     O .bss	00000001 pixel.1517
000189a4 l     O .bss	00000004 vgaPtr.1516
000189a8 l     O .bss	00000004 col.1515
000189ac l     O .bss	00000004 row.1514
00000000 l    df *ABS*	00000000 CommandLine.c
000153a8 l     O .rwdata	0000000c HELP
00000a5c l     F .text	0000017c _help
000008c0 l     F .text	000000d0 _generateList
00018a10 l     O .bss	00000050 inputStr
00018a60 l     O .bss	00000050 cmdStr
00000990 l     F .text	000000cc cmd_parseInput
000189ec l     O .bss	00000024 commandList
00000000 l    df *ABS*	00000000 CameraCMD.c
00000bd8 l     F .text	00000094 _readCam
00000c6c l     F .text	0000008c _writeCam
00000cf8 l     F .text	00000060 _displayImage
00000d58 l     F .text	000002f8 _track
00001190 l     F .text	00000224 _track_inputParsing
00001050 l     F .text	00000140 _track_boundingBox
000189b4 l     O .bss	00000001 pixel.2599
000189b5 l     O .bss	00000001 col.2598
000189b6 l     O .bss	00000001 row.2597
00000000 l    df *ABS*	00000000 MemoryCMD.c
000013b4 l     F .text	0000009c _read
00001450 l     F .text	00000088 _write
000014d8 l     F .text	00000290 _printMem
00000000 l    df *ABS*	00000000 ServoCMD.c
00001768 l     F .text	000000bc _pan
00001824 l     F .text	000000bc _tilt
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LCD.c
00001e84 l     F .text	0000008c lcd_util_pollBusyFlag
00000000 l    df *ABS*	00000000 LED.c
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 Pushbutton.c
00000000 l    df *ABS*	00000000 Timer.c
00000000 l       *ABS*	00000000 irq0
00000002 l       *ABS*	00000000 irq2
00000000 l    df *ABS*	00000000 UART.c
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 Servo.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002a48 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 ctype_.c
00014e65 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00002d00 l     F .text	00000058 std
00002e0c l     F .text	00000008 __fp_lock
00002e14 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015414 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00003db0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00003f10 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000043bc l     F .text	00000058 __sprint_r
0001505e l     O .rodata	00000010 blanks.3452
0001504e l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00015076 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00007c88 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00016e70 l     O .rwdata	00000004 charset
000150b8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00015200 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0000c120 l     F .text	00000048 match
00015c3c l     O .rwdata	00000014 fpi.1950
0001521c l     O .rodata	00000028 tinytens
00015c28 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e758 l     F .text	00000024 htinit
0000e7e4 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000f04c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00010180 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00011d34 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011d94 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011e94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011fb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00012094 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000121f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001241c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016e8c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000126b8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015df8 l     O .rwdata	00001060 jtag_uart_0
000127a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000129e8 l     F .text	00000228 altera_avalon_jtag_uart_irq
00012c10 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0001328c l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000135d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000139fc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013b38 l     F .text	000000dc alt_file_locked
00013d9c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000144b0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00014664 l     F .text	00000040 alt_sim_halt
00003b14 g     F .text	0000001c putchar
0000aba8 g     F .text	00000094 _mprec_log10
0000ac94 g     F .text	00000088 __any_on
0000f2e0 g     F .text	00000070 _isatty_r
000151d8 g     O .rodata	00000028 __mprec_tinytens
00012250 g     F .text	0000006c alt_main
000042bc g     F .text	0000008c strcpy
00003b38 g     F .text	000000a0 _puts_r
00018bd8 g     O .bss	00000100 alt_irq
0000a3b0 g     F .text	00000078 _lseek_r
00002750 g     F .text	00000034 servo_init
000002c0 g     F .text	00000204 cam_imageCapture
00016e9c g       *ABS*	00000000 __flash_rwdata_start
00010ca0 g     F .text	00000088 __eqdf2
000021a0 g     F .text	00000098 timer_delay
00002164 g     F .text	0000003c pushbutton_read
00018e68 g       *ABS*	00000000 __alt_heap_start
00003a9c g     F .text	00000044 printf
0000402c g     F .text	00000068 __sseek
00002d68 g     F .text	000000a4 __sinit
0000e4e4 g     F .text	00000130 __swbuf_r
0000a310 g     F .text	00000084 _setlocale_r
00002e68 g     F .text	00000068 __sfmoreglue
0000e4c8 g     F .text	0000001c ungetc
000122dc g     F .text	00000020 __malloc_unlock
000153f0 g     O .rwdata	0000000c WR
0000c168 g     F .text	000014e4 _strtod_r
000153b4 g     O .rwdata	0000000c RDCAMREG
0000a6bc g     F .text	000000e0 memmove
00002784 g     F .text	00000070 servo_pan
00002e58 g     F .text	00000010 _cleanup
0000ad1c g     F .text	000000bc _Balloc
00001cbc g     F .text	0000002c lcd_clr
00010db0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00001da0 g     F .text	000000e4 lcd_printString
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e6e4 g     F .text	00000074 _fstat_r
000189c4 g     O .bss	00000004 errno
00007964 g     F .text	00000024 __svfscanf
00011598 g     F .text	0000002c __make_fp
000189d8 g     O .bss	00000004 alt_argv
000025cc g     F .text	00000080 uart_printStr
0001ee58 g       *ABS*	00000000 _gp
000020bc g     F .text	00000050 PWM_writeOCRB
00002cdc g     F .text	00000024 fgets
00015c78 g     O .rwdata	00000180 alt_fd_list
00002238 g     F .text	00000124 timer_interrupt_init
000153d8 g     O .rwdata	0000000c TRACK
00003b30 g     F .text	00000008 _putchar_r
000153fc g     O .rwdata	0000000c PAN
00013fc0 g     F .text	00000094 alt_find_dev
00003964 g     F .text	000000a0 memcpy
0000f098 g     F .text	00000248 __hexnan
00002e4c g     F .text	0000000c _cleanup_r
00010fd0 g     F .text	000000f8 __floatsidf
00013ac0 g     F .text	00000078 alt_io_redirect
00010ec0 g     F .text	00000088 __ltdf2
000146c8 g       *ABS*	00000000 __DTOR_END__
00003bd8 g     F .text	00000014 puts
0000a63c g     F .text	00000040 mbrtowc
00007988 g     F .text	00000068 _vfscanf_r
0000aaf8 g     F .text	000000b0 __ratio
00012e28 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003ae0 g     F .text	00000034 _printf_r
00800000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00002b84 g     F .text	00000008 __udivsi3
00011ef4 g     F .text	000000c0 isatty
0000a2c0 g     F .text	0000002c iswspace
000150e8 g     O .rodata	000000c8 __mprec_tens
0000a2ec g     F .text	00000008 __locale_charset
0000f3e8 g     F .text	000000a4 __fixunsdfsi
0001422c g     F .text	00000090 alt_icache_flush
000153c0 g     O .rwdata	0000000c WRCAMREG
000189b8 g     O .bss	00000004 __malloc_top_pad
0000df3c g     F .text	00000024 strtoul
00016e6c g     O .rwdata	00000004 __mb_cur_max
0000a2f4 g     F .text	0000000c _localeconv_r
0000df60 g     F .text	000002f0 _strtoull_r
0000b414 g     F .text	0000003c __i2b
00009e24 g     F .text	0000049c __sfvwrite_r
00003dcc g     F .text	00000070 _sbrk_r
00001b0c g     F .text	00000064 I2C_action
0000b97c g     F .text	00000078 _read_r
00015c1c g     O .rwdata	0000000c __lc_ctype
00016e84 g     O .rwdata	00000004 alt_max_fd
000118d8 g     F .text	00000138 __unpack_d
00009454 g     F .text	00000110 _fclose_r
00009774 g     F .text	00000034 fflush
000189bc g     O .bss	00000004 __malloc_max_sbrked_mem
00010610 g     F .text	00000074 __adddf3
00010018 g     F .text	00000078 __nesf2
0000a9d8 g     F .text	00000120 __b2d
0000fa68 g     F .text	000005b0 __umoddi3
00012100 g     F .text	000000f0 lseek
00016e60 g     O .rwdata	00000004 _global_impure_ptr
000004c4 g     F .text	000002a4 cam_track
0000b9f4 g     F .text	000005f4 _realloc_r
00018e68 g       *ABS*	00000000 __bss_end
00013904 g     F .text	000000f8 alt_iic_isr_register
00013e94 g     F .text	0000010c alt_tick
00018ad8 g     O .bss	00000100 __hexdig
0000f48c g     F .text	000005dc __udivdi3
000151b0 g     O .rodata	00000028 __mprec_bigtens
0000b670 g     F .text	00000120 __s2b
00011214 g     F .text	00000194 __floatunsidf
0000a8f8 g     F .text	00000060 __mcmp
00016e58 g     O .rwdata	00000004 __ctype_ptr
00002e34 g     F .text	00000018 __fp_lock_all
000138bc g     F .text	00000048 alt_ic_irq_enabled
00013dfc g     F .text	00000098 alt_alarm_stop
0000d9d0 g     F .text	00000024 strtol
000189e0 g     O .bss	00000004 alt_irq_active
00002538 g     F .text	0000004c uart_putch
000000ec g     F .exceptions	000000c8 alt_irq_handler
00015c50 g     O .rwdata	00000028 alt_dev_null
00011428 g     F .text	000000c8 __unpack_f
00002138 g     F .text	0000002c PWM_readOCRB
000134e0 g     F .text	00000044 alt_dcache_flush_all
0000a7c4 g     F .text	00000070 __hi0bits
00001ce8 g     F .text	00000034 lcd_home
000110c8 g     F .text	000000d8 __fixdfsi
0000d770 g     F .text	0000001c strtod
00016e9c g       *ABS*	00000000 __ram_rwdata_end
000023b4 g     F .text	0000002c timer_ISR_TIMER_0
00016e7c g     O .rwdata	00000008 alt_dev_list
00012598 g     F .text	00000120 write
0000b894 g     F .text	000000e8 _putc_r
00010090 g     F .text	00000078 __gtsf2
0000235c g     F .text	00000058 timer_interrupt_start_stop
000153a8 g       *ABS*	00000000 __ram_rodata_end
00011dc0 g     F .text	000000d4 fstat
00010f48 g     F .text	00000088 __ledf2
00004170 g     F .text	00000090 strcat
0000b550 g     F .text	00000120 __pow5mult
000189c8 g     O .bss	00000004 __nlocale_changed
00002b8c g     F .text	00000008 __umodsi3
00018e68 g       *ABS*	00000000 end
00011ad8 g     F .text	00000160 __pack_f
00012928 g     F .text	000000c0 altera_avalon_jtag_uart_init
000146c4 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
000132fc g     F .text	00000090 alt_avalon_timer_sc_init
000113a8 g     F .text	00000080 __clzsi2
0001304c g     F .text	00000240 altera_avalon_jtag_uart_write
0000240c g     F .text	0000012c uart_init
00002d58 g     F .text	00000004 __sfp_lock_acquire
00003880 g     F .text	000000e4 memchr
00004414 g     F .text	00001eac ___vfprintf_internal_r
00003eb0 g     F .text	00000060 _sprintf_r
00009b10 g     F .text	00000314 _free_r
000144b4 g     F .text	000001b0 __call_exitprocs
000189cc g     O .bss	00000004 __mlocale_changed
00016e68 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
000189e4 g     O .bss	00000004 _alt_tick_rate
0000d9f4 g     F .text	00000318 _strtoll_r
00001f40 g     F .text	0000002c LED_read
0000b0e0 g     F .text	0000014c __lshift
000189e8 g     O .bss	00000004 _alt_nticks
000122fc g     F .text	00000120 read
0001274c g     F .text	0000005c alt_sys_init
0001437c g     F .text	00000134 __register_exitproc
0000b22c g     F .text	000001e8 __multiply
00012cc0 g     F .text	00000074 altera_avalon_jtag_uart_close
000153a8 g       *ABS*	00000000 __ram_rwdata_start
000146c8 g       *ABS*	00000000 __ram_rodata_start
00018ab0 g     O .bss	00000028 __malloc_current_mallinfo
0000add8 g     F .text	0000017c __d2b
00001d70 g     F .text	00000030 lcd_portInit
000127e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000dd0c g     F .text	00000230 _strtoul_r
00014174 g     F .text	000000b8 alt_get_fd
000153e4 g     O .rwdata	0000000c RR
00011a10 g     F .text	000000c8 __fpcmp_parts_d
00007c18 g     F .text	00000070 _close_r
00014308 g     F .text	00000074 memcmp
00012890 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018e68 g       *ABS*	00000000 __alt_stack_base
000128d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003fa0 g     F .text	00000084 sscanf
00007adc g     F .text	0000013c __swsetup_r
00010a48 g     F .text	00000258 __divdf3
00002ed0 g     F .text	000000f0 __sfp
0000ac3c g     F .text	00000058 __copybits
00015814 g     O .rwdata	00000408 __malloc_av_
00002d64 g     F .text	00000004 __sinit_lock_release
00001fec g     F .text	00000080 PWM_setDutyCycle_B
00010684 g     F .text	000003c4 __muldf3
00004110 g     F .text	00000060 __sread
000099a4 g     F .text	00000040 fread
00014054 g     F .text	00000120 alt_find_file
00002864 g     F .text	00000038 getServoX
00013524 g     F .text	000000b4 alt_dev_llist_insert
000122bc g     F .text	00000020 __malloc_lock
000124dc g     F .text	000000bc sbrk
00009578 g     F .text	000001fc _fflush_r
0000e630 g     F .text	000000b4 _calloc_r
00018990 g       *ABS*	00000000 __bss_start
00003a04 g     F .text	00000098 memset
00001d1c g     F .text	00000054 lcd_init
00002a14 g     F .text	00000034 main
000189dc g     O .bss	00000004 alt_envp
000189c0 g     O .bss	00000004 __malloc_max_total_mem
00012838 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e614 g     F .text	0000001c __swbuf
00010108 g     F .text	00000078 __ltsf2
000097a8 g     F .text	000001fc _fread_r
00002974 g     F .text	000000a0 setServoY
00004024 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009564 g     F .text	00000014 fclose
0000d78c g     F .text	00000244 _strtol_r
000111a0 g     F .text	00000074 __truncdfsf2
00018cd8 g     O .bss	00000190 _atexit0
00007ea0 g     F .text	000015b4 _dtoa_r
00003140 g     F .text	00000740 _malloc_r
00016e88 g     O .rwdata	00000004 alt_errno
0000e250 g     F .text	000000dc __submore
00003088 g     F .text	000000b8 _fwalk
00002b94 g     F .text	00000148 _fgets_r
0000a67c g     F .text	00000040 _mbtowc_r
0000b790 g     F .text	00000104 putc
00002ac4 g     F .text	00000060 __divsi3
00015260 g     O .rodata	00000014 __thenan_df
00015408 g     O .rwdata	0000000c TILT
000099e4 g     F .text	0000012c _malloc_trim_r
000146c8 g       *ABS*	00000000 __CTOR_END__
00001950 g     F .text	000000f8 I2C_read
00004200 g     F .text	000000bc strcmp
000146c8 g       *ABS*	00000000 __flash_rodata_start
000146c8 g       *ABS*	00000000 __DTOR_LIST__
00010d28 g     F .text	00000088 __nedf2
00012718 g     F .text	00000034 alt_irq_init
0001247c g     F .text	00000060 alt_release_fd
0000210c g     F .text	0000002c PWM_readOCRA
00003e3c g     F .text	00000074 sprintf
00015274 g     O .rodata	00000100 __clz_tab
000189d0 g     O .bss	00000004 _PathLocale
0000289c g     F .text	000000a0 setServoX
00001c14 g     F .text	000000a8 lcd_prt
0000d64c g     F .text	00000124 strtof
000142bc g     F .text	00000014 atexit
00007a64 g     F .text	00000078 _write_r
0000a394 g     F .text	0000001c setlocale
0000c118 g     F .text	00000008 nanf
00016e5c g     O .rwdata	00000004 _impure_ptr
000189d4 g     O .bss	00000004 alt_argc
0000a5bc g     F .text	00000080 _mbrtowc_r
0001369c g     F .text	00000064 _do_dtors
0000206c g     F .text	00000050 PWM_writeOCRA
00003bec g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000a958 g     F .text	00000080 __ulp
0000bfe8 g     F .text	00000040 __isinfd
00002e1c g     F .text	00000018 __fp_unlock_all
00016e74 g     O .rwdata	00000008 alt_fs_list
000018e0 g     F .text	00000070 I2C_init
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a300 g     F .text	00000010 localeconv
00013730 g     F .text	00000050 alt_ic_isr_register
0000e77c g     F .text	00000068 __hexdig_init
00003f18 g     F .text	00000088 _sscanf_r
00016e9c g       *ABS*	00000000 _edata
00018e68 g       *ABS*	00000000 _end
00002584 g     F .text	00000048 uart_getch
000001b4 g       *ABS*	00000000 __ram_exceptions_end
000079f0 g     F .text	00000074 vfscanf
00012d34 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001381c g     F .text	000000a0 alt_ic_irq_disable
000023e0 g     F .text	0000002c timer_ISR_TIMER_1
00000768 g     F .text	00000028 cmd_init
00004094 g     F .text	0000007c __swrite
00016e64 g     O .rwdata	00000004 __malloc_trim_threshold
00013fa0 g     F .text	00000020 altera_nios2_qsys_irq_init
000142d0 g     F .text	00000038 exit
00002fc0 g     F .text	000000c8 _fwalk_reent
0000af54 g     F .text	0000018c __mdiff
00002b24 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000790 g     F .text	00000130 cmd_getCommand
00002d5c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000264c g     F .text	00000088 uart_readStr
000026d4 g     F .text	0000007c vga_clearDisplay
0000c058 g     F .text	000000c0 __sccl
00014d64 g     O .rodata	00000101 _ctype_
000153cc g     O .rwdata	0000000c IMAGE
00001b70 g     F .text	000000a4 lcd_cmd
000114f0 g     F .text	000000a8 __fpcmp_parts_f
000146a4 g     F .text	00000020 _exit
0000c028 g     F .text	00000030 __isnand
0001338c g     F .text	00000154 alt_alarm_start
00000200 g     F .text	000000c0 cam_init
0000f350 g     F .text	00000098 __muldi3
0000a428 g     F .text	00000194 __smakebuf_r
00004348 g     F .text	00000074 strlen
00013c14 g     F .text	00000188 open
00010e38 g     F .text	00000088 __gedf2
0000e894 g     F .text	000007b8 __gethex
00001f6c g     F .text	00000080 PWM_setDutyCycle_A
00013700 g     F .text	00000030 alt_icache_flush_all
000027f4 g     F .text	00000070 servo_tilt
00016e90 g     O .rwdata	00000004 alt_priority_mask
00013780 g     F .text	0000009c alt_ic_irq_enable
000062c0 g     F .text	00000024 __vfprintf_internal
00010590 g     F .text	00000080 __subdf3
0000a834 g     F .text	000000c4 __lo0bits
000062e4 g     F .text	00001680 __svfscanf_r
00016e94 g     O .rwdata	00000008 alt_alarm_list
0000e32c g     F .text	0000019c _ungetc_r
00013638 g     F .text	00000064 _do_ctors
00011c38 g     F .text	000000fc close
0000293c g     F .text	00000038 getServoY
00012014 g     F .text	00000080 alt_load
000115c4 g     F .text	00000314 __pack_d
00001f10 g     F .text	00000030 LED_write
00001a48 g     F .text	000000c4 I2C_write
00000000  w      *UND*	00000000 free
00002d60 g     F .text	00000004 __sinit_lock_acquire
0000b450 g     F .text	00000100 __multadd
0000a79c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <irq2+0x2>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000b4 	movhi	r3,2
 134:	18e2f604 	addi	r3,r3,-29736
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000b4 	movhi	r3,2
 14c:	18e2f604 	addi	r3,r3,-29736
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6bb9614 	ori	gp,gp,61016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	10a26414 	ori	r2,r2,35216

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18e39a14 	ori	r3,r3,36456

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	00120140 	call	12014 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	00122500 	call	12250 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <cam_init>:
/**
 * Initializes the camera module over I2C for slow rate and desired format.
 * Sets any necessary flags and controls for the camera and prepares all
 * data structures.
 */
void cam_init(){
     200:	defffe04 	addi	sp,sp,-8
     204:	dfc00115 	stw	ra,4(sp)
     208:	df000015 	stw	fp,0(sp)
     20c:	d839883a 	mov	fp,sp

	//initialize members
	fd.maxBrightness = 0x00;
     210:	d026d605 	stb	zero,-25768(gp)
	fd.minBrightness = 0xFF;
     214:	00c000b4 	movhi	r3,2
     218:	18e26c44 	addi	r3,r3,-30287
     21c:	00bfffc4 	movi	r2,-1
     220:	18800005 	stb	r2,0(r3)

	//initialize I2C camera hardware
	I2C_init();
     224:	00018e00 	call	18e0 <I2C_init>
	timer_delay(100000,TIMER_0);
     228:	010000b4 	movhi	r4,2
     22c:	2121a804 	addi	r4,r4,-31072
     230:	01602034 	movhi	r5,32896
     234:	29481004 	addi	r5,r5,8256
     238:	00021a00 	call	21a0 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_CLKRC,CAMERA_CLKRC_SCALER);
     23c:	01001804 	movi	r4,96
     240:	01400444 	movi	r5,17
     244:	01800304 	movi	r6,12
     248:	0001a480 	call	1a48 <I2C_write>
	timer_delay(100000,TIMER_0);
     24c:	010000b4 	movhi	r4,2
     250:	2121a804 	addi	r4,r4,-31072
     254:	01602034 	movhi	r5,32896
     258:	29481004 	addi	r5,r5,8256
     25c:	00021a00 	call	21a0 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COML,CAMERA_COML_PCLK_VALID_MASK);
     260:	01001804 	movi	r4,96
     264:	01400e44 	movi	r5,57
     268:	01801004 	movi	r6,64
     26c:	0001a480 	call	1a48 <I2C_write>
	timer_delay(100000,TIMER_0);
     270:	010000b4 	movhi	r4,2
     274:	2121a804 	addi	r4,r4,-31072
     278:	01602034 	movhi	r5,32896
     27c:	29481004 	addi	r5,r5,8256
     280:	00021a00 	call	21a0 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COMC,CAMERA_COMC_QCIF_MASK);
     284:	01001804 	movi	r4,96
     288:	01400504 	movi	r5,20
     28c:	01800804 	movi	r6,32
     290:	0001a480 	call	1a48 <I2C_write>
	timer_delay(100000,TIMER_0);
     294:	010000b4 	movhi	r4,2
     298:	2121a804 	addi	r4,r4,-31072
     29c:	01602034 	movhi	r5,32896
     2a0:	29481004 	addi	r5,r5,8256
     2a4:	00021a00 	call	21a0 <timer_delay>

	//clear VGA display
	vga_clearDisplay();
     2a8:	00026d40 	call	26d4 <vga_clearDisplay>
}
     2ac:	e037883a 	mov	sp,fp
     2b0:	dfc00117 	ldw	ra,4(sp)
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00204 	addi	sp,sp,8
     2bc:	f800283a 	ret

000002c0 <cam_imageCapture>:

/**
 * Captures a frame from the camera and returns it unaltered.
 */
void cam_imageCapture(){
     2c0:	deffff04 	addi	sp,sp,-4
     2c4:	df000015 	stw	fp,0(sp)
     2c8:	d839883a 	mov	fp,sp
	static int row, col;
	static volatile uint8_t* vgaPtr;
	static uint8_t pixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2cc:	00a02034 	movhi	r2,32896
     2d0:	10880004 	addi	r2,r2,8192
     2d4:	10800003 	ldbu	r2,0(r2)
     2d8:	10803fcc 	andi	r2,r2,255
     2dc:	1080010c 	andi	r2,r2,4
     2e0:	1005003a 	cmpeq	r2,r2,zero
     2e4:	103ff91e 	bne	r2,zero,2cc <cam_imageCapture+0xc>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2e8:	00a02034 	movhi	r2,32896
     2ec:	10880004 	addi	r2,r2,8192
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	1080010c 	andi	r2,r2,4
     2fc:	1004c03a 	cmpne	r2,r2,zero
     300:	103ff91e 	bne	r2,zero,2e8 <cam_imageCapture+0x28>
	vgaPtr = VGA_MEM_START;
     304:	00a02034 	movhi	r2,32896
     308:	d0a6cf15 	stw	r2,-25796(gp)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     30c:	008023c4 	movi	r2,143
     310:	d0a6d115 	stw	r2,-25788(gp)
     314:	00006406 	br	4a8 <cam_imageCapture+0x1e8>
		//set next VGA row
		if(row > 11 && row < 132 && row%2){
     318:	d0a6d117 	ldw	r2,-25788(gp)
     31c:	10800310 	cmplti	r2,r2,12
     320:	1000121e 	bne	r2,zero,36c <cam_imageCapture+0xac>
     324:	d0a6d117 	ldw	r2,-25788(gp)
     328:	10802108 	cmpgei	r2,r2,132
     32c:	10000f1e 	bne	r2,zero,36c <cam_imageCapture+0xac>
     330:	d0a6d117 	ldw	r2,-25788(gp)
     334:	1080004c 	andi	r2,r2,1
     338:	10803fcc 	andi	r2,r2,255
     33c:	1005003a 	cmpeq	r2,r2,zero
     340:	10000a1e 	bne	r2,zero,36c <cam_imageCapture+0xac>
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
     344:	d0a6d117 	ldw	r2,-25788(gp)
     348:	10fffd04 	addi	r3,r2,-12
     34c:	1804d7fa 	srli	r2,r3,31
     350:	10c5883a 	add	r2,r2,r3
     354:	1005d07a 	srai	r2,r2,1
     358:	100491fa 	slli	r2,r2,7
     35c:	1007883a 	mov	r3,r2
     360:	00a02034 	movhi	r2,32896
     364:	1885883a 	add	r2,r3,r2
     368:	d0a6cf15 	stw	r2,-25796(gp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     36c:	00a02034 	movhi	r2,32896
     370:	10880004 	addi	r2,r2,8192
     374:	10800003 	ldbu	r2,0(r2)
     378:	10803fcc 	andi	r2,r2,255
     37c:	1080008c 	andi	r2,r2,2
     380:	1005003a 	cmpeq	r2,r2,zero
     384:	103ff91e 	bne	r2,zero,36c <cam_imageCapture+0xac>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     388:	d026d015 	stw	zero,-25792(gp)
     38c:	00003206 	br	458 <cam_imageCapture+0x198>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     390:	00a02034 	movhi	r2,32896
     394:	10880004 	addi	r2,r2,8192
     398:	10800003 	ldbu	r2,0(r2)
     39c:	10803fcc 	andi	r2,r2,255
     3a0:	1080004c 	andi	r2,r2,1
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	103ff91e 	bne	r2,zero,390 <cam_imageCapture+0xd0>
			pixel = *CAM_PIXEL_REGISTER;
     3ac:	00a02034 	movhi	r2,32896
     3b0:	10880404 	addi	r2,r2,8208
     3b4:	10800003 	ldbu	r2,0(r2)
     3b8:	d0a6ce05 	stb	r2,-25800(gp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     3bc:	00a02034 	movhi	r2,32896
     3c0:	10880004 	addi	r2,r2,8192
     3c4:	10800003 	ldbu	r2,0(r2)
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	1080004c 	andi	r2,r2,1
     3d0:	10803fcc 	andi	r2,r2,255
     3d4:	1004c03a 	cmpne	r2,r2,zero
     3d8:	103ff81e 	bne	r2,zero,3bc <cam_imageCapture+0xfc>

			//display pixels to VGA
			if(row > 11 && row < 132 && row%2 && col > 7 && col < 168 && col%2){
     3dc:	d0a6d117 	ldw	r2,-25788(gp)
     3e0:	10800310 	cmplti	r2,r2,12
     3e4:	1000191e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     3e8:	d0a6d117 	ldw	r2,-25788(gp)
     3ec:	10802108 	cmpgei	r2,r2,132
     3f0:	1000161e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     3f4:	d0a6d117 	ldw	r2,-25788(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	1005003a 	cmpeq	r2,r2,zero
     404:	1000111e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     408:	d0a6d017 	ldw	r2,-25792(gp)
     40c:	10800210 	cmplti	r2,r2,8
     410:	10000e1e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     414:	d0a6d017 	ldw	r2,-25792(gp)
     418:	10802a08 	cmpgei	r2,r2,168
     41c:	10000b1e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     420:	d0a6d017 	ldw	r2,-25792(gp)
     424:	1080004c 	andi	r2,r2,1
     428:	10803fcc 	andi	r2,r2,255
     42c:	1005003a 	cmpeq	r2,r2,zero
     430:	1000061e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
				//write to VGA
				*vgaPtr = pixel;
     434:	d0e6cf17 	ldw	r3,-25796(gp)
     438:	d0a6ce03 	ldbu	r2,-25800(gp)
     43c:	18800005 	stb	r2,0(r3)
				vgaPtr++;
     440:	d0a6cf17 	ldw	r2,-25796(gp)
     444:	10800044 	addi	r2,r2,1
     448:	d0a6cf15 	stw	r2,-25796(gp)
		if(row > 11 && row < 132 && row%2){
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     44c:	d0a6d017 	ldw	r2,-25792(gp)
     450:	10800044 	addi	r2,r2,1
     454:	d0a6d015 	stw	r2,-25792(gp)
     458:	d0a6d017 	ldw	r2,-25792(gp)
     45c:	10802c08 	cmpgei	r2,r2,176
     460:	1000071e 	bne	r2,zero,480 <cam_imageCapture+0x1c0>
     464:	00a02034 	movhi	r2,32896
     468:	10880004 	addi	r2,r2,8192
     46c:	10800003 	ldbu	r2,0(r2)
     470:	10803fcc 	andi	r2,r2,255
     474:	1080008c 	andi	r2,r2,2
     478:	1004c03a 	cmpne	r2,r2,zero
     47c:	103fc41e 	bne	r2,zero,390 <cam_imageCapture+0xd0>
				//write to VGA
				*vgaPtr = pixel;
				vgaPtr++;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     480:	00a02034 	movhi	r2,32896
     484:	10880004 	addi	r2,r2,8192
     488:	10800003 	ldbu	r2,0(r2)
     48c:	10803fcc 	andi	r2,r2,255
     490:	1080008c 	andi	r2,r2,2
     494:	1004c03a 	cmpne	r2,r2,zero
     498:	103ff91e 	bne	r2,zero,480 <cam_imageCapture+0x1c0>
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
	vgaPtr = VGA_MEM_START;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     49c:	d0a6d117 	ldw	r2,-25788(gp)
     4a0:	10bfffc4 	addi	r2,r2,-1
     4a4:	d0a6d115 	stw	r2,-25788(gp)
     4a8:	d0a6d117 	ldw	r2,-25788(gp)
     4ac:	1004403a 	cmpge	r2,r2,zero
     4b0:	103f991e 	bne	r2,zero,318 <cam_imageCapture+0x58>
				vgaPtr++;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
	}
}
     4b4:	e037883a 	mov	sp,fp
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00104 	addi	sp,sp,4
     4c0:	f800283a 	ret

000004c4 <cam_track>:
 * Captures a frame from the camera and returns it filtered with the given value
 * @param thresMin value used as lower bound for filtering
 * @param thresMax value used as upper bound for filtering
 * @return meta-date of the frame as pointer to the internal structure.
 */
struct frameData* cam_track(uint8_t thresMin, uint8_t thresMax){
     4c4:	defffc04 	addi	sp,sp,-16
     4c8:	df000315 	stw	fp,12(sp)
     4cc:	df000304 	addi	fp,sp,12
     4d0:	e13ffd05 	stb	r4,-12(fp)
     4d4:	e17ffe05 	stb	r5,-8(fp)
	static int row, col;
	static volatile uint8_t* vgaPtr;
	static uint8_t pixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     4d8:	00a02034 	movhi	r2,32896
     4dc:	10880004 	addi	r2,r2,8192
     4e0:	10800003 	ldbu	r2,0(r2)
     4e4:	10803fcc 	andi	r2,r2,255
     4e8:	1080010c 	andi	r2,r2,4
     4ec:	1005003a 	cmpeq	r2,r2,zero
     4f0:	103ff91e 	bne	r2,zero,4d8 <cam_track+0x14>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     4f4:	00a02034 	movhi	r2,32896
     4f8:	10880004 	addi	r2,r2,8192
     4fc:	10800003 	ldbu	r2,0(r2)
     500:	10803fcc 	andi	r2,r2,255
     504:	1080010c 	andi	r2,r2,4
     508:	1004c03a 	cmpne	r2,r2,zero
     50c:	103ff91e 	bne	r2,zero,4f4 <cam_track+0x30>
	fd.maxBrightness = 0x00;
     510:	d026d605 	stb	zero,-25768(gp)
	fd.minBrightness = 0xFF;
     514:	00c000b4 	movhi	r3,2
     518:	18e26c44 	addi	r3,r3,-30287
     51c:	00bfffc4 	movi	r2,-1
     520:	18800005 	stb	r2,0(r3)
	vgaPtr = VGA_MEM_START;
     524:	00a02034 	movhi	r2,32896
     528:	d0a6d315 	stw	r2,-25780(gp)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     52c:	008023c4 	movi	r2,143
     530:	d0a6d515 	stw	r2,-25772(gp)
     534:	00008406 	br	748 <cam_track+0x284>
		//set next VGA row
		if(row > 11 && row < 132 && row%2){
     538:	d0a6d517 	ldw	r2,-25772(gp)
     53c:	10800310 	cmplti	r2,r2,12
     540:	1000121e 	bne	r2,zero,58c <cam_track+0xc8>
     544:	d0a6d517 	ldw	r2,-25772(gp)
     548:	10802108 	cmpgei	r2,r2,132
     54c:	10000f1e 	bne	r2,zero,58c <cam_track+0xc8>
     550:	d0a6d517 	ldw	r2,-25772(gp)
     554:	1080004c 	andi	r2,r2,1
     558:	10803fcc 	andi	r2,r2,255
     55c:	1005003a 	cmpeq	r2,r2,zero
     560:	10000a1e 	bne	r2,zero,58c <cam_track+0xc8>
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
     564:	d0a6d517 	ldw	r2,-25772(gp)
     568:	10fffd04 	addi	r3,r2,-12
     56c:	1804d7fa 	srli	r2,r3,31
     570:	10c5883a 	add	r2,r2,r3
     574:	1005d07a 	srai	r2,r2,1
     578:	100491fa 	slli	r2,r2,7
     57c:	1007883a 	mov	r3,r2
     580:	00a02034 	movhi	r2,32896
     584:	1885883a 	add	r2,r3,r2
     588:	d0a6d315 	stw	r2,-25780(gp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK)); //while 0
     58c:	00a02034 	movhi	r2,32896
     590:	10880004 	addi	r2,r2,8192
     594:	10800003 	ldbu	r2,0(r2)
     598:	10803fcc 	andi	r2,r2,255
     59c:	1080008c 	andi	r2,r2,2
     5a0:	1005003a 	cmpeq	r2,r2,zero
     5a4:	103ff91e 	bne	r2,zero,58c <cam_track+0xc8>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     5a8:	d026d415 	stw	zero,-25776(gp)
     5ac:	00005206 	br	6f8 <cam_track+0x234>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5b0:	00a02034 	movhi	r2,32896
     5b4:	10880004 	addi	r2,r2,8192
     5b8:	10800003 	ldbu	r2,0(r2)
     5bc:	10803fcc 	andi	r2,r2,255
     5c0:	1080004c 	andi	r2,r2,1
     5c4:	1005003a 	cmpeq	r2,r2,zero
     5c8:	103ff91e 	bne	r2,zero,5b0 <cam_track+0xec>
			pixel = *CAM_PIXEL_REGISTER;
     5cc:	00a02034 	movhi	r2,32896
     5d0:	10880404 	addi	r2,r2,8208
     5d4:	10800003 	ldbu	r2,0(r2)
     5d8:	d0a6d205 	stb	r2,-25784(gp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5dc:	00a02034 	movhi	r2,32896
     5e0:	10880004 	addi	r2,r2,8192
     5e4:	10800003 	ldbu	r2,0(r2)
     5e8:	10803fcc 	andi	r2,r2,255
     5ec:	1080004c 	andi	r2,r2,1
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	1004c03a 	cmpne	r2,r2,zero
     5f8:	103ff81e 	bne	r2,zero,5dc <cam_track+0x118>

			//display pixels to VGA
			if(row > 11 && row < 132 && row%2 && col > 7 && col < 168 && col%2){
     5fc:	d0a6d517 	ldw	r2,-25772(gp)
     600:	10800310 	cmplti	r2,r2,12
     604:	1000391e 	bne	r2,zero,6ec <cam_track+0x228>
     608:	d0a6d517 	ldw	r2,-25772(gp)
     60c:	10802108 	cmpgei	r2,r2,132
     610:	1000361e 	bne	r2,zero,6ec <cam_track+0x228>
     614:	d0a6d517 	ldw	r2,-25772(gp)
     618:	1080004c 	andi	r2,r2,1
     61c:	10803fcc 	andi	r2,r2,255
     620:	1005003a 	cmpeq	r2,r2,zero
     624:	1000311e 	bne	r2,zero,6ec <cam_track+0x228>
     628:	d0a6d417 	ldw	r2,-25776(gp)
     62c:	10800210 	cmplti	r2,r2,8
     630:	10002e1e 	bne	r2,zero,6ec <cam_track+0x228>
     634:	d0a6d417 	ldw	r2,-25776(gp)
     638:	10802a08 	cmpgei	r2,r2,168
     63c:	10002b1e 	bne	r2,zero,6ec <cam_track+0x228>
     640:	d0a6d417 	ldw	r2,-25776(gp)
     644:	1080004c 	andi	r2,r2,1
     648:	10803fcc 	andi	r2,r2,255
     64c:	1005003a 	cmpeq	r2,r2,zero
     650:	1000261e 	bne	r2,zero,6ec <cam_track+0x228>
				//write to VGA
				*vgaPtr = (pixel >= thresMin && pixel <= thresMax)? 0xFF : 0x00;;
     654:	d0a6d317 	ldw	r2,-25780(gp)
     658:	e0bfff15 	stw	r2,-4(fp)
     65c:	d0a6d203 	ldbu	r2,-25784(gp)
     660:	10c03fcc 	andi	r3,r2,255
     664:	e0bffd03 	ldbu	r2,-12(fp)
     668:	18800736 	bltu	r3,r2,688 <cam_track+0x1c4>
     66c:	d0a6d203 	ldbu	r2,-25784(gp)
     670:	10c03fcc 	andi	r3,r2,255
     674:	e0bffe03 	ldbu	r2,-8(fp)
     678:	10c00336 	bltu	r2,r3,688 <cam_track+0x1c4>
     67c:	00ffffc4 	movi	r3,-1
     680:	e0fffe45 	stb	r3,-7(fp)
     684:	00000106 	br	68c <cam_track+0x1c8>
     688:	e03ffe45 	stb	zero,-7(fp)
     68c:	e0bffe43 	ldbu	r2,-7(fp)
     690:	e0ffff17 	ldw	r3,-4(fp)
     694:	18800005 	stb	r2,0(r3)
				vgaPtr++;
     698:	d0a6d317 	ldw	r2,-25780(gp)
     69c:	10800044 	addi	r2,r2,1
     6a0:	d0a6d315 	stw	r2,-25780(gp)

				//update pixel information
				if(fd.maxBrightness < pixel)
     6a4:	d0a6d603 	ldbu	r2,-25768(gp)
     6a8:	d0e6d203 	ldbu	r3,-25784(gp)
     6ac:	11003fcc 	andi	r4,r2,255
     6b0:	18803fcc 	andi	r2,r3,255
     6b4:	2080022e 	bgeu	r4,r2,6c0 <cam_track+0x1fc>
					fd.maxBrightness = pixel;
     6b8:	d0a6d203 	ldbu	r2,-25784(gp)
     6bc:	d0a6d605 	stb	r2,-25768(gp)
				if(fd.minBrightness > pixel)
     6c0:	008000b4 	movhi	r2,2
     6c4:	10a26c44 	addi	r2,r2,-30287
     6c8:	10800003 	ldbu	r2,0(r2)
     6cc:	d0e6d203 	ldbu	r3,-25784(gp)
     6d0:	11003fcc 	andi	r4,r2,255
     6d4:	18803fcc 	andi	r2,r3,255
     6d8:	1100042e 	bgeu	r2,r4,6ec <cam_track+0x228>
					fd.minBrightness = pixel;
     6dc:	d0e6d203 	ldbu	r3,-25784(gp)
     6e0:	008000b4 	movhi	r2,2
     6e4:	10a26c44 	addi	r2,r2,-30287
     6e8:	10c00005 	stb	r3,0(r2)
		if(row > 11 && row < 132 && row%2){
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK)); //while 0
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     6ec:	d0a6d417 	ldw	r2,-25776(gp)
     6f0:	10800044 	addi	r2,r2,1
     6f4:	d0a6d415 	stw	r2,-25776(gp)
     6f8:	d0a6d417 	ldw	r2,-25776(gp)
     6fc:	10802c08 	cmpgei	r2,r2,176
     700:	1000071e 	bne	r2,zero,720 <cam_track+0x25c>
     704:	00a02034 	movhi	r2,32896
     708:	10880004 	addi	r2,r2,8192
     70c:	10800003 	ldbu	r2,0(r2)
     710:	10803fcc 	andi	r2,r2,255
     714:	1080008c 	andi	r2,r2,2
     718:	1004c03a 	cmpne	r2,r2,zero
     71c:	103fa41e 	bne	r2,zero,5b0 <cam_track+0xec>
					fd.maxBrightness = pixel;
				if(fd.minBrightness > pixel)
					fd.minBrightness = pixel;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     720:	00a02034 	movhi	r2,32896
     724:	10880004 	addi	r2,r2,8192
     728:	10800003 	ldbu	r2,0(r2)
     72c:	10803fcc 	andi	r2,r2,255
     730:	1080008c 	andi	r2,r2,2
     734:	1004c03a 	cmpne	r2,r2,zero
     738:	103ff91e 	bne	r2,zero,720 <cam_track+0x25c>
	fd.maxBrightness = 0x00;
	fd.minBrightness = 0xFF;
	vgaPtr = VGA_MEM_START;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     73c:	d0a6d517 	ldw	r2,-25772(gp)
     740:	10bfffc4 	addi	r2,r2,-1
     744:	d0a6d515 	stw	r2,-25772(gp)
     748:	d0a6d517 	ldw	r2,-25772(gp)
     74c:	1004403a 	cmpge	r2,r2,zero
     750:	103f791e 	bne	r2,zero,538 <cam_track+0x74>
					fd.minBrightness = pixel;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
	}
	return &fd;
     754:	d0a6d604 	addi	r2,gp,-25768
}
     758:	e037883a 	mov	sp,fp
     75c:	df000017 	ldw	fp,0(sp)
     760:	dec00104 	addi	sp,sp,4
     764:	f800283a 	ret

00000768 <cmd_init>:

/**
 * Initializes the command line module. Specifically the command list is
 * generated so that command parsing can occur.
 */
void cmd_init(){
     768:	defffe04 	addi	sp,sp,-8
     76c:	dfc00115 	stw	ra,4(sp)
     770:	df000015 	stw	fp,0(sp)
     774:	d839883a 	mov	fp,sp
	_generateList();
     778:	00008c00 	call	8c0 <_generateList>
}
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <cmd_getCommand>:

/**
 * Gets the command from the user and will perform that action. Blocking
 */
void cmd_getCommand(){
     790:	defffa04 	addi	sp,sp,-24
     794:	dfc00515 	stw	ra,20(sp)
     798:	df000415 	stw	fp,16(sp)
     79c:	df000404 	addi	fp,sp,16
	//print prompt to the user for next command
	printf("\nEnter Command:");
     7a0:	01000074 	movhi	r4,1
     7a4:	2111c804 	addi	r4,r4,18208
     7a8:	0003a9c0 	call	3a9c <printf>

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
     7ac:	00800074 	movhi	r2,1
     7b0:	109b9704 	addi	r2,r2,28252
     7b4:	10800017 	ldw	r2,0(r2)
     7b8:	11800117 	ldw	r6,4(r2)
     7bc:	010000b4 	movhi	r4,2
     7c0:	21228404 	addi	r4,r4,-30192
     7c4:	01401404 	movi	r5,80
     7c8:	0002cdc0 	call	2cdc <fgets>
	char* str = inputStr;
     7cc:	008000b4 	movhi	r2,2
     7d0:	10a28404 	addi	r2,r2,-30192
     7d4:	e0bffe15 	stw	r2,-8(fp)
	while(*str){
     7d8:	00001d06 	br	850 <cmd_getCommand+0xc0>
		*str = toupper(*str);
     7dc:	e0bffe17 	ldw	r2,-8(fp)
     7e0:	10800003 	ldbu	r2,0(r2)
     7e4:	10803fcc 	andi	r2,r2,255
     7e8:	1080201c 	xori	r2,r2,128
     7ec:	10bfe004 	addi	r2,r2,-128
     7f0:	e0bffc15 	stw	r2,-16(fp)
     7f4:	00800074 	movhi	r2,1
     7f8:	109b9604 	addi	r2,r2,28248
     7fc:	10c00017 	ldw	r3,0(r2)
     800:	e0bffc17 	ldw	r2,-16(fp)
     804:	1885883a 	add	r2,r3,r2
     808:	10800003 	ldbu	r2,0(r2)
     80c:	10803fcc 	andi	r2,r2,255
     810:	1080008c 	andi	r2,r2,2
     814:	1005003a 	cmpeq	r2,r2,zero
     818:	1000041e 	bne	r2,zero,82c <cmd_getCommand+0x9c>
     81c:	e0bffc17 	ldw	r2,-16(fp)
     820:	10bff804 	addi	r2,r2,-32
     824:	e0bfff15 	stw	r2,-4(fp)
     828:	00000206 	br	834 <cmd_getCommand+0xa4>
     82c:	e0bffc17 	ldw	r2,-16(fp)
     830:	e0bfff15 	stw	r2,-4(fp)
     834:	e0bfff17 	ldw	r2,-4(fp)
     838:	1007883a 	mov	r3,r2
     83c:	e0bffe17 	ldw	r2,-8(fp)
     840:	10c00005 	stb	r3,0(r2)
		str++;
     844:	e0bffe17 	ldw	r2,-8(fp)
     848:	10800044 	addi	r2,r2,1
     84c:	e0bffe15 	stw	r2,-8(fp)
	printf("\nEnter Command:");

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
	char* str = inputStr;
	while(*str){
     850:	e0bffe17 	ldw	r2,-8(fp)
     854:	10800003 	ldbu	r2,0(r2)
     858:	10803fcc 	andi	r2,r2,255
     85c:	1080201c 	xori	r2,r2,128
     860:	10bfe004 	addi	r2,r2,-128
     864:	1004c03a 	cmpne	r2,r2,zero
     868:	103fdc1e 	bne	r2,zero,7dc <cmd_getCommand+0x4c>
		*str = toupper(*str);
		str++;
	}

	//parse for command
	int matched = sscanf(inputStr,"%s",cmdStr);
     86c:	010000b4 	movhi	r4,2
     870:	21228404 	addi	r4,r4,-30192
     874:	01400074 	movhi	r5,1
     878:	2951cc04 	addi	r5,r5,18224
     87c:	018000b4 	movhi	r6,2
     880:	31a29804 	addi	r6,r6,-30112
     884:	0003fa00 	call	3fa0 <sscanf>
     888:	e0bffd15 	stw	r2,-12(fp)
	if(matched != EOF){
     88c:	e0bffd17 	ldw	r2,-12(fp)
     890:	10bfffe0 	cmpeqi	r2,r2,-1
     894:	1000051e 	bne	r2,zero,8ac <cmd_getCommand+0x11c>
		cmd_parseInput(inputStr,cmdStr);
     898:	010000b4 	movhi	r4,2
     89c:	21228404 	addi	r4,r4,-30192
     8a0:	014000b4 	movhi	r5,2
     8a4:	29629804 	addi	r5,r5,-30112
     8a8:	00009900 	call	990 <cmd_parseInput>
	}
}
     8ac:	e037883a 	mov	sp,fp
     8b0:	dfc00117 	ldw	ra,4(sp)
     8b4:	df000017 	ldw	fp,0(sp)
     8b8:	dec00204 	addi	sp,sp,8
     8bc:	f800283a 	ret

000008c0 <_generateList>:

/**
 * Generates the list of commands in an array of pointers so that commands
 * can be looked up based on their name when parsed.
 */
static void _generateList(){
     8c0:	deffff04 	addi	sp,sp,-4
     8c4:	df000015 	stw	fp,0(sp)
     8c8:	d839883a 	mov	fp,sp
	//setup command list
	commandList[0] = &RR;
     8cc:	00c000b4 	movhi	r3,2
     8d0:	18e27b04 	addi	r3,r3,-30228
     8d4:	00800074 	movhi	r2,1
     8d8:	1094f904 	addi	r2,r2,21476
     8dc:	18800015 	stw	r2,0(r3)
	commandList[1] = &WR;
     8e0:	00c000b4 	movhi	r3,2
     8e4:	18e27b04 	addi	r3,r3,-30228
     8e8:	00800074 	movhi	r2,1
     8ec:	1094fc04 	addi	r2,r2,21488
     8f0:	18800115 	stw	r2,4(r3)
	commandList[2] = &HELP;
     8f4:	00c000b4 	movhi	r3,2
     8f8:	18e27b04 	addi	r3,r3,-30228
     8fc:	00800074 	movhi	r2,1
     900:	1094ea04 	addi	r2,r2,21416
     904:	18800215 	stw	r2,8(r3)
	commandList[3] = &PAN;
     908:	00c000b4 	movhi	r3,2
     90c:	18e27b04 	addi	r3,r3,-30228
     910:	00800074 	movhi	r2,1
     914:	1094ff04 	addi	r2,r2,21500
     918:	18800315 	stw	r2,12(r3)
	commandList[4] = &TILT;
     91c:	00c000b4 	movhi	r3,2
     920:	18e27b04 	addi	r3,r3,-30228
     924:	00800074 	movhi	r2,1
     928:	10950204 	addi	r2,r2,21512
     92c:	18800415 	stw	r2,16(r3)
	commandList[5] = &WRCAMREG;
     930:	00c000b4 	movhi	r3,2
     934:	18e27b04 	addi	r3,r3,-30228
     938:	00800074 	movhi	r2,1
     93c:	1094f004 	addi	r2,r2,21440
     940:	18800515 	stw	r2,20(r3)
	commandList[6] = &RDCAMREG;
     944:	00c000b4 	movhi	r3,2
     948:	18e27b04 	addi	r3,r3,-30228
     94c:	00800074 	movhi	r2,1
     950:	1094ed04 	addi	r2,r2,21428
     954:	18800615 	stw	r2,24(r3)
	commandList[7] = &IMAGE;
     958:	00c000b4 	movhi	r3,2
     95c:	18e27b04 	addi	r3,r3,-30228
     960:	00800074 	movhi	r2,1
     964:	1094f304 	addi	r2,r2,21452
     968:	18800715 	stw	r2,28(r3)
	commandList[8] = &TRACK;
     96c:	00c000b4 	movhi	r3,2
     970:	18e27b04 	addi	r3,r3,-30228
     974:	00800074 	movhi	r2,1
     978:	1094f604 	addi	r2,r2,21464
     97c:	18800815 	stw	r2,32(r3)
}
     980:	e037883a 	mov	sp,fp
     984:	df000017 	ldw	fp,0(sp)
     988:	dec00104 	addi	sp,sp,4
     98c:	f800283a 	ret

00000990 <cmd_parseInput>:
 * Matches the command given by the user with the predefined list. Will run
 * any command that is matched with given.
 * @param inputStr original string from the user.
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
     990:	defffa04 	addi	sp,sp,-24
     994:	dfc00515 	stw	ra,20(sp)
     998:	df000415 	stw	fp,16(sp)
     99c:	df000404 	addi	fp,sp,16
     9a0:	e13ffe15 	stw	r4,-8(fp)
     9a4:	e17fff15 	stw	r5,-4(fp)
		//search command list for match
		int commandFoundFlag = 0;
     9a8:	e03ffd15 	stw	zero,-12(fp)
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     9ac:	e03ffc15 	stw	zero,-16(fp)
     9b0:	00001c06 	br	a24 <cmd_parseInput+0x94>
			if(strcmp(cmdStr,commandList[i]->name)==0){
     9b4:	e0bffc17 	ldw	r2,-16(fp)
     9b8:	00c000b4 	movhi	r3,2
     9bc:	18e27b04 	addi	r3,r3,-30228
     9c0:	1085883a 	add	r2,r2,r2
     9c4:	1085883a 	add	r2,r2,r2
     9c8:	10c5883a 	add	r2,r2,r3
     9cc:	10800017 	ldw	r2,0(r2)
     9d0:	11400017 	ldw	r5,0(r2)
     9d4:	e13fff17 	ldw	r4,-4(fp)
     9d8:	00042000 	call	4200 <strcmp>
     9dc:	1004c03a 	cmpne	r2,r2,zero
     9e0:	10000d1e 	bne	r2,zero,a18 <cmd_parseInput+0x88>
				lcd_clr();
     9e4:	0001cbc0 	call	1cbc <lcd_clr>
				commandList[i]->cmdFnt(inputStr);
     9e8:	e0bffc17 	ldw	r2,-16(fp)
     9ec:	00c000b4 	movhi	r3,2
     9f0:	18e27b04 	addi	r3,r3,-30228
     9f4:	1085883a 	add	r2,r2,r2
     9f8:	1085883a 	add	r2,r2,r2
     9fc:	10c5883a 	add	r2,r2,r3
     a00:	10800017 	ldw	r2,0(r2)
     a04:	10800217 	ldw	r2,8(r2)
     a08:	e13ffe17 	ldw	r4,-8(fp)
     a0c:	103ee83a 	callr	r2
				commandFoundFlag = 1;
     a10:	00800044 	movi	r2,1
     a14:	e0bffd15 	stw	r2,-12(fp)
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
		//search command list for match
		int commandFoundFlag = 0;
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     a18:	e0bffc17 	ldw	r2,-16(fp)
     a1c:	10800044 	addi	r2,r2,1
     a20:	e0bffc15 	stw	r2,-16(fp)
     a24:	e0bffc17 	ldw	r2,-16(fp)
     a28:	10800250 	cmplti	r2,r2,9
     a2c:	103fe11e 	bne	r2,zero,9b4 <cmd_parseInput+0x24>
				commandFoundFlag = 1;
			}
		}

		//if command not found then print error message
		if(!commandFoundFlag){
     a30:	e0bffd17 	ldw	r2,-12(fp)
     a34:	1004c03a 	cmpne	r2,r2,zero
     a38:	1000031e 	bne	r2,zero,a48 <cmd_parseInput+0xb8>
			printf("Invalid Command.\n");
     a3c:	01000074 	movhi	r4,1
     a40:	2111cd04 	addi	r4,r4,18228
     a44:	0003bd80 	call	3bd8 <puts>
		}
}
     a48:	e037883a 	mov	sp,fp
     a4c:	dfc00117 	ldw	ra,4(sp)
     a50:	df000017 	ldw	fp,0(sp)
     a54:	dec00204 	addi	sp,sp,8
     a58:	f800283a 	ret

00000a5c <_help>:

/**
 * Help Command Function
 * @param arg string to parse
 */
static void _help(char* arg){
     a5c:	deffe404 	addi	sp,sp,-112
     a60:	dfc01b15 	stw	ra,108(sp)
     a64:	df001a15 	stw	fp,104(sp)
     a68:	df001a04 	addi	fp,sp,104
     a6c:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Help Menu");
     a70:	01000074 	movhi	r4,1
     a74:	2111d204 	addi	r4,r4,18248
     a78:	0001da00 	call	1da0 <lcd_printString>
	char cmd[5];
	char otherStr[80]; //large to prevent failure of size

	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
     a7c:	e1bfe904 	addi	r6,fp,-92
     a80:	e1ffea44 	addi	r7,fp,-87
     a84:	e13fff17 	ldw	r4,-4(fp)
     a88:	01400074 	movhi	r5,1
     a8c:	2951d504 	addi	r5,r5,18260
     a90:	0003fa00 	call	3fa0 <sscanf>
     a94:	e0bfe815 	stw	r2,-96(fp)
	if(matched == 2){
     a98:	e0bfe817 	ldw	r2,-96(fp)
     a9c:	10800098 	cmpnei	r2,r2,2
     aa0:	1000441e 	bne	r2,zero,bb4 <_help+0x158>
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
     aa4:	e13fea44 	addi	r4,fp,-87
     aa8:	01400074 	movhi	r5,1
     aac:	2951d704 	addi	r5,r5,18268
     ab0:	00042000 	call	4200 <strcmp>
     ab4:	1004c03a 	cmpne	r2,r2,zero
     ab8:	10001c1e 	bne	r2,zero,b2c <_help+0xd0>
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     abc:	e03fe715 	stw	zero,-100(fp)
     ac0:	00001606 	br	b1c <_help+0xc0>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
     ac4:	e0bfe717 	ldw	r2,-100(fp)
     ac8:	00c000b4 	movhi	r3,2
     acc:	18e27b04 	addi	r3,r3,-30228
     ad0:	1085883a 	add	r2,r2,r2
     ad4:	1085883a 	add	r2,r2,r2
     ad8:	10c5883a 	add	r2,r2,r3
     adc:	10800017 	ldw	r2,0(r2)
     ae0:	11400017 	ldw	r5,0(r2)
     ae4:	e0bfe717 	ldw	r2,-100(fp)
     ae8:	00c000b4 	movhi	r3,2
     aec:	18e27b04 	addi	r3,r3,-30228
     af0:	1085883a 	add	r2,r2,r2
     af4:	1085883a 	add	r2,r2,r2
     af8:	10c5883a 	add	r2,r2,r3
     afc:	10800017 	ldw	r2,0(r2)
     b00:	11800117 	ldw	r6,4(r2)
     b04:	01000074 	movhi	r4,1
     b08:	2111d804 	addi	r4,r4,18272
     b0c:	0003a9c0 	call	3a9c <printf>
	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
	if(matched == 2){
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     b10:	e0bfe717 	ldw	r2,-100(fp)
     b14:	10800044 	addi	r2,r2,1
     b18:	e0bfe715 	stw	r2,-100(fp)
     b1c:	e0bfe717 	ldw	r2,-100(fp)
     b20:	10800250 	cmplti	r2,r2,9
     b24:	103fe71e 	bne	r2,zero,ac4 <_help+0x68>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
     b28:	00002606 	br	bc4 <_help+0x168>
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     b2c:	e03fe615 	stw	zero,-104(fp)
     b30:	00001906 	br	b98 <_help+0x13c>
				if(strcmp(otherStr,commandList[i]->name)==0){
     b34:	e0bfe617 	ldw	r2,-104(fp)
     b38:	00c000b4 	movhi	r3,2
     b3c:	18e27b04 	addi	r3,r3,-30228
     b40:	1085883a 	add	r2,r2,r2
     b44:	1085883a 	add	r2,r2,r2
     b48:	10c5883a 	add	r2,r2,r3
     b4c:	10800017 	ldw	r2,0(r2)
     b50:	11400017 	ldw	r5,0(r2)
     b54:	e13fea44 	addi	r4,fp,-87
     b58:	00042000 	call	4200 <strcmp>
     b5c:	1004c03a 	cmpne	r2,r2,zero
     b60:	10000a1e 	bne	r2,zero,b8c <_help+0x130>
					printf(commandList[i]->helpInfo);
     b64:	e0bfe617 	ldw	r2,-104(fp)
     b68:	00c000b4 	movhi	r3,2
     b6c:	18e27b04 	addi	r3,r3,-30228
     b70:	1085883a 	add	r2,r2,r2
     b74:	1085883a 	add	r2,r2,r2
     b78:	10c5883a 	add	r2,r2,r3
     b7c:	10800017 	ldw	r2,0(r2)
     b80:	11000117 	ldw	r4,4(r2)
     b84:	0003a9c0 	call	3a9c <printf>
					return; //ends early as the item was found
     b88:	00000e06 	br	bc4 <_help+0x168>
				printf("%s:\n%s\n",commandList[i]->name,commandList[i]->helpInfo);
			}
			return;
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     b8c:	e0bfe617 	ldw	r2,-104(fp)
     b90:	10800044 	addi	r2,r2,1
     b94:	e0bfe615 	stw	r2,-104(fp)
     b98:	e0bfe617 	ldw	r2,-104(fp)
     b9c:	10800250 	cmplti	r2,r2,9
     ba0:	103fe41e 	bne	r2,zero,b34 <_help+0xd8>
				}
			}
		}

		//did not find command.
		printf("Command %s is not valid.\n",otherStr);
     ba4:	e17fea44 	addi	r5,fp,-87
     ba8:	01000074 	movhi	r4,1
     bac:	2111da04 	addi	r4,r4,18280
     bb0:	0003a9c0 	call	3a9c <printf>
	}

	//print its own help info
	printf(HELP.helpInfo);
     bb4:	00800074 	movhi	r2,1
     bb8:	1094ea04 	addi	r2,r2,21416
     bbc:	11000117 	ldw	r4,4(r2)
     bc0:	0003a9c0 	call	3a9c <printf>
}
     bc4:	e037883a 	mov	sp,fp
     bc8:	dfc00117 	ldw	ra,4(sp)
     bcc:	df000017 	ldw	fp,0(sp)
     bd0:	dec00204 	addi	sp,sp,8
     bd4:	f800283a 	ret

00000bd8 <_readCam>:

/**
 * Reads from the I2C camera.
 * @param arg string to parse
 */
static void _readCam(char* arg){
     bd8:	defff704 	addi	sp,sp,-36
     bdc:	dfc00815 	stw	ra,32(sp)
     be0:	df000715 	stw	fp,28(sp)
     be4:	df000704 	addi	fp,sp,28
     be8:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading I2C");
     bec:	01000074 	movhi	r4,1
     bf0:	21126304 	addi	r4,r4,18828
     bf4:	0001da00 	call	1da0 <lcd_printString>
	char cmd[10];
	unsigned int regNumber;
	int matched = sscanf(arg,"%s %x",cmd,&regNumber);
     bf8:	e1bffb04 	addi	r6,fp,-20
     bfc:	e1fffe04 	addi	r7,fp,-8
     c00:	e13fff17 	ldw	r4,-4(fp)
     c04:	01400074 	movhi	r5,1
     c08:	29526604 	addi	r5,r5,18840
     c0c:	0003fa00 	call	3fa0 <sscanf>
     c10:	e0bffa15 	stw	r2,-24(fp)
	if(matched > 1){
     c14:	e0bffa17 	ldw	r2,-24(fp)
     c18:	10800090 	cmplti	r2,r2,2
     c1c:	10000b1e 	bne	r2,zero,c4c <_readCam+0x74>
		unsigned char data = I2C_read(CAMERA_I2C_ADDRESS,regNumber);
     c20:	e0bffe17 	ldw	r2,-8(fp)
     c24:	11403fcc 	andi	r5,r2,255
     c28:	01001804 	movi	r4,96
     c2c:	00019500 	call	1950 <I2C_read>
     c30:	e0bff905 	stb	r2,-28(fp)
		printf("%02x: %02x\n",regNumber,data);
     c34:	e17ffe17 	ldw	r5,-8(fp)
     c38:	e1bff903 	ldbu	r6,-28(fp)
     c3c:	01000074 	movhi	r4,1
     c40:	21126804 	addi	r4,r4,18848
     c44:	0003a9c0 	call	3a9c <printf>
     c48:	00000306 	br	c58 <_readCam+0x80>
	}else{
		printf("Invalid read command structure\n");
     c4c:	01000074 	movhi	r4,1
     c50:	21126b04 	addi	r4,r4,18860
     c54:	0003bd80 	call	3bd8 <puts>
	}
}
     c58:	e037883a 	mov	sp,fp
     c5c:	dfc00117 	ldw	ra,4(sp)
     c60:	df000017 	ldw	fp,0(sp)
     c64:	dec00204 	addi	sp,sp,8
     c68:	f800283a 	ret

00000c6c <_writeCam>:

/**
 * Writes to the I2C camera.
 * @param arg string to parse.
 */
static void _writeCam(char* arg){
     c6c:	defff604 	addi	sp,sp,-40
     c70:	dfc00915 	stw	ra,36(sp)
     c74:	df000815 	stw	fp,32(sp)
     c78:	df000804 	addi	fp,sp,32
     c7c:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing I2C");
     c80:	01000074 	movhi	r4,1
     c84:	21127304 	addi	r4,r4,18892
     c88:	0001da00 	call	1da0 <lcd_printString>
	char cmd[10];
	unsigned int regNumber, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&regNumber,&value);
     c8c:	e1bffa04 	addi	r6,fp,-24
     c90:	e1fffd04 	addi	r7,fp,-12
     c94:	e0bffe04 	addi	r2,fp,-8
     c98:	d8800015 	stw	r2,0(sp)
     c9c:	e13fff17 	ldw	r4,-4(fp)
     ca0:	01400074 	movhi	r5,1
     ca4:	29527604 	addi	r5,r5,18904
     ca8:	0003fa00 	call	3fa0 <sscanf>
     cac:	e0bff915 	stw	r2,-28(fp)
	if(matched > 2){
     cb0:	e0bff917 	ldw	r2,-28(fp)
     cb4:	108000d0 	cmplti	r2,r2,3
     cb8:	1000071e 	bne	r2,zero,cd8 <_writeCam+0x6c>
		I2C_write(CAMERA_I2C_ADDRESS,regNumber,value);
     cbc:	e0bffd17 	ldw	r2,-12(fp)
     cc0:	11403fcc 	andi	r5,r2,255
     cc4:	e0bffe17 	ldw	r2,-8(fp)
     cc8:	11803fcc 	andi	r6,r2,255
     ccc:	01001804 	movi	r4,96
     cd0:	0001a480 	call	1a48 <I2C_write>
     cd4:	00000306 	br	ce4 <_writeCam+0x78>
	}else{
		printf("Invalid write command structure\n");
     cd8:	01000074 	movhi	r4,1
     cdc:	21127904 	addi	r4,r4,18916
     ce0:	0003bd80 	call	3bd8 <puts>
	}
}
     ce4:	e037883a 	mov	sp,fp
     ce8:	dfc00117 	ldw	ra,4(sp)
     cec:	df000017 	ldw	fp,0(sp)
     cf0:	dec00204 	addi	sp,sp,8
     cf4:	f800283a 	ret

00000cf8 <_displayImage>:
/**
 * Displays the camera image onto the VGA hardware. Runs in a loop until
 * pushbutton two is pressed to exit.
 * @param arg ignored
 */
static void _displayImage(char* arg){
     cf8:	defffd04 	addi	sp,sp,-12
     cfc:	dfc00215 	stw	ra,8(sp)
     d00:	df000115 	stw	fp,4(sp)
     d04:	df000104 	addi	fp,sp,4
     d08:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Displaying\nCamera Image");
     d0c:	01000074 	movhi	r4,1
     d10:	21128104 	addi	r4,r4,18948
     d14:	0001da00 	call	1da0 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     d18:	01000074 	movhi	r4,1
     d1c:	21128704 	addi	r4,r4,18972
     d20:	0003bd80 	call	3bd8 <puts>

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     d24:	00000106 	br	d2c <_displayImage+0x34>
		cam_imageCapture();
     d28:	00002c00 	call	2c0 <cam_imageCapture>
 */
static void _displayImage(char* arg){
	lcd_printString("Displaying\nCamera Image");
	printf("Press Button 2 to exit.\n");

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     d2c:	01000044 	movi	r4,1
     d30:	00021640 	call	2164 <pushbutton_read>
     d34:	10803fcc 	andi	r2,r2,255
     d38:	1004c03a 	cmpne	r2,r2,zero
     d3c:	103ffa1e 	bne	r2,zero,d28 <_displayImage+0x30>
		cam_imageCapture();
	}

	//set to default
	vga_clearDisplay();
     d40:	00026d40 	call	26d4 <vga_clearDisplay>
}
     d44:	e037883a 	mov	sp,fp
     d48:	dfc00117 	ldw	ra,4(sp)
     d4c:	df000017 	ldw	fp,0(sp)
     d50:	dec00204 	addi	sp,sp,8
     d54:	f800283a 	ret

00000d58 <_track>:
/**
 * Track command looks for target that meets threshold requirement. Manipulates
 * servo turret to track target under closed loop control.
 * @param arg ignored
 */
static void _track(char* arg){
     d58:	deffee04 	addi	sp,sp,-72
     d5c:	dfc01115 	stw	ra,68(sp)
     d60:	df001015 	stw	fp,64(sp)
     d64:	df001004 	addi	fp,sp,64
     d68:	e13ff915 	stw	r4,-28(fp)

	//data members
	struct frameData* fd;
	struct boundingBox box;
	int16_t errorX, prevErrorX = 0;
     d6c:	e03ff50d 	sth	zero,-44(fp)
	int16_t errorY, prevErrorY = 0;
     d70:	e03ff40d 	sth	zero,-48(fp)
	uint8_t targetMin = 0, targetMax = 0;
     d74:	e03ff805 	stb	zero,-32(fp)
     d78:	e03ff845 	stb	zero,-31(fp)

	//parse user input
	FILTER_TYPE_t type = _track_inputParsing(arg,&targetMin,&targetMax);
     d7c:	e17ff804 	addi	r5,fp,-32
     d80:	e1bff844 	addi	r6,fp,-31
     d84:	e13ff917 	ldw	r4,-28(fp)
     d88:	00011900 	call	1190 <_track_inputParsing>
     d8c:	e0bff315 	stw	r2,-52(fp)
	if(type == ERROR){
     d90:	e0bff317 	ldw	r2,-52(fp)
     d94:	10800160 	cmpeqi	r2,r2,5
     d98:	1000a81e 	bne	r2,zero,103c <_track+0x2e4>
		return; //return since parse failed
	}

	//notify user UI of exit process
	lcd_printString("Tracking Target");
     d9c:	01000074 	movhi	r4,1
     da0:	21128d04 	addi	r4,r4,18996
     da4:	0001da00 	call	1da0 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     da8:	01000074 	movhi	r4,1
     dac:	21128704 	addi	r4,r4,18972
     db0:	0003bd80 	call	3bd8 <puts>

	//loop the tracking until button pressed
	int16_t cogx,cogy;
	int32_t xcommand, ycommand;
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     db4:	00009a06 	br	1020 <_track+0x2c8>
		//get data
		fd = cam_track(targetMin,targetMax);
     db8:	e0bff803 	ldbu	r2,-32(fp)
     dbc:	11003fcc 	andi	r4,r2,255
     dc0:	e0bff843 	ldbu	r2,-31(fp)
     dc4:	11403fcc 	andi	r5,r2,255
     dc8:	00004c40 	call	4c4 <cam_track>
     dcc:	e0bff615 	stw	r2,-40(fp)

		//filter image for abstract target
		box.minr = VGA_ROW_MAX;
     dd0:	00800f04 	movi	r2,60
     dd4:	e0bff705 	stb	r2,-36(fp)
		box.minc = VGA_COL_MAX;
     dd8:	00801404 	movi	r2,80
     ddc:	e0bff745 	stb	r2,-35(fp)
		box.maxr = 0;
     de0:	e03ff785 	stb	zero,-34(fp)
		box.maxc = 0;
     de4:	e03ff7c5 	stb	zero,-33(fp)
		_track_boundingBox(&box);
     de8:	e13ff704 	addi	r4,fp,-36
     dec:	00010500 	call	1050 <_track_boundingBox>

		//calculate cog of the object
		cogy = (box.maxr + box.minr)/2;
     df0:	e0bff783 	ldbu	r2,-34(fp)
     df4:	10c03fcc 	andi	r3,r2,255
     df8:	e0bff703 	ldbu	r2,-36(fp)
     dfc:	10803fcc 	andi	r2,r2,255
     e00:	1887883a 	add	r3,r3,r2
     e04:	1804d7fa 	srli	r2,r3,31
     e08:	10c5883a 	add	r2,r2,r3
     e0c:	1005d07a 	srai	r2,r2,1
     e10:	e0bff20d 	sth	r2,-56(fp)
		cogx = (box.maxc + box.minc)/2;
     e14:	e0bff7c3 	ldbu	r2,-33(fp)
     e18:	10c03fcc 	andi	r3,r2,255
     e1c:	e0bff743 	ldbu	r2,-35(fp)
     e20:	10803fcc 	andi	r2,r2,255
     e24:	1887883a 	add	r3,r3,r2
     e28:	1804d7fa 	srli	r2,r3,31
     e2c:	10c5883a 	add	r2,r2,r3
     e30:	1005d07a 	srai	r2,r2,1
     e34:	e0bff28d 	sth	r2,-54(fp)
		if(cogx < 0 || cogy < 0){
     e38:	e0bff28f 	ldh	r2,-54(fp)
     e3c:	1004803a 	cmplt	r2,r2,zero
     e40:	1000771e 	bne	r2,zero,1020 <_track+0x2c8>
     e44:	e0bff20f 	ldh	r2,-56(fp)
     e48:	1004803a 	cmplt	r2,r2,zero
     e4c:	1000741e 	bne	r2,zero,1020 <_track+0x2c8>
			continue; //no pixels to track
		}

		//control servo motors
		errorX = (40 - cogx);
     e50:	e0fff28b 	ldhu	r3,-54(fp)
     e54:	00800a04 	movi	r2,40
     e58:	10c5c83a 	sub	r2,r2,r3
     e5c:	e0bff58d 	sth	r2,-42(fp)
		errorY = (30 - cogy);
     e60:	e0fff20b 	ldhu	r3,-56(fp)
     e64:	00800784 	movi	r2,30
     e68:	10c5c83a 	sub	r2,r2,r3
     e6c:	e0bff48d 	sth	r2,-46(fp)
		xcommand = ((errorX*3) + (errorX - prevErrorX)*2)/8;
     e70:	e0fff58f 	ldh	r3,-42(fp)
     e74:	1805883a 	mov	r2,r3
     e78:	1085883a 	add	r2,r2,r2
     e7c:	10c9883a 	add	r4,r2,r3
     e80:	e0fff58f 	ldh	r3,-42(fp)
     e84:	e0bff50f 	ldh	r2,-44(fp)
     e88:	1885c83a 	sub	r2,r3,r2
     e8c:	1085883a 	add	r2,r2,r2
     e90:	2085883a 	add	r2,r4,r2
     e94:	e0bffd15 	stw	r2,-12(fp)
     e98:	e0fffd17 	ldw	r3,-12(fp)
     e9c:	1804403a 	cmpge	r2,r3,zero
     ea0:	1000031e 	bne	r2,zero,eb0 <_track+0x158>
     ea4:	e0bffd17 	ldw	r2,-12(fp)
     ea8:	108001c4 	addi	r2,r2,7
     eac:	e0bffd15 	stw	r2,-12(fp)
     eb0:	e0fffd17 	ldw	r3,-12(fp)
     eb4:	1805d0fa 	srai	r2,r3,3
     eb8:	e0bff115 	stw	r2,-60(fp)
		ycommand = ((errorY*4) + (errorY - prevErrorY)*3)/8;
     ebc:	e0bff48f 	ldh	r2,-46(fp)
     ec0:	1085883a 	add	r2,r2,r2
     ec4:	1085883a 	add	r2,r2,r2
     ec8:	1009883a 	mov	r4,r2
     ecc:	e0fff48f 	ldh	r3,-46(fp)
     ed0:	e0bff40f 	ldh	r2,-48(fp)
     ed4:	1887c83a 	sub	r3,r3,r2
     ed8:	1805883a 	mov	r2,r3
     edc:	1085883a 	add	r2,r2,r2
     ee0:	10c5883a 	add	r2,r2,r3
     ee4:	2085883a 	add	r2,r4,r2
     ee8:	e0bffe15 	stw	r2,-8(fp)
     eec:	e0fffe17 	ldw	r3,-8(fp)
     ef0:	1804403a 	cmpge	r2,r3,zero
     ef4:	1000031e 	bne	r2,zero,f04 <_track+0x1ac>
     ef8:	e0bffe17 	ldw	r2,-8(fp)
     efc:	108001c4 	addi	r2,r2,7
     f00:	e0bffe15 	stw	r2,-8(fp)
     f04:	e0fffe17 	ldw	r3,-8(fp)
     f08:	1805d0fa 	srai	r2,r3,3
     f0c:	e0bff015 	stw	r2,-64(fp)
		prevErrorX = errorX;
     f10:	e0bff58b 	ldhu	r2,-42(fp)
     f14:	e0bff50d 	sth	r2,-44(fp)
		prevErrorY = errorY;
     f18:	e0bff48b 	ldhu	r2,-46(fp)
     f1c:	e0bff40d 	sth	r2,-48(fp)

		setServoX((xcommand < MIN_SERVO_COMMAND_X && xcommand > -MIN_SERVO_COMMAND_X)? 0 : xcommand);
     f20:	e0bff117 	ldw	r2,-60(fp)
     f24:	10800148 	cmpgei	r2,r2,5
     f28:	1000031e 	bne	r2,zero,f38 <_track+0x1e0>
     f2c:	e0bff117 	ldw	r2,-60(fp)
     f30:	10bfff08 	cmpgei	r2,r2,-4
     f34:	1000031e 	bne	r2,zero,f44 <_track+0x1ec>
     f38:	e0bff117 	ldw	r2,-60(fp)
     f3c:	e0bffc15 	stw	r2,-16(fp)
     f40:	00000106 	br	f48 <_track+0x1f0>
     f44:	e03ffc15 	stw	zero,-16(fp)
     f48:	e13ffc17 	ldw	r4,-16(fp)
     f4c:	000289c0 	call	289c <setServoX>
		setServoY((ycommand < MIN_SERVO_COMMAND_Y && ycommand > -MIN_SERVO_COMMAND_Y)? 0 : ycommand);
     f50:	e0bff017 	ldw	r2,-64(fp)
     f54:	10800288 	cmpgei	r2,r2,10
     f58:	1000031e 	bne	r2,zero,f68 <_track+0x210>
     f5c:	e0bff017 	ldw	r2,-64(fp)
     f60:	10bffdc8 	cmpgei	r2,r2,-9
     f64:	1000031e 	bne	r2,zero,f74 <_track+0x21c>
     f68:	e0fff017 	ldw	r3,-64(fp)
     f6c:	e0fffb15 	stw	r3,-20(fp)
     f70:	00000106 	br	f78 <_track+0x220>
     f74:	e03ffb15 	stw	zero,-20(fp)
     f78:	e13ffb17 	ldw	r4,-20(fp)
     f7c:	00029740 	call	2974 <setServoY>

		//adjust target value in automatic mode
		switch(type){
     f80:	e0bff317 	ldw	r2,-52(fp)
     f84:	e0bfff15 	stw	r2,-4(fp)
     f88:	e0ffff17 	ldw	r3,-4(fp)
     f8c:	1805003a 	cmpeq	r2,r3,zero
     f90:	1000041e 	bne	r2,zero,fa4 <_track+0x24c>
     f94:	e0ffff17 	ldw	r3,-4(fp)
     f98:	18800060 	cmpeqi	r2,r3,1
     f9c:	1000111e 	bne	r2,zero,fe4 <_track+0x28c>
     fa0:	00001f06 	br	1020 <_track+0x2c8>
			case DARK_AUTO:
				targetMax = (fd->minBrightness > (0xFF - TOLERANCE))? fd->minBrightness : fd->minBrightness + TOLERANCE;
     fa4:	e0bff617 	ldw	r2,-40(fp)
     fa8:	10800043 	ldbu	r2,1(r2)
     fac:	10803fcc 	andi	r2,r2,255
     fb0:	10803f70 	cmpltui	r2,r2,253
     fb4:	1000041e 	bne	r2,zero,fc8 <_track+0x270>
     fb8:	e0bff617 	ldw	r2,-40(fp)
     fbc:	10800043 	ldbu	r2,1(r2)
     fc0:	e0bffa45 	stb	r2,-23(fp)
     fc4:	00000406 	br	fd8 <_track+0x280>
     fc8:	e0bff617 	ldw	r2,-40(fp)
     fcc:	10800043 	ldbu	r2,1(r2)
     fd0:	108000c4 	addi	r2,r2,3
     fd4:	e0bffa45 	stb	r2,-23(fp)
     fd8:	e0bffa43 	ldbu	r2,-23(fp)
     fdc:	e0bff845 	stb	r2,-31(fp)
				break;
     fe0:	00000f06 	br	1020 <_track+0x2c8>
			case LIGHT_AUTO:
				targetMin = (fd->maxBrightness < (TOLERANCE))? fd->maxBrightness : fd->maxBrightness - TOLERANCE;
     fe4:	e0bff617 	ldw	r2,-40(fp)
     fe8:	10800003 	ldbu	r2,0(r2)
     fec:	10803fcc 	andi	r2,r2,255
     ff0:	108000e8 	cmpgeui	r2,r2,3
     ff4:	1000041e 	bne	r2,zero,1008 <_track+0x2b0>
     ff8:	e0bff617 	ldw	r2,-40(fp)
     ffc:	10800003 	ldbu	r2,0(r2)
    1000:	e0bffa05 	stb	r2,-24(fp)
    1004:	00000406 	br	1018 <_track+0x2c0>
    1008:	e0bff617 	ldw	r2,-40(fp)
    100c:	10800003 	ldbu	r2,0(r2)
    1010:	10bfff44 	addi	r2,r2,-3
    1014:	e0bffa05 	stb	r2,-24(fp)
    1018:	e0fffa03 	ldbu	r3,-24(fp)
    101c:	e0fff805 	stb	r3,-32(fp)
	printf("Press Button 2 to exit.\n");

	//loop the tracking until button pressed
	int16_t cogx,cogy;
	int32_t xcommand, ycommand;
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
    1020:	01000044 	movi	r4,1
    1024:	00021640 	call	2164 <pushbutton_read>
    1028:	10803fcc 	andi	r2,r2,255
    102c:	1004c03a 	cmpne	r2,r2,zero
    1030:	103f611e 	bne	r2,zero,db8 <_track+0x60>
				break;
		}
	}

	//set system to default
	servo_init();
    1034:	00027500 	call	2750 <servo_init>
	vga_clearDisplay();
    1038:	00026d40 	call	26d4 <vga_clearDisplay>
}
    103c:	e037883a 	mov	sp,fp
    1040:	dfc00117 	ldw	ra,4(sp)
    1044:	df000017 	ldw	fp,0(sp)
    1048:	dec00204 	addi	sp,sp,8
    104c:	f800283a 	ret

00001050 <_track_boundingBox>:
/**
 * Calculates the bounding box of the target and updates through the bounding
 * box pointer.
 * @param box pointer to object that will be updated with new bounding info.
 */
static void _track_boundingBox(struct boundingBox* box){
    1050:	defffd04 	addi	sp,sp,-12
    1054:	df000215 	stw	fp,8(sp)
    1058:	df000204 	addi	fp,sp,8
    105c:	e13fff15 	stw	r4,-4(fp)
	static uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
    1060:	d026d785 	stb	zero,-25762(gp)
    1064:	00004206 	br	1170 <_track_boundingBox+0x120>
		uint8_t* ptr = (uint8_t*)(VGA_MEM_START + (row << 7));
    1068:	d0a6d783 	ldbu	r2,-25762(gp)
    106c:	10803fcc 	andi	r2,r2,255
    1070:	100491fa 	slli	r2,r2,7
    1074:	1007883a 	mov	r3,r2
    1078:	00a02034 	movhi	r2,32896
    107c:	1885883a 	add	r2,r3,r2
    1080:	e0bffe15 	stw	r2,-8(fp)
		for(col=0;col<VGA_COL_MAX;col++){
    1084:	d026d745 	stb	zero,-25763(gp)
    1088:	00003206 	br	1154 <_track_boundingBox+0x104>
			pixel = *(ptr + col);
    108c:	d0a6d743 	ldbu	r2,-25763(gp)
    1090:	10803fcc 	andi	r2,r2,255
    1094:	1007883a 	mov	r3,r2
    1098:	e0bffe17 	ldw	r2,-8(fp)
    109c:	1885883a 	add	r2,r3,r2
    10a0:	10800003 	ldbu	r2,0(r2)
    10a4:	d0a6d705 	stb	r2,-25764(gp)
			if(pixel){
    10a8:	d0a6d703 	ldbu	r2,-25764(gp)
    10ac:	10803fcc 	andi	r2,r2,255
    10b0:	1005003a 	cmpeq	r2,r2,zero
    10b4:	1000241e 	bne	r2,zero,1148 <_track_boundingBox+0xf8>
				//check within current bounding box
				if(row < box->minr)
    10b8:	e0bfff17 	ldw	r2,-4(fp)
    10bc:	10800003 	ldbu	r2,0(r2)
    10c0:	d0e6d783 	ldbu	r3,-25762(gp)
    10c4:	11003fcc 	andi	r4,r2,255
    10c8:	18803fcc 	andi	r2,r3,255
    10cc:	1100032e 	bgeu	r2,r4,10dc <_track_boundingBox+0x8c>
					box->minr = row;
    10d0:	d0e6d783 	ldbu	r3,-25762(gp)
    10d4:	e0bfff17 	ldw	r2,-4(fp)
    10d8:	10c00005 	stb	r3,0(r2)
				if(col < box->minc)
    10dc:	e0bfff17 	ldw	r2,-4(fp)
    10e0:	10800043 	ldbu	r2,1(r2)
    10e4:	d0e6d743 	ldbu	r3,-25763(gp)
    10e8:	11003fcc 	andi	r4,r2,255
    10ec:	18803fcc 	andi	r2,r3,255
    10f0:	1100032e 	bgeu	r2,r4,1100 <_track_boundingBox+0xb0>
					box->minc = col;
    10f4:	d0e6d743 	ldbu	r3,-25763(gp)
    10f8:	e0bfff17 	ldw	r2,-4(fp)
    10fc:	10c00045 	stb	r3,1(r2)
				if(col > box->maxc)
    1100:	e0bfff17 	ldw	r2,-4(fp)
    1104:	108000c3 	ldbu	r2,3(r2)
    1108:	d0e6d743 	ldbu	r3,-25763(gp)
    110c:	11003fcc 	andi	r4,r2,255
    1110:	18803fcc 	andi	r2,r3,255
    1114:	2080032e 	bgeu	r4,r2,1124 <_track_boundingBox+0xd4>
					box->maxc = col;
    1118:	d0e6d743 	ldbu	r3,-25763(gp)
    111c:	e0bfff17 	ldw	r2,-4(fp)
    1120:	10c000c5 	stb	r3,3(r2)
				if(row > box->maxr)
    1124:	e0bfff17 	ldw	r2,-4(fp)
    1128:	10800083 	ldbu	r2,2(r2)
    112c:	d0e6d783 	ldbu	r3,-25762(gp)
    1130:	11003fcc 	andi	r4,r2,255
    1134:	18803fcc 	andi	r2,r3,255
    1138:	2080032e 	bgeu	r4,r2,1148 <_track_boundingBox+0xf8>
					box->maxr = row;
    113c:	d0e6d783 	ldbu	r3,-25762(gp)
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	10c00085 	stb	r3,2(r2)
 */
static void _track_boundingBox(struct boundingBox* box){
	static uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
		uint8_t* ptr = (uint8_t*)(VGA_MEM_START + (row << 7));
		for(col=0;col<VGA_COL_MAX;col++){
    1148:	d0a6d743 	ldbu	r2,-25763(gp)
    114c:	10800044 	addi	r2,r2,1
    1150:	d0a6d745 	stb	r2,-25763(gp)
    1154:	d0a6d743 	ldbu	r2,-25763(gp)
    1158:	10803fcc 	andi	r2,r2,255
    115c:	10801430 	cmpltui	r2,r2,80
    1160:	103fca1e 	bne	r2,zero,108c <_track_boundingBox+0x3c>
 * box pointer.
 * @param box pointer to object that will be updated with new bounding info.
 */
static void _track_boundingBox(struct boundingBox* box){
	static uint8_t row,col,pixel;
	for(row=0;row<VGA_ROW_MAX;row++){
    1164:	d0a6d783 	ldbu	r2,-25762(gp)
    1168:	10800044 	addi	r2,r2,1
    116c:	d0a6d785 	stb	r2,-25762(gp)
    1170:	d0a6d783 	ldbu	r2,-25762(gp)
    1174:	10803fcc 	andi	r2,r2,255
    1178:	10800f30 	cmpltui	r2,r2,60
    117c:	103fba1e 	bne	r2,zero,1068 <_track_boundingBox+0x18>
				if(row > box->maxr)
					box->maxr = row;
			}
		}
	}
}
    1180:	e037883a 	mov	sp,fp
    1184:	df000017 	ldw	fp,0(sp)
    1188:	dec00104 	addi	sp,sp,4
    118c:	f800283a 	ret

00001190 <_track_inputParsing>:
 * @param arg String to parse
 * @param min minimum value of range
 * @param max maximum value of range
 * @return filter type
 */
static FILTER_TYPE_t _track_inputParsing(char* arg, uint8_t* min, uint8_t* max){
    1190:	deffdf04 	addi	sp,sp,-132
    1194:	dfc02015 	stw	ra,128(sp)
    1198:	df001f15 	stw	fp,124(sp)
    119c:	df001f04 	addi	fp,sp,124
    11a0:	e13ffc15 	stw	r4,-16(fp)
    11a4:	e17ffd15 	stw	r5,-12(fp)
    11a8:	e1bffe15 	stw	r6,-8(fp)
	// parse input for filtering method
	char cmd[10];
	char typeStr[80]; //large to prevent failure of size
	unsigned int value;
	FILTER_TYPE_t retVal;
	int matched = sscanf(arg,"%s %s %x",cmd,typeStr,&value);
    11ac:	e1bfe404 	addi	r6,fp,-112
    11b0:	e1ffe684 	addi	r7,fp,-102
    11b4:	e0bffb04 	addi	r2,fp,-20
    11b8:	d8800015 	stw	r2,0(sp)
    11bc:	e13ffc17 	ldw	r4,-16(fp)
    11c0:	01400074 	movhi	r5,1
    11c4:	29529104 	addi	r5,r5,19012
    11c8:	0003fa00 	call	3fa0 <sscanf>
    11cc:	e0bfe215 	stw	r2,-120(fp)
	if(matched == 3){
    11d0:	e0bfe217 	ldw	r2,-120(fp)
    11d4:	108000d8 	cmpnei	r2,r2,3
    11d8:	1000461e 	bne	r2,zero,12f4 <_track_inputParsing+0x164>
		if(strcmp(typeStr,"TARGET") == 0){
    11dc:	e13fe684 	addi	r4,fp,-102
    11e0:	01400074 	movhi	r5,1
    11e4:	29529404 	addi	r5,r5,19024
    11e8:	00042000 	call	4200 <strcmp>
    11ec:	1004c03a 	cmpne	r2,r2,zero
    11f0:	10001b1e 	bne	r2,zero,1260 <_track_inputParsing+0xd0>
			retVal = TARGET_VALUE;
    11f4:	00800104 	movi	r2,4
    11f8:	e0bfe315 	stw	r2,-116(fp)
			*min = (value < TOLERANCE)? value : value - TOLERANCE;
    11fc:	e0bffb17 	ldw	r2,-20(fp)
    1200:	108000f0 	cmpltui	r2,r2,3
    1204:	1000041e 	bne	r2,zero,1218 <_track_inputParsing+0x88>
    1208:	e0bffb17 	ldw	r2,-20(fp)
    120c:	10bfff44 	addi	r2,r2,-3
    1210:	e0bfff45 	stb	r2,-3(fp)
    1214:	00000206 	br	1220 <_track_inputParsing+0x90>
    1218:	e0bffb17 	ldw	r2,-20(fp)
    121c:	e0bfff45 	stb	r2,-3(fp)
    1220:	e0bffd17 	ldw	r2,-12(fp)
    1224:	e0ffff43 	ldbu	r3,-3(fp)
    1228:	10c00005 	stb	r3,0(r2)
			*max = (value > 0xFF - TOLERANCE)? value : value + TOLERANCE;
    122c:	e0bffb17 	ldw	r2,-20(fp)
    1230:	10803f68 	cmpgeui	r2,r2,253
    1234:	1000041e 	bne	r2,zero,1248 <_track_inputParsing+0xb8>
    1238:	e0bffb17 	ldw	r2,-20(fp)
    123c:	108000c4 	addi	r2,r2,3
    1240:	e0bfff05 	stb	r2,-4(fp)
    1244:	00000206 	br	1250 <_track_inputParsing+0xc0>
    1248:	e0bffb17 	ldw	r2,-20(fp)
    124c:	e0bfff05 	stb	r2,-4(fp)
    1250:	e0bffe17 	ldw	r2,-8(fp)
    1254:	e0ffff03 	ldbu	r3,-4(fp)
    1258:	10c00005 	stb	r3,0(r2)
    125c:	00004f06 	br	139c <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"LIGHT") == 0){
    1260:	e13fe684 	addi	r4,fp,-102
    1264:	01400074 	movhi	r5,1
    1268:	29529604 	addi	r5,r5,19032
    126c:	00042000 	call	4200 <strcmp>
    1270:	1004c03a 	cmpne	r2,r2,zero
    1274:	10000a1e 	bne	r2,zero,12a0 <_track_inputParsing+0x110>
			retVal = LIGHT_MANUAL;
    1278:	008000c4 	movi	r2,3
    127c:	e0bfe315 	stw	r2,-116(fp)
			*min = value;
    1280:	e0bffb17 	ldw	r2,-20(fp)
    1284:	1007883a 	mov	r3,r2
    1288:	e0bffd17 	ldw	r2,-12(fp)
    128c:	10c00005 	stb	r3,0(r2)
			*max = 0xFF;
    1290:	e0fffe17 	ldw	r3,-8(fp)
    1294:	00bfffc4 	movi	r2,-1
    1298:	18800005 	stb	r2,0(r3)
    129c:	00003f06 	br	139c <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"DARK") == 0){
    12a0:	e13fe684 	addi	r4,fp,-102
    12a4:	01400074 	movhi	r5,1
    12a8:	29529804 	addi	r5,r5,19040
    12ac:	00042000 	call	4200 <strcmp>
    12b0:	1004c03a 	cmpne	r2,r2,zero
    12b4:	1000091e 	bne	r2,zero,12dc <_track_inputParsing+0x14c>
			retVal = DARK_MANUAL;
    12b8:	00800084 	movi	r2,2
    12bc:	e0bfe315 	stw	r2,-116(fp)
			*min = 0x00;
    12c0:	e0bffd17 	ldw	r2,-12(fp)
    12c4:	10000005 	stb	zero,0(r2)
			*max = value;
    12c8:	e0bffb17 	ldw	r2,-20(fp)
    12cc:	1007883a 	mov	r3,r2
    12d0:	e0bffe17 	ldw	r2,-8(fp)
    12d4:	10c00005 	stb	r3,0(r2)
    12d8:	00003006 	br	139c <_track_inputParsing+0x20c>
		}else{
			//error
			printf("Invalid TRACK Command Structure.\n");
    12dc:	01000074 	movhi	r4,1
    12e0:	21129a04 	addi	r4,r4,19048
    12e4:	0003bd80 	call	3bd8 <puts>
			retVal = ERROR;
    12e8:	00800144 	movi	r2,5
    12ec:	e0bfe315 	stw	r2,-116(fp)
    12f0:	00002a06 	br	139c <_track_inputParsing+0x20c>
		}
	}else if(matched == 2){
    12f4:	e0bfe217 	ldw	r2,-120(fp)
    12f8:	10800098 	cmpnei	r2,r2,2
    12fc:	1000221e 	bne	r2,zero,1388 <_track_inputParsing+0x1f8>
		if(strcmp(typeStr,"LIGHT") == 0){
    1300:	e13fe684 	addi	r4,fp,-102
    1304:	01400074 	movhi	r5,1
    1308:	29529604 	addi	r5,r5,19032
    130c:	00042000 	call	4200 <strcmp>
    1310:	1004c03a 	cmpne	r2,r2,zero
    1314:	1000091e 	bne	r2,zero,133c <_track_inputParsing+0x1ac>
			retVal = LIGHT_AUTO;
    1318:	00800044 	movi	r2,1
    131c:	e0bfe315 	stw	r2,-116(fp)
			*min = 0x55; //default value
    1320:	e0fffd17 	ldw	r3,-12(fp)
    1324:	00801544 	movi	r2,85
    1328:	18800005 	stb	r2,0(r3)
			*max = 0xFF;
    132c:	e0fffe17 	ldw	r3,-8(fp)
    1330:	00bfffc4 	movi	r2,-1
    1334:	18800005 	stb	r2,0(r3)
    1338:	00001806 	br	139c <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"DARK") == 0){
    133c:	e13fe684 	addi	r4,fp,-102
    1340:	01400074 	movhi	r5,1
    1344:	29529804 	addi	r5,r5,19040
    1348:	00042000 	call	4200 <strcmp>
    134c:	1004c03a 	cmpne	r2,r2,zero
    1350:	1000071e 	bne	r2,zero,1370 <_track_inputParsing+0x1e0>
			retVal = DARK_AUTO;
    1354:	e03fe315 	stw	zero,-116(fp)
			*min = 0x00;
    1358:	e0bffd17 	ldw	r2,-12(fp)
    135c:	10000005 	stb	zero,0(r2)
			*max = 0x55;
    1360:	e0fffe17 	ldw	r3,-8(fp)
    1364:	00801544 	movi	r2,85
    1368:	18800005 	stb	r2,0(r3)
    136c:	00000b06 	br	139c <_track_inputParsing+0x20c>
		}else{
			//error
			printf("Invalid TRACK Command Structure.\n");
    1370:	01000074 	movhi	r4,1
    1374:	21129a04 	addi	r4,r4,19048
    1378:	0003bd80 	call	3bd8 <puts>
			retVal = ERROR;
    137c:	00800144 	movi	r2,5
    1380:	e0bfe315 	stw	r2,-116(fp)
    1384:	00000506 	br	139c <_track_inputParsing+0x20c>
		}
	}else{
		printf("Invalid TRACK Command Structure.\n");
    1388:	01000074 	movhi	r4,1
    138c:	21129a04 	addi	r4,r4,19048
    1390:	0003bd80 	call	3bd8 <puts>
		retVal = ERROR;
    1394:	00800144 	movi	r2,5
    1398:	e0bfe315 	stw	r2,-116(fp)
	}
	return retVal;
    139c:	e0bfe317 	ldw	r2,-116(fp)
}
    13a0:	e037883a 	mov	sp,fp
    13a4:	dfc00117 	ldw	ra,4(sp)
    13a8:	df000017 	ldw	fp,0(sp)
    13ac:	dec00204 	addi	sp,sp,8
    13b0:	f800283a 	ret

000013b4 <_read>:

/**
 * Read Command Function
 * @param arg string to parse
 */
static void _read(char* arg){
    13b4:	defff804 	addi	sp,sp,-32
    13b8:	dfc00715 	stw	ra,28(sp)
    13bc:	df000615 	stw	fp,24(sp)
    13c0:	df000604 	addi	fp,sp,24
    13c4:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading Memory");
    13c8:	01000074 	movhi	r4,1
    13cc:	2112c604 	addi	r4,r4,19224
    13d0:	0001da00 	call	1da0 <lcd_printString>
	char cmd[3];
	unsigned int address, count;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&count);
    13d4:	e1bffc04 	addi	r6,fp,-16
    13d8:	e1fffd04 	addi	r7,fp,-12
    13dc:	e0bffe04 	addi	r2,fp,-8
    13e0:	d8800015 	stw	r2,0(sp)
    13e4:	e13fff17 	ldw	r4,-4(fp)
    13e8:	01400074 	movhi	r5,1
    13ec:	2952ca04 	addi	r5,r5,19240
    13f0:	0003fa00 	call	3fa0 <sscanf>
    13f4:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
    13f8:	e0bffb17 	ldw	r2,-20(fp)
    13fc:	108000d8 	cmpnei	r2,r2,3
    1400:	1000041e 	bne	r2,zero,1414 <_read+0x60>
		//Read multiple
		_printMem(address,count);
    1404:	e13ffd17 	ldw	r4,-12(fp)
    1408:	e17ffe17 	ldw	r5,-8(fp)
    140c:	00014d80 	call	14d8 <_printMem>
    1410:	00000a06 	br	143c <_read+0x88>
	}else if(matched == 2){
    1414:	e0bffb17 	ldw	r2,-20(fp)
    1418:	10800098 	cmpnei	r2,r2,2
    141c:	1000041e 	bne	r2,zero,1430 <_read+0x7c>
		//Read single
		_printMem(address,1);
    1420:	e13ffd17 	ldw	r4,-12(fp)
    1424:	01400044 	movi	r5,1
    1428:	00014d80 	call	14d8 <_printMem>
    142c:	00000306 	br	143c <_read+0x88>
	}else{
		printf("Invalid RR Command Structure.\n");
    1430:	01000074 	movhi	r4,1
    1434:	2112cd04 	addi	r4,r4,19252
    1438:	0003bd80 	call	3bd8 <puts>
	}
}
    143c:	e037883a 	mov	sp,fp
    1440:	dfc00117 	ldw	ra,4(sp)
    1444:	df000017 	ldw	fp,0(sp)
    1448:	dec00204 	addi	sp,sp,8
    144c:	f800283a 	ret

00001450 <_write>:

/**
 * Write Command Function
 * @param arg string to parse
 */
static void _write(char* arg){
    1450:	defff804 	addi	sp,sp,-32
    1454:	dfc00715 	stw	ra,28(sp)
    1458:	df000615 	stw	fp,24(sp)
    145c:	df000604 	addi	fp,sp,24
    1460:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing Memory");
    1464:	01000074 	movhi	r4,1
    1468:	2112d504 	addi	r4,r4,19284
    146c:	0001da00 	call	1da0 <lcd_printString>
	char cmd[3];
	unsigned int address, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&value);
    1470:	e1bffc04 	addi	r6,fp,-16
    1474:	e1fffd04 	addi	r7,fp,-12
    1478:	e0bffe04 	addi	r2,fp,-8
    147c:	d8800015 	stw	r2,0(sp)
    1480:	e13fff17 	ldw	r4,-4(fp)
    1484:	01400074 	movhi	r5,1
    1488:	2952ca04 	addi	r5,r5,19240
    148c:	0003fa00 	call	3fa0 <sscanf>
    1490:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
    1494:	e0bffb17 	ldw	r2,-20(fp)
    1498:	108000d8 	cmpnei	r2,r2,3
    149c:	1000061e 	bne	r2,zero,14b8 <_write+0x68>
		//always apply the store IO version of the instruction for immediate
		// change and store in original for memory required versions
		*((volatile unsigned char*)(address | BYPASS_CACHE_FLAG)) = value;
    14a0:	e0bffd17 	ldw	r2,-12(fp)
    14a4:	10a00034 	orhi	r2,r2,32768
    14a8:	1007883a 	mov	r3,r2
    14ac:	e0bffe17 	ldw	r2,-8(fp)
    14b0:	18800005 	stb	r2,0(r3)
    14b4:	00000306 	br	14c4 <_write+0x74>
	}else{
		printf("Invalid WR Command Structure.\n");
    14b8:	01000074 	movhi	r4,1
    14bc:	2112d904 	addi	r4,r4,19300
    14c0:	0003bd80 	call	3bd8 <puts>
	}
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	dfc00117 	ldw	ra,4(sp)
    14cc:	df000017 	ldw	fp,0(sp)
    14d0:	dec00204 	addi	sp,sp,8
    14d4:	f800283a 	ret

000014d8 <_printMem>:
/**
 * Prints out memory starting at the address for the count amount of bytes
 * @param address the address of memory to start printing
 * @param count the number of bytes to read and print
 */
static void _printMem(unsigned int address, unsigned int count){
    14d8:	deffdf04 	addi	sp,sp,-132
    14dc:	dfc02015 	stw	ra,128(sp)
    14e0:	df001f15 	stw	fp,124(sp)
    14e4:	dc001e15 	stw	r16,120(sp)
    14e8:	df001e04 	addi	fp,sp,120
    14ec:	e13ffe15 	stw	r4,-8(fp)
    14f0:	e17fff15 	stw	r5,-4(fp)

	//sanity check count for valid specification
	if(count < 1){
    14f4:	e0bfff17 	ldw	r2,-4(fp)
    14f8:	1004c03a 	cmpne	r2,r2,zero
    14fc:	1000041e 	bne	r2,zero,1510 <_printMem+0x38>
		printf("Error - Invalid Number of Addresses Specified.\n");
    1500:	01000074 	movhi	r4,1
    1504:	2112e104 	addi	r4,r4,19332
    1508:	0003bd80 	call	3bd8 <puts>
		return; //error case so leave early
    150c:	00009006 	br	1750 <_printMem+0x278>
	}else if(address + count < address){
    1510:	e0fffe17 	ldw	r3,-8(fp)
    1514:	e0bfff17 	ldw	r2,-4(fp)
    1518:	1887883a 	add	r3,r3,r2
    151c:	e0bffe17 	ldw	r2,-8(fp)
    1520:	1880032e 	bgeu	r3,r2,1530 <_printMem+0x58>
		printf("Warning - Address Overflow.\n");
    1524:	01000074 	movhi	r4,1
    1528:	2112ed04 	addi	r4,r4,19380
    152c:	0003bd80 	call	3bd8 <puts>
	//buffer allocation
	char buffer[80];
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
    1530:	e0bfe704 	addi	r2,fp,-100
    1534:	1009883a 	mov	r4,r2
    1538:	01801404 	movi	r6,80
    153c:	000b883a 	mov	r5,zero
    1540:	0003a040 	call	3a04 <memset>
	strcat(buffer,"  Base   :");
    1544:	e43fe704 	addi	r16,fp,-100
    1548:	e13fe704 	addi	r4,fp,-100
    154c:	00043480 	call	4348 <strlen>
    1550:	8085883a 	add	r2,r16,r2
    1554:	1007883a 	mov	r3,r2
    1558:	00800804 	movi	r2,32
    155c:	18800005 	stb	r2,0(r3)
    1560:	00800804 	movi	r2,32
    1564:	18800045 	stb	r2,1(r3)
    1568:	00801084 	movi	r2,66
    156c:	18800085 	stb	r2,2(r3)
    1570:	00801844 	movi	r2,97
    1574:	188000c5 	stb	r2,3(r3)
    1578:	00801cc4 	movi	r2,115
    157c:	18800105 	stb	r2,4(r3)
    1580:	00801944 	movi	r2,101
    1584:	18800145 	stb	r2,5(r3)
    1588:	00800804 	movi	r2,32
    158c:	18800185 	stb	r2,6(r3)
    1590:	00800804 	movi	r2,32
    1594:	188001c5 	stb	r2,7(r3)
    1598:	00800804 	movi	r2,32
    159c:	18800205 	stb	r2,8(r3)
    15a0:	00800e84 	movi	r2,58
    15a4:	18800245 	stb	r2,9(r3)
    15a8:	18000285 	stb	zero,10(r3)
	int i; for(i = 0; i < count && i < 16; ++i){
    15ac:	e03fe615 	stw	zero,-104(fp)
    15b0:	00000e06 	br	15ec <_printMem+0x114>
		*(temp+3) = '\0';
    15b4:	e0bffb04 	addi	r2,fp,-20
    15b8:	108000c4 	addi	r2,r2,3
    15bc:	10000005 	stb	zero,0(r2)
		sprintf(temp," +%x",i);
    15c0:	e13ffb04 	addi	r4,fp,-20
    15c4:	01400074 	movhi	r5,1
    15c8:	2952f404 	addi	r5,r5,19408
    15cc:	e1bfe617 	ldw	r6,-104(fp)
    15d0:	0003e3c0 	call	3e3c <sprintf>
		strcat(buffer,temp);
    15d4:	e13fe704 	addi	r4,fp,-100
    15d8:	e17ffb04 	addi	r5,fp,-20
    15dc:	00041700 	call	4170 <strcat>
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
	strcat(buffer,"  Base   :");
	int i; for(i = 0; i < count && i < 16; ++i){
    15e0:	e0bfe617 	ldw	r2,-104(fp)
    15e4:	10800044 	addi	r2,r2,1
    15e8:	e0bfe615 	stw	r2,-104(fp)
    15ec:	e0ffe617 	ldw	r3,-104(fp)
    15f0:	e0bfff17 	ldw	r2,-4(fp)
    15f4:	1880032e 	bgeu	r3,r2,1604 <_printMem+0x12c>
    15f8:	e0bfe617 	ldw	r2,-104(fp)
    15fc:	10800410 	cmplti	r2,r2,16
    1600:	103fec1e 	bne	r2,zero,15b4 <_printMem+0xdc>
		*(temp+3) = '\0';
		sprintf(temp," +%x",i);
		strcat(buffer,temp);
	}
	strcat(buffer,"\n");
    1604:	e13fe704 	addi	r4,fp,-100
    1608:	01400074 	movhi	r5,1
    160c:	2952f604 	addi	r5,r5,19416
    1610:	00041700 	call	4170 <strcat>
	printf(buffer);
    1614:	e13fe704 	addi	r4,fp,-100
    1618:	0003a9c0 	call	3a9c <printf>

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    161c:	e03fe515 	stw	zero,-108(fp)
    1620:	00004306 	br	1730 <_printMem+0x258>
		memset(buffer,'\0',sizeof buffer);
    1624:	e0bfe704 	addi	r2,fp,-100
    1628:	1009883a 	mov	r4,r2
    162c:	01801404 	movi	r6,80
    1630:	000b883a 	mov	r5,zero
    1634:	0003a040 	call	3a04 <memset>

		//print address
		*(temp+10) = '\0';
    1638:	e0bffb04 	addi	r2,fp,-20
    163c:	10800284 	addi	r2,r2,10
    1640:	10000005 	stb	zero,0(r2)
		sprintf(temp,"%08x :",address + j*16);
    1644:	e0bfe517 	ldw	r2,-108(fp)
    1648:	1004913a 	slli	r2,r2,4
    164c:	1007883a 	mov	r3,r2
    1650:	e0bffe17 	ldw	r2,-8(fp)
    1654:	188d883a 	add	r6,r3,r2
    1658:	e13ffb04 	addi	r4,fp,-20
    165c:	01400074 	movhi	r5,1
    1660:	2952f704 	addi	r5,r5,19420
    1664:	0003e3c0 	call	3e3c <sprintf>
		strcat(buffer,temp);
    1668:	e13fe704 	addi	r4,fp,-100
    166c:	e17ffb04 	addi	r5,fp,-20
    1670:	00041700 	call	4170 <strcat>

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    1674:	e03fe415 	stw	zero,-112(fp)
    1678:	00001a06 	br	16e4 <_printMem+0x20c>
			unsigned int addr = address + j*16+a;
    167c:	e0bfe517 	ldw	r2,-108(fp)
    1680:	1004913a 	slli	r2,r2,4
    1684:	1007883a 	mov	r3,r2
    1688:	e0bffe17 	ldw	r2,-8(fp)
    168c:	1887883a 	add	r3,r3,r2
    1690:	e0bfe417 	ldw	r2,-112(fp)
    1694:	1885883a 	add	r2,r3,r2
    1698:	e0bfe315 	stw	r2,-116(fp)
			unsigned char val = *((unsigned char*)(addr | BYPASS_CACHE_FLAG));
    169c:	e0bfe317 	ldw	r2,-116(fp)
    16a0:	10a00034 	orhi	r2,r2,32768
    16a4:	10800003 	ldbu	r2,0(r2)
    16a8:	e0bfe205 	stb	r2,-120(fp)
			*(temp+3) = '\0';
    16ac:	e0bffb04 	addi	r2,fp,-20
    16b0:	108000c4 	addi	r2,r2,3
    16b4:	10000005 	stb	zero,0(r2)
			sprintf(temp," %02x",val);
    16b8:	e1bfe203 	ldbu	r6,-120(fp)
    16bc:	e13ffb04 	addi	r4,fp,-20
    16c0:	01400074 	movhi	r5,1
    16c4:	2952f904 	addi	r5,r5,19428
    16c8:	0003e3c0 	call	3e3c <sprintf>
			strcat(buffer,temp);
    16cc:	e13fe704 	addi	r4,fp,-100
    16d0:	e17ffb04 	addi	r5,fp,-20
    16d4:	00041700 	call	4170 <strcat>
		*(temp+10) = '\0';
		sprintf(temp,"%08x :",address + j*16);
		strcat(buffer,temp);

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    16d8:	e0bfe417 	ldw	r2,-112(fp)
    16dc:	10800044 	addi	r2,r2,1
    16e0:	e0bfe415 	stw	r2,-112(fp)
    16e4:	e0bfe417 	ldw	r2,-112(fp)
    16e8:	10800408 	cmpgei	r2,r2,16
    16ec:	1000071e 	bne	r2,zero,170c <_printMem+0x234>
    16f0:	e13fe417 	ldw	r4,-112(fp)
    16f4:	e0bfe517 	ldw	r2,-108(fp)
    16f8:	1004913a 	slli	r2,r2,4
    16fc:	1007883a 	mov	r3,r2
    1700:	e0bfff17 	ldw	r2,-4(fp)
    1704:	10c5c83a 	sub	r2,r2,r3
    1708:	20bfdc36 	bltu	r4,r2,167c <_printMem+0x1a4>
			sprintf(temp," %02x",val);
			strcat(buffer,temp);
		}

		//send to serial device
		strcat(buffer,"\n");
    170c:	e13fe704 	addi	r4,fp,-100
    1710:	01400074 	movhi	r5,1
    1714:	2952f604 	addi	r5,r5,19416
    1718:	00041700 	call	4170 <strcat>
		printf(buffer);
    171c:	e13fe704 	addi	r4,fp,-100
    1720:	0003a9c0 	call	3a9c <printf>
	}
	strcat(buffer,"\n");
	printf(buffer);

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    1724:	e0bfe517 	ldw	r2,-108(fp)
    1728:	10800044 	addi	r2,r2,1
    172c:	e0bfe515 	stw	r2,-108(fp)
    1730:	e0ffe517 	ldw	r3,-108(fp)
    1734:	e0bfff17 	ldw	r2,-4(fp)
    1738:	10bfffc4 	addi	r2,r2,-1
    173c:	1004d13a 	srli	r2,r2,4
    1740:	10800044 	addi	r2,r2,1
    1744:	18bfb736 	bltu	r3,r2,1624 <_printMem+0x14c>
		strcat(buffer,"\n");
		printf(buffer);
	}

	//send final character to clean up display
	printf("\n");
    1748:	01000284 	movi	r4,10
    174c:	0003b140 	call	3b14 <putchar>
}
    1750:	e037883a 	mov	sp,fp
    1754:	dfc00217 	ldw	ra,8(sp)
    1758:	df000117 	ldw	fp,4(sp)
    175c:	dc000017 	ldw	r16,0(sp)
    1760:	dec00304 	addi	sp,sp,12
    1764:	f800283a 	ret

00001768 <_pan>:

/**
 * Pans the servo by the input value provided
 * @param arg string to parse
 */
static void _pan(char* arg){
    1768:	defff604 	addi	sp,sp,-40
    176c:	dfc00915 	stw	ra,36(sp)
    1770:	df000815 	stw	fp,32(sp)
    1774:	df000804 	addi	fp,sp,32
    1778:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Panning");
    177c:	01000074 	movhi	r4,1
    1780:	21133104 	addi	r4,r4,19652
    1784:	0001da00 	call	1da0 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    1788:	e1bff904 	addi	r6,fp,-28
    178c:	e1fffb04 	addi	r7,fp,-20
    1790:	e13fff17 	ldw	r4,-4(fp)
    1794:	01400074 	movhi	r5,1
    1798:	29533304 	addi	r5,r5,19660
    179c:	0003fa00 	call	3fa0 <sscanf>
    17a0:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    17a4:	e0bff817 	ldw	r2,-32(fp)
    17a8:	10800090 	cmplti	r2,r2,2
    17ac:	1000151e 	bne	r2,zero,1804 <_pan+0x9c>
		if(servo_pan(pos) == -1){
    17b0:	e13ffb17 	ldw	r4,-20(fp)
    17b4:	00027840 	call	2784 <servo_pan>
    17b8:	10bfffd8 	cmpnei	r2,r2,-1
    17bc:	1000141e 	bne	r2,zero,1810 <_pan+0xa8>
			printf("Position ");
    17c0:	01000074 	movhi	r4,1
    17c4:	21133504 	addi	r4,r4,19668
    17c8:	0003a9c0 	call	3a9c <printf>
			char temp[11]; *(temp+10) = '\0';
    17cc:	e0bffc04 	addi	r2,fp,-16
    17d0:	10800284 	addi	r2,r2,10
    17d4:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    17d8:	e1bffb17 	ldw	r6,-20(fp)
    17dc:	e13ffc04 	addi	r4,fp,-16
    17e0:	01400074 	movhi	r5,1
    17e4:	29533804 	addi	r5,r5,19680
    17e8:	0003e3c0 	call	3e3c <sprintf>
			printf(temp);
    17ec:	e13ffc04 	addi	r4,fp,-16
    17f0:	0003a9c0 	call	3a9c <printf>
			printf(" is invalid. Enter between 0 and 175.\n");
    17f4:	01000074 	movhi	r4,1
    17f8:	21133904 	addi	r4,r4,19684
    17fc:	0003bd80 	call	3bd8 <puts>
    1800:	00000306 	br	1810 <_pan+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    1804:	01000074 	movhi	r4,1
    1808:	21134304 	addi	r4,r4,19724
    180c:	0003bd80 	call	3bd8 <puts>
	}
}
    1810:	e037883a 	mov	sp,fp
    1814:	dfc00117 	ldw	ra,4(sp)
    1818:	df000017 	ldw	fp,0(sp)
    181c:	dec00204 	addi	sp,sp,8
    1820:	f800283a 	ret

00001824 <_tilt>:

/**
 * Tilts the servo by the input value provided
 * @param arg string to parse
 */
static void _tilt(char* arg){
    1824:	defff604 	addi	sp,sp,-40
    1828:	dfc00915 	stw	ra,36(sp)
    182c:	df000815 	stw	fp,32(sp)
    1830:	df000804 	addi	fp,sp,32
    1834:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Tilting");
    1838:	01000074 	movhi	r4,1
    183c:	21134a04 	addi	r4,r4,19752
    1840:	0001da00 	call	1da0 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    1844:	e1bff904 	addi	r6,fp,-28
    1848:	e1fffb04 	addi	r7,fp,-20
    184c:	e13fff17 	ldw	r4,-4(fp)
    1850:	01400074 	movhi	r5,1
    1854:	29533304 	addi	r5,r5,19660
    1858:	0003fa00 	call	3fa0 <sscanf>
    185c:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    1860:	e0bff817 	ldw	r2,-32(fp)
    1864:	10800090 	cmplti	r2,r2,2
    1868:	1000151e 	bne	r2,zero,18c0 <_tilt+0x9c>
		if(servo_tilt(pos) == -1){
    186c:	e13ffb17 	ldw	r4,-20(fp)
    1870:	00027f40 	call	27f4 <servo_tilt>
    1874:	10bfffd8 	cmpnei	r2,r2,-1
    1878:	1000141e 	bne	r2,zero,18cc <_tilt+0xa8>
			printf("Position ");
    187c:	01000074 	movhi	r4,1
    1880:	21133504 	addi	r4,r4,19668
    1884:	0003a9c0 	call	3a9c <printf>
			char temp[11]; *(temp+10) = '\0';
    1888:	e0bffc04 	addi	r2,fp,-16
    188c:	10800284 	addi	r2,r2,10
    1890:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    1894:	e1bffb17 	ldw	r6,-20(fp)
    1898:	e13ffc04 	addi	r4,fp,-16
    189c:	01400074 	movhi	r5,1
    18a0:	29533804 	addi	r5,r5,19680
    18a4:	0003e3c0 	call	3e3c <sprintf>
			printf(temp);
    18a8:	e13ffc04 	addi	r4,fp,-16
    18ac:	0003a9c0 	call	3a9c <printf>
			printf(" is invalid. Enter between 0 and 143.\n");
    18b0:	01000074 	movhi	r4,1
    18b4:	21134c04 	addi	r4,r4,19760
    18b8:	0003bd80 	call	3bd8 <puts>
    18bc:	00000306 	br	18cc <_tilt+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    18c0:	01000074 	movhi	r4,1
    18c4:	21134304 	addi	r4,r4,19724
    18c8:	0003bd80 	call	3bd8 <puts>
	}
}
    18cc:	e037883a 	mov	sp,fp
    18d0:	dfc00117 	ldw	ra,4(sp)
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00204 	addi	sp,sp,8
    18dc:	f800283a 	ret

000018e0 <I2C_init>:

/**
 * This function will initialize the pre-scaler register and enable the I2C
 * peripheral
 */
void I2C_init(){
    18e0:	defffe04 	addi	sp,sp,-8
    18e4:	df000115 	stw	fp,4(sp)
    18e8:	df000104 	addi	fp,sp,4
	uint16_t scaler = I2C_PRESCALER_FORMULA(50000000,100000);
    18ec:	008018c4 	movi	r2,99
    18f0:	e0bfff0d 	sth	r2,-4(fp)
	I2C->PRESCALER_LO = (scaler)&0xFF;
    18f4:	01202034 	movhi	r4,32896
    18f8:	21080804 	addi	r4,r4,8224
    18fc:	e0bfff0b 	ldhu	r2,-4(fp)
    1900:	1007883a 	mov	r3,r2
    1904:	00bfffc4 	movi	r2,-1
    1908:	1884703a 	and	r2,r3,r2
    190c:	20800005 	stb	r2,0(r4)
	I2C->PRESCALER_HI = (scaler>>8)&0xFF;
    1910:	01202034 	movhi	r4,32896
    1914:	21080804 	addi	r4,r4,8224
    1918:	e0bfff0b 	ldhu	r2,-4(fp)
    191c:	1004d23a 	srli	r2,r2,8
    1920:	1007883a 	mov	r3,r2
    1924:	00bfffc4 	movi	r2,-1
    1928:	1884703a 	and	r2,r3,r2
    192c:	20800045 	stb	r2,1(r4)
	I2C->CNTRL = I2C_CNTRL_ENABLE_MASK;
    1930:	00e02034 	movhi	r3,32896
    1934:	18c80804 	addi	r3,r3,8224
    1938:	00bfe004 	movi	r2,-128
    193c:	18800085 	stb	r2,2(r3)
}
    1940:	e037883a 	mov	sp,fp
    1944:	df000017 	ldw	fp,0(sp)
    1948:	dec00104 	addi	sp,sp,4
    194c:	f800283a 	ret

00001950 <I2C_read>:
 * It returns the 8-bit contents of the specified register.
 * @param addr slave address of device 7-bit
 * @param regNumber register address to read on slave device.
 * @return byte read from the device.
 */
uint8_t I2C_read(uint8_t addr, uint8_t regNumber){
    1950:	defffa04 	addi	sp,sp,-24
    1954:	dfc00515 	stw	ra,20(sp)
    1958:	df000415 	stw	fp,16(sp)
    195c:	df000404 	addi	fp,sp,16
    1960:	e13ffd05 	stb	r4,-12(fp)
    1964:	e17ffe05 	stb	r5,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    1968:	00e02034 	movhi	r3,32896
    196c:	18c80804 	addi	r3,r3,8224
    1970:	e0bffd03 	ldbu	r2,-12(fp)
    1974:	1085883a 	add	r2,r2,r2
    1978:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    197c:	01002404 	movi	r4,144
    1980:	0001b0c0 	call	1b0c <I2C_action>
    1984:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    1988:	e0bffc03 	ldbu	r2,-16(fp)
    198c:	1005003a 	cmpeq	r2,r2,zero
    1990:	1000031e 	bne	r2,zero,19a0 <I2C_read+0x50>
		return -1; //error occurred
    1994:	00803fc4 	movi	r2,255
    1998:	e0bfff15 	stw	r2,-4(fp)
    199c:	00002406 	br	1a30 <I2C_read+0xe0>
	}

	//write register address and end transmit
	I2C->RX_TX = regNumber;
    19a0:	00e02034 	movhi	r3,32896
    19a4:	18c80804 	addi	r3,r3,8224
    19a8:	e0bffe03 	ldbu	r2,-8(fp)
    19ac:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK| I2C_CMD_STO_MASK);
    19b0:	01001404 	movi	r4,80
    19b4:	0001b0c0 	call	1b0c <I2C_action>
    19b8:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    19bc:	e0bffc03 	ldbu	r2,-16(fp)
    19c0:	1005003a 	cmpeq	r2,r2,zero
    19c4:	1000031e 	bne	r2,zero,19d4 <I2C_read+0x84>
		return -1; //error occurred
    19c8:	00803fc4 	movi	r2,255
    19cc:	e0bfff15 	stw	r2,-4(fp)
    19d0:	00001706 	br	1a30 <I2C_read+0xe0>
	}

	//write slave read address, data received is from device
	I2C->RX_TX = (addr << 1) | 1;
    19d4:	00e02034 	movhi	r3,32896
    19d8:	18c80804 	addi	r3,r3,8224
    19dc:	e0bffd03 	ldbu	r2,-12(fp)
    19e0:	1085883a 	add	r2,r2,r2
    19e4:	10800054 	ori	r2,r2,1
    19e8:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    19ec:	01002404 	movi	r4,144
    19f0:	0001b0c0 	call	1b0c <I2C_action>
    19f4:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    19f8:	e0bffc03 	ldbu	r2,-16(fp)
    19fc:	1005003a 	cmpeq	r2,r2,zero
    1a00:	1000031e 	bne	r2,zero,1a10 <I2C_read+0xc0>
		return -1; //error occurred
    1a04:	00803fc4 	movi	r2,255
    1a08:	e0bfff15 	stw	r2,-4(fp)
    1a0c:	00000806 	br	1a30 <I2C_read+0xe0>
	}
	nacked = I2C_action(I2C_CMD_RD_MASK | I2C_CMD_STO_MASK | I2C_CMD_ACK_MASK);
    1a10:	01001a04 	movi	r4,104
    1a14:	0001b0c0 	call	1b0c <I2C_action>
    1a18:	e0bffc05 	stb	r2,-16(fp)
	return I2C->RX_TX;
    1a1c:	00a02034 	movhi	r2,32896
    1a20:	10880804 	addi	r2,r2,8224
    1a24:	108000c3 	ldbu	r2,3(r2)
    1a28:	10803fcc 	andi	r2,r2,255
    1a2c:	e0bfff15 	stw	r2,-4(fp)
    1a30:	e0bfff17 	ldw	r2,-4(fp)

}
    1a34:	e037883a 	mov	sp,fp
    1a38:	dfc00117 	ldw	ra,4(sp)
    1a3c:	df000017 	ldw	fp,0(sp)
    1a40:	dec00204 	addi	sp,sp,8
    1a44:	f800283a 	ret

00001a48 <I2C_write>:
 * @param addr slave address of device 7-bit
 * @param regNumber register address to write on slave device.
 * @param value data byte to send to slave register.
 * @return 1 if nacked, 0 if acked
 */
uint8_t I2C_write(uint8_t addr, uint8_t regNumber, uint8_t value){
    1a48:	defff904 	addi	sp,sp,-28
    1a4c:	dfc00615 	stw	ra,24(sp)
    1a50:	df000515 	stw	fp,20(sp)
    1a54:	df000504 	addi	fp,sp,20
    1a58:	e13ffc05 	stb	r4,-16(fp)
    1a5c:	e17ffd05 	stb	r5,-12(fp)
    1a60:	e1bffe05 	stb	r6,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    1a64:	00e02034 	movhi	r3,32896
    1a68:	18c80804 	addi	r3,r3,8224
    1a6c:	e0bffc03 	ldbu	r2,-16(fp)
    1a70:	1085883a 	add	r2,r2,r2
    1a74:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    1a78:	01002404 	movi	r4,144
    1a7c:	0001b0c0 	call	1b0c <I2C_action>
    1a80:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    1a84:	e0bffb03 	ldbu	r2,-20(fp)
    1a88:	1005003a 	cmpeq	r2,r2,zero
    1a8c:	1000031e 	bne	r2,zero,1a9c <I2C_write+0x54>
		return nacked; //error occurred
    1a90:	e0bffb03 	ldbu	r2,-20(fp)
    1a94:	e0bfff15 	stw	r2,-4(fp)
    1a98:	00001606 	br	1af4 <I2C_write+0xac>
	}

	//write register address
	I2C->RX_TX = regNumber;
    1a9c:	00e02034 	movhi	r3,32896
    1aa0:	18c80804 	addi	r3,r3,8224
    1aa4:	e0bffd03 	ldbu	r2,-12(fp)
    1aa8:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK);
    1aac:	01000404 	movi	r4,16
    1ab0:	0001b0c0 	call	1b0c <I2C_action>
    1ab4:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    1ab8:	e0bffb03 	ldbu	r2,-20(fp)
    1abc:	1005003a 	cmpeq	r2,r2,zero
    1ac0:	1000031e 	bne	r2,zero,1ad0 <I2C_write+0x88>
		return nacked; //error occurred
    1ac4:	e0bffb03 	ldbu	r2,-20(fp)
    1ac8:	e0bfff15 	stw	r2,-4(fp)
    1acc:	00000906 	br	1af4 <I2C_write+0xac>
	}

	//write data
	I2C->RX_TX = value;
    1ad0:	00a02034 	movhi	r2,32896
    1ad4:	10880804 	addi	r2,r2,8224
    1ad8:	e0fffe03 	ldbu	r3,-8(fp)
    1adc:	10c000c5 	stb	r3,3(r2)
	nacked = I2C_action(I2C_CMD_WR_MASK | I2C_CMD_STO_MASK);
    1ae0:	01001404 	movi	r4,80
    1ae4:	0001b0c0 	call	1b0c <I2C_action>
    1ae8:	e0bffb05 	stb	r2,-20(fp)
	return nacked;
    1aec:	e0bffb03 	ldbu	r2,-20(fp)
    1af0:	e0bfff15 	stw	r2,-4(fp)
    1af4:	e0bfff17 	ldw	r2,-4(fp)
}
    1af8:	e037883a 	mov	sp,fp
    1afc:	dfc00117 	ldw	ra,4(sp)
    1b00:	df000017 	ldw	fp,0(sp)
    1b04:	dec00204 	addi	sp,sp,8
    1b08:	f800283a 	ret

00001b0c <I2C_action>:
 * particular I2C transfer, polls TIP for end of transfer and returns the
 * RxACK status (0 for success).
 * @param command bit flags specifying the commands to apply to I2C control
 * @return success/fail of command (NACK != 0, ACK = 0)
 */
uint8_t I2C_action(uint8_t command){
    1b0c:	defffe04 	addi	sp,sp,-8
    1b10:	df000115 	stw	fp,4(sp)
    1b14:	df000104 	addi	fp,sp,4
    1b18:	e13fff05 	stb	r4,-4(fp)
	I2C->STATUS_CMD = command;
    1b1c:	00e02034 	movhi	r3,32896
    1b20:	18c80804 	addi	r3,r3,8224
    1b24:	e0bfff03 	ldbu	r2,-4(fp)
    1b28:	18800105 	stb	r2,4(r3)
	while(I2C->STATUS_CMD&I2C_STATUS_TIP_FLAG); //wait for TIP
    1b2c:	00a02034 	movhi	r2,32896
    1b30:	10880804 	addi	r2,r2,8224
    1b34:	10800103 	ldbu	r2,4(r2)
    1b38:	10803fcc 	andi	r2,r2,255
    1b3c:	1080008c 	andi	r2,r2,2
    1b40:	1004c03a 	cmpne	r2,r2,zero
    1b44:	103ff91e 	bne	r2,zero,1b2c <I2C_action+0x20>
	return I2C->STATUS_CMD&I2C_STATUS_RXACK_FLAG;
    1b48:	00a02034 	movhi	r2,32896
    1b4c:	10880804 	addi	r2,r2,8224
    1b50:	10800103 	ldbu	r2,4(r2)
    1b54:	10c03fcc 	andi	r3,r2,255
    1b58:	00802004 	movi	r2,128
    1b5c:	1884703a 	and	r2,r3,r2
}
    1b60:	e037883a 	mov	sp,fp
    1b64:	df000017 	ldw	fp,0(sp)
    1b68:	dec00104 	addi	sp,sp,4
    1b6c:	f800283a 	ret

00001b70 <lcd_cmd>:

/**
 * Writes a command to the LCD.
 * @param cmd command to be sent to LCD.
 */
void lcd_cmd(uint8_t cmd){
    1b70:	defffc04 	addi	sp,sp,-16
    1b74:	dfc00315 	stw	ra,12(sp)
    1b78:	df000215 	stw	fp,8(sp)
    1b7c:	df000204 	addi	fp,sp,8
    1b80:	e13fff05 	stb	r4,-4(fp)
	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    1b84:	0001e840 	call	1e84 <lcd_util_pollBusyFlag>

	// write E=RS=RW=0
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_CMD_MASK;
    1b88:	00a02034 	movhi	r2,32896
    1b8c:	10882004 	addi	r2,r2,8320
    1b90:	10000005 	stb	zero,0(r2)

	// write command to data port
	(LCD_DATA->DATA) = cmd;
    1b94:	00e02034 	movhi	r3,32896
    1b98:	18c82804 	addi	r3,r3,8352
    1b9c:	e0bfff03 	ldbu	r2,-4(fp)
    1ba0:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    1ba4:	00a02034 	movhi	r2,32896
    1ba8:	10882004 	addi	r2,r2,8320
    1bac:	10800003 	ldbu	r2,0(r2)
    1bb0:	10800114 	ori	r2,r2,4
    1bb4:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1bb8:	00e02034 	movhi	r3,32896
    1bbc:	18c82004 	addi	r3,r3,8320
    1bc0:	e0bffe03 	ldbu	r2,-8(fp)
    1bc4:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    1bc8:	01007d04 	movi	r4,500
    1bcc:	01602034 	movhi	r5,32896
    1bd0:	29481804 	addi	r5,r5,8288
    1bd4:	00021a00 	call	21a0 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    1bd8:	00a02034 	movhi	r2,32896
    1bdc:	10882004 	addi	r2,r2,8320
    1be0:	10c00003 	ldbu	r3,0(r2)
    1be4:	00bffec4 	movi	r2,-5
    1be8:	1884703a 	and	r2,r3,r2
    1bec:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1bf0:	00e02034 	movhi	r3,32896
    1bf4:	18c82004 	addi	r3,r3,8320
    1bf8:	e0bffe03 	ldbu	r2,-8(fp)
    1bfc:	18800005 	stb	r2,0(r3)

}
    1c00:	e037883a 	mov	sp,fp
    1c04:	dfc00117 	ldw	ra,4(sp)
    1c08:	df000017 	ldw	fp,0(sp)
    1c0c:	dec00204 	addi	sp,sp,8
    1c10:	f800283a 	ret

00001c14 <lcd_prt>:

/**
 * Writes a character to the LCD.
 * @param c character that is to be sent to LCD.
 */
void lcd_prt(char c){
    1c14:	defffc04 	addi	sp,sp,-16
    1c18:	dfc00315 	stw	ra,12(sp)
    1c1c:	df000215 	stw	fp,8(sp)
    1c20:	df000204 	addi	fp,sp,8
    1c24:	e13fff05 	stb	r4,-4(fp)

	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    1c28:	0001e840 	call	1e84 <lcd_util_pollBusyFlag>

	// write RW=E=0 RS=1  "0b010"
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_DATA_MASK;
    1c2c:	00e02034 	movhi	r3,32896
    1c30:	18c82004 	addi	r3,r3,8320
    1c34:	00800084 	movi	r2,2
    1c38:	18800005 	stb	r2,0(r3)

	// write character to data port
	(LCD_DATA->DATA) = c;
    1c3c:	00e02034 	movhi	r3,32896
    1c40:	18c82804 	addi	r3,r3,8352
    1c44:	e0bfff07 	ldb	r2,-4(fp)
    1c48:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    1c4c:	00a02034 	movhi	r2,32896
    1c50:	10882004 	addi	r2,r2,8320
    1c54:	10800003 	ldbu	r2,0(r2)
    1c58:	10800114 	ori	r2,r2,4
    1c5c:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1c60:	00e02034 	movhi	r3,32896
    1c64:	18c82004 	addi	r3,r3,8320
    1c68:	e0bffe03 	ldbu	r2,-8(fp)
    1c6c:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    1c70:	01007d04 	movi	r4,500
    1c74:	01602034 	movhi	r5,32896
    1c78:	29481804 	addi	r5,r5,8288
    1c7c:	00021a00 	call	21a0 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    1c80:	00a02034 	movhi	r2,32896
    1c84:	10882004 	addi	r2,r2,8320
    1c88:	10c00003 	ldbu	r3,0(r2)
    1c8c:	00bffec4 	movi	r2,-5
    1c90:	1884703a 	and	r2,r3,r2
    1c94:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1c98:	00e02034 	movhi	r3,32896
    1c9c:	18c82004 	addi	r3,r3,8320
    1ca0:	e0bffe03 	ldbu	r2,-8(fp)
    1ca4:	18800005 	stb	r2,0(r3)
}
    1ca8:	e037883a 	mov	sp,fp
    1cac:	dfc00117 	ldw	ra,4(sp)
    1cb0:	df000017 	ldw	fp,0(sp)
    1cb4:	dec00204 	addi	sp,sp,8
    1cb8:	f800283a 	ret

00001cbc <lcd_clr>:

/**
 * Writes the clear command to the LCD.
 */
void lcd_clr(void){
    1cbc:	defffe04 	addi	sp,sp,-8
    1cc0:	dfc00115 	stw	ra,4(sp)
    1cc4:	df000015 	stw	fp,0(sp)
    1cc8:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_CLEAR);
    1ccc:	01000044 	movi	r4,1
    1cd0:	0001b700 	call	1b70 <lcd_cmd>
}
    1cd4:	e037883a 	mov	sp,fp
    1cd8:	dfc00117 	ldw	ra,4(sp)
    1cdc:	df000017 	ldw	fp,0(sp)
    1ce0:	dec00204 	addi	sp,sp,8
    1ce4:	f800283a 	ret

00001ce8 <lcd_home>:

/**
 * Moves the cursor back to home on the LCD.
 */
void lcd_home(void){
    1ce8:	defffe04 	addi	sp,sp,-8
    1cec:	dfc00115 	stw	ra,4(sp)
    1cf0:	df000015 	stw	fp,0(sp)
    1cf4:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    1cf8:	01000184 	movi	r4,6
    1cfc:	0001b700 	call	1b70 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1d00:	01000084 	movi	r4,2
    1d04:	0001b700 	call	1b70 <lcd_cmd>
}
    1d08:	e037883a 	mov	sp,fp
    1d0c:	dfc00117 	ldw	ra,4(sp)
    1d10:	df000017 	ldw	fp,0(sp)
    1d14:	dec00204 	addi	sp,sp,8
    1d18:	f800283a 	ret

00001d1c <lcd_init>:

/**
 * Initializes the LCD. Sends out the command stream to setup the display. Must
 * call LCDportInit first for direction setting.
 */
void lcd_init(void){
    1d1c:	defffe04 	addi	sp,sp,-8
    1d20:	dfc00115 	stw	ra,4(sp)
    1d24:	df000015 	stw	fp,0(sp)
    1d28:	d839883a 	mov	fp,sp
	lcd_portInit(0xFF);
    1d2c:	01003fc4 	movi	r4,255
    1d30:	0001d700 	call	1d70 <lcd_portInit>
	lcd_cmd(LCD_CMD_DATALENGTH_8BIT);
    1d34:	01000e04 	movi	r4,56
    1d38:	0001b700 	call	1b70 <lcd_cmd>
	lcd_cmd(LCD_CMD_DISPLAY_CURSOR_BLINK_ON);
    1d3c:	010003c4 	movi	r4,15
    1d40:	0001b700 	call	1b70 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLEAR);
    1d44:	01000044 	movi	r4,1
    1d48:	0001b700 	call	1b70 <lcd_cmd>
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    1d4c:	01000184 	movi	r4,6
    1d50:	0001b700 	call	1b70 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1d54:	01000084 	movi	r4,2
    1d58:	0001b700 	call	1b70 <lcd_cmd>
}
    1d5c:	e037883a 	mov	sp,fp
    1d60:	dfc00117 	ldw	ra,4(sp)
    1d64:	df000017 	ldw	fp,0(sp)
    1d68:	dec00204 	addi	sp,sp,8
    1d6c:	f800283a 	ret

00001d70 <lcd_portInit>:

/**
 * Sets the direction of the LCD data port.
 * @param dir Port direction mask for the LCD data port
 */
void lcd_portInit(uint8_t dir){
    1d70:	defffe04 	addi	sp,sp,-8
    1d74:	df000115 	stw	fp,4(sp)
    1d78:	df000104 	addi	fp,sp,4
    1d7c:	e13fff05 	stb	r4,-4(fp)
	(LCD_DATA->DIRECTION) = dir;
    1d80:	00e02034 	movhi	r3,32896
    1d84:	18c82804 	addi	r3,r3,8352
    1d88:	e0bfff03 	ldbu	r2,-4(fp)
    1d8c:	18800115 	stw	r2,4(r3)
}
    1d90:	e037883a 	mov	sp,fp
    1d94:	df000017 	ldw	fp,0(sp)
    1d98:	dec00104 	addi	sp,sp,4
    1d9c:	f800283a 	ret

00001da0 <lcd_printString>:

/**
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
    1da0:	defffc04 	addi	sp,sp,-16
    1da4:	dfc00315 	stw	ra,12(sp)
    1da8:	df000215 	stw	fp,8(sp)
    1dac:	df000204 	addi	fp,sp,8
    1db0:	e13fff15 	stw	r4,-4(fp)
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    1db4:	e03ffe15 	stw	zero,-8(fp)
    1db8:	00002306 	br	1e48 <lcd_printString+0xa8>

		// If enter character
		if(*ptr == '\n'){
    1dbc:	e0bfff17 	ldw	r2,-4(fp)
    1dc0:	10800003 	ldbu	r2,0(r2)
    1dc4:	10803fcc 	andi	r2,r2,255
    1dc8:	1080201c 	xori	r2,r2,128
    1dcc:	10bfe004 	addi	r2,r2,-128
    1dd0:	10800298 	cmpnei	r2,r2,10
    1dd4:	10000b1e 	bne	r2,zero,1e04 <lcd_printString+0x64>
			//If on first line move to second
			if(counter < 16){
    1dd8:	e0bffe17 	ldw	r2,-8(fp)
    1ddc:	10800408 	cmpgei	r2,r2,16
    1de0:	1000231e 	bne	r2,zero,1e70 <lcd_printString+0xd0>
				lcd_cmd(LCD_SECONDLINE_CMD);
    1de4:	01003004 	movi	r4,192
    1de8:	0001b700 	call	1b70 <lcd_cmd>
				counter = 16;
    1dec:	00800404 	movi	r2,16
    1df0:	e0bffe15 	stw	r2,-8(fp)
			else {
				return;
			}

			//index pointer
			ptr++;
    1df4:	e0bfff17 	ldw	r2,-4(fp)
    1df8:	10800044 	addi	r2,r2,1
    1dfc:	e0bfff15 	stw	r2,-4(fp)
    1e00:	00000e06 	br	1e3c <lcd_printString+0x9c>
		}
		//Roll over to second line when first line fills
		else{
			if(counter == 16)
    1e04:	e0bffe17 	ldw	r2,-8(fp)
    1e08:	10800418 	cmpnei	r2,r2,16
    1e0c:	1000021e 	bne	r2,zero,1e18 <lcd_printString+0x78>
				lcd_cmd(LCD_SECONDLINE_CMD);
    1e10:	01003004 	movi	r4,192
    1e14:	0001b700 	call	1b70 <lcd_cmd>

			//print the character and index pointer
			lcd_prt(*ptr);
    1e18:	e0bfff17 	ldw	r2,-4(fp)
    1e1c:	10800003 	ldbu	r2,0(r2)
    1e20:	11003fcc 	andi	r4,r2,255
    1e24:	2100201c 	xori	r4,r4,128
    1e28:	213fe004 	addi	r4,r4,-128
    1e2c:	0001c140 	call	1c14 <lcd_prt>
			ptr++;
    1e30:	e0bfff17 	ldw	r2,-4(fp)
    1e34:	10800044 	addi	r2,r2,1
    1e38:	e0bfff15 	stw	r2,-4(fp)
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    1e3c:	e0bffe17 	ldw	r2,-8(fp)
    1e40:	10800044 	addi	r2,r2,1
    1e44:	e0bffe15 	stw	r2,-8(fp)
    1e48:	e0bfff17 	ldw	r2,-4(fp)
    1e4c:	10800003 	ldbu	r2,0(r2)
    1e50:	10803fcc 	andi	r2,r2,255
    1e54:	1080201c 	xori	r2,r2,128
    1e58:	10bfe004 	addi	r2,r2,-128
    1e5c:	1005003a 	cmpeq	r2,r2,zero
    1e60:	1000031e 	bne	r2,zero,1e70 <lcd_printString+0xd0>
    1e64:	e0bffe17 	ldw	r2,-8(fp)
    1e68:	10800818 	cmpnei	r2,r2,32
    1e6c:	103fd31e 	bne	r2,zero,1dbc <lcd_printString+0x1c>
			//print the character and index pointer
			lcd_prt(*ptr);
			ptr++;
		}
	}
}
    1e70:	e037883a 	mov	sp,fp
    1e74:	dfc00117 	ldw	ra,4(sp)
    1e78:	df000017 	ldw	fp,0(sp)
    1e7c:	dec00204 	addi	sp,sp,8
    1e80:	f800283a 	ret

00001e84 <lcd_util_pollBusyFlag>:

/**
 * Polls the busy flag of the LCD to synchronize the program to the LCD
 * instruction execution.
 */
static void lcd_util_pollBusyFlag(){
    1e84:	defffd04 	addi	sp,sp,-12
    1e88:	df000215 	stw	fp,8(sp)
    1e8c:	df000204 	addi	fp,sp,8

	//Set data register to input
	uint32_t tempDataDir = (LCD_DATA->DIRECTION);
    1e90:	00a02034 	movhi	r2,32896
    1e94:	10882804 	addi	r2,r2,8352
    1e98:	10800117 	ldw	r2,4(r2)
    1e9c:	e0bfff15 	stw	r2,-4(fp)
	(LCD_DATA->DIRECTION) = 0;
    1ea0:	00a02034 	movhi	r2,32896
    1ea4:	10882804 	addi	r2,r2,8352
    1ea8:	10000115 	stw	zero,4(r2)

	// Set RW=E=1, RS=0 to get visible busy flag
	(LCD_CTRL->L_CTRL) = 0x5;
    1eac:	00e02034 	movhi	r3,32896
    1eb0:	18c82004 	addi	r3,r3,8320
    1eb4:	00800144 	movi	r2,5
    1eb8:	18800005 	stb	r2,0(r3)

	// Needs small delay since processor is faster than LCD. Thus this noop
	// is ran.
	int i = 0; i++;
    1ebc:	e03ffe15 	stw	zero,-8(fp)
    1ec0:	e0bffe17 	ldw	r2,-8(fp)
    1ec4:	10800044 	addi	r2,r2,1
    1ec8:	e0bffe15 	stw	r2,-8(fp)

	// Poll busy flag while it is active, since old operation is still running
	while((LCD_DATA->DATA) & 0x80);
    1ecc:	00a02034 	movhi	r2,32896
    1ed0:	10882804 	addi	r2,r2,8352
    1ed4:	10800017 	ldw	r2,0(r2)
    1ed8:	1080200c 	andi	r2,r2,128
    1edc:	1004c03a 	cmpne	r2,r2,zero
    1ee0:	103ffa1e 	bne	r2,zero,1ecc <lcd_util_pollBusyFlag+0x48>

	// Restore the initial direction of the data ports
	(LCD_DATA->DIRECTION) = tempDataDir;
    1ee4:	00a02034 	movhi	r2,32896
    1ee8:	10882804 	addi	r2,r2,8352
    1eec:	e0ffff17 	ldw	r3,-4(fp)
    1ef0:	10c00115 	stw	r3,4(r2)
	(LCD_CTRL->L_CTRL) = 0;
    1ef4:	00a02034 	movhi	r2,32896
    1ef8:	10882004 	addi	r2,r2,8320
    1efc:	10000005 	stb	zero,0(r2)
}
    1f00:	e037883a 	mov	sp,fp
    1f04:	df000017 	ldw	fp,0(sp)
    1f08:	dec00104 	addi	sp,sp,4
    1f0c:	f800283a 	ret

00001f10 <LED_write>:

/**
 * Writes the value to the data register
 * @param output sets this value
 */
void LED_write(uint16_t output){
    1f10:	defffe04 	addi	sp,sp,-8
    1f14:	df000115 	stw	fp,4(sp)
    1f18:	df000104 	addi	fp,sp,4
    1f1c:	e13fff0d 	sth	r4,-4(fp)
	(LEDS -> DATA) = output;
    1f20:	00e02034 	movhi	r3,32896
    1f24:	18c80c04 	addi	r3,r3,8240
    1f28:	e0bfff0b 	ldhu	r2,-4(fp)
    1f2c:	18800015 	stw	r2,0(r3)
}
    1f30:	e037883a 	mov	sp,fp
    1f34:	df000017 	ldw	fp,0(sp)
    1f38:	dec00104 	addi	sp,sp,4
    1f3c:	f800283a 	ret

00001f40 <LED_read>:

/**
 * Reads from the data register
 * @return value from register which is activity of LEDs
 */
uint16_t LED_read(){
    1f40:	deffff04 	addi	sp,sp,-4
    1f44:	df000015 	stw	fp,0(sp)
    1f48:	d839883a 	mov	fp,sp
	return (LEDS -> DATA);
    1f4c:	00a02034 	movhi	r2,32896
    1f50:	10880c04 	addi	r2,r2,8240
    1f54:	10800017 	ldw	r2,0(r2)
    1f58:	10bfffcc 	andi	r2,r2,65535
}
    1f5c:	e037883a 	mov	sp,fp
    1f60:	df000017 	ldw	fp,0(sp)
    1f64:	dec00104 	addi	sp,sp,4
    1f68:	f800283a 	ret

00001f6c <PWM_setDutyCycle_A>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_A(int dutyCycle){
    1f6c:	defffc04 	addi	sp,sp,-16
    1f70:	df000315 	stw	fp,12(sp)
    1f74:	df000304 	addi	fp,sp,12
    1f78:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1f7c:	e0bffe17 	ldw	r2,-8(fp)
    1f80:	10801948 	cmpgei	r2,r2,101
    1f84:	1000121e 	bne	r2,zero,1fd0 <PWM_setDutyCycle_A+0x64>
    1f88:	e0bffe17 	ldw	r2,-8(fp)
    1f8c:	1004803a 	cmplt	r2,r2,zero
    1f90:	10000f1e 	bne	r2,zero,1fd0 <PWM_setDutyCycle_A+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    1f94:	e0bffe17 	ldw	r2,-8(fp)
    1f98:	10803224 	muli	r2,r2,200
    1f9c:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    1fa0:	e0bffd17 	ldw	r2,-12(fp)
    1fa4:	10938818 	cmpnei	r2,r2,20000
    1fa8:	1000031e 	bne	r2,zero,1fb8 <PWM_setDutyCycle_A+0x4c>
			duty--;
    1fac:	e0bffd17 	ldw	r2,-12(fp)
    1fb0:	10bfffc4 	addi	r2,r2,-1
    1fb4:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRA = duty;
    1fb8:	00a02034 	movhi	r2,32896
    1fbc:	10880a04 	addi	r2,r2,8232
    1fc0:	e0fffd17 	ldw	r3,-12(fp)
    1fc4:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1; // return an error
	}
	// no error
	return 0;
    1fc8:	e03fff15 	stw	zero,-4(fp)
    1fcc:	00000206 	br	1fd8 <PWM_setDutyCycle_A+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRA = duty;
	} else {
		return -1; // return an error
    1fd0:	00bfffc4 	movi	r2,-1
    1fd4:	e0bfff15 	stw	r2,-4(fp)
    1fd8:	e0bfff17 	ldw	r2,-4(fp)
	}
	// no error
	return 0;
}
    1fdc:	e037883a 	mov	sp,fp
    1fe0:	df000017 	ldw	fp,0(sp)
    1fe4:	dec00104 	addi	sp,sp,4
    1fe8:	f800283a 	ret

00001fec <PWM_setDutyCycle_B>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_B(int dutyCycle){
    1fec:	defffc04 	addi	sp,sp,-16
    1ff0:	df000315 	stw	fp,12(sp)
    1ff4:	df000304 	addi	fp,sp,12
    1ff8:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1ffc:	e0bffe17 	ldw	r2,-8(fp)
    2000:	10801948 	cmpgei	r2,r2,101
    2004:	1000121e 	bne	r2,zero,2050 <PWM_setDutyCycle_B+0x64>
    2008:	e0bffe17 	ldw	r2,-8(fp)
    200c:	1004803a 	cmplt	r2,r2,zero
    2010:	10000f1e 	bne	r2,zero,2050 <PWM_setDutyCycle_B+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    2014:	e0bffe17 	ldw	r2,-8(fp)
    2018:	10803224 	muli	r2,r2,200
    201c:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    2020:	e0bffd17 	ldw	r2,-12(fp)
    2024:	10938818 	cmpnei	r2,r2,20000
    2028:	1000031e 	bne	r2,zero,2038 <PWM_setDutyCycle_B+0x4c>
			duty--;
    202c:	e0bffd17 	ldw	r2,-12(fp)
    2030:	10bfffc4 	addi	r2,r2,-1
    2034:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRB = duty;
    2038:	00a02034 	movhi	r2,32896
    203c:	10880a84 	addi	r2,r2,8234
    2040:	e0fffd17 	ldw	r3,-12(fp)
    2044:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1;
	}
	return 0;
    2048:	e03fff15 	stw	zero,-4(fp)
    204c:	00000206 	br	2058 <PWM_setDutyCycle_B+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRB = duty;
	} else {
		return -1;
    2050:	00bfffc4 	movi	r2,-1
    2054:	e0bfff15 	stw	r2,-4(fp)
    2058:	e0bfff17 	ldw	r2,-4(fp)
	}
	return 0;
}
    205c:	e037883a 	mov	sp,fp
    2060:	df000017 	ldw	fp,0(sp)
    2064:	dec00104 	addi	sp,sp,4
    2068:	f800283a 	ret

0000206c <PWM_writeOCRA>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRA(unsigned int value){
    206c:	defffd04 	addi	sp,sp,-12
    2070:	df000215 	stw	fp,8(sp)
    2074:	df000204 	addi	fp,sp,8
    2078:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    207c:	e0bffe17 	ldw	r2,-8(fp)
    2080:	10938870 	cmpltui	r2,r2,20001
    2084:	1000031e 	bne	r2,zero,2094 <PWM_writeOCRA+0x28>
		return -1;
    2088:	00bfffc4 	movi	r2,-1
    208c:	e0bfff15 	stw	r2,-4(fp)
    2090:	00000506 	br	20a8 <PWM_writeOCRA+0x3c>
	}
	*OCRA = value;
    2094:	00a02034 	movhi	r2,32896
    2098:	10880a04 	addi	r2,r2,8232
    209c:	e0fffe17 	ldw	r3,-8(fp)
    20a0:	10c0000d 	sth	r3,0(r2)
	return 0;
    20a4:	e03fff15 	stw	zero,-4(fp)
    20a8:	e0bfff17 	ldw	r2,-4(fp)
}
    20ac:	e037883a 	mov	sp,fp
    20b0:	df000017 	ldw	fp,0(sp)
    20b4:	dec00104 	addi	sp,sp,4
    20b8:	f800283a 	ret

000020bc <PWM_writeOCRB>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRB(unsigned int value){
    20bc:	defffd04 	addi	sp,sp,-12
    20c0:	df000215 	stw	fp,8(sp)
    20c4:	df000204 	addi	fp,sp,8
    20c8:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    20cc:	e0bffe17 	ldw	r2,-8(fp)
    20d0:	10938870 	cmpltui	r2,r2,20001
    20d4:	1000031e 	bne	r2,zero,20e4 <PWM_writeOCRB+0x28>
		return -1;
    20d8:	00bfffc4 	movi	r2,-1
    20dc:	e0bfff15 	stw	r2,-4(fp)
    20e0:	00000506 	br	20f8 <PWM_writeOCRB+0x3c>
	}
	*OCRB = value;
    20e4:	00a02034 	movhi	r2,32896
    20e8:	10880a84 	addi	r2,r2,8234
    20ec:	e0fffe17 	ldw	r3,-8(fp)
    20f0:	10c0000d 	sth	r3,0(r2)
	return 0;
    20f4:	e03fff15 	stw	zero,-4(fp)
    20f8:	e0bfff17 	ldw	r2,-4(fp)
}
    20fc:	e037883a 	mov	sp,fp
    2100:	df000017 	ldw	fp,0(sp)
    2104:	dec00104 	addi	sp,sp,4
    2108:	f800283a 	ret

0000210c <PWM_readOCRA>:

/**
 * Reads from the OCRA register in counts.
 * @return count value.
 */
int PWM_readOCRA(){
    210c:	deffff04 	addi	sp,sp,-4
    2110:	df000015 	stw	fp,0(sp)
    2114:	d839883a 	mov	fp,sp
	return *OCRA;
    2118:	00a02034 	movhi	r2,32896
    211c:	10880a04 	addi	r2,r2,8232
    2120:	1080000b 	ldhu	r2,0(r2)
    2124:	10bfffcc 	andi	r2,r2,65535
}
    2128:	e037883a 	mov	sp,fp
    212c:	df000017 	ldw	fp,0(sp)
    2130:	dec00104 	addi	sp,sp,4
    2134:	f800283a 	ret

00002138 <PWM_readOCRB>:

/**
 * Reads from the OCRB register in counts.
 * @return count value.
 */
int PWM_readOCRB(){
    2138:	deffff04 	addi	sp,sp,-4
    213c:	df000015 	stw	fp,0(sp)
    2140:	d839883a 	mov	fp,sp
	return *OCRB;
    2144:	00a02034 	movhi	r2,32896
    2148:	10880a84 	addi	r2,r2,8234
    214c:	1080000b 	ldhu	r2,0(r2)
    2150:	10bfffcc 	andi	r2,r2,65535
}
    2154:	e037883a 	mov	sp,fp
    2158:	df000017 	ldw	fp,0(sp)
    215c:	dec00104 	addi	sp,sp,4
    2160:	f800283a 	ret

00002164 <pushbutton_read>:
 * Reads the raw data from the pushbutton. Note that the pushbutton logic is
 * inverted.
 * @param selectedButton number for the correct pushbutton. 1 or 2
 * @return  masked value returning value for register
 */
uint8_t pushbutton_read(uint8_t selectedButton){
    2164:	defffe04 	addi	sp,sp,-8
    2168:	df000115 	stw	fp,4(sp)
    216c:	df000104 	addi	fp,sp,4
    2170:	e13fff05 	stb	r4,-4(fp)
	return (PUSHBUTTON -> DATA) & selectedButton;
    2174:	00a02034 	movhi	r2,32896
    2178:	10883404 	addi	r2,r2,8400
    217c:	10800017 	ldw	r2,0(r2)
    2180:	1007883a 	mov	r3,r2
    2184:	e0bfff03 	ldbu	r2,-4(fp)
    2188:	1884703a 	and	r2,r3,r2
    218c:	10803fcc 	andi	r2,r2,255
}
    2190:	e037883a 	mov	sp,fp
    2194:	df000017 	ldw	fp,0(sp)
    2198:	dec00104 	addi	sp,sp,4
    219c:	f800283a 	ret

000021a0 <timer_delay>:
/**
 * Delay for the time passed into the timer as a polling loop.
 * @param timeToDelay nanoseconds to delay
 * @param timer Pointer to TIMER hardware.
 */
void timer_delay(uint32_t timeToDelay, struct TIMER_HARDWARE volatile * timer){
    21a0:	defffb04 	addi	sp,sp,-20
    21a4:	dfc00415 	stw	ra,16(sp)
    21a8:	df000315 	stw	fp,12(sp)
    21ac:	df000304 	addi	fp,sp,12
    21b0:	e13ffe15 	stw	r4,-8(fp)
    21b4:	e17fff15 	stw	r5,-4(fp)

	//Convert from seconds to clock cycles
	timeToDelay = timeToDelay / TIME_PER_CYCLE;
    21b8:	e13ffe17 	ldw	r4,-8(fp)
    21bc:	01400504 	movi	r5,20
    21c0:	0002b840 	call	2b84 <__udivsi3>
    21c4:	e0bffe15 	stw	r2,-8(fp)

	//Set initial state of the timer needs both since they are 16 bit registers
	(timer -> PERIODL) = timeToDelay;
    21c8:	e0ffff17 	ldw	r3,-4(fp)
    21cc:	e0bffe17 	ldw	r2,-8(fp)
    21d0:	18800215 	stw	r2,8(r3)
	(timer -> PERIODH) = timeToDelay >> 16;
    21d4:	e0bffe17 	ldw	r2,-8(fp)
    21d8:	1006d43a 	srli	r3,r2,16
    21dc:	e0bfff17 	ldw	r2,-4(fp)
    21e0:	10c00315 	stw	r3,12(r2)

	// Clear t0 flag to reset timer if it was set before for whatever reason
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    21e4:	e0ffff17 	ldw	r3,-4(fp)
    21e8:	00800044 	movi	r2,1
    21ec:	18800015 	stw	r2,0(r3)

	//Start timer count down by setting start bit
	uint8_t timerStatus = START_TIMER_MASK;
    21f0:	00800104 	movi	r2,4
    21f4:	e0bffd05 	stb	r2,-12(fp)
	(timer -> CTRL) = timerStatus;
    21f8:	e0fffd03 	ldbu	r3,-12(fp)
    21fc:	e0bfff17 	ldw	r2,-4(fp)
    2200:	10c00115 	stw	r3,4(r2)

	//Loop while t0 flag is a zero
	while(((timer -> STATUS) & TIMER_STATUS_T0_MASK) == 0)
    2204:	e0bfff17 	ldw	r2,-4(fp)
    2208:	10800017 	ldw	r2,0(r2)
    220c:	1080004c 	andi	r2,r2,1
    2210:	1005003a 	cmpeq	r2,r2,zero
    2214:	103ffb1e 	bne	r2,zero,2204 <timer_delay+0x64>
		;

	// Clear t0 flag to reset timer
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    2218:	e0ffff17 	ldw	r3,-4(fp)
    221c:	00800044 	movi	r2,1
    2220:	18800015 	stw	r2,0(r3)
}
    2224:	e037883a 	mov	sp,fp
    2228:	dfc00117 	ldw	ra,4(sp)
    222c:	df000017 	ldw	fp,0(sp)
    2230:	dec00204 	addi	sp,sp,8
    2234:	f800283a 	ret

00002238 <timer_interrupt_init>:
 * @param isInterruptable 0 is disabling interrupts, 1 is enabling interrupts
 * @param timeToDelay Time to set in timer before interrupt once started.
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_init(uint8_t isInterruptable, uint32_t timeToDelay,
		struct TIMER_HARDWARE volatile * timer){
    2238:	defffb04 	addi	sp,sp,-20
    223c:	dfc00415 	stw	ra,16(sp)
    2240:	df000315 	stw	fp,12(sp)
    2244:	df000304 	addi	fp,sp,12
    2248:	e17ffe15 	stw	r5,-8(fp)
    224c:	e1bfff15 	stw	r6,-4(fp)
    2250:	e13ffd05 	stb	r4,-12(fp)

	//check to see if enabling or disabling interrupts
	if(isInterruptable){
    2254:	e0bffd03 	ldbu	r2,-12(fp)
    2258:	1005003a 	cmpeq	r2,r2,zero
    225c:	1000251e 	bne	r2,zero,22f4 <timer_interrupt_init+0xbc>

		// set IRQ0
		if(timer == TIMER_0){
    2260:	e0ffff17 	ldw	r3,-4(fp)
    2264:	00a02034 	movhi	r2,32896
    2268:	10881004 	addi	r2,r2,8256
    226c:	1880051e 	bne	r3,r2,2284 <timer_interrupt_init+0x4c>
			// set interrupt ienable
			asm volatile(
    2270:	01c00044 	movi	r7,1
    2274:	000d30fa 	rdctl	r6,ienable
    2278:	398eb03a 	or	r7,r7,r6
    227c:	380170fa 	wrctl	ienable,r7
    2280:	00000806 	br	22a4 <timer_interrupt_init+0x6c>
							::
						);

		}
		// set IRQ2
		else if (timer == TIMER_1){
    2284:	e0ffff17 	ldw	r3,-4(fp)
    2288:	00a02034 	movhi	r2,32896
    228c:	10881804 	addi	r2,r2,8288
    2290:	1880041e 	bne	r3,r2,22a4 <timer_interrupt_init+0x6c>
			// set interrupt ienable
			asm volatile(
    2294:	01c00104 	movi	r7,4
    2298:	000d30fa 	rdctl	r6,ienable
    229c:	398eb03a 	or	r7,r7,r6
    22a0:	380170fa 	wrctl	ienable,r7
						);
		}

		//Clear t0 flag to reset timer if it was
		// set before for whatever reason
		(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    22a4:	e0ffff17 	ldw	r3,-4(fp)
    22a8:	00800044 	movi	r2,1
    22ac:	18800015 	stw	r2,0(r3)

		//Convert from seconds to clock cycles
		timeToDelay = timeToDelay / TIME_PER_CYCLE;
    22b0:	e13ffe17 	ldw	r4,-8(fp)
    22b4:	01400504 	movi	r5,20
    22b8:	0002b840 	call	2b84 <__udivsi3>
    22bc:	e0bffe15 	stw	r2,-8(fp)

		//Set initial state of the timer needs both since
		// they are 16 bit registers
		(timer -> PERIODL) = timeToDelay;
    22c0:	e0ffff17 	ldw	r3,-4(fp)
    22c4:	e0bffe17 	ldw	r2,-8(fp)
    22c8:	18800215 	stw	r2,8(r3)
		(timer -> PERIODH) = timeToDelay >> 16;
    22cc:	e0bffe17 	ldw	r2,-8(fp)
    22d0:	1006d43a 	srli	r3,r2,16
    22d4:	e0bfff17 	ldw	r2,-4(fp)
    22d8:	10c00315 	stw	r3,12(r2)

		// set interrupt on control register
		(timer -> CTRL) = (timer -> CTRL) | (INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    22dc:	e0bfff17 	ldw	r2,-4(fp)
    22e0:	10800117 	ldw	r2,4(r2)
    22e4:	10c000d4 	ori	r3,r2,3
    22e8:	e0bfff17 	ldw	r2,-4(fp)
    22ec:	10c00115 	stw	r3,4(r2)
    22f0:	00001506 	br	2348 <timer_interrupt_init+0x110>

	} else {
		// set IRQ to off
		if(timer == TIMER_0){
    22f4:	e0ffff17 	ldw	r3,-4(fp)
    22f8:	00a02034 	movhi	r2,32896
    22fc:	10881004 	addi	r2,r2,8256
    2300:	1880051e 	bne	r3,r2,2318 <timer_interrupt_init+0xe0>
			asm volatile(
    2304:	01ffff84 	movi	r7,-2
    2308:	000d30fa 	rdctl	r6,ienable
    230c:	398e703a 	and	r7,r7,r6
    2310:	380170fa 	wrctl	ienable,r7
    2314:	00000806 	br	2338 <timer_interrupt_init+0x100>
							"rdctl	r6, ienable\n\t"	// combine previous
							"and	r7, r7, r6\n\t"     // ienable and irq0
							"wrctl	ienable, r7"
							::
						);
		}else if(timer == TIMER_1){
    2318:	e0ffff17 	ldw	r3,-4(fp)
    231c:	00a02034 	movhi	r2,32896
    2320:	10881804 	addi	r2,r2,8288
    2324:	1880041e 	bne	r3,r2,2338 <timer_interrupt_init+0x100>
			asm volatile(
    2328:	01fffec4 	movi	r7,-5
    232c:	000d30fa 	rdctl	r6,ienable
    2330:	398e703a 	and	r7,r7,r6
    2334:	380170fa 	wrctl	ienable,r7
							::
						);
		}

		// disable interrupt
		(timer -> CTRL) = (timer -> CTRL) & !(INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    2338:	e0bfff17 	ldw	r2,-4(fp)
    233c:	10800117 	ldw	r2,4(r2)
    2340:	e0bfff17 	ldw	r2,-4(fp)
    2344:	10000115 	stw	zero,4(r2)
	}
}
    2348:	e037883a 	mov	sp,fp
    234c:	dfc00117 	ldw	ra,4(sp)
    2350:	df000017 	ldw	fp,0(sp)
    2354:	dec00204 	addi	sp,sp,8
    2358:	f800283a 	ret

0000235c <timer_interrupt_start_stop>:
 * Sets the timer to be started or stopped for interrupt use.
 * @param isStart boolean value whether to start of stop timer
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_start_stop(uint8_t isStart,
		struct TIMER_HARDWARE volatile * timer){
    235c:	defffd04 	addi	sp,sp,-12
    2360:	df000215 	stw	fp,8(sp)
    2364:	df000204 	addi	fp,sp,8
    2368:	e17fff15 	stw	r5,-4(fp)
    236c:	e13ffe05 	stb	r4,-8(fp)
	//Start the timer
	if(isStart){
    2370:	e0bffe03 	ldbu	r2,-8(fp)
    2374:	1005003a 	cmpeq	r2,r2,zero
    2378:	1000061e 	bne	r2,zero,2394 <timer_interrupt_start_stop+0x38>
		(timer -> CTRL) = (timer -> CTRL) | START_TIMER_MASK;
    237c:	e0bfff17 	ldw	r2,-4(fp)
    2380:	10800117 	ldw	r2,4(r2)
    2384:	10c00114 	ori	r3,r2,4
    2388:	e0bfff17 	ldw	r2,-4(fp)
    238c:	10c00115 	stw	r3,4(r2)
    2390:	00000406 	br	23a4 <timer_interrupt_start_stop+0x48>
	}
	//Stop the timer
	else {
		(timer -> CTRL) = (timer -> CTRL) & !START_TIMER_MASK;
    2394:	e0bfff17 	ldw	r2,-4(fp)
    2398:	10800117 	ldw	r2,4(r2)
    239c:	e0bfff17 	ldw	r2,-4(fp)
    23a0:	10000115 	stw	zero,4(r2)
	}
}
    23a4:	e037883a 	mov	sp,fp
    23a8:	df000017 	ldw	fp,0(sp)
    23ac:	dec00104 	addi	sp,sp,4
    23b0:	f800283a 	ret

000023b4 <timer_ISR_TIMER_0>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_0(){
    23b4:	deffff04 	addi	sp,sp,-4
    23b8:	df000015 	stw	fp,0(sp)
    23bc:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_0 -> STATUS) = TIMER_STATUS_T0_MASK;
    23c0:	00e02034 	movhi	r3,32896
    23c4:	18c81004 	addi	r3,r3,8256
    23c8:	00800044 	movi	r2,1
    23cc:	18800015 	stw	r2,0(r3)
}
    23d0:	e037883a 	mov	sp,fp
    23d4:	df000017 	ldw	fp,0(sp)
    23d8:	dec00104 	addi	sp,sp,4
    23dc:	f800283a 	ret

000023e0 <timer_ISR_TIMER_1>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_1(){
    23e0:	deffff04 	addi	sp,sp,-4
    23e4:	df000015 	stw	fp,0(sp)
    23e8:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_1 -> STATUS) = TIMER_STATUS_T0_MASK;
    23ec:	00e02034 	movhi	r3,32896
    23f0:	18c81804 	addi	r3,r3,8288
    23f4:	00800044 	movi	r2,1
    23f8:	18800015 	stw	r2,0(r3)
}
    23fc:	e037883a 	mov	sp,fp
    2400:	df000017 	ldw	fp,0(sp)
    2404:	dec00104 	addi	sp,sp,4
    2408:	f800283a 	ret

0000240c <uart_init>:
 * Sets UART for no interrupts, sets baud rate to specified
 * @param baudRate the baud to transmit at
 * @param UART pointer to the hardware device to interface with
 * @return -1 if error, 0 otherwise
 */
int uart_init(uint16_t baudRate, struct UART_Hardware volatile * UART){
    240c:	defffa04 	addi	sp,sp,-24
    2410:	df000515 	stw	fp,20(sp)
    2414:	df000504 	addi	fp,sp,20
    2418:	e17ffd15 	stw	r5,-12(fp)
    241c:	e13ffc0d 	sth	r4,-16(fp)

	// select the baud input as hardware signals
	uint8_t baud;
	switch(baudRate){
    2420:	e0bffc0b 	ldhu	r2,-16(fp)
    2424:	e0bfff15 	stw	r2,-4(fp)
    2428:	e0ffff17 	ldw	r3,-4(fp)
    242c:	18825820 	cmpeqi	r2,r3,2400
    2430:	1000291e 	bne	r2,zero,24d8 <uart_init+0xcc>
    2434:	e0ffff17 	ldw	r3,-4(fp)
    2438:	18825848 	cmpgei	r2,r3,2401
    243c:	10000a1e 	bne	r2,zero,2468 <uart_init+0x5c>
    2440:	e0ffff17 	ldw	r3,-4(fp)
    2444:	18809620 	cmpeqi	r2,r3,600
    2448:	1000291e 	bne	r2,zero,24f0 <uart_init+0xe4>
    244c:	e0ffff17 	ldw	r3,-4(fp)
    2450:	18812c20 	cmpeqi	r2,r3,1200
    2454:	1000231e 	bne	r2,zero,24e4 <uart_init+0xd8>
    2458:	e0ffff17 	ldw	r3,-4(fp)
    245c:	18804b20 	cmpeqi	r2,r3,300
    2460:	1000261e 	bne	r2,zero,24fc <uart_init+0xf0>
    2464:	00002806 	br	2508 <uart_init+0xfc>
    2468:	e0ffff17 	ldw	r3,-4(fp)
    246c:	18896020 	cmpeqi	r2,r3,9600
    2470:	1000131e 	bne	r2,zero,24c0 <uart_init+0xb4>
    2474:	e0ffff17 	ldw	r3,-4(fp)
    2478:	18896048 	cmpgei	r2,r3,9601
    247c:	1000041e 	bne	r2,zero,2490 <uart_init+0x84>
    2480:	e0ffff17 	ldw	r3,-4(fp)
    2484:	1884b020 	cmpeqi	r2,r3,4800
    2488:	1000101e 	bne	r2,zero,24cc <uart_init+0xc0>
    248c:	00001e06 	br	2508 <uart_init+0xfc>
    2490:	e0ffff17 	ldw	r3,-4(fp)
    2494:	1892c020 	cmpeqi	r2,r3,19200
    2498:	1000061e 	bne	r2,zero,24b4 <uart_init+0xa8>
    249c:	00a58014 	movui	r2,38400
    24a0:	e0ffff17 	ldw	r3,-4(fp)
    24a4:	18800126 	beq	r3,r2,24ac <uart_init+0xa0>
    24a8:	00001706 	br	2508 <uart_init+0xfc>
		case 38400:
						baud = 0x0;
    24ac:	e03ffb05 	stb	zero,-20(fp)
						break;
    24b0:	00001806 	br	2514 <uart_init+0x108>
		case 19200:
						baud = 0x1;
    24b4:	00800044 	movi	r2,1
    24b8:	e0bffb05 	stb	r2,-20(fp)
						break;
    24bc:	00001506 	br	2514 <uart_init+0x108>
		case 9600:
						baud = 0x2;
    24c0:	00800084 	movi	r2,2
    24c4:	e0bffb05 	stb	r2,-20(fp)
						break;
    24c8:	00001206 	br	2514 <uart_init+0x108>
		case 4800:
						baud = 0x3;
    24cc:	008000c4 	movi	r2,3
    24d0:	e0bffb05 	stb	r2,-20(fp)
						break;
    24d4:	00000f06 	br	2514 <uart_init+0x108>
		case 2400:
						baud = 0x4;
    24d8:	00800104 	movi	r2,4
    24dc:	e0bffb05 	stb	r2,-20(fp)
						break;
    24e0:	00000c06 	br	2514 <uart_init+0x108>
		case 1200:
						baud = 0x5;
    24e4:	00800144 	movi	r2,5
    24e8:	e0bffb05 	stb	r2,-20(fp)
						break;
    24ec:	00000906 	br	2514 <uart_init+0x108>
		case 600:
						baud = 0x6;
    24f0:	00800184 	movi	r2,6
    24f4:	e0bffb05 	stb	r2,-20(fp)
						break;
    24f8:	00000606 	br	2514 <uart_init+0x108>
		case 300:
						baud = 0x7;
    24fc:	008001c4 	movi	r2,7
    2500:	e0bffb05 	stb	r2,-20(fp)
						break;
    2504:	00000306 	br	2514 <uart_init+0x108>
		default:
						// there is an error since input is invalid
						return -1;
    2508:	00bfffc4 	movi	r2,-1
    250c:	e0bffe15 	stw	r2,-8(fp)
    2510:	00000406 	br	2524 <uart_init+0x118>

	}

	// No interrupts, 38500 Baud
	(UART->UCONTROL) = baud;
    2514:	e0fffd17 	ldw	r3,-12(fp)
    2518:	e0bffb03 	ldbu	r2,-20(fp)
    251c:	18800085 	stb	r2,2(r3)

	return 0;
    2520:	e03ffe15 	stw	zero,-8(fp)
    2524:	e0bffe17 	ldw	r2,-8(fp)
}
    2528:	e037883a 	mov	sp,fp
    252c:	df000017 	ldw	fp,0(sp)
    2530:	dec00104 	addi	sp,sp,4
    2534:	f800283a 	ret

00002538 <uart_putch>:
 * stuck in a loop, for polling, until the transmit register is ready for next
 * byte.
 * @param x character to send out.
 * @param UART Hardware register pointer
 */
void uart_putch(char x, struct UART_Hardware volatile * UART){
    2538:	defffd04 	addi	sp,sp,-12
    253c:	df000215 	stw	fp,8(sp)
    2540:	df000204 	addi	fp,sp,8
    2544:	e17fff15 	stw	r5,-4(fp)
    2548:	e13ffe05 	stb	r4,-8(fp)

	// Poll till char is received
	while(((UART -> USTATUS) & TDRE) == 0);
    254c:	e0bfff17 	ldw	r2,-4(fp)
    2550:	10800043 	ldbu	r2,1(r2)
    2554:	10803fcc 	andi	r2,r2,255
    2558:	1080201c 	xori	r2,r2,128
    255c:	10bfe004 	addi	r2,r2,-128
    2560:	1004403a 	cmpge	r2,r2,zero
    2564:	103ff91e 	bne	r2,zero,254c <uart_putch+0x14>

	// Write the character
	(UART -> UDR) = x;
    2568:	e0ffff17 	ldw	r3,-4(fp)
    256c:	e0bffe03 	ldbu	r2,-8(fp)
    2570:	18800005 	stb	r2,0(r3)
}
    2574:	e037883a 	mov	sp,fp
    2578:	df000017 	ldw	fp,0(sp)
    257c:	dec00104 	addi	sp,sp,4
    2580:	f800283a 	ret

00002584 <uart_getch>:
 * Gets a character that was received from the UART. Caution: WIll be stuck in
 * a loop, due to polling, until a character is received.
 * @param UART Hardware register pointer
 * @return character received by the UART in ASCII encoding.
 */
char uart_getch(struct UART_Hardware volatile * UART){
    2584:	defffd04 	addi	sp,sp,-12
    2588:	df000215 	stw	fp,8(sp)
    258c:	df000204 	addi	fp,sp,8
    2590:	e13fff15 	stw	r4,-4(fp)

	// Temporary memory
	char x;

	//Wait till transmitter ready
	while(((UART -> USTATUS) & RDRF) == 0);
    2594:	e0bfff17 	ldw	r2,-4(fp)
    2598:	10800043 	ldbu	r2,1(r2)
    259c:	10803fcc 	andi	r2,r2,255
    25a0:	1080100c 	andi	r2,r2,64
    25a4:	1005003a 	cmpeq	r2,r2,zero
    25a8:	103ffa1e 	bne	r2,zero,2594 <uart_getch+0x10>

	// Read the character
	x = (UART -> UDR);
    25ac:	e0bfff17 	ldw	r2,-4(fp)
    25b0:	10800003 	ldbu	r2,0(r2)
    25b4:	e0bffe05 	stb	r2,-8(fp)
	return x;
    25b8:	e0bffe07 	ldb	r2,-8(fp)
}
    25bc:	e037883a 	mov	sp,fp
    25c0:	df000017 	ldw	fp,0(sp)
    25c4:	dec00104 	addi	sp,sp,4
    25c8:	f800283a 	ret

000025cc <uart_printStr>:
/**
 * Print string to UART device.
 * @param str passes a string through the UART
 * @param UART Hardware register pointer
 */
void uart_printStr(char* str,struct UART_Hardware volatile * UART){
    25cc:	defffc04 	addi	sp,sp,-16
    25d0:	dfc00315 	stw	ra,12(sp)
    25d4:	df000215 	stw	fp,8(sp)
    25d8:	df000204 	addi	fp,sp,8
    25dc:	e13ffe15 	stw	r4,-8(fp)
    25e0:	e17fff15 	stw	r5,-4(fp)
	if(str != NULL){
    25e4:	e0bffe17 	ldw	r2,-8(fp)
    25e8:	1004c03a 	cmpne	r2,r2,zero
    25ec:	1000121e 	bne	r2,zero,2638 <uart_printStr+0x6c>
		return; //error NULL pointer
	}

	while(*str){
    25f0:	00000a06 	br	261c <uart_printStr+0x50>
		uart_putch(*str,UART);
    25f4:	e0bffe17 	ldw	r2,-8(fp)
    25f8:	10800003 	ldbu	r2,0(r2)
    25fc:	11003fcc 	andi	r4,r2,255
    2600:	2100201c 	xori	r4,r4,128
    2604:	213fe004 	addi	r4,r4,-128
    2608:	e17fff17 	ldw	r5,-4(fp)
    260c:	00025380 	call	2538 <uart_putch>
		str++;
    2610:	e0bffe17 	ldw	r2,-8(fp)
    2614:	10800044 	addi	r2,r2,1
    2618:	e0bffe15 	stw	r2,-8(fp)
void uart_printStr(char* str,struct UART_Hardware volatile * UART){
	if(str != NULL){
		return; //error NULL pointer
	}

	while(*str){
    261c:	e0bffe17 	ldw	r2,-8(fp)
    2620:	10800003 	ldbu	r2,0(r2)
    2624:	10803fcc 	andi	r2,r2,255
    2628:	1080201c 	xori	r2,r2,128
    262c:	10bfe004 	addi	r2,r2,-128
    2630:	1004c03a 	cmpne	r2,r2,zero
    2634:	103fef1e 	bne	r2,zero,25f4 <uart_printStr+0x28>
		uart_putch(*str,UART);
		str++;
	}
}
    2638:	e037883a 	mov	sp,fp
    263c:	dfc00117 	ldw	ra,4(sp)
    2640:	df000017 	ldw	fp,0(sp)
    2644:	dec00204 	addi	sp,sp,8
    2648:	f800283a 	ret

0000264c <uart_readStr>:
 *        function until either a new line character is
 *        received or length is reached.
 * @param length size of the buffer.
 * @param UART Hardware register pointer
 */
void uart_readStr(char* inputStr, unsigned int length,struct UART_Hardware volatile * UART){
    264c:	defff904 	addi	sp,sp,-28
    2650:	dfc00615 	stw	ra,24(sp)
    2654:	df000515 	stw	fp,20(sp)
    2658:	df000504 	addi	fp,sp,20
    265c:	e13ffd15 	stw	r4,-12(fp)
    2660:	e17ffe15 	stw	r5,-8(fp)
    2664:	e1bfff15 	stw	r6,-4(fp)
	unsigned int count;
	char c;
	while((c=uart_getch(UART)) != '\n' || count < length-1){
    2668:	00000906 	br	2690 <uart_readStr+0x44>
		count++;
    266c:	e0bffc17 	ldw	r2,-16(fp)
    2670:	10800044 	addi	r2,r2,1
    2674:	e0bffc15 	stw	r2,-16(fp)
		*inputStr = c;
    2678:	e0fffd17 	ldw	r3,-12(fp)
    267c:	e0bffb03 	ldbu	r2,-20(fp)
    2680:	18800005 	stb	r2,0(r3)
		inputStr++;
    2684:	e0bffd17 	ldw	r2,-12(fp)
    2688:	10800044 	addi	r2,r2,1
    268c:	e0bffd15 	stw	r2,-12(fp)
 * @param UART Hardware register pointer
 */
void uart_readStr(char* inputStr, unsigned int length,struct UART_Hardware volatile * UART){
	unsigned int count;
	char c;
	while((c=uart_getch(UART)) != '\n' || count < length-1){
    2690:	e13fff17 	ldw	r4,-4(fp)
    2694:	00025840 	call	2584 <uart_getch>
    2698:	e0bffb05 	stb	r2,-20(fp)
    269c:	e0bffb07 	ldb	r2,-20(fp)
    26a0:	10800298 	cmpnei	r2,r2,10
    26a4:	103ff11e 	bne	r2,zero,266c <uart_readStr+0x20>
    26a8:	e0bffe17 	ldw	r2,-8(fp)
    26ac:	10ffffc4 	addi	r3,r2,-1
    26b0:	e0bffc17 	ldw	r2,-16(fp)
    26b4:	10ffed36 	bltu	r2,r3,266c <uart_readStr+0x20>
		count++;
		*inputStr = c;
		inputStr++;
	}
	*inputStr = '\0';
    26b8:	e0bffd17 	ldw	r2,-12(fp)
    26bc:	10000005 	stb	zero,0(r2)
}
    26c0:	e037883a 	mov	sp,fp
    26c4:	dfc00117 	ldw	ra,4(sp)
    26c8:	df000017 	ldw	fp,0(sp)
    26cc:	dec00204 	addi	sp,sp,8
    26d0:	f800283a 	ret

000026d4 <vga_clearDisplay>:
//=============================================================================

/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
    26d4:	defffe04 	addi	sp,sp,-8
    26d8:	df000115 	stw	fp,4(sp)
    26dc:	df000104 	addi	fp,sp,4
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    26e0:	e03fff45 	stb	zero,-3(fp)
    26e4:	00001306 	br	2734 <vga_clearDisplay+0x60>
		for(col=0;col<VGA_COL_MAX;col++){
    26e8:	e03fff05 	stb	zero,-4(fp)
    26ec:	00000b06 	br	271c <vga_clearDisplay+0x48>
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
    26f0:	e0bfff43 	ldbu	r2,-3(fp)
    26f4:	100491fa 	slli	r2,r2,7
    26f8:	1007883a 	mov	r3,r2
    26fc:	e0bfff03 	ldbu	r2,-4(fp)
    2700:	1887883a 	add	r3,r3,r2
    2704:	00a02034 	movhi	r2,32896
    2708:	1885883a 	add	r2,r3,r2
    270c:	10000005 	stb	zero,0(r2)
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
		for(col=0;col<VGA_COL_MAX;col++){
    2710:	e0bfff03 	ldbu	r2,-4(fp)
    2714:	10800044 	addi	r2,r2,1
    2718:	e0bfff05 	stb	r2,-4(fp)
    271c:	e0bfff03 	ldbu	r2,-4(fp)
    2720:	10801430 	cmpltui	r2,r2,80
    2724:	103ff21e 	bne	r2,zero,26f0 <vga_clearDisplay+0x1c>
/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    2728:	e0bfff43 	ldbu	r2,-3(fp)
    272c:	10800044 	addi	r2,r2,1
    2730:	e0bfff45 	stb	r2,-3(fp)
    2734:	e0bfff43 	ldbu	r2,-3(fp)
    2738:	10800f30 	cmpltui	r2,r2,60
    273c:	103fea1e 	bne	r2,zero,26e8 <vga_clearDisplay+0x14>
		for(col=0;col<VGA_COL_MAX;col++){
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
		}
	}
}
    2740:	e037883a 	mov	sp,fp
    2744:	df000017 	ldw	fp,0(sp)
    2748:	dec00104 	addi	sp,sp,4
    274c:	f800283a 	ret

00002750 <servo_init>:
//=============================================================================

/**
 * Sets up the PWM to move the servos to center position
 */
void servo_init(){
    2750:	defffe04 	addi	sp,sp,-8
    2754:	dfc00115 	stw	ra,4(sp)
    2758:	df000015 	stw	fp,0(sp)
    275c:	d839883a 	mov	fp,sp
	servo_pan(PAN_MAX/2);
    2760:	010015c4 	movi	r4,87
    2764:	00027840 	call	2784 <servo_pan>
	servo_tilt(TILT_MAX/2+5);
    2768:	01001304 	movi	r4,76
    276c:	00027f40 	call	27f4 <servo_tilt>
}
    2770:	e037883a 	mov	sp,fp
    2774:	dfc00117 	ldw	ra,4(sp)
    2778:	df000017 	ldw	fp,0(sp)
    277c:	dec00204 	addi	sp,sp,8
    2780:	f800283a 	ret

00002784 <servo_pan>:
 * of the camera. These values should cause a full range of travel from far
 * left to far right.
 * @param col the x tracking position
 * @return -1 if invalid input, else 0
 */
int servo_pan(int col){
    2784:	defffc04 	addi	sp,sp,-16
    2788:	dfc00315 	stw	ra,12(sp)
    278c:	df000215 	stw	fp,8(sp)
    2790:	df000204 	addi	fp,sp,8
    2794:	e13ffe15 	stw	r4,-8(fp)
	if(col < PAN_MIN || col > PAN_MAX){
    2798:	e0bffe17 	ldw	r2,-8(fp)
    279c:	1004803a 	cmplt	r2,r2,zero
    27a0:	1000031e 	bne	r2,zero,27b0 <servo_pan+0x2c>
    27a4:	e0bffe17 	ldw	r2,-8(fp)
    27a8:	10802c10 	cmplti	r2,r2,176
    27ac:	1000031e 	bne	r2,zero,27bc <servo_pan+0x38>
		return -1;
    27b0:	00bfffc4 	movi	r2,-1
    27b4:	e0bfff15 	stw	r2,-4(fp)
    27b8:	00000806 	br	27dc <servo_pan+0x58>
	}
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(col));
    27bc:	e0bffe17 	ldw	r2,-8(fp)
    27c0:	11001ae4 	muli	r4,r2,107
    27c4:	01400284 	movi	r5,10
    27c8:	0002ac40 	call	2ac4 <__divsi3>
    27cc:	10807f84 	addi	r2,r2,510
    27d0:	1009883a 	mov	r4,r2
    27d4:	000206c0 	call	206c <PWM_writeOCRA>
	return 0;
    27d8:	e03fff15 	stw	zero,-4(fp)
    27dc:	e0bfff17 	ldw	r2,-4(fp)
}
    27e0:	e037883a 	mov	sp,fp
    27e4:	dfc00117 	ldw	ra,4(sp)
    27e8:	df000017 	ldw	fp,0(sp)
    27ec:	dec00204 	addi	sp,sp,8
    27f0:	f800283a 	ret

000027f4 <servo_tilt>:
 * the camera. These values should cause a full range of travel from top to
 * bottom.
 * @param row the y tracking position
 * @return -1 if invalid input, else 0
 */
int servo_tilt(int row){
    27f4:	defffc04 	addi	sp,sp,-16
    27f8:	dfc00315 	stw	ra,12(sp)
    27fc:	df000215 	stw	fp,8(sp)
    2800:	df000204 	addi	fp,sp,8
    2804:	e13ffe15 	stw	r4,-8(fp)
	if(row < TILT_MIN || row > TILT_MAX){
    2808:	e0bffe17 	ldw	r2,-8(fp)
    280c:	1004803a 	cmplt	r2,r2,zero
    2810:	1000031e 	bne	r2,zero,2820 <servo_tilt+0x2c>
    2814:	e0bffe17 	ldw	r2,-8(fp)
    2818:	10802410 	cmplti	r2,r2,144
    281c:	1000031e 	bne	r2,zero,282c <servo_tilt+0x38>
		return -1;
    2820:	00bfffc4 	movi	r2,-1
    2824:	e0bfff15 	stw	r2,-4(fp)
    2828:	00000806 	br	284c <servo_tilt+0x58>
	}
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(row));
    282c:	e0bffe17 	ldw	r2,-8(fp)
    2830:	11001164 	muli	r4,r2,69
    2834:	01400284 	movi	r5,10
    2838:	0002ac40 	call	2ac4 <__divsi3>
    283c:	1080fdc4 	addi	r2,r2,1015
    2840:	1009883a 	mov	r4,r2
    2844:	00020bc0 	call	20bc <PWM_writeOCRB>
	return 0;
    2848:	e03fff15 	stw	zero,-4(fp)
    284c:	e0bfff17 	ldw	r2,-4(fp)
}
    2850:	e037883a 	mov	sp,fp
    2854:	dfc00117 	ldw	ra,4(sp)
    2858:	df000017 	ldw	fp,0(sp)
    285c:	dec00204 	addi	sp,sp,8
    2860:	f800283a 	ret

00002864 <getServoX>:

/**
 * Gets the current pan location
 * @return absolute position of servo.
 */
int getServoX(){
    2864:	defffe04 	addi	sp,sp,-8
    2868:	dfc00115 	stw	ra,4(sp)
    286c:	df000015 	stw	fp,0(sp)
    2870:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_PAN_POS(PWM_readOCRA());
    2874:	000210c0 	call	210c <PWM_readOCRA>
    2878:	108002a4 	muli	r2,r2,10
    287c:	113b0504 	addi	r4,r2,-5100
    2880:	01401ac4 	movi	r5,107
    2884:	0002ac40 	call	2ac4 <__divsi3>
}
    2888:	e037883a 	mov	sp,fp
    288c:	dfc00117 	ldw	ra,4(sp)
    2890:	df000017 	ldw	fp,0(sp)
    2894:	dec00204 	addi	sp,sp,8
    2898:	f800283a 	ret

0000289c <setServoX>:

/**
 * Sets the relative pan location. Will stop at limit of range.
 * @param xpos position to add to current position.
 */
void setServoX(int xpos){
    289c:	defffb04 	addi	sp,sp,-20
    28a0:	dfc00415 	stw	ra,16(sp)
    28a4:	df000315 	stw	fp,12(sp)
    28a8:	df000304 	addi	fp,sp,12
    28ac:	e13ffe15 	stw	r4,-8(fp)
	int pos = OCR_VALUE_TO_PAN_POS(PWM_readOCRA()) + xpos;
    28b0:	000210c0 	call	210c <PWM_readOCRA>
    28b4:	108002a4 	muli	r2,r2,10
    28b8:	113b0504 	addi	r4,r2,-5100
    28bc:	01401ac4 	movi	r5,107
    28c0:	0002ac40 	call	2ac4 <__divsi3>
    28c4:	1007883a 	mov	r3,r2
    28c8:	e0bffe17 	ldw	r2,-8(fp)
    28cc:	1885883a 	add	r2,r3,r2
    28d0:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > PAN_MAX) ? (PAN_MAX) : ((pos < PAN_MIN) ? PAN_MIN : pos);
    28d4:	e0bffd17 	ldw	r2,-12(fp)
    28d8:	10802c08 	cmpgei	r2,r2,176
    28dc:	1000071e 	bne	r2,zero,28fc <setServoX+0x60>
    28e0:	e0bffd17 	ldw	r2,-12(fp)
    28e4:	e0bfff15 	stw	r2,-4(fp)
    28e8:	e0ffff17 	ldw	r3,-4(fp)
    28ec:	1804403a 	cmpge	r2,r3,zero
    28f0:	1000041e 	bne	r2,zero,2904 <setServoX+0x68>
    28f4:	e03fff15 	stw	zero,-4(fp)
    28f8:	00000206 	br	2904 <setServoX+0x68>
    28fc:	00802bc4 	movi	r2,175
    2900:	e0bfff15 	stw	r2,-4(fp)
    2904:	e0ffff17 	ldw	r3,-4(fp)
    2908:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(pos));
    290c:	e0bffd17 	ldw	r2,-12(fp)
    2910:	11001ae4 	muli	r4,r2,107
    2914:	01400284 	movi	r5,10
    2918:	0002ac40 	call	2ac4 <__divsi3>
    291c:	10807f84 	addi	r2,r2,510
    2920:	1009883a 	mov	r4,r2
    2924:	000206c0 	call	206c <PWM_writeOCRA>
}
    2928:	e037883a 	mov	sp,fp
    292c:	dfc00117 	ldw	ra,4(sp)
    2930:	df000017 	ldw	fp,0(sp)
    2934:	dec00204 	addi	sp,sp,8
    2938:	f800283a 	ret

0000293c <getServoY>:

/**
 * Gets the current tilt location.
 * @return absolute position of servo.
 */
int getServoY(){
    293c:	defffe04 	addi	sp,sp,-8
    2940:	dfc00115 	stw	ra,4(sp)
    2944:	df000015 	stw	fp,0(sp)
    2948:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_TILT_POS(PWM_readOCRB());
    294c:	00021380 	call	2138 <PWM_readOCRB>
    2950:	108002a4 	muli	r2,r2,10
    2954:	11361684 	addi	r4,r2,-10150
    2958:	01401144 	movi	r5,69
    295c:	0002ac40 	call	2ac4 <__divsi3>
}
    2960:	e037883a 	mov	sp,fp
    2964:	dfc00117 	ldw	ra,4(sp)
    2968:	df000017 	ldw	fp,0(sp)
    296c:	dec00204 	addi	sp,sp,8
    2970:	f800283a 	ret

00002974 <setServoY>:

/**
 * Sets the relative tilt location. Will stop at limit of range.
 * @param ypos position to add to current position.
 */
void setServoY(int ypos){
    2974:	defffb04 	addi	sp,sp,-20
    2978:	dfc00415 	stw	ra,16(sp)
    297c:	df000315 	stw	fp,12(sp)
    2980:	df000304 	addi	fp,sp,12
    2984:	e13ffe15 	stw	r4,-8(fp)
	int pos = OCR_VALUE_TO_TILT_POS(PWM_readOCRB()) + ypos;
    2988:	00021380 	call	2138 <PWM_readOCRB>
    298c:	108002a4 	muli	r2,r2,10
    2990:	11361684 	addi	r4,r2,-10150
    2994:	01401144 	movi	r5,69
    2998:	0002ac40 	call	2ac4 <__divsi3>
    299c:	1007883a 	mov	r3,r2
    29a0:	e0bffe17 	ldw	r2,-8(fp)
    29a4:	1885883a 	add	r2,r3,r2
    29a8:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > TILT_MAX) ? (TILT_MAX) : ((pos < TILT_MIN) ? TILT_MIN : pos);
    29ac:	e0bffd17 	ldw	r2,-12(fp)
    29b0:	10802408 	cmpgei	r2,r2,144
    29b4:	1000071e 	bne	r2,zero,29d4 <setServoY+0x60>
    29b8:	e0bffd17 	ldw	r2,-12(fp)
    29bc:	e0bfff15 	stw	r2,-4(fp)
    29c0:	e0ffff17 	ldw	r3,-4(fp)
    29c4:	1804403a 	cmpge	r2,r3,zero
    29c8:	1000041e 	bne	r2,zero,29dc <setServoY+0x68>
    29cc:	e03fff15 	stw	zero,-4(fp)
    29d0:	00000206 	br	29dc <setServoY+0x68>
    29d4:	008023c4 	movi	r2,143
    29d8:	e0bfff15 	stw	r2,-4(fp)
    29dc:	e0ffff17 	ldw	r3,-4(fp)
    29e0:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(pos));
    29e4:	e0bffd17 	ldw	r2,-12(fp)
    29e8:	11001164 	muli	r4,r2,69
    29ec:	01400284 	movi	r5,10
    29f0:	0002ac40 	call	2ac4 <__divsi3>
    29f4:	1080fdc4 	addi	r2,r2,1015
    29f8:	1009883a 	mov	r4,r2
    29fc:	00020bc0 	call	20bc <PWM_writeOCRB>
}
    2a00:	e037883a 	mov	sp,fp
    2a04:	dfc00117 	ldw	ra,4(sp)
    2a08:	df000017 	ldw	fp,0(sp)
    2a0c:	dec00204 	addi	sp,sp,8
    2a10:	f800283a 	ret

00002a14 <main>:
/**
 * main will run the serial command line input to get information from user
 * and enact the commands.
 * @return does not actually return (infinite loop)
 */
int main(){
    2a14:	defffe04 	addi	sp,sp,-8
    2a18:	dfc00115 	stw	ra,4(sp)
    2a1c:	df000015 	stw	fp,0(sp)
    2a20:	d839883a 	mov	fp,sp
	//initialization
	lcd_init();
    2a24:	0001d1c0 	call	1d1c <lcd_init>
	servo_init();
    2a28:	00027500 	call	2750 <servo_init>
	cam_init();
    2a2c:	00002000 	call	200 <cam_init>
	cmd_init();
    2a30:	00007680 	call	768 <cmd_init>

	//run input loop from serial input to command the controller
	lcd_printString("Starting...");
    2a34:	01000074 	movhi	r4,1
    2a38:	21135604 	addi	r4,r4,19800
    2a3c:	0001da00 	call	1da0 <lcd_printString>
	while(1){
		cmd_getCommand();
    2a40:	00007900 	call	790 <cmd_getCommand>
	}
    2a44:	003ffe06 	br	2a40 <main+0x2c>

00002a48 <udivmodsi4>:
    2a48:	29001b2e 	bgeu	r5,r4,2ab8 <udivmodsi4+0x70>
    2a4c:	28001a16 	blt	r5,zero,2ab8 <udivmodsi4+0x70>
    2a50:	00800044 	movi	r2,1
    2a54:	0007883a 	mov	r3,zero
    2a58:	01c007c4 	movi	r7,31
    2a5c:	00000306 	br	2a6c <udivmodsi4+0x24>
    2a60:	19c01326 	beq	r3,r7,2ab0 <udivmodsi4+0x68>
    2a64:	18c00044 	addi	r3,r3,1
    2a68:	28000416 	blt	r5,zero,2a7c <udivmodsi4+0x34>
    2a6c:	294b883a 	add	r5,r5,r5
    2a70:	1085883a 	add	r2,r2,r2
    2a74:	293ffa36 	bltu	r5,r4,2a60 <udivmodsi4+0x18>
    2a78:	10000d26 	beq	r2,zero,2ab0 <udivmodsi4+0x68>
    2a7c:	0007883a 	mov	r3,zero
    2a80:	21400236 	bltu	r4,r5,2a8c <udivmodsi4+0x44>
    2a84:	2149c83a 	sub	r4,r4,r5
    2a88:	1886b03a 	or	r3,r3,r2
    2a8c:	1004d07a 	srli	r2,r2,1
    2a90:	280ad07a 	srli	r5,r5,1
    2a94:	103ffa1e 	bne	r2,zero,2a80 <udivmodsi4+0x38>
    2a98:	30000226 	beq	r6,zero,2aa4 <udivmodsi4+0x5c>
    2a9c:	2005883a 	mov	r2,r4
    2aa0:	f800283a 	ret
    2aa4:	1809883a 	mov	r4,r3
    2aa8:	2005883a 	mov	r2,r4
    2aac:	f800283a 	ret
    2ab0:	0007883a 	mov	r3,zero
    2ab4:	003ff806 	br	2a98 <udivmodsi4+0x50>
    2ab8:	00800044 	movi	r2,1
    2abc:	0007883a 	mov	r3,zero
    2ac0:	003fef06 	br	2a80 <udivmodsi4+0x38>

00002ac4 <__divsi3>:
    2ac4:	defffe04 	addi	sp,sp,-8
    2ac8:	dc000015 	stw	r16,0(sp)
    2acc:	dfc00115 	stw	ra,4(sp)
    2ad0:	0021883a 	mov	r16,zero
    2ad4:	20000c16 	blt	r4,zero,2b08 <__divsi3+0x44>
    2ad8:	000d883a 	mov	r6,zero
    2adc:	28000e16 	blt	r5,zero,2b18 <__divsi3+0x54>
    2ae0:	0002a480 	call	2a48 <udivmodsi4>
    2ae4:	1007883a 	mov	r3,r2
    2ae8:	8005003a 	cmpeq	r2,r16,zero
    2aec:	1000011e 	bne	r2,zero,2af4 <__divsi3+0x30>
    2af0:	00c7c83a 	sub	r3,zero,r3
    2af4:	1805883a 	mov	r2,r3
    2af8:	dfc00117 	ldw	ra,4(sp)
    2afc:	dc000017 	ldw	r16,0(sp)
    2b00:	dec00204 	addi	sp,sp,8
    2b04:	f800283a 	ret
    2b08:	0109c83a 	sub	r4,zero,r4
    2b0c:	04000044 	movi	r16,1
    2b10:	000d883a 	mov	r6,zero
    2b14:	283ff20e 	bge	r5,zero,2ae0 <__divsi3+0x1c>
    2b18:	014bc83a 	sub	r5,zero,r5
    2b1c:	8021003a 	cmpeq	r16,r16,zero
    2b20:	003fef06 	br	2ae0 <__divsi3+0x1c>

00002b24 <__modsi3>:
    2b24:	deffff04 	addi	sp,sp,-4
    2b28:	dfc00015 	stw	ra,0(sp)
    2b2c:	01800044 	movi	r6,1
    2b30:	2807883a 	mov	r3,r5
    2b34:	20000416 	blt	r4,zero,2b48 <__modsi3+0x24>
    2b38:	28000c16 	blt	r5,zero,2b6c <__modsi3+0x48>
    2b3c:	dfc00017 	ldw	ra,0(sp)
    2b40:	dec00104 	addi	sp,sp,4
    2b44:	0002a481 	jmpi	2a48 <udivmodsi4>
    2b48:	0109c83a 	sub	r4,zero,r4
    2b4c:	28000b16 	blt	r5,zero,2b7c <__modsi3+0x58>
    2b50:	180b883a 	mov	r5,r3
    2b54:	01800044 	movi	r6,1
    2b58:	0002a480 	call	2a48 <udivmodsi4>
    2b5c:	0085c83a 	sub	r2,zero,r2
    2b60:	dfc00017 	ldw	ra,0(sp)
    2b64:	dec00104 	addi	sp,sp,4
    2b68:	f800283a 	ret
    2b6c:	014bc83a 	sub	r5,zero,r5
    2b70:	dfc00017 	ldw	ra,0(sp)
    2b74:	dec00104 	addi	sp,sp,4
    2b78:	0002a481 	jmpi	2a48 <udivmodsi4>
    2b7c:	0147c83a 	sub	r3,zero,r5
    2b80:	003ff306 	br	2b50 <__modsi3+0x2c>

00002b84 <__udivsi3>:
    2b84:	000d883a 	mov	r6,zero
    2b88:	0002a481 	jmpi	2a48 <udivmodsi4>

00002b8c <__umodsi3>:
    2b8c:	01800044 	movi	r6,1
    2b90:	0002a481 	jmpi	2a48 <udivmodsi4>

00002b94 <_fgets_r>:
    2b94:	defff804 	addi	sp,sp,-32
    2b98:	00800044 	movi	r2,1
    2b9c:	dd800615 	stw	r22,24(sp)
    2ba0:	dd400515 	stw	r21,20(sp)
    2ba4:	dc400115 	stw	r17,4(sp)
    2ba8:	dc000015 	stw	r16,0(sp)
    2bac:	dfc00715 	stw	ra,28(sp)
    2bb0:	dd000415 	stw	r20,16(sp)
    2bb4:	dcc00315 	stw	r19,12(sp)
    2bb8:	dc800215 	stw	r18,8(sp)
    2bbc:	3021883a 	mov	r16,r6
    2bc0:	282d883a 	mov	r22,r5
    2bc4:	3823883a 	mov	r17,r7
    2bc8:	202b883a 	mov	r21,r4
    2bcc:	1180410e 	bge	r2,r6,2cd4 <_fgets_r+0x140>
    2bd0:	20000226 	beq	r4,zero,2bdc <_fgets_r+0x48>
    2bd4:	20800e17 	ldw	r2,56(r4)
    2bd8:	10002e26 	beq	r2,zero,2c94 <_fgets_r+0x100>
    2bdc:	853fffc4 	addi	r20,r16,-1
    2be0:	b027883a 	mov	r19,r22
    2be4:	88800117 	ldw	r2,4(r17)
    2be8:	a809883a 	mov	r4,r21
    2bec:	880b883a 	mov	r5,r17
    2bf0:	100d883a 	mov	r6,r2
    2bf4:	1000031e 	bne	r2,zero,2c04 <_fgets_r+0x70>
    2bf8:	0003bec0 	call	3bec <__srefill_r>
    2bfc:	1000341e 	bne	r2,zero,2cd0 <_fgets_r+0x13c>
    2c00:	89800117 	ldw	r6,4(r17)
    2c04:	01400284 	movi	r5,10
    2c08:	3021883a 	mov	r16,r6
    2c0c:	8c800017 	ldw	r18,0(r17)
    2c10:	a180012e 	bgeu	r20,r6,2c18 <_fgets_r+0x84>
    2c14:	a021883a 	mov	r16,r20
    2c18:	9009883a 	mov	r4,r18
    2c1c:	800d883a 	mov	r6,r16
    2c20:	00038800 	call	3880 <memchr>
    2c24:	1007883a 	mov	r3,r2
    2c28:	900b883a 	mov	r5,r18
    2c2c:	9809883a 	mov	r4,r19
    2c30:	800d883a 	mov	r6,r16
    2c34:	1000191e 	bne	r2,zero,2c9c <_fgets_r+0x108>
    2c38:	88800117 	ldw	r2,4(r17)
    2c3c:	88c00017 	ldw	r3,0(r17)
    2c40:	9c27883a 	add	r19,r19,r16
    2c44:	1405c83a 	sub	r2,r2,r16
    2c48:	1c07883a 	add	r3,r3,r16
    2c4c:	88c00015 	stw	r3,0(r17)
    2c50:	88800115 	stw	r2,4(r17)
    2c54:	00039640 	call	3964 <memcpy>
    2c58:	a407c83a 	sub	r3,r20,r16
    2c5c:	1829883a 	mov	r20,r3
    2c60:	183fe01e 	bne	r3,zero,2be4 <_fgets_r+0x50>
    2c64:	98000005 	stb	zero,0(r19)
    2c68:	b005883a 	mov	r2,r22
    2c6c:	dfc00717 	ldw	ra,28(sp)
    2c70:	dd800617 	ldw	r22,24(sp)
    2c74:	dd400517 	ldw	r21,20(sp)
    2c78:	dd000417 	ldw	r20,16(sp)
    2c7c:	dcc00317 	ldw	r19,12(sp)
    2c80:	dc800217 	ldw	r18,8(sp)
    2c84:	dc400117 	ldw	r17,4(sp)
    2c88:	dc000017 	ldw	r16,0(sp)
    2c8c:	dec00804 	addi	sp,sp,32
    2c90:	f800283a 	ret
    2c94:	0002d680 	call	2d68 <__sinit>
    2c98:	003fd006 	br	2bdc <_fgets_r+0x48>
    2c9c:	88800117 	ldw	r2,4(r17)
    2ca0:	18c00044 	addi	r3,r3,1
    2ca4:	1ca1c83a 	sub	r16,r3,r18
    2ca8:	1405c83a 	sub	r2,r2,r16
    2cac:	800d883a 	mov	r6,r16
    2cb0:	88c00015 	stw	r3,0(r17)
    2cb4:	88800115 	stw	r2,4(r17)
    2cb8:	900b883a 	mov	r5,r18
    2cbc:	9809883a 	mov	r4,r19
    2cc0:	00039640 	call	3964 <memcpy>
    2cc4:	9c21883a 	add	r16,r19,r16
    2cc8:	80000005 	stb	zero,0(r16)
    2ccc:	003fe606 	br	2c68 <_fgets_r+0xd4>
    2cd0:	9dbfe41e 	bne	r19,r22,2c64 <_fgets_r+0xd0>
    2cd4:	002d883a 	mov	r22,zero
    2cd8:	003fe306 	br	2c68 <_fgets_r+0xd4>

00002cdc <fgets>:
    2cdc:	00800074 	movhi	r2,1
    2ce0:	109b9704 	addi	r2,r2,28252
    2ce4:	2013883a 	mov	r9,r4
    2ce8:	11000017 	ldw	r4,0(r2)
    2cec:	2805883a 	mov	r2,r5
    2cf0:	300f883a 	mov	r7,r6
    2cf4:	480b883a 	mov	r5,r9
    2cf8:	100d883a 	mov	r6,r2
    2cfc:	0002b941 	jmpi	2b94 <_fgets_r>

00002d00 <std>:
    2d00:	00800034 	movhi	r2,0
    2d04:	10900904 	addi	r2,r2,16420
    2d08:	20800b15 	stw	r2,44(r4)
    2d0c:	00800034 	movhi	r2,0
    2d10:	10904404 	addi	r2,r2,16656
    2d14:	20800815 	stw	r2,32(r4)
    2d18:	00c00034 	movhi	r3,0
    2d1c:	18d02504 	addi	r3,r3,16532
    2d20:	00800034 	movhi	r2,0
    2d24:	10900b04 	addi	r2,r2,16428
    2d28:	2140030d 	sth	r5,12(r4)
    2d2c:	2180038d 	sth	r6,14(r4)
    2d30:	20c00915 	stw	r3,36(r4)
    2d34:	20800a15 	stw	r2,40(r4)
    2d38:	20000015 	stw	zero,0(r4)
    2d3c:	20000115 	stw	zero,4(r4)
    2d40:	20000215 	stw	zero,8(r4)
    2d44:	20000415 	stw	zero,16(r4)
    2d48:	20000515 	stw	zero,20(r4)
    2d4c:	20000615 	stw	zero,24(r4)
    2d50:	21000715 	stw	r4,28(r4)
    2d54:	f800283a 	ret

00002d58 <__sfp_lock_acquire>:
    2d58:	f800283a 	ret

00002d5c <__sfp_lock_release>:
    2d5c:	f800283a 	ret

00002d60 <__sinit_lock_acquire>:
    2d60:	f800283a 	ret

00002d64 <__sinit_lock_release>:
    2d64:	f800283a 	ret

00002d68 <__sinit>:
    2d68:	20800e17 	ldw	r2,56(r4)
    2d6c:	defffd04 	addi	sp,sp,-12
    2d70:	dc400115 	stw	r17,4(sp)
    2d74:	dc000015 	stw	r16,0(sp)
    2d78:	dfc00215 	stw	ra,8(sp)
    2d7c:	04400044 	movi	r17,1
    2d80:	01400104 	movi	r5,4
    2d84:	000d883a 	mov	r6,zero
    2d88:	2021883a 	mov	r16,r4
    2d8c:	2200bb04 	addi	r8,r4,748
    2d90:	200f883a 	mov	r7,r4
    2d94:	10000526 	beq	r2,zero,2dac <__sinit+0x44>
    2d98:	dfc00217 	ldw	ra,8(sp)
    2d9c:	dc400117 	ldw	r17,4(sp)
    2da0:	dc000017 	ldw	r16,0(sp)
    2da4:	dec00304 	addi	sp,sp,12
    2da8:	f800283a 	ret
    2dac:	21000117 	ldw	r4,4(r4)
    2db0:	00800034 	movhi	r2,0
    2db4:	108b9304 	addi	r2,r2,11852
    2db8:	00c000c4 	movi	r3,3
    2dbc:	80800f15 	stw	r2,60(r16)
    2dc0:	80c0b915 	stw	r3,740(r16)
    2dc4:	8200ba15 	stw	r8,744(r16)
    2dc8:	84400e15 	stw	r17,56(r16)
    2dcc:	8000b815 	stw	zero,736(r16)
    2dd0:	0002d000 	call	2d00 <std>
    2dd4:	81000217 	ldw	r4,8(r16)
    2dd8:	880d883a 	mov	r6,r17
    2ddc:	800f883a 	mov	r7,r16
    2de0:	01400284 	movi	r5,10
    2de4:	0002d000 	call	2d00 <std>
    2de8:	81000317 	ldw	r4,12(r16)
    2dec:	800f883a 	mov	r7,r16
    2df0:	01400484 	movi	r5,18
    2df4:	01800084 	movi	r6,2
    2df8:	dfc00217 	ldw	ra,8(sp)
    2dfc:	dc400117 	ldw	r17,4(sp)
    2e00:	dc000017 	ldw	r16,0(sp)
    2e04:	dec00304 	addi	sp,sp,12
    2e08:	0002d001 	jmpi	2d00 <std>

00002e0c <__fp_lock>:
    2e0c:	0005883a 	mov	r2,zero
    2e10:	f800283a 	ret

00002e14 <__fp_unlock>:
    2e14:	0005883a 	mov	r2,zero
    2e18:	f800283a 	ret

00002e1c <__fp_unlock_all>:
    2e1c:	00800074 	movhi	r2,1
    2e20:	109b9704 	addi	r2,r2,28252
    2e24:	11000017 	ldw	r4,0(r2)
    2e28:	01400034 	movhi	r5,0
    2e2c:	294b8504 	addi	r5,r5,11796
    2e30:	00030881 	jmpi	3088 <_fwalk>

00002e34 <__fp_lock_all>:
    2e34:	00800074 	movhi	r2,1
    2e38:	109b9704 	addi	r2,r2,28252
    2e3c:	11000017 	ldw	r4,0(r2)
    2e40:	01400034 	movhi	r5,0
    2e44:	294b8304 	addi	r5,r5,11788
    2e48:	00030881 	jmpi	3088 <_fwalk>

00002e4c <_cleanup_r>:
    2e4c:	01400074 	movhi	r5,1
    2e50:	29655904 	addi	r5,r5,-27292
    2e54:	00030881 	jmpi	3088 <_fwalk>

00002e58 <_cleanup>:
    2e58:	00800074 	movhi	r2,1
    2e5c:	109b9804 	addi	r2,r2,28256
    2e60:	11000017 	ldw	r4,0(r2)
    2e64:	0002e4c1 	jmpi	2e4c <_cleanup_r>

00002e68 <__sfmoreglue>:
    2e68:	defffc04 	addi	sp,sp,-16
    2e6c:	dc400115 	stw	r17,4(sp)
    2e70:	2c401724 	muli	r17,r5,92
    2e74:	dc800215 	stw	r18,8(sp)
    2e78:	2825883a 	mov	r18,r5
    2e7c:	89400304 	addi	r5,r17,12
    2e80:	dc000015 	stw	r16,0(sp)
    2e84:	dfc00315 	stw	ra,12(sp)
    2e88:	00031400 	call	3140 <_malloc_r>
    2e8c:	0021883a 	mov	r16,zero
    2e90:	880d883a 	mov	r6,r17
    2e94:	000b883a 	mov	r5,zero
    2e98:	10000626 	beq	r2,zero,2eb4 <__sfmoreglue+0x4c>
    2e9c:	11000304 	addi	r4,r2,12
    2ea0:	14800115 	stw	r18,4(r2)
    2ea4:	10000015 	stw	zero,0(r2)
    2ea8:	11000215 	stw	r4,8(r2)
    2eac:	1021883a 	mov	r16,r2
    2eb0:	0003a040 	call	3a04 <memset>
    2eb4:	8005883a 	mov	r2,r16
    2eb8:	dfc00317 	ldw	ra,12(sp)
    2ebc:	dc800217 	ldw	r18,8(sp)
    2ec0:	dc400117 	ldw	r17,4(sp)
    2ec4:	dc000017 	ldw	r16,0(sp)
    2ec8:	dec00404 	addi	sp,sp,16
    2ecc:	f800283a 	ret

00002ed0 <__sfp>:
    2ed0:	defffd04 	addi	sp,sp,-12
    2ed4:	00800074 	movhi	r2,1
    2ed8:	109b9804 	addi	r2,r2,28256
    2edc:	dc000015 	stw	r16,0(sp)
    2ee0:	14000017 	ldw	r16,0(r2)
    2ee4:	dc400115 	stw	r17,4(sp)
    2ee8:	dfc00215 	stw	ra,8(sp)
    2eec:	80800e17 	ldw	r2,56(r16)
    2ef0:	2023883a 	mov	r17,r4
    2ef4:	10002626 	beq	r2,zero,2f90 <__sfp+0xc0>
    2ef8:	8400b804 	addi	r16,r16,736
    2efc:	80800117 	ldw	r2,4(r16)
    2f00:	81000217 	ldw	r4,8(r16)
    2f04:	10ffffc4 	addi	r3,r2,-1
    2f08:	18000916 	blt	r3,zero,2f30 <__sfp+0x60>
    2f0c:	2080030f 	ldh	r2,12(r4)
    2f10:	10000b26 	beq	r2,zero,2f40 <__sfp+0x70>
    2f14:	017fffc4 	movi	r5,-1
    2f18:	00000206 	br	2f24 <__sfp+0x54>
    2f1c:	2080030f 	ldh	r2,12(r4)
    2f20:	10000726 	beq	r2,zero,2f40 <__sfp+0x70>
    2f24:	18ffffc4 	addi	r3,r3,-1
    2f28:	21001704 	addi	r4,r4,92
    2f2c:	197ffb1e 	bne	r3,r5,2f1c <__sfp+0x4c>
    2f30:	80800017 	ldw	r2,0(r16)
    2f34:	10001926 	beq	r2,zero,2f9c <__sfp+0xcc>
    2f38:	1021883a 	mov	r16,r2
    2f3c:	003fef06 	br	2efc <__sfp+0x2c>
    2f40:	00bfffc4 	movi	r2,-1
    2f44:	00c00044 	movi	r3,1
    2f48:	2080038d 	sth	r2,14(r4)
    2f4c:	20c0030d 	sth	r3,12(r4)
    2f50:	20000015 	stw	zero,0(r4)
    2f54:	20000215 	stw	zero,8(r4)
    2f58:	20000115 	stw	zero,4(r4)
    2f5c:	20000415 	stw	zero,16(r4)
    2f60:	20000515 	stw	zero,20(r4)
    2f64:	20000615 	stw	zero,24(r4)
    2f68:	20000c15 	stw	zero,48(r4)
    2f6c:	20000d15 	stw	zero,52(r4)
    2f70:	20001115 	stw	zero,68(r4)
    2f74:	20001215 	stw	zero,72(r4)
    2f78:	2005883a 	mov	r2,r4
    2f7c:	dfc00217 	ldw	ra,8(sp)
    2f80:	dc400117 	ldw	r17,4(sp)
    2f84:	dc000017 	ldw	r16,0(sp)
    2f88:	dec00304 	addi	sp,sp,12
    2f8c:	f800283a 	ret
    2f90:	8009883a 	mov	r4,r16
    2f94:	0002d680 	call	2d68 <__sinit>
    2f98:	003fd706 	br	2ef8 <__sfp+0x28>
    2f9c:	8809883a 	mov	r4,r17
    2fa0:	01400104 	movi	r5,4
    2fa4:	0002e680 	call	2e68 <__sfmoreglue>
    2fa8:	80800015 	stw	r2,0(r16)
    2fac:	103fe21e 	bne	r2,zero,2f38 <__sfp+0x68>
    2fb0:	00800304 	movi	r2,12
    2fb4:	0009883a 	mov	r4,zero
    2fb8:	88800015 	stw	r2,0(r17)
    2fbc:	003fee06 	br	2f78 <__sfp+0xa8>

00002fc0 <_fwalk_reent>:
    2fc0:	defff704 	addi	sp,sp,-36
    2fc4:	dcc00315 	stw	r19,12(sp)
    2fc8:	24c0b804 	addi	r19,r4,736
    2fcc:	dd800615 	stw	r22,24(sp)
    2fd0:	dd400515 	stw	r21,20(sp)
    2fd4:	dfc00815 	stw	ra,32(sp)
    2fd8:	ddc00715 	stw	r23,28(sp)
    2fdc:	dd000415 	stw	r20,16(sp)
    2fe0:	dc800215 	stw	r18,8(sp)
    2fe4:	dc400115 	stw	r17,4(sp)
    2fe8:	dc000015 	stw	r16,0(sp)
    2fec:	202b883a 	mov	r21,r4
    2ff0:	282d883a 	mov	r22,r5
    2ff4:	0002d580 	call	2d58 <__sfp_lock_acquire>
    2ff8:	98002126 	beq	r19,zero,3080 <_fwalk_reent+0xc0>
    2ffc:	002f883a 	mov	r23,zero
    3000:	9c800117 	ldw	r18,4(r19)
    3004:	9c000217 	ldw	r16,8(r19)
    3008:	90bfffc4 	addi	r2,r18,-1
    300c:	10000d16 	blt	r2,zero,3044 <_fwalk_reent+0x84>
    3010:	0023883a 	mov	r17,zero
    3014:	053fffc4 	movi	r20,-1
    3018:	8080030f 	ldh	r2,12(r16)
    301c:	8c400044 	addi	r17,r17,1
    3020:	10000626 	beq	r2,zero,303c <_fwalk_reent+0x7c>
    3024:	8080038f 	ldh	r2,14(r16)
    3028:	800b883a 	mov	r5,r16
    302c:	a809883a 	mov	r4,r21
    3030:	15000226 	beq	r2,r20,303c <_fwalk_reent+0x7c>
    3034:	b03ee83a 	callr	r22
    3038:	b8aeb03a 	or	r23,r23,r2
    303c:	84001704 	addi	r16,r16,92
    3040:	947ff51e 	bne	r18,r17,3018 <_fwalk_reent+0x58>
    3044:	9cc00017 	ldw	r19,0(r19)
    3048:	983fed1e 	bne	r19,zero,3000 <_fwalk_reent+0x40>
    304c:	0002d5c0 	call	2d5c <__sfp_lock_release>
    3050:	b805883a 	mov	r2,r23
    3054:	dfc00817 	ldw	ra,32(sp)
    3058:	ddc00717 	ldw	r23,28(sp)
    305c:	dd800617 	ldw	r22,24(sp)
    3060:	dd400517 	ldw	r21,20(sp)
    3064:	dd000417 	ldw	r20,16(sp)
    3068:	dcc00317 	ldw	r19,12(sp)
    306c:	dc800217 	ldw	r18,8(sp)
    3070:	dc400117 	ldw	r17,4(sp)
    3074:	dc000017 	ldw	r16,0(sp)
    3078:	dec00904 	addi	sp,sp,36
    307c:	f800283a 	ret
    3080:	002f883a 	mov	r23,zero
    3084:	003ff106 	br	304c <_fwalk_reent+0x8c>

00003088 <_fwalk>:
    3088:	defff804 	addi	sp,sp,-32
    308c:	dcc00315 	stw	r19,12(sp)
    3090:	24c0b804 	addi	r19,r4,736
    3094:	dd400515 	stw	r21,20(sp)
    3098:	dfc00715 	stw	ra,28(sp)
    309c:	dd800615 	stw	r22,24(sp)
    30a0:	dd000415 	stw	r20,16(sp)
    30a4:	dc800215 	stw	r18,8(sp)
    30a8:	dc400115 	stw	r17,4(sp)
    30ac:	dc000015 	stw	r16,0(sp)
    30b0:	282b883a 	mov	r21,r5
    30b4:	0002d580 	call	2d58 <__sfp_lock_acquire>
    30b8:	98001f26 	beq	r19,zero,3138 <_fwalk+0xb0>
    30bc:	002d883a 	mov	r22,zero
    30c0:	9c800117 	ldw	r18,4(r19)
    30c4:	9c000217 	ldw	r16,8(r19)
    30c8:	90bfffc4 	addi	r2,r18,-1
    30cc:	10000c16 	blt	r2,zero,3100 <_fwalk+0x78>
    30d0:	0023883a 	mov	r17,zero
    30d4:	053fffc4 	movi	r20,-1
    30d8:	8080030f 	ldh	r2,12(r16)
    30dc:	8c400044 	addi	r17,r17,1
    30e0:	10000526 	beq	r2,zero,30f8 <_fwalk+0x70>
    30e4:	8080038f 	ldh	r2,14(r16)
    30e8:	8009883a 	mov	r4,r16
    30ec:	15000226 	beq	r2,r20,30f8 <_fwalk+0x70>
    30f0:	a83ee83a 	callr	r21
    30f4:	b0acb03a 	or	r22,r22,r2
    30f8:	84001704 	addi	r16,r16,92
    30fc:	947ff61e 	bne	r18,r17,30d8 <_fwalk+0x50>
    3100:	9cc00017 	ldw	r19,0(r19)
    3104:	983fee1e 	bne	r19,zero,30c0 <_fwalk+0x38>
    3108:	0002d5c0 	call	2d5c <__sfp_lock_release>
    310c:	b005883a 	mov	r2,r22
    3110:	dfc00717 	ldw	ra,28(sp)
    3114:	dd800617 	ldw	r22,24(sp)
    3118:	dd400517 	ldw	r21,20(sp)
    311c:	dd000417 	ldw	r20,16(sp)
    3120:	dcc00317 	ldw	r19,12(sp)
    3124:	dc800217 	ldw	r18,8(sp)
    3128:	dc400117 	ldw	r17,4(sp)
    312c:	dc000017 	ldw	r16,0(sp)
    3130:	dec00804 	addi	sp,sp,32
    3134:	f800283a 	ret
    3138:	002d883a 	mov	r22,zero
    313c:	003ff206 	br	3108 <_fwalk+0x80>

00003140 <_malloc_r>:
    3140:	defff604 	addi	sp,sp,-40
    3144:	28c002c4 	addi	r3,r5,11
    3148:	00800584 	movi	r2,22
    314c:	dc800215 	stw	r18,8(sp)
    3150:	dfc00915 	stw	ra,36(sp)
    3154:	df000815 	stw	fp,32(sp)
    3158:	ddc00715 	stw	r23,28(sp)
    315c:	dd800615 	stw	r22,24(sp)
    3160:	dd400515 	stw	r21,20(sp)
    3164:	dd000415 	stw	r20,16(sp)
    3168:	dcc00315 	stw	r19,12(sp)
    316c:	dc400115 	stw	r17,4(sp)
    3170:	dc000015 	stw	r16,0(sp)
    3174:	2025883a 	mov	r18,r4
    3178:	10c01236 	bltu	r2,r3,31c4 <_malloc_r+0x84>
    317c:	04400404 	movi	r17,16
    3180:	8940142e 	bgeu	r17,r5,31d4 <_malloc_r+0x94>
    3184:	00800304 	movi	r2,12
    3188:	0007883a 	mov	r3,zero
    318c:	90800015 	stw	r2,0(r18)
    3190:	1805883a 	mov	r2,r3
    3194:	dfc00917 	ldw	ra,36(sp)
    3198:	df000817 	ldw	fp,32(sp)
    319c:	ddc00717 	ldw	r23,28(sp)
    31a0:	dd800617 	ldw	r22,24(sp)
    31a4:	dd400517 	ldw	r21,20(sp)
    31a8:	dd000417 	ldw	r20,16(sp)
    31ac:	dcc00317 	ldw	r19,12(sp)
    31b0:	dc800217 	ldw	r18,8(sp)
    31b4:	dc400117 	ldw	r17,4(sp)
    31b8:	dc000017 	ldw	r16,0(sp)
    31bc:	dec00a04 	addi	sp,sp,40
    31c0:	f800283a 	ret
    31c4:	00bffe04 	movi	r2,-8
    31c8:	18a2703a 	and	r17,r3,r2
    31cc:	883fed16 	blt	r17,zero,3184 <_malloc_r+0x44>
    31d0:	897fec36 	bltu	r17,r5,3184 <_malloc_r+0x44>
    31d4:	9009883a 	mov	r4,r18
    31d8:	00122bc0 	call	122bc <__malloc_lock>
    31dc:	00807dc4 	movi	r2,503
    31e0:	14402b2e 	bgeu	r2,r17,3290 <_malloc_r+0x150>
    31e4:	8806d27a 	srli	r3,r17,9
    31e8:	18003f1e 	bne	r3,zero,32e8 <_malloc_r+0x1a8>
    31ec:	880cd0fa 	srli	r6,r17,3
    31f0:	300490fa 	slli	r2,r6,3
    31f4:	02c00074 	movhi	r11,1
    31f8:	5ad60504 	addi	r11,r11,22548
    31fc:	12cb883a 	add	r5,r2,r11
    3200:	2c000317 	ldw	r16,12(r5)
    3204:	580f883a 	mov	r7,r11
    3208:	2c00041e 	bne	r5,r16,321c <_malloc_r+0xdc>
    320c:	00000a06 	br	3238 <_malloc_r+0xf8>
    3210:	1800860e 	bge	r3,zero,342c <_malloc_r+0x2ec>
    3214:	84000317 	ldw	r16,12(r16)
    3218:	2c000726 	beq	r5,r16,3238 <_malloc_r+0xf8>
    321c:	80800117 	ldw	r2,4(r16)
    3220:	00ffff04 	movi	r3,-4
    3224:	10c8703a 	and	r4,r2,r3
    3228:	2447c83a 	sub	r3,r4,r17
    322c:	008003c4 	movi	r2,15
    3230:	10fff70e 	bge	r2,r3,3210 <_malloc_r+0xd0>
    3234:	31bfffc4 	addi	r6,r6,-1
    3238:	32400044 	addi	r9,r6,1
    323c:	02800074 	movhi	r10,1
    3240:	52960704 	addi	r10,r10,22556
    3244:	54000217 	ldw	r16,8(r10)
    3248:	8280a026 	beq	r16,r10,34cc <_malloc_r+0x38c>
    324c:	80800117 	ldw	r2,4(r16)
    3250:	00ffff04 	movi	r3,-4
    3254:	10ca703a 	and	r5,r2,r3
    3258:	2c4dc83a 	sub	r6,r5,r17
    325c:	008003c4 	movi	r2,15
    3260:	11808316 	blt	r2,r6,3470 <_malloc_r+0x330>
    3264:	52800315 	stw	r10,12(r10)
    3268:	52800215 	stw	r10,8(r10)
    326c:	30002916 	blt	r6,zero,3314 <_malloc_r+0x1d4>
    3270:	8147883a 	add	r3,r16,r5
    3274:	18800117 	ldw	r2,4(r3)
    3278:	9009883a 	mov	r4,r18
    327c:	10800054 	ori	r2,r2,1
    3280:	18800115 	stw	r2,4(r3)
    3284:	00122dc0 	call	122dc <__malloc_unlock>
    3288:	80c00204 	addi	r3,r16,8
    328c:	003fc006 	br	3190 <_malloc_r+0x50>
    3290:	02c00074 	movhi	r11,1
    3294:	5ad60504 	addi	r11,r11,22548
    3298:	8ac5883a 	add	r2,r17,r11
    329c:	14000317 	ldw	r16,12(r2)
    32a0:	580f883a 	mov	r7,r11
    32a4:	8806d0fa 	srli	r3,r17,3
    32a8:	14006c26 	beq	r2,r16,345c <_malloc_r+0x31c>
    32ac:	80c00117 	ldw	r3,4(r16)
    32b0:	00bfff04 	movi	r2,-4
    32b4:	81800317 	ldw	r6,12(r16)
    32b8:	1886703a 	and	r3,r3,r2
    32bc:	80c7883a 	add	r3,r16,r3
    32c0:	18800117 	ldw	r2,4(r3)
    32c4:	81400217 	ldw	r5,8(r16)
    32c8:	9009883a 	mov	r4,r18
    32cc:	10800054 	ori	r2,r2,1
    32d0:	18800115 	stw	r2,4(r3)
    32d4:	31400215 	stw	r5,8(r6)
    32d8:	29800315 	stw	r6,12(r5)
    32dc:	00122dc0 	call	122dc <__malloc_unlock>
    32e0:	80c00204 	addi	r3,r16,8
    32e4:	003faa06 	br	3190 <_malloc_r+0x50>
    32e8:	00800104 	movi	r2,4
    32ec:	10c0052e 	bgeu	r2,r3,3304 <_malloc_r+0x1c4>
    32f0:	00800504 	movi	r2,20
    32f4:	10c07836 	bltu	r2,r3,34d8 <_malloc_r+0x398>
    32f8:	198016c4 	addi	r6,r3,91
    32fc:	300490fa 	slli	r2,r6,3
    3300:	003fbc06 	br	31f4 <_malloc_r+0xb4>
    3304:	8804d1ba 	srli	r2,r17,6
    3308:	11800e04 	addi	r6,r2,56
    330c:	300490fa 	slli	r2,r6,3
    3310:	003fb806 	br	31f4 <_malloc_r+0xb4>
    3314:	00807fc4 	movi	r2,511
    3318:	1140bb36 	bltu	r2,r5,3608 <_malloc_r+0x4c8>
    331c:	2806d0fa 	srli	r3,r5,3
    3320:	573ffe04 	addi	fp,r10,-8
    3324:	00800044 	movi	r2,1
    3328:	180890fa 	slli	r4,r3,3
    332c:	1807d0ba 	srai	r3,r3,2
    3330:	e1c00117 	ldw	r7,4(fp)
    3334:	5909883a 	add	r4,r11,r4
    3338:	21400217 	ldw	r5,8(r4)
    333c:	10c4983a 	sll	r2,r2,r3
    3340:	81000315 	stw	r4,12(r16)
    3344:	81400215 	stw	r5,8(r16)
    3348:	388eb03a 	or	r7,r7,r2
    334c:	2c000315 	stw	r16,12(r5)
    3350:	24000215 	stw	r16,8(r4)
    3354:	e1c00115 	stw	r7,4(fp)
    3358:	4807883a 	mov	r3,r9
    335c:	4800cd16 	blt	r9,zero,3694 <_malloc_r+0x554>
    3360:	1807d0ba 	srai	r3,r3,2
    3364:	00800044 	movi	r2,1
    3368:	10c8983a 	sll	r4,r2,r3
    336c:	39004436 	bltu	r7,r4,3480 <_malloc_r+0x340>
    3370:	21c4703a 	and	r2,r4,r7
    3374:	10000a1e 	bne	r2,zero,33a0 <_malloc_r+0x260>
    3378:	2109883a 	add	r4,r4,r4
    337c:	00bfff04 	movi	r2,-4
    3380:	4884703a 	and	r2,r9,r2
    3384:	3906703a 	and	r3,r7,r4
    3388:	12400104 	addi	r9,r2,4
    338c:	1800041e 	bne	r3,zero,33a0 <_malloc_r+0x260>
    3390:	2109883a 	add	r4,r4,r4
    3394:	3904703a 	and	r2,r7,r4
    3398:	4a400104 	addi	r9,r9,4
    339c:	103ffc26 	beq	r2,zero,3390 <_malloc_r+0x250>
    33a0:	480490fa 	slli	r2,r9,3
    33a4:	4819883a 	mov	r12,r9
    33a8:	023fff04 	movi	r8,-4
    33ac:	589b883a 	add	r13,r11,r2
    33b0:	6807883a 	mov	r3,r13
    33b4:	014003c4 	movi	r5,15
    33b8:	1c000317 	ldw	r16,12(r3)
    33bc:	1c00041e 	bne	r3,r16,33d0 <_malloc_r+0x290>
    33c0:	0000a706 	br	3660 <_malloc_r+0x520>
    33c4:	3000ab0e 	bge	r6,zero,3674 <_malloc_r+0x534>
    33c8:	84000317 	ldw	r16,12(r16)
    33cc:	1c00a426 	beq	r3,r16,3660 <_malloc_r+0x520>
    33d0:	80800117 	ldw	r2,4(r16)
    33d4:	1204703a 	and	r2,r2,r8
    33d8:	144dc83a 	sub	r6,r2,r17
    33dc:	29bff90e 	bge	r5,r6,33c4 <_malloc_r+0x284>
    33e0:	81000317 	ldw	r4,12(r16)
    33e4:	80c00217 	ldw	r3,8(r16)
    33e8:	89400054 	ori	r5,r17,1
    33ec:	8445883a 	add	r2,r16,r17
    33f0:	20c00215 	stw	r3,8(r4)
    33f4:	19000315 	stw	r4,12(r3)
    33f8:	81400115 	stw	r5,4(r16)
    33fc:	1187883a 	add	r3,r2,r6
    3400:	31000054 	ori	r4,r6,1
    3404:	50800315 	stw	r2,12(r10)
    3408:	50800215 	stw	r2,8(r10)
    340c:	19800015 	stw	r6,0(r3)
    3410:	11000115 	stw	r4,4(r2)
    3414:	12800215 	stw	r10,8(r2)
    3418:	12800315 	stw	r10,12(r2)
    341c:	9009883a 	mov	r4,r18
    3420:	00122dc0 	call	122dc <__malloc_unlock>
    3424:	80c00204 	addi	r3,r16,8
    3428:	003f5906 	br	3190 <_malloc_r+0x50>
    342c:	8109883a 	add	r4,r16,r4
    3430:	20800117 	ldw	r2,4(r4)
    3434:	80c00217 	ldw	r3,8(r16)
    3438:	81400317 	ldw	r5,12(r16)
    343c:	10800054 	ori	r2,r2,1
    3440:	20800115 	stw	r2,4(r4)
    3444:	28c00215 	stw	r3,8(r5)
    3448:	19400315 	stw	r5,12(r3)
    344c:	9009883a 	mov	r4,r18
    3450:	00122dc0 	call	122dc <__malloc_unlock>
    3454:	80c00204 	addi	r3,r16,8
    3458:	003f4d06 	br	3190 <_malloc_r+0x50>
    345c:	80800204 	addi	r2,r16,8
    3460:	14000317 	ldw	r16,12(r2)
    3464:	143f911e 	bne	r2,r16,32ac <_malloc_r+0x16c>
    3468:	1a400084 	addi	r9,r3,2
    346c:	003f7306 	br	323c <_malloc_r+0xfc>
    3470:	88c00054 	ori	r3,r17,1
    3474:	8445883a 	add	r2,r16,r17
    3478:	80c00115 	stw	r3,4(r16)
    347c:	003fdf06 	br	33fc <_malloc_r+0x2bc>
    3480:	e4000217 	ldw	r16,8(fp)
    3484:	00bfff04 	movi	r2,-4
    3488:	80c00117 	ldw	r3,4(r16)
    348c:	802d883a 	mov	r22,r16
    3490:	18aa703a 	and	r21,r3,r2
    3494:	ac401636 	bltu	r21,r17,34f0 <_malloc_r+0x3b0>
    3498:	ac49c83a 	sub	r4,r21,r17
    349c:	008003c4 	movi	r2,15
    34a0:	1100130e 	bge	r2,r4,34f0 <_malloc_r+0x3b0>
    34a4:	88800054 	ori	r2,r17,1
    34a8:	8447883a 	add	r3,r16,r17
    34ac:	80800115 	stw	r2,4(r16)
    34b0:	20800054 	ori	r2,r4,1
    34b4:	18800115 	stw	r2,4(r3)
    34b8:	e0c00215 	stw	r3,8(fp)
    34bc:	9009883a 	mov	r4,r18
    34c0:	00122dc0 	call	122dc <__malloc_unlock>
    34c4:	80c00204 	addi	r3,r16,8
    34c8:	003f3106 	br	3190 <_malloc_r+0x50>
    34cc:	39c00117 	ldw	r7,4(r7)
    34d0:	573ffe04 	addi	fp,r10,-8
    34d4:	003fa006 	br	3358 <_malloc_r+0x218>
    34d8:	00801504 	movi	r2,84
    34dc:	10c06736 	bltu	r2,r3,367c <_malloc_r+0x53c>
    34e0:	8804d33a 	srli	r2,r17,12
    34e4:	11801b84 	addi	r6,r2,110
    34e8:	300490fa 	slli	r2,r6,3
    34ec:	003f4106 	br	31f4 <_malloc_r+0xb4>
    34f0:	d0a6d817 	ldw	r2,-25760(gp)
    34f4:	d0e00417 	ldw	r3,-32752(gp)
    34f8:	053fffc4 	movi	r20,-1
    34fc:	10800404 	addi	r2,r2,16
    3500:	88a7883a 	add	r19,r17,r2
    3504:	1d000326 	beq	r3,r20,3514 <_malloc_r+0x3d4>
    3508:	98c3ffc4 	addi	r3,r19,4095
    350c:	00bc0004 	movi	r2,-4096
    3510:	18a6703a 	and	r19,r3,r2
    3514:	9009883a 	mov	r4,r18
    3518:	980b883a 	mov	r5,r19
    351c:	0003dcc0 	call	3dcc <_sbrk_r>
    3520:	1009883a 	mov	r4,r2
    3524:	15000426 	beq	r2,r20,3538 <_malloc_r+0x3f8>
    3528:	854b883a 	add	r5,r16,r21
    352c:	1029883a 	mov	r20,r2
    3530:	11405a2e 	bgeu	r2,r5,369c <_malloc_r+0x55c>
    3534:	87000c26 	beq	r16,fp,3568 <_malloc_r+0x428>
    3538:	e4000217 	ldw	r16,8(fp)
    353c:	80c00117 	ldw	r3,4(r16)
    3540:	00bfff04 	movi	r2,-4
    3544:	1884703a 	and	r2,r3,r2
    3548:	14400336 	bltu	r2,r17,3558 <_malloc_r+0x418>
    354c:	1449c83a 	sub	r4,r2,r17
    3550:	008003c4 	movi	r2,15
    3554:	113fd316 	blt	r2,r4,34a4 <_malloc_r+0x364>
    3558:	9009883a 	mov	r4,r18
    355c:	00122dc0 	call	122dc <__malloc_unlock>
    3560:	0007883a 	mov	r3,zero
    3564:	003f0a06 	br	3190 <_malloc_r+0x50>
    3568:	05c000b4 	movhi	r23,2
    356c:	bde2ac04 	addi	r23,r23,-30032
    3570:	b8800017 	ldw	r2,0(r23)
    3574:	988d883a 	add	r6,r19,r2
    3578:	b9800015 	stw	r6,0(r23)
    357c:	d0e00417 	ldw	r3,-32752(gp)
    3580:	00bfffc4 	movi	r2,-1
    3584:	18808e26 	beq	r3,r2,37c0 <_malloc_r+0x680>
    3588:	2145c83a 	sub	r2,r4,r5
    358c:	3085883a 	add	r2,r6,r2
    3590:	b8800015 	stw	r2,0(r23)
    3594:	20c001cc 	andi	r3,r4,7
    3598:	18005f1e 	bne	r3,zero,3718 <_malloc_r+0x5d8>
    359c:	000b883a 	mov	r5,zero
    35a0:	a4c5883a 	add	r2,r20,r19
    35a4:	1083ffcc 	andi	r2,r2,4095
    35a8:	00c40004 	movi	r3,4096
    35ac:	1887c83a 	sub	r3,r3,r2
    35b0:	28e7883a 	add	r19,r5,r3
    35b4:	9009883a 	mov	r4,r18
    35b8:	980b883a 	mov	r5,r19
    35bc:	0003dcc0 	call	3dcc <_sbrk_r>
    35c0:	1007883a 	mov	r3,r2
    35c4:	00bfffc4 	movi	r2,-1
    35c8:	18807a26 	beq	r3,r2,37b4 <_malloc_r+0x674>
    35cc:	1d05c83a 	sub	r2,r3,r20
    35d0:	9885883a 	add	r2,r19,r2
    35d4:	10c00054 	ori	r3,r2,1
    35d8:	b8800017 	ldw	r2,0(r23)
    35dc:	a021883a 	mov	r16,r20
    35e0:	a0c00115 	stw	r3,4(r20)
    35e4:	9885883a 	add	r2,r19,r2
    35e8:	b8800015 	stw	r2,0(r23)
    35ec:	e5000215 	stw	r20,8(fp)
    35f0:	b7003626 	beq	r22,fp,36cc <_malloc_r+0x58c>
    35f4:	018003c4 	movi	r6,15
    35f8:	35404b36 	bltu	r6,r21,3728 <_malloc_r+0x5e8>
    35fc:	00800044 	movi	r2,1
    3600:	a0800115 	stw	r2,4(r20)
    3604:	003fcd06 	br	353c <_malloc_r+0x3fc>
    3608:	2808d27a 	srli	r4,r5,9
    360c:	2000371e 	bne	r4,zero,36ec <_malloc_r+0x5ac>
    3610:	2808d0fa 	srli	r4,r5,3
    3614:	200690fa 	slli	r3,r4,3
    3618:	1ad1883a 	add	r8,r3,r11
    361c:	41800217 	ldw	r6,8(r8)
    3620:	41805b26 	beq	r8,r6,3790 <_malloc_r+0x650>
    3624:	30800117 	ldw	r2,4(r6)
    3628:	00ffff04 	movi	r3,-4
    362c:	10c4703a 	and	r2,r2,r3
    3630:	2880022e 	bgeu	r5,r2,363c <_malloc_r+0x4fc>
    3634:	31800217 	ldw	r6,8(r6)
    3638:	41bffa1e 	bne	r8,r6,3624 <_malloc_r+0x4e4>
    363c:	32000317 	ldw	r8,12(r6)
    3640:	39c00117 	ldw	r7,4(r7)
    3644:	82000315 	stw	r8,12(r16)
    3648:	81800215 	stw	r6,8(r16)
    364c:	07000074 	movhi	fp,1
    3650:	e7160504 	addi	fp,fp,22548
    3654:	34000315 	stw	r16,12(r6)
    3658:	44000215 	stw	r16,8(r8)
    365c:	003f3e06 	br	3358 <_malloc_r+0x218>
    3660:	63000044 	addi	r12,r12,1
    3664:	608000cc 	andi	r2,r12,3
    3668:	10005d26 	beq	r2,zero,37e0 <_malloc_r+0x6a0>
    366c:	18c00204 	addi	r3,r3,8
    3670:	003f5106 	br	33b8 <_malloc_r+0x278>
    3674:	8089883a 	add	r4,r16,r2
    3678:	003f6d06 	br	3430 <_malloc_r+0x2f0>
    367c:	00805504 	movi	r2,340
    3680:	10c02036 	bltu	r2,r3,3704 <_malloc_r+0x5c4>
    3684:	8804d3fa 	srli	r2,r17,15
    3688:	11801dc4 	addi	r6,r2,119
    368c:	300490fa 	slli	r2,r6,3
    3690:	003ed806 	br	31f4 <_malloc_r+0xb4>
    3694:	48c000c4 	addi	r3,r9,3
    3698:	003f3106 	br	3360 <_malloc_r+0x220>
    369c:	05c000b4 	movhi	r23,2
    36a0:	bde2ac04 	addi	r23,r23,-30032
    36a4:	b8800017 	ldw	r2,0(r23)
    36a8:	988d883a 	add	r6,r19,r2
    36ac:	b9800015 	stw	r6,0(r23)
    36b0:	293fb21e 	bne	r5,r4,357c <_malloc_r+0x43c>
    36b4:	2083ffcc 	andi	r2,r4,4095
    36b8:	103fb01e 	bne	r2,zero,357c <_malloc_r+0x43c>
    36bc:	e4000217 	ldw	r16,8(fp)
    36c0:	9d45883a 	add	r2,r19,r21
    36c4:	10800054 	ori	r2,r2,1
    36c8:	80800115 	stw	r2,4(r16)
    36cc:	b8c00017 	ldw	r3,0(r23)
    36d0:	d0a6d917 	ldw	r2,-25756(gp)
    36d4:	10c0012e 	bgeu	r2,r3,36dc <_malloc_r+0x59c>
    36d8:	d0e6d915 	stw	r3,-25756(gp)
    36dc:	d0a6da17 	ldw	r2,-25752(gp)
    36e0:	10ff962e 	bgeu	r2,r3,353c <_malloc_r+0x3fc>
    36e4:	d0e6da15 	stw	r3,-25752(gp)
    36e8:	003f9406 	br	353c <_malloc_r+0x3fc>
    36ec:	00800104 	movi	r2,4
    36f0:	11001e36 	bltu	r2,r4,376c <_malloc_r+0x62c>
    36f4:	2804d1ba 	srli	r2,r5,6
    36f8:	11000e04 	addi	r4,r2,56
    36fc:	200690fa 	slli	r3,r4,3
    3700:	003fc506 	br	3618 <_malloc_r+0x4d8>
    3704:	00815504 	movi	r2,1364
    3708:	10c01d2e 	bgeu	r2,r3,3780 <_malloc_r+0x640>
    370c:	01801f84 	movi	r6,126
    3710:	0080fc04 	movi	r2,1008
    3714:	003eb706 	br	31f4 <_malloc_r+0xb4>
    3718:	00800204 	movi	r2,8
    371c:	10cbc83a 	sub	r5,r2,r3
    3720:	2169883a 	add	r20,r4,r5
    3724:	003f9e06 	br	35a0 <_malloc_r+0x460>
    3728:	00bffe04 	movi	r2,-8
    372c:	a93ffd04 	addi	r4,r21,-12
    3730:	2088703a 	and	r4,r4,r2
    3734:	b10b883a 	add	r5,r22,r4
    3738:	00c00144 	movi	r3,5
    373c:	28c00215 	stw	r3,8(r5)
    3740:	28c00115 	stw	r3,4(r5)
    3744:	b0800117 	ldw	r2,4(r22)
    3748:	1080004c 	andi	r2,r2,1
    374c:	2084b03a 	or	r2,r4,r2
    3750:	b0800115 	stw	r2,4(r22)
    3754:	313fdd2e 	bgeu	r6,r4,36cc <_malloc_r+0x58c>
    3758:	b1400204 	addi	r5,r22,8
    375c:	9009883a 	mov	r4,r18
    3760:	0009b100 	call	9b10 <_free_r>
    3764:	e4000217 	ldw	r16,8(fp)
    3768:	003fd806 	br	36cc <_malloc_r+0x58c>
    376c:	00800504 	movi	r2,20
    3770:	11001536 	bltu	r2,r4,37c8 <_malloc_r+0x688>
    3774:	210016c4 	addi	r4,r4,91
    3778:	200690fa 	slli	r3,r4,3
    377c:	003fa606 	br	3618 <_malloc_r+0x4d8>
    3780:	8804d4ba 	srli	r2,r17,18
    3784:	11801f04 	addi	r6,r2,124
    3788:	300490fa 	slli	r2,r6,3
    378c:	003e9906 	br	31f4 <_malloc_r+0xb4>
    3790:	2009d0ba 	srai	r4,r4,2
    3794:	01400074 	movhi	r5,1
    3798:	29560504 	addi	r5,r5,22548
    379c:	00c00044 	movi	r3,1
    37a0:	28800117 	ldw	r2,4(r5)
    37a4:	1906983a 	sll	r3,r3,r4
    37a8:	10c4b03a 	or	r2,r2,r3
    37ac:	28800115 	stw	r2,4(r5)
    37b0:	003fa306 	br	3640 <_malloc_r+0x500>
    37b4:	0027883a 	mov	r19,zero
    37b8:	00c00044 	movi	r3,1
    37bc:	003f8606 	br	35d8 <_malloc_r+0x498>
    37c0:	d1200415 	stw	r4,-32752(gp)
    37c4:	003f7306 	br	3594 <_malloc_r+0x454>
    37c8:	00801504 	movi	r2,84
    37cc:	11001936 	bltu	r2,r4,3834 <_malloc_r+0x6f4>
    37d0:	2804d33a 	srli	r2,r5,12
    37d4:	11001b84 	addi	r4,r2,110
    37d8:	200690fa 	slli	r3,r4,3
    37dc:	003f8e06 	br	3618 <_malloc_r+0x4d8>
    37e0:	480b883a 	mov	r5,r9
    37e4:	6807883a 	mov	r3,r13
    37e8:	288000cc 	andi	r2,r5,3
    37ec:	18fffe04 	addi	r3,r3,-8
    37f0:	297fffc4 	addi	r5,r5,-1
    37f4:	10001526 	beq	r2,zero,384c <_malloc_r+0x70c>
    37f8:	18800217 	ldw	r2,8(r3)
    37fc:	10fffa26 	beq	r2,r3,37e8 <_malloc_r+0x6a8>
    3800:	2109883a 	add	r4,r4,r4
    3804:	393f1e36 	bltu	r7,r4,3480 <_malloc_r+0x340>
    3808:	203f1d26 	beq	r4,zero,3480 <_malloc_r+0x340>
    380c:	21c4703a 	and	r2,r4,r7
    3810:	10000226 	beq	r2,zero,381c <_malloc_r+0x6dc>
    3814:	6013883a 	mov	r9,r12
    3818:	003ee106 	br	33a0 <_malloc_r+0x260>
    381c:	2109883a 	add	r4,r4,r4
    3820:	3904703a 	and	r2,r7,r4
    3824:	63000104 	addi	r12,r12,4
    3828:	103ffc26 	beq	r2,zero,381c <_malloc_r+0x6dc>
    382c:	6013883a 	mov	r9,r12
    3830:	003edb06 	br	33a0 <_malloc_r+0x260>
    3834:	00805504 	movi	r2,340
    3838:	11000836 	bltu	r2,r4,385c <_malloc_r+0x71c>
    383c:	2804d3fa 	srli	r2,r5,15
    3840:	11001dc4 	addi	r4,r2,119
    3844:	200690fa 	slli	r3,r4,3
    3848:	003f7306 	br	3618 <_malloc_r+0x4d8>
    384c:	0104303a 	nor	r2,zero,r4
    3850:	388e703a 	and	r7,r7,r2
    3854:	e1c00115 	stw	r7,4(fp)
    3858:	003fe906 	br	3800 <_malloc_r+0x6c0>
    385c:	00815504 	movi	r2,1364
    3860:	1100032e 	bgeu	r2,r4,3870 <_malloc_r+0x730>
    3864:	01001f84 	movi	r4,126
    3868:	00c0fc04 	movi	r3,1008
    386c:	003f6a06 	br	3618 <_malloc_r+0x4d8>
    3870:	2804d4ba 	srli	r2,r5,18
    3874:	11001f04 	addi	r4,r2,124
    3878:	200690fa 	slli	r3,r4,3
    387c:	003f6606 	br	3618 <_malloc_r+0x4d8>

00003880 <memchr>:
    3880:	008000c4 	movi	r2,3
    3884:	29403fcc 	andi	r5,r5,255
    3888:	2007883a 	mov	r3,r4
    388c:	1180022e 	bgeu	r2,r6,3898 <memchr+0x18>
    3890:	2084703a 	and	r2,r4,r2
    3894:	10000b26 	beq	r2,zero,38c4 <memchr+0x44>
    3898:	313fffc4 	addi	r4,r6,-1
    389c:	3000051e 	bne	r6,zero,38b4 <memchr+0x34>
    38a0:	00002c06 	br	3954 <memchr+0xd4>
    38a4:	213fffc4 	addi	r4,r4,-1
    38a8:	00bfffc4 	movi	r2,-1
    38ac:	18c00044 	addi	r3,r3,1
    38b0:	20802826 	beq	r4,r2,3954 <memchr+0xd4>
    38b4:	18800003 	ldbu	r2,0(r3)
    38b8:	28bffa1e 	bne	r5,r2,38a4 <memchr+0x24>
    38bc:	1805883a 	mov	r2,r3
    38c0:	f800283a 	ret
    38c4:	0011883a 	mov	r8,zero
    38c8:	0007883a 	mov	r3,zero
    38cc:	01c00104 	movi	r7,4
    38d0:	4004923a 	slli	r2,r8,8
    38d4:	18c00044 	addi	r3,r3,1
    38d8:	1151883a 	add	r8,r2,r5
    38dc:	19fffc1e 	bne	r3,r7,38d0 <memchr+0x50>
    38e0:	02bfbff4 	movhi	r10,65279
    38e4:	52bfbfc4 	addi	r10,r10,-257
    38e8:	02602074 	movhi	r9,32897
    38ec:	4a602004 	addi	r9,r9,-32640
    38f0:	02c000c4 	movi	r11,3
    38f4:	20800017 	ldw	r2,0(r4)
    38f8:	31bfff04 	addi	r6,r6,-4
    38fc:	200f883a 	mov	r7,r4
    3900:	1204f03a 	xor	r2,r2,r8
    3904:	1287883a 	add	r3,r2,r10
    3908:	1a46703a 	and	r3,r3,r9
    390c:	0084303a 	nor	r2,zero,r2
    3910:	10c4703a 	and	r2,r2,r3
    3914:	10000b26 	beq	r2,zero,3944 <memchr+0xc4>
    3918:	20800003 	ldbu	r2,0(r4)
    391c:	28800f26 	beq	r5,r2,395c <memchr+0xdc>
    3920:	20800043 	ldbu	r2,1(r4)
    3924:	21c00044 	addi	r7,r4,1
    3928:	28800c26 	beq	r5,r2,395c <memchr+0xdc>
    392c:	20800083 	ldbu	r2,2(r4)
    3930:	21c00084 	addi	r7,r4,2
    3934:	28800926 	beq	r5,r2,395c <memchr+0xdc>
    3938:	208000c3 	ldbu	r2,3(r4)
    393c:	21c000c4 	addi	r7,r4,3
    3940:	28800626 	beq	r5,r2,395c <memchr+0xdc>
    3944:	21000104 	addi	r4,r4,4
    3948:	59bfea36 	bltu	r11,r6,38f4 <memchr+0x74>
    394c:	2007883a 	mov	r3,r4
    3950:	003fd106 	br	3898 <memchr+0x18>
    3954:	0005883a 	mov	r2,zero
    3958:	f800283a 	ret
    395c:	3805883a 	mov	r2,r7
    3960:	f800283a 	ret

00003964 <memcpy>:
    3964:	01c003c4 	movi	r7,15
    3968:	2007883a 	mov	r3,r4
    396c:	3980032e 	bgeu	r7,r6,397c <memcpy+0x18>
    3970:	2904b03a 	or	r2,r5,r4
    3974:	108000cc 	andi	r2,r2,3
    3978:	10000926 	beq	r2,zero,39a0 <memcpy+0x3c>
    397c:	30000626 	beq	r6,zero,3998 <memcpy+0x34>
    3980:	30cd883a 	add	r6,r6,r3
    3984:	28800003 	ldbu	r2,0(r5)
    3988:	29400044 	addi	r5,r5,1
    398c:	18800005 	stb	r2,0(r3)
    3990:	18c00044 	addi	r3,r3,1
    3994:	30fffb1e 	bne	r6,r3,3984 <memcpy+0x20>
    3998:	2005883a 	mov	r2,r4
    399c:	f800283a 	ret
    39a0:	3811883a 	mov	r8,r7
    39a4:	200f883a 	mov	r7,r4
    39a8:	28c00017 	ldw	r3,0(r5)
    39ac:	31bffc04 	addi	r6,r6,-16
    39b0:	38c00015 	stw	r3,0(r7)
    39b4:	28800117 	ldw	r2,4(r5)
    39b8:	38800115 	stw	r2,4(r7)
    39bc:	28c00217 	ldw	r3,8(r5)
    39c0:	38c00215 	stw	r3,8(r7)
    39c4:	28800317 	ldw	r2,12(r5)
    39c8:	29400404 	addi	r5,r5,16
    39cc:	38800315 	stw	r2,12(r7)
    39d0:	39c00404 	addi	r7,r7,16
    39d4:	41bff436 	bltu	r8,r6,39a8 <memcpy+0x44>
    39d8:	008000c4 	movi	r2,3
    39dc:	1180072e 	bgeu	r2,r6,39fc <memcpy+0x98>
    39e0:	1007883a 	mov	r3,r2
    39e4:	28800017 	ldw	r2,0(r5)
    39e8:	31bfff04 	addi	r6,r6,-4
    39ec:	29400104 	addi	r5,r5,4
    39f0:	38800015 	stw	r2,0(r7)
    39f4:	39c00104 	addi	r7,r7,4
    39f8:	19bffa36 	bltu	r3,r6,39e4 <memcpy+0x80>
    39fc:	3807883a 	mov	r3,r7
    3a00:	003fde06 	br	397c <memcpy+0x18>

00003a04 <memset>:
    3a04:	008000c4 	movi	r2,3
    3a08:	29403fcc 	andi	r5,r5,255
    3a0c:	2007883a 	mov	r3,r4
    3a10:	1180022e 	bgeu	r2,r6,3a1c <memset+0x18>
    3a14:	2084703a 	and	r2,r4,r2
    3a18:	10000826 	beq	r2,zero,3a3c <memset+0x38>
    3a1c:	30000526 	beq	r6,zero,3a34 <memset+0x30>
    3a20:	2805883a 	mov	r2,r5
    3a24:	30cd883a 	add	r6,r6,r3
    3a28:	18800005 	stb	r2,0(r3)
    3a2c:	18c00044 	addi	r3,r3,1
    3a30:	19bffd1e 	bne	r3,r6,3a28 <memset+0x24>
    3a34:	2005883a 	mov	r2,r4
    3a38:	f800283a 	ret
    3a3c:	2804923a 	slli	r2,r5,8
    3a40:	020003c4 	movi	r8,15
    3a44:	200f883a 	mov	r7,r4
    3a48:	2884b03a 	or	r2,r5,r2
    3a4c:	1006943a 	slli	r3,r2,16
    3a50:	10c6b03a 	or	r3,r2,r3
    3a54:	41800a2e 	bgeu	r8,r6,3a80 <memset+0x7c>
    3a58:	4005883a 	mov	r2,r8
    3a5c:	31bffc04 	addi	r6,r6,-16
    3a60:	38c00015 	stw	r3,0(r7)
    3a64:	38c00115 	stw	r3,4(r7)
    3a68:	38c00215 	stw	r3,8(r7)
    3a6c:	38c00315 	stw	r3,12(r7)
    3a70:	39c00404 	addi	r7,r7,16
    3a74:	11bff936 	bltu	r2,r6,3a5c <memset+0x58>
    3a78:	008000c4 	movi	r2,3
    3a7c:	1180052e 	bgeu	r2,r6,3a94 <memset+0x90>
    3a80:	31bfff04 	addi	r6,r6,-4
    3a84:	008000c4 	movi	r2,3
    3a88:	38c00015 	stw	r3,0(r7)
    3a8c:	39c00104 	addi	r7,r7,4
    3a90:	11bffb36 	bltu	r2,r6,3a80 <memset+0x7c>
    3a94:	3807883a 	mov	r3,r7
    3a98:	003fe006 	br	3a1c <memset+0x18>

00003a9c <printf>:
    3a9c:	defffb04 	addi	sp,sp,-20
    3aa0:	dfc00115 	stw	ra,4(sp)
    3aa4:	d9400215 	stw	r5,8(sp)
    3aa8:	d9800315 	stw	r6,12(sp)
    3aac:	d9c00415 	stw	r7,16(sp)
    3ab0:	00800074 	movhi	r2,1
    3ab4:	109b9704 	addi	r2,r2,28252
    3ab8:	10c00017 	ldw	r3,0(r2)
    3abc:	200b883a 	mov	r5,r4
    3ac0:	d8800204 	addi	r2,sp,8
    3ac4:	19000217 	ldw	r4,8(r3)
    3ac8:	100d883a 	mov	r6,r2
    3acc:	d8800015 	stw	r2,0(sp)
    3ad0:	00062c00 	call	62c0 <__vfprintf_internal>
    3ad4:	dfc00117 	ldw	ra,4(sp)
    3ad8:	dec00504 	addi	sp,sp,20
    3adc:	f800283a 	ret

00003ae0 <_printf_r>:
    3ae0:	defffc04 	addi	sp,sp,-16
    3ae4:	dfc00115 	stw	ra,4(sp)
    3ae8:	d9800215 	stw	r6,8(sp)
    3aec:	d9c00315 	stw	r7,12(sp)
    3af0:	280d883a 	mov	r6,r5
    3af4:	21400217 	ldw	r5,8(r4)
    3af8:	d8c00204 	addi	r3,sp,8
    3afc:	180f883a 	mov	r7,r3
    3b00:	d8c00015 	stw	r3,0(sp)
    3b04:	00044140 	call	4414 <___vfprintf_internal_r>
    3b08:	dfc00117 	ldw	ra,4(sp)
    3b0c:	dec00404 	addi	sp,sp,16
    3b10:	f800283a 	ret

00003b14 <putchar>:
    3b14:	00800074 	movhi	r2,1
    3b18:	109b9704 	addi	r2,r2,28252
    3b1c:	11800017 	ldw	r6,0(r2)
    3b20:	200b883a 	mov	r5,r4
    3b24:	3009883a 	mov	r4,r6
    3b28:	31800217 	ldw	r6,8(r6)
    3b2c:	000b8941 	jmpi	b894 <_putc_r>

00003b30 <_putchar_r>:
    3b30:	21800217 	ldw	r6,8(r4)
    3b34:	000b8941 	jmpi	b894 <_putc_r>

00003b38 <_puts_r>:
    3b38:	defff604 	addi	sp,sp,-40
    3b3c:	dc400715 	stw	r17,28(sp)
    3b40:	2023883a 	mov	r17,r4
    3b44:	2809883a 	mov	r4,r5
    3b48:	dfc00915 	stw	ra,36(sp)
    3b4c:	dcc00815 	stw	r19,32(sp)
    3b50:	2827883a 	mov	r19,r5
    3b54:	00043480 	call	4348 <strlen>
    3b58:	89400217 	ldw	r5,8(r17)
    3b5c:	00c00074 	movhi	r3,1
    3b60:	18d3fb04 	addi	r3,r3,20460
    3b64:	01c00044 	movi	r7,1
    3b68:	12000044 	addi	r8,r2,1
    3b6c:	d8c00515 	stw	r3,20(sp)
    3b70:	d9c00615 	stw	r7,24(sp)
    3b74:	d8c00304 	addi	r3,sp,12
    3b78:	01c00084 	movi	r7,2
    3b7c:	8809883a 	mov	r4,r17
    3b80:	d80d883a 	mov	r6,sp
    3b84:	d8c00015 	stw	r3,0(sp)
    3b88:	dcc00315 	stw	r19,12(sp)
    3b8c:	da000215 	stw	r8,8(sp)
    3b90:	d9c00115 	stw	r7,4(sp)
    3b94:	d8800415 	stw	r2,16(sp)
    3b98:	0009e240 	call	9e24 <__sfvwrite_r>
    3b9c:	00ffffc4 	movi	r3,-1
    3ba0:	10000626 	beq	r2,zero,3bbc <_puts_r+0x84>
    3ba4:	1805883a 	mov	r2,r3
    3ba8:	dfc00917 	ldw	ra,36(sp)
    3bac:	dcc00817 	ldw	r19,32(sp)
    3bb0:	dc400717 	ldw	r17,28(sp)
    3bb4:	dec00a04 	addi	sp,sp,40
    3bb8:	f800283a 	ret
    3bbc:	00c00284 	movi	r3,10
    3bc0:	1805883a 	mov	r2,r3
    3bc4:	dfc00917 	ldw	ra,36(sp)
    3bc8:	dcc00817 	ldw	r19,32(sp)
    3bcc:	dc400717 	ldw	r17,28(sp)
    3bd0:	dec00a04 	addi	sp,sp,40
    3bd4:	f800283a 	ret

00003bd8 <puts>:
    3bd8:	00800074 	movhi	r2,1
    3bdc:	109b9704 	addi	r2,r2,28252
    3be0:	200b883a 	mov	r5,r4
    3be4:	11000017 	ldw	r4,0(r2)
    3be8:	0003b381 	jmpi	3b38 <_puts_r>

00003bec <__srefill_r>:
    3bec:	defffd04 	addi	sp,sp,-12
    3bf0:	dc400115 	stw	r17,4(sp)
    3bf4:	dc000015 	stw	r16,0(sp)
    3bf8:	dfc00215 	stw	ra,8(sp)
    3bfc:	2023883a 	mov	r17,r4
    3c00:	2821883a 	mov	r16,r5
    3c04:	20000226 	beq	r4,zero,3c10 <__srefill_r+0x24>
    3c08:	20800e17 	ldw	r2,56(r4)
    3c0c:	10004126 	beq	r2,zero,3d14 <__srefill_r+0x128>
    3c10:	80c0030b 	ldhu	r3,12(r16)
    3c14:	80000115 	stw	zero,4(r16)
    3c18:	1880080c 	andi	r2,r3,32
    3c1c:	1000361e 	bne	r2,zero,3cf8 <__srefill_r+0x10c>
    3c20:	1880010c 	andi	r2,r3,4
    3c24:	1000211e 	bne	r2,zero,3cac <__srefill_r+0xc0>
    3c28:	1880040c 	andi	r2,r3,16
    3c2c:	10005026 	beq	r2,zero,3d70 <__srefill_r+0x184>
    3c30:	1880020c 	andi	r2,r3,8
    3c34:	1000541e 	bne	r2,zero,3d88 <__srefill_r+0x19c>
    3c38:	8080030b 	ldhu	r2,12(r16)
    3c3c:	10800114 	ori	r2,r2,4
    3c40:	8080030d 	sth	r2,12(r16)
    3c44:	80800417 	ldw	r2,16(r16)
    3c48:	10004526 	beq	r2,zero,3d60 <__srefill_r+0x174>
    3c4c:	8080030b 	ldhu	r2,12(r16)
    3c50:	108000cc 	andi	r2,r2,3
    3c54:	1000361e 	bne	r2,zero,3d30 <__srefill_r+0x144>
    3c58:	81800417 	ldw	r6,16(r16)
    3c5c:	80c00817 	ldw	r3,32(r16)
    3c60:	81400717 	ldw	r5,28(r16)
    3c64:	81c00517 	ldw	r7,20(r16)
    3c68:	8809883a 	mov	r4,r17
    3c6c:	81800015 	stw	r6,0(r16)
    3c70:	183ee83a 	callr	r3
    3c74:	80c0030b 	ldhu	r3,12(r16)
    3c78:	1009883a 	mov	r4,r2
    3c7c:	80800115 	stw	r2,4(r16)
    3c80:	00b7ffc4 	movi	r2,-8193
    3c84:	1884703a 	and	r2,r3,r2
    3c88:	8080030d 	sth	r2,12(r16)
    3c8c:	0100230e 	bge	zero,r4,3d1c <__srefill_r+0x130>
    3c90:	0009883a 	mov	r4,zero
    3c94:	2005883a 	mov	r2,r4
    3c98:	dfc00217 	ldw	ra,8(sp)
    3c9c:	dc400117 	ldw	r17,4(sp)
    3ca0:	dc000017 	ldw	r16,0(sp)
    3ca4:	dec00304 	addi	sp,sp,12
    3ca8:	f800283a 	ret
    3cac:	81400c17 	ldw	r5,48(r16)
    3cb0:	283fe426 	beq	r5,zero,3c44 <__srefill_r+0x58>
    3cb4:	80801004 	addi	r2,r16,64
    3cb8:	28800226 	beq	r5,r2,3cc4 <__srefill_r+0xd8>
    3cbc:	8809883a 	mov	r4,r17
    3cc0:	0009b100 	call	9b10 <_free_r>
    3cc4:	80800f17 	ldw	r2,60(r16)
    3cc8:	80000c15 	stw	zero,48(r16)
    3ccc:	80800115 	stw	r2,4(r16)
    3cd0:	103fdc26 	beq	r2,zero,3c44 <__srefill_r+0x58>
    3cd4:	80800e17 	ldw	r2,56(r16)
    3cd8:	0009883a 	mov	r4,zero
    3cdc:	80800015 	stw	r2,0(r16)
    3ce0:	2005883a 	mov	r2,r4
    3ce4:	dfc00217 	ldw	ra,8(sp)
    3ce8:	dc400117 	ldw	r17,4(sp)
    3cec:	dc000017 	ldw	r16,0(sp)
    3cf0:	dec00304 	addi	sp,sp,12
    3cf4:	f800283a 	ret
    3cf8:	013fffc4 	movi	r4,-1
    3cfc:	2005883a 	mov	r2,r4
    3d00:	dfc00217 	ldw	ra,8(sp)
    3d04:	dc400117 	ldw	r17,4(sp)
    3d08:	dc000017 	ldw	r16,0(sp)
    3d0c:	dec00304 	addi	sp,sp,12
    3d10:	f800283a 	ret
    3d14:	0002d680 	call	2d68 <__sinit>
    3d18:	003fbd06 	br	3c10 <__srefill_r+0x24>
    3d1c:	20000b1e 	bne	r4,zero,3d4c <__srefill_r+0x160>
    3d20:	10800814 	ori	r2,r2,32
    3d24:	013fffc4 	movi	r4,-1
    3d28:	8080030d 	sth	r2,12(r16)
    3d2c:	003fd906 	br	3c94 <__srefill_r+0xa8>
    3d30:	00800074 	movhi	r2,1
    3d34:	109b9804 	addi	r2,r2,28256
    3d38:	11000017 	ldw	r4,0(r2)
    3d3c:	01400034 	movhi	r5,0
    3d40:	294f6c04 	addi	r5,r5,15792
    3d44:	00030880 	call	3088 <_fwalk>
    3d48:	003fc306 	br	3c58 <__srefill_r+0x6c>
    3d4c:	10801014 	ori	r2,r2,64
    3d50:	013fffc4 	movi	r4,-1
    3d54:	8080030d 	sth	r2,12(r16)
    3d58:	80000115 	stw	zero,4(r16)
    3d5c:	003fcd06 	br	3c94 <__srefill_r+0xa8>
    3d60:	8809883a 	mov	r4,r17
    3d64:	800b883a 	mov	r5,r16
    3d68:	000a4280 	call	a428 <__smakebuf_r>
    3d6c:	003fb706 	br	3c4c <__srefill_r+0x60>
    3d70:	18c01014 	ori	r3,r3,64
    3d74:	00800244 	movi	r2,9
    3d78:	013fffc4 	movi	r4,-1
    3d7c:	88800015 	stw	r2,0(r17)
    3d80:	80c0030d 	sth	r3,12(r16)
    3d84:	003fc306 	br	3c94 <__srefill_r+0xa8>
    3d88:	8809883a 	mov	r4,r17
    3d8c:	800b883a 	mov	r5,r16
    3d90:	00095780 	call	9578 <_fflush_r>
    3d94:	103fd81e 	bne	r2,zero,3cf8 <__srefill_r+0x10c>
    3d98:	8080030b 	ldhu	r2,12(r16)
    3d9c:	80000215 	stw	zero,8(r16)
    3da0:	80000615 	stw	zero,24(r16)
    3da4:	10bffdcc 	andi	r2,r2,65527
    3da8:	8080030d 	sth	r2,12(r16)
    3dac:	003fa206 	br	3c38 <__srefill_r+0x4c>

00003db0 <lflush>:
    3db0:	20c0030b 	ldhu	r3,12(r4)
    3db4:	01400244 	movi	r5,9
    3db8:	0005883a 	mov	r2,zero
    3dbc:	18c0024c 	andi	r3,r3,9
    3dc0:	19400126 	beq	r3,r5,3dc8 <lflush+0x18>
    3dc4:	f800283a 	ret
    3dc8:	00097741 	jmpi	9774 <fflush>

00003dcc <_sbrk_r>:
    3dcc:	defffd04 	addi	sp,sp,-12
    3dd0:	dc000015 	stw	r16,0(sp)
    3dd4:	040000b4 	movhi	r16,2
    3dd8:	84227104 	addi	r16,r16,-30268
    3ddc:	dc400115 	stw	r17,4(sp)
    3de0:	80000015 	stw	zero,0(r16)
    3de4:	2023883a 	mov	r17,r4
    3de8:	2809883a 	mov	r4,r5
    3dec:	dfc00215 	stw	ra,8(sp)
    3df0:	00124dc0 	call	124dc <sbrk>
    3df4:	1007883a 	mov	r3,r2
    3df8:	00bfffc4 	movi	r2,-1
    3dfc:	18800626 	beq	r3,r2,3e18 <_sbrk_r+0x4c>
    3e00:	1805883a 	mov	r2,r3
    3e04:	dfc00217 	ldw	ra,8(sp)
    3e08:	dc400117 	ldw	r17,4(sp)
    3e0c:	dc000017 	ldw	r16,0(sp)
    3e10:	dec00304 	addi	sp,sp,12
    3e14:	f800283a 	ret
    3e18:	80800017 	ldw	r2,0(r16)
    3e1c:	103ff826 	beq	r2,zero,3e00 <_sbrk_r+0x34>
    3e20:	88800015 	stw	r2,0(r17)
    3e24:	1805883a 	mov	r2,r3
    3e28:	dfc00217 	ldw	ra,8(sp)
    3e2c:	dc400117 	ldw	r17,4(sp)
    3e30:	dc000017 	ldw	r16,0(sp)
    3e34:	dec00304 	addi	sp,sp,12
    3e38:	f800283a 	ret

00003e3c <sprintf>:
    3e3c:	deffe504 	addi	sp,sp,-108
    3e40:	2013883a 	mov	r9,r4
    3e44:	dfc01815 	stw	ra,96(sp)
    3e48:	d9801915 	stw	r6,100(sp)
    3e4c:	d9c01a15 	stw	r7,104(sp)
    3e50:	d8801904 	addi	r2,sp,100
    3e54:	d8800015 	stw	r2,0(sp)
    3e58:	00800074 	movhi	r2,1
    3e5c:	109b9704 	addi	r2,r2,28252
    3e60:	11000017 	ldw	r4,0(r2)
    3e64:	d9c00017 	ldw	r7,0(sp)
    3e68:	00808204 	movi	r2,520
    3e6c:	00e00034 	movhi	r3,32768
    3e70:	18ffffc4 	addi	r3,r3,-1
    3e74:	280d883a 	mov	r6,r5
    3e78:	d880040d 	sth	r2,16(sp)
    3e7c:	d9400104 	addi	r5,sp,4
    3e80:	00bfffc4 	movi	r2,-1
    3e84:	d8c00615 	stw	r3,24(sp)
    3e88:	d8c00315 	stw	r3,12(sp)
    3e8c:	da400515 	stw	r9,20(sp)
    3e90:	d880048d 	sth	r2,18(sp)
    3e94:	da400115 	stw	r9,4(sp)
    3e98:	00044140 	call	4414 <___vfprintf_internal_r>
    3e9c:	d8c00117 	ldw	r3,4(sp)
    3ea0:	18000005 	stb	zero,0(r3)
    3ea4:	dfc01817 	ldw	ra,96(sp)
    3ea8:	dec01b04 	addi	sp,sp,108
    3eac:	f800283a 	ret

00003eb0 <_sprintf_r>:
    3eb0:	deffe604 	addi	sp,sp,-104
    3eb4:	2813883a 	mov	r9,r5
    3eb8:	dfc01815 	stw	ra,96(sp)
    3ebc:	d9c01915 	stw	r7,100(sp)
    3ec0:	d8801904 	addi	r2,sp,100
    3ec4:	d8800015 	stw	r2,0(sp)
    3ec8:	100f883a 	mov	r7,r2
    3ecc:	00808204 	movi	r2,520
    3ed0:	00e00034 	movhi	r3,32768
    3ed4:	18ffffc4 	addi	r3,r3,-1
    3ed8:	d880040d 	sth	r2,16(sp)
    3edc:	d9400104 	addi	r5,sp,4
    3ee0:	00bfffc4 	movi	r2,-1
    3ee4:	d8c00615 	stw	r3,24(sp)
    3ee8:	d8c00315 	stw	r3,12(sp)
    3eec:	da400515 	stw	r9,20(sp)
    3ef0:	d880048d 	sth	r2,18(sp)
    3ef4:	da400115 	stw	r9,4(sp)
    3ef8:	00044140 	call	4414 <___vfprintf_internal_r>
    3efc:	d8c00117 	ldw	r3,4(sp)
    3f00:	18000005 	stb	zero,0(r3)
    3f04:	dfc01817 	ldw	ra,96(sp)
    3f08:	dec01a04 	addi	sp,sp,104
    3f0c:	f800283a 	ret

00003f10 <eofread>:
    3f10:	0005883a 	mov	r2,zero
    3f14:	f800283a 	ret

00003f18 <_sscanf_r>:
    3f18:	deffe404 	addi	sp,sp,-112
    3f1c:	dcc01915 	stw	r19,100(sp)
    3f20:	2027883a 	mov	r19,r4
    3f24:	dfc01a15 	stw	ra,104(sp)
    3f28:	dc401815 	stw	r17,96(sp)
    3f2c:	d9c01b15 	stw	r7,108(sp)
    3f30:	00808104 	movi	r2,516
    3f34:	2809883a 	mov	r4,r5
    3f38:	3023883a 	mov	r17,r6
    3f3c:	d9400115 	stw	r5,4(sp)
    3f40:	d9400515 	stw	r5,20(sp)
    3f44:	d880040d 	sth	r2,16(sp)
    3f48:	00043480 	call	4348 <strlen>
    3f4c:	d8c01b04 	addi	r3,sp,108
    3f50:	d8c00015 	stw	r3,0(sp)
    3f54:	180f883a 	mov	r7,r3
    3f58:	023fffc4 	movi	r8,-1
    3f5c:	00c00034 	movhi	r3,0
    3f60:	18cfc404 	addi	r3,r3,16144
    3f64:	9809883a 	mov	r4,r19
    3f68:	880d883a 	mov	r6,r17
    3f6c:	d9400104 	addi	r5,sp,4
    3f70:	d8800615 	stw	r2,24(sp)
    3f74:	d8c00915 	stw	r3,36(sp)
    3f78:	da00048d 	sth	r8,18(sp)
    3f7c:	d8800215 	stw	r2,8(sp)
    3f80:	d8000d15 	stw	zero,52(sp)
    3f84:	d8001215 	stw	zero,72(sp)
    3f88:	00062e40 	call	62e4 <__svfscanf_r>
    3f8c:	dfc01a17 	ldw	ra,104(sp)
    3f90:	dcc01917 	ldw	r19,100(sp)
    3f94:	dc401817 	ldw	r17,96(sp)
    3f98:	dec01c04 	addi	sp,sp,112
    3f9c:	f800283a 	ret

00003fa0 <sscanf>:
    3fa0:	deffe404 	addi	sp,sp,-112
    3fa4:	dfc01915 	stw	ra,100(sp)
    3fa8:	dc401815 	stw	r17,96(sp)
    3fac:	d9801a15 	stw	r6,104(sp)
    3fb0:	d9c01b15 	stw	r7,108(sp)
    3fb4:	00808104 	movi	r2,516
    3fb8:	2823883a 	mov	r17,r5
    3fbc:	d9000515 	stw	r4,20(sp)
    3fc0:	d9000115 	stw	r4,4(sp)
    3fc4:	d880040d 	sth	r2,16(sp)
    3fc8:	00043480 	call	4348 <strlen>
    3fcc:	d8c01a04 	addi	r3,sp,104
    3fd0:	d8c00015 	stw	r3,0(sp)
    3fd4:	00c00074 	movhi	r3,1
    3fd8:	18db9704 	addi	r3,r3,28252
    3fdc:	19000017 	ldw	r4,0(r3)
    3fe0:	d9c00017 	ldw	r7,0(sp)
    3fe4:	00c00034 	movhi	r3,0
    3fe8:	18cfc404 	addi	r3,r3,16144
    3fec:	023fffc4 	movi	r8,-1
    3ff0:	880d883a 	mov	r6,r17
    3ff4:	d9400104 	addi	r5,sp,4
    3ff8:	d8800615 	stw	r2,24(sp)
    3ffc:	d8c00915 	stw	r3,36(sp)
    4000:	da00048d 	sth	r8,18(sp)
    4004:	d8800215 	stw	r2,8(sp)
    4008:	d8000d15 	stw	zero,52(sp)
    400c:	d8001215 	stw	zero,72(sp)
    4010:	00062e40 	call	62e4 <__svfscanf_r>
    4014:	dfc01917 	ldw	ra,100(sp)
    4018:	dc401817 	ldw	r17,96(sp)
    401c:	dec01c04 	addi	sp,sp,112
    4020:	f800283a 	ret

00004024 <__sclose>:
    4024:	2940038f 	ldh	r5,14(r5)
    4028:	0007c181 	jmpi	7c18 <_close_r>

0000402c <__sseek>:
    402c:	defffe04 	addi	sp,sp,-8
    4030:	dc000015 	stw	r16,0(sp)
    4034:	2821883a 	mov	r16,r5
    4038:	2940038f 	ldh	r5,14(r5)
    403c:	dfc00115 	stw	ra,4(sp)
    4040:	000a3b00 	call	a3b0 <_lseek_r>
    4044:	1007883a 	mov	r3,r2
    4048:	00bfffc4 	movi	r2,-1
    404c:	18800926 	beq	r3,r2,4074 <__sseek+0x48>
    4050:	8080030b 	ldhu	r2,12(r16)
    4054:	80c01415 	stw	r3,80(r16)
    4058:	10840014 	ori	r2,r2,4096
    405c:	8080030d 	sth	r2,12(r16)
    4060:	1805883a 	mov	r2,r3
    4064:	dfc00117 	ldw	ra,4(sp)
    4068:	dc000017 	ldw	r16,0(sp)
    406c:	dec00204 	addi	sp,sp,8
    4070:	f800283a 	ret
    4074:	8080030b 	ldhu	r2,12(r16)
    4078:	10bbffcc 	andi	r2,r2,61439
    407c:	8080030d 	sth	r2,12(r16)
    4080:	1805883a 	mov	r2,r3
    4084:	dfc00117 	ldw	ra,4(sp)
    4088:	dc000017 	ldw	r16,0(sp)
    408c:	dec00204 	addi	sp,sp,8
    4090:	f800283a 	ret

00004094 <__swrite>:
    4094:	2880030b 	ldhu	r2,12(r5)
    4098:	defffb04 	addi	sp,sp,-20
    409c:	dcc00315 	stw	r19,12(sp)
    40a0:	1080400c 	andi	r2,r2,256
    40a4:	dc800215 	stw	r18,8(sp)
    40a8:	dc400115 	stw	r17,4(sp)
    40ac:	dc000015 	stw	r16,0(sp)
    40b0:	3027883a 	mov	r19,r6
    40b4:	3825883a 	mov	r18,r7
    40b8:	dfc00415 	stw	ra,16(sp)
    40bc:	2821883a 	mov	r16,r5
    40c0:	000d883a 	mov	r6,zero
    40c4:	01c00084 	movi	r7,2
    40c8:	2023883a 	mov	r17,r4
    40cc:	10000226 	beq	r2,zero,40d8 <__swrite+0x44>
    40d0:	2940038f 	ldh	r5,14(r5)
    40d4:	000a3b00 	call	a3b0 <_lseek_r>
    40d8:	8080030b 	ldhu	r2,12(r16)
    40dc:	8140038f 	ldh	r5,14(r16)
    40e0:	8809883a 	mov	r4,r17
    40e4:	10bbffcc 	andi	r2,r2,61439
    40e8:	980d883a 	mov	r6,r19
    40ec:	900f883a 	mov	r7,r18
    40f0:	8080030d 	sth	r2,12(r16)
    40f4:	dfc00417 	ldw	ra,16(sp)
    40f8:	dcc00317 	ldw	r19,12(sp)
    40fc:	dc800217 	ldw	r18,8(sp)
    4100:	dc400117 	ldw	r17,4(sp)
    4104:	dc000017 	ldw	r16,0(sp)
    4108:	dec00504 	addi	sp,sp,20
    410c:	0007a641 	jmpi	7a64 <_write_r>

00004110 <__sread>:
    4110:	defffe04 	addi	sp,sp,-8
    4114:	dc000015 	stw	r16,0(sp)
    4118:	2821883a 	mov	r16,r5
    411c:	2940038f 	ldh	r5,14(r5)
    4120:	dfc00115 	stw	ra,4(sp)
    4124:	000b97c0 	call	b97c <_read_r>
    4128:	1007883a 	mov	r3,r2
    412c:	10000816 	blt	r2,zero,4150 <__sread+0x40>
    4130:	80801417 	ldw	r2,80(r16)
    4134:	10c5883a 	add	r2,r2,r3
    4138:	80801415 	stw	r2,80(r16)
    413c:	1805883a 	mov	r2,r3
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
    4150:	8080030b 	ldhu	r2,12(r16)
    4154:	10bbffcc 	andi	r2,r2,61439
    4158:	8080030d 	sth	r2,12(r16)
    415c:	1805883a 	mov	r2,r3
    4160:	dfc00117 	ldw	ra,4(sp)
    4164:	dc000017 	ldw	r16,0(sp)
    4168:	dec00204 	addi	sp,sp,8
    416c:	f800283a 	ret

00004170 <strcat>:
    4170:	defffe04 	addi	sp,sp,-8
    4174:	208000cc 	andi	r2,r4,3
    4178:	dc000015 	stw	r16,0(sp)
    417c:	dfc00115 	stw	ra,4(sp)
    4180:	2021883a 	mov	r16,r4
    4184:	1000161e 	bne	r2,zero,41e0 <strcat+0x70>
    4188:	20c00017 	ldw	r3,0(r4)
    418c:	01bfbff4 	movhi	r6,65279
    4190:	31bfbfc4 	addi	r6,r6,-257
    4194:	02202074 	movhi	r8,32897
    4198:	42202004 	addi	r8,r8,-32640
    419c:	1985883a 	add	r2,r3,r6
    41a0:	1204703a 	and	r2,r2,r8
    41a4:	00c6303a 	nor	r3,zero,r3
    41a8:	1886703a 	and	r3,r3,r2
    41ac:	18000c1e 	bne	r3,zero,41e0 <strcat+0x70>
    41b0:	300f883a 	mov	r7,r6
    41b4:	400d883a 	mov	r6,r8
    41b8:	21000104 	addi	r4,r4,4
    41bc:	20800017 	ldw	r2,0(r4)
    41c0:	11c7883a 	add	r3,r2,r7
    41c4:	1986703a 	and	r3,r3,r6
    41c8:	0084303a 	nor	r2,zero,r2
    41cc:	10c4703a 	and	r2,r2,r3
    41d0:	103ff926 	beq	r2,zero,41b8 <strcat+0x48>
    41d4:	20800007 	ldb	r2,0(r4)
    41d8:	10000326 	beq	r2,zero,41e8 <strcat+0x78>
    41dc:	21000044 	addi	r4,r4,1
    41e0:	20800007 	ldb	r2,0(r4)
    41e4:	103ffd1e 	bne	r2,zero,41dc <strcat+0x6c>
    41e8:	00042bc0 	call	42bc <strcpy>
    41ec:	8005883a 	mov	r2,r16
    41f0:	dfc00117 	ldw	ra,4(sp)
    41f4:	dc000017 	ldw	r16,0(sp)
    41f8:	dec00204 	addi	sp,sp,8
    41fc:	f800283a 	ret

00004200 <strcmp>:
    4200:	2144b03a 	or	r2,r4,r5
    4204:	108000cc 	andi	r2,r2,3
    4208:	10001d1e 	bne	r2,zero,4280 <strcmp+0x80>
    420c:	200f883a 	mov	r7,r4
    4210:	28800017 	ldw	r2,0(r5)
    4214:	21000017 	ldw	r4,0(r4)
    4218:	280d883a 	mov	r6,r5
    421c:	2080161e 	bne	r4,r2,4278 <strcmp+0x78>
    4220:	023fbff4 	movhi	r8,65279
    4224:	423fbfc4 	addi	r8,r8,-257
    4228:	2207883a 	add	r3,r4,r8
    422c:	01602074 	movhi	r5,32897
    4230:	29602004 	addi	r5,r5,-32640
    4234:	1946703a 	and	r3,r3,r5
    4238:	0104303a 	nor	r2,zero,r4
    423c:	10c4703a 	and	r2,r2,r3
    4240:	10001c1e 	bne	r2,zero,42b4 <strcmp+0xb4>
    4244:	4013883a 	mov	r9,r8
    4248:	2811883a 	mov	r8,r5
    424c:	00000106 	br	4254 <strcmp+0x54>
    4250:	1800181e 	bne	r3,zero,42b4 <strcmp+0xb4>
    4254:	39c00104 	addi	r7,r7,4
    4258:	39000017 	ldw	r4,0(r7)
    425c:	31800104 	addi	r6,r6,4
    4260:	31400017 	ldw	r5,0(r6)
    4264:	2245883a 	add	r2,r4,r9
    4268:	1204703a 	and	r2,r2,r8
    426c:	0106303a 	nor	r3,zero,r4
    4270:	1886703a 	and	r3,r3,r2
    4274:	217ff626 	beq	r4,r5,4250 <strcmp+0x50>
    4278:	3809883a 	mov	r4,r7
    427c:	300b883a 	mov	r5,r6
    4280:	20c00007 	ldb	r3,0(r4)
    4284:	1800051e 	bne	r3,zero,429c <strcmp+0x9c>
    4288:	00000606 	br	42a4 <strcmp+0xa4>
    428c:	21000044 	addi	r4,r4,1
    4290:	20c00007 	ldb	r3,0(r4)
    4294:	29400044 	addi	r5,r5,1
    4298:	18000226 	beq	r3,zero,42a4 <strcmp+0xa4>
    429c:	28800007 	ldb	r2,0(r5)
    42a0:	18bffa26 	beq	r3,r2,428c <strcmp+0x8c>
    42a4:	20c00003 	ldbu	r3,0(r4)
    42a8:	28800003 	ldbu	r2,0(r5)
    42ac:	1885c83a 	sub	r2,r3,r2
    42b0:	f800283a 	ret
    42b4:	0005883a 	mov	r2,zero
    42b8:	f800283a 	ret

000042bc <strcpy>:
    42bc:	2904b03a 	or	r2,r5,r4
    42c0:	108000cc 	andi	r2,r2,3
    42c4:	10000826 	beq	r2,zero,42e8 <strcpy+0x2c>
    42c8:	2007883a 	mov	r3,r4
    42cc:	28800003 	ldbu	r2,0(r5)
    42d0:	29400044 	addi	r5,r5,1
    42d4:	18800005 	stb	r2,0(r3)
    42d8:	18c00044 	addi	r3,r3,1
    42dc:	103ffb1e 	bne	r2,zero,42cc <strcpy+0x10>
    42e0:	2005883a 	mov	r2,r4
    42e4:	f800283a 	ret
    42e8:	29800017 	ldw	r6,0(r5)
    42ec:	023fbff4 	movhi	r8,65279
    42f0:	423fbfc4 	addi	r8,r8,-257
    42f4:	02a02074 	movhi	r10,32897
    42f8:	52a02004 	addi	r10,r10,-32640
    42fc:	3205883a 	add	r2,r6,r8
    4300:	0186303a 	nor	r3,zero,r6
    4304:	10c4703a 	and	r2,r2,r3
    4308:	1284703a 	and	r2,r2,r10
    430c:	200f883a 	mov	r7,r4
    4310:	10000b1e 	bne	r2,zero,4340 <strcpy+0x84>
    4314:	4013883a 	mov	r9,r8
    4318:	5011883a 	mov	r8,r10
    431c:	39800015 	stw	r6,0(r7)
    4320:	29400104 	addi	r5,r5,4
    4324:	29800017 	ldw	r6,0(r5)
    4328:	39c00104 	addi	r7,r7,4
    432c:	3245883a 	add	r2,r6,r9
    4330:	0186303a 	nor	r3,zero,r6
    4334:	10c4703a 	and	r2,r2,r3
    4338:	1204703a 	and	r2,r2,r8
    433c:	103ff726 	beq	r2,zero,431c <strcpy+0x60>
    4340:	3807883a 	mov	r3,r7
    4344:	003fe106 	br	42cc <strcpy+0x10>

00004348 <strlen>:
    4348:	208000cc 	andi	r2,r4,3
    434c:	2011883a 	mov	r8,r4
    4350:	1000161e 	bne	r2,zero,43ac <strlen+0x64>
    4354:	20c00017 	ldw	r3,0(r4)
    4358:	017fbff4 	movhi	r5,65279
    435c:	297fbfc4 	addi	r5,r5,-257
    4360:	01e02074 	movhi	r7,32897
    4364:	39e02004 	addi	r7,r7,-32640
    4368:	1945883a 	add	r2,r3,r5
    436c:	11c4703a 	and	r2,r2,r7
    4370:	00c6303a 	nor	r3,zero,r3
    4374:	1886703a 	and	r3,r3,r2
    4378:	18000c1e 	bne	r3,zero,43ac <strlen+0x64>
    437c:	280d883a 	mov	r6,r5
    4380:	380b883a 	mov	r5,r7
    4384:	21000104 	addi	r4,r4,4
    4388:	20800017 	ldw	r2,0(r4)
    438c:	1187883a 	add	r3,r2,r6
    4390:	1946703a 	and	r3,r3,r5
    4394:	0084303a 	nor	r2,zero,r2
    4398:	10c4703a 	and	r2,r2,r3
    439c:	103ff926 	beq	r2,zero,4384 <strlen+0x3c>
    43a0:	20800007 	ldb	r2,0(r4)
    43a4:	10000326 	beq	r2,zero,43b4 <strlen+0x6c>
    43a8:	21000044 	addi	r4,r4,1
    43ac:	20800007 	ldb	r2,0(r4)
    43b0:	103ffd1e 	bne	r2,zero,43a8 <strlen+0x60>
    43b4:	2205c83a 	sub	r2,r4,r8
    43b8:	f800283a 	ret

000043bc <__sprint_r>:
    43bc:	30800217 	ldw	r2,8(r6)
    43c0:	defffe04 	addi	sp,sp,-8
    43c4:	dc000015 	stw	r16,0(sp)
    43c8:	dfc00115 	stw	ra,4(sp)
    43cc:	3021883a 	mov	r16,r6
    43d0:	0007883a 	mov	r3,zero
    43d4:	1000061e 	bne	r2,zero,43f0 <__sprint_r+0x34>
    43d8:	1805883a 	mov	r2,r3
    43dc:	30000115 	stw	zero,4(r6)
    43e0:	dfc00117 	ldw	ra,4(sp)
    43e4:	dc000017 	ldw	r16,0(sp)
    43e8:	dec00204 	addi	sp,sp,8
    43ec:	f800283a 	ret
    43f0:	0009e240 	call	9e24 <__sfvwrite_r>
    43f4:	1007883a 	mov	r3,r2
    43f8:	1805883a 	mov	r2,r3
    43fc:	80000115 	stw	zero,4(r16)
    4400:	80000215 	stw	zero,8(r16)
    4404:	dfc00117 	ldw	ra,4(sp)
    4408:	dc000017 	ldw	r16,0(sp)
    440c:	dec00204 	addi	sp,sp,8
    4410:	f800283a 	ret

00004414 <___vfprintf_internal_r>:
    4414:	defea404 	addi	sp,sp,-1392
    4418:	dd815815 	stw	r22,1376(sp)
    441c:	dc015215 	stw	r16,1352(sp)
    4420:	d9c15115 	stw	r7,1348(sp)
    4424:	dfc15b15 	stw	ra,1388(sp)
    4428:	df015a15 	stw	fp,1384(sp)
    442c:	ddc15915 	stw	r23,1380(sp)
    4430:	dd415715 	stw	r21,1372(sp)
    4434:	dd015615 	stw	r20,1368(sp)
    4438:	dcc15515 	stw	r19,1364(sp)
    443c:	dc815415 	stw	r18,1360(sp)
    4440:	dc415315 	stw	r17,1356(sp)
    4444:	282d883a 	mov	r22,r5
    4448:	3021883a 	mov	r16,r6
    444c:	d9014f15 	stw	r4,1340(sp)
    4450:	000a2f40 	call	a2f4 <_localeconv_r>
    4454:	10800017 	ldw	r2,0(r2)
    4458:	d9c15117 	ldw	r7,1348(sp)
    445c:	d8814915 	stw	r2,1316(sp)
    4460:	d8814f17 	ldw	r2,1340(sp)
    4464:	10000226 	beq	r2,zero,4470 <___vfprintf_internal_r+0x5c>
    4468:	10800e17 	ldw	r2,56(r2)
    446c:	10020d26 	beq	r2,zero,4ca4 <___vfprintf_internal_r+0x890>
    4470:	b080030b 	ldhu	r2,12(r22)
    4474:	1080020c 	andi	r2,r2,8
    4478:	10020e26 	beq	r2,zero,4cb4 <___vfprintf_internal_r+0x8a0>
    447c:	b0800417 	ldw	r2,16(r22)
    4480:	10020c26 	beq	r2,zero,4cb4 <___vfprintf_internal_r+0x8a0>
    4484:	b200030b 	ldhu	r8,12(r22)
    4488:	00800284 	movi	r2,10
    448c:	40c0068c 	andi	r3,r8,26
    4490:	18802f1e 	bne	r3,r2,4550 <___vfprintf_internal_r+0x13c>
    4494:	b080038f 	ldh	r2,14(r22)
    4498:	10002d16 	blt	r2,zero,4550 <___vfprintf_internal_r+0x13c>
    449c:	b240038b 	ldhu	r9,14(r22)
    44a0:	b2800717 	ldw	r10,28(r22)
    44a4:	b2c00917 	ldw	r11,36(r22)
    44a8:	d9014f17 	ldw	r4,1340(sp)
    44ac:	dc402904 	addi	r17,sp,164
    44b0:	d8804004 	addi	r2,sp,256
    44b4:	00c10004 	movi	r3,1024
    44b8:	423fff4c 	andi	r8,r8,65533
    44bc:	800d883a 	mov	r6,r16
    44c0:	880b883a 	mov	r5,r17
    44c4:	da002c0d 	sth	r8,176(sp)
    44c8:	da402c8d 	sth	r9,178(sp)
    44cc:	da803015 	stw	r10,192(sp)
    44d0:	dac03215 	stw	r11,200(sp)
    44d4:	d8802d15 	stw	r2,180(sp)
    44d8:	d8c02e15 	stw	r3,184(sp)
    44dc:	d8802915 	stw	r2,164(sp)
    44e0:	d8c02b15 	stw	r3,172(sp)
    44e4:	d8002f15 	stw	zero,188(sp)
    44e8:	00044140 	call	4414 <___vfprintf_internal_r>
    44ec:	d8814b15 	stw	r2,1324(sp)
    44f0:	10000416 	blt	r2,zero,4504 <___vfprintf_internal_r+0xf0>
    44f4:	d9014f17 	ldw	r4,1340(sp)
    44f8:	880b883a 	mov	r5,r17
    44fc:	00095780 	call	9578 <_fflush_r>
    4500:	1002321e 	bne	r2,zero,4dcc <___vfprintf_internal_r+0x9b8>
    4504:	d8802c0b 	ldhu	r2,176(sp)
    4508:	1080100c 	andi	r2,r2,64
    450c:	10000326 	beq	r2,zero,451c <___vfprintf_internal_r+0x108>
    4510:	b080030b 	ldhu	r2,12(r22)
    4514:	10801014 	ori	r2,r2,64
    4518:	b080030d 	sth	r2,12(r22)
    451c:	d8814b17 	ldw	r2,1324(sp)
    4520:	dfc15b17 	ldw	ra,1388(sp)
    4524:	df015a17 	ldw	fp,1384(sp)
    4528:	ddc15917 	ldw	r23,1380(sp)
    452c:	dd815817 	ldw	r22,1376(sp)
    4530:	dd415717 	ldw	r21,1372(sp)
    4534:	dd015617 	ldw	r20,1368(sp)
    4538:	dcc15517 	ldw	r19,1364(sp)
    453c:	dc815417 	ldw	r18,1360(sp)
    4540:	dc415317 	ldw	r17,1356(sp)
    4544:	dc015217 	ldw	r16,1352(sp)
    4548:	dec15c04 	addi	sp,sp,1392
    454c:	f800283a 	ret
    4550:	0005883a 	mov	r2,zero
    4554:	0007883a 	mov	r3,zero
    4558:	dd401904 	addi	r21,sp,100
    455c:	d8814215 	stw	r2,1288(sp)
    4560:	802f883a 	mov	r23,r16
    4564:	d8c14315 	stw	r3,1292(sp)
    4568:	d8014b15 	stw	zero,1324(sp)
    456c:	d8014815 	stw	zero,1312(sp)
    4570:	d8014415 	stw	zero,1296(sp)
    4574:	d8014715 	stw	zero,1308(sp)
    4578:	dd400c15 	stw	r21,48(sp)
    457c:	d8000e15 	stw	zero,56(sp)
    4580:	d8000d15 	stw	zero,52(sp)
    4584:	b8800007 	ldb	r2,0(r23)
    4588:	10001926 	beq	r2,zero,45f0 <___vfprintf_internal_r+0x1dc>
    458c:	00c00944 	movi	r3,37
    4590:	10c01726 	beq	r2,r3,45f0 <___vfprintf_internal_r+0x1dc>
    4594:	b821883a 	mov	r16,r23
    4598:	00000106 	br	45a0 <___vfprintf_internal_r+0x18c>
    459c:	10c00326 	beq	r2,r3,45ac <___vfprintf_internal_r+0x198>
    45a0:	84000044 	addi	r16,r16,1
    45a4:	80800007 	ldb	r2,0(r16)
    45a8:	103ffc1e 	bne	r2,zero,459c <___vfprintf_internal_r+0x188>
    45ac:	85e7c83a 	sub	r19,r16,r23
    45b0:	98000e26 	beq	r19,zero,45ec <___vfprintf_internal_r+0x1d8>
    45b4:	dc800e17 	ldw	r18,56(sp)
    45b8:	dc400d17 	ldw	r17,52(sp)
    45bc:	008001c4 	movi	r2,7
    45c0:	94e5883a 	add	r18,r18,r19
    45c4:	8c400044 	addi	r17,r17,1
    45c8:	adc00015 	stw	r23,0(r21)
    45cc:	dc800e15 	stw	r18,56(sp)
    45d0:	acc00115 	stw	r19,4(r21)
    45d4:	dc400d15 	stw	r17,52(sp)
    45d8:	14428b16 	blt	r2,r17,5008 <___vfprintf_internal_r+0xbf4>
    45dc:	ad400204 	addi	r21,r21,8
    45e0:	d9014b17 	ldw	r4,1324(sp)
    45e4:	24c9883a 	add	r4,r4,r19
    45e8:	d9014b15 	stw	r4,1324(sp)
    45ec:	802f883a 	mov	r23,r16
    45f0:	b8800007 	ldb	r2,0(r23)
    45f4:	10013c26 	beq	r2,zero,4ae8 <___vfprintf_internal_r+0x6d4>
    45f8:	bdc00044 	addi	r23,r23,1
    45fc:	d8000405 	stb	zero,16(sp)
    4600:	b8c00007 	ldb	r3,0(r23)
    4604:	04ffffc4 	movi	r19,-1
    4608:	d8014c15 	stw	zero,1328(sp)
    460c:	d8014a15 	stw	zero,1320(sp)
    4610:	d8c14d15 	stw	r3,1332(sp)
    4614:	bdc00044 	addi	r23,r23,1
    4618:	d9414d17 	ldw	r5,1332(sp)
    461c:	00801604 	movi	r2,88
    4620:	28fff804 	addi	r3,r5,-32
    4624:	10c06036 	bltu	r2,r3,47a8 <___vfprintf_internal_r+0x394>
    4628:	18c5883a 	add	r2,r3,r3
    462c:	1085883a 	add	r2,r2,r2
    4630:	00c00034 	movhi	r3,0
    4634:	18d19104 	addi	r3,r3,17988
    4638:	10c5883a 	add	r2,r2,r3
    463c:	11000017 	ldw	r4,0(r2)
    4640:	2000683a 	jmp	r4
    4644:	000055b8 	rdprs	zero,zero,342
    4648:	000047a8 	cmpgeui	zero,zero,286
    464c:	000047a8 	cmpgeui	zero,zero,286
    4650:	000055a4 	muli	zero,zero,342
    4654:	000047a8 	cmpgeui	zero,zero,286
    4658:	000047a8 	cmpgeui	zero,zero,286
    465c:	000047a8 	cmpgeui	zero,zero,286
    4660:	000047a8 	cmpgeui	zero,zero,286
    4664:	000047a8 	cmpgeui	zero,zero,286
    4668:	000047a8 	cmpgeui	zero,zero,286
    466c:	00005384 	movi	zero,334
    4670:	00005594 	movui	zero,342
    4674:	000047a8 	cmpgeui	zero,zero,286
    4678:	0000539c 	xori	zero,zero,334
    467c:	00005630 	cmpltui	zero,zero,344
    4680:	000047a8 	cmpgeui	zero,zero,286
    4684:	0000561c 	xori	zero,zero,344
    4688:	000055e4 	muli	zero,zero,343
    468c:	000055e4 	muli	zero,zero,343
    4690:	000055e4 	muli	zero,zero,343
    4694:	000055e4 	muli	zero,zero,343
    4698:	000055e4 	muli	zero,zero,343
    469c:	000055e4 	muli	zero,zero,343
    46a0:	000055e4 	muli	zero,zero,343
    46a4:	000055e4 	muli	zero,zero,343
    46a8:	000055e4 	muli	zero,zero,343
    46ac:	000047a8 	cmpgeui	zero,zero,286
    46b0:	000047a8 	cmpgeui	zero,zero,286
    46b4:	000047a8 	cmpgeui	zero,zero,286
    46b8:	000047a8 	cmpgeui	zero,zero,286
    46bc:	000047a8 	cmpgeui	zero,zero,286
    46c0:	000047a8 	cmpgeui	zero,zero,286
    46c4:	000047a8 	cmpgeui	zero,zero,286
    46c8:	000047a8 	cmpgeui	zero,zero,286
    46cc:	000047a8 	cmpgeui	zero,zero,286
    46d0:	000047a8 	cmpgeui	zero,zero,286
    46d4:	00004e00 	call	4e0 <cam_track+0x1c>
    46d8:	0000546c 	andhi	zero,zero,337
    46dc:	000047a8 	cmpgeui	zero,zero,286
    46e0:	0000546c 	andhi	zero,zero,337
    46e4:	000047a8 	cmpgeui	zero,zero,286
    46e8:	000047a8 	cmpgeui	zero,zero,286
    46ec:	000047a8 	cmpgeui	zero,zero,286
    46f0:	000047a8 	cmpgeui	zero,zero,286
    46f4:	000055d0 	cmplti	zero,zero,343
    46f8:	000047a8 	cmpgeui	zero,zero,286
    46fc:	000047a8 	cmpgeui	zero,zero,286
    4700:	00004eb4 	movhi	zero,314
    4704:	000047a8 	cmpgeui	zero,zero,286
    4708:	000047a8 	cmpgeui	zero,zero,286
    470c:	000047a8 	cmpgeui	zero,zero,286
    4710:	000047a8 	cmpgeui	zero,zero,286
    4714:	000047a8 	cmpgeui	zero,zero,286
    4718:	00004f00 	call	4f0 <cam_track+0x2c>
    471c:	000047a8 	cmpgeui	zero,zero,286
    4720:	000047a8 	cmpgeui	zero,zero,286
    4724:	00005520 	cmpeqi	zero,zero,340
    4728:	000047a8 	cmpgeui	zero,zero,286
    472c:	000047a8 	cmpgeui	zero,zero,286
    4730:	000047a8 	cmpgeui	zero,zero,286
    4734:	000047a8 	cmpgeui	zero,zero,286
    4738:	000047a8 	cmpgeui	zero,zero,286
    473c:	000047a8 	cmpgeui	zero,zero,286
    4740:	000047a8 	cmpgeui	zero,zero,286
    4744:	000047a8 	cmpgeui	zero,zero,286
    4748:	000047a8 	cmpgeui	zero,zero,286
    474c:	000047a8 	cmpgeui	zero,zero,286
    4750:	000054f4 	movhi	zero,339
    4754:	00004e0c 	andi	zero,zero,312
    4758:	0000546c 	andhi	zero,zero,337
    475c:	0000546c 	andhi	zero,zero,337
    4760:	0000546c 	andhi	zero,zero,337
    4764:	00005458 	cmpnei	zero,zero,337
    4768:	00004e0c 	andi	zero,zero,312
    476c:	000047a8 	cmpgeui	zero,zero,286
    4770:	000047a8 	cmpgeui	zero,zero,286
    4774:	000053e0 	cmpeqi	zero,zero,335
    4778:	000047a8 	cmpgeui	zero,zero,286
    477c:	000053b0 	cmpltui	zero,zero,334
    4780:	00004ec0 	call	4ec <cam_track+0x28>
    4784:	00005410 	cmplti	zero,zero,336
    4788:	000053fc 	xorhi	zero,zero,335
    478c:	000047a8 	cmpgeui	zero,zero,286
    4790:	0000568c 	andi	zero,zero,346
    4794:	000047a8 	cmpgeui	zero,zero,286
    4798:	00004f0c 	andi	zero,zero,316
    479c:	000047a8 	cmpgeui	zero,zero,286
    47a0:	000047a8 	cmpgeui	zero,zero,286
    47a4:	00005584 	movi	zero,342
    47a8:	d9014d17 	ldw	r4,1332(sp)
    47ac:	2000ce26 	beq	r4,zero,4ae8 <___vfprintf_internal_r+0x6d4>
    47b0:	01400044 	movi	r5,1
    47b4:	d9800f04 	addi	r6,sp,60
    47b8:	d9c14015 	stw	r7,1280(sp)
    47bc:	d9414515 	stw	r5,1300(sp)
    47c0:	d9814115 	stw	r6,1284(sp)
    47c4:	280f883a 	mov	r7,r5
    47c8:	d9000f05 	stb	r4,60(sp)
    47cc:	d8000405 	stb	zero,16(sp)
    47d0:	d8014615 	stw	zero,1304(sp)
    47d4:	d8c14c17 	ldw	r3,1328(sp)
    47d8:	1880008c 	andi	r2,r3,2
    47dc:	1005003a 	cmpeq	r2,r2,zero
    47e0:	d8815015 	stw	r2,1344(sp)
    47e4:	1000031e 	bne	r2,zero,47f4 <___vfprintf_internal_r+0x3e0>
    47e8:	d9014517 	ldw	r4,1300(sp)
    47ec:	21000084 	addi	r4,r4,2
    47f0:	d9014515 	stw	r4,1300(sp)
    47f4:	d9414c17 	ldw	r5,1328(sp)
    47f8:	2940210c 	andi	r5,r5,132
    47fc:	d9414e15 	stw	r5,1336(sp)
    4800:	28002d1e 	bne	r5,zero,48b8 <___vfprintf_internal_r+0x4a4>
    4804:	d9814a17 	ldw	r6,1320(sp)
    4808:	d8814517 	ldw	r2,1300(sp)
    480c:	30a1c83a 	sub	r16,r6,r2
    4810:	0400290e 	bge	zero,r16,48b8 <___vfprintf_internal_r+0x4a4>
    4814:	00800404 	movi	r2,16
    4818:	1404580e 	bge	r2,r16,597c <___vfprintf_internal_r+0x1568>
    481c:	dc800e17 	ldw	r18,56(sp)
    4820:	dc400d17 	ldw	r17,52(sp)
    4824:	1027883a 	mov	r19,r2
    4828:	07000074 	movhi	fp,1
    482c:	e7141784 	addi	fp,fp,20574
    4830:	050001c4 	movi	r20,7
    4834:	00000306 	br	4844 <___vfprintf_internal_r+0x430>
    4838:	843ffc04 	addi	r16,r16,-16
    483c:	ad400204 	addi	r21,r21,8
    4840:	9c00130e 	bge	r19,r16,4890 <___vfprintf_internal_r+0x47c>
    4844:	94800404 	addi	r18,r18,16
    4848:	8c400044 	addi	r17,r17,1
    484c:	af000015 	stw	fp,0(r21)
    4850:	acc00115 	stw	r19,4(r21)
    4854:	dc800e15 	stw	r18,56(sp)
    4858:	dc400d15 	stw	r17,52(sp)
    485c:	a47ff60e 	bge	r20,r17,4838 <___vfprintf_internal_r+0x424>
    4860:	d9014f17 	ldw	r4,1340(sp)
    4864:	b00b883a 	mov	r5,r22
    4868:	d9800c04 	addi	r6,sp,48
    486c:	d9c15115 	stw	r7,1348(sp)
    4870:	00043bc0 	call	43bc <__sprint_r>
    4874:	d9c15117 	ldw	r7,1348(sp)
    4878:	10009e1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    487c:	843ffc04 	addi	r16,r16,-16
    4880:	dc800e17 	ldw	r18,56(sp)
    4884:	dc400d17 	ldw	r17,52(sp)
    4888:	dd401904 	addi	r21,sp,100
    488c:	9c3fed16 	blt	r19,r16,4844 <___vfprintf_internal_r+0x430>
    4890:	9425883a 	add	r18,r18,r16
    4894:	8c400044 	addi	r17,r17,1
    4898:	008001c4 	movi	r2,7
    489c:	af000015 	stw	fp,0(r21)
    48a0:	ac000115 	stw	r16,4(r21)
    48a4:	dc800e15 	stw	r18,56(sp)
    48a8:	dc400d15 	stw	r17,52(sp)
    48ac:	1441f516 	blt	r2,r17,5084 <___vfprintf_internal_r+0xc70>
    48b0:	ad400204 	addi	r21,r21,8
    48b4:	00000206 	br	48c0 <___vfprintf_internal_r+0x4ac>
    48b8:	dc800e17 	ldw	r18,56(sp)
    48bc:	dc400d17 	ldw	r17,52(sp)
    48c0:	d8800407 	ldb	r2,16(sp)
    48c4:	10000b26 	beq	r2,zero,48f4 <___vfprintf_internal_r+0x4e0>
    48c8:	00800044 	movi	r2,1
    48cc:	94800044 	addi	r18,r18,1
    48d0:	8c400044 	addi	r17,r17,1
    48d4:	a8800115 	stw	r2,4(r21)
    48d8:	d8c00404 	addi	r3,sp,16
    48dc:	008001c4 	movi	r2,7
    48e0:	a8c00015 	stw	r3,0(r21)
    48e4:	dc800e15 	stw	r18,56(sp)
    48e8:	dc400d15 	stw	r17,52(sp)
    48ec:	1441da16 	blt	r2,r17,5058 <___vfprintf_internal_r+0xc44>
    48f0:	ad400204 	addi	r21,r21,8
    48f4:	d9015017 	ldw	r4,1344(sp)
    48f8:	20000b1e 	bne	r4,zero,4928 <___vfprintf_internal_r+0x514>
    48fc:	d8800444 	addi	r2,sp,17
    4900:	94800084 	addi	r18,r18,2
    4904:	8c400044 	addi	r17,r17,1
    4908:	a8800015 	stw	r2,0(r21)
    490c:	00c00084 	movi	r3,2
    4910:	008001c4 	movi	r2,7
    4914:	a8c00115 	stw	r3,4(r21)
    4918:	dc800e15 	stw	r18,56(sp)
    491c:	dc400d15 	stw	r17,52(sp)
    4920:	1441c216 	blt	r2,r17,502c <___vfprintf_internal_r+0xc18>
    4924:	ad400204 	addi	r21,r21,8
    4928:	d9414e17 	ldw	r5,1336(sp)
    492c:	00802004 	movi	r2,128
    4930:	2880b126 	beq	r5,r2,4bf8 <___vfprintf_internal_r+0x7e4>
    4934:	d8c14617 	ldw	r3,1304(sp)
    4938:	19e1c83a 	sub	r16,r3,r7
    493c:	0400260e 	bge	zero,r16,49d8 <___vfprintf_internal_r+0x5c4>
    4940:	00800404 	movi	r2,16
    4944:	1403c90e 	bge	r2,r16,586c <___vfprintf_internal_r+0x1458>
    4948:	1027883a 	mov	r19,r2
    494c:	07000074 	movhi	fp,1
    4950:	e7141384 	addi	fp,fp,20558
    4954:	050001c4 	movi	r20,7
    4958:	00000306 	br	4968 <___vfprintf_internal_r+0x554>
    495c:	843ffc04 	addi	r16,r16,-16
    4960:	ad400204 	addi	r21,r21,8
    4964:	9c00130e 	bge	r19,r16,49b4 <___vfprintf_internal_r+0x5a0>
    4968:	94800404 	addi	r18,r18,16
    496c:	8c400044 	addi	r17,r17,1
    4970:	af000015 	stw	fp,0(r21)
    4974:	acc00115 	stw	r19,4(r21)
    4978:	dc800e15 	stw	r18,56(sp)
    497c:	dc400d15 	stw	r17,52(sp)
    4980:	a47ff60e 	bge	r20,r17,495c <___vfprintf_internal_r+0x548>
    4984:	d9014f17 	ldw	r4,1340(sp)
    4988:	b00b883a 	mov	r5,r22
    498c:	d9800c04 	addi	r6,sp,48
    4990:	d9c15115 	stw	r7,1348(sp)
    4994:	00043bc0 	call	43bc <__sprint_r>
    4998:	d9c15117 	ldw	r7,1348(sp)
    499c:	1000551e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    49a0:	843ffc04 	addi	r16,r16,-16
    49a4:	dc800e17 	ldw	r18,56(sp)
    49a8:	dc400d17 	ldw	r17,52(sp)
    49ac:	dd401904 	addi	r21,sp,100
    49b0:	9c3fed16 	blt	r19,r16,4968 <___vfprintf_internal_r+0x554>
    49b4:	9425883a 	add	r18,r18,r16
    49b8:	8c400044 	addi	r17,r17,1
    49bc:	008001c4 	movi	r2,7
    49c0:	af000015 	stw	fp,0(r21)
    49c4:	ac000115 	stw	r16,4(r21)
    49c8:	dc800e15 	stw	r18,56(sp)
    49cc:	dc400d15 	stw	r17,52(sp)
    49d0:	14418216 	blt	r2,r17,4fdc <___vfprintf_internal_r+0xbc8>
    49d4:	ad400204 	addi	r21,r21,8
    49d8:	d9014c17 	ldw	r4,1328(sp)
    49dc:	2080400c 	andi	r2,r4,256
    49e0:	10004a1e 	bne	r2,zero,4b0c <___vfprintf_internal_r+0x6f8>
    49e4:	d9414117 	ldw	r5,1284(sp)
    49e8:	91e5883a 	add	r18,r18,r7
    49ec:	8c400044 	addi	r17,r17,1
    49f0:	008001c4 	movi	r2,7
    49f4:	a9400015 	stw	r5,0(r21)
    49f8:	a9c00115 	stw	r7,4(r21)
    49fc:	dc800e15 	stw	r18,56(sp)
    4a00:	dc400d15 	stw	r17,52(sp)
    4a04:	14416716 	blt	r2,r17,4fa4 <___vfprintf_internal_r+0xb90>
    4a08:	a8c00204 	addi	r3,r21,8
    4a0c:	d9814c17 	ldw	r6,1328(sp)
    4a10:	3080010c 	andi	r2,r6,4
    4a14:	10002826 	beq	r2,zero,4ab8 <___vfprintf_internal_r+0x6a4>
    4a18:	d8814a17 	ldw	r2,1320(sp)
    4a1c:	d9014517 	ldw	r4,1300(sp)
    4a20:	1121c83a 	sub	r16,r2,r4
    4a24:	0400240e 	bge	zero,r16,4ab8 <___vfprintf_internal_r+0x6a4>
    4a28:	00800404 	movi	r2,16
    4a2c:	14044f0e 	bge	r2,r16,5b6c <___vfprintf_internal_r+0x1758>
    4a30:	dc400d17 	ldw	r17,52(sp)
    4a34:	1027883a 	mov	r19,r2
    4a38:	07000074 	movhi	fp,1
    4a3c:	e7141784 	addi	fp,fp,20574
    4a40:	050001c4 	movi	r20,7
    4a44:	00000306 	br	4a54 <___vfprintf_internal_r+0x640>
    4a48:	843ffc04 	addi	r16,r16,-16
    4a4c:	18c00204 	addi	r3,r3,8
    4a50:	9c00110e 	bge	r19,r16,4a98 <___vfprintf_internal_r+0x684>
    4a54:	94800404 	addi	r18,r18,16
    4a58:	8c400044 	addi	r17,r17,1
    4a5c:	1f000015 	stw	fp,0(r3)
    4a60:	1cc00115 	stw	r19,4(r3)
    4a64:	dc800e15 	stw	r18,56(sp)
    4a68:	dc400d15 	stw	r17,52(sp)
    4a6c:	a47ff60e 	bge	r20,r17,4a48 <___vfprintf_internal_r+0x634>
    4a70:	d9014f17 	ldw	r4,1340(sp)
    4a74:	b00b883a 	mov	r5,r22
    4a78:	d9800c04 	addi	r6,sp,48
    4a7c:	00043bc0 	call	43bc <__sprint_r>
    4a80:	10001c1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4a84:	843ffc04 	addi	r16,r16,-16
    4a88:	dc800e17 	ldw	r18,56(sp)
    4a8c:	dc400d17 	ldw	r17,52(sp)
    4a90:	d8c01904 	addi	r3,sp,100
    4a94:	9c3fef16 	blt	r19,r16,4a54 <___vfprintf_internal_r+0x640>
    4a98:	9425883a 	add	r18,r18,r16
    4a9c:	8c400044 	addi	r17,r17,1
    4aa0:	008001c4 	movi	r2,7
    4aa4:	1f000015 	stw	fp,0(r3)
    4aa8:	1c000115 	stw	r16,4(r3)
    4aac:	dc800e15 	stw	r18,56(sp)
    4ab0:	dc400d15 	stw	r17,52(sp)
    4ab4:	1440cb16 	blt	r2,r17,4de4 <___vfprintf_internal_r+0x9d0>
    4ab8:	d8814a17 	ldw	r2,1320(sp)
    4abc:	d9414517 	ldw	r5,1300(sp)
    4ac0:	1140010e 	bge	r2,r5,4ac8 <___vfprintf_internal_r+0x6b4>
    4ac4:	2805883a 	mov	r2,r5
    4ac8:	d9814b17 	ldw	r6,1324(sp)
    4acc:	308d883a 	add	r6,r6,r2
    4ad0:	d9814b15 	stw	r6,1324(sp)
    4ad4:	90013b1e 	bne	r18,zero,4fc4 <___vfprintf_internal_r+0xbb0>
    4ad8:	d9c14017 	ldw	r7,1280(sp)
    4adc:	dd401904 	addi	r21,sp,100
    4ae0:	d8000d15 	stw	zero,52(sp)
    4ae4:	003ea706 	br	4584 <___vfprintf_internal_r+0x170>
    4ae8:	d8800e17 	ldw	r2,56(sp)
    4aec:	10053f1e 	bne	r2,zero,5fec <___vfprintf_internal_r+0x1bd8>
    4af0:	d8000d15 	stw	zero,52(sp)
    4af4:	b080030b 	ldhu	r2,12(r22)
    4af8:	1080100c 	andi	r2,r2,64
    4afc:	103e8726 	beq	r2,zero,451c <___vfprintf_internal_r+0x108>
    4b00:	00bfffc4 	movi	r2,-1
    4b04:	d8814b15 	stw	r2,1324(sp)
    4b08:	003e8406 	br	451c <___vfprintf_internal_r+0x108>
    4b0c:	d9814d17 	ldw	r6,1332(sp)
    4b10:	00801944 	movi	r2,101
    4b14:	11806e16 	blt	r2,r6,4cd0 <___vfprintf_internal_r+0x8bc>
    4b18:	d9414717 	ldw	r5,1308(sp)
    4b1c:	00c00044 	movi	r3,1
    4b20:	1943430e 	bge	r3,r5,5830 <___vfprintf_internal_r+0x141c>
    4b24:	d8814117 	ldw	r2,1284(sp)
    4b28:	94800044 	addi	r18,r18,1
    4b2c:	8c400044 	addi	r17,r17,1
    4b30:	a8800015 	stw	r2,0(r21)
    4b34:	008001c4 	movi	r2,7
    4b38:	a8c00115 	stw	r3,4(r21)
    4b3c:	dc800e15 	stw	r18,56(sp)
    4b40:	dc400d15 	stw	r17,52(sp)
    4b44:	1441ca16 	blt	r2,r17,5270 <___vfprintf_internal_r+0xe5c>
    4b48:	a8c00204 	addi	r3,r21,8
    4b4c:	d9014917 	ldw	r4,1316(sp)
    4b50:	00800044 	movi	r2,1
    4b54:	94800044 	addi	r18,r18,1
    4b58:	8c400044 	addi	r17,r17,1
    4b5c:	18800115 	stw	r2,4(r3)
    4b60:	008001c4 	movi	r2,7
    4b64:	19000015 	stw	r4,0(r3)
    4b68:	dc800e15 	stw	r18,56(sp)
    4b6c:	dc400d15 	stw	r17,52(sp)
    4b70:	1441b616 	blt	r2,r17,524c <___vfprintf_internal_r+0xe38>
    4b74:	1cc00204 	addi	r19,r3,8
    4b78:	d9014217 	ldw	r4,1288(sp)
    4b7c:	d9414317 	ldw	r5,1292(sp)
    4b80:	000d883a 	mov	r6,zero
    4b84:	000f883a 	mov	r7,zero
    4b88:	0010d280 	call	10d28 <__nedf2>
    4b8c:	10017426 	beq	r2,zero,5160 <___vfprintf_internal_r+0xd4c>
    4b90:	d9414717 	ldw	r5,1308(sp)
    4b94:	d9814117 	ldw	r6,1284(sp)
    4b98:	8c400044 	addi	r17,r17,1
    4b9c:	2c85883a 	add	r2,r5,r18
    4ba0:	14bfffc4 	addi	r18,r2,-1
    4ba4:	28bfffc4 	addi	r2,r5,-1
    4ba8:	30c00044 	addi	r3,r6,1
    4bac:	98800115 	stw	r2,4(r19)
    4bb0:	008001c4 	movi	r2,7
    4bb4:	98c00015 	stw	r3,0(r19)
    4bb8:	dc800e15 	stw	r18,56(sp)
    4bbc:	dc400d15 	stw	r17,52(sp)
    4bc0:	14418e16 	blt	r2,r17,51fc <___vfprintf_internal_r+0xde8>
    4bc4:	9cc00204 	addi	r19,r19,8
    4bc8:	d9414817 	ldw	r5,1312(sp)
    4bcc:	d8800804 	addi	r2,sp,32
    4bd0:	8c400044 	addi	r17,r17,1
    4bd4:	9165883a 	add	r18,r18,r5
    4bd8:	98800015 	stw	r2,0(r19)
    4bdc:	008001c4 	movi	r2,7
    4be0:	99400115 	stw	r5,4(r19)
    4be4:	dc800e15 	stw	r18,56(sp)
    4be8:	dc400d15 	stw	r17,52(sp)
    4bec:	1440ed16 	blt	r2,r17,4fa4 <___vfprintf_internal_r+0xb90>
    4bf0:	98c00204 	addi	r3,r19,8
    4bf4:	003f8506 	br	4a0c <___vfprintf_internal_r+0x5f8>
    4bf8:	d9814a17 	ldw	r6,1320(sp)
    4bfc:	d8814517 	ldw	r2,1300(sp)
    4c00:	30a1c83a 	sub	r16,r6,r2
    4c04:	043f4b0e 	bge	zero,r16,4934 <___vfprintf_internal_r+0x520>
    4c08:	00800404 	movi	r2,16
    4c0c:	1404340e 	bge	r2,r16,5ce0 <___vfprintf_internal_r+0x18cc>
    4c10:	1027883a 	mov	r19,r2
    4c14:	07000074 	movhi	fp,1
    4c18:	e7141384 	addi	fp,fp,20558
    4c1c:	050001c4 	movi	r20,7
    4c20:	00000306 	br	4c30 <___vfprintf_internal_r+0x81c>
    4c24:	843ffc04 	addi	r16,r16,-16
    4c28:	ad400204 	addi	r21,r21,8
    4c2c:	9c00130e 	bge	r19,r16,4c7c <___vfprintf_internal_r+0x868>
    4c30:	94800404 	addi	r18,r18,16
    4c34:	8c400044 	addi	r17,r17,1
    4c38:	af000015 	stw	fp,0(r21)
    4c3c:	acc00115 	stw	r19,4(r21)
    4c40:	dc800e15 	stw	r18,56(sp)
    4c44:	dc400d15 	stw	r17,52(sp)
    4c48:	a47ff60e 	bge	r20,r17,4c24 <___vfprintf_internal_r+0x810>
    4c4c:	d9014f17 	ldw	r4,1340(sp)
    4c50:	b00b883a 	mov	r5,r22
    4c54:	d9800c04 	addi	r6,sp,48
    4c58:	d9c15115 	stw	r7,1348(sp)
    4c5c:	00043bc0 	call	43bc <__sprint_r>
    4c60:	d9c15117 	ldw	r7,1348(sp)
    4c64:	103fa31e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4c68:	843ffc04 	addi	r16,r16,-16
    4c6c:	dc800e17 	ldw	r18,56(sp)
    4c70:	dc400d17 	ldw	r17,52(sp)
    4c74:	dd401904 	addi	r21,sp,100
    4c78:	9c3fed16 	blt	r19,r16,4c30 <___vfprintf_internal_r+0x81c>
    4c7c:	9425883a 	add	r18,r18,r16
    4c80:	8c400044 	addi	r17,r17,1
    4c84:	008001c4 	movi	r2,7
    4c88:	af000015 	stw	fp,0(r21)
    4c8c:	ac000115 	stw	r16,4(r21)
    4c90:	dc800e15 	stw	r18,56(sp)
    4c94:	dc400d15 	stw	r17,52(sp)
    4c98:	14416116 	blt	r2,r17,5220 <___vfprintf_internal_r+0xe0c>
    4c9c:	ad400204 	addi	r21,r21,8
    4ca0:	003f2406 	br	4934 <___vfprintf_internal_r+0x520>
    4ca4:	d9014f17 	ldw	r4,1340(sp)
    4ca8:	0002d680 	call	2d68 <__sinit>
    4cac:	d9c15117 	ldw	r7,1348(sp)
    4cb0:	003def06 	br	4470 <___vfprintf_internal_r+0x5c>
    4cb4:	d9014f17 	ldw	r4,1340(sp)
    4cb8:	b00b883a 	mov	r5,r22
    4cbc:	d9c15115 	stw	r7,1348(sp)
    4cc0:	0007adc0 	call	7adc <__swsetup_r>
    4cc4:	d9c15117 	ldw	r7,1348(sp)
    4cc8:	103dee26 	beq	r2,zero,4484 <___vfprintf_internal_r+0x70>
    4ccc:	003f8c06 	br	4b00 <___vfprintf_internal_r+0x6ec>
    4cd0:	d9014217 	ldw	r4,1288(sp)
    4cd4:	d9414317 	ldw	r5,1292(sp)
    4cd8:	000d883a 	mov	r6,zero
    4cdc:	000f883a 	mov	r7,zero
    4ce0:	0010ca00 	call	10ca0 <__eqdf2>
    4ce4:	1000f21e 	bne	r2,zero,50b0 <___vfprintf_internal_r+0xc9c>
    4ce8:	00800074 	movhi	r2,1
    4cec:	10941304 	addi	r2,r2,20556
    4cf0:	94800044 	addi	r18,r18,1
    4cf4:	8c400044 	addi	r17,r17,1
    4cf8:	a8800015 	stw	r2,0(r21)
    4cfc:	00c00044 	movi	r3,1
    4d00:	008001c4 	movi	r2,7
    4d04:	a8c00115 	stw	r3,4(r21)
    4d08:	dc800e15 	stw	r18,56(sp)
    4d0c:	dc400d15 	stw	r17,52(sp)
    4d10:	1442fa16 	blt	r2,r17,58fc <___vfprintf_internal_r+0x14e8>
    4d14:	a8c00204 	addi	r3,r21,8
    4d18:	d8800517 	ldw	r2,20(sp)
    4d1c:	d9014717 	ldw	r4,1308(sp)
    4d20:	11015c0e 	bge	r2,r4,5294 <___vfprintf_internal_r+0xe80>
    4d24:	dc400d17 	ldw	r17,52(sp)
    4d28:	d9814917 	ldw	r6,1316(sp)
    4d2c:	00800044 	movi	r2,1
    4d30:	94800044 	addi	r18,r18,1
    4d34:	8c400044 	addi	r17,r17,1
    4d38:	18800115 	stw	r2,4(r3)
    4d3c:	008001c4 	movi	r2,7
    4d40:	19800015 	stw	r6,0(r3)
    4d44:	dc800e15 	stw	r18,56(sp)
    4d48:	dc400d15 	stw	r17,52(sp)
    4d4c:	14431016 	blt	r2,r17,5990 <___vfprintf_internal_r+0x157c>
    4d50:	18c00204 	addi	r3,r3,8
    4d54:	d8814717 	ldw	r2,1308(sp)
    4d58:	143fffc4 	addi	r16,r2,-1
    4d5c:	043f2b0e 	bge	zero,r16,4a0c <___vfprintf_internal_r+0x5f8>
    4d60:	00800404 	movi	r2,16
    4d64:	1402a20e 	bge	r2,r16,57f0 <___vfprintf_internal_r+0x13dc>
    4d68:	dc400d17 	ldw	r17,52(sp)
    4d6c:	1027883a 	mov	r19,r2
    4d70:	07000074 	movhi	fp,1
    4d74:	e7141384 	addi	fp,fp,20558
    4d78:	050001c4 	movi	r20,7
    4d7c:	00000306 	br	4d8c <___vfprintf_internal_r+0x978>
    4d80:	18c00204 	addi	r3,r3,8
    4d84:	843ffc04 	addi	r16,r16,-16
    4d88:	9c029c0e 	bge	r19,r16,57fc <___vfprintf_internal_r+0x13e8>
    4d8c:	94800404 	addi	r18,r18,16
    4d90:	8c400044 	addi	r17,r17,1
    4d94:	1f000015 	stw	fp,0(r3)
    4d98:	1cc00115 	stw	r19,4(r3)
    4d9c:	dc800e15 	stw	r18,56(sp)
    4da0:	dc400d15 	stw	r17,52(sp)
    4da4:	a47ff60e 	bge	r20,r17,4d80 <___vfprintf_internal_r+0x96c>
    4da8:	d9014f17 	ldw	r4,1340(sp)
    4dac:	b00b883a 	mov	r5,r22
    4db0:	d9800c04 	addi	r6,sp,48
    4db4:	00043bc0 	call	43bc <__sprint_r>
    4db8:	103f4e1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4dbc:	dc800e17 	ldw	r18,56(sp)
    4dc0:	dc400d17 	ldw	r17,52(sp)
    4dc4:	d8c01904 	addi	r3,sp,100
    4dc8:	003fee06 	br	4d84 <___vfprintf_internal_r+0x970>
    4dcc:	d8802c0b 	ldhu	r2,176(sp)
    4dd0:	00ffffc4 	movi	r3,-1
    4dd4:	d8c14b15 	stw	r3,1324(sp)
    4dd8:	1080100c 	andi	r2,r2,64
    4ddc:	103dcc1e 	bne	r2,zero,4510 <___vfprintf_internal_r+0xfc>
    4de0:	003dce06 	br	451c <___vfprintf_internal_r+0x108>
    4de4:	d9014f17 	ldw	r4,1340(sp)
    4de8:	b00b883a 	mov	r5,r22
    4dec:	d9800c04 	addi	r6,sp,48
    4df0:	00043bc0 	call	43bc <__sprint_r>
    4df4:	103f3f1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4df8:	dc800e17 	ldw	r18,56(sp)
    4dfc:	003f2e06 	br	4ab8 <___vfprintf_internal_r+0x6a4>
    4e00:	d9414c17 	ldw	r5,1328(sp)
    4e04:	29400414 	ori	r5,r5,16
    4e08:	d9414c15 	stw	r5,1328(sp)
    4e0c:	d9814c17 	ldw	r6,1328(sp)
    4e10:	3080080c 	andi	r2,r6,32
    4e14:	10014f1e 	bne	r2,zero,5354 <___vfprintf_internal_r+0xf40>
    4e18:	d8c14c17 	ldw	r3,1328(sp)
    4e1c:	1880040c 	andi	r2,r3,16
    4e20:	1002ea1e 	bne	r2,zero,59cc <___vfprintf_internal_r+0x15b8>
    4e24:	d9014c17 	ldw	r4,1328(sp)
    4e28:	2080100c 	andi	r2,r4,64
    4e2c:	1002e726 	beq	r2,zero,59cc <___vfprintf_internal_r+0x15b8>
    4e30:	3880000f 	ldh	r2,0(r7)
    4e34:	39c00104 	addi	r7,r7,4
    4e38:	d9c14015 	stw	r7,1280(sp)
    4e3c:	1023d7fa 	srai	r17,r2,31
    4e40:	1021883a 	mov	r16,r2
    4e44:	88037216 	blt	r17,zero,5c10 <___vfprintf_internal_r+0x17fc>
    4e48:	01000044 	movi	r4,1
    4e4c:	98000416 	blt	r19,zero,4e60 <___vfprintf_internal_r+0xa4c>
    4e50:	d8c14c17 	ldw	r3,1328(sp)
    4e54:	00bfdfc4 	movi	r2,-129
    4e58:	1886703a 	and	r3,r3,r2
    4e5c:	d8c14c15 	stw	r3,1328(sp)
    4e60:	8444b03a 	or	r2,r16,r17
    4e64:	1002261e 	bne	r2,zero,5700 <___vfprintf_internal_r+0x12ec>
    4e68:	9802251e 	bne	r19,zero,5700 <___vfprintf_internal_r+0x12ec>
    4e6c:	20803fcc 	andi	r2,r4,255
    4e70:	10029b26 	beq	r2,zero,58e0 <___vfprintf_internal_r+0x14cc>
    4e74:	d8c01904 	addi	r3,sp,100
    4e78:	dd000f04 	addi	r20,sp,60
    4e7c:	d8c14115 	stw	r3,1284(sp)
    4e80:	d8c14117 	ldw	r3,1284(sp)
    4e84:	dcc14515 	stw	r19,1300(sp)
    4e88:	a0c5c83a 	sub	r2,r20,r3
    4e8c:	11c00a04 	addi	r7,r2,40
    4e90:	99c0010e 	bge	r19,r7,4e98 <___vfprintf_internal_r+0xa84>
    4e94:	d9c14515 	stw	r7,1300(sp)
    4e98:	dcc14615 	stw	r19,1304(sp)
    4e9c:	d8800407 	ldb	r2,16(sp)
    4ea0:	103e4c26 	beq	r2,zero,47d4 <___vfprintf_internal_r+0x3c0>
    4ea4:	d8814517 	ldw	r2,1300(sp)
    4ea8:	10800044 	addi	r2,r2,1
    4eac:	d8814515 	stw	r2,1300(sp)
    4eb0:	003e4806 	br	47d4 <___vfprintf_internal_r+0x3c0>
    4eb4:	d9814c17 	ldw	r6,1328(sp)
    4eb8:	31800414 	ori	r6,r6,16
    4ebc:	d9814c15 	stw	r6,1328(sp)
    4ec0:	d8c14c17 	ldw	r3,1328(sp)
    4ec4:	1880080c 	andi	r2,r3,32
    4ec8:	1001271e 	bne	r2,zero,5368 <___vfprintf_internal_r+0xf54>
    4ecc:	d9414c17 	ldw	r5,1328(sp)
    4ed0:	2880040c 	andi	r2,r5,16
    4ed4:	1002b61e 	bne	r2,zero,59b0 <___vfprintf_internal_r+0x159c>
    4ed8:	d9814c17 	ldw	r6,1328(sp)
    4edc:	3080100c 	andi	r2,r6,64
    4ee0:	1002b326 	beq	r2,zero,59b0 <___vfprintf_internal_r+0x159c>
    4ee4:	3c00000b 	ldhu	r16,0(r7)
    4ee8:	0009883a 	mov	r4,zero
    4eec:	39c00104 	addi	r7,r7,4
    4ef0:	0023883a 	mov	r17,zero
    4ef4:	d9c14015 	stw	r7,1280(sp)
    4ef8:	d8000405 	stb	zero,16(sp)
    4efc:	003fd306 	br	4e4c <___vfprintf_internal_r+0xa38>
    4f00:	d9014c17 	ldw	r4,1328(sp)
    4f04:	21000414 	ori	r4,r4,16
    4f08:	d9014c15 	stw	r4,1328(sp)
    4f0c:	d9414c17 	ldw	r5,1328(sp)
    4f10:	2880080c 	andi	r2,r5,32
    4f14:	1001081e 	bne	r2,zero,5338 <___vfprintf_internal_r+0xf24>
    4f18:	d8c14c17 	ldw	r3,1328(sp)
    4f1c:	1880040c 	andi	r2,r3,16
    4f20:	1002b01e 	bne	r2,zero,59e4 <___vfprintf_internal_r+0x15d0>
    4f24:	d9014c17 	ldw	r4,1328(sp)
    4f28:	2080100c 	andi	r2,r4,64
    4f2c:	1002ad26 	beq	r2,zero,59e4 <___vfprintf_internal_r+0x15d0>
    4f30:	3c00000b 	ldhu	r16,0(r7)
    4f34:	01000044 	movi	r4,1
    4f38:	39c00104 	addi	r7,r7,4
    4f3c:	0023883a 	mov	r17,zero
    4f40:	d9c14015 	stw	r7,1280(sp)
    4f44:	d8000405 	stb	zero,16(sp)
    4f48:	003fc006 	br	4e4c <___vfprintf_internal_r+0xa38>
    4f4c:	d9014f17 	ldw	r4,1340(sp)
    4f50:	b00b883a 	mov	r5,r22
    4f54:	d9800c04 	addi	r6,sp,48
    4f58:	00043bc0 	call	43bc <__sprint_r>
    4f5c:	103ee51e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4f60:	dc800e17 	ldw	r18,56(sp)
    4f64:	d8c01904 	addi	r3,sp,100
    4f68:	d9814c17 	ldw	r6,1328(sp)
    4f6c:	3080004c 	andi	r2,r6,1
    4f70:	1005003a 	cmpeq	r2,r2,zero
    4f74:	103ea51e 	bne	r2,zero,4a0c <___vfprintf_internal_r+0x5f8>
    4f78:	00800044 	movi	r2,1
    4f7c:	dc400d17 	ldw	r17,52(sp)
    4f80:	18800115 	stw	r2,4(r3)
    4f84:	d8814917 	ldw	r2,1316(sp)
    4f88:	94800044 	addi	r18,r18,1
    4f8c:	8c400044 	addi	r17,r17,1
    4f90:	18800015 	stw	r2,0(r3)
    4f94:	008001c4 	movi	r2,7
    4f98:	dc800e15 	stw	r18,56(sp)
    4f9c:	dc400d15 	stw	r17,52(sp)
    4fa0:	14421e0e 	bge	r2,r17,581c <___vfprintf_internal_r+0x1408>
    4fa4:	d9014f17 	ldw	r4,1340(sp)
    4fa8:	b00b883a 	mov	r5,r22
    4fac:	d9800c04 	addi	r6,sp,48
    4fb0:	00043bc0 	call	43bc <__sprint_r>
    4fb4:	103ecf1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4fb8:	dc800e17 	ldw	r18,56(sp)
    4fbc:	d8c01904 	addi	r3,sp,100
    4fc0:	003e9206 	br	4a0c <___vfprintf_internal_r+0x5f8>
    4fc4:	d9014f17 	ldw	r4,1340(sp)
    4fc8:	b00b883a 	mov	r5,r22
    4fcc:	d9800c04 	addi	r6,sp,48
    4fd0:	00043bc0 	call	43bc <__sprint_r>
    4fd4:	103ec026 	beq	r2,zero,4ad8 <___vfprintf_internal_r+0x6c4>
    4fd8:	003ec606 	br	4af4 <___vfprintf_internal_r+0x6e0>
    4fdc:	d9014f17 	ldw	r4,1340(sp)
    4fe0:	b00b883a 	mov	r5,r22
    4fe4:	d9800c04 	addi	r6,sp,48
    4fe8:	d9c15115 	stw	r7,1348(sp)
    4fec:	00043bc0 	call	43bc <__sprint_r>
    4ff0:	d9c15117 	ldw	r7,1348(sp)
    4ff4:	103ebf1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    4ff8:	dc800e17 	ldw	r18,56(sp)
    4ffc:	dc400d17 	ldw	r17,52(sp)
    5000:	dd401904 	addi	r21,sp,100
    5004:	003e7406 	br	49d8 <___vfprintf_internal_r+0x5c4>
    5008:	d9014f17 	ldw	r4,1340(sp)
    500c:	b00b883a 	mov	r5,r22
    5010:	d9800c04 	addi	r6,sp,48
    5014:	d9c15115 	stw	r7,1348(sp)
    5018:	00043bc0 	call	43bc <__sprint_r>
    501c:	d9c15117 	ldw	r7,1348(sp)
    5020:	103eb41e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5024:	dd401904 	addi	r21,sp,100
    5028:	003d6d06 	br	45e0 <___vfprintf_internal_r+0x1cc>
    502c:	d9014f17 	ldw	r4,1340(sp)
    5030:	b00b883a 	mov	r5,r22
    5034:	d9800c04 	addi	r6,sp,48
    5038:	d9c15115 	stw	r7,1348(sp)
    503c:	00043bc0 	call	43bc <__sprint_r>
    5040:	d9c15117 	ldw	r7,1348(sp)
    5044:	103eab1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5048:	dc800e17 	ldw	r18,56(sp)
    504c:	dc400d17 	ldw	r17,52(sp)
    5050:	dd401904 	addi	r21,sp,100
    5054:	003e3406 	br	4928 <___vfprintf_internal_r+0x514>
    5058:	d9014f17 	ldw	r4,1340(sp)
    505c:	b00b883a 	mov	r5,r22
    5060:	d9800c04 	addi	r6,sp,48
    5064:	d9c15115 	stw	r7,1348(sp)
    5068:	00043bc0 	call	43bc <__sprint_r>
    506c:	d9c15117 	ldw	r7,1348(sp)
    5070:	103ea01e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5074:	dc800e17 	ldw	r18,56(sp)
    5078:	dc400d17 	ldw	r17,52(sp)
    507c:	dd401904 	addi	r21,sp,100
    5080:	003e1c06 	br	48f4 <___vfprintf_internal_r+0x4e0>
    5084:	d9014f17 	ldw	r4,1340(sp)
    5088:	b00b883a 	mov	r5,r22
    508c:	d9800c04 	addi	r6,sp,48
    5090:	d9c15115 	stw	r7,1348(sp)
    5094:	00043bc0 	call	43bc <__sprint_r>
    5098:	d9c15117 	ldw	r7,1348(sp)
    509c:	103e951e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    50a0:	dc800e17 	ldw	r18,56(sp)
    50a4:	dc400d17 	ldw	r17,52(sp)
    50a8:	dd401904 	addi	r21,sp,100
    50ac:	003e0406 	br	48c0 <___vfprintf_internal_r+0x4ac>
    50b0:	d9000517 	ldw	r4,20(sp)
    50b4:	0102520e 	bge	zero,r4,5a00 <___vfprintf_internal_r+0x15ec>
    50b8:	d9814717 	ldw	r6,1308(sp)
    50bc:	21807a16 	blt	r4,r6,52a8 <___vfprintf_internal_r+0xe94>
    50c0:	d8814117 	ldw	r2,1284(sp)
    50c4:	91a5883a 	add	r18,r18,r6
    50c8:	8c400044 	addi	r17,r17,1
    50cc:	a8800015 	stw	r2,0(r21)
    50d0:	008001c4 	movi	r2,7
    50d4:	a9800115 	stw	r6,4(r21)
    50d8:	dc800e15 	stw	r18,56(sp)
    50dc:	dc400d15 	stw	r17,52(sp)
    50e0:	1442f616 	blt	r2,r17,5cbc <___vfprintf_internal_r+0x18a8>
    50e4:	a8c00204 	addi	r3,r21,8
    50e8:	d9414717 	ldw	r5,1308(sp)
    50ec:	2161c83a 	sub	r16,r4,r5
    50f0:	043f9d0e 	bge	zero,r16,4f68 <___vfprintf_internal_r+0xb54>
    50f4:	00800404 	movi	r2,16
    50f8:	1402130e 	bge	r2,r16,5948 <___vfprintf_internal_r+0x1534>
    50fc:	dc400d17 	ldw	r17,52(sp)
    5100:	1027883a 	mov	r19,r2
    5104:	07000074 	movhi	fp,1
    5108:	e7141384 	addi	fp,fp,20558
    510c:	050001c4 	movi	r20,7
    5110:	00000306 	br	5120 <___vfprintf_internal_r+0xd0c>
    5114:	18c00204 	addi	r3,r3,8
    5118:	843ffc04 	addi	r16,r16,-16
    511c:	9c020d0e 	bge	r19,r16,5954 <___vfprintf_internal_r+0x1540>
    5120:	94800404 	addi	r18,r18,16
    5124:	8c400044 	addi	r17,r17,1
    5128:	1f000015 	stw	fp,0(r3)
    512c:	1cc00115 	stw	r19,4(r3)
    5130:	dc800e15 	stw	r18,56(sp)
    5134:	dc400d15 	stw	r17,52(sp)
    5138:	a47ff60e 	bge	r20,r17,5114 <___vfprintf_internal_r+0xd00>
    513c:	d9014f17 	ldw	r4,1340(sp)
    5140:	b00b883a 	mov	r5,r22
    5144:	d9800c04 	addi	r6,sp,48
    5148:	00043bc0 	call	43bc <__sprint_r>
    514c:	103e691e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5150:	dc800e17 	ldw	r18,56(sp)
    5154:	dc400d17 	ldw	r17,52(sp)
    5158:	d8c01904 	addi	r3,sp,100
    515c:	003fee06 	br	5118 <___vfprintf_internal_r+0xd04>
    5160:	d8814717 	ldw	r2,1308(sp)
    5164:	143fffc4 	addi	r16,r2,-1
    5168:	043e970e 	bge	zero,r16,4bc8 <___vfprintf_internal_r+0x7b4>
    516c:	00800404 	movi	r2,16
    5170:	1400180e 	bge	r2,r16,51d4 <___vfprintf_internal_r+0xdc0>
    5174:	1029883a 	mov	r20,r2
    5178:	07000074 	movhi	fp,1
    517c:	e7141384 	addi	fp,fp,20558
    5180:	054001c4 	movi	r21,7
    5184:	00000306 	br	5194 <___vfprintf_internal_r+0xd80>
    5188:	9cc00204 	addi	r19,r19,8
    518c:	843ffc04 	addi	r16,r16,-16
    5190:	a400120e 	bge	r20,r16,51dc <___vfprintf_internal_r+0xdc8>
    5194:	94800404 	addi	r18,r18,16
    5198:	8c400044 	addi	r17,r17,1
    519c:	9f000015 	stw	fp,0(r19)
    51a0:	9d000115 	stw	r20,4(r19)
    51a4:	dc800e15 	stw	r18,56(sp)
    51a8:	dc400d15 	stw	r17,52(sp)
    51ac:	ac7ff60e 	bge	r21,r17,5188 <___vfprintf_internal_r+0xd74>
    51b0:	d9014f17 	ldw	r4,1340(sp)
    51b4:	b00b883a 	mov	r5,r22
    51b8:	d9800c04 	addi	r6,sp,48
    51bc:	00043bc0 	call	43bc <__sprint_r>
    51c0:	103e4c1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    51c4:	dc800e17 	ldw	r18,56(sp)
    51c8:	dc400d17 	ldw	r17,52(sp)
    51cc:	dcc01904 	addi	r19,sp,100
    51d0:	003fee06 	br	518c <___vfprintf_internal_r+0xd78>
    51d4:	07000074 	movhi	fp,1
    51d8:	e7141384 	addi	fp,fp,20558
    51dc:	9425883a 	add	r18,r18,r16
    51e0:	8c400044 	addi	r17,r17,1
    51e4:	008001c4 	movi	r2,7
    51e8:	9f000015 	stw	fp,0(r19)
    51ec:	9c000115 	stw	r16,4(r19)
    51f0:	dc800e15 	stw	r18,56(sp)
    51f4:	dc400d15 	stw	r17,52(sp)
    51f8:	147e720e 	bge	r2,r17,4bc4 <___vfprintf_internal_r+0x7b0>
    51fc:	d9014f17 	ldw	r4,1340(sp)
    5200:	b00b883a 	mov	r5,r22
    5204:	d9800c04 	addi	r6,sp,48
    5208:	00043bc0 	call	43bc <__sprint_r>
    520c:	103e391e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5210:	dc800e17 	ldw	r18,56(sp)
    5214:	dc400d17 	ldw	r17,52(sp)
    5218:	dcc01904 	addi	r19,sp,100
    521c:	003e6a06 	br	4bc8 <___vfprintf_internal_r+0x7b4>
    5220:	d9014f17 	ldw	r4,1340(sp)
    5224:	b00b883a 	mov	r5,r22
    5228:	d9800c04 	addi	r6,sp,48
    522c:	d9c15115 	stw	r7,1348(sp)
    5230:	00043bc0 	call	43bc <__sprint_r>
    5234:	d9c15117 	ldw	r7,1348(sp)
    5238:	103e2e1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    523c:	dc800e17 	ldw	r18,56(sp)
    5240:	dc400d17 	ldw	r17,52(sp)
    5244:	dd401904 	addi	r21,sp,100
    5248:	003dba06 	br	4934 <___vfprintf_internal_r+0x520>
    524c:	d9014f17 	ldw	r4,1340(sp)
    5250:	b00b883a 	mov	r5,r22
    5254:	d9800c04 	addi	r6,sp,48
    5258:	00043bc0 	call	43bc <__sprint_r>
    525c:	103e251e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5260:	dc800e17 	ldw	r18,56(sp)
    5264:	dc400d17 	ldw	r17,52(sp)
    5268:	dcc01904 	addi	r19,sp,100
    526c:	003e4206 	br	4b78 <___vfprintf_internal_r+0x764>
    5270:	d9014f17 	ldw	r4,1340(sp)
    5274:	b00b883a 	mov	r5,r22
    5278:	d9800c04 	addi	r6,sp,48
    527c:	00043bc0 	call	43bc <__sprint_r>
    5280:	103e1c1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5284:	dc800e17 	ldw	r18,56(sp)
    5288:	dc400d17 	ldw	r17,52(sp)
    528c:	d8c01904 	addi	r3,sp,100
    5290:	003e2e06 	br	4b4c <___vfprintf_internal_r+0x738>
    5294:	d9414c17 	ldw	r5,1328(sp)
    5298:	2880004c 	andi	r2,r5,1
    529c:	1005003a 	cmpeq	r2,r2,zero
    52a0:	103dda1e 	bne	r2,zero,4a0c <___vfprintf_internal_r+0x5f8>
    52a4:	003e9f06 	br	4d24 <___vfprintf_internal_r+0x910>
    52a8:	d8c14117 	ldw	r3,1284(sp)
    52ac:	9125883a 	add	r18,r18,r4
    52b0:	8c400044 	addi	r17,r17,1
    52b4:	008001c4 	movi	r2,7
    52b8:	a8c00015 	stw	r3,0(r21)
    52bc:	a9000115 	stw	r4,4(r21)
    52c0:	dc800e15 	stw	r18,56(sp)
    52c4:	dc400d15 	stw	r17,52(sp)
    52c8:	14426616 	blt	r2,r17,5c64 <___vfprintf_internal_r+0x1850>
    52cc:	a8c00204 	addi	r3,r21,8
    52d0:	d9414917 	ldw	r5,1316(sp)
    52d4:	00800044 	movi	r2,1
    52d8:	94800044 	addi	r18,r18,1
    52dc:	8c400044 	addi	r17,r17,1
    52e0:	18800115 	stw	r2,4(r3)
    52e4:	008001c4 	movi	r2,7
    52e8:	19400015 	stw	r5,0(r3)
    52ec:	dc800e15 	stw	r18,56(sp)
    52f0:	dc400d15 	stw	r17,52(sp)
    52f4:	2021883a 	mov	r16,r4
    52f8:	14425016 	blt	r2,r17,5c3c <___vfprintf_internal_r+0x1828>
    52fc:	19400204 	addi	r5,r3,8
    5300:	d9814717 	ldw	r6,1308(sp)
    5304:	8c400044 	addi	r17,r17,1
    5308:	dc400d15 	stw	r17,52(sp)
    530c:	3107c83a 	sub	r3,r6,r4
    5310:	d9014117 	ldw	r4,1284(sp)
    5314:	90e5883a 	add	r18,r18,r3
    5318:	28c00115 	stw	r3,4(r5)
    531c:	8105883a 	add	r2,r16,r4
    5320:	28800015 	stw	r2,0(r5)
    5324:	008001c4 	movi	r2,7
    5328:	dc800e15 	stw	r18,56(sp)
    532c:	147f1d16 	blt	r2,r17,4fa4 <___vfprintf_internal_r+0xb90>
    5330:	28c00204 	addi	r3,r5,8
    5334:	003db506 	br	4a0c <___vfprintf_internal_r+0x5f8>
    5338:	3c000017 	ldw	r16,0(r7)
    533c:	3c400117 	ldw	r17,4(r7)
    5340:	39800204 	addi	r6,r7,8
    5344:	01000044 	movi	r4,1
    5348:	d9814015 	stw	r6,1280(sp)
    534c:	d8000405 	stb	zero,16(sp)
    5350:	003ebe06 	br	4e4c <___vfprintf_internal_r+0xa38>
    5354:	3c000017 	ldw	r16,0(r7)
    5358:	3c400117 	ldw	r17,4(r7)
    535c:	38800204 	addi	r2,r7,8
    5360:	d8814015 	stw	r2,1280(sp)
    5364:	003eb706 	br	4e44 <___vfprintf_internal_r+0xa30>
    5368:	3c000017 	ldw	r16,0(r7)
    536c:	3c400117 	ldw	r17,4(r7)
    5370:	39000204 	addi	r4,r7,8
    5374:	d9014015 	stw	r4,1280(sp)
    5378:	0009883a 	mov	r4,zero
    537c:	d8000405 	stb	zero,16(sp)
    5380:	003eb206 	br	4e4c <___vfprintf_internal_r+0xa38>
    5384:	38c00017 	ldw	r3,0(r7)
    5388:	39c00104 	addi	r7,r7,4
    538c:	d8c14a15 	stw	r3,1320(sp)
    5390:	1800d10e 	bge	r3,zero,56d8 <___vfprintf_internal_r+0x12c4>
    5394:	00c7c83a 	sub	r3,zero,r3
    5398:	d8c14a15 	stw	r3,1320(sp)
    539c:	d9014c17 	ldw	r4,1328(sp)
    53a0:	b8c00007 	ldb	r3,0(r23)
    53a4:	21000114 	ori	r4,r4,4
    53a8:	d9014c15 	stw	r4,1328(sp)
    53ac:	003c9806 	br	4610 <___vfprintf_internal_r+0x1fc>
    53b0:	d9814c17 	ldw	r6,1328(sp)
    53b4:	3080080c 	andi	r2,r6,32
    53b8:	1001f026 	beq	r2,zero,5b7c <___vfprintf_internal_r+0x1768>
    53bc:	d9014b17 	ldw	r4,1324(sp)
    53c0:	38800017 	ldw	r2,0(r7)
    53c4:	39c00104 	addi	r7,r7,4
    53c8:	d9c14015 	stw	r7,1280(sp)
    53cc:	2007d7fa 	srai	r3,r4,31
    53d0:	d9c14017 	ldw	r7,1280(sp)
    53d4:	11000015 	stw	r4,0(r2)
    53d8:	10c00115 	stw	r3,4(r2)
    53dc:	003c6906 	br	4584 <___vfprintf_internal_r+0x170>
    53e0:	b8c00007 	ldb	r3,0(r23)
    53e4:	00801b04 	movi	r2,108
    53e8:	18824f26 	beq	r3,r2,5d28 <___vfprintf_internal_r+0x1914>
    53ec:	d9414c17 	ldw	r5,1328(sp)
    53f0:	29400414 	ori	r5,r5,16
    53f4:	d9414c15 	stw	r5,1328(sp)
    53f8:	003c8506 	br	4610 <___vfprintf_internal_r+0x1fc>
    53fc:	d9814c17 	ldw	r6,1328(sp)
    5400:	b8c00007 	ldb	r3,0(r23)
    5404:	31800814 	ori	r6,r6,32
    5408:	d9814c15 	stw	r6,1328(sp)
    540c:	003c8006 	br	4610 <___vfprintf_internal_r+0x1fc>
    5410:	d8814c17 	ldw	r2,1328(sp)
    5414:	3c000017 	ldw	r16,0(r7)
    5418:	00c01e04 	movi	r3,120
    541c:	10800094 	ori	r2,r2,2
    5420:	d8814c15 	stw	r2,1328(sp)
    5424:	39c00104 	addi	r7,r7,4
    5428:	01400074 	movhi	r5,1
    542c:	2953fc04 	addi	r5,r5,20464
    5430:	00800c04 	movi	r2,48
    5434:	0023883a 	mov	r17,zero
    5438:	01000084 	movi	r4,2
    543c:	d9c14015 	stw	r7,1280(sp)
    5440:	d8c14d15 	stw	r3,1332(sp)
    5444:	d9414415 	stw	r5,1296(sp)
    5448:	d8800445 	stb	r2,17(sp)
    544c:	d8c00485 	stb	r3,18(sp)
    5450:	d8000405 	stb	zero,16(sp)
    5454:	003e7d06 	br	4e4c <___vfprintf_internal_r+0xa38>
    5458:	d8814c17 	ldw	r2,1328(sp)
    545c:	b8c00007 	ldb	r3,0(r23)
    5460:	10801014 	ori	r2,r2,64
    5464:	d8814c15 	stw	r2,1328(sp)
    5468:	003c6906 	br	4610 <___vfprintf_internal_r+0x1fc>
    546c:	d9414c17 	ldw	r5,1328(sp)
    5470:	2880020c 	andi	r2,r5,8
    5474:	1001df26 	beq	r2,zero,5bf4 <___vfprintf_internal_r+0x17e0>
    5478:	39800017 	ldw	r6,0(r7)
    547c:	38800204 	addi	r2,r7,8
    5480:	d8814015 	stw	r2,1280(sp)
    5484:	d9814215 	stw	r6,1288(sp)
    5488:	39c00117 	ldw	r7,4(r7)
    548c:	d9c14315 	stw	r7,1292(sp)
    5490:	d9014217 	ldw	r4,1288(sp)
    5494:	d9414317 	ldw	r5,1292(sp)
    5498:	000bfe80 	call	bfe8 <__isinfd>
    549c:	10021726 	beq	r2,zero,5cfc <___vfprintf_internal_r+0x18e8>
    54a0:	d9014217 	ldw	r4,1288(sp)
    54a4:	d9414317 	ldw	r5,1292(sp)
    54a8:	000d883a 	mov	r6,zero
    54ac:	000f883a 	mov	r7,zero
    54b0:	0010ec00 	call	10ec0 <__ltdf2>
    54b4:	1002ca16 	blt	r2,zero,5fe0 <___vfprintf_internal_r+0x1bcc>
    54b8:	d9414d17 	ldw	r5,1332(sp)
    54bc:	008011c4 	movi	r2,71
    54c0:	11420a16 	blt	r2,r5,5cec <___vfprintf_internal_r+0x18d8>
    54c4:	01800074 	movhi	r6,1
    54c8:	31940104 	addi	r6,r6,20484
    54cc:	d9814115 	stw	r6,1284(sp)
    54d0:	d9014c17 	ldw	r4,1328(sp)
    54d4:	00c000c4 	movi	r3,3
    54d8:	00bfdfc4 	movi	r2,-129
    54dc:	2088703a 	and	r4,r4,r2
    54e0:	180f883a 	mov	r7,r3
    54e4:	d8c14515 	stw	r3,1300(sp)
    54e8:	d9014c15 	stw	r4,1328(sp)
    54ec:	d8014615 	stw	zero,1304(sp)
    54f0:	003e6a06 	br	4e9c <___vfprintf_internal_r+0xa88>
    54f4:	38800017 	ldw	r2,0(r7)
    54f8:	00c00044 	movi	r3,1
    54fc:	39c00104 	addi	r7,r7,4
    5500:	d9c14015 	stw	r7,1280(sp)
    5504:	d9000f04 	addi	r4,sp,60
    5508:	180f883a 	mov	r7,r3
    550c:	d8c14515 	stw	r3,1300(sp)
    5510:	d9014115 	stw	r4,1284(sp)
    5514:	d8800f05 	stb	r2,60(sp)
    5518:	d8000405 	stb	zero,16(sp)
    551c:	003cac06 	br	47d0 <___vfprintf_internal_r+0x3bc>
    5520:	01400074 	movhi	r5,1
    5524:	29540704 	addi	r5,r5,20508
    5528:	d9414415 	stw	r5,1296(sp)
    552c:	d9814c17 	ldw	r6,1328(sp)
    5530:	3080080c 	andi	r2,r6,32
    5534:	1000f926 	beq	r2,zero,591c <___vfprintf_internal_r+0x1508>
    5538:	3c000017 	ldw	r16,0(r7)
    553c:	3c400117 	ldw	r17,4(r7)
    5540:	38800204 	addi	r2,r7,8
    5544:	d8814015 	stw	r2,1280(sp)
    5548:	d9414c17 	ldw	r5,1328(sp)
    554c:	2880004c 	andi	r2,r5,1
    5550:	1005003a 	cmpeq	r2,r2,zero
    5554:	1000b31e 	bne	r2,zero,5824 <___vfprintf_internal_r+0x1410>
    5558:	8444b03a 	or	r2,r16,r17
    555c:	1000b126 	beq	r2,zero,5824 <___vfprintf_internal_r+0x1410>
    5560:	d9814d17 	ldw	r6,1332(sp)
    5564:	29400094 	ori	r5,r5,2
    5568:	00800c04 	movi	r2,48
    556c:	01000084 	movi	r4,2
    5570:	d9414c15 	stw	r5,1328(sp)
    5574:	d8800445 	stb	r2,17(sp)
    5578:	d9800485 	stb	r6,18(sp)
    557c:	d8000405 	stb	zero,16(sp)
    5580:	003e3206 	br	4e4c <___vfprintf_internal_r+0xa38>
    5584:	01800074 	movhi	r6,1
    5588:	3193fc04 	addi	r6,r6,20464
    558c:	d9814415 	stw	r6,1296(sp)
    5590:	003fe606 	br	552c <___vfprintf_internal_r+0x1118>
    5594:	00800ac4 	movi	r2,43
    5598:	d8800405 	stb	r2,16(sp)
    559c:	b8c00007 	ldb	r3,0(r23)
    55a0:	003c1b06 	br	4610 <___vfprintf_internal_r+0x1fc>
    55a4:	d8814c17 	ldw	r2,1328(sp)
    55a8:	b8c00007 	ldb	r3,0(r23)
    55ac:	10800054 	ori	r2,r2,1
    55b0:	d8814c15 	stw	r2,1328(sp)
    55b4:	003c1606 	br	4610 <___vfprintf_internal_r+0x1fc>
    55b8:	d8800407 	ldb	r2,16(sp)
    55bc:	1000461e 	bne	r2,zero,56d8 <___vfprintf_internal_r+0x12c4>
    55c0:	00800804 	movi	r2,32
    55c4:	d8800405 	stb	r2,16(sp)
    55c8:	b8c00007 	ldb	r3,0(r23)
    55cc:	003c1006 	br	4610 <___vfprintf_internal_r+0x1fc>
    55d0:	d9814c17 	ldw	r6,1328(sp)
    55d4:	b8c00007 	ldb	r3,0(r23)
    55d8:	31800214 	ori	r6,r6,8
    55dc:	d9814c15 	stw	r6,1328(sp)
    55e0:	003c0b06 	br	4610 <___vfprintf_internal_r+0x1fc>
    55e4:	0007883a 	mov	r3,zero
    55e8:	01000244 	movi	r4,9
    55ec:	188002a4 	muli	r2,r3,10
    55f0:	b8c00007 	ldb	r3,0(r23)
    55f4:	d9814d17 	ldw	r6,1332(sp)
    55f8:	bdc00044 	addi	r23,r23,1
    55fc:	d8c14d15 	stw	r3,1332(sp)
    5600:	d9414d17 	ldw	r5,1332(sp)
    5604:	3085883a 	add	r2,r6,r2
    5608:	10fff404 	addi	r3,r2,-48
    560c:	28bff404 	addi	r2,r5,-48
    5610:	20bff62e 	bgeu	r4,r2,55ec <___vfprintf_internal_r+0x11d8>
    5614:	d8c14a15 	stw	r3,1320(sp)
    5618:	003bff06 	br	4618 <___vfprintf_internal_r+0x204>
    561c:	d9414c17 	ldw	r5,1328(sp)
    5620:	b8c00007 	ldb	r3,0(r23)
    5624:	29402014 	ori	r5,r5,128
    5628:	d9414c15 	stw	r5,1328(sp)
    562c:	003bf806 	br	4610 <___vfprintf_internal_r+0x1fc>
    5630:	b8c00007 	ldb	r3,0(r23)
    5634:	00800a84 	movi	r2,42
    5638:	bdc00044 	addi	r23,r23,1
    563c:	18831526 	beq	r3,r2,6294 <___vfprintf_internal_r+0x1e80>
    5640:	d8c14d15 	stw	r3,1332(sp)
    5644:	18bff404 	addi	r2,r3,-48
    5648:	00c00244 	movi	r3,9
    564c:	18827836 	bltu	r3,r2,6030 <___vfprintf_internal_r+0x1c1c>
    5650:	000d883a 	mov	r6,zero
    5654:	308002a4 	muli	r2,r6,10
    5658:	b9800007 	ldb	r6,0(r23)
    565c:	d9414d17 	ldw	r5,1332(sp)
    5660:	bdc00044 	addi	r23,r23,1
    5664:	d9814d15 	stw	r6,1332(sp)
    5668:	d9014d17 	ldw	r4,1332(sp)
    566c:	1145883a 	add	r2,r2,r5
    5670:	11bff404 	addi	r6,r2,-48
    5674:	20bff404 	addi	r2,r4,-48
    5678:	18bff62e 	bgeu	r3,r2,5654 <___vfprintf_internal_r+0x1240>
    567c:	3027883a 	mov	r19,r6
    5680:	303be50e 	bge	r6,zero,4618 <___vfprintf_internal_r+0x204>
    5684:	04ffffc4 	movi	r19,-1
    5688:	003be306 	br	4618 <___vfprintf_internal_r+0x204>
    568c:	d8000405 	stb	zero,16(sp)
    5690:	39800017 	ldw	r6,0(r7)
    5694:	39c00104 	addi	r7,r7,4
    5698:	d9c14015 	stw	r7,1280(sp)
    569c:	d9814115 	stw	r6,1284(sp)
    56a0:	3001c926 	beq	r6,zero,5dc8 <___vfprintf_internal_r+0x19b4>
    56a4:	98000e16 	blt	r19,zero,56e0 <___vfprintf_internal_r+0x12cc>
    56a8:	d9014117 	ldw	r4,1284(sp)
    56ac:	000b883a 	mov	r5,zero
    56b0:	980d883a 	mov	r6,r19
    56b4:	00038800 	call	3880 <memchr>
    56b8:	10025926 	beq	r2,zero,6020 <___vfprintf_internal_r+0x1c0c>
    56bc:	d8c14117 	ldw	r3,1284(sp)
    56c0:	10cfc83a 	sub	r7,r2,r3
    56c4:	99c19e16 	blt	r19,r7,5d40 <___vfprintf_internal_r+0x192c>
    56c8:	d9c14515 	stw	r7,1300(sp)
    56cc:	38000916 	blt	r7,zero,56f4 <___vfprintf_internal_r+0x12e0>
    56d0:	d8014615 	stw	zero,1304(sp)
    56d4:	003df106 	br	4e9c <___vfprintf_internal_r+0xa88>
    56d8:	b8c00007 	ldb	r3,0(r23)
    56dc:	003bcc06 	br	4610 <___vfprintf_internal_r+0x1fc>
    56e0:	d9014117 	ldw	r4,1284(sp)
    56e4:	00043480 	call	4348 <strlen>
    56e8:	d8814515 	stw	r2,1300(sp)
    56ec:	100f883a 	mov	r7,r2
    56f0:	103ff70e 	bge	r2,zero,56d0 <___vfprintf_internal_r+0x12bc>
    56f4:	d8014515 	stw	zero,1300(sp)
    56f8:	d8014615 	stw	zero,1304(sp)
    56fc:	003de706 	br	4e9c <___vfprintf_internal_r+0xa88>
    5700:	20c03fcc 	andi	r3,r4,255
    5704:	00800044 	movi	r2,1
    5708:	18802d26 	beq	r3,r2,57c0 <___vfprintf_internal_r+0x13ac>
    570c:	18800e36 	bltu	r3,r2,5748 <___vfprintf_internal_r+0x1334>
    5710:	00800084 	movi	r2,2
    5714:	1880fa26 	beq	r3,r2,5b00 <___vfprintf_internal_r+0x16ec>
    5718:	01000074 	movhi	r4,1
    571c:	21140c04 	addi	r4,r4,20528
    5720:	00043480 	call	4348 <strlen>
    5724:	100f883a 	mov	r7,r2
    5728:	dcc14515 	stw	r19,1300(sp)
    572c:	9880010e 	bge	r19,r2,5734 <___vfprintf_internal_r+0x1320>
    5730:	d8814515 	stw	r2,1300(sp)
    5734:	00800074 	movhi	r2,1
    5738:	10940c04 	addi	r2,r2,20528
    573c:	dcc14615 	stw	r19,1304(sp)
    5740:	d8814115 	stw	r2,1284(sp)
    5744:	003dd506 	br	4e9c <___vfprintf_internal_r+0xa88>
    5748:	d9401904 	addi	r5,sp,100
    574c:	dd000f04 	addi	r20,sp,60
    5750:	d9414115 	stw	r5,1284(sp)
    5754:	880a977a 	slli	r5,r17,29
    5758:	d9814117 	ldw	r6,1284(sp)
    575c:	8004d0fa 	srli	r2,r16,3
    5760:	8806d0fa 	srli	r3,r17,3
    5764:	810001cc 	andi	r4,r16,7
    5768:	2884b03a 	or	r2,r5,r2
    576c:	31bfffc4 	addi	r6,r6,-1
    5770:	21000c04 	addi	r4,r4,48
    5774:	d9814115 	stw	r6,1284(sp)
    5778:	10cab03a 	or	r5,r2,r3
    577c:	31000005 	stb	r4,0(r6)
    5780:	1021883a 	mov	r16,r2
    5784:	1823883a 	mov	r17,r3
    5788:	283ff21e 	bne	r5,zero,5754 <___vfprintf_internal_r+0x1340>
    578c:	d8c14c17 	ldw	r3,1328(sp)
    5790:	1880004c 	andi	r2,r3,1
    5794:	1005003a 	cmpeq	r2,r2,zero
    5798:	103db91e 	bne	r2,zero,4e80 <___vfprintf_internal_r+0xa6c>
    579c:	20803fcc 	andi	r2,r4,255
    57a0:	1080201c 	xori	r2,r2,128
    57a4:	10bfe004 	addi	r2,r2,-128
    57a8:	00c00c04 	movi	r3,48
    57ac:	10fdb426 	beq	r2,r3,4e80 <___vfprintf_internal_r+0xa6c>
    57b0:	31bfffc4 	addi	r6,r6,-1
    57b4:	d9814115 	stw	r6,1284(sp)
    57b8:	30c00005 	stb	r3,0(r6)
    57bc:	003db006 	br	4e80 <___vfprintf_internal_r+0xa6c>
    57c0:	88800068 	cmpgeui	r2,r17,1
    57c4:	10002c1e 	bne	r2,zero,5878 <___vfprintf_internal_r+0x1464>
    57c8:	8800021e 	bne	r17,zero,57d4 <___vfprintf_internal_r+0x13c0>
    57cc:	00800244 	movi	r2,9
    57d0:	14002936 	bltu	r2,r16,5878 <___vfprintf_internal_r+0x1464>
    57d4:	d90018c4 	addi	r4,sp,99
    57d8:	dd000f04 	addi	r20,sp,60
    57dc:	d9014115 	stw	r4,1284(sp)
    57e0:	d9014117 	ldw	r4,1284(sp)
    57e4:	80800c04 	addi	r2,r16,48
    57e8:	20800005 	stb	r2,0(r4)
    57ec:	003da406 	br	4e80 <___vfprintf_internal_r+0xa6c>
    57f0:	dc400d17 	ldw	r17,52(sp)
    57f4:	07000074 	movhi	fp,1
    57f8:	e7141384 	addi	fp,fp,20558
    57fc:	9425883a 	add	r18,r18,r16
    5800:	8c400044 	addi	r17,r17,1
    5804:	008001c4 	movi	r2,7
    5808:	1f000015 	stw	fp,0(r3)
    580c:	1c000115 	stw	r16,4(r3)
    5810:	dc800e15 	stw	r18,56(sp)
    5814:	dc400d15 	stw	r17,52(sp)
    5818:	147de216 	blt	r2,r17,4fa4 <___vfprintf_internal_r+0xb90>
    581c:	18c00204 	addi	r3,r3,8
    5820:	003c7a06 	br	4a0c <___vfprintf_internal_r+0x5f8>
    5824:	01000084 	movi	r4,2
    5828:	d8000405 	stb	zero,16(sp)
    582c:	003d8706 	br	4e4c <___vfprintf_internal_r+0xa38>
    5830:	d9814c17 	ldw	r6,1328(sp)
    5834:	30c4703a 	and	r2,r6,r3
    5838:	1005003a 	cmpeq	r2,r2,zero
    583c:	103cb926 	beq	r2,zero,4b24 <___vfprintf_internal_r+0x710>
    5840:	d9014117 	ldw	r4,1284(sp)
    5844:	94800044 	addi	r18,r18,1
    5848:	8c400044 	addi	r17,r17,1
    584c:	008001c4 	movi	r2,7
    5850:	a9000015 	stw	r4,0(r21)
    5854:	a8c00115 	stw	r3,4(r21)
    5858:	dc800e15 	stw	r18,56(sp)
    585c:	dc400d15 	stw	r17,52(sp)
    5860:	147e6616 	blt	r2,r17,51fc <___vfprintf_internal_r+0xde8>
    5864:	acc00204 	addi	r19,r21,8
    5868:	003cd706 	br	4bc8 <___vfprintf_internal_r+0x7b4>
    586c:	07000074 	movhi	fp,1
    5870:	e7141384 	addi	fp,fp,20558
    5874:	003c4f06 	br	49b4 <___vfprintf_internal_r+0x5a0>
    5878:	dd000f04 	addi	r20,sp,60
    587c:	dc801904 	addi	r18,sp,100
    5880:	8009883a 	mov	r4,r16
    5884:	880b883a 	mov	r5,r17
    5888:	01800284 	movi	r6,10
    588c:	000f883a 	mov	r7,zero
    5890:	000fa680 	call	fa68 <__umoddi3>
    5894:	12000c04 	addi	r8,r2,48
    5898:	94bfffc4 	addi	r18,r18,-1
    589c:	8009883a 	mov	r4,r16
    58a0:	880b883a 	mov	r5,r17
    58a4:	01800284 	movi	r6,10
    58a8:	000f883a 	mov	r7,zero
    58ac:	92000005 	stb	r8,0(r18)
    58b0:	000f48c0 	call	f48c <__udivdi3>
    58b4:	1009883a 	mov	r4,r2
    58b8:	1021883a 	mov	r16,r2
    58bc:	18800068 	cmpgeui	r2,r3,1
    58c0:	1823883a 	mov	r17,r3
    58c4:	103fee1e 	bne	r2,zero,5880 <___vfprintf_internal_r+0x146c>
    58c8:	1800021e 	bne	r3,zero,58d4 <___vfprintf_internal_r+0x14c0>
    58cc:	00800244 	movi	r2,9
    58d0:	113feb36 	bltu	r2,r4,5880 <___vfprintf_internal_r+0x146c>
    58d4:	94bfffc4 	addi	r18,r18,-1
    58d8:	dc814115 	stw	r18,1284(sp)
    58dc:	003fc006 	br	57e0 <___vfprintf_internal_r+0x13cc>
    58e0:	d9014c17 	ldw	r4,1328(sp)
    58e4:	2080004c 	andi	r2,r4,1
    58e8:	10009a1e 	bne	r2,zero,5b54 <___vfprintf_internal_r+0x1740>
    58ec:	d9401904 	addi	r5,sp,100
    58f0:	dd000f04 	addi	r20,sp,60
    58f4:	d9414115 	stw	r5,1284(sp)
    58f8:	003d6106 	br	4e80 <___vfprintf_internal_r+0xa6c>
    58fc:	d9014f17 	ldw	r4,1340(sp)
    5900:	b00b883a 	mov	r5,r22
    5904:	d9800c04 	addi	r6,sp,48
    5908:	00043bc0 	call	43bc <__sprint_r>
    590c:	103c791e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5910:	dc800e17 	ldw	r18,56(sp)
    5914:	d8c01904 	addi	r3,sp,100
    5918:	003cff06 	br	4d18 <___vfprintf_internal_r+0x904>
    591c:	d8c14c17 	ldw	r3,1328(sp)
    5920:	1880040c 	andi	r2,r3,16
    5924:	1000711e 	bne	r2,zero,5aec <___vfprintf_internal_r+0x16d8>
    5928:	d9014c17 	ldw	r4,1328(sp)
    592c:	2080100c 	andi	r2,r4,64
    5930:	10006e26 	beq	r2,zero,5aec <___vfprintf_internal_r+0x16d8>
    5934:	3c00000b 	ldhu	r16,0(r7)
    5938:	0023883a 	mov	r17,zero
    593c:	39c00104 	addi	r7,r7,4
    5940:	d9c14015 	stw	r7,1280(sp)
    5944:	003f0006 	br	5548 <___vfprintf_internal_r+0x1134>
    5948:	dc400d17 	ldw	r17,52(sp)
    594c:	07000074 	movhi	fp,1
    5950:	e7141384 	addi	fp,fp,20558
    5954:	9425883a 	add	r18,r18,r16
    5958:	8c400044 	addi	r17,r17,1
    595c:	008001c4 	movi	r2,7
    5960:	1f000015 	stw	fp,0(r3)
    5964:	1c000115 	stw	r16,4(r3)
    5968:	dc800e15 	stw	r18,56(sp)
    596c:	dc400d15 	stw	r17,52(sp)
    5970:	147d7616 	blt	r2,r17,4f4c <___vfprintf_internal_r+0xb38>
    5974:	18c00204 	addi	r3,r3,8
    5978:	003d7b06 	br	4f68 <___vfprintf_internal_r+0xb54>
    597c:	dc800e17 	ldw	r18,56(sp)
    5980:	dc400d17 	ldw	r17,52(sp)
    5984:	07000074 	movhi	fp,1
    5988:	e7141784 	addi	fp,fp,20574
    598c:	003bc006 	br	4890 <___vfprintf_internal_r+0x47c>
    5990:	d9014f17 	ldw	r4,1340(sp)
    5994:	b00b883a 	mov	r5,r22
    5998:	d9800c04 	addi	r6,sp,48
    599c:	00043bc0 	call	43bc <__sprint_r>
    59a0:	103c541e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    59a4:	dc800e17 	ldw	r18,56(sp)
    59a8:	d8c01904 	addi	r3,sp,100
    59ac:	003ce906 	br	4d54 <___vfprintf_internal_r+0x940>
    59b0:	3c000017 	ldw	r16,0(r7)
    59b4:	0009883a 	mov	r4,zero
    59b8:	39c00104 	addi	r7,r7,4
    59bc:	0023883a 	mov	r17,zero
    59c0:	d9c14015 	stw	r7,1280(sp)
    59c4:	d8000405 	stb	zero,16(sp)
    59c8:	003d2006 	br	4e4c <___vfprintf_internal_r+0xa38>
    59cc:	38800017 	ldw	r2,0(r7)
    59d0:	39c00104 	addi	r7,r7,4
    59d4:	d9c14015 	stw	r7,1280(sp)
    59d8:	1023d7fa 	srai	r17,r2,31
    59dc:	1021883a 	mov	r16,r2
    59e0:	003d1806 	br	4e44 <___vfprintf_internal_r+0xa30>
    59e4:	3c000017 	ldw	r16,0(r7)
    59e8:	01000044 	movi	r4,1
    59ec:	39c00104 	addi	r7,r7,4
    59f0:	0023883a 	mov	r17,zero
    59f4:	d9c14015 	stw	r7,1280(sp)
    59f8:	d8000405 	stb	zero,16(sp)
    59fc:	003d1306 	br	4e4c <___vfprintf_internal_r+0xa38>
    5a00:	00800074 	movhi	r2,1
    5a04:	10941304 	addi	r2,r2,20556
    5a08:	94800044 	addi	r18,r18,1
    5a0c:	8c400044 	addi	r17,r17,1
    5a10:	a8800015 	stw	r2,0(r21)
    5a14:	00c00044 	movi	r3,1
    5a18:	008001c4 	movi	r2,7
    5a1c:	a8c00115 	stw	r3,4(r21)
    5a20:	dc800e15 	stw	r18,56(sp)
    5a24:	dc400d15 	stw	r17,52(sp)
    5a28:	1440ca16 	blt	r2,r17,5d54 <___vfprintf_internal_r+0x1940>
    5a2c:	a8c00204 	addi	r3,r21,8
    5a30:	2000061e 	bne	r4,zero,5a4c <___vfprintf_internal_r+0x1638>
    5a34:	d9414717 	ldw	r5,1308(sp)
    5a38:	2800041e 	bne	r5,zero,5a4c <___vfprintf_internal_r+0x1638>
    5a3c:	d9814c17 	ldw	r6,1328(sp)
    5a40:	3080004c 	andi	r2,r6,1
    5a44:	1005003a 	cmpeq	r2,r2,zero
    5a48:	103bf01e 	bne	r2,zero,4a0c <___vfprintf_internal_r+0x5f8>
    5a4c:	00800044 	movi	r2,1
    5a50:	dc400d17 	ldw	r17,52(sp)
    5a54:	18800115 	stw	r2,4(r3)
    5a58:	d8814917 	ldw	r2,1316(sp)
    5a5c:	94800044 	addi	r18,r18,1
    5a60:	8c400044 	addi	r17,r17,1
    5a64:	18800015 	stw	r2,0(r3)
    5a68:	008001c4 	movi	r2,7
    5a6c:	dc800e15 	stw	r18,56(sp)
    5a70:	dc400d15 	stw	r17,52(sp)
    5a74:	1440ca16 	blt	r2,r17,5da0 <___vfprintf_internal_r+0x198c>
    5a78:	18c00204 	addi	r3,r3,8
    5a7c:	0121c83a 	sub	r16,zero,r4
    5a80:	0400500e 	bge	zero,r16,5bc4 <___vfprintf_internal_r+0x17b0>
    5a84:	00800404 	movi	r2,16
    5a88:	1400800e 	bge	r2,r16,5c8c <___vfprintf_internal_r+0x1878>
    5a8c:	1027883a 	mov	r19,r2
    5a90:	07000074 	movhi	fp,1
    5a94:	e7141384 	addi	fp,fp,20558
    5a98:	050001c4 	movi	r20,7
    5a9c:	00000306 	br	5aac <___vfprintf_internal_r+0x1698>
    5aa0:	18c00204 	addi	r3,r3,8
    5aa4:	843ffc04 	addi	r16,r16,-16
    5aa8:	9c007a0e 	bge	r19,r16,5c94 <___vfprintf_internal_r+0x1880>
    5aac:	94800404 	addi	r18,r18,16
    5ab0:	8c400044 	addi	r17,r17,1
    5ab4:	1f000015 	stw	fp,0(r3)
    5ab8:	1cc00115 	stw	r19,4(r3)
    5abc:	dc800e15 	stw	r18,56(sp)
    5ac0:	dc400d15 	stw	r17,52(sp)
    5ac4:	a47ff60e 	bge	r20,r17,5aa0 <___vfprintf_internal_r+0x168c>
    5ac8:	d9014f17 	ldw	r4,1340(sp)
    5acc:	b00b883a 	mov	r5,r22
    5ad0:	d9800c04 	addi	r6,sp,48
    5ad4:	00043bc0 	call	43bc <__sprint_r>
    5ad8:	103c061e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5adc:	dc800e17 	ldw	r18,56(sp)
    5ae0:	dc400d17 	ldw	r17,52(sp)
    5ae4:	d8c01904 	addi	r3,sp,100
    5ae8:	003fee06 	br	5aa4 <___vfprintf_internal_r+0x1690>
    5aec:	3c000017 	ldw	r16,0(r7)
    5af0:	0023883a 	mov	r17,zero
    5af4:	39c00104 	addi	r7,r7,4
    5af8:	d9c14015 	stw	r7,1280(sp)
    5afc:	003e9206 	br	5548 <___vfprintf_internal_r+0x1134>
    5b00:	d9401904 	addi	r5,sp,100
    5b04:	dd000f04 	addi	r20,sp,60
    5b08:	d9414115 	stw	r5,1284(sp)
    5b0c:	d9814417 	ldw	r6,1296(sp)
    5b10:	880a973a 	slli	r5,r17,28
    5b14:	8004d13a 	srli	r2,r16,4
    5b18:	810003cc 	andi	r4,r16,15
    5b1c:	3109883a 	add	r4,r6,r4
    5b20:	2884b03a 	or	r2,r5,r2
    5b24:	21400003 	ldbu	r5,0(r4)
    5b28:	d9014117 	ldw	r4,1284(sp)
    5b2c:	8806d13a 	srli	r3,r17,4
    5b30:	1021883a 	mov	r16,r2
    5b34:	213fffc4 	addi	r4,r4,-1
    5b38:	d9014115 	stw	r4,1284(sp)
    5b3c:	d9814117 	ldw	r6,1284(sp)
    5b40:	10c8b03a 	or	r4,r2,r3
    5b44:	1823883a 	mov	r17,r3
    5b48:	31400005 	stb	r5,0(r6)
    5b4c:	203fef1e 	bne	r4,zero,5b0c <___vfprintf_internal_r+0x16f8>
    5b50:	003ccb06 	br	4e80 <___vfprintf_internal_r+0xa6c>
    5b54:	00800c04 	movi	r2,48
    5b58:	d98018c4 	addi	r6,sp,99
    5b5c:	dd000f04 	addi	r20,sp,60
    5b60:	d88018c5 	stb	r2,99(sp)
    5b64:	d9814115 	stw	r6,1284(sp)
    5b68:	003cc506 	br	4e80 <___vfprintf_internal_r+0xa6c>
    5b6c:	dc400d17 	ldw	r17,52(sp)
    5b70:	07000074 	movhi	fp,1
    5b74:	e7141784 	addi	fp,fp,20574
    5b78:	003bc706 	br	4a98 <___vfprintf_internal_r+0x684>
    5b7c:	d9414c17 	ldw	r5,1328(sp)
    5b80:	2880040c 	andi	r2,r5,16
    5b84:	10007c26 	beq	r2,zero,5d78 <___vfprintf_internal_r+0x1964>
    5b88:	38800017 	ldw	r2,0(r7)
    5b8c:	39c00104 	addi	r7,r7,4
    5b90:	d9c14015 	stw	r7,1280(sp)
    5b94:	d9814b17 	ldw	r6,1324(sp)
    5b98:	d9c14017 	ldw	r7,1280(sp)
    5b9c:	11800015 	stw	r6,0(r2)
    5ba0:	003a7806 	br	4584 <___vfprintf_internal_r+0x170>
    5ba4:	d9014f17 	ldw	r4,1340(sp)
    5ba8:	b00b883a 	mov	r5,r22
    5bac:	d9800c04 	addi	r6,sp,48
    5bb0:	00043bc0 	call	43bc <__sprint_r>
    5bb4:	103bcf1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5bb8:	dc800e17 	ldw	r18,56(sp)
    5bbc:	dc400d17 	ldw	r17,52(sp)
    5bc0:	d8c01904 	addi	r3,sp,100
    5bc4:	d9014717 	ldw	r4,1308(sp)
    5bc8:	d9414117 	ldw	r5,1284(sp)
    5bcc:	8c400044 	addi	r17,r17,1
    5bd0:	9125883a 	add	r18,r18,r4
    5bd4:	008001c4 	movi	r2,7
    5bd8:	19400015 	stw	r5,0(r3)
    5bdc:	19000115 	stw	r4,4(r3)
    5be0:	dc800e15 	stw	r18,56(sp)
    5be4:	dc400d15 	stw	r17,52(sp)
    5be8:	147cee16 	blt	r2,r17,4fa4 <___vfprintf_internal_r+0xb90>
    5bec:	18c00204 	addi	r3,r3,8
    5bf0:	003b8606 	br	4a0c <___vfprintf_internal_r+0x5f8>
    5bf4:	38c00017 	ldw	r3,0(r7)
    5bf8:	39000204 	addi	r4,r7,8
    5bfc:	d9014015 	stw	r4,1280(sp)
    5c00:	d8c14215 	stw	r3,1288(sp)
    5c04:	39c00117 	ldw	r7,4(r7)
    5c08:	d9c14315 	stw	r7,1292(sp)
    5c0c:	003e2006 	br	5490 <___vfprintf_internal_r+0x107c>
    5c10:	0005883a 	mov	r2,zero
    5c14:	1409c83a 	sub	r4,r2,r16
    5c18:	1105803a 	cmpltu	r2,r2,r4
    5c1c:	044bc83a 	sub	r5,zero,r17
    5c20:	2885c83a 	sub	r2,r5,r2
    5c24:	2021883a 	mov	r16,r4
    5c28:	1023883a 	mov	r17,r2
    5c2c:	01000044 	movi	r4,1
    5c30:	00800b44 	movi	r2,45
    5c34:	d8800405 	stb	r2,16(sp)
    5c38:	003c8406 	br	4e4c <___vfprintf_internal_r+0xa38>
    5c3c:	d9014f17 	ldw	r4,1340(sp)
    5c40:	b00b883a 	mov	r5,r22
    5c44:	d9800c04 	addi	r6,sp,48
    5c48:	00043bc0 	call	43bc <__sprint_r>
    5c4c:	103ba91e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5c50:	dc800e17 	ldw	r18,56(sp)
    5c54:	dc400d17 	ldw	r17,52(sp)
    5c58:	d9000517 	ldw	r4,20(sp)
    5c5c:	d9401904 	addi	r5,sp,100
    5c60:	003da706 	br	5300 <___vfprintf_internal_r+0xeec>
    5c64:	d9014f17 	ldw	r4,1340(sp)
    5c68:	b00b883a 	mov	r5,r22
    5c6c:	d9800c04 	addi	r6,sp,48
    5c70:	00043bc0 	call	43bc <__sprint_r>
    5c74:	103b9f1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5c78:	dc800e17 	ldw	r18,56(sp)
    5c7c:	dc400d17 	ldw	r17,52(sp)
    5c80:	d9000517 	ldw	r4,20(sp)
    5c84:	d8c01904 	addi	r3,sp,100
    5c88:	003d9106 	br	52d0 <___vfprintf_internal_r+0xebc>
    5c8c:	07000074 	movhi	fp,1
    5c90:	e7141384 	addi	fp,fp,20558
    5c94:	9425883a 	add	r18,r18,r16
    5c98:	8c400044 	addi	r17,r17,1
    5c9c:	008001c4 	movi	r2,7
    5ca0:	1f000015 	stw	fp,0(r3)
    5ca4:	1c000115 	stw	r16,4(r3)
    5ca8:	dc800e15 	stw	r18,56(sp)
    5cac:	dc400d15 	stw	r17,52(sp)
    5cb0:	147fbc16 	blt	r2,r17,5ba4 <___vfprintf_internal_r+0x1790>
    5cb4:	18c00204 	addi	r3,r3,8
    5cb8:	003fc206 	br	5bc4 <___vfprintf_internal_r+0x17b0>
    5cbc:	d9014f17 	ldw	r4,1340(sp)
    5cc0:	b00b883a 	mov	r5,r22
    5cc4:	d9800c04 	addi	r6,sp,48
    5cc8:	00043bc0 	call	43bc <__sprint_r>
    5ccc:	103b891e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5cd0:	dc800e17 	ldw	r18,56(sp)
    5cd4:	d9000517 	ldw	r4,20(sp)
    5cd8:	d8c01904 	addi	r3,sp,100
    5cdc:	003d0206 	br	50e8 <___vfprintf_internal_r+0xcd4>
    5ce0:	07000074 	movhi	fp,1
    5ce4:	e7141384 	addi	fp,fp,20558
    5ce8:	003be406 	br	4c7c <___vfprintf_internal_r+0x868>
    5cec:	00800074 	movhi	r2,1
    5cf0:	10940204 	addi	r2,r2,20488
    5cf4:	d8814115 	stw	r2,1284(sp)
    5cf8:	003df506 	br	54d0 <___vfprintf_internal_r+0x10bc>
    5cfc:	d9014217 	ldw	r4,1288(sp)
    5d00:	d9414317 	ldw	r5,1292(sp)
    5d04:	000c0280 	call	c028 <__isnand>
    5d08:	10003926 	beq	r2,zero,5df0 <___vfprintf_internal_r+0x19dc>
    5d0c:	d9414d17 	ldw	r5,1332(sp)
    5d10:	008011c4 	movi	r2,71
    5d14:	1140ce16 	blt	r2,r5,6050 <___vfprintf_internal_r+0x1c3c>
    5d18:	01800074 	movhi	r6,1
    5d1c:	31940304 	addi	r6,r6,20492
    5d20:	d9814115 	stw	r6,1284(sp)
    5d24:	003dea06 	br	54d0 <___vfprintf_internal_r+0x10bc>
    5d28:	d9014c17 	ldw	r4,1328(sp)
    5d2c:	bdc00044 	addi	r23,r23,1
    5d30:	b8c00007 	ldb	r3,0(r23)
    5d34:	21000814 	ori	r4,r4,32
    5d38:	d9014c15 	stw	r4,1328(sp)
    5d3c:	003a3406 	br	4610 <___vfprintf_internal_r+0x1fc>
    5d40:	dcc14515 	stw	r19,1300(sp)
    5d44:	98011016 	blt	r19,zero,6188 <___vfprintf_internal_r+0x1d74>
    5d48:	980f883a 	mov	r7,r19
    5d4c:	d8014615 	stw	zero,1304(sp)
    5d50:	003c5206 	br	4e9c <___vfprintf_internal_r+0xa88>
    5d54:	d9014f17 	ldw	r4,1340(sp)
    5d58:	b00b883a 	mov	r5,r22
    5d5c:	d9800c04 	addi	r6,sp,48
    5d60:	00043bc0 	call	43bc <__sprint_r>
    5d64:	103b631e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5d68:	dc800e17 	ldw	r18,56(sp)
    5d6c:	d9000517 	ldw	r4,20(sp)
    5d70:	d8c01904 	addi	r3,sp,100
    5d74:	003f2e06 	br	5a30 <___vfprintf_internal_r+0x161c>
    5d78:	d8c14c17 	ldw	r3,1328(sp)
    5d7c:	1880100c 	andi	r2,r3,64
    5d80:	1000a026 	beq	r2,zero,6004 <___vfprintf_internal_r+0x1bf0>
    5d84:	38800017 	ldw	r2,0(r7)
    5d88:	39c00104 	addi	r7,r7,4
    5d8c:	d9c14015 	stw	r7,1280(sp)
    5d90:	d9014b17 	ldw	r4,1324(sp)
    5d94:	d9c14017 	ldw	r7,1280(sp)
    5d98:	1100000d 	sth	r4,0(r2)
    5d9c:	0039f906 	br	4584 <___vfprintf_internal_r+0x170>
    5da0:	d9014f17 	ldw	r4,1340(sp)
    5da4:	b00b883a 	mov	r5,r22
    5da8:	d9800c04 	addi	r6,sp,48
    5dac:	00043bc0 	call	43bc <__sprint_r>
    5db0:	103b501e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    5db4:	dc800e17 	ldw	r18,56(sp)
    5db8:	dc400d17 	ldw	r17,52(sp)
    5dbc:	d9000517 	ldw	r4,20(sp)
    5dc0:	d8c01904 	addi	r3,sp,100
    5dc4:	003f2d06 	br	5a7c <___vfprintf_internal_r+0x1668>
    5dc8:	00800184 	movi	r2,6
    5dcc:	14c09a36 	bltu	r2,r19,6038 <___vfprintf_internal_r+0x1c24>
    5dd0:	dcc14515 	stw	r19,1300(sp)
    5dd4:	9800010e 	bge	r19,zero,5ddc <___vfprintf_internal_r+0x19c8>
    5dd8:	d8014515 	stw	zero,1300(sp)
    5ddc:	00800074 	movhi	r2,1
    5de0:	10940504 	addi	r2,r2,20500
    5de4:	980f883a 	mov	r7,r19
    5de8:	d8814115 	stw	r2,1284(sp)
    5dec:	003a7806 	br	47d0 <___vfprintf_internal_r+0x3bc>
    5df0:	00bfffc4 	movi	r2,-1
    5df4:	9880e226 	beq	r19,r2,6180 <___vfprintf_internal_r+0x1d6c>
    5df8:	d9414d17 	ldw	r5,1332(sp)
    5dfc:	008019c4 	movi	r2,103
    5e00:	2880dc26 	beq	r5,r2,6174 <___vfprintf_internal_r+0x1d60>
    5e04:	008011c4 	movi	r2,71
    5e08:	2880da26 	beq	r5,r2,6174 <___vfprintf_internal_r+0x1d60>
    5e0c:	d9414c17 	ldw	r5,1328(sp)
    5e10:	d9014317 	ldw	r4,1292(sp)
    5e14:	d9814217 	ldw	r6,1288(sp)
    5e18:	29404014 	ori	r5,r5,256
    5e1c:	d9414c15 	stw	r5,1328(sp)
    5e20:	2000cc16 	blt	r4,zero,6154 <___vfprintf_internal_r+0x1d40>
    5e24:	3021883a 	mov	r16,r6
    5e28:	2023883a 	mov	r17,r4
    5e2c:	0039883a 	mov	fp,zero
    5e30:	d9414d17 	ldw	r5,1332(sp)
    5e34:	00801984 	movi	r2,102
    5e38:	2880b726 	beq	r5,r2,6118 <___vfprintf_internal_r+0x1d04>
    5e3c:	00801184 	movi	r2,70
    5e40:	2880b526 	beq	r5,r2,6118 <___vfprintf_internal_r+0x1d04>
    5e44:	00801944 	movi	r2,101
    5e48:	2880c826 	beq	r5,r2,616c <___vfprintf_internal_r+0x1d58>
    5e4c:	00801144 	movi	r2,69
    5e50:	2880c626 	beq	r5,r2,616c <___vfprintf_internal_r+0x1d58>
    5e54:	9829883a 	mov	r20,r19
    5e58:	d9014f17 	ldw	r4,1340(sp)
    5e5c:	d8800504 	addi	r2,sp,20
    5e60:	880d883a 	mov	r6,r17
    5e64:	d8800115 	stw	r2,4(sp)
    5e68:	d8c00604 	addi	r3,sp,24
    5e6c:	d8800704 	addi	r2,sp,28
    5e70:	800b883a 	mov	r5,r16
    5e74:	01c00084 	movi	r7,2
    5e78:	d8c00215 	stw	r3,8(sp)
    5e7c:	d8800315 	stw	r2,12(sp)
    5e80:	dd000015 	stw	r20,0(sp)
    5e84:	0007ea00 	call	7ea0 <_dtoa_r>
    5e88:	d9814d17 	ldw	r6,1332(sp)
    5e8c:	d8814115 	stw	r2,1284(sp)
    5e90:	008019c4 	movi	r2,103
    5e94:	30809526 	beq	r6,r2,60ec <___vfprintf_internal_r+0x1cd8>
    5e98:	d8c14d17 	ldw	r3,1332(sp)
    5e9c:	008011c4 	movi	r2,71
    5ea0:	18809226 	beq	r3,r2,60ec <___vfprintf_internal_r+0x1cd8>
    5ea4:	d9414117 	ldw	r5,1284(sp)
    5ea8:	d9814d17 	ldw	r6,1332(sp)
    5eac:	00801984 	movi	r2,102
    5eb0:	2d25883a 	add	r18,r5,r20
    5eb4:	30808626 	beq	r6,r2,60d0 <___vfprintf_internal_r+0x1cbc>
    5eb8:	00801184 	movi	r2,70
    5ebc:	30808426 	beq	r6,r2,60d0 <___vfprintf_internal_r+0x1cbc>
    5ec0:	000d883a 	mov	r6,zero
    5ec4:	000f883a 	mov	r7,zero
    5ec8:	880b883a 	mov	r5,r17
    5ecc:	8009883a 	mov	r4,r16
    5ed0:	0010ca00 	call	10ca0 <__eqdf2>
    5ed4:	1000751e 	bne	r2,zero,60ac <___vfprintf_internal_r+0x1c98>
    5ed8:	9005883a 	mov	r2,r18
    5edc:	dc800715 	stw	r18,28(sp)
    5ee0:	d9014117 	ldw	r4,1284(sp)
    5ee4:	d9414d17 	ldw	r5,1332(sp)
    5ee8:	00c019c4 	movi	r3,103
    5eec:	1125c83a 	sub	r18,r2,r4
    5ef0:	28c06826 	beq	r5,r3,6094 <___vfprintf_internal_r+0x1c80>
    5ef4:	008011c4 	movi	r2,71
    5ef8:	28806626 	beq	r5,r2,6094 <___vfprintf_internal_r+0x1c80>
    5efc:	d9000517 	ldw	r4,20(sp)
    5f00:	d8c14d17 	ldw	r3,1332(sp)
    5f04:	00801944 	movi	r2,101
    5f08:	10c05516 	blt	r2,r3,6060 <___vfprintf_internal_r+0x1c4c>
    5f0c:	213fffc4 	addi	r4,r4,-1
    5f10:	d9000515 	stw	r4,20(sp)
    5f14:	d8c00805 	stb	r3,32(sp)
    5f18:	2021883a 	mov	r16,r4
    5f1c:	2000c116 	blt	r4,zero,6224 <___vfprintf_internal_r+0x1e10>
    5f20:	00800ac4 	movi	r2,43
    5f24:	d8800845 	stb	r2,33(sp)
    5f28:	00800244 	movi	r2,9
    5f2c:	1400af0e 	bge	r2,r16,61ec <___vfprintf_internal_r+0x1dd8>
    5f30:	1027883a 	mov	r19,r2
    5f34:	dc400b84 	addi	r17,sp,46
    5f38:	8009883a 	mov	r4,r16
    5f3c:	01400284 	movi	r5,10
    5f40:	0002b240 	call	2b24 <__modsi3>
    5f44:	10800c04 	addi	r2,r2,48
    5f48:	8c7fffc4 	addi	r17,r17,-1
    5f4c:	8009883a 	mov	r4,r16
    5f50:	01400284 	movi	r5,10
    5f54:	88800005 	stb	r2,0(r17)
    5f58:	0002ac40 	call	2ac4 <__divsi3>
    5f5c:	1021883a 	mov	r16,r2
    5f60:	98bff516 	blt	r19,r2,5f38 <___vfprintf_internal_r+0x1b24>
    5f64:	10c00c04 	addi	r3,r2,48
    5f68:	d88009c4 	addi	r2,sp,39
    5f6c:	108001c4 	addi	r2,r2,7
    5f70:	897fffc4 	addi	r5,r17,-1
    5f74:	88ffffc5 	stb	r3,-1(r17)
    5f78:	2880a72e 	bgeu	r5,r2,6218 <___vfprintf_internal_r+0x1e04>
    5f7c:	1009883a 	mov	r4,r2
    5f80:	d9800804 	addi	r6,sp,32
    5f84:	d8c00884 	addi	r3,sp,34
    5f88:	28800003 	ldbu	r2,0(r5)
    5f8c:	29400044 	addi	r5,r5,1
    5f90:	18800005 	stb	r2,0(r3)
    5f94:	18c00044 	addi	r3,r3,1
    5f98:	293ffb36 	bltu	r5,r4,5f88 <___vfprintf_internal_r+0x1b74>
    5f9c:	1987c83a 	sub	r3,r3,r6
    5fa0:	00800044 	movi	r2,1
    5fa4:	d8c14815 	stw	r3,1312(sp)
    5fa8:	90cf883a 	add	r7,r18,r3
    5fac:	1480960e 	bge	r2,r18,6208 <___vfprintf_internal_r+0x1df4>
    5fb0:	39c00044 	addi	r7,r7,1
    5fb4:	d9c14515 	stw	r7,1300(sp)
    5fb8:	38003416 	blt	r7,zero,608c <___vfprintf_internal_r+0x1c78>
    5fbc:	e0803fcc 	andi	r2,fp,255
    5fc0:	1080201c 	xori	r2,r2,128
    5fc4:	10bfe004 	addi	r2,r2,-128
    5fc8:	10004e26 	beq	r2,zero,6104 <___vfprintf_internal_r+0x1cf0>
    5fcc:	00800b44 	movi	r2,45
    5fd0:	dc814715 	stw	r18,1308(sp)
    5fd4:	d8014615 	stw	zero,1304(sp)
    5fd8:	d8800405 	stb	r2,16(sp)
    5fdc:	003bb106 	br	4ea4 <___vfprintf_internal_r+0xa90>
    5fe0:	00800b44 	movi	r2,45
    5fe4:	d8800405 	stb	r2,16(sp)
    5fe8:	003d3306 	br	54b8 <___vfprintf_internal_r+0x10a4>
    5fec:	d9014f17 	ldw	r4,1340(sp)
    5ff0:	b00b883a 	mov	r5,r22
    5ff4:	d9800c04 	addi	r6,sp,48
    5ff8:	00043bc0 	call	43bc <__sprint_r>
    5ffc:	103abd1e 	bne	r2,zero,4af4 <___vfprintf_internal_r+0x6e0>
    6000:	003abb06 	br	4af0 <___vfprintf_internal_r+0x6dc>
    6004:	38800017 	ldw	r2,0(r7)
    6008:	39c00104 	addi	r7,r7,4
    600c:	d9c14015 	stw	r7,1280(sp)
    6010:	d9414b17 	ldw	r5,1324(sp)
    6014:	d9c14017 	ldw	r7,1280(sp)
    6018:	11400015 	stw	r5,0(r2)
    601c:	00395906 	br	4584 <___vfprintf_internal_r+0x170>
    6020:	980f883a 	mov	r7,r19
    6024:	dcc14515 	stw	r19,1300(sp)
    6028:	d8014615 	stw	zero,1304(sp)
    602c:	003b9b06 	br	4e9c <___vfprintf_internal_r+0xa88>
    6030:	0027883a 	mov	r19,zero
    6034:	00397806 	br	4618 <___vfprintf_internal_r+0x204>
    6038:	00c00074 	movhi	r3,1
    603c:	18d40504 	addi	r3,r3,20500
    6040:	100f883a 	mov	r7,r2
    6044:	d8814515 	stw	r2,1300(sp)
    6048:	d8c14115 	stw	r3,1284(sp)
    604c:	0039e006 	br	47d0 <___vfprintf_internal_r+0x3bc>
    6050:	00800074 	movhi	r2,1
    6054:	10940404 	addi	r2,r2,20496
    6058:	d8814115 	stw	r2,1284(sp)
    605c:	003d1c06 	br	54d0 <___vfprintf_internal_r+0x10bc>
    6060:	d9414d17 	ldw	r5,1332(sp)
    6064:	00801984 	movi	r2,102
    6068:	28804926 	beq	r5,r2,6190 <___vfprintf_internal_r+0x1d7c>
    606c:	200f883a 	mov	r7,r4
    6070:	24805716 	blt	r4,r18,61d0 <___vfprintf_internal_r+0x1dbc>
    6074:	d9414c17 	ldw	r5,1328(sp)
    6078:	2880004c 	andi	r2,r5,1
    607c:	10000126 	beq	r2,zero,6084 <___vfprintf_internal_r+0x1c70>
    6080:	21c00044 	addi	r7,r4,1
    6084:	d9c14515 	stw	r7,1300(sp)
    6088:	383fcc0e 	bge	r7,zero,5fbc <___vfprintf_internal_r+0x1ba8>
    608c:	d8014515 	stw	zero,1300(sp)
    6090:	003fca06 	br	5fbc <___vfprintf_internal_r+0x1ba8>
    6094:	d9000517 	ldw	r4,20(sp)
    6098:	00bfff04 	movi	r2,-4
    609c:	1100480e 	bge	r2,r4,61c0 <___vfprintf_internal_r+0x1dac>
    60a0:	99004716 	blt	r19,r4,61c0 <___vfprintf_internal_r+0x1dac>
    60a4:	d8c14d15 	stw	r3,1332(sp)
    60a8:	003ff006 	br	606c <___vfprintf_internal_r+0x1c58>
    60ac:	d8800717 	ldw	r2,28(sp)
    60b0:	14bf8b2e 	bgeu	r2,r18,5ee0 <___vfprintf_internal_r+0x1acc>
    60b4:	9007883a 	mov	r3,r18
    60b8:	01000c04 	movi	r4,48
    60bc:	11000005 	stb	r4,0(r2)
    60c0:	10800044 	addi	r2,r2,1
    60c4:	d8800715 	stw	r2,28(sp)
    60c8:	18bffc1e 	bne	r3,r2,60bc <___vfprintf_internal_r+0x1ca8>
    60cc:	003f8406 	br	5ee0 <___vfprintf_internal_r+0x1acc>
    60d0:	d8814117 	ldw	r2,1284(sp)
    60d4:	10c00007 	ldb	r3,0(r2)
    60d8:	00800c04 	movi	r2,48
    60dc:	18805b26 	beq	r3,r2,624c <___vfprintf_internal_r+0x1e38>
    60e0:	d9000517 	ldw	r4,20(sp)
    60e4:	9125883a 	add	r18,r18,r4
    60e8:	003f7506 	br	5ec0 <___vfprintf_internal_r+0x1aac>
    60ec:	d9014c17 	ldw	r4,1328(sp)
    60f0:	2080004c 	andi	r2,r4,1
    60f4:	1005003a 	cmpeq	r2,r2,zero
    60f8:	103f6a26 	beq	r2,zero,5ea4 <___vfprintf_internal_r+0x1a90>
    60fc:	d8800717 	ldw	r2,28(sp)
    6100:	003f7706 	br	5ee0 <___vfprintf_internal_r+0x1acc>
    6104:	d9c14515 	stw	r7,1300(sp)
    6108:	38004d16 	blt	r7,zero,6240 <___vfprintf_internal_r+0x1e2c>
    610c:	dc814715 	stw	r18,1308(sp)
    6110:	d8014615 	stw	zero,1304(sp)
    6114:	003b6106 	br	4e9c <___vfprintf_internal_r+0xa88>
    6118:	d9014f17 	ldw	r4,1340(sp)
    611c:	d8800504 	addi	r2,sp,20
    6120:	d8800115 	stw	r2,4(sp)
    6124:	d8c00604 	addi	r3,sp,24
    6128:	d8800704 	addi	r2,sp,28
    612c:	800b883a 	mov	r5,r16
    6130:	880d883a 	mov	r6,r17
    6134:	01c000c4 	movi	r7,3
    6138:	d8c00215 	stw	r3,8(sp)
    613c:	d8800315 	stw	r2,12(sp)
    6140:	dcc00015 	stw	r19,0(sp)
    6144:	9829883a 	mov	r20,r19
    6148:	0007ea00 	call	7ea0 <_dtoa_r>
    614c:	d8814115 	stw	r2,1284(sp)
    6150:	003f5106 	br	5e98 <___vfprintf_internal_r+0x1a84>
    6154:	d8c14217 	ldw	r3,1288(sp)
    6158:	d9014317 	ldw	r4,1292(sp)
    615c:	07000b44 	movi	fp,45
    6160:	1821883a 	mov	r16,r3
    6164:	2460003c 	xorhi	r17,r4,32768
    6168:	003f3106 	br	5e30 <___vfprintf_internal_r+0x1a1c>
    616c:	9d000044 	addi	r20,r19,1
    6170:	003f3906 	br	5e58 <___vfprintf_internal_r+0x1a44>
    6174:	983f251e 	bne	r19,zero,5e0c <___vfprintf_internal_r+0x19f8>
    6178:	04c00044 	movi	r19,1
    617c:	003f2306 	br	5e0c <___vfprintf_internal_r+0x19f8>
    6180:	04c00184 	movi	r19,6
    6184:	003f2106 	br	5e0c <___vfprintf_internal_r+0x19f8>
    6188:	d8014515 	stw	zero,1300(sp)
    618c:	003eee06 	br	5d48 <___vfprintf_internal_r+0x1934>
    6190:	200f883a 	mov	r7,r4
    6194:	0100370e 	bge	zero,r4,6274 <___vfprintf_internal_r+0x1e60>
    6198:	9800031e 	bne	r19,zero,61a8 <___vfprintf_internal_r+0x1d94>
    619c:	d9814c17 	ldw	r6,1328(sp)
    61a0:	3080004c 	andi	r2,r6,1
    61a4:	103fb726 	beq	r2,zero,6084 <___vfprintf_internal_r+0x1c70>
    61a8:	20800044 	addi	r2,r4,1
    61ac:	98a7883a 	add	r19,r19,r2
    61b0:	dcc14515 	stw	r19,1300(sp)
    61b4:	980f883a 	mov	r7,r19
    61b8:	983f800e 	bge	r19,zero,5fbc <___vfprintf_internal_r+0x1ba8>
    61bc:	003fb306 	br	608c <___vfprintf_internal_r+0x1c78>
    61c0:	d9814d17 	ldw	r6,1332(sp)
    61c4:	31bfff84 	addi	r6,r6,-2
    61c8:	d9814d15 	stw	r6,1332(sp)
    61cc:	003f4c06 	br	5f00 <___vfprintf_internal_r+0x1aec>
    61d0:	0100180e 	bge	zero,r4,6234 <___vfprintf_internal_r+0x1e20>
    61d4:	00800044 	movi	r2,1
    61d8:	1485883a 	add	r2,r2,r18
    61dc:	d8814515 	stw	r2,1300(sp)
    61e0:	100f883a 	mov	r7,r2
    61e4:	103f750e 	bge	r2,zero,5fbc <___vfprintf_internal_r+0x1ba8>
    61e8:	003fa806 	br	608c <___vfprintf_internal_r+0x1c78>
    61ec:	80c00c04 	addi	r3,r16,48
    61f0:	00800c04 	movi	r2,48
    61f4:	d8c008c5 	stb	r3,35(sp)
    61f8:	d9800804 	addi	r6,sp,32
    61fc:	d8c00904 	addi	r3,sp,36
    6200:	d8800885 	stb	r2,34(sp)
    6204:	003f6506 	br	5f9c <___vfprintf_internal_r+0x1b88>
    6208:	d9014c17 	ldw	r4,1328(sp)
    620c:	2084703a 	and	r2,r4,r2
    6210:	103f9c26 	beq	r2,zero,6084 <___vfprintf_internal_r+0x1c70>
    6214:	003f6606 	br	5fb0 <___vfprintf_internal_r+0x1b9c>
    6218:	d9800804 	addi	r6,sp,32
    621c:	d8c00884 	addi	r3,sp,34
    6220:	003f5e06 	br	5f9c <___vfprintf_internal_r+0x1b88>
    6224:	00800b44 	movi	r2,45
    6228:	0121c83a 	sub	r16,zero,r4
    622c:	d8800845 	stb	r2,33(sp)
    6230:	003f3d06 	br	5f28 <___vfprintf_internal_r+0x1b14>
    6234:	00800084 	movi	r2,2
    6238:	1105c83a 	sub	r2,r2,r4
    623c:	003fe606 	br	61d8 <___vfprintf_internal_r+0x1dc4>
    6240:	d8014515 	stw	zero,1300(sp)
    6244:	dc814715 	stw	r18,1308(sp)
    6248:	003fb106 	br	6110 <___vfprintf_internal_r+0x1cfc>
    624c:	000d883a 	mov	r6,zero
    6250:	000f883a 	mov	r7,zero
    6254:	8009883a 	mov	r4,r16
    6258:	880b883a 	mov	r5,r17
    625c:	0010d280 	call	10d28 <__nedf2>
    6260:	103f9f26 	beq	r2,zero,60e0 <___vfprintf_internal_r+0x1ccc>
    6264:	00800044 	movi	r2,1
    6268:	1509c83a 	sub	r4,r2,r20
    626c:	d9000515 	stw	r4,20(sp)
    6270:	003f9b06 	br	60e0 <___vfprintf_internal_r+0x1ccc>
    6274:	98000d1e 	bne	r19,zero,62ac <___vfprintf_internal_r+0x1e98>
    6278:	d8c14c17 	ldw	r3,1328(sp)
    627c:	1880004c 	andi	r2,r3,1
    6280:	10000a1e 	bne	r2,zero,62ac <___vfprintf_internal_r+0x1e98>
    6284:	01000044 	movi	r4,1
    6288:	200f883a 	mov	r7,r4
    628c:	d9014515 	stw	r4,1300(sp)
    6290:	003f4a06 	br	5fbc <___vfprintf_internal_r+0x1ba8>
    6294:	3cc00017 	ldw	r19,0(r7)
    6298:	39c00104 	addi	r7,r7,4
    629c:	983d0e0e 	bge	r19,zero,56d8 <___vfprintf_internal_r+0x12c4>
    62a0:	b8c00007 	ldb	r3,0(r23)
    62a4:	04ffffc4 	movi	r19,-1
    62a8:	0038d906 	br	4610 <___vfprintf_internal_r+0x1fc>
    62ac:	9cc00084 	addi	r19,r19,2
    62b0:	dcc14515 	stw	r19,1300(sp)
    62b4:	980f883a 	mov	r7,r19
    62b8:	983f400e 	bge	r19,zero,5fbc <___vfprintf_internal_r+0x1ba8>
    62bc:	003f7306 	br	608c <___vfprintf_internal_r+0x1c78>

000062c0 <__vfprintf_internal>:
    62c0:	00800074 	movhi	r2,1
    62c4:	109b9704 	addi	r2,r2,28252
    62c8:	2013883a 	mov	r9,r4
    62cc:	11000017 	ldw	r4,0(r2)
    62d0:	2805883a 	mov	r2,r5
    62d4:	300f883a 	mov	r7,r6
    62d8:	480b883a 	mov	r5,r9
    62dc:	100d883a 	mov	r6,r2
    62e0:	00044141 	jmpi	4414 <___vfprintf_internal_r>

000062e4 <__svfscanf_r>:
    62e4:	deff4e04 	addi	sp,sp,-712
    62e8:	dd80ae15 	stw	r22,696(sp)
    62ec:	dd00ac15 	stw	r20,688(sp)
    62f0:	dc40a915 	stw	r17,676(sp)
    62f4:	dc00a815 	stw	r16,672(sp)
    62f8:	dfc0b115 	stw	ra,708(sp)
    62fc:	df00b015 	stw	fp,704(sp)
    6300:	ddc0af15 	stw	r23,700(sp)
    6304:	dd40ad15 	stw	r21,692(sp)
    6308:	dcc0ab15 	stw	r19,684(sp)
    630c:	dc80aa15 	stw	r18,680(sp)
    6310:	202d883a 	mov	r22,r4
    6314:	2821883a 	mov	r16,r5
    6318:	d9c0a415 	stw	r7,656(sp)
    631c:	3029883a 	mov	r20,r6
    6320:	d800a215 	stw	zero,648(sp)
    6324:	0023883a 	mov	r17,zero
    6328:	d800a115 	stw	zero,644(sp)
    632c:	d800a015 	stw	zero,640(sp)
    6330:	a1000007 	ldb	r4,0(r20)
    6334:	d9000115 	stw	r4,4(sp)
    6338:	20001f26 	beq	r4,zero,63b8 <__svfscanf_r+0xd4>
    633c:	04800074 	movhi	r18,1
    6340:	949b9604 	addi	r18,r18,28248
    6344:	91800017 	ldw	r6,0(r18)
    6348:	a5000044 	addi	r20,r20,1
    634c:	3107883a 	add	r3,r6,r4
    6350:	18800003 	ldbu	r2,0(r3)
    6354:	1080020c 	andi	r2,r2,8
    6358:	10002426 	beq	r2,zero,63ec <__svfscanf_r+0x108>
    635c:	80c00117 	ldw	r3,4(r16)
    6360:	00c00e0e 	bge	zero,r3,639c <__svfscanf_r+0xb8>
    6364:	81400017 	ldw	r5,0(r16)
    6368:	90800017 	ldw	r2,0(r18)
    636c:	28c00003 	ldbu	r3,0(r5)
    6370:	1887883a 	add	r3,r3,r2
    6374:	19000003 	ldbu	r4,0(r3)
    6378:	2100020c 	andi	r4,r4,8
    637c:	203fec26 	beq	r4,zero,6330 <__svfscanf_r+0x4c>
    6380:	80c00117 	ldw	r3,4(r16)
    6384:	29800044 	addi	r6,r5,1
    6388:	8c400044 	addi	r17,r17,1
    638c:	18ffffc4 	addi	r3,r3,-1
    6390:	81800015 	stw	r6,0(r16)
    6394:	80c00115 	stw	r3,4(r16)
    6398:	00fff216 	blt	zero,r3,6364 <__svfscanf_r+0x80>
    639c:	b009883a 	mov	r4,r22
    63a0:	800b883a 	mov	r5,r16
    63a4:	0003bec0 	call	3bec <__srefill_r>
    63a8:	103fee26 	beq	r2,zero,6364 <__svfscanf_r+0x80>
    63ac:	a1000007 	ldb	r4,0(r20)
    63b0:	d9000115 	stw	r4,4(sp)
    63b4:	203fe11e 	bne	r4,zero,633c <__svfscanf_r+0x58>
    63b8:	d880a217 	ldw	r2,648(sp)
    63bc:	dfc0b117 	ldw	ra,708(sp)
    63c0:	df00b017 	ldw	fp,704(sp)
    63c4:	ddc0af17 	ldw	r23,700(sp)
    63c8:	dd80ae17 	ldw	r22,696(sp)
    63cc:	dd40ad17 	ldw	r21,692(sp)
    63d0:	dd00ac17 	ldw	r20,688(sp)
    63d4:	dcc0ab17 	ldw	r19,684(sp)
    63d8:	dc80aa17 	ldw	r18,680(sp)
    63dc:	dc40a917 	ldw	r17,676(sp)
    63e0:	dc00a817 	ldw	r16,672(sp)
    63e4:	dec0b204 	addi	sp,sp,712
    63e8:	f800283a 	ret
    63ec:	00800944 	movi	r2,37
    63f0:	20801626 	beq	r4,r2,644c <__svfscanf_r+0x168>
    63f4:	80800117 	ldw	r2,4(r16)
    63f8:	00800b0e 	bge	zero,r2,6428 <__svfscanf_r+0x144>
    63fc:	81000017 	ldw	r4,0(r16)
    6400:	a0ffffc7 	ldb	r3,-1(r20)
    6404:	20800003 	ldbu	r2,0(r4)
    6408:	10ffeb1e 	bne	r2,r3,63b8 <__svfscanf_r+0xd4>
    640c:	80c00117 	ldw	r3,4(r16)
    6410:	21800044 	addi	r6,r4,1
    6414:	8c400044 	addi	r17,r17,1
    6418:	18ffffc4 	addi	r3,r3,-1
    641c:	80c00115 	stw	r3,4(r16)
    6420:	81800015 	stw	r6,0(r16)
    6424:	003fc206 	br	6330 <__svfscanf_r+0x4c>
    6428:	b009883a 	mov	r4,r22
    642c:	800b883a 	mov	r5,r16
    6430:	0003bec0 	call	3bec <__srefill_r>
    6434:	103ff126 	beq	r2,zero,63fc <__svfscanf_r+0x118>
    6438:	d900a217 	ldw	r4,648(sp)
    643c:	2004c91e 	bne	r4,zero,7764 <__svfscanf_r+0x1480>
    6440:	00bfffc4 	movi	r2,-1
    6444:	d880a215 	stw	r2,648(sp)
    6448:	003fdb06 	br	63b8 <__svfscanf_r+0xd4>
    644c:	d800a315 	stw	zero,652(sp)
    6450:	0027883a 	mov	r19,zero
    6454:	a0c00003 	ldbu	r3,0(r20)
    6458:	00801e04 	movi	r2,120
    645c:	a5000044 	addi	r20,r20,1
    6460:	19403fcc 	andi	r5,r3,255
    6464:	2940201c 	xori	r5,r5,128
    6468:	297fe004 	addi	r5,r5,-128
    646c:	10c08036 	bltu	r2,r3,6670 <__svfscanf_r+0x38c>
    6470:	18c5883a 	add	r2,r3,r3
    6474:	1085883a 	add	r2,r2,r2
    6478:	00c00034 	movhi	r3,0
    647c:	18d92304 	addi	r3,r3,25740
    6480:	10c5883a 	add	r2,r2,r3
    6484:	11000017 	ldw	r4,0(r2)
    6488:	2000683a 	jmp	r4
    648c:	00006440 	call	644 <cam_track+0x180>
    6490:	00006670 	cmpltui	zero,zero,409
    6494:	00006670 	cmpltui	zero,zero,409
    6498:	00006670 	cmpltui	zero,zero,409
    649c:	00006670 	cmpltui	zero,zero,409
    64a0:	00006670 	cmpltui	zero,zero,409
    64a4:	00006670 	cmpltui	zero,zero,409
    64a8:	00006670 	cmpltui	zero,zero,409
    64ac:	00006670 	cmpltui	zero,zero,409
    64b0:	00006670 	cmpltui	zero,zero,409
    64b4:	00006670 	cmpltui	zero,zero,409
    64b8:	00006670 	cmpltui	zero,zero,409
    64bc:	00006670 	cmpltui	zero,zero,409
    64c0:	00006670 	cmpltui	zero,zero,409
    64c4:	00006670 	cmpltui	zero,zero,409
    64c8:	00006670 	cmpltui	zero,zero,409
    64cc:	00006670 	cmpltui	zero,zero,409
    64d0:	00006670 	cmpltui	zero,zero,409
    64d4:	00006670 	cmpltui	zero,zero,409
    64d8:	00006670 	cmpltui	zero,zero,409
    64dc:	00006670 	cmpltui	zero,zero,409
    64e0:	00006670 	cmpltui	zero,zero,409
    64e4:	00006670 	cmpltui	zero,zero,409
    64e8:	00006670 	cmpltui	zero,zero,409
    64ec:	00006670 	cmpltui	zero,zero,409
    64f0:	00006670 	cmpltui	zero,zero,409
    64f4:	00006670 	cmpltui	zero,zero,409
    64f8:	00006670 	cmpltui	zero,zero,409
    64fc:	00006670 	cmpltui	zero,zero,409
    6500:	00006670 	cmpltui	zero,zero,409
    6504:	00006670 	cmpltui	zero,zero,409
    6508:	00006670 	cmpltui	zero,zero,409
    650c:	00006670 	cmpltui	zero,zero,409
    6510:	00006670 	cmpltui	zero,zero,409
    6514:	00006670 	cmpltui	zero,zero,409
    6518:	00006670 	cmpltui	zero,zero,409
    651c:	00006670 	cmpltui	zero,zero,409
    6520:	000063f4 	movhi	zero,399
    6524:	00006670 	cmpltui	zero,zero,409
    6528:	00006670 	cmpltui	zero,zero,409
    652c:	00006670 	cmpltui	zero,zero,409
    6530:	00006670 	cmpltui	zero,zero,409
    6534:	00007694 	movui	zero,474
    6538:	00006670 	cmpltui	zero,zero,409
    653c:	00006670 	cmpltui	zero,zero,409
    6540:	00006670 	cmpltui	zero,zero,409
    6544:	00006670 	cmpltui	zero,zero,409
    6548:	00006670 	cmpltui	zero,zero,409
    654c:	00007090 	cmplti	zero,zero,450
    6550:	00007090 	cmplti	zero,zero,450
    6554:	00007090 	cmplti	zero,zero,450
    6558:	00007090 	cmplti	zero,zero,450
    655c:	00007090 	cmplti	zero,zero,450
    6560:	00007090 	cmplti	zero,zero,450
    6564:	00007090 	cmplti	zero,zero,450
    6568:	00007090 	cmplti	zero,zero,450
    656c:	00007090 	cmplti	zero,zero,450
    6570:	00007090 	cmplti	zero,zero,450
    6574:	00006670 	cmpltui	zero,zero,409
    6578:	00006670 	cmpltui	zero,zero,409
    657c:	00006670 	cmpltui	zero,zero,409
    6580:	00006670 	cmpltui	zero,zero,409
    6584:	00006670 	cmpltui	zero,zero,409
    6588:	00006670 	cmpltui	zero,zero,409
    658c:	00006670 	cmpltui	zero,zero,409
    6590:	00006670 	cmpltui	zero,zero,409
    6594:	00006670 	cmpltui	zero,zero,409
    6598:	00006670 	cmpltui	zero,zero,409
    659c:	00007810 	cmplti	zero,zero,480
    65a0:	00007808 	cmpgei	zero,zero,480
    65a4:	00006670 	cmpltui	zero,zero,409
    65a8:	00007808 	cmpgei	zero,zero,480
    65ac:	00006670 	cmpltui	zero,zero,409
    65b0:	00006670 	cmpltui	zero,zero,409
    65b4:	00006670 	cmpltui	zero,zero,409
    65b8:	00006670 	cmpltui	zero,zero,409
    65bc:	000078a0 	cmpeqi	zero,zero,482
    65c0:	00006670 	cmpltui	zero,zero,409
    65c4:	00006670 	cmpltui	zero,zero,409
    65c8:	00007858 	cmpnei	zero,zero,481
    65cc:	00006670 	cmpltui	zero,zero,409
    65d0:	00006670 	cmpltui	zero,zero,409
    65d4:	00006670 	cmpltui	zero,zero,409
    65d8:	00006670 	cmpltui	zero,zero,409
    65dc:	00006670 	cmpltui	zero,zero,409
    65e0:	00006670 	cmpltui	zero,zero,409
    65e4:	00006670 	cmpltui	zero,zero,409
    65e8:	00006670 	cmpltui	zero,zero,409
    65ec:	0000769c 	xori	zero,zero,474
    65f0:	00006670 	cmpltui	zero,zero,409
    65f4:	00006670 	cmpltui	zero,zero,409
    65f8:	0000783c 	xorhi	zero,zero,480
    65fc:	00006670 	cmpltui	zero,zero,409
    6600:	00006670 	cmpltui	zero,zero,409
    6604:	00006670 	cmpltui	zero,zero,409
    6608:	00006670 	cmpltui	zero,zero,409
    660c:	00006670 	cmpltui	zero,zero,409
    6610:	00006670 	cmpltui	zero,zero,409
    6614:	00006670 	cmpltui	zero,zero,409
    6618:	00007830 	cmpltui	zero,zero,480
    661c:	00007814 	movui	zero,480
    6620:	00007808 	cmpgei	zero,zero,480
    6624:	00007808 	cmpgei	zero,zero,480
    6628:	00007808 	cmpgei	zero,zero,480
    662c:	00007800 	call	780 <cmd_init+0x18>
    6630:	000078f4 	movhi	zero,483
    6634:	00006670 	cmpltui	zero,zero,409
    6638:	00006670 	cmpltui	zero,zero,409
    663c:	000078e0 	cmpeqi	zero,zero,483
    6640:	00006670 	cmpltui	zero,zero,409
    6644:	00007878 	rdprs	zero,zero,481
    6648:	0000785c 	xori	zero,zero,481
    664c:	000078b0 	cmpltui	zero,zero,482
    6650:	00006670 	cmpltui	zero,zero,409
    6654:	00006670 	cmpltui	zero,zero,409
    6658:	000078a8 	cmpgeui	zero,zero,482
    665c:	00006670 	cmpltui	zero,zero,409
    6660:	00006be0 	cmpeqi	zero,zero,431
    6664:	00006670 	cmpltui	zero,zero,409
    6668:	00006670 	cmpltui	zero,zero,409
    666c:	0000769c 	xori	zero,zero,474
    6670:	2987883a 	add	r3,r5,r6
    6674:	18800003 	ldbu	r2,0(r3)
    6678:	1080004c 	andi	r2,r2,1
    667c:	1005003a 	cmpeq	r2,r2,zero
    6680:	10002c26 	beq	r2,zero,6734 <__svfscanf_r+0x450>
    6684:	01000074 	movhi	r4,1
    6688:	2135e304 	addi	r4,r4,-10356
    668c:	00800284 	movi	r2,10
    6690:	d900a015 	stw	r4,640(sp)
    6694:	054000c4 	movi	r21,3
    6698:	d880a115 	stw	r2,644(sp)
    669c:	80c00117 	ldw	r3,4(r16)
    66a0:	00c14a0e 	bge	zero,r3,6bcc <__svfscanf_r+0x8e8>
    66a4:	9880100c 	andi	r2,r19,64
    66a8:	10001326 	beq	r2,zero,66f8 <__svfscanf_r+0x414>
    66ac:	00800104 	movi	r2,4
    66b0:	157f1f36 	bltu	r2,r21,6330 <__svfscanf_r+0x4c>
    66b4:	ad45883a 	add	r2,r21,r21
    66b8:	1085883a 	add	r2,r2,r2
    66bc:	00c00034 	movhi	r3,0
    66c0:	18d9b404 	addi	r3,r3,26320
    66c4:	10c5883a 	add	r2,r2,r3
    66c8:	11000017 	ldw	r4,0(r2)
    66cc:	2000683a 	jmp	r4
    66d0:	0000673c 	xorhi	zero,zero,412
    66d4:	00006848 	cmpgei	zero,zero,417
    66d8:	000068bc 	xorhi	zero,zero,418
    66dc:	00006ba8 	cmpgeui	zero,zero,430
    66e0:	000069f4 	movhi	zero,423
    66e4:	b009883a 	mov	r4,r22
    66e8:	800b883a 	mov	r5,r16
    66ec:	0003bec0 	call	3bec <__srefill_r>
    66f0:	103f511e 	bne	r2,zero,6438 <__svfscanf_r+0x154>
    66f4:	8c400044 	addi	r17,r17,1
    66f8:	81400017 	ldw	r5,0(r16)
    66fc:	90800017 	ldw	r2,0(r18)
    6700:	28c00003 	ldbu	r3,0(r5)
    6704:	1887883a 	add	r3,r3,r2
    6708:	19000003 	ldbu	r4,0(r3)
    670c:	2100020c 	andi	r4,r4,8
    6710:	203fe626 	beq	r4,zero,66ac <__svfscanf_r+0x3c8>
    6714:	80c00117 	ldw	r3,4(r16)
    6718:	18ffffc4 	addi	r3,r3,-1
    671c:	80c00115 	stw	r3,4(r16)
    6720:	00fff00e 	bge	zero,r3,66e4 <__svfscanf_r+0x400>
    6724:	29800044 	addi	r6,r5,1
    6728:	8c400044 	addi	r17,r17,1
    672c:	81800015 	stw	r6,0(r16)
    6730:	003ff106 	br	66f8 <__svfscanf_r+0x414>
    6734:	9cc00054 	ori	r19,r19,1
    6738:	003fd206 	br	6684 <__svfscanf_r+0x3a0>
    673c:	d8c0a317 	ldw	r3,652(sp)
    6740:	1800021e 	bne	r3,zero,674c <__svfscanf_r+0x468>
    6744:	01000044 	movi	r4,1
    6748:	d900a315 	stw	r4,652(sp)
    674c:	9880004c 	andi	r2,r19,1
    6750:	1005003a 	cmpeq	r2,r2,zero
    6754:	1003d91e 	bne	r2,zero,76bc <__svfscanf_r+0x13d8>
    6758:	9d40040c 	andi	r21,r19,16
    675c:	a839003a 	cmpeq	fp,r21,zero
    6760:	e0042526 	beq	fp,zero,77f8 <__svfscanf_r+0x1514>
    6764:	d880a417 	ldw	r2,656(sp)
    6768:	14c00017 	ldw	r19,0(r2)
    676c:	10800104 	addi	r2,r2,4
    6770:	d880a415 	stw	r2,656(sp)
    6774:	d8c0a317 	ldw	r3,652(sp)
    6778:	18041a26 	beq	r3,zero,77e4 <__svfscanf_r+0x1500>
    677c:	01000074 	movhi	r4,1
    6780:	211b9b04 	addi	r4,r4,28268
    6784:	20800017 	ldw	r2,0(r4)
    6788:	103f2b26 	beq	r2,zero,6438 <__svfscanf_r+0x154>
    678c:	d8804404 	addi	r2,sp,272
    6790:	0025883a 	mov	r18,zero
    6794:	d880a615 	stw	r2,664(sp)
    6798:	05ffffc4 	movi	r23,-1
    679c:	80800017 	ldw	r2,0(r16)
    67a0:	80c00117 	ldw	r3,4(r16)
    67a4:	d900a617 	ldw	r4,664(sp)
    67a8:	12000003 	ldbu	r8,0(r2)
    67ac:	18ffffc4 	addi	r3,r3,-1
    67b0:	11800044 	addi	r6,r2,1
    67b4:	248f883a 	add	r7,r4,r18
    67b8:	80c00115 	stw	r3,4(r16)
    67bc:	81800015 	stw	r6,0(r16)
    67c0:	3a000005 	stb	r8,0(r7)
    67c4:	d9000204 	addi	r4,sp,8
    67c8:	000b883a 	mov	r5,zero
    67cc:	01800204 	movi	r6,8
    67d0:	0003a040 	call	3a04 <memset>
    67d4:	d980a617 	ldw	r6,664(sp)
    67d8:	94800044 	addi	r18,r18,1
    67dc:	d8800204 	addi	r2,sp,8
    67e0:	b009883a 	mov	r4,r22
    67e4:	980b883a 	mov	r5,r19
    67e8:	900f883a 	mov	r7,r18
    67ec:	d8800015 	stw	r2,0(sp)
    67f0:	000a5bc0 	call	a5bc <_mbrtowc_r>
    67f4:	1007883a 	mov	r3,r2
    67f8:	15ff0f26 	beq	r2,r23,6438 <__svfscanf_r+0x154>
    67fc:	1003f11e 	bne	r2,zero,77c4 <__svfscanf_r+0x14e0>
    6800:	a800011e 	bne	r21,zero,6808 <__svfscanf_r+0x524>
    6804:	98000015 	stw	zero,0(r19)
    6808:	d8c0a317 	ldw	r3,652(sp)
    680c:	8ca3883a 	add	r17,r17,r18
    6810:	18ffffc4 	addi	r3,r3,-1
    6814:	d8c0a315 	stw	r3,652(sp)
    6818:	e0000126 	beq	fp,zero,6820 <__svfscanf_r+0x53c>
    681c:	9cc00104 	addi	r19,r19,4
    6820:	0025883a 	mov	r18,zero
    6824:	80c00117 	ldw	r3,4(r16)
    6828:	00c3e90e 	bge	zero,r3,77d0 <__svfscanf_r+0x14ec>
    682c:	d900a317 	ldw	r4,652(sp)
    6830:	2003ec26 	beq	r4,zero,77e4 <__svfscanf_r+0x1500>
    6834:	00c00074 	movhi	r3,1
    6838:	18db9b04 	addi	r3,r3,28268
    683c:	18800017 	ldw	r2,0(r3)
    6840:	90bfd61e 	bne	r18,r2,679c <__svfscanf_r+0x4b8>
    6844:	003efc06 	br	6438 <__svfscanf_r+0x154>
    6848:	d880a317 	ldw	r2,652(sp)
    684c:	1000021e 	bne	r2,zero,6858 <__svfscanf_r+0x574>
    6850:	00ffffc4 	movi	r3,-1
    6854:	d8c0a315 	stw	r3,652(sp)
    6858:	9880040c 	andi	r2,r19,16
    685c:	10036526 	beq	r2,zero,75f4 <__svfscanf_r+0x1310>
    6860:	0027883a 	mov	r19,zero
    6864:	dd400404 	addi	r21,sp,16
    6868:	81000017 	ldw	r4,0(r16)
    686c:	20800003 	ldbu	r2,0(r4)
    6870:	a885883a 	add	r2,r21,r2
    6874:	10c00007 	ldb	r3,0(r2)
    6878:	1803be26 	beq	r3,zero,7774 <__svfscanf_r+0x1490>
    687c:	80c00117 	ldw	r3,4(r16)
    6880:	21800044 	addi	r6,r4,1
    6884:	d900a317 	ldw	r4,652(sp)
    6888:	18ffffc4 	addi	r3,r3,-1
    688c:	9cc00044 	addi	r19,r19,1
    6890:	81800015 	stw	r6,0(r16)
    6894:	80c00115 	stw	r3,4(r16)
    6898:	24c3b626 	beq	r4,r19,7774 <__svfscanf_r+0x1490>
    689c:	00fff216 	blt	zero,r3,6868 <__svfscanf_r+0x584>
    68a0:	b009883a 	mov	r4,r22
    68a4:	800b883a 	mov	r5,r16
    68a8:	0003bec0 	call	3bec <__srefill_r>
    68ac:	103fee26 	beq	r2,zero,6868 <__svfscanf_r+0x584>
    68b0:	983ee126 	beq	r19,zero,6438 <__svfscanf_r+0x154>
    68b4:	8ce3883a 	add	r17,r17,r19
    68b8:	003e9d06 	br	6330 <__svfscanf_r+0x4c>
    68bc:	d900a317 	ldw	r4,652(sp)
    68c0:	2000021e 	bne	r4,zero,68cc <__svfscanf_r+0x5e8>
    68c4:	00bfffc4 	movi	r2,-1
    68c8:	d880a315 	stw	r2,652(sp)
    68cc:	9880004c 	andi	r2,r19,1
    68d0:	1005003a 	cmpeq	r2,r2,zero
    68d4:	1001f41e 	bne	r2,zero,70a8 <__svfscanf_r+0xdc4>
    68d8:	9dc0040c 	andi	r23,r19,16
    68dc:	b807003a 	cmpeq	r3,r23,zero
    68e0:	d8c0a515 	stw	r3,660(sp)
    68e4:	1803b21e 	bne	r3,zero,77b0 <__svfscanf_r+0x14cc>
    68e8:	dd400104 	addi	r21,sp,4
    68ec:	0027883a 	mov	r19,zero
    68f0:	073fffc4 	movi	fp,-1
    68f4:	81400017 	ldw	r5,0(r16)
    68f8:	90800017 	ldw	r2,0(r18)
    68fc:	29c00003 	ldbu	r7,0(r5)
    6900:	38c03fcc 	andi	r3,r7,255
    6904:	1887883a 	add	r3,r3,r2
    6908:	19000003 	ldbu	r4,0(r3)
    690c:	2100020c 	andi	r4,r4,8
    6910:	2000321e 	bne	r4,zero,69dc <__svfscanf_r+0x6f8>
    6914:	d8c0a317 	ldw	r3,652(sp)
    6918:	18003026 	beq	r3,zero,69dc <__svfscanf_r+0x6f8>
    691c:	00800074 	movhi	r2,1
    6920:	109b9b04 	addi	r2,r2,28268
    6924:	10c00017 	ldw	r3,0(r2)
    6928:	98fec326 	beq	r19,r3,6438 <__svfscanf_r+0x154>
    692c:	d8c04404 	addi	r3,sp,272
    6930:	80800117 	ldw	r2,4(r16)
    6934:	d8c0a615 	stw	r3,664(sp)
    6938:	d900a617 	ldw	r4,664(sp)
    693c:	10ffffc4 	addi	r3,r2,-1
    6940:	29800044 	addi	r6,r5,1
    6944:	80c00115 	stw	r3,4(r16)
    6948:	24c5883a 	add	r2,r4,r19
    694c:	81800015 	stw	r6,0(r16)
    6950:	d9000204 	addi	r4,sp,8
    6954:	000b883a 	mov	r5,zero
    6958:	01800204 	movi	r6,8
    695c:	11c00005 	stb	r7,0(r2)
    6960:	0003a040 	call	3a04 <memset>
    6964:	d980a617 	ldw	r6,664(sp)
    6968:	9cc00044 	addi	r19,r19,1
    696c:	d8800204 	addi	r2,sp,8
    6970:	b009883a 	mov	r4,r22
    6974:	a80b883a 	mov	r5,r21
    6978:	980f883a 	mov	r7,r19
    697c:	d8800015 	stw	r2,0(sp)
    6980:	000a5bc0 	call	a5bc <_mbrtowc_r>
    6984:	1007883a 	mov	r3,r2
    6988:	173eab26 	beq	r2,fp,6438 <__svfscanf_r+0x154>
    698c:	1003851e 	bne	r2,zero,77a4 <__svfscanf_r+0x14c0>
    6990:	a8000015 	stw	zero,0(r21)
    6994:	a9000017 	ldw	r4,0(r21)
    6998:	000a2c00 	call	a2c0 <iswspace>
    699c:	1003781e 	bne	r2,zero,7780 <__svfscanf_r+0x149c>
    69a0:	d900a317 	ldw	r4,652(sp)
    69a4:	d880a517 	ldw	r2,660(sp)
    69a8:	8ce3883a 	add	r17,r17,r19
    69ac:	213fffc4 	addi	r4,r4,-1
    69b0:	d900a315 	stw	r4,652(sp)
    69b4:	10000126 	beq	r2,zero,69bc <__svfscanf_r+0x6d8>
    69b8:	ad400104 	addi	r21,r21,4
    69bc:	0027883a 	mov	r19,zero
    69c0:	80c00117 	ldw	r3,4(r16)
    69c4:	00ffcb16 	blt	zero,r3,68f4 <__svfscanf_r+0x610>
    69c8:	b009883a 	mov	r4,r22
    69cc:	800b883a 	mov	r5,r16
    69d0:	0003bec0 	call	3bec <__srefill_r>
    69d4:	103fc726 	beq	r2,zero,68f4 <__svfscanf_r+0x610>
    69d8:	983e971e 	bne	r19,zero,6438 <__svfscanf_r+0x154>
    69dc:	b83e541e 	bne	r23,zero,6330 <__svfscanf_r+0x4c>
    69e0:	d900a217 	ldw	r4,648(sp)
    69e4:	a8000015 	stw	zero,0(r21)
    69e8:	21000044 	addi	r4,r4,1
    69ec:	d900a215 	stw	r4,648(sp)
    69f0:	003e4f06 	br	6330 <__svfscanf_r+0x4c>
    69f4:	d900a317 	ldw	r4,652(sp)
    69f8:	00805704 	movi	r2,348
    69fc:	20ffffc4 	addi	r3,r4,-1
    6a00:	10c1ed2e 	bgeu	r2,r3,71b8 <__svfscanf_r+0xed4>
    6a04:	00805744 	movi	r2,349
    6a08:	21bfa8c4 	addi	r6,r4,-349
    6a0c:	9d41e014 	ori	r21,r19,1920
    6a10:	d880a315 	stw	r2,652(sp)
    6a14:	d8c04404 	addi	r3,sp,272
    6a18:	d8c0a615 	stw	r3,664(sp)
    6a1c:	182f883a 	mov	r23,r3
    6a20:	d8009f15 	stw	zero,636(sp)
    6a24:	d8009e15 	stw	zero,632(sp)
    6a28:	d8009d15 	stw	zero,628(sp)
    6a2c:	d8009c15 	stw	zero,624(sp)
    6a30:	0039883a 	mov	fp,zero
    6a34:	0025883a 	mov	r18,zero
    6a38:	80800017 	ldw	r2,0(r16)
    6a3c:	11400003 	ldbu	r5,0(r2)
    6a40:	00801384 	movi	r2,78
    6a44:	28fff544 	addi	r3,r5,-43
    6a48:	18c03fcc 	andi	r3,r3,255
    6a4c:	10c07d36 	bltu	r2,r3,6c44 <__svfscanf_r+0x960>
    6a50:	18c5883a 	add	r2,r3,r3
    6a54:	1085883a 	add	r2,r2,r2
    6a58:	00c00034 	movhi	r3,0
    6a5c:	18da9b04 	addi	r3,r3,27244
    6a60:	10c5883a 	add	r2,r2,r3
    6a64:	11000017 	ldw	r4,0(r2)
    6a68:	2000683a 	jmp	r4
    6a6c:	00006bfc 	xorhi	zero,zero,431
    6a70:	00006c44 	movi	zero,433
    6a74:	00006bfc 	xorhi	zero,zero,431
    6a78:	00006d90 	cmplti	zero,zero,438
    6a7c:	00006c44 	movi	zero,433
    6a80:	00006dc8 	cmpgei	zero,zero,439
    6a84:	00006dfc 	xorhi	zero,zero,439
    6a88:	00006dfc 	xorhi	zero,zero,439
    6a8c:	00006dfc 	xorhi	zero,zero,439
    6a90:	00006dfc 	xorhi	zero,zero,439
    6a94:	00006dfc 	xorhi	zero,zero,439
    6a98:	00006dfc 	xorhi	zero,zero,439
    6a9c:	00006dfc 	xorhi	zero,zero,439
    6aa0:	00006dfc 	xorhi	zero,zero,439
    6aa4:	00006dfc 	xorhi	zero,zero,439
    6aa8:	00006c44 	movi	zero,433
    6aac:	00006c44 	movi	zero,433
    6ab0:	00006c44 	movi	zero,433
    6ab4:	00006c44 	movi	zero,433
    6ab8:	00006c44 	movi	zero,433
    6abc:	00006c44 	movi	zero,433
    6ac0:	00006c44 	movi	zero,433
    6ac4:	00006e1c 	xori	zero,zero,440
    6ac8:	00006c44 	movi	zero,433
    6acc:	00006c44 	movi	zero,433
    6ad0:	00006c44 	movi	zero,433
    6ad4:	00006e2c 	andhi	zero,zero,440
    6ad8:	00006ec8 	cmpgei	zero,zero,443
    6adc:	00006c44 	movi	zero,433
    6ae0:	00006c44 	movi	zero,433
    6ae4:	00006ee4 	muli	zero,zero,443
    6ae8:	00006c44 	movi	zero,433
    6aec:	00006c44 	movi	zero,433
    6af0:	00006c44 	movi	zero,433
    6af4:	00006c44 	movi	zero,433
    6af8:	00006f10 	cmplti	zero,zero,444
    6afc:	00006c44 	movi	zero,433
    6b00:	00006c44 	movi	zero,433
    6b04:	00006c44 	movi	zero,433
    6b08:	00006c44 	movi	zero,433
    6b0c:	00006c44 	movi	zero,433
    6b10:	00006f64 	muli	zero,zero,445
    6b14:	00006c44 	movi	zero,433
    6b18:	00006c44 	movi	zero,433
    6b1c:	00006c44 	movi	zero,433
    6b20:	00006c44 	movi	zero,433
    6b24:	00007074 	movhi	zero,449
    6b28:	00006c44 	movi	zero,433
    6b2c:	00006c44 	movi	zero,433
    6b30:	00006c44 	movi	zero,433
    6b34:	00006c44 	movi	zero,433
    6b38:	00006c44 	movi	zero,433
    6b3c:	00006c44 	movi	zero,433
    6b40:	00006c44 	movi	zero,433
    6b44:	00006e1c 	xori	zero,zero,440
    6b48:	00006c44 	movi	zero,433
    6b4c:	00006c44 	movi	zero,433
    6b50:	00006c44 	movi	zero,433
    6b54:	00006e2c 	andhi	zero,zero,440
    6b58:	00006ec8 	cmpgei	zero,zero,443
    6b5c:	00006c44 	movi	zero,433
    6b60:	00006c44 	movi	zero,433
    6b64:	00006ee4 	muli	zero,zero,443
    6b68:	00006c44 	movi	zero,433
    6b6c:	00006c44 	movi	zero,433
    6b70:	00006c44 	movi	zero,433
    6b74:	00006c44 	movi	zero,433
    6b78:	00006f10 	cmplti	zero,zero,444
    6b7c:	00006c44 	movi	zero,433
    6b80:	00006c44 	movi	zero,433
    6b84:	00006c44 	movi	zero,433
    6b88:	00006c44 	movi	zero,433
    6b8c:	00006c44 	movi	zero,433
    6b90:	00006f64 	muli	zero,zero,445
    6b94:	00006c44 	movi	zero,433
    6b98:	00006c44 	movi	zero,433
    6b9c:	00006c44 	movi	zero,433
    6ba0:	00006c44 	movi	zero,433
    6ba4:	00007074 	movhi	zero,449
    6ba8:	d900a317 	ldw	r4,652(sp)
    6bac:	00805704 	movi	r2,348
    6bb0:	20ffffc4 	addi	r3,r4,-1
    6bb4:	10c18c2e 	bgeu	r2,r3,71e8 <__svfscanf_r+0xf04>
    6bb8:	00805744 	movi	r2,349
    6bbc:	257fa8c4 	addi	r21,r4,-349
    6bc0:	9c836014 	ori	r18,r19,3456
    6bc4:	d880a315 	stw	r2,652(sp)
    6bc8:	0001a106 	br	7250 <__svfscanf_r+0xf6c>
    6bcc:	b009883a 	mov	r4,r22
    6bd0:	800b883a 	mov	r5,r16
    6bd4:	0003bec0 	call	3bec <__srefill_r>
    6bd8:	103eb226 	beq	r2,zero,66a4 <__svfscanf_r+0x3c0>
    6bdc:	003e1606 	br	6438 <__svfscanf_r+0x154>
    6be0:	01000284 	movi	r4,10
    6be4:	00800074 	movhi	r2,1
    6be8:	10b74304 	addi	r2,r2,-8948
    6bec:	054000c4 	movi	r21,3
    6bf0:	d900a115 	stw	r4,644(sp)
    6bf4:	d880a015 	stw	r2,640(sp)
    6bf8:	003ea806 	br	669c <__svfscanf_r+0x3b8>
    6bfc:	a880200c 	andi	r2,r21,128
    6c00:	10001026 	beq	r2,zero,6c44 <__svfscanf_r+0x960>
    6c04:	00bfdfc4 	movi	r2,-129
    6c08:	a8aa703a 	and	r21,r21,r2
    6c0c:	b9400005 	stb	r5,0(r23)
    6c10:	bdc00044 	addi	r23,r23,1
    6c14:	80c00117 	ldw	r3,4(r16)
    6c18:	8c400044 	addi	r17,r17,1
    6c1c:	18bfffc4 	addi	r2,r3,-1
    6c20:	80800115 	stw	r2,4(r16)
    6c24:	0080610e 	bge	zero,r2,6dac <__svfscanf_r+0xac8>
    6c28:	80800017 	ldw	r2,0(r16)
    6c2c:	10800044 	addi	r2,r2,1
    6c30:	80800015 	stw	r2,0(r16)
    6c34:	d880a317 	ldw	r2,652(sp)
    6c38:	10bfffc4 	addi	r2,r2,-1
    6c3c:	d880a315 	stw	r2,652(sp)
    6c40:	103f7d1e 	bne	r2,zero,6a38 <__svfscanf_r+0x754>
    6c44:	d8c09e17 	ldw	r3,632(sp)
    6c48:	18000226 	beq	r3,zero,6c54 <__svfscanf_r+0x970>
    6c4c:	00bfbfc4 	movi	r2,-257
    6c50:	a8aa703a 	and	r21,r21,r2
    6c54:	90ffffc4 	addi	r3,r18,-1
    6c58:	00800044 	movi	r2,1
    6c5c:	10c0cd2e 	bgeu	r2,r3,6f94 <__svfscanf_r+0xcb0>
    6c60:	e1003fcc 	andi	r4,fp,255
    6c64:	2100201c 	xori	r4,r4,128
    6c68:	213fe004 	addi	r4,r4,-128
    6c6c:	20ffffc4 	addi	r3,r4,-1
    6c70:	00800184 	movi	r2,6
    6c74:	10c01736 	bltu	r2,r3,6cd4 <__svfscanf_r+0x9f0>
    6c78:	00c00084 	movi	r3,2
    6c7c:	1900880e 	bge	r3,r4,6ea0 <__svfscanf_r+0xbbc>
    6c80:	008000c4 	movi	r2,3
    6c84:	1100130e 	bge	r2,r4,6cd4 <__svfscanf_r+0x9f0>
    6c88:	e4ffffc4 	addi	r19,fp,-1
    6c8c:	b825883a 	mov	r18,r23
    6c90:	94bfffc4 	addi	r18,r18,-1
    6c94:	91400007 	ldb	r5,0(r18)
    6c98:	b009883a 	mov	r4,r22
    6c9c:	800d883a 	mov	r6,r16
    6ca0:	000e32c0 	call	e32c <_ungetc_r>
    6ca4:	9cffffc4 	addi	r19,r19,-1
    6ca8:	98c03fcc 	andi	r3,r19,255
    6cac:	18c0201c 	xori	r3,r3,128
    6cb0:	18ffe004 	addi	r3,r3,-128
    6cb4:	00800084 	movi	r2,2
    6cb8:	18bff51e 	bne	r3,r2,6c90 <__svfscanf_r+0x9ac>
    6cbc:	e0bfff04 	addi	r2,fp,-4
    6cc0:	10803fcc 	andi	r2,r2,255
    6cc4:	b887c83a 	sub	r3,r23,r2
    6cc8:	8885c83a 	sub	r2,r17,r2
    6ccc:	147fffc4 	addi	r17,r2,-1
    6cd0:	1dffffc4 	addi	r23,r3,-1
    6cd4:	a880400c 	andi	r2,r21,256
    6cd8:	10001226 	beq	r2,zero,6d24 <__svfscanf_r+0xa40>
    6cdc:	a881000c 	andi	r2,r21,1024
    6ce0:	1000651e 	bne	r2,zero,6e78 <__svfscanf_r+0xb94>
    6ce4:	bdffffc4 	addi	r23,r23,-1
    6ce8:	b9400007 	ldb	r5,0(r23)
    6cec:	00801944 	movi	r2,101
    6cf0:	8c7fffc4 	addi	r17,r17,-1
    6cf4:	28800826 	beq	r5,r2,6d18 <__svfscanf_r+0xa34>
    6cf8:	00801144 	movi	r2,69
    6cfc:	28800626 	beq	r5,r2,6d18 <__svfscanf_r+0xa34>
    6d00:	bdffffc4 	addi	r23,r23,-1
    6d04:	b009883a 	mov	r4,r22
    6d08:	800d883a 	mov	r6,r16
    6d0c:	000e32c0 	call	e32c <_ungetc_r>
    6d10:	b9400007 	ldb	r5,0(r23)
    6d14:	8c7fffc4 	addi	r17,r17,-1
    6d18:	b009883a 	mov	r4,r22
    6d1c:	800d883a 	mov	r6,r16
    6d20:	000e32c0 	call	e32c <_ungetc_r>
    6d24:	a880040c 	andi	r2,r21,16
    6d28:	103d811e 	bne	r2,zero,6330 <__svfscanf_r+0x4c>
    6d2c:	a8c1800c 	andi	r3,r21,1536
    6d30:	00810004 	movi	r2,1024
    6d34:	b8000005 	stb	zero,0(r23)
    6d38:	1880bb26 	beq	r3,r2,7028 <__svfscanf_r+0xd44>
    6d3c:	d8809d17 	ldw	r2,628(sp)
    6d40:	1000a61e 	bne	r2,zero,6fdc <__svfscanf_r+0xcf8>
    6d44:	d940a617 	ldw	r5,664(sp)
    6d48:	b009883a 	mov	r4,r22
    6d4c:	000d883a 	mov	r6,zero
    6d50:	000c1680 	call	c168 <_strtod_r>
    6d54:	a900004c 	andi	r4,r21,1
    6d58:	2009003a 	cmpeq	r4,r4,zero
    6d5c:	1025883a 	mov	r18,r2
    6d60:	1827883a 	mov	r19,r3
    6d64:	2000951e 	bne	r4,zero,6fbc <__svfscanf_r+0xcd8>
    6d68:	d8c0a417 	ldw	r3,656(sp)
    6d6c:	18800017 	ldw	r2,0(r3)
    6d70:	1d400104 	addi	r21,r3,4
    6d74:	14c00115 	stw	r19,4(r2)
    6d78:	14800015 	stw	r18,0(r2)
    6d7c:	d8c0a217 	ldw	r3,648(sp)
    6d80:	dd40a415 	stw	r21,656(sp)
    6d84:	18c00044 	addi	r3,r3,1
    6d88:	d8c0a215 	stw	r3,648(sp)
    6d8c:	003d6806 	br	6330 <__svfscanf_r+0x4c>
    6d90:	a880800c 	andi	r2,r21,512
    6d94:	103fab26 	beq	r2,zero,6c44 <__svfscanf_r+0x960>
    6d98:	d9009e17 	ldw	r4,632(sp)
    6d9c:	00bf5fc4 	movi	r2,-641
    6da0:	a8aa703a 	and	r21,r21,r2
    6da4:	d9009f15 	stw	r4,636(sp)
    6da8:	003f9806 	br	6c0c <__svfscanf_r+0x928>
    6dac:	b009883a 	mov	r4,r22
    6db0:	800b883a 	mov	r5,r16
    6db4:	d980a715 	stw	r6,668(sp)
    6db8:	0003bec0 	call	3bec <__srefill_r>
    6dbc:	d980a717 	ldw	r6,668(sp)
    6dc0:	103f9c26 	beq	r2,zero,6c34 <__svfscanf_r+0x950>
    6dc4:	003f9f06 	br	6c44 <__svfscanf_r+0x960>
    6dc8:	a880400c 	andi	r2,r21,256
    6dcc:	10000b26 	beq	r2,zero,6dfc <__svfscanf_r+0xb18>
    6dd0:	00bfdfc4 	movi	r2,-129
    6dd4:	a8aa703a 	and	r21,r21,r2
    6dd8:	d8809e17 	ldw	r2,632(sp)
    6ddc:	10800044 	addi	r2,r2,1
    6de0:	d8809e15 	stw	r2,632(sp)
    6de4:	303f8b26 	beq	r6,zero,6c14 <__svfscanf_r+0x930>
    6de8:	d8c0a317 	ldw	r3,652(sp)
    6dec:	31bfffc4 	addi	r6,r6,-1
    6df0:	18c00044 	addi	r3,r3,1
    6df4:	d8c0a315 	stw	r3,652(sp)
    6df8:	003f8606 	br	6c14 <__svfscanf_r+0x930>
    6dfc:	e0803fcc 	andi	r2,fp,255
    6e00:	1080201c 	xori	r2,r2,128
    6e04:	10bfe004 	addi	r2,r2,-128
    6e08:	9085883a 	add	r2,r18,r2
    6e0c:	103f8d1e 	bne	r2,zero,6c44 <__svfscanf_r+0x960>
    6e10:	00bf9fc4 	movi	r2,-385
    6e14:	a8aa703a 	and	r21,r21,r2
    6e18:	003f7c06 	br	6c0c <__svfscanf_r+0x928>
    6e1c:	00800044 	movi	r2,1
    6e20:	90bf881e 	bne	r18,r2,6c44 <__svfscanf_r+0x960>
    6e24:	04800084 	movi	r18,2
    6e28:	003f7806 	br	6c0c <__svfscanf_r+0x928>
    6e2c:	a8c1400c 	andi	r3,r21,1280
    6e30:	00810004 	movi	r2,1024
    6e34:	18800426 	beq	r3,r2,6e48 <__svfscanf_r+0xb64>
    6e38:	a884703a 	and	r2,r21,r2
    6e3c:	103f8126 	beq	r2,zero,6c44 <__svfscanf_r+0x960>
    6e40:	d8809e17 	ldw	r2,632(sp)
    6e44:	103f8326 	beq	r2,zero,6c54 <__svfscanf_r+0x970>
    6e48:	a880800c 	andi	r2,r21,512
    6e4c:	1000051e 	bne	r2,zero,6e64 <__svfscanf_r+0xb80>
    6e50:	d8c09e17 	ldw	r3,632(sp)
    6e54:	d9009f17 	ldw	r4,636(sp)
    6e58:	ddc09c15 	stw	r23,624(sp)
    6e5c:	1907c83a 	sub	r3,r3,r4
    6e60:	d8c09d15 	stw	r3,628(sp)
    6e64:	00be7fc4 	movi	r2,-1537
    6e68:	a884703a 	and	r2,r21,r2
    6e6c:	15406014 	ori	r21,r2,384
    6e70:	d8009e15 	stw	zero,632(sp)
    6e74:	003f6506 	br	6c0c <__svfscanf_r+0x928>
    6e78:	d900a617 	ldw	r4,664(sp)
    6e7c:	25fd4e2e 	bgeu	r4,r23,63b8 <__svfscanf_r+0xd4>
    6e80:	bdffffc4 	addi	r23,r23,-1
    6e84:	b9400007 	ldb	r5,0(r23)
    6e88:	b009883a 	mov	r4,r22
    6e8c:	800d883a 	mov	r6,r16
    6e90:	000e32c0 	call	e32c <_ungetc_r>
    6e94:	d880a617 	ldw	r2,664(sp)
    6e98:	15fff936 	bltu	r2,r23,6e80 <__svfscanf_r+0xb9c>
    6e9c:	003d4606 	br	63b8 <__svfscanf_r+0xd4>
    6ea0:	d900a617 	ldw	r4,664(sp)
    6ea4:	25fd442e 	bgeu	r4,r23,63b8 <__svfscanf_r+0xd4>
    6ea8:	bdffffc4 	addi	r23,r23,-1
    6eac:	b9400007 	ldb	r5,0(r23)
    6eb0:	b009883a 	mov	r4,r22
    6eb4:	800d883a 	mov	r6,r16
    6eb8:	000e32c0 	call	e32c <_ungetc_r>
    6ebc:	d8c0a617 	ldw	r3,664(sp)
    6ec0:	1dfff936 	bltu	r3,r23,6ea8 <__svfscanf_r+0xbc4>
    6ec4:	003d3c06 	br	63b8 <__svfscanf_r+0xd4>
    6ec8:	e0c03fcc 	andi	r3,fp,255
    6ecc:	18c0201c 	xori	r3,r3,128
    6ed0:	18ffe004 	addi	r3,r3,-128
    6ed4:	00800084 	movi	r2,2
    6ed8:	18bf5a1e 	bne	r3,r2,6c44 <__svfscanf_r+0x960>
    6edc:	070000c4 	movi	fp,3
    6ee0:	003f4a06 	br	6c0c <__svfscanf_r+0x928>
    6ee4:	e0c03fcc 	andi	r3,fp,255
    6ee8:	18c0201c 	xori	r3,r3,128
    6eec:	18ffe004 	addi	r3,r3,-128
    6ef0:	1800231e 	bne	r3,zero,6f80 <__svfscanf_r+0xc9c>
    6ef4:	a8c1c00c 	andi	r3,r21,1792
    6ef8:	0081c004 	movi	r2,1792
    6efc:	18bf511e 	bne	r3,r2,6c44 <__svfscanf_r+0x960>
    6f00:	00be1fc4 	movi	r2,-1921
    6f04:	a8aa703a 	and	r21,r21,r2
    6f08:	07000044 	movi	fp,1
    6f0c:	003f3f06 	br	6c0c <__svfscanf_r+0x928>
    6f10:	9000101e 	bne	r18,zero,6f54 <__svfscanf_r+0xc70>
    6f14:	a8c1c00c 	andi	r3,r21,1792
    6f18:	0081c004 	movi	r2,1792
    6f1c:	18800926 	beq	r3,r2,6f44 <__svfscanf_r+0xc60>
    6f20:	e0c03fcc 	andi	r3,fp,255
    6f24:	18c0201c 	xori	r3,r3,128
    6f28:	18ffe004 	addi	r3,r3,-128
    6f2c:	00800044 	movi	r2,1
    6f30:	18800226 	beq	r3,r2,6f3c <__svfscanf_r+0xc58>
    6f34:	00800104 	movi	r2,4
    6f38:	18bf421e 	bne	r3,r2,6c44 <__svfscanf_r+0x960>
    6f3c:	e7000044 	addi	fp,fp,1
    6f40:	003f3206 	br	6c0c <__svfscanf_r+0x928>
    6f44:	00be1fc4 	movi	r2,-1921
    6f48:	a8aa703a 	and	r21,r21,r2
    6f4c:	04800044 	movi	r18,1
    6f50:	003f2e06 	br	6c0c <__svfscanf_r+0x928>
    6f54:	00800084 	movi	r2,2
    6f58:	90bff11e 	bne	r18,r2,6f20 <__svfscanf_r+0xc3c>
    6f5c:	048000c4 	movi	r18,3
    6f60:	003f2a06 	br	6c0c <__svfscanf_r+0x928>
    6f64:	e0c03fcc 	andi	r3,fp,255
    6f68:	18c0201c 	xori	r3,r3,128
    6f6c:	18ffe004 	addi	r3,r3,-128
    6f70:	00800184 	movi	r2,6
    6f74:	18bf331e 	bne	r3,r2,6c44 <__svfscanf_r+0x960>
    6f78:	070001c4 	movi	fp,7
    6f7c:	003f2306 	br	6c0c <__svfscanf_r+0x928>
    6f80:	008000c4 	movi	r2,3
    6f84:	18bfed26 	beq	r3,r2,6f3c <__svfscanf_r+0xc58>
    6f88:	00800144 	movi	r2,5
    6f8c:	18bfeb26 	beq	r3,r2,6f3c <__svfscanf_r+0xc58>
    6f90:	003f2c06 	br	6c44 <__svfscanf_r+0x960>
    6f94:	d900a617 	ldw	r4,664(sp)
    6f98:	25fd072e 	bgeu	r4,r23,63b8 <__svfscanf_r+0xd4>
    6f9c:	bdffffc4 	addi	r23,r23,-1
    6fa0:	b9400007 	ldb	r5,0(r23)
    6fa4:	b009883a 	mov	r4,r22
    6fa8:	800d883a 	mov	r6,r16
    6fac:	000e32c0 	call	e32c <_ungetc_r>
    6fb0:	d880a617 	ldw	r2,664(sp)
    6fb4:	15fff936 	bltu	r2,r23,6f9c <__svfscanf_r+0xcb8>
    6fb8:	003cff06 	br	63b8 <__svfscanf_r+0xd4>
    6fbc:	a880008c 	andi	r2,r21,2
    6fc0:	10002026 	beq	r2,zero,7044 <__svfscanf_r+0xd60>
    6fc4:	d900a417 	ldw	r4,656(sp)
    6fc8:	20800017 	ldw	r2,0(r4)
    6fcc:	25400104 	addi	r21,r4,4
    6fd0:	10c00115 	stw	r3,4(r2)
    6fd4:	14800015 	stw	r18,0(r2)
    6fd8:	003f6806 	br	6d7c <__svfscanf_r+0xa98>
    6fdc:	d8c09c17 	ldw	r3,624(sp)
    6fe0:	b009883a 	mov	r4,r22
    6fe4:	000d883a 	mov	r6,zero
    6fe8:	19400044 	addi	r5,r3,1
    6fec:	01c00284 	movi	r7,10
    6ff0:	000d78c0 	call	d78c <_strtol_r>
    6ff4:	d9009d17 	ldw	r4,628(sp)
    6ff8:	110dc83a 	sub	r6,r2,r4
    6ffc:	d8c0a617 	ldw	r3,664(sp)
    7000:	d9009c17 	ldw	r4,624(sp)
    7004:	188054c4 	addi	r2,r3,339
    7008:	20800236 	bltu	r4,r2,7014 <__svfscanf_r+0xd30>
    700c:	18805484 	addi	r2,r3,338
    7010:	d8809c15 	stw	r2,624(sp)
    7014:	d9009c17 	ldw	r4,624(sp)
    7018:	01400074 	movhi	r5,1
    701c:	29541c04 	addi	r5,r5,20592
    7020:	0003e3c0 	call	3e3c <sprintf>
    7024:	003f4706 	br	6d44 <__svfscanf_r+0xa60>
    7028:	d8c09e17 	ldw	r3,632(sp)
    702c:	d9009f17 	ldw	r4,636(sp)
    7030:	1905c83a 	sub	r2,r3,r4
    7034:	103f4326 	beq	r2,zero,6d44 <__svfscanf_r+0xa60>
    7038:	008dc83a 	sub	r6,zero,r2
    703c:	ddc09c15 	stw	r23,624(sp)
    7040:	003fee06 	br	6ffc <__svfscanf_r+0xd18>
    7044:	d880a417 	ldw	r2,656(sp)
    7048:	9009883a 	mov	r4,r18
    704c:	180b883a 	mov	r5,r3
    7050:	15c00017 	ldw	r23,0(r2)
    7054:	15400104 	addi	r21,r2,4
    7058:	000c0280 	call	c028 <__isnand>
    705c:	10021c1e 	bne	r2,zero,78d0 <__svfscanf_r+0x15ec>
    7060:	980b883a 	mov	r5,r19
    7064:	9009883a 	mov	r4,r18
    7068:	00111a00 	call	111a0 <__truncdfsf2>
    706c:	b8800015 	stw	r2,0(r23)
    7070:	003f4206 	br	6d7c <__svfscanf_r+0xa98>
    7074:	e0c03fcc 	andi	r3,fp,255
    7078:	18c0201c 	xori	r3,r3,128
    707c:	18ffe004 	addi	r3,r3,-128
    7080:	008001c4 	movi	r2,7
    7084:	18beef1e 	bne	r3,r2,6c44 <__svfscanf_r+0x960>
    7088:	07000204 	movi	fp,8
    708c:	003edf06 	br	6c0c <__svfscanf_r+0x928>
    7090:	d900a317 	ldw	r4,652(sp)
    7094:	208002a4 	muli	r2,r4,10
    7098:	1145883a 	add	r2,r2,r5
    709c:	10bff404 	addi	r2,r2,-48
    70a0:	d880a315 	stw	r2,652(sp)
    70a4:	003ceb06 	br	6454 <__svfscanf_r+0x170>
    70a8:	9880040c 	andi	r2,r19,16
    70ac:	10001426 	beq	r2,zero,7100 <__svfscanf_r+0xe1c>
    70b0:	0027883a 	mov	r19,zero
    70b4:	00000906 	br	70dc <__svfscanf_r+0xdf8>
    70b8:	80c00117 	ldw	r3,4(r16)
    70bc:	d880a317 	ldw	r2,652(sp)
    70c0:	29800044 	addi	r6,r5,1
    70c4:	18ffffc4 	addi	r3,r3,-1
    70c8:	9cc00044 	addi	r19,r19,1
    70cc:	81800015 	stw	r6,0(r16)
    70d0:	80c00115 	stw	r3,4(r16)
    70d4:	14fdf726 	beq	r2,r19,68b4 <__svfscanf_r+0x5d0>
    70d8:	00c02c0e 	bge	zero,r3,718c <__svfscanf_r+0xea8>
    70dc:	81400017 	ldw	r5,0(r16)
    70e0:	90800017 	ldw	r2,0(r18)
    70e4:	28c00003 	ldbu	r3,0(r5)
    70e8:	1887883a 	add	r3,r3,r2
    70ec:	19000003 	ldbu	r4,0(r3)
    70f0:	2100020c 	andi	r4,r4,8
    70f4:	203ff026 	beq	r4,zero,70b8 <__svfscanf_r+0xdd4>
    70f8:	8ce3883a 	add	r17,r17,r19
    70fc:	003c8c06 	br	6330 <__svfscanf_r+0x4c>
    7100:	d8c0a417 	ldw	r3,656(sp)
    7104:	1d400017 	ldw	r21,0(r3)
    7108:	a827883a 	mov	r19,r21
    710c:	00000e06 	br	7148 <__svfscanf_r+0xe64>
    7110:	80800117 	ldw	r2,4(r16)
    7114:	d900a317 	ldw	r4,652(sp)
    7118:	29800044 	addi	r6,r5,1
    711c:	10ffffc4 	addi	r3,r2,-1
    7120:	213fffc4 	addi	r4,r4,-1
    7124:	d900a315 	stw	r4,652(sp)
    7128:	80c00115 	stw	r3,4(r16)
    712c:	28800003 	ldbu	r2,0(r5)
    7130:	98800005 	stb	r2,0(r19)
    7134:	81800015 	stw	r6,0(r16)
    7138:	9cc00044 	addi	r19,r19,1
    713c:	20000926 	beq	r4,zero,7164 <__svfscanf_r+0xe80>
    7140:	80800117 	ldw	r2,4(r16)
    7144:	0080170e 	bge	zero,r2,71a4 <__svfscanf_r+0xec0>
    7148:	81400017 	ldw	r5,0(r16)
    714c:	90800017 	ldw	r2,0(r18)
    7150:	28c00003 	ldbu	r3,0(r5)
    7154:	1887883a 	add	r3,r3,r2
    7158:	19000003 	ldbu	r4,0(r3)
    715c:	2100020c 	andi	r4,r4,8
    7160:	203feb26 	beq	r4,zero,7110 <__svfscanf_r+0xe2c>
    7164:	9d45c83a 	sub	r2,r19,r21
    7168:	d8c0a217 	ldw	r3,648(sp)
    716c:	88a3883a 	add	r17,r17,r2
    7170:	d880a417 	ldw	r2,656(sp)
    7174:	18c00044 	addi	r3,r3,1
    7178:	d8c0a215 	stw	r3,648(sp)
    717c:	10800104 	addi	r2,r2,4
    7180:	d880a415 	stw	r2,656(sp)
    7184:	98000005 	stb	zero,0(r19)
    7188:	003c6906 	br	6330 <__svfscanf_r+0x4c>
    718c:	b009883a 	mov	r4,r22
    7190:	800b883a 	mov	r5,r16
    7194:	0003bec0 	call	3bec <__srefill_r>
    7198:	103fd026 	beq	r2,zero,70dc <__svfscanf_r+0xdf8>
    719c:	8ce3883a 	add	r17,r17,r19
    71a0:	003c6306 	br	6330 <__svfscanf_r+0x4c>
    71a4:	b009883a 	mov	r4,r22
    71a8:	800b883a 	mov	r5,r16
    71ac:	0003bec0 	call	3bec <__srefill_r>
    71b0:	103fe526 	beq	r2,zero,7148 <__svfscanf_r+0xe64>
    71b4:	003feb06 	br	7164 <__svfscanf_r+0xe80>
    71b8:	d900a317 	ldw	r4,652(sp)
    71bc:	9d41e014 	ori	r21,r19,1920
    71c0:	2000821e 	bne	r4,zero,73cc <__svfscanf_r+0x10e8>
    71c4:	d8c04404 	addi	r3,sp,272
    71c8:	182f883a 	mov	r23,r3
    71cc:	0039883a 	mov	fp,zero
    71d0:	d8c0a615 	stw	r3,664(sp)
    71d4:	d8009c15 	stw	zero,624(sp)
    71d8:	d8009d15 	stw	zero,628(sp)
    71dc:	d8009f15 	stw	zero,636(sp)
    71e0:	d8009e15 	stw	zero,632(sp)
    71e4:	003e9e06 	br	6c60 <__svfscanf_r+0x97c>
    71e8:	d900a317 	ldw	r4,652(sp)
    71ec:	9c836014 	ori	r18,r19,3456
    71f0:	2000161e 	bne	r4,zero,724c <__svfscanf_r+0xf68>
    71f4:	d8804404 	addi	r2,sp,272
    71f8:	d880a615 	stw	r2,664(sp)
    71fc:	002f883a 	mov	r23,zero
    7200:	1027883a 	mov	r19,r2
    7204:	9080400c 	andi	r2,r18,256
    7208:	10000926 	beq	r2,zero,7230 <__svfscanf_r+0xf4c>
    720c:	d8c0a617 	ldw	r3,664(sp)
    7210:	1cc0052e 	bgeu	r3,r19,7228 <__svfscanf_r+0xf44>
    7214:	9cffffc4 	addi	r19,r19,-1
    7218:	99400007 	ldb	r5,0(r19)
    721c:	b009883a 	mov	r4,r22
    7220:	800d883a 	mov	r6,r16
    7224:	000e32c0 	call	e32c <_ungetc_r>
    7228:	d900a617 	ldw	r4,664(sp)
    722c:	24fc6226 	beq	r4,r19,63b8 <__svfscanf_r+0xd4>
    7230:	9080040c 	andi	r2,r18,16
    7234:	10006726 	beq	r2,zero,73d4 <__svfscanf_r+0x10f0>
    7238:	d8c0a617 	ldw	r3,664(sp)
    723c:	98c5c83a 	sub	r2,r19,r3
    7240:	b885883a 	add	r2,r23,r2
    7244:	88a3883a 	add	r17,r17,r2
    7248:	003c3906 	br	6330 <__svfscanf_r+0x4c>
    724c:	002b883a 	mov	r21,zero
    7250:	d8c04404 	addi	r3,sp,272
    7254:	d8c0a615 	stw	r3,664(sp)
    7258:	002f883a 	mov	r23,zero
    725c:	1827883a 	mov	r19,r3
    7260:	81800017 	ldw	r6,0(r16)
    7264:	00c01344 	movi	r3,77
    7268:	31400003 	ldbu	r5,0(r6)
    726c:	28bff544 	addi	r2,r5,-43
    7270:	10803fcc 	andi	r2,r2,255
    7274:	18bfe336 	bltu	r3,r2,7204 <__svfscanf_r+0xf20>
    7278:	1085883a 	add	r2,r2,r2
    727c:	1085883a 	add	r2,r2,r2
    7280:	00c00034 	movhi	r3,0
    7284:	18dca504 	addi	r3,r3,29332
    7288:	10c5883a 	add	r2,r2,r3
    728c:	11000017 	ldw	r4,0(r2)
    7290:	2000683a 	jmp	r4
    7294:	00007428 	cmpgeui	zero,zero,464
    7298:	00007204 	movi	zero,456
    729c:	00007428 	cmpgeui	zero,zero,464
    72a0:	00007204 	movi	zero,456
    72a4:	00007204 	movi	zero,456
    72a8:	0000746c 	andhi	zero,zero,465
    72ac:	00007568 	cmpgeui	zero,zero,469
    72b0:	00007568 	cmpgeui	zero,zero,469
    72b4:	00007568 	cmpgeui	zero,zero,469
    72b8:	00007568 	cmpgeui	zero,zero,469
    72bc:	00007568 	cmpgeui	zero,zero,469
    72c0:	00007568 	cmpgeui	zero,zero,469
    72c4:	00007568 	cmpgeui	zero,zero,469
    72c8:	00007590 	cmplti	zero,zero,470
    72cc:	00007590 	cmplti	zero,zero,470
    72d0:	00007204 	movi	zero,456
    72d4:	00007204 	movi	zero,456
    72d8:	00007204 	movi	zero,456
    72dc:	00007204 	movi	zero,456
    72e0:	00007204 	movi	zero,456
    72e4:	00007204 	movi	zero,456
    72e8:	00007204 	movi	zero,456
    72ec:	000075c0 	call	75c <cam_track+0x298>
    72f0:	000075c0 	call	75c <cam_track+0x298>
    72f4:	000075c0 	call	75c <cam_track+0x298>
    72f8:	000075c0 	call	75c <cam_track+0x298>
    72fc:	000075c0 	call	75c <cam_track+0x298>
    7300:	000075c0 	call	75c <cam_track+0x298>
    7304:	00007204 	movi	zero,456
    7308:	00007204 	movi	zero,456
    730c:	00007204 	movi	zero,456
    7310:	00007204 	movi	zero,456
    7314:	00007204 	movi	zero,456
    7318:	00007204 	movi	zero,456
    731c:	00007204 	movi	zero,456
    7320:	00007204 	movi	zero,456
    7324:	00007204 	movi	zero,456
    7328:	00007204 	movi	zero,456
    732c:	00007204 	movi	zero,456
    7330:	00007204 	movi	zero,456
    7334:	00007204 	movi	zero,456
    7338:	00007204 	movi	zero,456
    733c:	00007204 	movi	zero,456
    7340:	00007204 	movi	zero,456
    7344:	00007204 	movi	zero,456
    7348:	000075d0 	cmplti	zero,zero,471
    734c:	00007204 	movi	zero,456
    7350:	00007204 	movi	zero,456
    7354:	00007204 	movi	zero,456
    7358:	00007204 	movi	zero,456
    735c:	00007204 	movi	zero,456
    7360:	00007204 	movi	zero,456
    7364:	00007204 	movi	zero,456
    7368:	00007204 	movi	zero,456
    736c:	000075c0 	call	75c <cam_track+0x298>
    7370:	000075c0 	call	75c <cam_track+0x298>
    7374:	000075c0 	call	75c <cam_track+0x298>
    7378:	000075c0 	call	75c <cam_track+0x298>
    737c:	000075c0 	call	75c <cam_track+0x298>
    7380:	000075c0 	call	75c <cam_track+0x298>
    7384:	00007204 	movi	zero,456
    7388:	00007204 	movi	zero,456
    738c:	00007204 	movi	zero,456
    7390:	00007204 	movi	zero,456
    7394:	00007204 	movi	zero,456
    7398:	00007204 	movi	zero,456
    739c:	00007204 	movi	zero,456
    73a0:	00007204 	movi	zero,456
    73a4:	00007204 	movi	zero,456
    73a8:	00007204 	movi	zero,456
    73ac:	00007204 	movi	zero,456
    73b0:	00007204 	movi	zero,456
    73b4:	00007204 	movi	zero,456
    73b8:	00007204 	movi	zero,456
    73bc:	00007204 	movi	zero,456
    73c0:	00007204 	movi	zero,456
    73c4:	00007204 	movi	zero,456
    73c8:	000075d0 	cmplti	zero,zero,471
    73cc:	000d883a 	mov	r6,zero
    73d0:	003d9006 	br	6a14 <__svfscanf_r+0x730>
    73d4:	98000005 	stb	zero,0(r19)
    73d8:	d8c0a017 	ldw	r3,640(sp)
    73dc:	d940a617 	ldw	r5,664(sp)
    73e0:	d9c0a117 	ldw	r7,644(sp)
    73e4:	b009883a 	mov	r4,r22
    73e8:	000d883a 	mov	r6,zero
    73ec:	183ee83a 	callr	r3
    73f0:	1007883a 	mov	r3,r2
    73f4:	9080080c 	andi	r2,r18,32
    73f8:	10004d1e 	bne	r2,zero,7530 <__svfscanf_r+0x124c>
    73fc:	9080010c 	andi	r2,r18,4
    7400:	10003426 	beq	r2,zero,74d4 <__svfscanf_r+0x11f0>
    7404:	d900a417 	ldw	r4,656(sp)
    7408:	20800017 	ldw	r2,0(r4)
    740c:	21000104 	addi	r4,r4,4
    7410:	d900a415 	stw	r4,656(sp)
    7414:	10c0000d 	sth	r3,0(r2)
    7418:	d880a217 	ldw	r2,648(sp)
    741c:	10800044 	addi	r2,r2,1
    7420:	d880a215 	stw	r2,648(sp)
    7424:	003f8406 	br	7238 <__svfscanf_r+0xf54>
    7428:	9080200c 	andi	r2,r18,128
    742c:	103f7526 	beq	r2,zero,7204 <__svfscanf_r+0xf20>
    7430:	00bfdfc4 	movi	r2,-129
    7434:	90a4703a 	and	r18,r18,r2
    7438:	99400005 	stb	r5,0(r19)
    743c:	9cc00044 	addi	r19,r19,1
    7440:	80c00117 	ldw	r3,4(r16)
    7444:	18ffffc4 	addi	r3,r3,-1
    7448:	80c00115 	stw	r3,4(r16)
    744c:	00c0130e 	bge	zero,r3,749c <__svfscanf_r+0x11b8>
    7450:	31800044 	addi	r6,r6,1
    7454:	81800015 	stw	r6,0(r16)
    7458:	d880a317 	ldw	r2,652(sp)
    745c:	10bfffc4 	addi	r2,r2,-1
    7460:	d880a315 	stw	r2,652(sp)
    7464:	103f7e1e 	bne	r2,zero,7260 <__svfscanf_r+0xf7c>
    7468:	003f6606 	br	7204 <__svfscanf_r+0xf20>
    746c:	9082000c 	andi	r2,r18,2048
    7470:	103ff126 	beq	r2,zero,7438 <__svfscanf_r+0x1154>
    7474:	d8c0a117 	ldw	r3,644(sp)
    7478:	1800031e 	bne	r3,zero,7488 <__svfscanf_r+0x11a4>
    747c:	01000204 	movi	r4,8
    7480:	94808014 	ori	r18,r18,512
    7484:	d900a115 	stw	r4,644(sp)
    7488:	9081000c 	andi	r2,r18,1024
    748c:	10000826 	beq	r2,zero,74b0 <__svfscanf_r+0x11cc>
    7490:	00be9fc4 	movi	r2,-1409
    7494:	90a4703a 	and	r18,r18,r2
    7498:	003fe706 	br	7438 <__svfscanf_r+0x1154>
    749c:	b009883a 	mov	r4,r22
    74a0:	800b883a 	mov	r5,r16
    74a4:	0003bec0 	call	3bec <__srefill_r>
    74a8:	103feb26 	beq	r2,zero,7458 <__svfscanf_r+0x1174>
    74ac:	003f5506 	br	7204 <__svfscanf_r+0xf20>
    74b0:	a8000426 	beq	r21,zero,74c4 <__svfscanf_r+0x11e0>
    74b4:	d880a317 	ldw	r2,652(sp)
    74b8:	ad7fffc4 	addi	r21,r21,-1
    74bc:	10800044 	addi	r2,r2,1
    74c0:	d880a315 	stw	r2,652(sp)
    74c4:	00bf1fc4 	movi	r2,-897
    74c8:	90a4703a 	and	r18,r18,r2
    74cc:	bdc00044 	addi	r23,r23,1
    74d0:	003fdb06 	br	7440 <__svfscanf_r+0x115c>
    74d4:	9080004c 	andi	r2,r18,1
    74d8:	1005003a 	cmpeq	r2,r2,zero
    74dc:	10001426 	beq	r2,zero,7530 <__svfscanf_r+0x124c>
    74e0:	9080008c 	andi	r2,r18,2
    74e4:	10001226 	beq	r2,zero,7530 <__svfscanf_r+0x124c>
    74e8:	d8c0a017 	ldw	r3,640(sp)
    74ec:	00800074 	movhi	r2,1
    74f0:	10b74304 	addi	r2,r2,-8948
    74f4:	18801426 	beq	r3,r2,7548 <__svfscanf_r+0x1264>
    74f8:	d9c0a117 	ldw	r7,644(sp)
    74fc:	d940a617 	ldw	r5,664(sp)
    7500:	000d883a 	mov	r6,zero
    7504:	b009883a 	mov	r4,r22
    7508:	000d9f40 	call	d9f4 <_strtoll_r>
    750c:	100d883a 	mov	r6,r2
    7510:	180f883a 	mov	r7,r3
    7514:	d900a417 	ldw	r4,656(sp)
    7518:	20800017 	ldw	r2,0(r4)
    751c:	21000104 	addi	r4,r4,4
    7520:	d900a415 	stw	r4,656(sp)
    7524:	11c00115 	stw	r7,4(r2)
    7528:	11800015 	stw	r6,0(r2)
    752c:	003fba06 	br	7418 <__svfscanf_r+0x1134>
    7530:	d900a417 	ldw	r4,656(sp)
    7534:	20800017 	ldw	r2,0(r4)
    7538:	21000104 	addi	r4,r4,4
    753c:	d900a415 	stw	r4,656(sp)
    7540:	10c00015 	stw	r3,0(r2)
    7544:	003fb406 	br	7418 <__svfscanf_r+0x1134>
    7548:	d9c0a117 	ldw	r7,644(sp)
    754c:	d940a617 	ldw	r5,664(sp)
    7550:	000d883a 	mov	r6,zero
    7554:	b009883a 	mov	r4,r22
    7558:	000df600 	call	df60 <_strtoull_r>
    755c:	100d883a 	mov	r6,r2
    7560:	180f883a 	mov	r7,r3
    7564:	003feb06 	br	7514 <__svfscanf_r+0x1230>
    7568:	d8c0a117 	ldw	r3,644(sp)
    756c:	18c5883a 	add	r2,r3,r3
    7570:	00c00074 	movhi	r3,1
    7574:	18d41d84 	addi	r3,r3,20598
    7578:	10c5883a 	add	r2,r2,r3
    757c:	1080000f 	ldh	r2,0(r2)
    7580:	00fd1fc4 	movi	r3,-2945
    7584:	90e4703a 	and	r18,r18,r3
    7588:	d880a115 	stw	r2,644(sp)
    758c:	003faa06 	br	7438 <__svfscanf_r+0x1154>
    7590:	d900a117 	ldw	r4,644(sp)
    7594:	00c00074 	movhi	r3,1
    7598:	18d41d84 	addi	r3,r3,20598
    759c:	2105883a 	add	r2,r4,r4
    75a0:	10c5883a 	add	r2,r2,r3
    75a4:	1080000f 	ldh	r2,0(r2)
    75a8:	00c00204 	movi	r3,8
    75ac:	d880a115 	stw	r2,644(sp)
    75b0:	18bf140e 	bge	r3,r2,7204 <__svfscanf_r+0xf20>
    75b4:	00bd1fc4 	movi	r2,-2945
    75b8:	90a4703a 	and	r18,r18,r2
    75bc:	003f9e06 	br	7438 <__svfscanf_r+0x1154>
    75c0:	d8c0a117 	ldw	r3,644(sp)
    75c4:	00800284 	movi	r2,10
    75c8:	10fffa16 	blt	r2,r3,75b4 <__svfscanf_r+0x12d0>
    75cc:	003f0d06 	br	7204 <__svfscanf_r+0xf20>
    75d0:	90c1800c 	andi	r3,r18,1536
    75d4:	00808004 	movi	r2,512
    75d8:	18bf0a1e 	bne	r3,r2,7204 <__svfscanf_r+0xf20>
    75dc:	00bf7fc4 	movi	r2,-513
    75e0:	9084703a 	and	r2,r18,r2
    75e4:	01000404 	movi	r4,16
    75e8:	14814014 	ori	r18,r2,1280
    75ec:	d900a115 	stw	r4,644(sp)
    75f0:	003f9106 	br	7438 <__svfscanf_r+0x1154>
    75f4:	d880a417 	ldw	r2,656(sp)
    75f8:	dd400404 	addi	r21,sp,16
    75fc:	14800017 	ldw	r18,0(r2)
    7600:	9027883a 	mov	r19,r18
    7604:	81000017 	ldw	r4,0(r16)
    7608:	20800003 	ldbu	r2,0(r4)
    760c:	a885883a 	add	r2,r21,r2
    7610:	10c00007 	ldb	r3,0(r2)
    7614:	18001426 	beq	r3,zero,7668 <__svfscanf_r+0x1384>
    7618:	d8c0a317 	ldw	r3,652(sp)
    761c:	80800117 	ldw	r2,4(r16)
    7620:	21800044 	addi	r6,r4,1
    7624:	18ffffc4 	addi	r3,r3,-1
    7628:	d8c0a315 	stw	r3,652(sp)
    762c:	10ffffc4 	addi	r3,r2,-1
    7630:	80c00115 	stw	r3,4(r16)
    7634:	20800003 	ldbu	r2,0(r4)
    7638:	90800005 	stb	r2,0(r18)
    763c:	d900a317 	ldw	r4,652(sp)
    7640:	81800015 	stw	r6,0(r16)
    7644:	94800044 	addi	r18,r18,1
    7648:	20000726 	beq	r4,zero,7668 <__svfscanf_r+0x1384>
    764c:	80800117 	ldw	r2,4(r16)
    7650:	00bfec16 	blt	zero,r2,7604 <__svfscanf_r+0x1320>
    7654:	b009883a 	mov	r4,r22
    7658:	800b883a 	mov	r5,r16
    765c:	0003bec0 	call	3bec <__srefill_r>
    7660:	103fe826 	beq	r2,zero,7604 <__svfscanf_r+0x1320>
    7664:	9cbb7426 	beq	r19,r18,6438 <__svfscanf_r+0x154>
    7668:	94e7c83a 	sub	r19,r18,r19
    766c:	983b5226 	beq	r19,zero,63b8 <__svfscanf_r+0xd4>
    7670:	90000005 	stb	zero,0(r18)
    7674:	d880a417 	ldw	r2,656(sp)
    7678:	d8c0a217 	ldw	r3,648(sp)
    767c:	8ce3883a 	add	r17,r17,r19
    7680:	10800104 	addi	r2,r2,4
    7684:	18c00044 	addi	r3,r3,1
    7688:	d880a415 	stw	r2,656(sp)
    768c:	d8c0a215 	stw	r3,648(sp)
    7690:	003b2706 	br	6330 <__svfscanf_r+0x4c>
    7694:	9cc00414 	ori	r19,r19,16
    7698:	003b6e06 	br	6454 <__svfscanf_r+0x170>
    769c:	00c00404 	movi	r3,16
    76a0:	01000074 	movhi	r4,1
    76a4:	21374304 	addi	r4,r4,-8948
    76a8:	9cc08014 	ori	r19,r19,512
    76ac:	054000c4 	movi	r21,3
    76b0:	d8c0a115 	stw	r3,644(sp)
    76b4:	d900a015 	stw	r4,640(sp)
    76b8:	003bf806 	br	669c <__svfscanf_r+0x3b8>
    76bc:	9880040c 	andi	r2,r19,16
    76c0:	10001926 	beq	r2,zero,7728 <__svfscanf_r+0x1444>
    76c4:	0027883a 	mov	r19,zero
    76c8:	00000b06 	br	76f8 <__svfscanf_r+0x1414>
    76cc:	80800017 	ldw	r2,0(r16)
    76d0:	b009883a 	mov	r4,r22
    76d4:	800b883a 	mov	r5,r16
    76d8:	148d883a 	add	r6,r2,r18
    76dc:	81800015 	stw	r6,0(r16)
    76e0:	9ca7883a 	add	r19,r19,r18
    76e4:	0003bec0 	call	3bec <__srefill_r>
    76e8:	103c711e 	bne	r2,zero,68b0 <__svfscanf_r+0x5cc>
    76ec:	d900a317 	ldw	r4,652(sp)
    76f0:	2489c83a 	sub	r4,r4,r18
    76f4:	d900a315 	stw	r4,652(sp)
    76f8:	84800117 	ldw	r18,4(r16)
    76fc:	d8c0a317 	ldw	r3,652(sp)
    7700:	90fff216 	blt	r18,r3,76cc <__svfscanf_r+0x13e8>
    7704:	d900a317 	ldw	r4,652(sp)
    7708:	80800017 	ldw	r2,0(r16)
    770c:	9927883a 	add	r19,r19,r4
    7710:	9107c83a 	sub	r3,r18,r4
    7714:	110d883a 	add	r6,r2,r4
    7718:	8ce3883a 	add	r17,r17,r19
    771c:	80c00115 	stw	r3,4(r16)
    7720:	81800015 	stw	r6,0(r16)
    7724:	003b0206 	br	6330 <__svfscanf_r+0x4c>
    7728:	d880a417 	ldw	r2,656(sp)
    772c:	d980a317 	ldw	r6,652(sp)
    7730:	01400044 	movi	r5,1
    7734:	11000017 	ldw	r4,0(r2)
    7738:	800f883a 	mov	r7,r16
    773c:	00099a40 	call	99a4 <fread>
    7740:	103b3d26 	beq	r2,zero,6438 <__svfscanf_r+0x154>
    7744:	d8c0a417 	ldw	r3,656(sp)
    7748:	d900a217 	ldw	r4,648(sp)
    774c:	88a3883a 	add	r17,r17,r2
    7750:	18c00104 	addi	r3,r3,4
    7754:	21000044 	addi	r4,r4,1
    7758:	d8c0a415 	stw	r3,656(sp)
    775c:	d900a215 	stw	r4,648(sp)
    7760:	003af306 	br	6330 <__svfscanf_r+0x4c>
    7764:	8080030b 	ldhu	r2,12(r16)
    7768:	1080100c 	andi	r2,r2,64
    776c:	103b1226 	beq	r2,zero,63b8 <__svfscanf_r+0xd4>
    7770:	003b3306 	br	6440 <__svfscanf_r+0x15c>
    7774:	983b1026 	beq	r19,zero,63b8 <__svfscanf_r+0xd4>
    7778:	8ce3883a 	add	r17,r17,r19
    777c:	003aec06 	br	6330 <__svfscanf_r+0x4c>
    7780:	983c9626 	beq	r19,zero,69dc <__svfscanf_r+0x6f8>
    7784:	9cffffc4 	addi	r19,r19,-1
    7788:	d8c04404 	addi	r3,sp,272
    778c:	1cc5883a 	add	r2,r3,r19
    7790:	11400003 	ldbu	r5,0(r2)
    7794:	b009883a 	mov	r4,r22
    7798:	800d883a 	mov	r6,r16
    779c:	000e32c0 	call	e32c <_ungetc_r>
    77a0:	003ff706 	br	7780 <__svfscanf_r+0x149c>
    77a4:	00bfff84 	movi	r2,-2
    77a8:	18bc7a1e 	bne	r3,r2,6994 <__svfscanf_r+0x6b0>
    77ac:	003c8406 	br	69c0 <__svfscanf_r+0x6dc>
    77b0:	d900a417 	ldw	r4,656(sp)
    77b4:	25400017 	ldw	r21,0(r4)
    77b8:	21000104 	addi	r4,r4,4
    77bc:	d900a415 	stw	r4,656(sp)
    77c0:	003c4a06 	br	68ec <__svfscanf_r+0x608>
    77c4:	00bfff84 	movi	r2,-2
    77c8:	18bc0f1e 	bne	r3,r2,6808 <__svfscanf_r+0x524>
    77cc:	003c1506 	br	6824 <__svfscanf_r+0x540>
    77d0:	b009883a 	mov	r4,r22
    77d4:	800b883a 	mov	r5,r16
    77d8:	0003bec0 	call	3bec <__srefill_r>
    77dc:	103c1326 	beq	r2,zero,682c <__svfscanf_r+0x548>
    77e0:	903b151e 	bne	r18,zero,6438 <__svfscanf_r+0x154>
    77e4:	a83ad21e 	bne	r21,zero,6330 <__svfscanf_r+0x4c>
    77e8:	d880a217 	ldw	r2,648(sp)
    77ec:	10800044 	addi	r2,r2,1
    77f0:	d880a215 	stw	r2,648(sp)
    77f4:	003ace06 	br	6330 <__svfscanf_r+0x4c>
    77f8:	0027883a 	mov	r19,zero
    77fc:	003bdd06 	br	6774 <__svfscanf_r+0x490>
    7800:	9cc00114 	ori	r19,r19,4
    7804:	003b1306 	br	6454 <__svfscanf_r+0x170>
    7808:	05400104 	movi	r21,4
    780c:	003ba306 	br	669c <__svfscanf_r+0x3b8>
    7810:	9cc00054 	ori	r19,r19,1
    7814:	00800074 	movhi	r2,1
    7818:	10b5e304 	addi	r2,r2,-10356
    781c:	00c00284 	movi	r3,10
    7820:	054000c4 	movi	r21,3
    7824:	d880a015 	stw	r2,640(sp)
    7828:	d8c0a115 	stw	r3,644(sp)
    782c:	003b9b06 	br	669c <__svfscanf_r+0x3b8>
    7830:	9cc01014 	ori	r19,r19,64
    7834:	002b883a 	mov	r21,zero
    7838:	003b9806 	br	669c <__svfscanf_r+0x3b8>
    783c:	a00b883a 	mov	r5,r20
    7840:	d9000404 	addi	r4,sp,16
    7844:	000c0580 	call	c058 <__sccl>
    7848:	1029883a 	mov	r20,r2
    784c:	9cc01014 	ori	r19,r19,64
    7850:	05400044 	movi	r21,1
    7854:	003b9106 	br	669c <__svfscanf_r+0x3b8>
    7858:	9cc00054 	ori	r19,r19,1
    785c:	00800204 	movi	r2,8
    7860:	00c00074 	movhi	r3,1
    7864:	18f74304 	addi	r3,r3,-8948
    7868:	054000c4 	movi	r21,3
    786c:	d880a115 	stw	r2,644(sp)
    7870:	d8c0a015 	stw	r3,640(sp)
    7874:	003b8906 	br	669c <__svfscanf_r+0x3b8>
    7878:	9880040c 	andi	r2,r19,16
    787c:	103aac1e 	bne	r2,zero,6330 <__svfscanf_r+0x4c>
    7880:	9880010c 	andi	r2,r19,4
    7884:	10002426 	beq	r2,zero,7918 <__svfscanf_r+0x1634>
    7888:	d900a417 	ldw	r4,656(sp)
    788c:	20800017 	ldw	r2,0(r4)
    7890:	21000104 	addi	r4,r4,4
    7894:	d900a415 	stw	r4,656(sp)
    7898:	1440000d 	sth	r17,0(r2)
    789c:	003aa406 	br	6330 <__svfscanf_r+0x4c>
    78a0:	9cc00094 	ori	r19,r19,2
    78a4:	003aeb06 	br	6454 <__svfscanf_r+0x170>
    78a8:	05400084 	movi	r21,2
    78ac:	003b7b06 	br	669c <__svfscanf_r+0x3b8>
    78b0:	00800404 	movi	r2,16
    78b4:	00c00074 	movhi	r3,1
    78b8:	18f74304 	addi	r3,r3,-8948
    78bc:	9cc08814 	ori	r19,r19,544
    78c0:	054000c4 	movi	r21,3
    78c4:	d880a115 	stw	r2,644(sp)
    78c8:	d8c0a015 	stw	r3,640(sp)
    78cc:	003b7306 	br	669c <__svfscanf_r+0x3b8>
    78d0:	0009883a 	mov	r4,zero
    78d4:	000c1180 	call	c118 <nanf>
    78d8:	b8800015 	stw	r2,0(r23)
    78dc:	003d2706 	br	6d7c <__svfscanf_r+0xa98>
    78e0:	a0c00007 	ldb	r3,0(r20)
    78e4:	00801b04 	movi	r2,108
    78e8:	18800826 	beq	r3,r2,790c <__svfscanf_r+0x1628>
    78ec:	9cc00054 	ori	r19,r19,1
    78f0:	003ad806 	br	6454 <__svfscanf_r+0x170>
    78f4:	01000074 	movhi	r4,1
    78f8:	2135e304 	addi	r4,r4,-10356
    78fc:	054000c4 	movi	r21,3
    7900:	d900a015 	stw	r4,640(sp)
    7904:	d800a115 	stw	zero,644(sp)
    7908:	003b6406 	br	669c <__svfscanf_r+0x3b8>
    790c:	a5000044 	addi	r20,r20,1
    7910:	9cc00094 	ori	r19,r19,2
    7914:	003acf06 	br	6454 <__svfscanf_r+0x170>
    7918:	9880004c 	andi	r2,r19,1
    791c:	1005003a 	cmpeq	r2,r2,zero
    7920:	10000a26 	beq	r2,zero,794c <__svfscanf_r+0x1668>
    7924:	9880008c 	andi	r2,r19,2
    7928:	10000826 	beq	r2,zero,794c <__svfscanf_r+0x1668>
    792c:	d900a417 	ldw	r4,656(sp)
    7930:	8807d7fa 	srai	r3,r17,31
    7934:	20800017 	ldw	r2,0(r4)
    7938:	21000104 	addi	r4,r4,4
    793c:	d900a415 	stw	r4,656(sp)
    7940:	14400015 	stw	r17,0(r2)
    7944:	10c00115 	stw	r3,4(r2)
    7948:	003a7906 	br	6330 <__svfscanf_r+0x4c>
    794c:	d8c0a417 	ldw	r3,656(sp)
    7950:	18800017 	ldw	r2,0(r3)
    7954:	18c00104 	addi	r3,r3,4
    7958:	d8c0a415 	stw	r3,656(sp)
    795c:	14400015 	stw	r17,0(r2)
    7960:	003a7306 	br	6330 <__svfscanf_r+0x4c>

00007964 <__svfscanf>:
    7964:	00800074 	movhi	r2,1
    7968:	109b9704 	addi	r2,r2,28252
    796c:	2013883a 	mov	r9,r4
    7970:	11000017 	ldw	r4,0(r2)
    7974:	2805883a 	mov	r2,r5
    7978:	300f883a 	mov	r7,r6
    797c:	480b883a 	mov	r5,r9
    7980:	100d883a 	mov	r6,r2
    7984:	00062e41 	jmpi	62e4 <__svfscanf_r>

00007988 <_vfscanf_r>:
    7988:	defffb04 	addi	sp,sp,-20
    798c:	dcc00315 	stw	r19,12(sp)
    7990:	dc800215 	stw	r18,8(sp)
    7994:	dc400115 	stw	r17,4(sp)
    7998:	dc000015 	stw	r16,0(sp)
    799c:	dfc00415 	stw	ra,16(sp)
    79a0:	2021883a 	mov	r16,r4
    79a4:	2823883a 	mov	r17,r5
    79a8:	3025883a 	mov	r18,r6
    79ac:	3827883a 	mov	r19,r7
    79b0:	20000226 	beq	r4,zero,79bc <_vfscanf_r+0x34>
    79b4:	20800e17 	ldw	r2,56(r4)
    79b8:	10000b26 	beq	r2,zero,79e8 <_vfscanf_r+0x60>
    79bc:	8009883a 	mov	r4,r16
    79c0:	880b883a 	mov	r5,r17
    79c4:	900d883a 	mov	r6,r18
    79c8:	980f883a 	mov	r7,r19
    79cc:	dfc00417 	ldw	ra,16(sp)
    79d0:	dcc00317 	ldw	r19,12(sp)
    79d4:	dc800217 	ldw	r18,8(sp)
    79d8:	dc400117 	ldw	r17,4(sp)
    79dc:	dc000017 	ldw	r16,0(sp)
    79e0:	dec00504 	addi	sp,sp,20
    79e4:	00062e41 	jmpi	62e4 <__svfscanf_r>
    79e8:	0002d680 	call	2d68 <__sinit>
    79ec:	003ff306 	br	79bc <_vfscanf_r+0x34>

000079f0 <vfscanf>:
    79f0:	defffb04 	addi	sp,sp,-20
    79f4:	dcc00315 	stw	r19,12(sp)
    79f8:	04c00074 	movhi	r19,1
    79fc:	9cdb9704 	addi	r19,r19,28252
    7a00:	98c00017 	ldw	r3,0(r19)
    7a04:	dc800215 	stw	r18,8(sp)
    7a08:	dc400115 	stw	r17,4(sp)
    7a0c:	dc000015 	stw	r16,0(sp)
    7a10:	dfc00415 	stw	ra,16(sp)
    7a14:	2021883a 	mov	r16,r4
    7a18:	2823883a 	mov	r17,r5
    7a1c:	3025883a 	mov	r18,r6
    7a20:	18000326 	beq	r3,zero,7a30 <vfscanf+0x40>
    7a24:	18800e17 	ldw	r2,56(r3)
    7a28:	1809883a 	mov	r4,r3
    7a2c:	10000b26 	beq	r2,zero,7a5c <vfscanf+0x6c>
    7a30:	99000017 	ldw	r4,0(r19)
    7a34:	800b883a 	mov	r5,r16
    7a38:	880d883a 	mov	r6,r17
    7a3c:	900f883a 	mov	r7,r18
    7a40:	dfc00417 	ldw	ra,16(sp)
    7a44:	dcc00317 	ldw	r19,12(sp)
    7a48:	dc800217 	ldw	r18,8(sp)
    7a4c:	dc400117 	ldw	r17,4(sp)
    7a50:	dc000017 	ldw	r16,0(sp)
    7a54:	dec00504 	addi	sp,sp,20
    7a58:	00062e41 	jmpi	62e4 <__svfscanf_r>
    7a5c:	0002d680 	call	2d68 <__sinit>
    7a60:	003ff306 	br	7a30 <vfscanf+0x40>

00007a64 <_write_r>:
    7a64:	defffd04 	addi	sp,sp,-12
    7a68:	dc000015 	stw	r16,0(sp)
    7a6c:	040000b4 	movhi	r16,2
    7a70:	84227104 	addi	r16,r16,-30268
    7a74:	dc400115 	stw	r17,4(sp)
    7a78:	80000015 	stw	zero,0(r16)
    7a7c:	2023883a 	mov	r17,r4
    7a80:	2809883a 	mov	r4,r5
    7a84:	300b883a 	mov	r5,r6
    7a88:	380d883a 	mov	r6,r7
    7a8c:	dfc00215 	stw	ra,8(sp)
    7a90:	00125980 	call	12598 <write>
    7a94:	1007883a 	mov	r3,r2
    7a98:	00bfffc4 	movi	r2,-1
    7a9c:	18800626 	beq	r3,r2,7ab8 <_write_r+0x54>
    7aa0:	1805883a 	mov	r2,r3
    7aa4:	dfc00217 	ldw	ra,8(sp)
    7aa8:	dc400117 	ldw	r17,4(sp)
    7aac:	dc000017 	ldw	r16,0(sp)
    7ab0:	dec00304 	addi	sp,sp,12
    7ab4:	f800283a 	ret
    7ab8:	80800017 	ldw	r2,0(r16)
    7abc:	103ff826 	beq	r2,zero,7aa0 <_write_r+0x3c>
    7ac0:	88800015 	stw	r2,0(r17)
    7ac4:	1805883a 	mov	r2,r3
    7ac8:	dfc00217 	ldw	ra,8(sp)
    7acc:	dc400117 	ldw	r17,4(sp)
    7ad0:	dc000017 	ldw	r16,0(sp)
    7ad4:	dec00304 	addi	sp,sp,12
    7ad8:	f800283a 	ret

00007adc <__swsetup_r>:
    7adc:	00800074 	movhi	r2,1
    7ae0:	109b9704 	addi	r2,r2,28252
    7ae4:	10c00017 	ldw	r3,0(r2)
    7ae8:	defffd04 	addi	sp,sp,-12
    7aec:	dc400115 	stw	r17,4(sp)
    7af0:	dc000015 	stw	r16,0(sp)
    7af4:	dfc00215 	stw	ra,8(sp)
    7af8:	2023883a 	mov	r17,r4
    7afc:	2821883a 	mov	r16,r5
    7b00:	18000226 	beq	r3,zero,7b0c <__swsetup_r+0x30>
    7b04:	18800e17 	ldw	r2,56(r3)
    7b08:	10001f26 	beq	r2,zero,7b88 <__swsetup_r+0xac>
    7b0c:	8100030b 	ldhu	r4,12(r16)
    7b10:	2080020c 	andi	r2,r4,8
    7b14:	10002826 	beq	r2,zero,7bb8 <__swsetup_r+0xdc>
    7b18:	81400417 	ldw	r5,16(r16)
    7b1c:	28001d26 	beq	r5,zero,7b94 <__swsetup_r+0xb8>
    7b20:	2080004c 	andi	r2,r4,1
    7b24:	1005003a 	cmpeq	r2,r2,zero
    7b28:	10000b26 	beq	r2,zero,7b58 <__swsetup_r+0x7c>
    7b2c:	2080008c 	andi	r2,r4,2
    7b30:	10001226 	beq	r2,zero,7b7c <__swsetup_r+0xa0>
    7b34:	0005883a 	mov	r2,zero
    7b38:	80800215 	stw	r2,8(r16)
    7b3c:	28000b26 	beq	r5,zero,7b6c <__swsetup_r+0x90>
    7b40:	0005883a 	mov	r2,zero
    7b44:	dfc00217 	ldw	ra,8(sp)
    7b48:	dc400117 	ldw	r17,4(sp)
    7b4c:	dc000017 	ldw	r16,0(sp)
    7b50:	dec00304 	addi	sp,sp,12
    7b54:	f800283a 	ret
    7b58:	80800517 	ldw	r2,20(r16)
    7b5c:	80000215 	stw	zero,8(r16)
    7b60:	0085c83a 	sub	r2,zero,r2
    7b64:	80800615 	stw	r2,24(r16)
    7b68:	283ff51e 	bne	r5,zero,7b40 <__swsetup_r+0x64>
    7b6c:	2080200c 	andi	r2,r4,128
    7b70:	103ff326 	beq	r2,zero,7b40 <__swsetup_r+0x64>
    7b74:	00bfffc4 	movi	r2,-1
    7b78:	003ff206 	br	7b44 <__swsetup_r+0x68>
    7b7c:	80800517 	ldw	r2,20(r16)
    7b80:	80800215 	stw	r2,8(r16)
    7b84:	003fed06 	br	7b3c <__swsetup_r+0x60>
    7b88:	1809883a 	mov	r4,r3
    7b8c:	0002d680 	call	2d68 <__sinit>
    7b90:	003fde06 	br	7b0c <__swsetup_r+0x30>
    7b94:	20c0a00c 	andi	r3,r4,640
    7b98:	00808004 	movi	r2,512
    7b9c:	18bfe026 	beq	r3,r2,7b20 <__swsetup_r+0x44>
    7ba0:	8809883a 	mov	r4,r17
    7ba4:	800b883a 	mov	r5,r16
    7ba8:	000a4280 	call	a428 <__smakebuf_r>
    7bac:	8100030b 	ldhu	r4,12(r16)
    7bb0:	81400417 	ldw	r5,16(r16)
    7bb4:	003fda06 	br	7b20 <__swsetup_r+0x44>
    7bb8:	2080040c 	andi	r2,r4,16
    7bbc:	103fed26 	beq	r2,zero,7b74 <__swsetup_r+0x98>
    7bc0:	2080010c 	andi	r2,r4,4
    7bc4:	10001226 	beq	r2,zero,7c10 <__swsetup_r+0x134>
    7bc8:	81400c17 	ldw	r5,48(r16)
    7bcc:	28000526 	beq	r5,zero,7be4 <__swsetup_r+0x108>
    7bd0:	80801004 	addi	r2,r16,64
    7bd4:	28800226 	beq	r5,r2,7be0 <__swsetup_r+0x104>
    7bd8:	8809883a 	mov	r4,r17
    7bdc:	0009b100 	call	9b10 <_free_r>
    7be0:	80000c15 	stw	zero,48(r16)
    7be4:	8080030b 	ldhu	r2,12(r16)
    7be8:	81400417 	ldw	r5,16(r16)
    7bec:	80000115 	stw	zero,4(r16)
    7bf0:	10bff6cc 	andi	r2,r2,65499
    7bf4:	8080030d 	sth	r2,12(r16)
    7bf8:	81400015 	stw	r5,0(r16)
    7bfc:	8080030b 	ldhu	r2,12(r16)
    7c00:	10800214 	ori	r2,r2,8
    7c04:	113fffcc 	andi	r4,r2,65535
    7c08:	8080030d 	sth	r2,12(r16)
    7c0c:	003fc306 	br	7b1c <__swsetup_r+0x40>
    7c10:	81400417 	ldw	r5,16(r16)
    7c14:	003ff906 	br	7bfc <__swsetup_r+0x120>

00007c18 <_close_r>:
    7c18:	defffd04 	addi	sp,sp,-12
    7c1c:	dc000015 	stw	r16,0(sp)
    7c20:	040000b4 	movhi	r16,2
    7c24:	84227104 	addi	r16,r16,-30268
    7c28:	dc400115 	stw	r17,4(sp)
    7c2c:	80000015 	stw	zero,0(r16)
    7c30:	2023883a 	mov	r17,r4
    7c34:	2809883a 	mov	r4,r5
    7c38:	dfc00215 	stw	ra,8(sp)
    7c3c:	0011c380 	call	11c38 <close>
    7c40:	1007883a 	mov	r3,r2
    7c44:	00bfffc4 	movi	r2,-1
    7c48:	18800626 	beq	r3,r2,7c64 <_close_r+0x4c>
    7c4c:	1805883a 	mov	r2,r3
    7c50:	dfc00217 	ldw	ra,8(sp)
    7c54:	dc400117 	ldw	r17,4(sp)
    7c58:	dc000017 	ldw	r16,0(sp)
    7c5c:	dec00304 	addi	sp,sp,12
    7c60:	f800283a 	ret
    7c64:	80800017 	ldw	r2,0(r16)
    7c68:	103ff826 	beq	r2,zero,7c4c <_close_r+0x34>
    7c6c:	88800015 	stw	r2,0(r17)
    7c70:	1805883a 	mov	r2,r3
    7c74:	dfc00217 	ldw	ra,8(sp)
    7c78:	dc400117 	ldw	r17,4(sp)
    7c7c:	dc000017 	ldw	r16,0(sp)
    7c80:	dec00304 	addi	sp,sp,12
    7c84:	f800283a 	ret

00007c88 <quorem>:
    7c88:	28c00417 	ldw	r3,16(r5)
    7c8c:	20800417 	ldw	r2,16(r4)
    7c90:	defff604 	addi	sp,sp,-40
    7c94:	ddc00715 	stw	r23,28(sp)
    7c98:	dd400515 	stw	r21,20(sp)
    7c9c:	dfc00915 	stw	ra,36(sp)
    7ca0:	df000815 	stw	fp,32(sp)
    7ca4:	dd800615 	stw	r22,24(sp)
    7ca8:	dd000415 	stw	r20,16(sp)
    7cac:	dcc00315 	stw	r19,12(sp)
    7cb0:	dc800215 	stw	r18,8(sp)
    7cb4:	dc400115 	stw	r17,4(sp)
    7cb8:	dc000015 	stw	r16,0(sp)
    7cbc:	202f883a 	mov	r23,r4
    7cc0:	282b883a 	mov	r21,r5
    7cc4:	10c07416 	blt	r2,r3,7e98 <quorem+0x210>
    7cc8:	1c7fffc4 	addi	r17,r3,-1
    7ccc:	8c45883a 	add	r2,r17,r17
    7cd0:	1085883a 	add	r2,r2,r2
    7cd4:	2c000504 	addi	r16,r5,20
    7cd8:	24c00504 	addi	r19,r4,20
    7cdc:	14ed883a 	add	r22,r2,r19
    7ce0:	80a5883a 	add	r18,r16,r2
    7ce4:	b7000017 	ldw	fp,0(r22)
    7ce8:	91400017 	ldw	r5,0(r18)
    7cec:	e009883a 	mov	r4,fp
    7cf0:	29400044 	addi	r5,r5,1
    7cf4:	0002b840 	call	2b84 <__udivsi3>
    7cf8:	1029883a 	mov	r20,r2
    7cfc:	10003c1e 	bne	r2,zero,7df0 <quorem+0x168>
    7d00:	a80b883a 	mov	r5,r21
    7d04:	b809883a 	mov	r4,r23
    7d08:	000a8f80 	call	a8f8 <__mcmp>
    7d0c:	10002b16 	blt	r2,zero,7dbc <quorem+0x134>
    7d10:	a5000044 	addi	r20,r20,1
    7d14:	980f883a 	mov	r7,r19
    7d18:	0011883a 	mov	r8,zero
    7d1c:	0009883a 	mov	r4,zero
    7d20:	81400017 	ldw	r5,0(r16)
    7d24:	38c00017 	ldw	r3,0(r7)
    7d28:	84000104 	addi	r16,r16,4
    7d2c:	28bfffcc 	andi	r2,r5,65535
    7d30:	2085883a 	add	r2,r4,r2
    7d34:	11bfffcc 	andi	r6,r2,65535
    7d38:	193fffcc 	andi	r4,r3,65535
    7d3c:	1004d43a 	srli	r2,r2,16
    7d40:	280ad43a 	srli	r5,r5,16
    7d44:	2189c83a 	sub	r4,r4,r6
    7d48:	2209883a 	add	r4,r4,r8
    7d4c:	1806d43a 	srli	r3,r3,16
    7d50:	288b883a 	add	r5,r5,r2
    7d54:	200dd43a 	srai	r6,r4,16
    7d58:	28bfffcc 	andi	r2,r5,65535
    7d5c:	1887c83a 	sub	r3,r3,r2
    7d60:	1987883a 	add	r3,r3,r6
    7d64:	3900000d 	sth	r4,0(r7)
    7d68:	38c0008d 	sth	r3,2(r7)
    7d6c:	2808d43a 	srli	r4,r5,16
    7d70:	39c00104 	addi	r7,r7,4
    7d74:	1811d43a 	srai	r8,r3,16
    7d78:	943fe92e 	bgeu	r18,r16,7d20 <quorem+0x98>
    7d7c:	8c45883a 	add	r2,r17,r17
    7d80:	1085883a 	add	r2,r2,r2
    7d84:	9885883a 	add	r2,r19,r2
    7d88:	10c00017 	ldw	r3,0(r2)
    7d8c:	18000b1e 	bne	r3,zero,7dbc <quorem+0x134>
    7d90:	113fff04 	addi	r4,r2,-4
    7d94:	9900082e 	bgeu	r19,r4,7db8 <quorem+0x130>
    7d98:	10bfff17 	ldw	r2,-4(r2)
    7d9c:	10000326 	beq	r2,zero,7dac <quorem+0x124>
    7da0:	00000506 	br	7db8 <quorem+0x130>
    7da4:	20800017 	ldw	r2,0(r4)
    7da8:	1000031e 	bne	r2,zero,7db8 <quorem+0x130>
    7dac:	213fff04 	addi	r4,r4,-4
    7db0:	8c7fffc4 	addi	r17,r17,-1
    7db4:	993ffb36 	bltu	r19,r4,7da4 <quorem+0x11c>
    7db8:	bc400415 	stw	r17,16(r23)
    7dbc:	a005883a 	mov	r2,r20
    7dc0:	dfc00917 	ldw	ra,36(sp)
    7dc4:	df000817 	ldw	fp,32(sp)
    7dc8:	ddc00717 	ldw	r23,28(sp)
    7dcc:	dd800617 	ldw	r22,24(sp)
    7dd0:	dd400517 	ldw	r21,20(sp)
    7dd4:	dd000417 	ldw	r20,16(sp)
    7dd8:	dcc00317 	ldw	r19,12(sp)
    7ddc:	dc800217 	ldw	r18,8(sp)
    7de0:	dc400117 	ldw	r17,4(sp)
    7de4:	dc000017 	ldw	r16,0(sp)
    7de8:	dec00a04 	addi	sp,sp,40
    7dec:	f800283a 	ret
    7df0:	980f883a 	mov	r7,r19
    7df4:	8011883a 	mov	r8,r16
    7df8:	0013883a 	mov	r9,zero
    7dfc:	000d883a 	mov	r6,zero
    7e00:	40c00017 	ldw	r3,0(r8)
    7e04:	39000017 	ldw	r4,0(r7)
    7e08:	42000104 	addi	r8,r8,4
    7e0c:	18bfffcc 	andi	r2,r3,65535
    7e10:	a085383a 	mul	r2,r20,r2
    7e14:	1806d43a 	srli	r3,r3,16
    7e18:	217fffcc 	andi	r5,r4,65535
    7e1c:	3085883a 	add	r2,r6,r2
    7e20:	11bfffcc 	andi	r6,r2,65535
    7e24:	a0c7383a 	mul	r3,r20,r3
    7e28:	1004d43a 	srli	r2,r2,16
    7e2c:	298bc83a 	sub	r5,r5,r6
    7e30:	2a4b883a 	add	r5,r5,r9
    7e34:	2008d43a 	srli	r4,r4,16
    7e38:	1887883a 	add	r3,r3,r2
    7e3c:	280dd43a 	srai	r6,r5,16
    7e40:	18bfffcc 	andi	r2,r3,65535
    7e44:	2089c83a 	sub	r4,r4,r2
    7e48:	2189883a 	add	r4,r4,r6
    7e4c:	3900008d 	sth	r4,2(r7)
    7e50:	3940000d 	sth	r5,0(r7)
    7e54:	180cd43a 	srli	r6,r3,16
    7e58:	39c00104 	addi	r7,r7,4
    7e5c:	2013d43a 	srai	r9,r4,16
    7e60:	923fe72e 	bgeu	r18,r8,7e00 <quorem+0x178>
    7e64:	e03fa61e 	bne	fp,zero,7d00 <quorem+0x78>
    7e68:	b0ffff04 	addi	r3,r22,-4
    7e6c:	98c0082e 	bgeu	r19,r3,7e90 <quorem+0x208>
    7e70:	b0bfff17 	ldw	r2,-4(r22)
    7e74:	10000326 	beq	r2,zero,7e84 <quorem+0x1fc>
    7e78:	00000506 	br	7e90 <quorem+0x208>
    7e7c:	18800017 	ldw	r2,0(r3)
    7e80:	1000031e 	bne	r2,zero,7e90 <quorem+0x208>
    7e84:	18ffff04 	addi	r3,r3,-4
    7e88:	8c7fffc4 	addi	r17,r17,-1
    7e8c:	98fffb36 	bltu	r19,r3,7e7c <quorem+0x1f4>
    7e90:	bc400415 	stw	r17,16(r23)
    7e94:	003f9a06 	br	7d00 <quorem+0x78>
    7e98:	0005883a 	mov	r2,zero
    7e9c:	003fc806 	br	7dc0 <quorem+0x138>

00007ea0 <_dtoa_r>:
    7ea0:	22001017 	ldw	r8,64(r4)
    7ea4:	deffda04 	addi	sp,sp,-152
    7ea8:	dd402115 	stw	r21,132(sp)
    7eac:	dd002015 	stw	r20,128(sp)
    7eb0:	dc801e15 	stw	r18,120(sp)
    7eb4:	dc401d15 	stw	r17,116(sp)
    7eb8:	dfc02515 	stw	ra,148(sp)
    7ebc:	df002415 	stw	fp,144(sp)
    7ec0:	ddc02315 	stw	r23,140(sp)
    7ec4:	dd802215 	stw	r22,136(sp)
    7ec8:	dcc01f15 	stw	r19,124(sp)
    7ecc:	dc001c15 	stw	r16,112(sp)
    7ed0:	d9001615 	stw	r4,88(sp)
    7ed4:	3023883a 	mov	r17,r6
    7ed8:	2829883a 	mov	r20,r5
    7edc:	d9c01715 	stw	r7,92(sp)
    7ee0:	dc802817 	ldw	r18,160(sp)
    7ee4:	302b883a 	mov	r21,r6
    7ee8:	40000a26 	beq	r8,zero,7f14 <_dtoa_r+0x74>
    7eec:	20801117 	ldw	r2,68(r4)
    7ef0:	400b883a 	mov	r5,r8
    7ef4:	40800115 	stw	r2,4(r8)
    7ef8:	20c01117 	ldw	r3,68(r4)
    7efc:	00800044 	movi	r2,1
    7f00:	10c4983a 	sll	r2,r2,r3
    7f04:	40800215 	stw	r2,8(r8)
    7f08:	000a79c0 	call	a79c <_Bfree>
    7f0c:	d8c01617 	ldw	r3,88(sp)
    7f10:	18001015 	stw	zero,64(r3)
    7f14:	8800a316 	blt	r17,zero,81a4 <_dtoa_r+0x304>
    7f18:	90000015 	stw	zero,0(r18)
    7f1c:	a8dffc2c 	andhi	r3,r21,32752
    7f20:	009ffc34 	movhi	r2,32752
    7f24:	18809126 	beq	r3,r2,816c <_dtoa_r+0x2cc>
    7f28:	000d883a 	mov	r6,zero
    7f2c:	000f883a 	mov	r7,zero
    7f30:	a009883a 	mov	r4,r20
    7f34:	a80b883a 	mov	r5,r21
    7f38:	dd001215 	stw	r20,72(sp)
    7f3c:	dd401315 	stw	r21,76(sp)
    7f40:	0010d280 	call	10d28 <__nedf2>
    7f44:	1000171e 	bne	r2,zero,7fa4 <_dtoa_r+0x104>
    7f48:	d9802717 	ldw	r6,156(sp)
    7f4c:	00800044 	movi	r2,1
    7f50:	30800015 	stw	r2,0(r6)
    7f54:	d8802917 	ldw	r2,164(sp)
    7f58:	10029b26 	beq	r2,zero,89c8 <_dtoa_r+0xb28>
    7f5c:	d9002917 	ldw	r4,164(sp)
    7f60:	00800074 	movhi	r2,1
    7f64:	10941344 	addi	r2,r2,20557
    7f68:	10ffffc4 	addi	r3,r2,-1
    7f6c:	20800015 	stw	r2,0(r4)
    7f70:	1805883a 	mov	r2,r3
    7f74:	dfc02517 	ldw	ra,148(sp)
    7f78:	df002417 	ldw	fp,144(sp)
    7f7c:	ddc02317 	ldw	r23,140(sp)
    7f80:	dd802217 	ldw	r22,136(sp)
    7f84:	dd402117 	ldw	r21,132(sp)
    7f88:	dd002017 	ldw	r20,128(sp)
    7f8c:	dcc01f17 	ldw	r19,124(sp)
    7f90:	dc801e17 	ldw	r18,120(sp)
    7f94:	dc401d17 	ldw	r17,116(sp)
    7f98:	dc001c17 	ldw	r16,112(sp)
    7f9c:	dec02604 	addi	sp,sp,152
    7fa0:	f800283a 	ret
    7fa4:	d9001617 	ldw	r4,88(sp)
    7fa8:	d9401217 	ldw	r5,72(sp)
    7fac:	d8800104 	addi	r2,sp,4
    7fb0:	a80d883a 	mov	r6,r21
    7fb4:	d9c00204 	addi	r7,sp,8
    7fb8:	d8800015 	stw	r2,0(sp)
    7fbc:	000add80 	call	add8 <__d2b>
    7fc0:	d8800715 	stw	r2,28(sp)
    7fc4:	a804d53a 	srli	r2,r21,20
    7fc8:	1101ffcc 	andi	r4,r2,2047
    7fcc:	20008626 	beq	r4,zero,81e8 <_dtoa_r+0x348>
    7fd0:	d8c01217 	ldw	r3,72(sp)
    7fd4:	00800434 	movhi	r2,16
    7fd8:	10bfffc4 	addi	r2,r2,-1
    7fdc:	ddc00117 	ldw	r23,4(sp)
    7fe0:	a884703a 	and	r2,r21,r2
    7fe4:	1811883a 	mov	r8,r3
    7fe8:	124ffc34 	orhi	r9,r2,16368
    7fec:	25bf0044 	addi	r22,r4,-1023
    7ff0:	d8000815 	stw	zero,32(sp)
    7ff4:	0005883a 	mov	r2,zero
    7ff8:	00cffe34 	movhi	r3,16376
    7ffc:	480b883a 	mov	r5,r9
    8000:	4009883a 	mov	r4,r8
    8004:	180f883a 	mov	r7,r3
    8008:	100d883a 	mov	r6,r2
    800c:	00105900 	call	10590 <__subdf3>
    8010:	0218dbf4 	movhi	r8,25455
    8014:	4210d844 	addi	r8,r8,17249
    8018:	024ff4f4 	movhi	r9,16339
    801c:	4a61e9c4 	addi	r9,r9,-30809
    8020:	480f883a 	mov	r7,r9
    8024:	400d883a 	mov	r6,r8
    8028:	180b883a 	mov	r5,r3
    802c:	1009883a 	mov	r4,r2
    8030:	00106840 	call	10684 <__muldf3>
    8034:	0222d874 	movhi	r8,35681
    8038:	42322cc4 	addi	r8,r8,-14157
    803c:	024ff1f4 	movhi	r9,16327
    8040:	4a628a04 	addi	r9,r9,-30168
    8044:	480f883a 	mov	r7,r9
    8048:	400d883a 	mov	r6,r8
    804c:	180b883a 	mov	r5,r3
    8050:	1009883a 	mov	r4,r2
    8054:	00106100 	call	10610 <__adddf3>
    8058:	b009883a 	mov	r4,r22
    805c:	1021883a 	mov	r16,r2
    8060:	1823883a 	mov	r17,r3
    8064:	0010fd00 	call	10fd0 <__floatsidf>
    8068:	021427f4 	movhi	r8,20639
    806c:	421e7ec4 	addi	r8,r8,31227
    8070:	024ff4f4 	movhi	r9,16339
    8074:	4a5104c4 	addi	r9,r9,17427
    8078:	480f883a 	mov	r7,r9
    807c:	400d883a 	mov	r6,r8
    8080:	180b883a 	mov	r5,r3
    8084:	1009883a 	mov	r4,r2
    8088:	00106840 	call	10684 <__muldf3>
    808c:	180f883a 	mov	r7,r3
    8090:	880b883a 	mov	r5,r17
    8094:	100d883a 	mov	r6,r2
    8098:	8009883a 	mov	r4,r16
    809c:	00106100 	call	10610 <__adddf3>
    80a0:	1009883a 	mov	r4,r2
    80a4:	180b883a 	mov	r5,r3
    80a8:	1021883a 	mov	r16,r2
    80ac:	1823883a 	mov	r17,r3
    80b0:	00110c80 	call	110c8 <__fixdfsi>
    80b4:	000d883a 	mov	r6,zero
    80b8:	000f883a 	mov	r7,zero
    80bc:	8009883a 	mov	r4,r16
    80c0:	880b883a 	mov	r5,r17
    80c4:	d8800d15 	stw	r2,52(sp)
    80c8:	0010ec00 	call	10ec0 <__ltdf2>
    80cc:	10031716 	blt	r2,zero,8d2c <_dtoa_r+0xe8c>
    80d0:	d8c00d17 	ldw	r3,52(sp)
    80d4:	00800584 	movi	r2,22
    80d8:	10c1482e 	bgeu	r2,r3,85fc <_dtoa_r+0x75c>
    80dc:	01000044 	movi	r4,1
    80e0:	d9000c15 	stw	r4,48(sp)
    80e4:	bd85c83a 	sub	r2,r23,r22
    80e8:	11bfffc4 	addi	r6,r2,-1
    80ec:	30030b16 	blt	r6,zero,8d1c <_dtoa_r+0xe7c>
    80f0:	d9800a15 	stw	r6,40(sp)
    80f4:	d8001115 	stw	zero,68(sp)
    80f8:	d8c00d17 	ldw	r3,52(sp)
    80fc:	1802ff16 	blt	r3,zero,8cfc <_dtoa_r+0xe5c>
    8100:	d9000a17 	ldw	r4,40(sp)
    8104:	d8c00915 	stw	r3,36(sp)
    8108:	d8001015 	stw	zero,64(sp)
    810c:	20c9883a 	add	r4,r4,r3
    8110:	d9000a15 	stw	r4,40(sp)
    8114:	d9001717 	ldw	r4,92(sp)
    8118:	00800244 	movi	r2,9
    811c:	11004636 	bltu	r2,r4,8238 <_dtoa_r+0x398>
    8120:	00800144 	movi	r2,5
    8124:	11020416 	blt	r2,r4,8938 <_dtoa_r+0xa98>
    8128:	04400044 	movi	r17,1
    812c:	d8c01717 	ldw	r3,92(sp)
    8130:	00800144 	movi	r2,5
    8134:	10c1ed36 	bltu	r2,r3,88ec <_dtoa_r+0xa4c>
    8138:	18c5883a 	add	r2,r3,r3
    813c:	1085883a 	add	r2,r2,r2
    8140:	00c00074 	movhi	r3,1
    8144:	18e05504 	addi	r3,r3,-32428
    8148:	10c5883a 	add	r2,r2,r3
    814c:	11000017 	ldw	r4,0(r2)
    8150:	2000683a 	jmp	r4
    8154:	00008240 	call	824 <cmd_getCommand+0x94>
    8158:	00008240 	call	824 <cmd_getCommand+0x94>
    815c:	00008c40 	call	8c4 <_generateList+0x4>
    8160:	00008c18 	cmpnei	zero,zero,560
    8164:	00008c5c 	xori	zero,zero,561
    8168:	00008c68 	cmpgeui	zero,zero,561
    816c:	d9002717 	ldw	r4,156(sp)
    8170:	0089c3c4 	movi	r2,9999
    8174:	20800015 	stw	r2,0(r4)
    8178:	a0001026 	beq	r20,zero,81bc <_dtoa_r+0x31c>
    817c:	00c00074 	movhi	r3,1
    8180:	18d42904 	addi	r3,r3,20644
    8184:	d9802917 	ldw	r6,164(sp)
    8188:	303f7926 	beq	r6,zero,7f70 <_dtoa_r+0xd0>
    818c:	188000c7 	ldb	r2,3(r3)
    8190:	190000c4 	addi	r4,r3,3
    8194:	1000101e 	bne	r2,zero,81d8 <_dtoa_r+0x338>
    8198:	d8802917 	ldw	r2,164(sp)
    819c:	11000015 	stw	r4,0(r2)
    81a0:	003f7306 	br	7f70 <_dtoa_r+0xd0>
    81a4:	00a00034 	movhi	r2,32768
    81a8:	10bfffc4 	addi	r2,r2,-1
    81ac:	00c00044 	movi	r3,1
    81b0:	88aa703a 	and	r21,r17,r2
    81b4:	90c00015 	stw	r3,0(r18)
    81b8:	003f5806 	br	7f1c <_dtoa_r+0x7c>
    81bc:	00800434 	movhi	r2,16
    81c0:	10bfffc4 	addi	r2,r2,-1
    81c4:	a884703a 	and	r2,r21,r2
    81c8:	103fec1e 	bne	r2,zero,817c <_dtoa_r+0x2dc>
    81cc:	00c00074 	movhi	r3,1
    81d0:	18d42604 	addi	r3,r3,20632
    81d4:	003feb06 	br	8184 <_dtoa_r+0x2e4>
    81d8:	d8802917 	ldw	r2,164(sp)
    81dc:	19000204 	addi	r4,r3,8
    81e0:	11000015 	stw	r4,0(r2)
    81e4:	003f6206 	br	7f70 <_dtoa_r+0xd0>
    81e8:	ddc00117 	ldw	r23,4(sp)
    81ec:	d8800217 	ldw	r2,8(sp)
    81f0:	01000804 	movi	r4,32
    81f4:	b8c10c84 	addi	r3,r23,1074
    81f8:	18a3883a 	add	r17,r3,r2
    81fc:	2441b80e 	bge	r4,r17,88e0 <_dtoa_r+0xa40>
    8200:	00c01004 	movi	r3,64
    8204:	1c47c83a 	sub	r3,r3,r17
    8208:	88bff804 	addi	r2,r17,-32
    820c:	a8c6983a 	sll	r3,r21,r3
    8210:	a084d83a 	srl	r2,r20,r2
    8214:	1888b03a 	or	r4,r3,r2
    8218:	00112140 	call	11214 <__floatunsidf>
    821c:	1011883a 	mov	r8,r2
    8220:	00bf8434 	movhi	r2,65040
    8224:	01000044 	movi	r4,1
    8228:	10d3883a 	add	r9,r2,r3
    822c:	8dbef344 	addi	r22,r17,-1075
    8230:	d9000815 	stw	r4,32(sp)
    8234:	003f6f06 	br	7ff4 <_dtoa_r+0x154>
    8238:	d8001715 	stw	zero,92(sp)
    823c:	04400044 	movi	r17,1
    8240:	00bfffc4 	movi	r2,-1
    8244:	00c00044 	movi	r3,1
    8248:	d8800e15 	stw	r2,56(sp)
    824c:	d8002615 	stw	zero,152(sp)
    8250:	d8800f15 	stw	r2,60(sp)
    8254:	d8c00b15 	stw	r3,44(sp)
    8258:	1021883a 	mov	r16,r2
    825c:	d8801617 	ldw	r2,88(sp)
    8260:	10001115 	stw	zero,68(r2)
    8264:	d8801617 	ldw	r2,88(sp)
    8268:	11401117 	ldw	r5,68(r2)
    826c:	1009883a 	mov	r4,r2
    8270:	000ad1c0 	call	ad1c <_Balloc>
    8274:	d8c01617 	ldw	r3,88(sp)
    8278:	d8800515 	stw	r2,20(sp)
    827c:	18801015 	stw	r2,64(r3)
    8280:	00800384 	movi	r2,14
    8284:	14006836 	bltu	r2,r16,8428 <_dtoa_r+0x588>
    8288:	8805003a 	cmpeq	r2,r17,zero
    828c:	1000661e 	bne	r2,zero,8428 <_dtoa_r+0x588>
    8290:	d9000d17 	ldw	r4,52(sp)
    8294:	0102300e 	bge	zero,r4,8b58 <_dtoa_r+0xcb8>
    8298:	208003cc 	andi	r2,r4,15
    829c:	100490fa 	slli	r2,r2,3
    82a0:	2025d13a 	srai	r18,r4,4
    82a4:	00c00074 	movhi	r3,1
    82a8:	18d43a04 	addi	r3,r3,20712
    82ac:	10c5883a 	add	r2,r2,r3
    82b0:	90c0040c 	andi	r3,r18,16
    82b4:	14000017 	ldw	r16,0(r2)
    82b8:	14400117 	ldw	r17,4(r2)
    82bc:	18036a1e 	bne	r3,zero,9068 <_dtoa_r+0x11c8>
    82c0:	05800084 	movi	r22,2
    82c4:	90001026 	beq	r18,zero,8308 <_dtoa_r+0x468>
    82c8:	04c00074 	movhi	r19,1
    82cc:	9cd46c04 	addi	r19,r19,20912
    82d0:	9080004c 	andi	r2,r18,1
    82d4:	1005003a 	cmpeq	r2,r2,zero
    82d8:	1000081e 	bne	r2,zero,82fc <_dtoa_r+0x45c>
    82dc:	99800017 	ldw	r6,0(r19)
    82e0:	99c00117 	ldw	r7,4(r19)
    82e4:	880b883a 	mov	r5,r17
    82e8:	8009883a 	mov	r4,r16
    82ec:	00106840 	call	10684 <__muldf3>
    82f0:	1021883a 	mov	r16,r2
    82f4:	b5800044 	addi	r22,r22,1
    82f8:	1823883a 	mov	r17,r3
    82fc:	9025d07a 	srai	r18,r18,1
    8300:	9cc00204 	addi	r19,r19,8
    8304:	903ff21e 	bne	r18,zero,82d0 <_dtoa_r+0x430>
    8308:	a80b883a 	mov	r5,r21
    830c:	a009883a 	mov	r4,r20
    8310:	880f883a 	mov	r7,r17
    8314:	800d883a 	mov	r6,r16
    8318:	0010a480 	call	10a48 <__divdf3>
    831c:	1029883a 	mov	r20,r2
    8320:	182b883a 	mov	r21,r3
    8324:	d8c00c17 	ldw	r3,48(sp)
    8328:	1805003a 	cmpeq	r2,r3,zero
    832c:	1000081e 	bne	r2,zero,8350 <_dtoa_r+0x4b0>
    8330:	0005883a 	mov	r2,zero
    8334:	00cffc34 	movhi	r3,16368
    8338:	180f883a 	mov	r7,r3
    833c:	a009883a 	mov	r4,r20
    8340:	a80b883a 	mov	r5,r21
    8344:	100d883a 	mov	r6,r2
    8348:	0010ec00 	call	10ec0 <__ltdf2>
    834c:	1003fe16 	blt	r2,zero,9348 <_dtoa_r+0x14a8>
    8350:	b009883a 	mov	r4,r22
    8354:	0010fd00 	call	10fd0 <__floatsidf>
    8358:	180b883a 	mov	r5,r3
    835c:	1009883a 	mov	r4,r2
    8360:	a00d883a 	mov	r6,r20
    8364:	a80f883a 	mov	r7,r21
    8368:	00106840 	call	10684 <__muldf3>
    836c:	0011883a 	mov	r8,zero
    8370:	02500734 	movhi	r9,16412
    8374:	1009883a 	mov	r4,r2
    8378:	180b883a 	mov	r5,r3
    837c:	480f883a 	mov	r7,r9
    8380:	400d883a 	mov	r6,r8
    8384:	00106100 	call	10610 <__adddf3>
    8388:	d9000f17 	ldw	r4,60(sp)
    838c:	102d883a 	mov	r22,r2
    8390:	00bf3034 	movhi	r2,64704
    8394:	18b9883a 	add	fp,r3,r2
    8398:	e02f883a 	mov	r23,fp
    839c:	20028f1e 	bne	r4,zero,8ddc <_dtoa_r+0xf3c>
    83a0:	0005883a 	mov	r2,zero
    83a4:	00d00534 	movhi	r3,16404
    83a8:	a009883a 	mov	r4,r20
    83ac:	a80b883a 	mov	r5,r21
    83b0:	180f883a 	mov	r7,r3
    83b4:	100d883a 	mov	r6,r2
    83b8:	00105900 	call	10590 <__subdf3>
    83bc:	1009883a 	mov	r4,r2
    83c0:	e00f883a 	mov	r7,fp
    83c4:	180b883a 	mov	r5,r3
    83c8:	b00d883a 	mov	r6,r22
    83cc:	1025883a 	mov	r18,r2
    83d0:	1827883a 	mov	r19,r3
    83d4:	0010db00 	call	10db0 <__gtdf2>
    83d8:	00834f16 	blt	zero,r2,9118 <_dtoa_r+0x1278>
    83dc:	e0e0003c 	xorhi	r3,fp,32768
    83e0:	9009883a 	mov	r4,r18
    83e4:	980b883a 	mov	r5,r19
    83e8:	180f883a 	mov	r7,r3
    83ec:	b00d883a 	mov	r6,r22
    83f0:	0010ec00 	call	10ec0 <__ltdf2>
    83f4:	1000080e 	bge	r2,zero,8418 <_dtoa_r+0x578>
    83f8:	0027883a 	mov	r19,zero
    83fc:	0025883a 	mov	r18,zero
    8400:	d8802617 	ldw	r2,152(sp)
    8404:	df000517 	ldw	fp,20(sp)
    8408:	d8000615 	stw	zero,24(sp)
    840c:	0084303a 	nor	r2,zero,r2
    8410:	d8800d15 	stw	r2,52(sp)
    8414:	00019b06 	br	8a84 <_dtoa_r+0xbe4>
    8418:	d9801217 	ldw	r6,72(sp)
    841c:	d8801317 	ldw	r2,76(sp)
    8420:	3029883a 	mov	r20,r6
    8424:	102b883a 	mov	r21,r2
    8428:	d8c00217 	ldw	r3,8(sp)
    842c:	18008516 	blt	r3,zero,8644 <_dtoa_r+0x7a4>
    8430:	d9000d17 	ldw	r4,52(sp)
    8434:	00800384 	movi	r2,14
    8438:	11008216 	blt	r2,r4,8644 <_dtoa_r+0x7a4>
    843c:	200490fa 	slli	r2,r4,3
    8440:	d9802617 	ldw	r6,152(sp)
    8444:	00c00074 	movhi	r3,1
    8448:	18d43a04 	addi	r3,r3,20712
    844c:	10c5883a 	add	r2,r2,r3
    8450:	14800017 	ldw	r18,0(r2)
    8454:	14c00117 	ldw	r19,4(r2)
    8458:	30031e16 	blt	r6,zero,90d4 <_dtoa_r+0x1234>
    845c:	d9000517 	ldw	r4,20(sp)
    8460:	d8c00f17 	ldw	r3,60(sp)
    8464:	a823883a 	mov	r17,r21
    8468:	a021883a 	mov	r16,r20
    846c:	192b883a 	add	r21,r3,r4
    8470:	2039883a 	mov	fp,r4
    8474:	00000f06 	br	84b4 <_dtoa_r+0x614>
    8478:	0005883a 	mov	r2,zero
    847c:	00d00934 	movhi	r3,16420
    8480:	5009883a 	mov	r4,r10
    8484:	580b883a 	mov	r5,r11
    8488:	180f883a 	mov	r7,r3
    848c:	100d883a 	mov	r6,r2
    8490:	00106840 	call	10684 <__muldf3>
    8494:	180b883a 	mov	r5,r3
    8498:	000d883a 	mov	r6,zero
    849c:	000f883a 	mov	r7,zero
    84a0:	1009883a 	mov	r4,r2
    84a4:	1021883a 	mov	r16,r2
    84a8:	1823883a 	mov	r17,r3
    84ac:	0010d280 	call	10d28 <__nedf2>
    84b0:	10004526 	beq	r2,zero,85c8 <_dtoa_r+0x728>
    84b4:	900d883a 	mov	r6,r18
    84b8:	980f883a 	mov	r7,r19
    84bc:	8009883a 	mov	r4,r16
    84c0:	880b883a 	mov	r5,r17
    84c4:	0010a480 	call	10a48 <__divdf3>
    84c8:	180b883a 	mov	r5,r3
    84cc:	1009883a 	mov	r4,r2
    84d0:	00110c80 	call	110c8 <__fixdfsi>
    84d4:	1009883a 	mov	r4,r2
    84d8:	1029883a 	mov	r20,r2
    84dc:	0010fd00 	call	10fd0 <__floatsidf>
    84e0:	180f883a 	mov	r7,r3
    84e4:	9009883a 	mov	r4,r18
    84e8:	980b883a 	mov	r5,r19
    84ec:	100d883a 	mov	r6,r2
    84f0:	00106840 	call	10684 <__muldf3>
    84f4:	180f883a 	mov	r7,r3
    84f8:	880b883a 	mov	r5,r17
    84fc:	8009883a 	mov	r4,r16
    8500:	100d883a 	mov	r6,r2
    8504:	00105900 	call	10590 <__subdf3>
    8508:	1015883a 	mov	r10,r2
    850c:	a0800c04 	addi	r2,r20,48
    8510:	e0800005 	stb	r2,0(fp)
    8514:	e7000044 	addi	fp,fp,1
    8518:	1817883a 	mov	r11,r3
    851c:	e57fd61e 	bne	fp,r21,8478 <_dtoa_r+0x5d8>
    8520:	500d883a 	mov	r6,r10
    8524:	180f883a 	mov	r7,r3
    8528:	5009883a 	mov	r4,r10
    852c:	180b883a 	mov	r5,r3
    8530:	00106100 	call	10610 <__adddf3>
    8534:	100d883a 	mov	r6,r2
    8538:	9009883a 	mov	r4,r18
    853c:	980b883a 	mov	r5,r19
    8540:	180f883a 	mov	r7,r3
    8544:	1021883a 	mov	r16,r2
    8548:	1823883a 	mov	r17,r3
    854c:	0010ec00 	call	10ec0 <__ltdf2>
    8550:	10000816 	blt	r2,zero,8574 <_dtoa_r+0x6d4>
    8554:	980b883a 	mov	r5,r19
    8558:	800d883a 	mov	r6,r16
    855c:	880f883a 	mov	r7,r17
    8560:	9009883a 	mov	r4,r18
    8564:	0010ca00 	call	10ca0 <__eqdf2>
    8568:	1000171e 	bne	r2,zero,85c8 <_dtoa_r+0x728>
    856c:	a080004c 	andi	r2,r20,1
    8570:	10001526 	beq	r2,zero,85c8 <_dtoa_r+0x728>
    8574:	d8800d17 	ldw	r2,52(sp)
    8578:	d8800415 	stw	r2,16(sp)
    857c:	e009883a 	mov	r4,fp
    8580:	213fffc4 	addi	r4,r4,-1
    8584:	20c00007 	ldb	r3,0(r4)
    8588:	00800e44 	movi	r2,57
    858c:	1880081e 	bne	r3,r2,85b0 <_dtoa_r+0x710>
    8590:	d8800517 	ldw	r2,20(sp)
    8594:	113ffa1e 	bne	r2,r4,8580 <_dtoa_r+0x6e0>
    8598:	d8c00417 	ldw	r3,16(sp)
    859c:	d9800517 	ldw	r6,20(sp)
    85a0:	00800c04 	movi	r2,48
    85a4:	18c00044 	addi	r3,r3,1
    85a8:	d8c00415 	stw	r3,16(sp)
    85ac:	30800005 	stb	r2,0(r6)
    85b0:	20800003 	ldbu	r2,0(r4)
    85b4:	d8c00417 	ldw	r3,16(sp)
    85b8:	27000044 	addi	fp,r4,1
    85bc:	10800044 	addi	r2,r2,1
    85c0:	d8c00d15 	stw	r3,52(sp)
    85c4:	20800005 	stb	r2,0(r4)
    85c8:	d9001617 	ldw	r4,88(sp)
    85cc:	d9400717 	ldw	r5,28(sp)
    85d0:	000a79c0 	call	a79c <_Bfree>
    85d4:	e0000005 	stb	zero,0(fp)
    85d8:	d9800d17 	ldw	r6,52(sp)
    85dc:	d8c02717 	ldw	r3,156(sp)
    85e0:	d9002917 	ldw	r4,164(sp)
    85e4:	30800044 	addi	r2,r6,1
    85e8:	18800015 	stw	r2,0(r3)
    85ec:	20029c26 	beq	r4,zero,9060 <_dtoa_r+0x11c0>
    85f0:	d8c00517 	ldw	r3,20(sp)
    85f4:	27000015 	stw	fp,0(r4)
    85f8:	003e5d06 	br	7f70 <_dtoa_r+0xd0>
    85fc:	d9800d17 	ldw	r6,52(sp)
    8600:	00c00074 	movhi	r3,1
    8604:	18d43a04 	addi	r3,r3,20712
    8608:	d9001217 	ldw	r4,72(sp)
    860c:	300490fa 	slli	r2,r6,3
    8610:	d9401317 	ldw	r5,76(sp)
    8614:	10c5883a 	add	r2,r2,r3
    8618:	12000017 	ldw	r8,0(r2)
    861c:	12400117 	ldw	r9,4(r2)
    8620:	400d883a 	mov	r6,r8
    8624:	480f883a 	mov	r7,r9
    8628:	0010ec00 	call	10ec0 <__ltdf2>
    862c:	1000030e 	bge	r2,zero,863c <_dtoa_r+0x79c>
    8630:	d8800d17 	ldw	r2,52(sp)
    8634:	10bfffc4 	addi	r2,r2,-1
    8638:	d8800d15 	stw	r2,52(sp)
    863c:	d8000c15 	stw	zero,48(sp)
    8640:	003ea806 	br	80e4 <_dtoa_r+0x244>
    8644:	d9000b17 	ldw	r4,44(sp)
    8648:	202cc03a 	cmpne	r22,r4,zero
    864c:	b000c71e 	bne	r22,zero,896c <_dtoa_r+0xacc>
    8650:	dc001117 	ldw	r16,68(sp)
    8654:	dc801017 	ldw	r18,64(sp)
    8658:	0027883a 	mov	r19,zero
    865c:	04000b0e 	bge	zero,r16,868c <_dtoa_r+0x7ec>
    8660:	d8c00a17 	ldw	r3,40(sp)
    8664:	00c0090e 	bge	zero,r3,868c <_dtoa_r+0x7ec>
    8668:	8005883a 	mov	r2,r16
    866c:	1c011316 	blt	r3,r16,8abc <_dtoa_r+0xc1c>
    8670:	d9000a17 	ldw	r4,40(sp)
    8674:	d9801117 	ldw	r6,68(sp)
    8678:	80a1c83a 	sub	r16,r16,r2
    867c:	2089c83a 	sub	r4,r4,r2
    8680:	308dc83a 	sub	r6,r6,r2
    8684:	d9000a15 	stw	r4,40(sp)
    8688:	d9801115 	stw	r6,68(sp)
    868c:	d8801017 	ldw	r2,64(sp)
    8690:	0080150e 	bge	zero,r2,86e8 <_dtoa_r+0x848>
    8694:	d8c00b17 	ldw	r3,44(sp)
    8698:	1805003a 	cmpeq	r2,r3,zero
    869c:	1001c91e 	bne	r2,zero,8dc4 <_dtoa_r+0xf24>
    86a0:	04800e0e 	bge	zero,r18,86dc <_dtoa_r+0x83c>
    86a4:	d9001617 	ldw	r4,88(sp)
    86a8:	980b883a 	mov	r5,r19
    86ac:	900d883a 	mov	r6,r18
    86b0:	000b5500 	call	b550 <__pow5mult>
    86b4:	d9001617 	ldw	r4,88(sp)
    86b8:	d9800717 	ldw	r6,28(sp)
    86bc:	100b883a 	mov	r5,r2
    86c0:	1027883a 	mov	r19,r2
    86c4:	000b22c0 	call	b22c <__multiply>
    86c8:	d9001617 	ldw	r4,88(sp)
    86cc:	d9400717 	ldw	r5,28(sp)
    86d0:	1023883a 	mov	r17,r2
    86d4:	000a79c0 	call	a79c <_Bfree>
    86d8:	dc400715 	stw	r17,28(sp)
    86dc:	d9001017 	ldw	r4,64(sp)
    86e0:	248dc83a 	sub	r6,r4,r18
    86e4:	30010e1e 	bne	r6,zero,8b20 <_dtoa_r+0xc80>
    86e8:	d9001617 	ldw	r4,88(sp)
    86ec:	04400044 	movi	r17,1
    86f0:	880b883a 	mov	r5,r17
    86f4:	000b4140 	call	b414 <__i2b>
    86f8:	d9800917 	ldw	r6,36(sp)
    86fc:	1025883a 	mov	r18,r2
    8700:	0180040e 	bge	zero,r6,8714 <_dtoa_r+0x874>
    8704:	d9001617 	ldw	r4,88(sp)
    8708:	100b883a 	mov	r5,r2
    870c:	000b5500 	call	b550 <__pow5mult>
    8710:	1025883a 	mov	r18,r2
    8714:	d8801717 	ldw	r2,92(sp)
    8718:	8880f30e 	bge	r17,r2,8ae8 <_dtoa_r+0xc48>
    871c:	0023883a 	mov	r17,zero
    8720:	d9800917 	ldw	r6,36(sp)
    8724:	30019e1e 	bne	r6,zero,8da0 <_dtoa_r+0xf00>
    8728:	00c00044 	movi	r3,1
    872c:	d9000a17 	ldw	r4,40(sp)
    8730:	20c5883a 	add	r2,r4,r3
    8734:	10c007cc 	andi	r3,r2,31
    8738:	1800841e 	bne	r3,zero,894c <_dtoa_r+0xaac>
    873c:	00800704 	movi	r2,28
    8740:	d9000a17 	ldw	r4,40(sp)
    8744:	d9801117 	ldw	r6,68(sp)
    8748:	80a1883a 	add	r16,r16,r2
    874c:	2089883a 	add	r4,r4,r2
    8750:	308d883a 	add	r6,r6,r2
    8754:	d9000a15 	stw	r4,40(sp)
    8758:	d9801115 	stw	r6,68(sp)
    875c:	d8801117 	ldw	r2,68(sp)
    8760:	0080050e 	bge	zero,r2,8778 <_dtoa_r+0x8d8>
    8764:	d9400717 	ldw	r5,28(sp)
    8768:	d9001617 	ldw	r4,88(sp)
    876c:	100d883a 	mov	r6,r2
    8770:	000b0e00 	call	b0e0 <__lshift>
    8774:	d8800715 	stw	r2,28(sp)
    8778:	d8c00a17 	ldw	r3,40(sp)
    877c:	00c0050e 	bge	zero,r3,8794 <_dtoa_r+0x8f4>
    8780:	d9001617 	ldw	r4,88(sp)
    8784:	900b883a 	mov	r5,r18
    8788:	180d883a 	mov	r6,r3
    878c:	000b0e00 	call	b0e0 <__lshift>
    8790:	1025883a 	mov	r18,r2
    8794:	d9000c17 	ldw	r4,48(sp)
    8798:	2005003a 	cmpeq	r2,r4,zero
    879c:	10016f26 	beq	r2,zero,8d5c <_dtoa_r+0xebc>
    87a0:	d9000f17 	ldw	r4,60(sp)
    87a4:	0102170e 	bge	zero,r4,9004 <_dtoa_r+0x1164>
    87a8:	d9800b17 	ldw	r6,44(sp)
    87ac:	3005003a 	cmpeq	r2,r6,zero
    87b0:	1000881e 	bne	r2,zero,89d4 <_dtoa_r+0xb34>
    87b4:	0400050e 	bge	zero,r16,87cc <_dtoa_r+0x92c>
    87b8:	d9001617 	ldw	r4,88(sp)
    87bc:	980b883a 	mov	r5,r19
    87c0:	800d883a 	mov	r6,r16
    87c4:	000b0e00 	call	b0e0 <__lshift>
    87c8:	1027883a 	mov	r19,r2
    87cc:	8804c03a 	cmpne	r2,r17,zero
    87d0:	1002541e 	bne	r2,zero,9124 <_dtoa_r+0x1284>
    87d4:	980b883a 	mov	r5,r19
    87d8:	dd800517 	ldw	r22,20(sp)
    87dc:	dcc00615 	stw	r19,24(sp)
    87e0:	a700004c 	andi	fp,r20,1
    87e4:	2827883a 	mov	r19,r5
    87e8:	d9000717 	ldw	r4,28(sp)
    87ec:	900b883a 	mov	r5,r18
    87f0:	0007c880 	call	7c88 <quorem>
    87f4:	d9000717 	ldw	r4,28(sp)
    87f8:	d9400617 	ldw	r5,24(sp)
    87fc:	1023883a 	mov	r17,r2
    8800:	8dc00c04 	addi	r23,r17,48
    8804:	000a8f80 	call	a8f8 <__mcmp>
    8808:	d9001617 	ldw	r4,88(sp)
    880c:	900b883a 	mov	r5,r18
    8810:	980d883a 	mov	r6,r19
    8814:	1029883a 	mov	r20,r2
    8818:	000af540 	call	af54 <__mdiff>
    881c:	102b883a 	mov	r21,r2
    8820:	10800317 	ldw	r2,12(r2)
    8824:	1001281e 	bne	r2,zero,8cc8 <_dtoa_r+0xe28>
    8828:	d9000717 	ldw	r4,28(sp)
    882c:	a80b883a 	mov	r5,r21
    8830:	000a8f80 	call	a8f8 <__mcmp>
    8834:	d9001617 	ldw	r4,88(sp)
    8838:	1021883a 	mov	r16,r2
    883c:	a80b883a 	mov	r5,r21
    8840:	000a79c0 	call	a79c <_Bfree>
    8844:	8000041e 	bne	r16,zero,8858 <_dtoa_r+0x9b8>
    8848:	d8801717 	ldw	r2,92(sp)
    884c:	1000021e 	bne	r2,zero,8858 <_dtoa_r+0x9b8>
    8850:	e004c03a 	cmpne	r2,fp,zero
    8854:	10011726 	beq	r2,zero,8cb4 <_dtoa_r+0xe14>
    8858:	a0010616 	blt	r20,zero,8c74 <_dtoa_r+0xdd4>
    885c:	a000041e 	bne	r20,zero,8870 <_dtoa_r+0x9d0>
    8860:	d8c01717 	ldw	r3,92(sp)
    8864:	1800021e 	bne	r3,zero,8870 <_dtoa_r+0x9d0>
    8868:	e004c03a 	cmpne	r2,fp,zero
    886c:	10010126 	beq	r2,zero,8c74 <_dtoa_r+0xdd4>
    8870:	04023d16 	blt	zero,r16,9168 <_dtoa_r+0x12c8>
    8874:	b5c00005 	stb	r23,0(r22)
    8878:	d9800517 	ldw	r6,20(sp)
    887c:	d9000f17 	ldw	r4,60(sp)
    8880:	b5800044 	addi	r22,r22,1
    8884:	3105883a 	add	r2,r6,r4
    8888:	b0806526 	beq	r22,r2,8a20 <_dtoa_r+0xb80>
    888c:	d9400717 	ldw	r5,28(sp)
    8890:	d9001617 	ldw	r4,88(sp)
    8894:	01800284 	movi	r6,10
    8898:	000f883a 	mov	r7,zero
    889c:	000b4500 	call	b450 <__multadd>
    88a0:	d8800715 	stw	r2,28(sp)
    88a4:	d8800617 	ldw	r2,24(sp)
    88a8:	14c10c26 	beq	r2,r19,8cdc <_dtoa_r+0xe3c>
    88ac:	d9400617 	ldw	r5,24(sp)
    88b0:	d9001617 	ldw	r4,88(sp)
    88b4:	01800284 	movi	r6,10
    88b8:	000f883a 	mov	r7,zero
    88bc:	000b4500 	call	b450 <__multadd>
    88c0:	d9001617 	ldw	r4,88(sp)
    88c4:	980b883a 	mov	r5,r19
    88c8:	01800284 	movi	r6,10
    88cc:	000f883a 	mov	r7,zero
    88d0:	d8800615 	stw	r2,24(sp)
    88d4:	000b4500 	call	b450 <__multadd>
    88d8:	1027883a 	mov	r19,r2
    88dc:	003fc206 	br	87e8 <_dtoa_r+0x948>
    88e0:	2445c83a 	sub	r2,r4,r17
    88e4:	a088983a 	sll	r4,r20,r2
    88e8:	003e4b06 	br	8218 <_dtoa_r+0x378>
    88ec:	01bfffc4 	movi	r6,-1
    88f0:	00800044 	movi	r2,1
    88f4:	d9800e15 	stw	r6,56(sp)
    88f8:	d9800f15 	stw	r6,60(sp)
    88fc:	d8800b15 	stw	r2,44(sp)
    8900:	d8c01617 	ldw	r3,88(sp)
    8904:	008005c4 	movi	r2,23
    8908:	18001115 	stw	zero,68(r3)
    890c:	1580082e 	bgeu	r2,r22,8930 <_dtoa_r+0xa90>
    8910:	00c00104 	movi	r3,4
    8914:	0009883a 	mov	r4,zero
    8918:	18c7883a 	add	r3,r3,r3
    891c:	18800504 	addi	r2,r3,20
    8920:	21000044 	addi	r4,r4,1
    8924:	b0bffc2e 	bgeu	r22,r2,8918 <_dtoa_r+0xa78>
    8928:	d9801617 	ldw	r6,88(sp)
    892c:	31001115 	stw	r4,68(r6)
    8930:	dc000f17 	ldw	r16,60(sp)
    8934:	003e4b06 	br	8264 <_dtoa_r+0x3c4>
    8938:	d9801717 	ldw	r6,92(sp)
    893c:	0023883a 	mov	r17,zero
    8940:	31bfff04 	addi	r6,r6,-4
    8944:	d9801715 	stw	r6,92(sp)
    8948:	003df806 	br	812c <_dtoa_r+0x28c>
    894c:	00800804 	movi	r2,32
    8950:	10c9c83a 	sub	r4,r2,r3
    8954:	00c00104 	movi	r3,4
    8958:	19005a16 	blt	r3,r4,8ac4 <_dtoa_r+0xc24>
    895c:	008000c4 	movi	r2,3
    8960:	113f7e16 	blt	r2,r4,875c <_dtoa_r+0x8bc>
    8964:	20800704 	addi	r2,r4,28
    8968:	003f7506 	br	8740 <_dtoa_r+0x8a0>
    896c:	d9801717 	ldw	r6,92(sp)
    8970:	00800044 	movi	r2,1
    8974:	1180a10e 	bge	r2,r6,8bfc <_dtoa_r+0xd5c>
    8978:	d9800f17 	ldw	r6,60(sp)
    897c:	d8c01017 	ldw	r3,64(sp)
    8980:	30bfffc4 	addi	r2,r6,-1
    8984:	1881c616 	blt	r3,r2,90a0 <_dtoa_r+0x1200>
    8988:	18a5c83a 	sub	r18,r3,r2
    898c:	d8800f17 	ldw	r2,60(sp)
    8990:	10026216 	blt	r2,zero,931c <_dtoa_r+0x147c>
    8994:	dc001117 	ldw	r16,68(sp)
    8998:	1007883a 	mov	r3,r2
    899c:	d9800a17 	ldw	r6,40(sp)
    89a0:	d8801117 	ldw	r2,68(sp)
    89a4:	d9001617 	ldw	r4,88(sp)
    89a8:	30cd883a 	add	r6,r6,r3
    89ac:	10c5883a 	add	r2,r2,r3
    89b0:	01400044 	movi	r5,1
    89b4:	d9800a15 	stw	r6,40(sp)
    89b8:	d8801115 	stw	r2,68(sp)
    89bc:	000b4140 	call	b414 <__i2b>
    89c0:	1027883a 	mov	r19,r2
    89c4:	003f2506 	br	865c <_dtoa_r+0x7bc>
    89c8:	00c00074 	movhi	r3,1
    89cc:	18d41304 	addi	r3,r3,20556
    89d0:	003d6706 	br	7f70 <_dtoa_r+0xd0>
    89d4:	dd800517 	ldw	r22,20(sp)
    89d8:	04000044 	movi	r16,1
    89dc:	00000706 	br	89fc <_dtoa_r+0xb5c>
    89e0:	d9400717 	ldw	r5,28(sp)
    89e4:	d9001617 	ldw	r4,88(sp)
    89e8:	01800284 	movi	r6,10
    89ec:	000f883a 	mov	r7,zero
    89f0:	000b4500 	call	b450 <__multadd>
    89f4:	d8800715 	stw	r2,28(sp)
    89f8:	84000044 	addi	r16,r16,1
    89fc:	d9000717 	ldw	r4,28(sp)
    8a00:	900b883a 	mov	r5,r18
    8a04:	0007c880 	call	7c88 <quorem>
    8a08:	15c00c04 	addi	r23,r2,48
    8a0c:	b5c00005 	stb	r23,0(r22)
    8a10:	d8c00f17 	ldw	r3,60(sp)
    8a14:	b5800044 	addi	r22,r22,1
    8a18:	80fff116 	blt	r16,r3,89e0 <_dtoa_r+0xb40>
    8a1c:	d8000615 	stw	zero,24(sp)
    8a20:	d9400717 	ldw	r5,28(sp)
    8a24:	d9001617 	ldw	r4,88(sp)
    8a28:	01800044 	movi	r6,1
    8a2c:	000b0e00 	call	b0e0 <__lshift>
    8a30:	1009883a 	mov	r4,r2
    8a34:	900b883a 	mov	r5,r18
    8a38:	d8800715 	stw	r2,28(sp)
    8a3c:	000a8f80 	call	a8f8 <__mcmp>
    8a40:	00803c0e 	bge	zero,r2,8b34 <_dtoa_r+0xc94>
    8a44:	b009883a 	mov	r4,r22
    8a48:	213fffc4 	addi	r4,r4,-1
    8a4c:	21400003 	ldbu	r5,0(r4)
    8a50:	00800e44 	movi	r2,57
    8a54:	28c03fcc 	andi	r3,r5,255
    8a58:	18c0201c 	xori	r3,r3,128
    8a5c:	18ffe004 	addi	r3,r3,-128
    8a60:	1881981e 	bne	r3,r2,90c4 <_dtoa_r+0x1224>
    8a64:	d9800517 	ldw	r6,20(sp)
    8a68:	21bff71e 	bne	r4,r6,8a48 <_dtoa_r+0xba8>
    8a6c:	d8800d17 	ldw	r2,52(sp)
    8a70:	37000044 	addi	fp,r6,1
    8a74:	10800044 	addi	r2,r2,1
    8a78:	d8800d15 	stw	r2,52(sp)
    8a7c:	00800c44 	movi	r2,49
    8a80:	30800005 	stb	r2,0(r6)
    8a84:	d9001617 	ldw	r4,88(sp)
    8a88:	900b883a 	mov	r5,r18
    8a8c:	000a79c0 	call	a79c <_Bfree>
    8a90:	983ecd26 	beq	r19,zero,85c8 <_dtoa_r+0x728>
    8a94:	d8c00617 	ldw	r3,24(sp)
    8a98:	18000426 	beq	r3,zero,8aac <_dtoa_r+0xc0c>
    8a9c:	1cc00326 	beq	r3,r19,8aac <_dtoa_r+0xc0c>
    8aa0:	d9001617 	ldw	r4,88(sp)
    8aa4:	180b883a 	mov	r5,r3
    8aa8:	000a79c0 	call	a79c <_Bfree>
    8aac:	d9001617 	ldw	r4,88(sp)
    8ab0:	980b883a 	mov	r5,r19
    8ab4:	000a79c0 	call	a79c <_Bfree>
    8ab8:	003ec306 	br	85c8 <_dtoa_r+0x728>
    8abc:	1805883a 	mov	r2,r3
    8ac0:	003eeb06 	br	8670 <_dtoa_r+0x7d0>
    8ac4:	d9800a17 	ldw	r6,40(sp)
    8ac8:	d8c01117 	ldw	r3,68(sp)
    8acc:	20bfff04 	addi	r2,r4,-4
    8ad0:	308d883a 	add	r6,r6,r2
    8ad4:	1887883a 	add	r3,r3,r2
    8ad8:	80a1883a 	add	r16,r16,r2
    8adc:	d9800a15 	stw	r6,40(sp)
    8ae0:	d8c01115 	stw	r3,68(sp)
    8ae4:	003f1d06 	br	875c <_dtoa_r+0x8bc>
    8ae8:	a03f0c1e 	bne	r20,zero,871c <_dtoa_r+0x87c>
    8aec:	00800434 	movhi	r2,16
    8af0:	10bfffc4 	addi	r2,r2,-1
    8af4:	a884703a 	and	r2,r21,r2
    8af8:	103f081e 	bne	r2,zero,871c <_dtoa_r+0x87c>
    8afc:	a89ffc2c 	andhi	r2,r21,32752
    8b00:	103f0626 	beq	r2,zero,871c <_dtoa_r+0x87c>
    8b04:	d8c01117 	ldw	r3,68(sp)
    8b08:	d9000a17 	ldw	r4,40(sp)
    8b0c:	18c00044 	addi	r3,r3,1
    8b10:	21000044 	addi	r4,r4,1
    8b14:	d8c01115 	stw	r3,68(sp)
    8b18:	d9000a15 	stw	r4,40(sp)
    8b1c:	003f0006 	br	8720 <_dtoa_r+0x880>
    8b20:	d9400717 	ldw	r5,28(sp)
    8b24:	d9001617 	ldw	r4,88(sp)
    8b28:	000b5500 	call	b550 <__pow5mult>
    8b2c:	d8800715 	stw	r2,28(sp)
    8b30:	003eed06 	br	86e8 <_dtoa_r+0x848>
    8b34:	1000021e 	bne	r2,zero,8b40 <_dtoa_r+0xca0>
    8b38:	b880004c 	andi	r2,r23,1
    8b3c:	103fc11e 	bne	r2,zero,8a44 <_dtoa_r+0xba4>
    8b40:	b5bfffc4 	addi	r22,r22,-1
    8b44:	b0c00007 	ldb	r3,0(r22)
    8b48:	00800c04 	movi	r2,48
    8b4c:	18bffc26 	beq	r3,r2,8b40 <_dtoa_r+0xca0>
    8b50:	b7000044 	addi	fp,r22,1
    8b54:	003fcb06 	br	8a84 <_dtoa_r+0xbe4>
    8b58:	d9800d17 	ldw	r6,52(sp)
    8b5c:	018fc83a 	sub	r7,zero,r6
    8b60:	3801f726 	beq	r7,zero,9340 <_dtoa_r+0x14a0>
    8b64:	398003cc 	andi	r6,r7,15
    8b68:	300c90fa 	slli	r6,r6,3
    8b6c:	01400074 	movhi	r5,1
    8b70:	29543a04 	addi	r5,r5,20712
    8b74:	d9001217 	ldw	r4,72(sp)
    8b78:	314d883a 	add	r6,r6,r5
    8b7c:	30c00117 	ldw	r3,4(r6)
    8b80:	30800017 	ldw	r2,0(r6)
    8b84:	d9401317 	ldw	r5,76(sp)
    8b88:	3821d13a 	srai	r16,r7,4
    8b8c:	100d883a 	mov	r6,r2
    8b90:	180f883a 	mov	r7,r3
    8b94:	00106840 	call	10684 <__muldf3>
    8b98:	1011883a 	mov	r8,r2
    8b9c:	1813883a 	mov	r9,r3
    8ba0:	1029883a 	mov	r20,r2
    8ba4:	182b883a 	mov	r21,r3
    8ba8:	8001e526 	beq	r16,zero,9340 <_dtoa_r+0x14a0>
    8bac:	05800084 	movi	r22,2
    8bb0:	04400074 	movhi	r17,1
    8bb4:	8c546c04 	addi	r17,r17,20912
    8bb8:	8080004c 	andi	r2,r16,1
    8bbc:	1005003a 	cmpeq	r2,r2,zero
    8bc0:	1000081e 	bne	r2,zero,8be4 <_dtoa_r+0xd44>
    8bc4:	89800017 	ldw	r6,0(r17)
    8bc8:	89c00117 	ldw	r7,4(r17)
    8bcc:	480b883a 	mov	r5,r9
    8bd0:	4009883a 	mov	r4,r8
    8bd4:	00106840 	call	10684 <__muldf3>
    8bd8:	1011883a 	mov	r8,r2
    8bdc:	b5800044 	addi	r22,r22,1
    8be0:	1813883a 	mov	r9,r3
    8be4:	8021d07a 	srai	r16,r16,1
    8be8:	8c400204 	addi	r17,r17,8
    8bec:	803ff21e 	bne	r16,zero,8bb8 <_dtoa_r+0xd18>
    8bf0:	4029883a 	mov	r20,r8
    8bf4:	482b883a 	mov	r21,r9
    8bf8:	003dca06 	br	8324 <_dtoa_r+0x484>
    8bfc:	d9000817 	ldw	r4,32(sp)
    8c00:	2005003a 	cmpeq	r2,r4,zero
    8c04:	1001f61e 	bne	r2,zero,93e0 <_dtoa_r+0x1540>
    8c08:	dc001117 	ldw	r16,68(sp)
    8c0c:	dc801017 	ldw	r18,64(sp)
    8c10:	18c10cc4 	addi	r3,r3,1075
    8c14:	003f6106 	br	899c <_dtoa_r+0xafc>
    8c18:	d8000b15 	stw	zero,44(sp)
    8c1c:	d9802617 	ldw	r6,152(sp)
    8c20:	d8c00d17 	ldw	r3,52(sp)
    8c24:	30800044 	addi	r2,r6,1
    8c28:	18ad883a 	add	r22,r3,r2
    8c2c:	b13fffc4 	addi	r4,r22,-1
    8c30:	d9000e15 	stw	r4,56(sp)
    8c34:	0581f60e 	bge	zero,r22,9410 <_dtoa_r+0x1570>
    8c38:	dd800f15 	stw	r22,60(sp)
    8c3c:	003f3006 	br	8900 <_dtoa_r+0xa60>
    8c40:	d8000b15 	stw	zero,44(sp)
    8c44:	d9002617 	ldw	r4,152(sp)
    8c48:	0101eb0e 	bge	zero,r4,93f8 <_dtoa_r+0x1558>
    8c4c:	202d883a 	mov	r22,r4
    8c50:	d9000e15 	stw	r4,56(sp)
    8c54:	d9000f15 	stw	r4,60(sp)
    8c58:	003f2906 	br	8900 <_dtoa_r+0xa60>
    8c5c:	01800044 	movi	r6,1
    8c60:	d9800b15 	stw	r6,44(sp)
    8c64:	003ff706 	br	8c44 <_dtoa_r+0xda4>
    8c68:	01000044 	movi	r4,1
    8c6c:	d9000b15 	stw	r4,44(sp)
    8c70:	003fea06 	br	8c1c <_dtoa_r+0xd7c>
    8c74:	04000c0e 	bge	zero,r16,8ca8 <_dtoa_r+0xe08>
    8c78:	d9400717 	ldw	r5,28(sp)
    8c7c:	d9001617 	ldw	r4,88(sp)
    8c80:	01800044 	movi	r6,1
    8c84:	000b0e00 	call	b0e0 <__lshift>
    8c88:	1009883a 	mov	r4,r2
    8c8c:	900b883a 	mov	r5,r18
    8c90:	d8800715 	stw	r2,28(sp)
    8c94:	000a8f80 	call	a8f8 <__mcmp>
    8c98:	0081e00e 	bge	zero,r2,941c <_dtoa_r+0x157c>
    8c9c:	bdc00044 	addi	r23,r23,1
    8ca0:	00800e84 	movi	r2,58
    8ca4:	b881a226 	beq	r23,r2,9330 <_dtoa_r+0x1490>
    8ca8:	b7000044 	addi	fp,r22,1
    8cac:	b5c00005 	stb	r23,0(r22)
    8cb0:	003f7406 	br	8a84 <_dtoa_r+0xbe4>
    8cb4:	00800e44 	movi	r2,57
    8cb8:	b8819d26 	beq	r23,r2,9330 <_dtoa_r+0x1490>
    8cbc:	053ffa0e 	bge	zero,r20,8ca8 <_dtoa_r+0xe08>
    8cc0:	8dc00c44 	addi	r23,r17,49
    8cc4:	003ff806 	br	8ca8 <_dtoa_r+0xe08>
    8cc8:	d9001617 	ldw	r4,88(sp)
    8ccc:	a80b883a 	mov	r5,r21
    8cd0:	04000044 	movi	r16,1
    8cd4:	000a79c0 	call	a79c <_Bfree>
    8cd8:	003edf06 	br	8858 <_dtoa_r+0x9b8>
    8cdc:	d9001617 	ldw	r4,88(sp)
    8ce0:	980b883a 	mov	r5,r19
    8ce4:	01800284 	movi	r6,10
    8ce8:	000f883a 	mov	r7,zero
    8cec:	000b4500 	call	b450 <__multadd>
    8cf0:	1027883a 	mov	r19,r2
    8cf4:	d8800615 	stw	r2,24(sp)
    8cf8:	003ebb06 	br	87e8 <_dtoa_r+0x948>
    8cfc:	d9801117 	ldw	r6,68(sp)
    8d00:	d8800d17 	ldw	r2,52(sp)
    8d04:	d8000915 	stw	zero,36(sp)
    8d08:	308dc83a 	sub	r6,r6,r2
    8d0c:	0087c83a 	sub	r3,zero,r2
    8d10:	d9801115 	stw	r6,68(sp)
    8d14:	d8c01015 	stw	r3,64(sp)
    8d18:	003cfe06 	br	8114 <_dtoa_r+0x274>
    8d1c:	018dc83a 	sub	r6,zero,r6
    8d20:	d9801115 	stw	r6,68(sp)
    8d24:	d8000a15 	stw	zero,40(sp)
    8d28:	003cf306 	br	80f8 <_dtoa_r+0x258>
    8d2c:	d9000d17 	ldw	r4,52(sp)
    8d30:	0010fd00 	call	10fd0 <__floatsidf>
    8d34:	880b883a 	mov	r5,r17
    8d38:	8009883a 	mov	r4,r16
    8d3c:	180f883a 	mov	r7,r3
    8d40:	100d883a 	mov	r6,r2
    8d44:	0010d280 	call	10d28 <__nedf2>
    8d48:	103ce126 	beq	r2,zero,80d0 <_dtoa_r+0x230>
    8d4c:	d9800d17 	ldw	r6,52(sp)
    8d50:	31bfffc4 	addi	r6,r6,-1
    8d54:	d9800d15 	stw	r6,52(sp)
    8d58:	003cdd06 	br	80d0 <_dtoa_r+0x230>
    8d5c:	d9000717 	ldw	r4,28(sp)
    8d60:	900b883a 	mov	r5,r18
    8d64:	000a8f80 	call	a8f8 <__mcmp>
    8d68:	103e8d0e 	bge	r2,zero,87a0 <_dtoa_r+0x900>
    8d6c:	d9400717 	ldw	r5,28(sp)
    8d70:	d9001617 	ldw	r4,88(sp)
    8d74:	01800284 	movi	r6,10
    8d78:	000f883a 	mov	r7,zero
    8d7c:	000b4500 	call	b450 <__multadd>
    8d80:	d9800d17 	ldw	r6,52(sp)
    8d84:	d8800715 	stw	r2,28(sp)
    8d88:	31bfffc4 	addi	r6,r6,-1
    8d8c:	d9800d15 	stw	r6,52(sp)
    8d90:	b001a71e 	bne	r22,zero,9430 <_dtoa_r+0x1590>
    8d94:	d8800e17 	ldw	r2,56(sp)
    8d98:	d8800f15 	stw	r2,60(sp)
    8d9c:	003e8006 	br	87a0 <_dtoa_r+0x900>
    8da0:	90800417 	ldw	r2,16(r18)
    8da4:	1085883a 	add	r2,r2,r2
    8da8:	1085883a 	add	r2,r2,r2
    8dac:	1485883a 	add	r2,r2,r18
    8db0:	11000417 	ldw	r4,16(r2)
    8db4:	000a7c40 	call	a7c4 <__hi0bits>
    8db8:	00c00804 	movi	r3,32
    8dbc:	1887c83a 	sub	r3,r3,r2
    8dc0:	003e5a06 	br	872c <_dtoa_r+0x88c>
    8dc4:	d9400717 	ldw	r5,28(sp)
    8dc8:	d9801017 	ldw	r6,64(sp)
    8dcc:	d9001617 	ldw	r4,88(sp)
    8dd0:	000b5500 	call	b550 <__pow5mult>
    8dd4:	d8800715 	stw	r2,28(sp)
    8dd8:	003e4306 	br	86e8 <_dtoa_r+0x848>
    8ddc:	d9800f17 	ldw	r6,60(sp)
    8de0:	d8800d17 	ldw	r2,52(sp)
    8de4:	d9800315 	stw	r6,12(sp)
    8de8:	d8800415 	stw	r2,16(sp)
    8dec:	d8c00b17 	ldw	r3,44(sp)
    8df0:	1805003a 	cmpeq	r2,r3,zero
    8df4:	1000e21e 	bne	r2,zero,9180 <_dtoa_r+0x12e0>
    8df8:	d9000317 	ldw	r4,12(sp)
    8dfc:	0005883a 	mov	r2,zero
    8e00:	00cff834 	movhi	r3,16352
    8e04:	200c90fa 	slli	r6,r4,3
    8e08:	01000074 	movhi	r4,1
    8e0c:	21143a04 	addi	r4,r4,20712
    8e10:	180b883a 	mov	r5,r3
    8e14:	310d883a 	add	r6,r6,r4
    8e18:	327fff17 	ldw	r9,-4(r6)
    8e1c:	323ffe17 	ldw	r8,-8(r6)
    8e20:	1009883a 	mov	r4,r2
    8e24:	480f883a 	mov	r7,r9
    8e28:	400d883a 	mov	r6,r8
    8e2c:	0010a480 	call	10a48 <__divdf3>
    8e30:	180b883a 	mov	r5,r3
    8e34:	b00d883a 	mov	r6,r22
    8e38:	b80f883a 	mov	r7,r23
    8e3c:	1009883a 	mov	r4,r2
    8e40:	00105900 	call	10590 <__subdf3>
    8e44:	a80b883a 	mov	r5,r21
    8e48:	a009883a 	mov	r4,r20
    8e4c:	d8c01915 	stw	r3,100(sp)
    8e50:	d8801815 	stw	r2,96(sp)
    8e54:	00110c80 	call	110c8 <__fixdfsi>
    8e58:	1009883a 	mov	r4,r2
    8e5c:	1027883a 	mov	r19,r2
    8e60:	0010fd00 	call	10fd0 <__floatsidf>
    8e64:	a80b883a 	mov	r5,r21
    8e68:	a009883a 	mov	r4,r20
    8e6c:	180f883a 	mov	r7,r3
    8e70:	100d883a 	mov	r6,r2
    8e74:	00105900 	call	10590 <__subdf3>
    8e78:	d9801817 	ldw	r6,96(sp)
    8e7c:	1823883a 	mov	r17,r3
    8e80:	d8801415 	stw	r2,80(sp)
    8e84:	302d883a 	mov	r22,r6
    8e88:	d9800517 	ldw	r6,20(sp)
    8e8c:	9cc00c04 	addi	r19,r19,48
    8e90:	dc401515 	stw	r17,84(sp)
    8e94:	d8c01917 	ldw	r3,100(sp)
    8e98:	34c00005 	stb	r19,0(r6)
    8e9c:	d8800517 	ldw	r2,20(sp)
    8ea0:	d9401917 	ldw	r5,100(sp)
    8ea4:	d9801417 	ldw	r6,80(sp)
    8ea8:	b009883a 	mov	r4,r22
    8eac:	880f883a 	mov	r7,r17
    8eb0:	182f883a 	mov	r23,r3
    8eb4:	17000044 	addi	fp,r2,1
    8eb8:	0010db00 	call	10db0 <__gtdf2>
    8ebc:	00804e16 	blt	zero,r2,8ff8 <_dtoa_r+0x1158>
    8ec0:	d9801417 	ldw	r6,80(sp)
    8ec4:	0005883a 	mov	r2,zero
    8ec8:	00cffc34 	movhi	r3,16368
    8ecc:	180b883a 	mov	r5,r3
    8ed0:	880f883a 	mov	r7,r17
    8ed4:	1009883a 	mov	r4,r2
    8ed8:	00105900 	call	10590 <__subdf3>
    8edc:	d9401917 	ldw	r5,100(sp)
    8ee0:	180f883a 	mov	r7,r3
    8ee4:	b009883a 	mov	r4,r22
    8ee8:	100d883a 	mov	r6,r2
    8eec:	0010db00 	call	10db0 <__gtdf2>
    8ef0:	00bda216 	blt	zero,r2,857c <_dtoa_r+0x6dc>
    8ef4:	d8c00317 	ldw	r3,12(sp)
    8ef8:	00800044 	movi	r2,1
    8efc:	10c01216 	blt	r2,r3,8f48 <_dtoa_r+0x10a8>
    8f00:	003d4506 	br	8418 <_dtoa_r+0x578>
    8f04:	d9801417 	ldw	r6,80(sp)
    8f08:	0005883a 	mov	r2,zero
    8f0c:	00cffc34 	movhi	r3,16368
    8f10:	180b883a 	mov	r5,r3
    8f14:	880f883a 	mov	r7,r17
    8f18:	1009883a 	mov	r4,r2
    8f1c:	00105900 	call	10590 <__subdf3>
    8f20:	d9c01b17 	ldw	r7,108(sp)
    8f24:	180b883a 	mov	r5,r3
    8f28:	1009883a 	mov	r4,r2
    8f2c:	b00d883a 	mov	r6,r22
    8f30:	0010ec00 	call	10ec0 <__ltdf2>
    8f34:	103d9116 	blt	r2,zero,857c <_dtoa_r+0x6dc>
    8f38:	d9800517 	ldw	r6,20(sp)
    8f3c:	d9000317 	ldw	r4,12(sp)
    8f40:	3105883a 	add	r2,r6,r4
    8f44:	e0bd3426 	beq	fp,r2,8418 <_dtoa_r+0x578>
    8f48:	04500934 	movhi	r17,16420
    8f4c:	0021883a 	mov	r16,zero
    8f50:	b80b883a 	mov	r5,r23
    8f54:	b009883a 	mov	r4,r22
    8f58:	800d883a 	mov	r6,r16
    8f5c:	880f883a 	mov	r7,r17
    8f60:	00106840 	call	10684 <__muldf3>
    8f64:	d9401517 	ldw	r5,84(sp)
    8f68:	d9001417 	ldw	r4,80(sp)
    8f6c:	880f883a 	mov	r7,r17
    8f70:	000d883a 	mov	r6,zero
    8f74:	d8801a15 	stw	r2,104(sp)
    8f78:	d8c01b15 	stw	r3,108(sp)
    8f7c:	00106840 	call	10684 <__muldf3>
    8f80:	180b883a 	mov	r5,r3
    8f84:	1009883a 	mov	r4,r2
    8f88:	1823883a 	mov	r17,r3
    8f8c:	1021883a 	mov	r16,r2
    8f90:	00110c80 	call	110c8 <__fixdfsi>
    8f94:	1009883a 	mov	r4,r2
    8f98:	102b883a 	mov	r21,r2
    8f9c:	0010fd00 	call	10fd0 <__floatsidf>
    8fa0:	880b883a 	mov	r5,r17
    8fa4:	8009883a 	mov	r4,r16
    8fa8:	180f883a 	mov	r7,r3
    8fac:	100d883a 	mov	r6,r2
    8fb0:	00105900 	call	10590 <__subdf3>
    8fb4:	1021883a 	mov	r16,r2
    8fb8:	d9001b17 	ldw	r4,108(sp)
    8fbc:	1823883a 	mov	r17,r3
    8fc0:	dc001415 	stw	r16,80(sp)
    8fc4:	ad400c04 	addi	r21,r21,48
    8fc8:	dc401515 	stw	r17,84(sp)
    8fcc:	d8801a17 	ldw	r2,104(sp)
    8fd0:	e5400005 	stb	r21,0(fp)
    8fd4:	202f883a 	mov	r23,r4
    8fd8:	d9c01b17 	ldw	r7,108(sp)
    8fdc:	d9001417 	ldw	r4,80(sp)
    8fe0:	880b883a 	mov	r5,r17
    8fe4:	100d883a 	mov	r6,r2
    8fe8:	102d883a 	mov	r22,r2
    8fec:	e7000044 	addi	fp,fp,1
    8ff0:	0010ec00 	call	10ec0 <__ltdf2>
    8ff4:	103fc30e 	bge	r2,zero,8f04 <_dtoa_r+0x1064>
    8ff8:	d9000417 	ldw	r4,16(sp)
    8ffc:	d9000d15 	stw	r4,52(sp)
    9000:	003d7106 	br	85c8 <_dtoa_r+0x728>
    9004:	d9801717 	ldw	r6,92(sp)
    9008:	00800084 	movi	r2,2
    900c:	11bde60e 	bge	r2,r6,87a8 <_dtoa_r+0x908>
    9010:	203cfb1e 	bne	r4,zero,8400 <_dtoa_r+0x560>
    9014:	d9001617 	ldw	r4,88(sp)
    9018:	900b883a 	mov	r5,r18
    901c:	01800144 	movi	r6,5
    9020:	000f883a 	mov	r7,zero
    9024:	000b4500 	call	b450 <__multadd>
    9028:	d9000717 	ldw	r4,28(sp)
    902c:	100b883a 	mov	r5,r2
    9030:	1025883a 	mov	r18,r2
    9034:	000a8f80 	call	a8f8 <__mcmp>
    9038:	00bcf10e 	bge	zero,r2,8400 <_dtoa_r+0x560>
    903c:	d8c00d17 	ldw	r3,52(sp)
    9040:	d9000517 	ldw	r4,20(sp)
    9044:	d8000615 	stw	zero,24(sp)
    9048:	18c00044 	addi	r3,r3,1
    904c:	d8c00d15 	stw	r3,52(sp)
    9050:	00800c44 	movi	r2,49
    9054:	27000044 	addi	fp,r4,1
    9058:	20800005 	stb	r2,0(r4)
    905c:	003e8906 	br	8a84 <_dtoa_r+0xbe4>
    9060:	d8c00517 	ldw	r3,20(sp)
    9064:	003bc206 	br	7f70 <_dtoa_r+0xd0>
    9068:	01800074 	movhi	r6,1
    906c:	31946c04 	addi	r6,r6,20912
    9070:	30c00917 	ldw	r3,36(r6)
    9074:	30800817 	ldw	r2,32(r6)
    9078:	d9001217 	ldw	r4,72(sp)
    907c:	d9401317 	ldw	r5,76(sp)
    9080:	180f883a 	mov	r7,r3
    9084:	100d883a 	mov	r6,r2
    9088:	0010a480 	call	10a48 <__divdf3>
    908c:	948003cc 	andi	r18,r18,15
    9090:	058000c4 	movi	r22,3
    9094:	1029883a 	mov	r20,r2
    9098:	182b883a 	mov	r21,r3
    909c:	003c8906 	br	82c4 <_dtoa_r+0x424>
    90a0:	d9001017 	ldw	r4,64(sp)
    90a4:	d9800917 	ldw	r6,36(sp)
    90a8:	0025883a 	mov	r18,zero
    90ac:	1105c83a 	sub	r2,r2,r4
    90b0:	2089883a 	add	r4,r4,r2
    90b4:	308d883a 	add	r6,r6,r2
    90b8:	d9001015 	stw	r4,64(sp)
    90bc:	d9800915 	stw	r6,36(sp)
    90c0:	003e3206 	br	898c <_dtoa_r+0xaec>
    90c4:	28800044 	addi	r2,r5,1
    90c8:	27000044 	addi	fp,r4,1
    90cc:	20800005 	stb	r2,0(r4)
    90d0:	003e6c06 	br	8a84 <_dtoa_r+0xbe4>
    90d4:	d8800f17 	ldw	r2,60(sp)
    90d8:	00bce016 	blt	zero,r2,845c <_dtoa_r+0x5bc>
    90dc:	d9800f17 	ldw	r6,60(sp)
    90e0:	303cc51e 	bne	r6,zero,83f8 <_dtoa_r+0x558>
    90e4:	0005883a 	mov	r2,zero
    90e8:	00d00534 	movhi	r3,16404
    90ec:	980b883a 	mov	r5,r19
    90f0:	180f883a 	mov	r7,r3
    90f4:	9009883a 	mov	r4,r18
    90f8:	100d883a 	mov	r6,r2
    90fc:	00106840 	call	10684 <__muldf3>
    9100:	180b883a 	mov	r5,r3
    9104:	a80f883a 	mov	r7,r21
    9108:	1009883a 	mov	r4,r2
    910c:	a00d883a 	mov	r6,r20
    9110:	0010e380 	call	10e38 <__gedf2>
    9114:	103cb80e 	bge	r2,zero,83f8 <_dtoa_r+0x558>
    9118:	0027883a 	mov	r19,zero
    911c:	0025883a 	mov	r18,zero
    9120:	003fc606 	br	903c <_dtoa_r+0x119c>
    9124:	99400117 	ldw	r5,4(r19)
    9128:	d9001617 	ldw	r4,88(sp)
    912c:	000ad1c0 	call	ad1c <_Balloc>
    9130:	99800417 	ldw	r6,16(r19)
    9134:	11000304 	addi	r4,r2,12
    9138:	99400304 	addi	r5,r19,12
    913c:	318d883a 	add	r6,r6,r6
    9140:	318d883a 	add	r6,r6,r6
    9144:	31800204 	addi	r6,r6,8
    9148:	1023883a 	mov	r17,r2
    914c:	00039640 	call	3964 <memcpy>
    9150:	d9001617 	ldw	r4,88(sp)
    9154:	880b883a 	mov	r5,r17
    9158:	01800044 	movi	r6,1
    915c:	000b0e00 	call	b0e0 <__lshift>
    9160:	100b883a 	mov	r5,r2
    9164:	003d9c06 	br	87d8 <_dtoa_r+0x938>
    9168:	00800e44 	movi	r2,57
    916c:	b8807026 	beq	r23,r2,9330 <_dtoa_r+0x1490>
    9170:	b8800044 	addi	r2,r23,1
    9174:	b7000044 	addi	fp,r22,1
    9178:	b0800005 	stb	r2,0(r22)
    917c:	003e4106 	br	8a84 <_dtoa_r+0xbe4>
    9180:	d8800317 	ldw	r2,12(sp)
    9184:	01800074 	movhi	r6,1
    9188:	31943a04 	addi	r6,r6,20712
    918c:	b009883a 	mov	r4,r22
    9190:	100e90fa 	slli	r7,r2,3
    9194:	b80b883a 	mov	r5,r23
    9198:	398f883a 	add	r7,r7,r6
    919c:	38bffe17 	ldw	r2,-8(r7)
    91a0:	d9800517 	ldw	r6,20(sp)
    91a4:	38ffff17 	ldw	r3,-4(r7)
    91a8:	37000044 	addi	fp,r6,1
    91ac:	180f883a 	mov	r7,r3
    91b0:	100d883a 	mov	r6,r2
    91b4:	00106840 	call	10684 <__muldf3>
    91b8:	a80b883a 	mov	r5,r21
    91bc:	a009883a 	mov	r4,r20
    91c0:	182f883a 	mov	r23,r3
    91c4:	102d883a 	mov	r22,r2
    91c8:	00110c80 	call	110c8 <__fixdfsi>
    91cc:	1009883a 	mov	r4,r2
    91d0:	1027883a 	mov	r19,r2
    91d4:	0010fd00 	call	10fd0 <__floatsidf>
    91d8:	a80b883a 	mov	r5,r21
    91dc:	a009883a 	mov	r4,r20
    91e0:	180f883a 	mov	r7,r3
    91e4:	100d883a 	mov	r6,r2
    91e8:	00105900 	call	10590 <__subdf3>
    91ec:	180b883a 	mov	r5,r3
    91f0:	d8c00517 	ldw	r3,20(sp)
    91f4:	9cc00c04 	addi	r19,r19,48
    91f8:	1009883a 	mov	r4,r2
    91fc:	1cc00005 	stb	r19,0(r3)
    9200:	2021883a 	mov	r16,r4
    9204:	d9000317 	ldw	r4,12(sp)
    9208:	00800044 	movi	r2,1
    920c:	2823883a 	mov	r17,r5
    9210:	20802226 	beq	r4,r2,929c <_dtoa_r+0x13fc>
    9214:	1029883a 	mov	r20,r2
    9218:	0005883a 	mov	r2,zero
    921c:	00d00934 	movhi	r3,16420
    9220:	180f883a 	mov	r7,r3
    9224:	100d883a 	mov	r6,r2
    9228:	880b883a 	mov	r5,r17
    922c:	8009883a 	mov	r4,r16
    9230:	00106840 	call	10684 <__muldf3>
    9234:	180b883a 	mov	r5,r3
    9238:	1009883a 	mov	r4,r2
    923c:	1823883a 	mov	r17,r3
    9240:	1021883a 	mov	r16,r2
    9244:	00110c80 	call	110c8 <__fixdfsi>
    9248:	1009883a 	mov	r4,r2
    924c:	102b883a 	mov	r21,r2
    9250:	0010fd00 	call	10fd0 <__floatsidf>
    9254:	880b883a 	mov	r5,r17
    9258:	8009883a 	mov	r4,r16
    925c:	180f883a 	mov	r7,r3
    9260:	100d883a 	mov	r6,r2
    9264:	00105900 	call	10590 <__subdf3>
    9268:	180b883a 	mov	r5,r3
    926c:	d8c00517 	ldw	r3,20(sp)
    9270:	1009883a 	mov	r4,r2
    9274:	ad400c04 	addi	r21,r21,48
    9278:	1d05883a 	add	r2,r3,r20
    927c:	15400005 	stb	r21,0(r2)
    9280:	2021883a 	mov	r16,r4
    9284:	d9000317 	ldw	r4,12(sp)
    9288:	a5000044 	addi	r20,r20,1
    928c:	2823883a 	mov	r17,r5
    9290:	a13fe11e 	bne	r20,r4,9218 <_dtoa_r+0x1378>
    9294:	e505883a 	add	r2,fp,r20
    9298:	173fffc4 	addi	fp,r2,-1
    929c:	0025883a 	mov	r18,zero
    92a0:	04cff834 	movhi	r19,16352
    92a4:	b009883a 	mov	r4,r22
    92a8:	b80b883a 	mov	r5,r23
    92ac:	900d883a 	mov	r6,r18
    92b0:	980f883a 	mov	r7,r19
    92b4:	00106100 	call	10610 <__adddf3>
    92b8:	180b883a 	mov	r5,r3
    92bc:	1009883a 	mov	r4,r2
    92c0:	800d883a 	mov	r6,r16
    92c4:	880f883a 	mov	r7,r17
    92c8:	0010ec00 	call	10ec0 <__ltdf2>
    92cc:	103cab16 	blt	r2,zero,857c <_dtoa_r+0x6dc>
    92d0:	0009883a 	mov	r4,zero
    92d4:	980b883a 	mov	r5,r19
    92d8:	b80f883a 	mov	r7,r23
    92dc:	b00d883a 	mov	r6,r22
    92e0:	00105900 	call	10590 <__subdf3>
    92e4:	180b883a 	mov	r5,r3
    92e8:	880f883a 	mov	r7,r17
    92ec:	1009883a 	mov	r4,r2
    92f0:	800d883a 	mov	r6,r16
    92f4:	0010db00 	call	10db0 <__gtdf2>
    92f8:	00bc470e 	bge	zero,r2,8418 <_dtoa_r+0x578>
    92fc:	00c00c04 	movi	r3,48
    9300:	e73fffc4 	addi	fp,fp,-1
    9304:	e0800007 	ldb	r2,0(fp)
    9308:	10fffd26 	beq	r2,r3,9300 <_dtoa_r+0x1460>
    930c:	d9800417 	ldw	r6,16(sp)
    9310:	e7000044 	addi	fp,fp,1
    9314:	d9800d15 	stw	r6,52(sp)
    9318:	003cab06 	br	85c8 <_dtoa_r+0x728>
    931c:	d8c00f17 	ldw	r3,60(sp)
    9320:	d9001117 	ldw	r4,68(sp)
    9324:	20e1c83a 	sub	r16,r4,r3
    9328:	0007883a 	mov	r3,zero
    932c:	003d9b06 	br	899c <_dtoa_r+0xafc>
    9330:	00800e44 	movi	r2,57
    9334:	b0800005 	stb	r2,0(r22)
    9338:	b5800044 	addi	r22,r22,1
    933c:	003dc106 	br	8a44 <_dtoa_r+0xba4>
    9340:	05800084 	movi	r22,2
    9344:	003bf706 	br	8324 <_dtoa_r+0x484>
    9348:	d9000f17 	ldw	r4,60(sp)
    934c:	013c000e 	bge	zero,r4,8350 <_dtoa_r+0x4b0>
    9350:	d9800e17 	ldw	r6,56(sp)
    9354:	01bc300e 	bge	zero,r6,8418 <_dtoa_r+0x578>
    9358:	0005883a 	mov	r2,zero
    935c:	00d00934 	movhi	r3,16420
    9360:	a80b883a 	mov	r5,r21
    9364:	180f883a 	mov	r7,r3
    9368:	a009883a 	mov	r4,r20
    936c:	100d883a 	mov	r6,r2
    9370:	00106840 	call	10684 <__muldf3>
    9374:	b1000044 	addi	r4,r22,1
    9378:	1021883a 	mov	r16,r2
    937c:	1823883a 	mov	r17,r3
    9380:	0010fd00 	call	10fd0 <__floatsidf>
    9384:	880b883a 	mov	r5,r17
    9388:	8009883a 	mov	r4,r16
    938c:	180f883a 	mov	r7,r3
    9390:	100d883a 	mov	r6,r2
    9394:	00106840 	call	10684 <__muldf3>
    9398:	0011883a 	mov	r8,zero
    939c:	02500734 	movhi	r9,16412
    93a0:	180b883a 	mov	r5,r3
    93a4:	480f883a 	mov	r7,r9
    93a8:	1009883a 	mov	r4,r2
    93ac:	400d883a 	mov	r6,r8
    93b0:	00106100 	call	10610 <__adddf3>
    93b4:	102d883a 	mov	r22,r2
    93b8:	00bf3034 	movhi	r2,64704
    93bc:	10ef883a 	add	r23,r2,r3
    93c0:	d8800d17 	ldw	r2,52(sp)
    93c4:	d8c00e17 	ldw	r3,56(sp)
    93c8:	8029883a 	mov	r20,r16
    93cc:	10bfffc4 	addi	r2,r2,-1
    93d0:	882b883a 	mov	r21,r17
    93d4:	d8800415 	stw	r2,16(sp)
    93d8:	d8c00315 	stw	r3,12(sp)
    93dc:	003e8306 	br	8dec <_dtoa_r+0xf4c>
    93e0:	d8800117 	ldw	r2,4(sp)
    93e4:	dc001117 	ldw	r16,68(sp)
    93e8:	dc801017 	ldw	r18,64(sp)
    93ec:	00c00d84 	movi	r3,54
    93f0:	1887c83a 	sub	r3,r3,r2
    93f4:	003d6906 	br	899c <_dtoa_r+0xafc>
    93f8:	01800044 	movi	r6,1
    93fc:	3021883a 	mov	r16,r6
    9400:	d9800f15 	stw	r6,60(sp)
    9404:	d9802615 	stw	r6,152(sp)
    9408:	d9800e15 	stw	r6,56(sp)
    940c:	003b9306 	br	825c <_dtoa_r+0x3bc>
    9410:	b021883a 	mov	r16,r22
    9414:	dd800f15 	stw	r22,60(sp)
    9418:	003b9006 	br	825c <_dtoa_r+0x3bc>
    941c:	103e221e 	bne	r2,zero,8ca8 <_dtoa_r+0xe08>
    9420:	b880004c 	andi	r2,r23,1
    9424:	1005003a 	cmpeq	r2,r2,zero
    9428:	103e1f1e 	bne	r2,zero,8ca8 <_dtoa_r+0xe08>
    942c:	003e1b06 	br	8c9c <_dtoa_r+0xdfc>
    9430:	d9001617 	ldw	r4,88(sp)
    9434:	980b883a 	mov	r5,r19
    9438:	01800284 	movi	r6,10
    943c:	000f883a 	mov	r7,zero
    9440:	000b4500 	call	b450 <__multadd>
    9444:	d8c00e17 	ldw	r3,56(sp)
    9448:	1027883a 	mov	r19,r2
    944c:	d8c00f15 	stw	r3,60(sp)
    9450:	003cd306 	br	87a0 <_dtoa_r+0x900>

00009454 <_fclose_r>:
    9454:	defffc04 	addi	sp,sp,-16
    9458:	dc400115 	stw	r17,4(sp)
    945c:	dc000015 	stw	r16,0(sp)
    9460:	dfc00315 	stw	ra,12(sp)
    9464:	dc800215 	stw	r18,8(sp)
    9468:	2821883a 	mov	r16,r5
    946c:	2023883a 	mov	r17,r4
    9470:	28002926 	beq	r5,zero,9518 <_fclose_r+0xc4>
    9474:	0002d580 	call	2d58 <__sfp_lock_acquire>
    9478:	88000226 	beq	r17,zero,9484 <_fclose_r+0x30>
    947c:	88800e17 	ldw	r2,56(r17)
    9480:	10002d26 	beq	r2,zero,9538 <_fclose_r+0xe4>
    9484:	8080030f 	ldh	r2,12(r16)
    9488:	10002226 	beq	r2,zero,9514 <_fclose_r+0xc0>
    948c:	8809883a 	mov	r4,r17
    9490:	800b883a 	mov	r5,r16
    9494:	00095780 	call	9578 <_fflush_r>
    9498:	1025883a 	mov	r18,r2
    949c:	80800b17 	ldw	r2,44(r16)
    94a0:	10000426 	beq	r2,zero,94b4 <_fclose_r+0x60>
    94a4:	81400717 	ldw	r5,28(r16)
    94a8:	8809883a 	mov	r4,r17
    94ac:	103ee83a 	callr	r2
    94b0:	10002a16 	blt	r2,zero,955c <_fclose_r+0x108>
    94b4:	8080030b 	ldhu	r2,12(r16)
    94b8:	1080200c 	andi	r2,r2,128
    94bc:	1000231e 	bne	r2,zero,954c <_fclose_r+0xf8>
    94c0:	81400c17 	ldw	r5,48(r16)
    94c4:	28000526 	beq	r5,zero,94dc <_fclose_r+0x88>
    94c8:	80801004 	addi	r2,r16,64
    94cc:	28800226 	beq	r5,r2,94d8 <_fclose_r+0x84>
    94d0:	8809883a 	mov	r4,r17
    94d4:	0009b100 	call	9b10 <_free_r>
    94d8:	80000c15 	stw	zero,48(r16)
    94dc:	81401117 	ldw	r5,68(r16)
    94e0:	28000326 	beq	r5,zero,94f0 <_fclose_r+0x9c>
    94e4:	8809883a 	mov	r4,r17
    94e8:	0009b100 	call	9b10 <_free_r>
    94ec:	80001115 	stw	zero,68(r16)
    94f0:	8000030d 	sth	zero,12(r16)
    94f4:	0002d5c0 	call	2d5c <__sfp_lock_release>
    94f8:	9005883a 	mov	r2,r18
    94fc:	dfc00317 	ldw	ra,12(sp)
    9500:	dc800217 	ldw	r18,8(sp)
    9504:	dc400117 	ldw	r17,4(sp)
    9508:	dc000017 	ldw	r16,0(sp)
    950c:	dec00404 	addi	sp,sp,16
    9510:	f800283a 	ret
    9514:	0002d5c0 	call	2d5c <__sfp_lock_release>
    9518:	0025883a 	mov	r18,zero
    951c:	9005883a 	mov	r2,r18
    9520:	dfc00317 	ldw	ra,12(sp)
    9524:	dc800217 	ldw	r18,8(sp)
    9528:	dc400117 	ldw	r17,4(sp)
    952c:	dc000017 	ldw	r16,0(sp)
    9530:	dec00404 	addi	sp,sp,16
    9534:	f800283a 	ret
    9538:	8809883a 	mov	r4,r17
    953c:	0002d680 	call	2d68 <__sinit>
    9540:	8080030f 	ldh	r2,12(r16)
    9544:	103fd11e 	bne	r2,zero,948c <_fclose_r+0x38>
    9548:	003ff206 	br	9514 <_fclose_r+0xc0>
    954c:	81400417 	ldw	r5,16(r16)
    9550:	8809883a 	mov	r4,r17
    9554:	0009b100 	call	9b10 <_free_r>
    9558:	003fd906 	br	94c0 <_fclose_r+0x6c>
    955c:	04bfffc4 	movi	r18,-1
    9560:	003fd406 	br	94b4 <_fclose_r+0x60>

00009564 <fclose>:
    9564:	00800074 	movhi	r2,1
    9568:	109b9704 	addi	r2,r2,28252
    956c:	200b883a 	mov	r5,r4
    9570:	11000017 	ldw	r4,0(r2)
    9574:	00094541 	jmpi	9454 <_fclose_r>

00009578 <_fflush_r>:
    9578:	defffb04 	addi	sp,sp,-20
    957c:	dcc00315 	stw	r19,12(sp)
    9580:	dc800215 	stw	r18,8(sp)
    9584:	dfc00415 	stw	ra,16(sp)
    9588:	dc400115 	stw	r17,4(sp)
    958c:	dc000015 	stw	r16,0(sp)
    9590:	2027883a 	mov	r19,r4
    9594:	2825883a 	mov	r18,r5
    9598:	20000226 	beq	r4,zero,95a4 <_fflush_r+0x2c>
    959c:	20800e17 	ldw	r2,56(r4)
    95a0:	10005626 	beq	r2,zero,96fc <_fflush_r+0x184>
    95a4:	9100030b 	ldhu	r4,12(r18)
    95a8:	20ffffcc 	andi	r3,r4,65535
    95ac:	18e0001c 	xori	r3,r3,32768
    95b0:	18e00004 	addi	r3,r3,-32768
    95b4:	1880020c 	andi	r2,r3,8
    95b8:	1000261e 	bne	r2,zero,9654 <_fflush_r+0xdc>
    95bc:	90c00117 	ldw	r3,4(r18)
    95c0:	20820014 	ori	r2,r4,2048
    95c4:	9080030d 	sth	r2,12(r18)
    95c8:	1009883a 	mov	r4,r2
    95cc:	00c0400e 	bge	zero,r3,96d0 <_fflush_r+0x158>
    95d0:	92000a17 	ldw	r8,40(r18)
    95d4:	40004026 	beq	r8,zero,96d8 <_fflush_r+0x160>
    95d8:	2084000c 	andi	r2,r4,4096
    95dc:	10005326 	beq	r2,zero,972c <_fflush_r+0x1b4>
    95e0:	94001417 	ldw	r16,80(r18)
    95e4:	9080030b 	ldhu	r2,12(r18)
    95e8:	1080010c 	andi	r2,r2,4
    95ec:	1000481e 	bne	r2,zero,9710 <_fflush_r+0x198>
    95f0:	91400717 	ldw	r5,28(r18)
    95f4:	9809883a 	mov	r4,r19
    95f8:	800d883a 	mov	r6,r16
    95fc:	000f883a 	mov	r7,zero
    9600:	403ee83a 	callr	r8
    9604:	8080261e 	bne	r16,r2,96a0 <_fflush_r+0x128>
    9608:	9080030b 	ldhu	r2,12(r18)
    960c:	91000417 	ldw	r4,16(r18)
    9610:	90000115 	stw	zero,4(r18)
    9614:	10bdffcc 	andi	r2,r2,63487
    9618:	10ffffcc 	andi	r3,r2,65535
    961c:	18c4000c 	andi	r3,r3,4096
    9620:	9080030d 	sth	r2,12(r18)
    9624:	91000015 	stw	r4,0(r18)
    9628:	18002b26 	beq	r3,zero,96d8 <_fflush_r+0x160>
    962c:	0007883a 	mov	r3,zero
    9630:	1805883a 	mov	r2,r3
    9634:	94001415 	stw	r16,80(r18)
    9638:	dfc00417 	ldw	ra,16(sp)
    963c:	dcc00317 	ldw	r19,12(sp)
    9640:	dc800217 	ldw	r18,8(sp)
    9644:	dc400117 	ldw	r17,4(sp)
    9648:	dc000017 	ldw	r16,0(sp)
    964c:	dec00504 	addi	sp,sp,20
    9650:	f800283a 	ret
    9654:	94400417 	ldw	r17,16(r18)
    9658:	88001f26 	beq	r17,zero,96d8 <_fflush_r+0x160>
    965c:	90800017 	ldw	r2,0(r18)
    9660:	18c000cc 	andi	r3,r3,3
    9664:	94400015 	stw	r17,0(r18)
    9668:	1461c83a 	sub	r16,r2,r17
    966c:	18002526 	beq	r3,zero,9704 <_fflush_r+0x18c>
    9670:	0005883a 	mov	r2,zero
    9674:	90800215 	stw	r2,8(r18)
    9678:	0400170e 	bge	zero,r16,96d8 <_fflush_r+0x160>
    967c:	90c00917 	ldw	r3,36(r18)
    9680:	91400717 	ldw	r5,28(r18)
    9684:	880d883a 	mov	r6,r17
    9688:	800f883a 	mov	r7,r16
    968c:	9809883a 	mov	r4,r19
    9690:	183ee83a 	callr	r3
    9694:	88a3883a 	add	r17,r17,r2
    9698:	80a1c83a 	sub	r16,r16,r2
    969c:	00bff616 	blt	zero,r2,9678 <_fflush_r+0x100>
    96a0:	9080030b 	ldhu	r2,12(r18)
    96a4:	00ffffc4 	movi	r3,-1
    96a8:	10801014 	ori	r2,r2,64
    96ac:	9080030d 	sth	r2,12(r18)
    96b0:	1805883a 	mov	r2,r3
    96b4:	dfc00417 	ldw	ra,16(sp)
    96b8:	dcc00317 	ldw	r19,12(sp)
    96bc:	dc800217 	ldw	r18,8(sp)
    96c0:	dc400117 	ldw	r17,4(sp)
    96c4:	dc000017 	ldw	r16,0(sp)
    96c8:	dec00504 	addi	sp,sp,20
    96cc:	f800283a 	ret
    96d0:	90800f17 	ldw	r2,60(r18)
    96d4:	00bfbe16 	blt	zero,r2,95d0 <_fflush_r+0x58>
    96d8:	0007883a 	mov	r3,zero
    96dc:	1805883a 	mov	r2,r3
    96e0:	dfc00417 	ldw	ra,16(sp)
    96e4:	dcc00317 	ldw	r19,12(sp)
    96e8:	dc800217 	ldw	r18,8(sp)
    96ec:	dc400117 	ldw	r17,4(sp)
    96f0:	dc000017 	ldw	r16,0(sp)
    96f4:	dec00504 	addi	sp,sp,20
    96f8:	f800283a 	ret
    96fc:	0002d680 	call	2d68 <__sinit>
    9700:	003fa806 	br	95a4 <_fflush_r+0x2c>
    9704:	90800517 	ldw	r2,20(r18)
    9708:	90800215 	stw	r2,8(r18)
    970c:	003fda06 	br	9678 <_fflush_r+0x100>
    9710:	90800117 	ldw	r2,4(r18)
    9714:	90c00c17 	ldw	r3,48(r18)
    9718:	80a1c83a 	sub	r16,r16,r2
    971c:	183fb426 	beq	r3,zero,95f0 <_fflush_r+0x78>
    9720:	90800f17 	ldw	r2,60(r18)
    9724:	80a1c83a 	sub	r16,r16,r2
    9728:	003fb106 	br	95f0 <_fflush_r+0x78>
    972c:	91400717 	ldw	r5,28(r18)
    9730:	9809883a 	mov	r4,r19
    9734:	000d883a 	mov	r6,zero
    9738:	01c00044 	movi	r7,1
    973c:	403ee83a 	callr	r8
    9740:	1021883a 	mov	r16,r2
    9744:	00bfffc4 	movi	r2,-1
    9748:	80800226 	beq	r16,r2,9754 <_fflush_r+0x1dc>
    974c:	92000a17 	ldw	r8,40(r18)
    9750:	003fa406 	br	95e4 <_fflush_r+0x6c>
    9754:	98c00017 	ldw	r3,0(r19)
    9758:	00800744 	movi	r2,29
    975c:	18bfde26 	beq	r3,r2,96d8 <_fflush_r+0x160>
    9760:	9080030b 	ldhu	r2,12(r18)
    9764:	8007883a 	mov	r3,r16
    9768:	10801014 	ori	r2,r2,64
    976c:	9080030d 	sth	r2,12(r18)
    9770:	003fcf06 	br	96b0 <_fflush_r+0x138>

00009774 <fflush>:
    9774:	01400074 	movhi	r5,1
    9778:	29655e04 	addi	r5,r5,-27272
    977c:	2007883a 	mov	r3,r4
    9780:	20000526 	beq	r4,zero,9798 <fflush+0x24>
    9784:	00800074 	movhi	r2,1
    9788:	109b9704 	addi	r2,r2,28252
    978c:	11000017 	ldw	r4,0(r2)
    9790:	180b883a 	mov	r5,r3
    9794:	00095781 	jmpi	9578 <_fflush_r>
    9798:	00800074 	movhi	r2,1
    979c:	109b9804 	addi	r2,r2,28256
    97a0:	11000017 	ldw	r4,0(r2)
    97a4:	0002fc01 	jmpi	2fc0 <_fwalk_reent>

000097a8 <_fread_r>:
    97a8:	defff504 	addi	sp,sp,-44
    97ac:	ddc00815 	stw	r23,32(sp)
    97b0:	39af383a 	mul	r23,r7,r6
    97b4:	df000915 	stw	fp,36(sp)
    97b8:	dd800715 	stw	r22,28(sp)
    97bc:	dcc00415 	stw	r19,16(sp)
    97c0:	dc000115 	stw	r16,4(sp)
    97c4:	dfc00a15 	stw	ra,40(sp)
    97c8:	dd400615 	stw	r21,24(sp)
    97cc:	dd000515 	stw	r20,20(sp)
    97d0:	dc800315 	stw	r18,12(sp)
    97d4:	dc400215 	stw	r17,8(sp)
    97d8:	d9800015 	stw	r6,0(sp)
    97dc:	3839883a 	mov	fp,r7
    97e0:	2821883a 	mov	r16,r5
    97e4:	202d883a 	mov	r22,r4
    97e8:	dcc00b17 	ldw	r19,44(sp)
    97ec:	b8005926 	beq	r23,zero,9954 <_fread_r+0x1ac>
    97f0:	20000226 	beq	r4,zero,97fc <_fread_r+0x54>
    97f4:	20800e17 	ldw	r2,56(r4)
    97f8:	10005826 	beq	r2,zero,995c <_fread_r+0x1b4>
    97fc:	9c400117 	ldw	r17,4(r19)
    9800:	88005916 	blt	r17,zero,9968 <_fread_r+0x1c0>
    9804:	9880030b 	ldhu	r2,12(r19)
    9808:	8029883a 	mov	r20,r16
    980c:	1080008c 	andi	r2,r2,2
    9810:	1000221e 	bne	r2,zero,989c <_fread_r+0xf4>
    9814:	b825883a 	mov	r18,r23
    9818:	00000106 	br	9820 <_fread_r+0x78>
    981c:	9c400117 	ldw	r17,4(r19)
    9820:	a009883a 	mov	r4,r20
    9824:	880d883a 	mov	r6,r17
    9828:	8c80542e 	bgeu	r17,r18,997c <_fread_r+0x1d4>
    982c:	99400017 	ldw	r5,0(r19)
    9830:	a469883a 	add	r20,r20,r17
    9834:	9465c83a 	sub	r18,r18,r17
    9838:	00039640 	call	3964 <memcpy>
    983c:	98800017 	ldw	r2,0(r19)
    9840:	b009883a 	mov	r4,r22
    9844:	980b883a 	mov	r5,r19
    9848:	1461883a 	add	r16,r2,r17
    984c:	9c000015 	stw	r16,0(r19)
    9850:	0003bec0 	call	3bec <__srefill_r>
    9854:	103ff126 	beq	r2,zero,981c <_fread_r+0x74>
    9858:	d9400017 	ldw	r5,0(sp)
    985c:	bc89c83a 	sub	r4,r23,r18
    9860:	0002b840 	call	2b84 <__udivsi3>
    9864:	1039883a 	mov	fp,r2
    9868:	e005883a 	mov	r2,fp
    986c:	dfc00a17 	ldw	ra,40(sp)
    9870:	df000917 	ldw	fp,36(sp)
    9874:	ddc00817 	ldw	r23,32(sp)
    9878:	dd800717 	ldw	r22,28(sp)
    987c:	dd400617 	ldw	r21,24(sp)
    9880:	dd000517 	ldw	r20,20(sp)
    9884:	dcc00417 	ldw	r19,16(sp)
    9888:	dc800317 	ldw	r18,12(sp)
    988c:	dc400217 	ldw	r17,8(sp)
    9890:	dc000117 	ldw	r16,4(sp)
    9894:	dec00b04 	addi	sp,sp,44
    9898:	f800283a 	ret
    989c:	b825883a 	mov	r18,r23
    98a0:	8dc03436 	bltu	r17,r23,9974 <_fread_r+0x1cc>
    98a4:	99400017 	ldw	r5,0(r19)
    98a8:	a009883a 	mov	r4,r20
    98ac:	900d883a 	mov	r6,r18
    98b0:	00039640 	call	3964 <memcpy>
    98b4:	9c000017 	ldw	r16,0(r19)
    98b8:	98800117 	ldw	r2,4(r19)
    98bc:	99400c17 	ldw	r5,48(r19)
    98c0:	84a1883a 	add	r16,r16,r18
    98c4:	14a3c83a 	sub	r17,r2,r18
    98c8:	a4ab883a 	add	r21,r20,r18
    98cc:	9c400115 	stw	r17,4(r19)
    98d0:	9c000015 	stw	r16,0(r19)
    98d4:	bca9c83a 	sub	r20,r23,r18
    98d8:	28000826 	beq	r5,zero,98fc <_fread_r+0x154>
    98dc:	a03fe226 	beq	r20,zero,9868 <_fread_r+0xc0>
    98e0:	98801004 	addi	r2,r19,64
    98e4:	28800326 	beq	r5,r2,98f4 <_fread_r+0x14c>
    98e8:	b009883a 	mov	r4,r22
    98ec:	0009b100 	call	9b10 <_free_r>
    98f0:	9c000017 	ldw	r16,0(r19)
    98f4:	98000c15 	stw	zero,48(r19)
    98f8:	00000106 	br	9900 <_fread_r+0x158>
    98fc:	a03fda26 	beq	r20,zero,9868 <_fread_r+0xc0>
    9900:	9c800417 	ldw	r18,16(r19)
    9904:	9c400517 	ldw	r17,20(r19)
    9908:	9d400015 	stw	r21,0(r19)
    990c:	9d400415 	stw	r21,16(r19)
    9910:	9d000515 	stw	r20,20(r19)
    9914:	b009883a 	mov	r4,r22
    9918:	980b883a 	mov	r5,r19
    991c:	0003bec0 	call	3bec <__srefill_r>
    9920:	98c00117 	ldw	r3,4(r19)
    9924:	9c800415 	stw	r18,16(r19)
    9928:	9c400515 	stw	r17,20(r19)
    992c:	a8eb883a 	add	r21,r21,r3
    9930:	9c000015 	stw	r16,0(r19)
    9934:	a0e9c83a 	sub	r20,r20,r3
    9938:	98000115 	stw	zero,4(r19)
    993c:	103fef26 	beq	r2,zero,98fc <_fread_r+0x154>
    9940:	d9400017 	ldw	r5,0(sp)
    9944:	bd09c83a 	sub	r4,r23,r20
    9948:	0002b840 	call	2b84 <__udivsi3>
    994c:	1039883a 	mov	fp,r2
    9950:	003fc506 	br	9868 <_fread_r+0xc0>
    9954:	0039883a 	mov	fp,zero
    9958:	003fc306 	br	9868 <_fread_r+0xc0>
    995c:	0002d680 	call	2d68 <__sinit>
    9960:	9c400117 	ldw	r17,4(r19)
    9964:	883fa70e 	bge	r17,zero,9804 <_fread_r+0x5c>
    9968:	0023883a 	mov	r17,zero
    996c:	98000115 	stw	zero,4(r19)
    9970:	003fa406 	br	9804 <_fread_r+0x5c>
    9974:	8825883a 	mov	r18,r17
    9978:	003fca06 	br	98a4 <_fread_r+0xfc>
    997c:	99400017 	ldw	r5,0(r19)
    9980:	900d883a 	mov	r6,r18
    9984:	00039640 	call	3964 <memcpy>
    9988:	98c00117 	ldw	r3,4(r19)
    998c:	98800017 	ldw	r2,0(r19)
    9990:	1c87c83a 	sub	r3,r3,r18
    9994:	1485883a 	add	r2,r2,r18
    9998:	98800015 	stw	r2,0(r19)
    999c:	98c00115 	stw	r3,4(r19)
    99a0:	003fb106 	br	9868 <_fread_r+0xc0>

000099a4 <fread>:
    99a4:	00800074 	movhi	r2,1
    99a8:	109b9704 	addi	r2,r2,28252
    99ac:	2017883a 	mov	r11,r4
    99b0:	11000017 	ldw	r4,0(r2)
    99b4:	defffe04 	addi	sp,sp,-8
    99b8:	3013883a 	mov	r9,r6
    99bc:	2805883a 	mov	r2,r5
    99c0:	d9c00015 	stw	r7,0(sp)
    99c4:	580b883a 	mov	r5,r11
    99c8:	100d883a 	mov	r6,r2
    99cc:	480f883a 	mov	r7,r9
    99d0:	dfc00115 	stw	ra,4(sp)
    99d4:	00097a80 	call	97a8 <_fread_r>
    99d8:	dfc00117 	ldw	ra,4(sp)
    99dc:	dec00204 	addi	sp,sp,8
    99e0:	f800283a 	ret

000099e4 <_malloc_trim_r>:
    99e4:	defffb04 	addi	sp,sp,-20
    99e8:	dcc00315 	stw	r19,12(sp)
    99ec:	04c00074 	movhi	r19,1
    99f0:	9cd60504 	addi	r19,r19,22548
    99f4:	dc800215 	stw	r18,8(sp)
    99f8:	dc400115 	stw	r17,4(sp)
    99fc:	dc000015 	stw	r16,0(sp)
    9a00:	2823883a 	mov	r17,r5
    9a04:	2025883a 	mov	r18,r4
    9a08:	dfc00415 	stw	ra,16(sp)
    9a0c:	00122bc0 	call	122bc <__malloc_lock>
    9a10:	98800217 	ldw	r2,8(r19)
    9a14:	9009883a 	mov	r4,r18
    9a18:	000b883a 	mov	r5,zero
    9a1c:	10c00117 	ldw	r3,4(r2)
    9a20:	00bfff04 	movi	r2,-4
    9a24:	18a0703a 	and	r16,r3,r2
    9a28:	8463c83a 	sub	r17,r16,r17
    9a2c:	8c43fbc4 	addi	r17,r17,4079
    9a30:	8822d33a 	srli	r17,r17,12
    9a34:	0083ffc4 	movi	r2,4095
    9a38:	8c7fffc4 	addi	r17,r17,-1
    9a3c:	8822933a 	slli	r17,r17,12
    9a40:	1440060e 	bge	r2,r17,9a5c <_malloc_trim_r+0x78>
    9a44:	0003dcc0 	call	3dcc <_sbrk_r>
    9a48:	98c00217 	ldw	r3,8(r19)
    9a4c:	9009883a 	mov	r4,r18
    9a50:	044bc83a 	sub	r5,zero,r17
    9a54:	80c7883a 	add	r3,r16,r3
    9a58:	10c00926 	beq	r2,r3,9a80 <_malloc_trim_r+0x9c>
    9a5c:	00122dc0 	call	122dc <__malloc_unlock>
    9a60:	0005883a 	mov	r2,zero
    9a64:	dfc00417 	ldw	ra,16(sp)
    9a68:	dcc00317 	ldw	r19,12(sp)
    9a6c:	dc800217 	ldw	r18,8(sp)
    9a70:	dc400117 	ldw	r17,4(sp)
    9a74:	dc000017 	ldw	r16,0(sp)
    9a78:	dec00504 	addi	sp,sp,20
    9a7c:	f800283a 	ret
    9a80:	9009883a 	mov	r4,r18
    9a84:	0003dcc0 	call	3dcc <_sbrk_r>
    9a88:	844dc83a 	sub	r6,r16,r17
    9a8c:	00ffffc4 	movi	r3,-1
    9a90:	9009883a 	mov	r4,r18
    9a94:	000b883a 	mov	r5,zero
    9a98:	01c000b4 	movhi	r7,2
    9a9c:	39e2ac04 	addi	r7,r7,-30032
    9aa0:	31800054 	ori	r6,r6,1
    9aa4:	10c00926 	beq	r2,r3,9acc <_malloc_trim_r+0xe8>
    9aa8:	38800017 	ldw	r2,0(r7)
    9aac:	98c00217 	ldw	r3,8(r19)
    9ab0:	9009883a 	mov	r4,r18
    9ab4:	1445c83a 	sub	r2,r2,r17
    9ab8:	38800015 	stw	r2,0(r7)
    9abc:	19800115 	stw	r6,4(r3)
    9ac0:	00122dc0 	call	122dc <__malloc_unlock>
    9ac4:	00800044 	movi	r2,1
    9ac8:	003fe606 	br	9a64 <_malloc_trim_r+0x80>
    9acc:	0003dcc0 	call	3dcc <_sbrk_r>
    9ad0:	99800217 	ldw	r6,8(r19)
    9ad4:	100f883a 	mov	r7,r2
    9ad8:	9009883a 	mov	r4,r18
    9adc:	1187c83a 	sub	r3,r2,r6
    9ae0:	008003c4 	movi	r2,15
    9ae4:	19400054 	ori	r5,r3,1
    9ae8:	10ffdc0e 	bge	r2,r3,9a5c <_malloc_trim_r+0x78>
    9aec:	00800074 	movhi	r2,1
    9af0:	109b9a04 	addi	r2,r2,28264
    9af4:	10c00017 	ldw	r3,0(r2)
    9af8:	008000b4 	movhi	r2,2
    9afc:	10a2ac04 	addi	r2,r2,-30032
    9b00:	31400115 	stw	r5,4(r6)
    9b04:	38c7c83a 	sub	r3,r7,r3
    9b08:	10c00015 	stw	r3,0(r2)
    9b0c:	003fd306 	br	9a5c <_malloc_trim_r+0x78>

00009b10 <_free_r>:
    9b10:	defffd04 	addi	sp,sp,-12
    9b14:	dc400115 	stw	r17,4(sp)
    9b18:	dc000015 	stw	r16,0(sp)
    9b1c:	dfc00215 	stw	ra,8(sp)
    9b20:	2821883a 	mov	r16,r5
    9b24:	2023883a 	mov	r17,r4
    9b28:	28005a26 	beq	r5,zero,9c94 <_free_r+0x184>
    9b2c:	00122bc0 	call	122bc <__malloc_lock>
    9b30:	823ffe04 	addi	r8,r16,-8
    9b34:	41400117 	ldw	r5,4(r8)
    9b38:	00bfff84 	movi	r2,-2
    9b3c:	02800074 	movhi	r10,1
    9b40:	52960504 	addi	r10,r10,22548
    9b44:	288e703a 	and	r7,r5,r2
    9b48:	41cd883a 	add	r6,r8,r7
    9b4c:	30c00117 	ldw	r3,4(r6)
    9b50:	51000217 	ldw	r4,8(r10)
    9b54:	00bfff04 	movi	r2,-4
    9b58:	1892703a 	and	r9,r3,r2
    9b5c:	5017883a 	mov	r11,r10
    9b60:	31006726 	beq	r6,r4,9d00 <_free_r+0x1f0>
    9b64:	2880004c 	andi	r2,r5,1
    9b68:	1005003a 	cmpeq	r2,r2,zero
    9b6c:	32400115 	stw	r9,4(r6)
    9b70:	10001a1e 	bne	r2,zero,9bdc <_free_r+0xcc>
    9b74:	000b883a 	mov	r5,zero
    9b78:	3247883a 	add	r3,r6,r9
    9b7c:	18800117 	ldw	r2,4(r3)
    9b80:	1080004c 	andi	r2,r2,1
    9b84:	1000231e 	bne	r2,zero,9c14 <_free_r+0x104>
    9b88:	280ac03a 	cmpne	r5,r5,zero
    9b8c:	3a4f883a 	add	r7,r7,r9
    9b90:	2800451e 	bne	r5,zero,9ca8 <_free_r+0x198>
    9b94:	31000217 	ldw	r4,8(r6)
    9b98:	00800074 	movhi	r2,1
    9b9c:	10960704 	addi	r2,r2,22556
    9ba0:	20807b26 	beq	r4,r2,9d90 <_free_r+0x280>
    9ba4:	30800317 	ldw	r2,12(r6)
    9ba8:	3a07883a 	add	r3,r7,r8
    9bac:	19c00015 	stw	r7,0(r3)
    9bb0:	11000215 	stw	r4,8(r2)
    9bb4:	20800315 	stw	r2,12(r4)
    9bb8:	38800054 	ori	r2,r7,1
    9bbc:	40800115 	stw	r2,4(r8)
    9bc0:	28001a26 	beq	r5,zero,9c2c <_free_r+0x11c>
    9bc4:	8809883a 	mov	r4,r17
    9bc8:	dfc00217 	ldw	ra,8(sp)
    9bcc:	dc400117 	ldw	r17,4(sp)
    9bd0:	dc000017 	ldw	r16,0(sp)
    9bd4:	dec00304 	addi	sp,sp,12
    9bd8:	00122dc1 	jmpi	122dc <__malloc_unlock>
    9bdc:	80bffe17 	ldw	r2,-8(r16)
    9be0:	50c00204 	addi	r3,r10,8
    9be4:	4091c83a 	sub	r8,r8,r2
    9be8:	41000217 	ldw	r4,8(r8)
    9bec:	388f883a 	add	r7,r7,r2
    9bf0:	20c06126 	beq	r4,r3,9d78 <_free_r+0x268>
    9bf4:	40800317 	ldw	r2,12(r8)
    9bf8:	3247883a 	add	r3,r6,r9
    9bfc:	000b883a 	mov	r5,zero
    9c00:	11000215 	stw	r4,8(r2)
    9c04:	20800315 	stw	r2,12(r4)
    9c08:	18800117 	ldw	r2,4(r3)
    9c0c:	1080004c 	andi	r2,r2,1
    9c10:	103fdd26 	beq	r2,zero,9b88 <_free_r+0x78>
    9c14:	38800054 	ori	r2,r7,1
    9c18:	3a07883a 	add	r3,r7,r8
    9c1c:	280ac03a 	cmpne	r5,r5,zero
    9c20:	40800115 	stw	r2,4(r8)
    9c24:	19c00015 	stw	r7,0(r3)
    9c28:	283fe61e 	bne	r5,zero,9bc4 <_free_r+0xb4>
    9c2c:	00807fc4 	movi	r2,511
    9c30:	11c01f2e 	bgeu	r2,r7,9cb0 <_free_r+0x1a0>
    9c34:	3806d27a 	srli	r3,r7,9
    9c38:	1800481e 	bne	r3,zero,9d5c <_free_r+0x24c>
    9c3c:	3804d0fa 	srli	r2,r7,3
    9c40:	100690fa 	slli	r3,r2,3
    9c44:	1acd883a 	add	r6,r3,r11
    9c48:	31400217 	ldw	r5,8(r6)
    9c4c:	31405926 	beq	r6,r5,9db4 <_free_r+0x2a4>
    9c50:	28800117 	ldw	r2,4(r5)
    9c54:	00ffff04 	movi	r3,-4
    9c58:	10c4703a 	and	r2,r2,r3
    9c5c:	3880022e 	bgeu	r7,r2,9c68 <_free_r+0x158>
    9c60:	29400217 	ldw	r5,8(r5)
    9c64:	317ffa1e 	bne	r6,r5,9c50 <_free_r+0x140>
    9c68:	29800317 	ldw	r6,12(r5)
    9c6c:	41800315 	stw	r6,12(r8)
    9c70:	41400215 	stw	r5,8(r8)
    9c74:	8809883a 	mov	r4,r17
    9c78:	2a000315 	stw	r8,12(r5)
    9c7c:	32000215 	stw	r8,8(r6)
    9c80:	dfc00217 	ldw	ra,8(sp)
    9c84:	dc400117 	ldw	r17,4(sp)
    9c88:	dc000017 	ldw	r16,0(sp)
    9c8c:	dec00304 	addi	sp,sp,12
    9c90:	00122dc1 	jmpi	122dc <__malloc_unlock>
    9c94:	dfc00217 	ldw	ra,8(sp)
    9c98:	dc400117 	ldw	r17,4(sp)
    9c9c:	dc000017 	ldw	r16,0(sp)
    9ca0:	dec00304 	addi	sp,sp,12
    9ca4:	f800283a 	ret
    9ca8:	31000217 	ldw	r4,8(r6)
    9cac:	003fbd06 	br	9ba4 <_free_r+0x94>
    9cb0:	3806d0fa 	srli	r3,r7,3
    9cb4:	00800044 	movi	r2,1
    9cb8:	51400117 	ldw	r5,4(r10)
    9cbc:	180890fa 	slli	r4,r3,3
    9cc0:	1807d0ba 	srai	r3,r3,2
    9cc4:	22c9883a 	add	r4,r4,r11
    9cc8:	21800217 	ldw	r6,8(r4)
    9ccc:	10c4983a 	sll	r2,r2,r3
    9cd0:	41000315 	stw	r4,12(r8)
    9cd4:	41800215 	stw	r6,8(r8)
    9cd8:	288ab03a 	or	r5,r5,r2
    9cdc:	22000215 	stw	r8,8(r4)
    9ce0:	8809883a 	mov	r4,r17
    9ce4:	51400115 	stw	r5,4(r10)
    9ce8:	32000315 	stw	r8,12(r6)
    9cec:	dfc00217 	ldw	ra,8(sp)
    9cf0:	dc400117 	ldw	r17,4(sp)
    9cf4:	dc000017 	ldw	r16,0(sp)
    9cf8:	dec00304 	addi	sp,sp,12
    9cfc:	00122dc1 	jmpi	122dc <__malloc_unlock>
    9d00:	2880004c 	andi	r2,r5,1
    9d04:	3a4d883a 	add	r6,r7,r9
    9d08:	1000071e 	bne	r2,zero,9d28 <_free_r+0x218>
    9d0c:	80bffe17 	ldw	r2,-8(r16)
    9d10:	4091c83a 	sub	r8,r8,r2
    9d14:	41000317 	ldw	r4,12(r8)
    9d18:	40c00217 	ldw	r3,8(r8)
    9d1c:	308d883a 	add	r6,r6,r2
    9d20:	20c00215 	stw	r3,8(r4)
    9d24:	19000315 	stw	r4,12(r3)
    9d28:	00800074 	movhi	r2,1
    9d2c:	109b9904 	addi	r2,r2,28260
    9d30:	11000017 	ldw	r4,0(r2)
    9d34:	30c00054 	ori	r3,r6,1
    9d38:	52000215 	stw	r8,8(r10)
    9d3c:	40c00115 	stw	r3,4(r8)
    9d40:	313fa036 	bltu	r6,r4,9bc4 <_free_r+0xb4>
    9d44:	008000b4 	movhi	r2,2
    9d48:	10a26e04 	addi	r2,r2,-30280
    9d4c:	11400017 	ldw	r5,0(r2)
    9d50:	8809883a 	mov	r4,r17
    9d54:	00099e40 	call	99e4 <_malloc_trim_r>
    9d58:	003f9a06 	br	9bc4 <_free_r+0xb4>
    9d5c:	00800104 	movi	r2,4
    9d60:	10c0072e 	bgeu	r2,r3,9d80 <_free_r+0x270>
    9d64:	00800504 	movi	r2,20
    9d68:	10c01936 	bltu	r2,r3,9dd0 <_free_r+0x2c0>
    9d6c:	188016c4 	addi	r2,r3,91
    9d70:	100690fa 	slli	r3,r2,3
    9d74:	003fb306 	br	9c44 <_free_r+0x134>
    9d78:	01400044 	movi	r5,1
    9d7c:	003f7e06 	br	9b78 <_free_r+0x68>
    9d80:	3804d1ba 	srli	r2,r7,6
    9d84:	10800e04 	addi	r2,r2,56
    9d88:	100690fa 	slli	r3,r2,3
    9d8c:	003fad06 	br	9c44 <_free_r+0x134>
    9d90:	22000315 	stw	r8,12(r4)
    9d94:	22000215 	stw	r8,8(r4)
    9d98:	3a05883a 	add	r2,r7,r8
    9d9c:	38c00054 	ori	r3,r7,1
    9da0:	11c00015 	stw	r7,0(r2)
    9da4:	41000215 	stw	r4,8(r8)
    9da8:	40c00115 	stw	r3,4(r8)
    9dac:	41000315 	stw	r4,12(r8)
    9db0:	003f8406 	br	9bc4 <_free_r+0xb4>
    9db4:	1005d0ba 	srai	r2,r2,2
    9db8:	00c00044 	movi	r3,1
    9dbc:	51000117 	ldw	r4,4(r10)
    9dc0:	1886983a 	sll	r3,r3,r2
    9dc4:	20c8b03a 	or	r4,r4,r3
    9dc8:	51000115 	stw	r4,4(r10)
    9dcc:	003fa706 	br	9c6c <_free_r+0x15c>
    9dd0:	00801504 	movi	r2,84
    9dd4:	10c00436 	bltu	r2,r3,9de8 <_free_r+0x2d8>
    9dd8:	3804d33a 	srli	r2,r7,12
    9ddc:	10801b84 	addi	r2,r2,110
    9de0:	100690fa 	slli	r3,r2,3
    9de4:	003f9706 	br	9c44 <_free_r+0x134>
    9de8:	00805504 	movi	r2,340
    9dec:	10c00436 	bltu	r2,r3,9e00 <_free_r+0x2f0>
    9df0:	3804d3fa 	srli	r2,r7,15
    9df4:	10801dc4 	addi	r2,r2,119
    9df8:	100690fa 	slli	r3,r2,3
    9dfc:	003f9106 	br	9c44 <_free_r+0x134>
    9e00:	00815504 	movi	r2,1364
    9e04:	10c0032e 	bgeu	r2,r3,9e14 <_free_r+0x304>
    9e08:	00801f84 	movi	r2,126
    9e0c:	00c0fc04 	movi	r3,1008
    9e10:	003f8c06 	br	9c44 <_free_r+0x134>
    9e14:	3804d4ba 	srli	r2,r7,18
    9e18:	10801f04 	addi	r2,r2,124
    9e1c:	100690fa 	slli	r3,r2,3
    9e20:	003f8806 	br	9c44 <_free_r+0x134>

00009e24 <__sfvwrite_r>:
    9e24:	30800217 	ldw	r2,8(r6)
    9e28:	defff504 	addi	sp,sp,-44
    9e2c:	df000915 	stw	fp,36(sp)
    9e30:	dd800715 	stw	r22,28(sp)
    9e34:	dc800315 	stw	r18,12(sp)
    9e38:	dfc00a15 	stw	ra,40(sp)
    9e3c:	ddc00815 	stw	r23,32(sp)
    9e40:	dd400615 	stw	r21,24(sp)
    9e44:	dd000515 	stw	r20,20(sp)
    9e48:	dcc00415 	stw	r19,16(sp)
    9e4c:	dc400215 	stw	r17,8(sp)
    9e50:	dc000115 	stw	r16,4(sp)
    9e54:	302d883a 	mov	r22,r6
    9e58:	2039883a 	mov	fp,r4
    9e5c:	2825883a 	mov	r18,r5
    9e60:	10001c26 	beq	r2,zero,9ed4 <__sfvwrite_r+0xb0>
    9e64:	29c0030b 	ldhu	r7,12(r5)
    9e68:	3880020c 	andi	r2,r7,8
    9e6c:	10002726 	beq	r2,zero,9f0c <__sfvwrite_r+0xe8>
    9e70:	28800417 	ldw	r2,16(r5)
    9e74:	10002526 	beq	r2,zero,9f0c <__sfvwrite_r+0xe8>
    9e78:	3880008c 	andi	r2,r7,2
    9e7c:	b5400017 	ldw	r21,0(r22)
    9e80:	10002826 	beq	r2,zero,9f24 <__sfvwrite_r+0x100>
    9e84:	0021883a 	mov	r16,zero
    9e88:	0023883a 	mov	r17,zero
    9e8c:	880d883a 	mov	r6,r17
    9e90:	e009883a 	mov	r4,fp
    9e94:	00810004 	movi	r2,1024
    9e98:	80006e26 	beq	r16,zero,a054 <__sfvwrite_r+0x230>
    9e9c:	800f883a 	mov	r7,r16
    9ea0:	91400717 	ldw	r5,28(r18)
    9ea4:	1400012e 	bgeu	r2,r16,9eac <__sfvwrite_r+0x88>
    9ea8:	100f883a 	mov	r7,r2
    9eac:	90c00917 	ldw	r3,36(r18)
    9eb0:	183ee83a 	callr	r3
    9eb4:	1007883a 	mov	r3,r2
    9eb8:	80a1c83a 	sub	r16,r16,r2
    9ebc:	88a3883a 	add	r17,r17,r2
    9ec0:	00806d0e 	bge	zero,r2,a078 <__sfvwrite_r+0x254>
    9ec4:	b0800217 	ldw	r2,8(r22)
    9ec8:	10c5c83a 	sub	r2,r2,r3
    9ecc:	b0800215 	stw	r2,8(r22)
    9ed0:	103fee1e 	bne	r2,zero,9e8c <__sfvwrite_r+0x68>
    9ed4:	0009883a 	mov	r4,zero
    9ed8:	2005883a 	mov	r2,r4
    9edc:	dfc00a17 	ldw	ra,40(sp)
    9ee0:	df000917 	ldw	fp,36(sp)
    9ee4:	ddc00817 	ldw	r23,32(sp)
    9ee8:	dd800717 	ldw	r22,28(sp)
    9eec:	dd400617 	ldw	r21,24(sp)
    9ef0:	dd000517 	ldw	r20,20(sp)
    9ef4:	dcc00417 	ldw	r19,16(sp)
    9ef8:	dc800317 	ldw	r18,12(sp)
    9efc:	dc400217 	ldw	r17,8(sp)
    9f00:	dc000117 	ldw	r16,4(sp)
    9f04:	dec00b04 	addi	sp,sp,44
    9f08:	f800283a 	ret
    9f0c:	0007adc0 	call	7adc <__swsetup_r>
    9f10:	1000e41e 	bne	r2,zero,a2a4 <__sfvwrite_r+0x480>
    9f14:	91c0030b 	ldhu	r7,12(r18)
    9f18:	b5400017 	ldw	r21,0(r22)
    9f1c:	3880008c 	andi	r2,r7,2
    9f20:	103fd81e 	bne	r2,zero,9e84 <__sfvwrite_r+0x60>
    9f24:	3880004c 	andi	r2,r7,1
    9f28:	1005003a 	cmpeq	r2,r2,zero
    9f2c:	10005726 	beq	r2,zero,a08c <__sfvwrite_r+0x268>
    9f30:	0029883a 	mov	r20,zero
    9f34:	002f883a 	mov	r23,zero
    9f38:	a0004226 	beq	r20,zero,a044 <__sfvwrite_r+0x220>
    9f3c:	3880800c 	andi	r2,r7,512
    9f40:	94000217 	ldw	r16,8(r18)
    9f44:	10008b26 	beq	r2,zero,a174 <__sfvwrite_r+0x350>
    9f48:	800d883a 	mov	r6,r16
    9f4c:	a400a536 	bltu	r20,r16,a1e4 <__sfvwrite_r+0x3c0>
    9f50:	3881200c 	andi	r2,r7,1152
    9f54:	10002726 	beq	r2,zero,9ff4 <__sfvwrite_r+0x1d0>
    9f58:	90800517 	ldw	r2,20(r18)
    9f5c:	92000417 	ldw	r8,16(r18)
    9f60:	91400017 	ldw	r5,0(r18)
    9f64:	1087883a 	add	r3,r2,r2
    9f68:	1887883a 	add	r3,r3,r2
    9f6c:	1808d7fa 	srli	r4,r3,31
    9f70:	2a21c83a 	sub	r16,r5,r8
    9f74:	80800044 	addi	r2,r16,1
    9f78:	20c9883a 	add	r4,r4,r3
    9f7c:	2027d07a 	srai	r19,r4,1
    9f80:	a085883a 	add	r2,r20,r2
    9f84:	980d883a 	mov	r6,r19
    9f88:	9880022e 	bgeu	r19,r2,9f94 <__sfvwrite_r+0x170>
    9f8c:	1027883a 	mov	r19,r2
    9f90:	100d883a 	mov	r6,r2
    9f94:	3881000c 	andi	r2,r7,1024
    9f98:	1000b826 	beq	r2,zero,a27c <__sfvwrite_r+0x458>
    9f9c:	300b883a 	mov	r5,r6
    9fa0:	e009883a 	mov	r4,fp
    9fa4:	00031400 	call	3140 <_malloc_r>
    9fa8:	10003126 	beq	r2,zero,a070 <__sfvwrite_r+0x24c>
    9fac:	91400417 	ldw	r5,16(r18)
    9fb0:	1009883a 	mov	r4,r2
    9fb4:	800d883a 	mov	r6,r16
    9fb8:	1023883a 	mov	r17,r2
    9fbc:	00039640 	call	3964 <memcpy>
    9fc0:	90c0030b 	ldhu	r3,12(r18)
    9fc4:	00beffc4 	movi	r2,-1025
    9fc8:	1886703a 	and	r3,r3,r2
    9fcc:	18c02014 	ori	r3,r3,128
    9fd0:	90c0030d 	sth	r3,12(r18)
    9fd4:	9c07c83a 	sub	r3,r19,r16
    9fd8:	8c05883a 	add	r2,r17,r16
    9fdc:	a00d883a 	mov	r6,r20
    9fe0:	a021883a 	mov	r16,r20
    9fe4:	90800015 	stw	r2,0(r18)
    9fe8:	90c00215 	stw	r3,8(r18)
    9fec:	94400415 	stw	r17,16(r18)
    9ff0:	94c00515 	stw	r19,20(r18)
    9ff4:	91000017 	ldw	r4,0(r18)
    9ff8:	b80b883a 	mov	r5,r23
    9ffc:	a023883a 	mov	r17,r20
    a000:	000a6bc0 	call	a6bc <memmove>
    a004:	90c00217 	ldw	r3,8(r18)
    a008:	90800017 	ldw	r2,0(r18)
    a00c:	a027883a 	mov	r19,r20
    a010:	1c07c83a 	sub	r3,r3,r16
    a014:	1405883a 	add	r2,r2,r16
    a018:	90c00215 	stw	r3,8(r18)
    a01c:	a021883a 	mov	r16,r20
    a020:	90800015 	stw	r2,0(r18)
    a024:	b0800217 	ldw	r2,8(r22)
    a028:	1405c83a 	sub	r2,r2,r16
    a02c:	b0800215 	stw	r2,8(r22)
    a030:	103fa826 	beq	r2,zero,9ed4 <__sfvwrite_r+0xb0>
    a034:	a469c83a 	sub	r20,r20,r17
    a038:	91c0030b 	ldhu	r7,12(r18)
    a03c:	bcef883a 	add	r23,r23,r19
    a040:	a03fbe1e 	bne	r20,zero,9f3c <__sfvwrite_r+0x118>
    a044:	adc00017 	ldw	r23,0(r21)
    a048:	ad000117 	ldw	r20,4(r21)
    a04c:	ad400204 	addi	r21,r21,8
    a050:	003fb906 	br	9f38 <__sfvwrite_r+0x114>
    a054:	ac400017 	ldw	r17,0(r21)
    a058:	ac000117 	ldw	r16,4(r21)
    a05c:	ad400204 	addi	r21,r21,8
    a060:	003f8a06 	br	9e8c <__sfvwrite_r+0x68>
    a064:	91400417 	ldw	r5,16(r18)
    a068:	e009883a 	mov	r4,fp
    a06c:	0009b100 	call	9b10 <_free_r>
    a070:	00800304 	movi	r2,12
    a074:	e0800015 	stw	r2,0(fp)
    a078:	9080030b 	ldhu	r2,12(r18)
    a07c:	013fffc4 	movi	r4,-1
    a080:	10801014 	ori	r2,r2,64
    a084:	9080030d 	sth	r2,12(r18)
    a088:	003f9306 	br	9ed8 <__sfvwrite_r+0xb4>
    a08c:	0027883a 	mov	r19,zero
    a090:	002f883a 	mov	r23,zero
    a094:	d8000015 	stw	zero,0(sp)
    a098:	0029883a 	mov	r20,zero
    a09c:	98001e26 	beq	r19,zero,a118 <__sfvwrite_r+0x2f4>
    a0a0:	d8c00017 	ldw	r3,0(sp)
    a0a4:	1804c03a 	cmpne	r2,r3,zero
    a0a8:	10005e26 	beq	r2,zero,a224 <__sfvwrite_r+0x400>
    a0ac:	9821883a 	mov	r16,r19
    a0b0:	a4c0012e 	bgeu	r20,r19,a0b8 <__sfvwrite_r+0x294>
    a0b4:	a021883a 	mov	r16,r20
    a0b8:	91000017 	ldw	r4,0(r18)
    a0bc:	90800417 	ldw	r2,16(r18)
    a0c0:	91800217 	ldw	r6,8(r18)
    a0c4:	91c00517 	ldw	r7,20(r18)
    a0c8:	1100022e 	bgeu	r2,r4,a0d4 <__sfvwrite_r+0x2b0>
    a0cc:	31e3883a 	add	r17,r6,r7
    a0d0:	8c001616 	blt	r17,r16,a12c <__sfvwrite_r+0x308>
    a0d4:	81c03816 	blt	r16,r7,a1b8 <__sfvwrite_r+0x394>
    a0d8:	90c00917 	ldw	r3,36(r18)
    a0dc:	91400717 	ldw	r5,28(r18)
    a0e0:	e009883a 	mov	r4,fp
    a0e4:	b80d883a 	mov	r6,r23
    a0e8:	183ee83a 	callr	r3
    a0ec:	1023883a 	mov	r17,r2
    a0f0:	00bfe10e 	bge	zero,r2,a078 <__sfvwrite_r+0x254>
    a0f4:	a469c83a 	sub	r20,r20,r17
    a0f8:	a0001826 	beq	r20,zero,a15c <__sfvwrite_r+0x338>
    a0fc:	b0800217 	ldw	r2,8(r22)
    a100:	1445c83a 	sub	r2,r2,r17
    a104:	b0800215 	stw	r2,8(r22)
    a108:	103f7226 	beq	r2,zero,9ed4 <__sfvwrite_r+0xb0>
    a10c:	9c67c83a 	sub	r19,r19,r17
    a110:	bc6f883a 	add	r23,r23,r17
    a114:	983fe21e 	bne	r19,zero,a0a0 <__sfvwrite_r+0x27c>
    a118:	adc00017 	ldw	r23,0(r21)
    a11c:	acc00117 	ldw	r19,4(r21)
    a120:	ad400204 	addi	r21,r21,8
    a124:	d8000015 	stw	zero,0(sp)
    a128:	003fdc06 	br	a09c <__sfvwrite_r+0x278>
    a12c:	b80b883a 	mov	r5,r23
    a130:	880d883a 	mov	r6,r17
    a134:	000a6bc0 	call	a6bc <memmove>
    a138:	90c00017 	ldw	r3,0(r18)
    a13c:	e009883a 	mov	r4,fp
    a140:	900b883a 	mov	r5,r18
    a144:	1c47883a 	add	r3,r3,r17
    a148:	90c00015 	stw	r3,0(r18)
    a14c:	00095780 	call	9578 <_fflush_r>
    a150:	103fc91e 	bne	r2,zero,a078 <__sfvwrite_r+0x254>
    a154:	a469c83a 	sub	r20,r20,r17
    a158:	a03fe81e 	bne	r20,zero,a0fc <__sfvwrite_r+0x2d8>
    a15c:	e009883a 	mov	r4,fp
    a160:	900b883a 	mov	r5,r18
    a164:	00095780 	call	9578 <_fflush_r>
    a168:	103fc31e 	bne	r2,zero,a078 <__sfvwrite_r+0x254>
    a16c:	d8000015 	stw	zero,0(sp)
    a170:	003fe206 	br	a0fc <__sfvwrite_r+0x2d8>
    a174:	91000017 	ldw	r4,0(r18)
    a178:	90800417 	ldw	r2,16(r18)
    a17c:	1100022e 	bgeu	r2,r4,a188 <__sfvwrite_r+0x364>
    a180:	8023883a 	mov	r17,r16
    a184:	85003136 	bltu	r16,r20,a24c <__sfvwrite_r+0x428>
    a188:	91c00517 	ldw	r7,20(r18)
    a18c:	a1c01836 	bltu	r20,r7,a1f0 <__sfvwrite_r+0x3cc>
    a190:	90c00917 	ldw	r3,36(r18)
    a194:	91400717 	ldw	r5,28(r18)
    a198:	e009883a 	mov	r4,fp
    a19c:	b80d883a 	mov	r6,r23
    a1a0:	183ee83a 	callr	r3
    a1a4:	1021883a 	mov	r16,r2
    a1a8:	00bfb30e 	bge	zero,r2,a078 <__sfvwrite_r+0x254>
    a1ac:	1023883a 	mov	r17,r2
    a1b0:	1027883a 	mov	r19,r2
    a1b4:	003f9b06 	br	a024 <__sfvwrite_r+0x200>
    a1b8:	b80b883a 	mov	r5,r23
    a1bc:	800d883a 	mov	r6,r16
    a1c0:	000a6bc0 	call	a6bc <memmove>
    a1c4:	90c00217 	ldw	r3,8(r18)
    a1c8:	90800017 	ldw	r2,0(r18)
    a1cc:	8023883a 	mov	r17,r16
    a1d0:	1c07c83a 	sub	r3,r3,r16
    a1d4:	1405883a 	add	r2,r2,r16
    a1d8:	90c00215 	stw	r3,8(r18)
    a1dc:	90800015 	stw	r2,0(r18)
    a1e0:	003fc406 	br	a0f4 <__sfvwrite_r+0x2d0>
    a1e4:	a00d883a 	mov	r6,r20
    a1e8:	a021883a 	mov	r16,r20
    a1ec:	003f8106 	br	9ff4 <__sfvwrite_r+0x1d0>
    a1f0:	b80b883a 	mov	r5,r23
    a1f4:	a00d883a 	mov	r6,r20
    a1f8:	000a6bc0 	call	a6bc <memmove>
    a1fc:	90c00217 	ldw	r3,8(r18)
    a200:	90800017 	ldw	r2,0(r18)
    a204:	a021883a 	mov	r16,r20
    a208:	1d07c83a 	sub	r3,r3,r20
    a20c:	1505883a 	add	r2,r2,r20
    a210:	a023883a 	mov	r17,r20
    a214:	a027883a 	mov	r19,r20
    a218:	90c00215 	stw	r3,8(r18)
    a21c:	90800015 	stw	r2,0(r18)
    a220:	003f8006 	br	a024 <__sfvwrite_r+0x200>
    a224:	b809883a 	mov	r4,r23
    a228:	01400284 	movi	r5,10
    a22c:	980d883a 	mov	r6,r19
    a230:	00038800 	call	3880 <memchr>
    a234:	10001726 	beq	r2,zero,a294 <__sfvwrite_r+0x470>
    a238:	15c5c83a 	sub	r2,r2,r23
    a23c:	15000044 	addi	r20,r2,1
    a240:	00800044 	movi	r2,1
    a244:	d8800015 	stw	r2,0(sp)
    a248:	003f9806 	br	a0ac <__sfvwrite_r+0x288>
    a24c:	b80b883a 	mov	r5,r23
    a250:	800d883a 	mov	r6,r16
    a254:	000a6bc0 	call	a6bc <memmove>
    a258:	90c00017 	ldw	r3,0(r18)
    a25c:	e009883a 	mov	r4,fp
    a260:	900b883a 	mov	r5,r18
    a264:	1c07883a 	add	r3,r3,r16
    a268:	90c00015 	stw	r3,0(r18)
    a26c:	8027883a 	mov	r19,r16
    a270:	00095780 	call	9578 <_fflush_r>
    a274:	103f6b26 	beq	r2,zero,a024 <__sfvwrite_r+0x200>
    a278:	003f7f06 	br	a078 <__sfvwrite_r+0x254>
    a27c:	400b883a 	mov	r5,r8
    a280:	e009883a 	mov	r4,fp
    a284:	000b9f40 	call	b9f4 <_realloc_r>
    a288:	103f7626 	beq	r2,zero,a064 <__sfvwrite_r+0x240>
    a28c:	1023883a 	mov	r17,r2
    a290:	003f5006 	br	9fd4 <__sfvwrite_r+0x1b0>
    a294:	00c00044 	movi	r3,1
    a298:	9d000044 	addi	r20,r19,1
    a29c:	d8c00015 	stw	r3,0(sp)
    a2a0:	003f8206 	br	a0ac <__sfvwrite_r+0x288>
    a2a4:	9080030b 	ldhu	r2,12(r18)
    a2a8:	00c00244 	movi	r3,9
    a2ac:	013fffc4 	movi	r4,-1
    a2b0:	10801014 	ori	r2,r2,64
    a2b4:	9080030d 	sth	r2,12(r18)
    a2b8:	e0c00015 	stw	r3,0(fp)
    a2bc:	003f0606 	br	9ed8 <__sfvwrite_r+0xb4>

0000a2c0 <iswspace>:
    a2c0:	00803fc4 	movi	r2,255
    a2c4:	0007883a 	mov	r3,zero
    a2c8:	11000636 	bltu	r2,r4,a2e4 <iswspace+0x24>
    a2cc:	00800074 	movhi	r2,1
    a2d0:	109b9604 	addi	r2,r2,28248
    a2d4:	10c00017 	ldw	r3,0(r2)
    a2d8:	1907883a 	add	r3,r3,r4
    a2dc:	18800003 	ldbu	r2,0(r3)
    a2e0:	10c0020c 	andi	r3,r2,8
    a2e4:	1805883a 	mov	r2,r3
    a2e8:	f800283a 	ret

0000a2ec <__locale_charset>:
    a2ec:	d0a00617 	ldw	r2,-32744(gp)
    a2f0:	f800283a 	ret

0000a2f4 <_localeconv_r>:
    a2f4:	00800074 	movhi	r2,1
    a2f8:	10942e04 	addi	r2,r2,20664
    a2fc:	f800283a 	ret

0000a300 <localeconv>:
    a300:	00800074 	movhi	r2,1
    a304:	109b9704 	addi	r2,r2,28252
    a308:	11000017 	ldw	r4,0(r2)
    a30c:	000a2f41 	jmpi	a2f4 <_localeconv_r>

0000a310 <_setlocale_r>:
    a310:	defffc04 	addi	sp,sp,-16
    a314:	00c00074 	movhi	r3,1
    a318:	18d3fa04 	addi	r3,r3,20456
    a31c:	dc800215 	stw	r18,8(sp)
    a320:	dc400115 	stw	r17,4(sp)
    a324:	dc000015 	stw	r16,0(sp)
    a328:	2023883a 	mov	r17,r4
    a32c:	2825883a 	mov	r18,r5
    a330:	dfc00315 	stw	ra,12(sp)
    a334:	3021883a 	mov	r16,r6
    a338:	3009883a 	mov	r4,r6
    a33c:	180b883a 	mov	r5,r3
    a340:	30000926 	beq	r6,zero,a368 <_setlocale_r+0x58>
    a344:	00042000 	call	4200 <strcmp>
    a348:	8009883a 	mov	r4,r16
    a34c:	01400074 	movhi	r5,1
    a350:	29540b04 	addi	r5,r5,20524
    a354:	10000b1e 	bne	r2,zero,a384 <_setlocale_r+0x74>
    a358:	8c000d15 	stw	r16,52(r17)
    a35c:	8c800c15 	stw	r18,48(r17)
    a360:	00c00074 	movhi	r3,1
    a364:	18d3fa04 	addi	r3,r3,20456
    a368:	1805883a 	mov	r2,r3
    a36c:	dfc00317 	ldw	ra,12(sp)
    a370:	dc800217 	ldw	r18,8(sp)
    a374:	dc400117 	ldw	r17,4(sp)
    a378:	dc000017 	ldw	r16,0(sp)
    a37c:	dec00404 	addi	sp,sp,16
    a380:	f800283a 	ret
    a384:	00042000 	call	4200 <strcmp>
    a388:	0007883a 	mov	r3,zero
    a38c:	103ff226 	beq	r2,zero,a358 <_setlocale_r+0x48>
    a390:	003ff506 	br	a368 <_setlocale_r+0x58>

0000a394 <setlocale>:
    a394:	01800074 	movhi	r6,1
    a398:	319b9704 	addi	r6,r6,28252
    a39c:	2007883a 	mov	r3,r4
    a3a0:	31000017 	ldw	r4,0(r6)
    a3a4:	280d883a 	mov	r6,r5
    a3a8:	180b883a 	mov	r5,r3
    a3ac:	000a3101 	jmpi	a310 <_setlocale_r>

0000a3b0 <_lseek_r>:
    a3b0:	defffd04 	addi	sp,sp,-12
    a3b4:	dc000015 	stw	r16,0(sp)
    a3b8:	040000b4 	movhi	r16,2
    a3bc:	84227104 	addi	r16,r16,-30268
    a3c0:	dc400115 	stw	r17,4(sp)
    a3c4:	80000015 	stw	zero,0(r16)
    a3c8:	2023883a 	mov	r17,r4
    a3cc:	2809883a 	mov	r4,r5
    a3d0:	300b883a 	mov	r5,r6
    a3d4:	380d883a 	mov	r6,r7
    a3d8:	dfc00215 	stw	ra,8(sp)
    a3dc:	00121000 	call	12100 <lseek>
    a3e0:	1007883a 	mov	r3,r2
    a3e4:	00bfffc4 	movi	r2,-1
    a3e8:	18800626 	beq	r3,r2,a404 <_lseek_r+0x54>
    a3ec:	1805883a 	mov	r2,r3
    a3f0:	dfc00217 	ldw	ra,8(sp)
    a3f4:	dc400117 	ldw	r17,4(sp)
    a3f8:	dc000017 	ldw	r16,0(sp)
    a3fc:	dec00304 	addi	sp,sp,12
    a400:	f800283a 	ret
    a404:	80800017 	ldw	r2,0(r16)
    a408:	103ff826 	beq	r2,zero,a3ec <_lseek_r+0x3c>
    a40c:	88800015 	stw	r2,0(r17)
    a410:	1805883a 	mov	r2,r3
    a414:	dfc00217 	ldw	ra,8(sp)
    a418:	dc400117 	ldw	r17,4(sp)
    a41c:	dc000017 	ldw	r16,0(sp)
    a420:	dec00304 	addi	sp,sp,12
    a424:	f800283a 	ret

0000a428 <__smakebuf_r>:
    a428:	2880030b 	ldhu	r2,12(r5)
    a42c:	deffed04 	addi	sp,sp,-76
    a430:	dc401015 	stw	r17,64(sp)
    a434:	1080008c 	andi	r2,r2,2
    a438:	dc000f15 	stw	r16,60(sp)
    a43c:	dfc01215 	stw	ra,72(sp)
    a440:	dc801115 	stw	r18,68(sp)
    a444:	2821883a 	mov	r16,r5
    a448:	2023883a 	mov	r17,r4
    a44c:	10000b26 	beq	r2,zero,a47c <__smakebuf_r+0x54>
    a450:	28c010c4 	addi	r3,r5,67
    a454:	00800044 	movi	r2,1
    a458:	28800515 	stw	r2,20(r5)
    a45c:	28c00415 	stw	r3,16(r5)
    a460:	28c00015 	stw	r3,0(r5)
    a464:	dfc01217 	ldw	ra,72(sp)
    a468:	dc801117 	ldw	r18,68(sp)
    a46c:	dc401017 	ldw	r17,64(sp)
    a470:	dc000f17 	ldw	r16,60(sp)
    a474:	dec01304 	addi	sp,sp,76
    a478:	f800283a 	ret
    a47c:	2940038f 	ldh	r5,14(r5)
    a480:	28002116 	blt	r5,zero,a508 <__smakebuf_r+0xe0>
    a484:	d80d883a 	mov	r6,sp
    a488:	000e6e40 	call	e6e4 <_fstat_r>
    a48c:	10001e16 	blt	r2,zero,a508 <__smakebuf_r+0xe0>
    a490:	d8800117 	ldw	r2,4(sp)
    a494:	00e00014 	movui	r3,32768
    a498:	113c000c 	andi	r4,r2,61440
    a49c:	20c03126 	beq	r4,r3,a564 <__smakebuf_r+0x13c>
    a4a0:	8080030b 	ldhu	r2,12(r16)
    a4a4:	00c80004 	movi	r3,8192
    a4a8:	10820014 	ori	r2,r2,2048
    a4ac:	8080030d 	sth	r2,12(r16)
    a4b0:	20c01e26 	beq	r4,r3,a52c <__smakebuf_r+0x104>
    a4b4:	04810004 	movi	r18,1024
    a4b8:	8809883a 	mov	r4,r17
    a4bc:	900b883a 	mov	r5,r18
    a4c0:	00031400 	call	3140 <_malloc_r>
    a4c4:	1009883a 	mov	r4,r2
    a4c8:	10003126 	beq	r2,zero,a590 <__smakebuf_r+0x168>
    a4cc:	80c0030b 	ldhu	r3,12(r16)
    a4d0:	00800034 	movhi	r2,0
    a4d4:	108b9304 	addi	r2,r2,11852
    a4d8:	88800f15 	stw	r2,60(r17)
    a4dc:	18c02014 	ori	r3,r3,128
    a4e0:	84800515 	stw	r18,20(r16)
    a4e4:	80c0030d 	sth	r3,12(r16)
    a4e8:	81000415 	stw	r4,16(r16)
    a4ec:	81000015 	stw	r4,0(r16)
    a4f0:	dfc01217 	ldw	ra,72(sp)
    a4f4:	dc801117 	ldw	r18,68(sp)
    a4f8:	dc401017 	ldw	r17,64(sp)
    a4fc:	dc000f17 	ldw	r16,60(sp)
    a500:	dec01304 	addi	sp,sp,76
    a504:	f800283a 	ret
    a508:	80c0030b 	ldhu	r3,12(r16)
    a50c:	1880200c 	andi	r2,r3,128
    a510:	10000426 	beq	r2,zero,a524 <__smakebuf_r+0xfc>
    a514:	04801004 	movi	r18,64
    a518:	18820014 	ori	r2,r3,2048
    a51c:	8080030d 	sth	r2,12(r16)
    a520:	003fe506 	br	a4b8 <__smakebuf_r+0x90>
    a524:	04810004 	movi	r18,1024
    a528:	003ffb06 	br	a518 <__smakebuf_r+0xf0>
    a52c:	8140038f 	ldh	r5,14(r16)
    a530:	8809883a 	mov	r4,r17
    a534:	000f2e00 	call	f2e0 <_isatty_r>
    a538:	103fde26 	beq	r2,zero,a4b4 <__smakebuf_r+0x8c>
    a53c:	8080030b 	ldhu	r2,12(r16)
    a540:	80c010c4 	addi	r3,r16,67
    a544:	04810004 	movi	r18,1024
    a548:	10800054 	ori	r2,r2,1
    a54c:	8080030d 	sth	r2,12(r16)
    a550:	00800044 	movi	r2,1
    a554:	80c00415 	stw	r3,16(r16)
    a558:	80800515 	stw	r2,20(r16)
    a55c:	80c00015 	stw	r3,0(r16)
    a560:	003fd506 	br	a4b8 <__smakebuf_r+0x90>
    a564:	80c00a17 	ldw	r3,40(r16)
    a568:	00800034 	movhi	r2,0
    a56c:	10900b04 	addi	r2,r2,16428
    a570:	18bfcb1e 	bne	r3,r2,a4a0 <__smakebuf_r+0x78>
    a574:	8080030b 	ldhu	r2,12(r16)
    a578:	00c10004 	movi	r3,1024
    a57c:	1825883a 	mov	r18,r3
    a580:	10c4b03a 	or	r2,r2,r3
    a584:	8080030d 	sth	r2,12(r16)
    a588:	80c01315 	stw	r3,76(r16)
    a58c:	003fca06 	br	a4b8 <__smakebuf_r+0x90>
    a590:	8100030b 	ldhu	r4,12(r16)
    a594:	2080800c 	andi	r2,r4,512
    a598:	103fb21e 	bne	r2,zero,a464 <__smakebuf_r+0x3c>
    a59c:	80c010c4 	addi	r3,r16,67
    a5a0:	21000094 	ori	r4,r4,2
    a5a4:	00800044 	movi	r2,1
    a5a8:	80800515 	stw	r2,20(r16)
    a5ac:	8100030d 	sth	r4,12(r16)
    a5b0:	80c00415 	stw	r3,16(r16)
    a5b4:	80c00015 	stw	r3,0(r16)
    a5b8:	003faa06 	br	a464 <__smakebuf_r+0x3c>

0000a5bc <_mbrtowc_r>:
    a5bc:	defffc04 	addi	sp,sp,-16
    a5c0:	dc400215 	stw	r17,8(sp)
    a5c4:	dc000115 	stw	r16,4(sp)
    a5c8:	dfc00315 	stw	ra,12(sp)
    a5cc:	dc000417 	ldw	r16,16(sp)
    a5d0:	2023883a 	mov	r17,r4
    a5d4:	30000f26 	beq	r6,zero,a614 <_mbrtowc_r+0x58>
    a5d8:	dc000015 	stw	r16,0(sp)
    a5dc:	000a67c0 	call	a67c <_mbtowc_r>
    a5e0:	1007883a 	mov	r3,r2
    a5e4:	00bfffc4 	movi	r2,-1
    a5e8:	1809883a 	mov	r4,r3
    a5ec:	1880111e 	bne	r3,r2,a634 <_mbrtowc_r+0x78>
    a5f0:	80000015 	stw	zero,0(r16)
    a5f4:	00802284 	movi	r2,138
    a5f8:	88800015 	stw	r2,0(r17)
    a5fc:	2005883a 	mov	r2,r4
    a600:	dfc00317 	ldw	ra,12(sp)
    a604:	dc400217 	ldw	r17,8(sp)
    a608:	dc000117 	ldw	r16,4(sp)
    a60c:	dec00404 	addi	sp,sp,16
    a610:	f800283a 	ret
    a614:	000b883a 	mov	r5,zero
    a618:	01800074 	movhi	r6,1
    a61c:	31940b04 	addi	r6,r6,20524
    a620:	01c00044 	movi	r7,1
    a624:	dc000015 	stw	r16,0(sp)
    a628:	000a67c0 	call	a67c <_mbtowc_r>
    a62c:	1007883a 	mov	r3,r2
    a630:	003fec06 	br	a5e4 <_mbrtowc_r+0x28>
    a634:	1809883a 	mov	r4,r3
    a638:	003ff006 	br	a5fc <_mbrtowc_r+0x40>

0000a63c <mbrtowc>:
    a63c:	00800074 	movhi	r2,1
    a640:	109b9704 	addi	r2,r2,28252
    a644:	2017883a 	mov	r11,r4
    a648:	11000017 	ldw	r4,0(r2)
    a64c:	defffe04 	addi	sp,sp,-8
    a650:	3013883a 	mov	r9,r6
    a654:	2805883a 	mov	r2,r5
    a658:	d9c00015 	stw	r7,0(sp)
    a65c:	580b883a 	mov	r5,r11
    a660:	100d883a 	mov	r6,r2
    a664:	480f883a 	mov	r7,r9
    a668:	dfc00115 	stw	ra,4(sp)
    a66c:	000a5bc0 	call	a5bc <_mbrtowc_r>
    a670:	dfc00117 	ldw	ra,4(sp)
    a674:	dec00204 	addi	sp,sp,8
    a678:	f800283a 	ret

0000a67c <_mbtowc_r>:
    a67c:	deffff04 	addi	sp,sp,-4
    a680:	0005883a 	mov	r2,zero
    a684:	28000326 	beq	r5,zero,a694 <_mbtowc_r+0x18>
    a688:	3000041e 	bne	r6,zero,a69c <_mbtowc_r+0x20>
    a68c:	dec00104 	addi	sp,sp,4
    a690:	f800283a 	ret
    a694:	d80b883a 	mov	r5,sp
    a698:	303ffc26 	beq	r6,zero,a68c <_mbtowc_r+0x10>
    a69c:	00bfff84 	movi	r2,-2
    a6a0:	383ffa26 	beq	r7,zero,a68c <_mbtowc_r+0x10>
    a6a4:	30800003 	ldbu	r2,0(r6)
    a6a8:	28800015 	stw	r2,0(r5)
    a6ac:	30c00003 	ldbu	r3,0(r6)
    a6b0:	1804c03a 	cmpne	r2,r3,zero
    a6b4:	dec00104 	addi	sp,sp,4
    a6b8:	f800283a 	ret

0000a6bc <memmove>:
    a6bc:	2807883a 	mov	r3,r5
    a6c0:	2011883a 	mov	r8,r4
    a6c4:	29000c2e 	bgeu	r5,r4,a6f8 <memmove+0x3c>
    a6c8:	298f883a 	add	r7,r5,r6
    a6cc:	21c00a2e 	bgeu	r4,r7,a6f8 <memmove+0x3c>
    a6d0:	30000726 	beq	r6,zero,a6f0 <memmove+0x34>
    a6d4:	2187883a 	add	r3,r4,r6
    a6d8:	198dc83a 	sub	r6,r3,r6
    a6dc:	39ffffc4 	addi	r7,r7,-1
    a6e0:	38800003 	ldbu	r2,0(r7)
    a6e4:	18ffffc4 	addi	r3,r3,-1
    a6e8:	18800005 	stb	r2,0(r3)
    a6ec:	19bffb1e 	bne	r3,r6,a6dc <memmove+0x20>
    a6f0:	2005883a 	mov	r2,r4
    a6f4:	f800283a 	ret
    a6f8:	01c003c4 	movi	r7,15
    a6fc:	39800a36 	bltu	r7,r6,a728 <memmove+0x6c>
    a700:	303ffb26 	beq	r6,zero,a6f0 <memmove+0x34>
    a704:	400f883a 	mov	r7,r8
    a708:	320d883a 	add	r6,r6,r8
    a70c:	28800003 	ldbu	r2,0(r5)
    a710:	29400044 	addi	r5,r5,1
    a714:	38800005 	stb	r2,0(r7)
    a718:	39c00044 	addi	r7,r7,1
    a71c:	39bffb1e 	bne	r7,r6,a70c <memmove+0x50>
    a720:	2005883a 	mov	r2,r4
    a724:	f800283a 	ret
    a728:	1904b03a 	or	r2,r3,r4
    a72c:	108000cc 	andi	r2,r2,3
    a730:	103ff31e 	bne	r2,zero,a700 <memmove+0x44>
    a734:	3811883a 	mov	r8,r7
    a738:	180b883a 	mov	r5,r3
    a73c:	200f883a 	mov	r7,r4
    a740:	28c00017 	ldw	r3,0(r5)
    a744:	31bffc04 	addi	r6,r6,-16
    a748:	38c00015 	stw	r3,0(r7)
    a74c:	28800117 	ldw	r2,4(r5)
    a750:	38800115 	stw	r2,4(r7)
    a754:	28c00217 	ldw	r3,8(r5)
    a758:	38c00215 	stw	r3,8(r7)
    a75c:	28800317 	ldw	r2,12(r5)
    a760:	29400404 	addi	r5,r5,16
    a764:	38800315 	stw	r2,12(r7)
    a768:	39c00404 	addi	r7,r7,16
    a76c:	41bff436 	bltu	r8,r6,a740 <memmove+0x84>
    a770:	008000c4 	movi	r2,3
    a774:	1180072e 	bgeu	r2,r6,a794 <memmove+0xd8>
    a778:	1007883a 	mov	r3,r2
    a77c:	28800017 	ldw	r2,0(r5)
    a780:	31bfff04 	addi	r6,r6,-4
    a784:	29400104 	addi	r5,r5,4
    a788:	38800015 	stw	r2,0(r7)
    a78c:	39c00104 	addi	r7,r7,4
    a790:	19bffa36 	bltu	r3,r6,a77c <memmove+0xc0>
    a794:	3811883a 	mov	r8,r7
    a798:	003fd906 	br	a700 <memmove+0x44>

0000a79c <_Bfree>:
    a79c:	28000826 	beq	r5,zero,a7c0 <_Bfree+0x24>
    a7a0:	28800117 	ldw	r2,4(r5)
    a7a4:	21001317 	ldw	r4,76(r4)
    a7a8:	1085883a 	add	r2,r2,r2
    a7ac:	1085883a 	add	r2,r2,r2
    a7b0:	1105883a 	add	r2,r2,r4
    a7b4:	10c00017 	ldw	r3,0(r2)
    a7b8:	28c00015 	stw	r3,0(r5)
    a7bc:	11400015 	stw	r5,0(r2)
    a7c0:	f800283a 	ret

0000a7c4 <__hi0bits>:
    a7c4:	20bfffec 	andhi	r2,r4,65535
    a7c8:	10001426 	beq	r2,zero,a81c <__hi0bits+0x58>
    a7cc:	0007883a 	mov	r3,zero
    a7d0:	20bfc02c 	andhi	r2,r4,65280
    a7d4:	1000021e 	bne	r2,zero,a7e0 <__hi0bits+0x1c>
    a7d8:	2008923a 	slli	r4,r4,8
    a7dc:	18c00204 	addi	r3,r3,8
    a7e0:	20bc002c 	andhi	r2,r4,61440
    a7e4:	1000021e 	bne	r2,zero,a7f0 <__hi0bits+0x2c>
    a7e8:	2008913a 	slli	r4,r4,4
    a7ec:	18c00104 	addi	r3,r3,4
    a7f0:	20b0002c 	andhi	r2,r4,49152
    a7f4:	1000031e 	bne	r2,zero,a804 <__hi0bits+0x40>
    a7f8:	2105883a 	add	r2,r4,r4
    a7fc:	18c00084 	addi	r3,r3,2
    a800:	1089883a 	add	r4,r2,r2
    a804:	20000316 	blt	r4,zero,a814 <__hi0bits+0x50>
    a808:	2090002c 	andhi	r2,r4,16384
    a80c:	10000626 	beq	r2,zero,a828 <__hi0bits+0x64>
    a810:	18c00044 	addi	r3,r3,1
    a814:	1805883a 	mov	r2,r3
    a818:	f800283a 	ret
    a81c:	2008943a 	slli	r4,r4,16
    a820:	00c00404 	movi	r3,16
    a824:	003fea06 	br	a7d0 <__hi0bits+0xc>
    a828:	00c00804 	movi	r3,32
    a82c:	1805883a 	mov	r2,r3
    a830:	f800283a 	ret

0000a834 <__lo0bits>:
    a834:	20c00017 	ldw	r3,0(r4)
    a838:	188001cc 	andi	r2,r3,7
    a83c:	10000a26 	beq	r2,zero,a868 <__lo0bits+0x34>
    a840:	1880004c 	andi	r2,r3,1
    a844:	1005003a 	cmpeq	r2,r2,zero
    a848:	10002126 	beq	r2,zero,a8d0 <__lo0bits+0x9c>
    a84c:	1880008c 	andi	r2,r3,2
    a850:	1000251e 	bne	r2,zero,a8e8 <__lo0bits+0xb4>
    a854:	1804d0ba 	srli	r2,r3,2
    a858:	01400084 	movi	r5,2
    a85c:	20800015 	stw	r2,0(r4)
    a860:	2805883a 	mov	r2,r5
    a864:	f800283a 	ret
    a868:	18bfffcc 	andi	r2,r3,65535
    a86c:	10001526 	beq	r2,zero,a8c4 <__lo0bits+0x90>
    a870:	000b883a 	mov	r5,zero
    a874:	18803fcc 	andi	r2,r3,255
    a878:	1000021e 	bne	r2,zero,a884 <__lo0bits+0x50>
    a87c:	1806d23a 	srli	r3,r3,8
    a880:	29400204 	addi	r5,r5,8
    a884:	188003cc 	andi	r2,r3,15
    a888:	1000021e 	bne	r2,zero,a894 <__lo0bits+0x60>
    a88c:	1806d13a 	srli	r3,r3,4
    a890:	29400104 	addi	r5,r5,4
    a894:	188000cc 	andi	r2,r3,3
    a898:	1000021e 	bne	r2,zero,a8a4 <__lo0bits+0x70>
    a89c:	1806d0ba 	srli	r3,r3,2
    a8a0:	29400084 	addi	r5,r5,2
    a8a4:	1880004c 	andi	r2,r3,1
    a8a8:	1000031e 	bne	r2,zero,a8b8 <__lo0bits+0x84>
    a8ac:	1806d07a 	srli	r3,r3,1
    a8b0:	18000a26 	beq	r3,zero,a8dc <__lo0bits+0xa8>
    a8b4:	29400044 	addi	r5,r5,1
    a8b8:	2805883a 	mov	r2,r5
    a8bc:	20c00015 	stw	r3,0(r4)
    a8c0:	f800283a 	ret
    a8c4:	1806d43a 	srli	r3,r3,16
    a8c8:	01400404 	movi	r5,16
    a8cc:	003fe906 	br	a874 <__lo0bits+0x40>
    a8d0:	000b883a 	mov	r5,zero
    a8d4:	2805883a 	mov	r2,r5
    a8d8:	f800283a 	ret
    a8dc:	01400804 	movi	r5,32
    a8e0:	2805883a 	mov	r2,r5
    a8e4:	f800283a 	ret
    a8e8:	1804d07a 	srli	r2,r3,1
    a8ec:	01400044 	movi	r5,1
    a8f0:	20800015 	stw	r2,0(r4)
    a8f4:	003fda06 	br	a860 <__lo0bits+0x2c>

0000a8f8 <__mcmp>:
    a8f8:	20800417 	ldw	r2,16(r4)
    a8fc:	28c00417 	ldw	r3,16(r5)
    a900:	10cfc83a 	sub	r7,r2,r3
    a904:	38000c1e 	bne	r7,zero,a938 <__mcmp+0x40>
    a908:	18c5883a 	add	r2,r3,r3
    a90c:	1085883a 	add	r2,r2,r2
    a910:	10c00504 	addi	r3,r2,20
    a914:	21000504 	addi	r4,r4,20
    a918:	28cb883a 	add	r5,r5,r3
    a91c:	2085883a 	add	r2,r4,r2
    a920:	10bfff04 	addi	r2,r2,-4
    a924:	297fff04 	addi	r5,r5,-4
    a928:	11800017 	ldw	r6,0(r2)
    a92c:	28c00017 	ldw	r3,0(r5)
    a930:	30c0031e 	bne	r6,r3,a940 <__mcmp+0x48>
    a934:	20bffa36 	bltu	r4,r2,a920 <__mcmp+0x28>
    a938:	3805883a 	mov	r2,r7
    a93c:	f800283a 	ret
    a940:	30c00336 	bltu	r6,r3,a950 <__mcmp+0x58>
    a944:	01c00044 	movi	r7,1
    a948:	3805883a 	mov	r2,r7
    a94c:	f800283a 	ret
    a950:	01ffffc4 	movi	r7,-1
    a954:	003ff806 	br	a938 <__mcmp+0x40>

0000a958 <__ulp>:
    a958:	295ffc2c 	andhi	r5,r5,32752
    a95c:	013f3034 	movhi	r4,64704
    a960:	290b883a 	add	r5,r5,r4
    a964:	0145c83a 	sub	r2,zero,r5
    a968:	1007d53a 	srai	r3,r2,20
    a96c:	000d883a 	mov	r6,zero
    a970:	0140040e 	bge	zero,r5,a984 <__ulp+0x2c>
    a974:	280f883a 	mov	r7,r5
    a978:	3807883a 	mov	r3,r7
    a97c:	3005883a 	mov	r2,r6
    a980:	f800283a 	ret
    a984:	008004c4 	movi	r2,19
    a988:	193ffb04 	addi	r4,r3,-20
    a98c:	10c00c0e 	bge	r2,r3,a9c0 <__ulp+0x68>
    a990:	008007c4 	movi	r2,31
    a994:	1107c83a 	sub	r3,r2,r4
    a998:	00800784 	movi	r2,30
    a99c:	01400044 	movi	r5,1
    a9a0:	11000216 	blt	r2,r4,a9ac <__ulp+0x54>
    a9a4:	00800044 	movi	r2,1
    a9a8:	10ca983a 	sll	r5,r2,r3
    a9ac:	000f883a 	mov	r7,zero
    a9b0:	280d883a 	mov	r6,r5
    a9b4:	3807883a 	mov	r3,r7
    a9b8:	3005883a 	mov	r2,r6
    a9bc:	f800283a 	ret
    a9c0:	00800234 	movhi	r2,8
    a9c4:	10cfd83a 	sra	r7,r2,r3
    a9c8:	000d883a 	mov	r6,zero
    a9cc:	3005883a 	mov	r2,r6
    a9d0:	3807883a 	mov	r3,r7
    a9d4:	f800283a 	ret

0000a9d8 <__b2d>:
    a9d8:	20800417 	ldw	r2,16(r4)
    a9dc:	defff904 	addi	sp,sp,-28
    a9e0:	dd000415 	stw	r20,16(sp)
    a9e4:	1085883a 	add	r2,r2,r2
    a9e8:	25000504 	addi	r20,r4,20
    a9ec:	1085883a 	add	r2,r2,r2
    a9f0:	dc000015 	stw	r16,0(sp)
    a9f4:	a0a1883a 	add	r16,r20,r2
    a9f8:	dd400515 	stw	r21,20(sp)
    a9fc:	857fff17 	ldw	r21,-4(r16)
    aa00:	dc400115 	stw	r17,4(sp)
    aa04:	dfc00615 	stw	ra,24(sp)
    aa08:	a809883a 	mov	r4,r21
    aa0c:	2823883a 	mov	r17,r5
    aa10:	dcc00315 	stw	r19,12(sp)
    aa14:	dc800215 	stw	r18,8(sp)
    aa18:	000a7c40 	call	a7c4 <__hi0bits>
    aa1c:	100b883a 	mov	r5,r2
    aa20:	00800804 	movi	r2,32
    aa24:	1145c83a 	sub	r2,r2,r5
    aa28:	88800015 	stw	r2,0(r17)
    aa2c:	00800284 	movi	r2,10
    aa30:	80ffff04 	addi	r3,r16,-4
    aa34:	11401416 	blt	r2,r5,aa88 <__b2d+0xb0>
    aa38:	008002c4 	movi	r2,11
    aa3c:	1149c83a 	sub	r4,r2,r5
    aa40:	a0c02736 	bltu	r20,r3,aae0 <__b2d+0x108>
    aa44:	000d883a 	mov	r6,zero
    aa48:	28800544 	addi	r2,r5,21
    aa4c:	a906d83a 	srl	r3,r21,r4
    aa50:	a884983a 	sll	r2,r21,r2
    aa54:	1ccffc34 	orhi	r19,r3,16368
    aa58:	11a4b03a 	or	r18,r2,r6
    aa5c:	9005883a 	mov	r2,r18
    aa60:	9807883a 	mov	r3,r19
    aa64:	dfc00617 	ldw	ra,24(sp)
    aa68:	dd400517 	ldw	r21,20(sp)
    aa6c:	dd000417 	ldw	r20,16(sp)
    aa70:	dcc00317 	ldw	r19,12(sp)
    aa74:	dc800217 	ldw	r18,8(sp)
    aa78:	dc400117 	ldw	r17,4(sp)
    aa7c:	dc000017 	ldw	r16,0(sp)
    aa80:	dec00704 	addi	sp,sp,28
    aa84:	f800283a 	ret
    aa88:	a0c00e36 	bltu	r20,r3,aac4 <__b2d+0xec>
    aa8c:	293ffd44 	addi	r4,r5,-11
    aa90:	000d883a 	mov	r6,zero
    aa94:	20000f26 	beq	r4,zero,aad4 <__b2d+0xfc>
    aa98:	00800804 	movi	r2,32
    aa9c:	110bc83a 	sub	r5,r2,r4
    aaa0:	a0c01236 	bltu	r20,r3,aaec <__b2d+0x114>
    aaa4:	000f883a 	mov	r7,zero
    aaa8:	a904983a 	sll	r2,r21,r4
    aaac:	3146d83a 	srl	r3,r6,r5
    aab0:	3108983a 	sll	r4,r6,r4
    aab4:	108ffc34 	orhi	r2,r2,16368
    aab8:	18a6b03a 	or	r19,r3,r2
    aabc:	3924b03a 	or	r18,r7,r4
    aac0:	003fe606 	br	aa5c <__b2d+0x84>
    aac4:	293ffd44 	addi	r4,r5,-11
    aac8:	81bffe17 	ldw	r6,-8(r16)
    aacc:	80fffe04 	addi	r3,r16,-8
    aad0:	203ff11e 	bne	r4,zero,aa98 <__b2d+0xc0>
    aad4:	accffc34 	orhi	r19,r21,16368
    aad8:	3025883a 	mov	r18,r6
    aadc:	003fdf06 	br	aa5c <__b2d+0x84>
    aae0:	18bfff17 	ldw	r2,-4(r3)
    aae4:	110cd83a 	srl	r6,r2,r4
    aae8:	003fd706 	br	aa48 <__b2d+0x70>
    aaec:	18bfff17 	ldw	r2,-4(r3)
    aaf0:	114ed83a 	srl	r7,r2,r5
    aaf4:	003fec06 	br	aaa8 <__b2d+0xd0>

0000aaf8 <__ratio>:
    aaf8:	defff904 	addi	sp,sp,-28
    aafc:	dc400215 	stw	r17,8(sp)
    ab00:	2823883a 	mov	r17,r5
    ab04:	d80b883a 	mov	r5,sp
    ab08:	dfc00615 	stw	ra,24(sp)
    ab0c:	dd000515 	stw	r20,20(sp)
    ab10:	dcc00415 	stw	r19,16(sp)
    ab14:	dc800315 	stw	r18,12(sp)
    ab18:	2025883a 	mov	r18,r4
    ab1c:	000a9d80 	call	a9d8 <__b2d>
    ab20:	8809883a 	mov	r4,r17
    ab24:	d9400104 	addi	r5,sp,4
    ab28:	1027883a 	mov	r19,r2
    ab2c:	1829883a 	mov	r20,r3
    ab30:	000a9d80 	call	a9d8 <__b2d>
    ab34:	89000417 	ldw	r4,16(r17)
    ab38:	91c00417 	ldw	r7,16(r18)
    ab3c:	d9800117 	ldw	r6,4(sp)
    ab40:	180b883a 	mov	r5,r3
    ab44:	390fc83a 	sub	r7,r7,r4
    ab48:	1009883a 	mov	r4,r2
    ab4c:	d8800017 	ldw	r2,0(sp)
    ab50:	380e917a 	slli	r7,r7,5
    ab54:	2011883a 	mov	r8,r4
    ab58:	1185c83a 	sub	r2,r2,r6
    ab5c:	11c5883a 	add	r2,r2,r7
    ab60:	1006953a 	slli	r3,r2,20
    ab64:	2813883a 	mov	r9,r5
    ab68:	00800d0e 	bge	zero,r2,aba0 <__ratio+0xa8>
    ab6c:	1d29883a 	add	r20,r3,r20
    ab70:	a00b883a 	mov	r5,r20
    ab74:	480f883a 	mov	r7,r9
    ab78:	9809883a 	mov	r4,r19
    ab7c:	400d883a 	mov	r6,r8
    ab80:	0010a480 	call	10a48 <__divdf3>
    ab84:	dfc00617 	ldw	ra,24(sp)
    ab88:	dd000517 	ldw	r20,20(sp)
    ab8c:	dcc00417 	ldw	r19,16(sp)
    ab90:	dc800317 	ldw	r18,12(sp)
    ab94:	dc400217 	ldw	r17,8(sp)
    ab98:	dec00704 	addi	sp,sp,28
    ab9c:	f800283a 	ret
    aba0:	28d3c83a 	sub	r9,r5,r3
    aba4:	003ff206 	br	ab70 <__ratio+0x78>

0000aba8 <_mprec_log10>:
    aba8:	defffe04 	addi	sp,sp,-8
    abac:	008005c4 	movi	r2,23
    abb0:	dc000015 	stw	r16,0(sp)
    abb4:	dfc00115 	stw	ra,4(sp)
    abb8:	2021883a 	mov	r16,r4
    abbc:	11000c16 	blt	r2,r4,abf0 <_mprec_log10+0x48>
    abc0:	200490fa 	slli	r2,r4,3
    abc4:	00c00074 	movhi	r3,1
    abc8:	18d43a04 	addi	r3,r3,20712
    abcc:	10c5883a 	add	r2,r2,r3
    abd0:	12400117 	ldw	r9,4(r2)
    abd4:	12000017 	ldw	r8,0(r2)
    abd8:	4807883a 	mov	r3,r9
    abdc:	4005883a 	mov	r2,r8
    abe0:	dfc00117 	ldw	ra,4(sp)
    abe4:	dc000017 	ldw	r16,0(sp)
    abe8:	dec00204 	addi	sp,sp,8
    abec:	f800283a 	ret
    abf0:	0011883a 	mov	r8,zero
    abf4:	024ffc34 	movhi	r9,16368
    abf8:	0005883a 	mov	r2,zero
    abfc:	00d00934 	movhi	r3,16420
    ac00:	480b883a 	mov	r5,r9
    ac04:	4009883a 	mov	r4,r8
    ac08:	180f883a 	mov	r7,r3
    ac0c:	100d883a 	mov	r6,r2
    ac10:	00106840 	call	10684 <__muldf3>
    ac14:	843fffc4 	addi	r16,r16,-1
    ac18:	1011883a 	mov	r8,r2
    ac1c:	1813883a 	mov	r9,r3
    ac20:	803ff51e 	bne	r16,zero,abf8 <_mprec_log10+0x50>
    ac24:	4005883a 	mov	r2,r8
    ac28:	4807883a 	mov	r3,r9
    ac2c:	dfc00117 	ldw	ra,4(sp)
    ac30:	dc000017 	ldw	r16,0(sp)
    ac34:	dec00204 	addi	sp,sp,8
    ac38:	f800283a 	ret

0000ac3c <__copybits>:
    ac3c:	297fffc4 	addi	r5,r5,-1
    ac40:	30800417 	ldw	r2,16(r6)
    ac44:	280bd17a 	srai	r5,r5,5
    ac48:	31800504 	addi	r6,r6,20
    ac4c:	1085883a 	add	r2,r2,r2
    ac50:	294b883a 	add	r5,r5,r5
    ac54:	294b883a 	add	r5,r5,r5
    ac58:	1085883a 	add	r2,r2,r2
    ac5c:	290b883a 	add	r5,r5,r4
    ac60:	3087883a 	add	r3,r6,r2
    ac64:	29400104 	addi	r5,r5,4
    ac68:	30c0052e 	bgeu	r6,r3,ac80 <__copybits+0x44>
    ac6c:	30800017 	ldw	r2,0(r6)
    ac70:	31800104 	addi	r6,r6,4
    ac74:	20800015 	stw	r2,0(r4)
    ac78:	21000104 	addi	r4,r4,4
    ac7c:	30fffb36 	bltu	r6,r3,ac6c <__copybits+0x30>
    ac80:	2140032e 	bgeu	r4,r5,ac90 <__copybits+0x54>
    ac84:	20000015 	stw	zero,0(r4)
    ac88:	21000104 	addi	r4,r4,4
    ac8c:	217ffd36 	bltu	r4,r5,ac84 <__copybits+0x48>
    ac90:	f800283a 	ret

0000ac94 <__any_on>:
    ac94:	20800417 	ldw	r2,16(r4)
    ac98:	2807d17a 	srai	r3,r5,5
    ac9c:	21000504 	addi	r4,r4,20
    aca0:	10c00d0e 	bge	r2,r3,acd8 <__any_on+0x44>
    aca4:	1085883a 	add	r2,r2,r2
    aca8:	1085883a 	add	r2,r2,r2
    acac:	208d883a 	add	r6,r4,r2
    acb0:	2180182e 	bgeu	r4,r6,ad14 <__any_on+0x80>
    acb4:	30bfff17 	ldw	r2,-4(r6)
    acb8:	30ffff04 	addi	r3,r6,-4
    acbc:	1000041e 	bne	r2,zero,acd0 <__any_on+0x3c>
    acc0:	20c0142e 	bgeu	r4,r3,ad14 <__any_on+0x80>
    acc4:	18ffff04 	addi	r3,r3,-4
    acc8:	18800017 	ldw	r2,0(r3)
    accc:	103ffc26 	beq	r2,zero,acc0 <__any_on+0x2c>
    acd0:	00800044 	movi	r2,1
    acd4:	f800283a 	ret
    acd8:	18800a0e 	bge	r3,r2,ad04 <__any_on+0x70>
    acdc:	294007cc 	andi	r5,r5,31
    ace0:	28000826 	beq	r5,zero,ad04 <__any_on+0x70>
    ace4:	18c5883a 	add	r2,r3,r3
    ace8:	1085883a 	add	r2,r2,r2
    acec:	208d883a 	add	r6,r4,r2
    acf0:	30c00017 	ldw	r3,0(r6)
    acf4:	1944d83a 	srl	r2,r3,r5
    acf8:	1144983a 	sll	r2,r2,r5
    acfc:	18bff41e 	bne	r3,r2,acd0 <__any_on+0x3c>
    ad00:	003feb06 	br	acb0 <__any_on+0x1c>
    ad04:	18c5883a 	add	r2,r3,r3
    ad08:	1085883a 	add	r2,r2,r2
    ad0c:	208d883a 	add	r6,r4,r2
    ad10:	003fe706 	br	acb0 <__any_on+0x1c>
    ad14:	0005883a 	mov	r2,zero
    ad18:	f800283a 	ret

0000ad1c <_Balloc>:
    ad1c:	20c01317 	ldw	r3,76(r4)
    ad20:	defffb04 	addi	sp,sp,-20
    ad24:	dcc00315 	stw	r19,12(sp)
    ad28:	dc800215 	stw	r18,8(sp)
    ad2c:	dfc00415 	stw	ra,16(sp)
    ad30:	2825883a 	mov	r18,r5
    ad34:	dc400115 	stw	r17,4(sp)
    ad38:	dc000015 	stw	r16,0(sp)
    ad3c:	2027883a 	mov	r19,r4
    ad40:	01800404 	movi	r6,16
    ad44:	01400104 	movi	r5,4
    ad48:	18001726 	beq	r3,zero,ada8 <_Balloc+0x8c>
    ad4c:	01400044 	movi	r5,1
    ad50:	9485883a 	add	r2,r18,r18
    ad54:	2ca2983a 	sll	r17,r5,r18
    ad58:	1085883a 	add	r2,r2,r2
    ad5c:	10c7883a 	add	r3,r2,r3
    ad60:	1c000017 	ldw	r16,0(r3)
    ad64:	8c4d883a 	add	r6,r17,r17
    ad68:	318d883a 	add	r6,r6,r6
    ad6c:	9809883a 	mov	r4,r19
    ad70:	31800504 	addi	r6,r6,20
    ad74:	80001226 	beq	r16,zero,adc0 <_Balloc+0xa4>
    ad78:	80800017 	ldw	r2,0(r16)
    ad7c:	18800015 	stw	r2,0(r3)
    ad80:	80000415 	stw	zero,16(r16)
    ad84:	80000315 	stw	zero,12(r16)
    ad88:	8005883a 	mov	r2,r16
    ad8c:	dfc00417 	ldw	ra,16(sp)
    ad90:	dcc00317 	ldw	r19,12(sp)
    ad94:	dc800217 	ldw	r18,8(sp)
    ad98:	dc400117 	ldw	r17,4(sp)
    ad9c:	dc000017 	ldw	r16,0(sp)
    ada0:	dec00504 	addi	sp,sp,20
    ada4:	f800283a 	ret
    ada8:	000e6300 	call	e630 <_calloc_r>
    adac:	1007883a 	mov	r3,r2
    adb0:	0021883a 	mov	r16,zero
    adb4:	98801315 	stw	r2,76(r19)
    adb8:	103fe41e 	bne	r2,zero,ad4c <_Balloc+0x30>
    adbc:	003ff206 	br	ad88 <_Balloc+0x6c>
    adc0:	000e6300 	call	e630 <_calloc_r>
    adc4:	103ff026 	beq	r2,zero,ad88 <_Balloc+0x6c>
    adc8:	1021883a 	mov	r16,r2
    adcc:	14800115 	stw	r18,4(r2)
    add0:	14400215 	stw	r17,8(r2)
    add4:	003fea06 	br	ad80 <_Balloc+0x64>

0000add8 <__d2b>:
    add8:	defff504 	addi	sp,sp,-44
    addc:	dcc00515 	stw	r19,20(sp)
    ade0:	04c00044 	movi	r19,1
    ade4:	dc000215 	stw	r16,8(sp)
    ade8:	2821883a 	mov	r16,r5
    adec:	980b883a 	mov	r5,r19
    adf0:	ddc00915 	stw	r23,36(sp)
    adf4:	dd800815 	stw	r22,32(sp)
    adf8:	dd400715 	stw	r21,28(sp)
    adfc:	dd000615 	stw	r20,24(sp)
    ae00:	dc800415 	stw	r18,16(sp)
    ae04:	dc400315 	stw	r17,12(sp)
    ae08:	dfc00a15 	stw	ra,40(sp)
    ae0c:	3023883a 	mov	r17,r6
    ae10:	382d883a 	mov	r22,r7
    ae14:	ddc00b17 	ldw	r23,44(sp)
    ae18:	000ad1c0 	call	ad1c <_Balloc>
    ae1c:	1025883a 	mov	r18,r2
    ae20:	00a00034 	movhi	r2,32768
    ae24:	10bfffc4 	addi	r2,r2,-1
    ae28:	8888703a 	and	r4,r17,r2
    ae2c:	202ad53a 	srli	r21,r4,20
    ae30:	00800434 	movhi	r2,16
    ae34:	10bfffc4 	addi	r2,r2,-1
    ae38:	8886703a 	and	r3,r17,r2
    ae3c:	a829003a 	cmpeq	r20,r21,zero
    ae40:	800b883a 	mov	r5,r16
    ae44:	d8c00115 	stw	r3,4(sp)
    ae48:	94000504 	addi	r16,r18,20
    ae4c:	a000021e 	bne	r20,zero,ae58 <__d2b+0x80>
    ae50:	18c00434 	orhi	r3,r3,16
    ae54:	d8c00115 	stw	r3,4(sp)
    ae58:	28002726 	beq	r5,zero,aef8 <__d2b+0x120>
    ae5c:	d809883a 	mov	r4,sp
    ae60:	d9400015 	stw	r5,0(sp)
    ae64:	000a8340 	call	a834 <__lo0bits>
    ae68:	100d883a 	mov	r6,r2
    ae6c:	10003526 	beq	r2,zero,af44 <__d2b+0x16c>
    ae70:	d8c00117 	ldw	r3,4(sp)
    ae74:	00800804 	movi	r2,32
    ae78:	1185c83a 	sub	r2,r2,r6
    ae7c:	d9000017 	ldw	r4,0(sp)
    ae80:	1886983a 	sll	r3,r3,r2
    ae84:	1906b03a 	or	r3,r3,r4
    ae88:	90c00515 	stw	r3,20(r18)
    ae8c:	d8c00117 	ldw	r3,4(sp)
    ae90:	1986d83a 	srl	r3,r3,r6
    ae94:	d8c00115 	stw	r3,4(sp)
    ae98:	180b003a 	cmpeq	r5,r3,zero
    ae9c:	00800084 	movi	r2,2
    aea0:	114bc83a 	sub	r5,r2,r5
    aea4:	80c00115 	stw	r3,4(r16)
    aea8:	91400415 	stw	r5,16(r18)
    aeac:	a0001a1e 	bne	r20,zero,af18 <__d2b+0x140>
    aeb0:	3545883a 	add	r2,r6,r21
    aeb4:	10bef344 	addi	r2,r2,-1075
    aeb8:	00c00d44 	movi	r3,53
    aebc:	b0800015 	stw	r2,0(r22)
    aec0:	1987c83a 	sub	r3,r3,r6
    aec4:	b8c00015 	stw	r3,0(r23)
    aec8:	9005883a 	mov	r2,r18
    aecc:	dfc00a17 	ldw	ra,40(sp)
    aed0:	ddc00917 	ldw	r23,36(sp)
    aed4:	dd800817 	ldw	r22,32(sp)
    aed8:	dd400717 	ldw	r21,28(sp)
    aedc:	dd000617 	ldw	r20,24(sp)
    aee0:	dcc00517 	ldw	r19,20(sp)
    aee4:	dc800417 	ldw	r18,16(sp)
    aee8:	dc400317 	ldw	r17,12(sp)
    aeec:	dc000217 	ldw	r16,8(sp)
    aef0:	dec00b04 	addi	sp,sp,44
    aef4:	f800283a 	ret
    aef8:	d9000104 	addi	r4,sp,4
    aefc:	000a8340 	call	a834 <__lo0bits>
    af00:	11800804 	addi	r6,r2,32
    af04:	d8800117 	ldw	r2,4(sp)
    af08:	94c00415 	stw	r19,16(r18)
    af0c:	980b883a 	mov	r5,r19
    af10:	90800515 	stw	r2,20(r18)
    af14:	a03fe626 	beq	r20,zero,aeb0 <__d2b+0xd8>
    af18:	2945883a 	add	r2,r5,r5
    af1c:	1085883a 	add	r2,r2,r2
    af20:	1405883a 	add	r2,r2,r16
    af24:	113fff17 	ldw	r4,-4(r2)
    af28:	30fef384 	addi	r3,r6,-1074
    af2c:	2820917a 	slli	r16,r5,5
    af30:	b0c00015 	stw	r3,0(r22)
    af34:	000a7c40 	call	a7c4 <__hi0bits>
    af38:	80a1c83a 	sub	r16,r16,r2
    af3c:	bc000015 	stw	r16,0(r23)
    af40:	003fe106 	br	aec8 <__d2b+0xf0>
    af44:	d8800017 	ldw	r2,0(sp)
    af48:	90800515 	stw	r2,20(r18)
    af4c:	d8c00117 	ldw	r3,4(sp)
    af50:	003fd106 	br	ae98 <__d2b+0xc0>

0000af54 <__mdiff>:
    af54:	defffb04 	addi	sp,sp,-20
    af58:	dc000015 	stw	r16,0(sp)
    af5c:	2821883a 	mov	r16,r5
    af60:	dc800215 	stw	r18,8(sp)
    af64:	300b883a 	mov	r5,r6
    af68:	2025883a 	mov	r18,r4
    af6c:	8009883a 	mov	r4,r16
    af70:	dc400115 	stw	r17,4(sp)
    af74:	dfc00415 	stw	ra,16(sp)
    af78:	dcc00315 	stw	r19,12(sp)
    af7c:	3023883a 	mov	r17,r6
    af80:	000a8f80 	call	a8f8 <__mcmp>
    af84:	10004226 	beq	r2,zero,b090 <__mdiff+0x13c>
    af88:	10005016 	blt	r2,zero,b0cc <__mdiff+0x178>
    af8c:	0027883a 	mov	r19,zero
    af90:	81400117 	ldw	r5,4(r16)
    af94:	9009883a 	mov	r4,r18
    af98:	000ad1c0 	call	ad1c <_Balloc>
    af9c:	1019883a 	mov	r12,r2
    afa0:	82800417 	ldw	r10,16(r16)
    afa4:	88800417 	ldw	r2,16(r17)
    afa8:	81800504 	addi	r6,r16,20
    afac:	5287883a 	add	r3,r10,r10
    afb0:	1085883a 	add	r2,r2,r2
    afb4:	18c7883a 	add	r3,r3,r3
    afb8:	1085883a 	add	r2,r2,r2
    afbc:	8a000504 	addi	r8,r17,20
    afc0:	64c00315 	stw	r19,12(r12)
    afc4:	30db883a 	add	r13,r6,r3
    afc8:	4097883a 	add	r11,r8,r2
    afcc:	61c00504 	addi	r7,r12,20
    afd0:	0013883a 	mov	r9,zero
    afd4:	31000017 	ldw	r4,0(r6)
    afd8:	41400017 	ldw	r5,0(r8)
    afdc:	42000104 	addi	r8,r8,4
    afe0:	20bfffcc 	andi	r2,r4,65535
    afe4:	28ffffcc 	andi	r3,r5,65535
    afe8:	10c5c83a 	sub	r2,r2,r3
    afec:	1245883a 	add	r2,r2,r9
    aff0:	2008d43a 	srli	r4,r4,16
    aff4:	280ad43a 	srli	r5,r5,16
    aff8:	1007d43a 	srai	r3,r2,16
    affc:	3880000d 	sth	r2,0(r7)
    b000:	2149c83a 	sub	r4,r4,r5
    b004:	20c9883a 	add	r4,r4,r3
    b008:	3900008d 	sth	r4,2(r7)
    b00c:	31800104 	addi	r6,r6,4
    b010:	39c00104 	addi	r7,r7,4
    b014:	2013d43a 	srai	r9,r4,16
    b018:	42ffee36 	bltu	r8,r11,afd4 <__mdiff+0x80>
    b01c:	33400c2e 	bgeu	r6,r13,b050 <__mdiff+0xfc>
    b020:	30800017 	ldw	r2,0(r6)
    b024:	31800104 	addi	r6,r6,4
    b028:	10ffffcc 	andi	r3,r2,65535
    b02c:	1a47883a 	add	r3,r3,r9
    b030:	1004d43a 	srli	r2,r2,16
    b034:	1809d43a 	srai	r4,r3,16
    b038:	38c0000d 	sth	r3,0(r7)
    b03c:	1105883a 	add	r2,r2,r4
    b040:	3880008d 	sth	r2,2(r7)
    b044:	1013d43a 	srai	r9,r2,16
    b048:	39c00104 	addi	r7,r7,4
    b04c:	337ff436 	bltu	r6,r13,b020 <__mdiff+0xcc>
    b050:	38bfff17 	ldw	r2,-4(r7)
    b054:	38ffff04 	addi	r3,r7,-4
    b058:	1000041e 	bne	r2,zero,b06c <__mdiff+0x118>
    b05c:	18ffff04 	addi	r3,r3,-4
    b060:	18800017 	ldw	r2,0(r3)
    b064:	52bfffc4 	addi	r10,r10,-1
    b068:	103ffc26 	beq	r2,zero,b05c <__mdiff+0x108>
    b06c:	6005883a 	mov	r2,r12
    b070:	62800415 	stw	r10,16(r12)
    b074:	dfc00417 	ldw	ra,16(sp)
    b078:	dcc00317 	ldw	r19,12(sp)
    b07c:	dc800217 	ldw	r18,8(sp)
    b080:	dc400117 	ldw	r17,4(sp)
    b084:	dc000017 	ldw	r16,0(sp)
    b088:	dec00504 	addi	sp,sp,20
    b08c:	f800283a 	ret
    b090:	9009883a 	mov	r4,r18
    b094:	000b883a 	mov	r5,zero
    b098:	000ad1c0 	call	ad1c <_Balloc>
    b09c:	1019883a 	mov	r12,r2
    b0a0:	00800044 	movi	r2,1
    b0a4:	60800415 	stw	r2,16(r12)
    b0a8:	6005883a 	mov	r2,r12
    b0ac:	60000515 	stw	zero,20(r12)
    b0b0:	dfc00417 	ldw	ra,16(sp)
    b0b4:	dcc00317 	ldw	r19,12(sp)
    b0b8:	dc800217 	ldw	r18,8(sp)
    b0bc:	dc400117 	ldw	r17,4(sp)
    b0c0:	dc000017 	ldw	r16,0(sp)
    b0c4:	dec00504 	addi	sp,sp,20
    b0c8:	f800283a 	ret
    b0cc:	880d883a 	mov	r6,r17
    b0d0:	04c00044 	movi	r19,1
    b0d4:	8023883a 	mov	r17,r16
    b0d8:	3021883a 	mov	r16,r6
    b0dc:	003fac06 	br	af90 <__mdiff+0x3c>

0000b0e0 <__lshift>:
    b0e0:	defff904 	addi	sp,sp,-28
    b0e4:	28800417 	ldw	r2,16(r5)
    b0e8:	dc000015 	stw	r16,0(sp)
    b0ec:	3021d17a 	srai	r16,r6,5
    b0f0:	28c00217 	ldw	r3,8(r5)
    b0f4:	10800044 	addi	r2,r2,1
    b0f8:	dc400115 	stw	r17,4(sp)
    b0fc:	80a3883a 	add	r17,r16,r2
    b100:	dd400515 	stw	r21,20(sp)
    b104:	dd000415 	stw	r20,16(sp)
    b108:	dc800215 	stw	r18,8(sp)
    b10c:	dfc00615 	stw	ra,24(sp)
    b110:	2825883a 	mov	r18,r5
    b114:	dcc00315 	stw	r19,12(sp)
    b118:	3029883a 	mov	r20,r6
    b11c:	202b883a 	mov	r21,r4
    b120:	29400117 	ldw	r5,4(r5)
    b124:	1c40030e 	bge	r3,r17,b134 <__lshift+0x54>
    b128:	18c7883a 	add	r3,r3,r3
    b12c:	29400044 	addi	r5,r5,1
    b130:	1c7ffd16 	blt	r3,r17,b128 <__lshift+0x48>
    b134:	a809883a 	mov	r4,r21
    b138:	000ad1c0 	call	ad1c <_Balloc>
    b13c:	1027883a 	mov	r19,r2
    b140:	11400504 	addi	r5,r2,20
    b144:	0400090e 	bge	zero,r16,b16c <__lshift+0x8c>
    b148:	2805883a 	mov	r2,r5
    b14c:	0007883a 	mov	r3,zero
    b150:	18c00044 	addi	r3,r3,1
    b154:	10000015 	stw	zero,0(r2)
    b158:	10800104 	addi	r2,r2,4
    b15c:	80fffc1e 	bne	r16,r3,b150 <__lshift+0x70>
    b160:	8405883a 	add	r2,r16,r16
    b164:	1085883a 	add	r2,r2,r2
    b168:	288b883a 	add	r5,r5,r2
    b16c:	90800417 	ldw	r2,16(r18)
    b170:	91000504 	addi	r4,r18,20
    b174:	a18007cc 	andi	r6,r20,31
    b178:	1085883a 	add	r2,r2,r2
    b17c:	1085883a 	add	r2,r2,r2
    b180:	208f883a 	add	r7,r4,r2
    b184:	30001e26 	beq	r6,zero,b200 <__lshift+0x120>
    b188:	00800804 	movi	r2,32
    b18c:	1191c83a 	sub	r8,r2,r6
    b190:	0007883a 	mov	r3,zero
    b194:	20800017 	ldw	r2,0(r4)
    b198:	1184983a 	sll	r2,r2,r6
    b19c:	1884b03a 	or	r2,r3,r2
    b1a0:	28800015 	stw	r2,0(r5)
    b1a4:	20c00017 	ldw	r3,0(r4)
    b1a8:	21000104 	addi	r4,r4,4
    b1ac:	29400104 	addi	r5,r5,4
    b1b0:	1a06d83a 	srl	r3,r3,r8
    b1b4:	21fff736 	bltu	r4,r7,b194 <__lshift+0xb4>
    b1b8:	28c00015 	stw	r3,0(r5)
    b1bc:	18000126 	beq	r3,zero,b1c4 <__lshift+0xe4>
    b1c0:	8c400044 	addi	r17,r17,1
    b1c4:	88bfffc4 	addi	r2,r17,-1
    b1c8:	98800415 	stw	r2,16(r19)
    b1cc:	a809883a 	mov	r4,r21
    b1d0:	900b883a 	mov	r5,r18
    b1d4:	000a79c0 	call	a79c <_Bfree>
    b1d8:	9805883a 	mov	r2,r19
    b1dc:	dfc00617 	ldw	ra,24(sp)
    b1e0:	dd400517 	ldw	r21,20(sp)
    b1e4:	dd000417 	ldw	r20,16(sp)
    b1e8:	dcc00317 	ldw	r19,12(sp)
    b1ec:	dc800217 	ldw	r18,8(sp)
    b1f0:	dc400117 	ldw	r17,4(sp)
    b1f4:	dc000017 	ldw	r16,0(sp)
    b1f8:	dec00704 	addi	sp,sp,28
    b1fc:	f800283a 	ret
    b200:	20800017 	ldw	r2,0(r4)
    b204:	21000104 	addi	r4,r4,4
    b208:	28800015 	stw	r2,0(r5)
    b20c:	29400104 	addi	r5,r5,4
    b210:	21ffec2e 	bgeu	r4,r7,b1c4 <__lshift+0xe4>
    b214:	20800017 	ldw	r2,0(r4)
    b218:	21000104 	addi	r4,r4,4
    b21c:	28800015 	stw	r2,0(r5)
    b220:	29400104 	addi	r5,r5,4
    b224:	21fff636 	bltu	r4,r7,b200 <__lshift+0x120>
    b228:	003fe606 	br	b1c4 <__lshift+0xe4>

0000b22c <__multiply>:
    b22c:	defff904 	addi	sp,sp,-28
    b230:	dcc00315 	stw	r19,12(sp)
    b234:	dc800215 	stw	r18,8(sp)
    b238:	2cc00417 	ldw	r19,16(r5)
    b23c:	34800417 	ldw	r18,16(r6)
    b240:	dd000415 	stw	r20,16(sp)
    b244:	dc400115 	stw	r17,4(sp)
    b248:	dfc00615 	stw	ra,24(sp)
    b24c:	dd400515 	stw	r21,20(sp)
    b250:	dc000015 	stw	r16,0(sp)
    b254:	2823883a 	mov	r17,r5
    b258:	3029883a 	mov	r20,r6
    b25c:	9c80040e 	bge	r19,r18,b270 <__multiply+0x44>
    b260:	9027883a 	mov	r19,r18
    b264:	2c800417 	ldw	r18,16(r5)
    b268:	2829883a 	mov	r20,r5
    b26c:	3023883a 	mov	r17,r6
    b270:	88800217 	ldw	r2,8(r17)
    b274:	9ca1883a 	add	r16,r19,r18
    b278:	89400117 	ldw	r5,4(r17)
    b27c:	1400010e 	bge	r2,r16,b284 <__multiply+0x58>
    b280:	29400044 	addi	r5,r5,1
    b284:	000ad1c0 	call	ad1c <_Balloc>
    b288:	102b883a 	mov	r21,r2
    b28c:	8405883a 	add	r2,r16,r16
    b290:	1085883a 	add	r2,r2,r2
    b294:	a9000504 	addi	r4,r21,20
    b298:	209d883a 	add	r14,r4,r2
    b29c:	2380042e 	bgeu	r4,r14,b2b0 <__multiply+0x84>
    b2a0:	2005883a 	mov	r2,r4
    b2a4:	10000015 	stw	zero,0(r2)
    b2a8:	10800104 	addi	r2,r2,4
    b2ac:	13bffd36 	bltu	r2,r14,b2a4 <__multiply+0x78>
    b2b0:	9485883a 	add	r2,r18,r18
    b2b4:	9cc7883a 	add	r3,r19,r19
    b2b8:	a1800504 	addi	r6,r20,20
    b2bc:	1085883a 	add	r2,r2,r2
    b2c0:	8b400504 	addi	r13,r17,20
    b2c4:	18c7883a 	add	r3,r3,r3
    b2c8:	309f883a 	add	r15,r6,r2
    b2cc:	68d7883a 	add	r11,r13,r3
    b2d0:	33c03b2e 	bgeu	r6,r15,b3c0 <__multiply+0x194>
    b2d4:	2019883a 	mov	r12,r4
    b2d8:	30800017 	ldw	r2,0(r6)
    b2dc:	127fffcc 	andi	r9,r2,65535
    b2e0:	48001826 	beq	r9,zero,b344 <__multiply+0x118>
    b2e4:	6811883a 	mov	r8,r13
    b2e8:	600f883a 	mov	r7,r12
    b2ec:	0015883a 	mov	r10,zero
    b2f0:	40c00017 	ldw	r3,0(r8)
    b2f4:	39400017 	ldw	r5,0(r7)
    b2f8:	42000104 	addi	r8,r8,4
    b2fc:	193fffcc 	andi	r4,r3,65535
    b300:	4909383a 	mul	r4,r9,r4
    b304:	1806d43a 	srli	r3,r3,16
    b308:	28bfffcc 	andi	r2,r5,65535
    b30c:	5085883a 	add	r2,r10,r2
    b310:	2089883a 	add	r4,r4,r2
    b314:	48c7383a 	mul	r3,r9,r3
    b318:	280ad43a 	srli	r5,r5,16
    b31c:	2004d43a 	srli	r2,r4,16
    b320:	3900000d 	sth	r4,0(r7)
    b324:	1947883a 	add	r3,r3,r5
    b328:	10c5883a 	add	r2,r2,r3
    b32c:	3880008d 	sth	r2,2(r7)
    b330:	1014d43a 	srli	r10,r2,16
    b334:	39c00104 	addi	r7,r7,4
    b338:	42ffed36 	bltu	r8,r11,b2f0 <__multiply+0xc4>
    b33c:	3a800015 	stw	r10,0(r7)
    b340:	30800017 	ldw	r2,0(r6)
    b344:	1012d43a 	srli	r9,r2,16
    b348:	48001926 	beq	r9,zero,b3b0 <__multiply+0x184>
    b34c:	60800017 	ldw	r2,0(r12)
    b350:	6811883a 	mov	r8,r13
    b354:	600f883a 	mov	r7,r12
    b358:	0015883a 	mov	r10,zero
    b35c:	100b883a 	mov	r5,r2
    b360:	41000017 	ldw	r4,0(r8)
    b364:	2806d43a 	srli	r3,r5,16
    b368:	3880000d 	sth	r2,0(r7)
    b36c:	20bfffcc 	andi	r2,r4,65535
    b370:	4885383a 	mul	r2,r9,r2
    b374:	50c7883a 	add	r3,r10,r3
    b378:	2008d43a 	srli	r4,r4,16
    b37c:	10c5883a 	add	r2,r2,r3
    b380:	3880008d 	sth	r2,2(r7)
    b384:	39c00104 	addi	r7,r7,4
    b388:	39400017 	ldw	r5,0(r7)
    b38c:	4909383a 	mul	r4,r9,r4
    b390:	1004d43a 	srli	r2,r2,16
    b394:	28ffffcc 	andi	r3,r5,65535
    b398:	20c9883a 	add	r4,r4,r3
    b39c:	1105883a 	add	r2,r2,r4
    b3a0:	42000104 	addi	r8,r8,4
    b3a4:	1014d43a 	srli	r10,r2,16
    b3a8:	42ffed36 	bltu	r8,r11,b360 <__multiply+0x134>
    b3ac:	38800015 	stw	r2,0(r7)
    b3b0:	31800104 	addi	r6,r6,4
    b3b4:	33c0022e 	bgeu	r6,r15,b3c0 <__multiply+0x194>
    b3b8:	63000104 	addi	r12,r12,4
    b3bc:	003fc606 	br	b2d8 <__multiply+0xac>
    b3c0:	0400090e 	bge	zero,r16,b3e8 <__multiply+0x1bc>
    b3c4:	70bfff17 	ldw	r2,-4(r14)
    b3c8:	70ffff04 	addi	r3,r14,-4
    b3cc:	10000326 	beq	r2,zero,b3dc <__multiply+0x1b0>
    b3d0:	00000506 	br	b3e8 <__multiply+0x1bc>
    b3d4:	18800017 	ldw	r2,0(r3)
    b3d8:	1000031e 	bne	r2,zero,b3e8 <__multiply+0x1bc>
    b3dc:	843fffc4 	addi	r16,r16,-1
    b3e0:	18ffff04 	addi	r3,r3,-4
    b3e4:	803ffb1e 	bne	r16,zero,b3d4 <__multiply+0x1a8>
    b3e8:	a805883a 	mov	r2,r21
    b3ec:	ac000415 	stw	r16,16(r21)
    b3f0:	dfc00617 	ldw	ra,24(sp)
    b3f4:	dd400517 	ldw	r21,20(sp)
    b3f8:	dd000417 	ldw	r20,16(sp)
    b3fc:	dcc00317 	ldw	r19,12(sp)
    b400:	dc800217 	ldw	r18,8(sp)
    b404:	dc400117 	ldw	r17,4(sp)
    b408:	dc000017 	ldw	r16,0(sp)
    b40c:	dec00704 	addi	sp,sp,28
    b410:	f800283a 	ret

0000b414 <__i2b>:
    b414:	defffd04 	addi	sp,sp,-12
    b418:	dc000015 	stw	r16,0(sp)
    b41c:	04000044 	movi	r16,1
    b420:	dc800115 	stw	r18,4(sp)
    b424:	2825883a 	mov	r18,r5
    b428:	800b883a 	mov	r5,r16
    b42c:	dfc00215 	stw	ra,8(sp)
    b430:	000ad1c0 	call	ad1c <_Balloc>
    b434:	14000415 	stw	r16,16(r2)
    b438:	14800515 	stw	r18,20(r2)
    b43c:	dfc00217 	ldw	ra,8(sp)
    b440:	dc800117 	ldw	r18,4(sp)
    b444:	dc000017 	ldw	r16,0(sp)
    b448:	dec00304 	addi	sp,sp,12
    b44c:	f800283a 	ret

0000b450 <__multadd>:
    b450:	defffa04 	addi	sp,sp,-24
    b454:	dc800215 	stw	r18,8(sp)
    b458:	2c800417 	ldw	r18,16(r5)
    b45c:	dd000415 	stw	r20,16(sp)
    b460:	dcc00315 	stw	r19,12(sp)
    b464:	dc000015 	stw	r16,0(sp)
    b468:	dfc00515 	stw	ra,20(sp)
    b46c:	3821883a 	mov	r16,r7
    b470:	dc400115 	stw	r17,4(sp)
    b474:	2827883a 	mov	r19,r5
    b478:	2029883a 	mov	r20,r4
    b47c:	2a000504 	addi	r8,r5,20
    b480:	000f883a 	mov	r7,zero
    b484:	40800017 	ldw	r2,0(r8)
    b488:	39c00044 	addi	r7,r7,1
    b48c:	10ffffcc 	andi	r3,r2,65535
    b490:	1987383a 	mul	r3,r3,r6
    b494:	1004d43a 	srli	r2,r2,16
    b498:	1c07883a 	add	r3,r3,r16
    b49c:	180ad43a 	srli	r5,r3,16
    b4a0:	1185383a 	mul	r2,r2,r6
    b4a4:	18ffffcc 	andi	r3,r3,65535
    b4a8:	1145883a 	add	r2,r2,r5
    b4ac:	1008943a 	slli	r4,r2,16
    b4b0:	1020d43a 	srli	r16,r2,16
    b4b4:	20c9883a 	add	r4,r4,r3
    b4b8:	41000015 	stw	r4,0(r8)
    b4bc:	42000104 	addi	r8,r8,4
    b4c0:	3cbff016 	blt	r7,r18,b484 <__multadd+0x34>
    b4c4:	80000826 	beq	r16,zero,b4e8 <__multadd+0x98>
    b4c8:	98800217 	ldw	r2,8(r19)
    b4cc:	90800f0e 	bge	r18,r2,b50c <__multadd+0xbc>
    b4d0:	9485883a 	add	r2,r18,r18
    b4d4:	1085883a 	add	r2,r2,r2
    b4d8:	14c5883a 	add	r2,r2,r19
    b4dc:	90c00044 	addi	r3,r18,1
    b4e0:	14000515 	stw	r16,20(r2)
    b4e4:	98c00415 	stw	r3,16(r19)
    b4e8:	9805883a 	mov	r2,r19
    b4ec:	dfc00517 	ldw	ra,20(sp)
    b4f0:	dd000417 	ldw	r20,16(sp)
    b4f4:	dcc00317 	ldw	r19,12(sp)
    b4f8:	dc800217 	ldw	r18,8(sp)
    b4fc:	dc400117 	ldw	r17,4(sp)
    b500:	dc000017 	ldw	r16,0(sp)
    b504:	dec00604 	addi	sp,sp,24
    b508:	f800283a 	ret
    b50c:	99400117 	ldw	r5,4(r19)
    b510:	a009883a 	mov	r4,r20
    b514:	29400044 	addi	r5,r5,1
    b518:	000ad1c0 	call	ad1c <_Balloc>
    b51c:	99800417 	ldw	r6,16(r19)
    b520:	99400304 	addi	r5,r19,12
    b524:	11000304 	addi	r4,r2,12
    b528:	318d883a 	add	r6,r6,r6
    b52c:	318d883a 	add	r6,r6,r6
    b530:	31800204 	addi	r6,r6,8
    b534:	1023883a 	mov	r17,r2
    b538:	00039640 	call	3964 <memcpy>
    b53c:	980b883a 	mov	r5,r19
    b540:	a009883a 	mov	r4,r20
    b544:	000a79c0 	call	a79c <_Bfree>
    b548:	8827883a 	mov	r19,r17
    b54c:	003fe006 	br	b4d0 <__multadd+0x80>

0000b550 <__pow5mult>:
    b550:	defffa04 	addi	sp,sp,-24
    b554:	308000cc 	andi	r2,r6,3
    b558:	dd000415 	stw	r20,16(sp)
    b55c:	dcc00315 	stw	r19,12(sp)
    b560:	dc000015 	stw	r16,0(sp)
    b564:	dfc00515 	stw	ra,20(sp)
    b568:	dc800215 	stw	r18,8(sp)
    b56c:	dc400115 	stw	r17,4(sp)
    b570:	3021883a 	mov	r16,r6
    b574:	2027883a 	mov	r19,r4
    b578:	2829883a 	mov	r20,r5
    b57c:	10002b1e 	bne	r2,zero,b62c <__pow5mult+0xdc>
    b580:	8025d0ba 	srai	r18,r16,2
    b584:	90001b26 	beq	r18,zero,b5f4 <__pow5mult+0xa4>
    b588:	9c001217 	ldw	r16,72(r19)
    b58c:	8000081e 	bne	r16,zero,b5b0 <__pow5mult+0x60>
    b590:	00003006 	br	b654 <__pow5mult+0x104>
    b594:	800b883a 	mov	r5,r16
    b598:	800d883a 	mov	r6,r16
    b59c:	9809883a 	mov	r4,r19
    b5a0:	90001426 	beq	r18,zero,b5f4 <__pow5mult+0xa4>
    b5a4:	80800017 	ldw	r2,0(r16)
    b5a8:	10001b26 	beq	r2,zero,b618 <__pow5mult+0xc8>
    b5ac:	1021883a 	mov	r16,r2
    b5b0:	9080004c 	andi	r2,r18,1
    b5b4:	1005003a 	cmpeq	r2,r2,zero
    b5b8:	9025d07a 	srai	r18,r18,1
    b5bc:	800d883a 	mov	r6,r16
    b5c0:	9809883a 	mov	r4,r19
    b5c4:	a00b883a 	mov	r5,r20
    b5c8:	103ff21e 	bne	r2,zero,b594 <__pow5mult+0x44>
    b5cc:	000b22c0 	call	b22c <__multiply>
    b5d0:	a00b883a 	mov	r5,r20
    b5d4:	9809883a 	mov	r4,r19
    b5d8:	1023883a 	mov	r17,r2
    b5dc:	000a79c0 	call	a79c <_Bfree>
    b5e0:	8829883a 	mov	r20,r17
    b5e4:	800b883a 	mov	r5,r16
    b5e8:	800d883a 	mov	r6,r16
    b5ec:	9809883a 	mov	r4,r19
    b5f0:	903fec1e 	bne	r18,zero,b5a4 <__pow5mult+0x54>
    b5f4:	a005883a 	mov	r2,r20
    b5f8:	dfc00517 	ldw	ra,20(sp)
    b5fc:	dd000417 	ldw	r20,16(sp)
    b600:	dcc00317 	ldw	r19,12(sp)
    b604:	dc800217 	ldw	r18,8(sp)
    b608:	dc400117 	ldw	r17,4(sp)
    b60c:	dc000017 	ldw	r16,0(sp)
    b610:	dec00604 	addi	sp,sp,24
    b614:	f800283a 	ret
    b618:	000b22c0 	call	b22c <__multiply>
    b61c:	80800015 	stw	r2,0(r16)
    b620:	1021883a 	mov	r16,r2
    b624:	10000015 	stw	zero,0(r2)
    b628:	003fe106 	br	b5b0 <__pow5mult+0x60>
    b62c:	1085883a 	add	r2,r2,r2
    b630:	00c00074 	movhi	r3,1
    b634:	18d48004 	addi	r3,r3,20992
    b638:	1085883a 	add	r2,r2,r2
    b63c:	10c5883a 	add	r2,r2,r3
    b640:	11bfff17 	ldw	r6,-4(r2)
    b644:	000f883a 	mov	r7,zero
    b648:	000b4500 	call	b450 <__multadd>
    b64c:	1029883a 	mov	r20,r2
    b650:	003fcb06 	br	b580 <__pow5mult+0x30>
    b654:	9809883a 	mov	r4,r19
    b658:	01409c44 	movi	r5,625
    b65c:	000b4140 	call	b414 <__i2b>
    b660:	98801215 	stw	r2,72(r19)
    b664:	1021883a 	mov	r16,r2
    b668:	10000015 	stw	zero,0(r2)
    b66c:	003fd006 	br	b5b0 <__pow5mult+0x60>

0000b670 <__s2b>:
    b670:	defff904 	addi	sp,sp,-28
    b674:	dcc00315 	stw	r19,12(sp)
    b678:	dc800215 	stw	r18,8(sp)
    b67c:	2827883a 	mov	r19,r5
    b680:	2025883a 	mov	r18,r4
    b684:	01400244 	movi	r5,9
    b688:	39000204 	addi	r4,r7,8
    b68c:	dd000415 	stw	r20,16(sp)
    b690:	dc400115 	stw	r17,4(sp)
    b694:	dfc00615 	stw	ra,24(sp)
    b698:	dd400515 	stw	r21,20(sp)
    b69c:	dc000015 	stw	r16,0(sp)
    b6a0:	3829883a 	mov	r20,r7
    b6a4:	3023883a 	mov	r17,r6
    b6a8:	0002ac40 	call	2ac4 <__divsi3>
    b6ac:	00c00044 	movi	r3,1
    b6b0:	1880350e 	bge	r3,r2,b788 <__s2b+0x118>
    b6b4:	000b883a 	mov	r5,zero
    b6b8:	18c7883a 	add	r3,r3,r3
    b6bc:	29400044 	addi	r5,r5,1
    b6c0:	18bffd16 	blt	r3,r2,b6b8 <__s2b+0x48>
    b6c4:	9009883a 	mov	r4,r18
    b6c8:	000ad1c0 	call	ad1c <_Balloc>
    b6cc:	1011883a 	mov	r8,r2
    b6d0:	d8800717 	ldw	r2,28(sp)
    b6d4:	00c00044 	movi	r3,1
    b6d8:	01800244 	movi	r6,9
    b6dc:	40800515 	stw	r2,20(r8)
    b6e0:	40c00415 	stw	r3,16(r8)
    b6e4:	3440260e 	bge	r6,r17,b780 <__s2b+0x110>
    b6e8:	3021883a 	mov	r16,r6
    b6ec:	99ab883a 	add	r21,r19,r6
    b6f0:	9c05883a 	add	r2,r19,r16
    b6f4:	11c00007 	ldb	r7,0(r2)
    b6f8:	400b883a 	mov	r5,r8
    b6fc:	9009883a 	mov	r4,r18
    b700:	39fff404 	addi	r7,r7,-48
    b704:	01800284 	movi	r6,10
    b708:	000b4500 	call	b450 <__multadd>
    b70c:	84000044 	addi	r16,r16,1
    b710:	1011883a 	mov	r8,r2
    b714:	8c3ff61e 	bne	r17,r16,b6f0 <__s2b+0x80>
    b718:	ac45883a 	add	r2,r21,r17
    b71c:	117ffe04 	addi	r5,r2,-8
    b720:	880d883a 	mov	r6,r17
    b724:	35000c0e 	bge	r6,r20,b758 <__s2b+0xe8>
    b728:	a185c83a 	sub	r2,r20,r6
    b72c:	2821883a 	mov	r16,r5
    b730:	28a3883a 	add	r17,r5,r2
    b734:	81c00007 	ldb	r7,0(r16)
    b738:	400b883a 	mov	r5,r8
    b73c:	9009883a 	mov	r4,r18
    b740:	39fff404 	addi	r7,r7,-48
    b744:	01800284 	movi	r6,10
    b748:	000b4500 	call	b450 <__multadd>
    b74c:	84000044 	addi	r16,r16,1
    b750:	1011883a 	mov	r8,r2
    b754:	847ff71e 	bne	r16,r17,b734 <__s2b+0xc4>
    b758:	4005883a 	mov	r2,r8
    b75c:	dfc00617 	ldw	ra,24(sp)
    b760:	dd400517 	ldw	r21,20(sp)
    b764:	dd000417 	ldw	r20,16(sp)
    b768:	dcc00317 	ldw	r19,12(sp)
    b76c:	dc800217 	ldw	r18,8(sp)
    b770:	dc400117 	ldw	r17,4(sp)
    b774:	dc000017 	ldw	r16,0(sp)
    b778:	dec00704 	addi	sp,sp,28
    b77c:	f800283a 	ret
    b780:	99400284 	addi	r5,r19,10
    b784:	003fe706 	br	b724 <__s2b+0xb4>
    b788:	000b883a 	mov	r5,zero
    b78c:	003fcd06 	br	b6c4 <__s2b+0x54>

0000b790 <putc>:
    b790:	defffc04 	addi	sp,sp,-16
    b794:	dc800215 	stw	r18,8(sp)
    b798:	04800074 	movhi	r18,1
    b79c:	949b9704 	addi	r18,r18,28252
    b7a0:	90c00017 	ldw	r3,0(r18)
    b7a4:	dc400115 	stw	r17,4(sp)
    b7a8:	dc000015 	stw	r16,0(sp)
    b7ac:	dfc00315 	stw	ra,12(sp)
    b7b0:	2023883a 	mov	r17,r4
    b7b4:	2821883a 	mov	r16,r5
    b7b8:	18000226 	beq	r3,zero,b7c4 <putc+0x34>
    b7bc:	18800e17 	ldw	r2,56(r3)
    b7c0:	10001126 	beq	r2,zero,b808 <putc+0x78>
    b7c4:	80800217 	ldw	r2,8(r16)
    b7c8:	10ffffc4 	addi	r3,r2,-1
    b7cc:	80c00215 	stw	r3,8(r16)
    b7d0:	18001316 	blt	r3,zero,b820 <putc+0x90>
    b7d4:	80800017 	ldw	r2,0(r16)
    b7d8:	14400005 	stb	r17,0(r2)
    b7dc:	80c00017 	ldw	r3,0(r16)
    b7e0:	18800044 	addi	r2,r3,1
    b7e4:	18c00003 	ldbu	r3,0(r3)
    b7e8:	80800015 	stw	r2,0(r16)
    b7ec:	1805883a 	mov	r2,r3
    b7f0:	dfc00317 	ldw	ra,12(sp)
    b7f4:	dc800217 	ldw	r18,8(sp)
    b7f8:	dc400117 	ldw	r17,4(sp)
    b7fc:	dc000017 	ldw	r16,0(sp)
    b800:	dec00404 	addi	sp,sp,16
    b804:	f800283a 	ret
    b808:	1809883a 	mov	r4,r3
    b80c:	0002d680 	call	2d68 <__sinit>
    b810:	80800217 	ldw	r2,8(r16)
    b814:	10ffffc4 	addi	r3,r2,-1
    b818:	80c00215 	stw	r3,8(r16)
    b81c:	183fed0e 	bge	r3,zero,b7d4 <putc+0x44>
    b820:	80800617 	ldw	r2,24(r16)
    b824:	18800f16 	blt	r3,r2,b864 <putc+0xd4>
    b828:	80800017 	ldw	r2,0(r16)
    b82c:	14400005 	stb	r17,0(r2)
    b830:	81000017 	ldw	r4,0(r16)
    b834:	00800284 	movi	r2,10
    b838:	20c00003 	ldbu	r3,0(r4)
    b83c:	18801226 	beq	r3,r2,b888 <putc+0xf8>
    b840:	20800044 	addi	r2,r4,1
    b844:	80800015 	stw	r2,0(r16)
    b848:	1805883a 	mov	r2,r3
    b84c:	dfc00317 	ldw	ra,12(sp)
    b850:	dc800217 	ldw	r18,8(sp)
    b854:	dc400117 	ldw	r17,4(sp)
    b858:	dc000017 	ldw	r16,0(sp)
    b85c:	dec00404 	addi	sp,sp,16
    b860:	f800283a 	ret
    b864:	91000017 	ldw	r4,0(r18)
    b868:	880b883a 	mov	r5,r17
    b86c:	800d883a 	mov	r6,r16
    b870:	dfc00317 	ldw	ra,12(sp)
    b874:	dc800217 	ldw	r18,8(sp)
    b878:	dc400117 	ldw	r17,4(sp)
    b87c:	dc000017 	ldw	r16,0(sp)
    b880:	dec00404 	addi	sp,sp,16
    b884:	000e4e41 	jmpi	e4e4 <__swbuf_r>
    b888:	91000017 	ldw	r4,0(r18)
    b88c:	180b883a 	mov	r5,r3
    b890:	003ff606 	br	b86c <putc+0xdc>

0000b894 <_putc_r>:
    b894:	defffc04 	addi	sp,sp,-16
    b898:	dc400215 	stw	r17,8(sp)
    b89c:	dc000115 	stw	r16,4(sp)
    b8a0:	dfc00315 	stw	ra,12(sp)
    b8a4:	2021883a 	mov	r16,r4
    b8a8:	2823883a 	mov	r17,r5
    b8ac:	20000226 	beq	r4,zero,b8b8 <_putc_r+0x24>
    b8b0:	20800e17 	ldw	r2,56(r4)
    b8b4:	10001026 	beq	r2,zero,b8f8 <_putc_r+0x64>
    b8b8:	30800217 	ldw	r2,8(r6)
    b8bc:	10ffffc4 	addi	r3,r2,-1
    b8c0:	30c00215 	stw	r3,8(r6)
    b8c4:	18001316 	blt	r3,zero,b914 <_putc_r+0x80>
    b8c8:	30800017 	ldw	r2,0(r6)
    b8cc:	14400005 	stb	r17,0(r2)
    b8d0:	30c00017 	ldw	r3,0(r6)
    b8d4:	18800044 	addi	r2,r3,1
    b8d8:	18c00003 	ldbu	r3,0(r3)
    b8dc:	30800015 	stw	r2,0(r6)
    b8e0:	1805883a 	mov	r2,r3
    b8e4:	dfc00317 	ldw	ra,12(sp)
    b8e8:	dc400217 	ldw	r17,8(sp)
    b8ec:	dc000117 	ldw	r16,4(sp)
    b8f0:	dec00404 	addi	sp,sp,16
    b8f4:	f800283a 	ret
    b8f8:	d9800015 	stw	r6,0(sp)
    b8fc:	0002d680 	call	2d68 <__sinit>
    b900:	d9800017 	ldw	r6,0(sp)
    b904:	30800217 	ldw	r2,8(r6)
    b908:	10ffffc4 	addi	r3,r2,-1
    b90c:	30c00215 	stw	r3,8(r6)
    b910:	183fed0e 	bge	r3,zero,b8c8 <_putc_r+0x34>
    b914:	30800617 	ldw	r2,24(r6)
    b918:	18800e16 	blt	r3,r2,b954 <_putc_r+0xc0>
    b91c:	30800017 	ldw	r2,0(r6)
    b920:	14400005 	stb	r17,0(r2)
    b924:	31000017 	ldw	r4,0(r6)
    b928:	00800284 	movi	r2,10
    b92c:	20c00003 	ldbu	r3,0(r4)
    b930:	18800f26 	beq	r3,r2,b970 <_putc_r+0xdc>
    b934:	20800044 	addi	r2,r4,1
    b938:	30800015 	stw	r2,0(r6)
    b93c:	1805883a 	mov	r2,r3
    b940:	dfc00317 	ldw	ra,12(sp)
    b944:	dc400217 	ldw	r17,8(sp)
    b948:	dc000117 	ldw	r16,4(sp)
    b94c:	dec00404 	addi	sp,sp,16
    b950:	f800283a 	ret
    b954:	8009883a 	mov	r4,r16
    b958:	880b883a 	mov	r5,r17
    b95c:	dfc00317 	ldw	ra,12(sp)
    b960:	dc400217 	ldw	r17,8(sp)
    b964:	dc000117 	ldw	r16,4(sp)
    b968:	dec00404 	addi	sp,sp,16
    b96c:	000e4e41 	jmpi	e4e4 <__swbuf_r>
    b970:	8009883a 	mov	r4,r16
    b974:	180b883a 	mov	r5,r3
    b978:	003ff806 	br	b95c <_putc_r+0xc8>

0000b97c <_read_r>:
    b97c:	defffd04 	addi	sp,sp,-12
    b980:	dc000015 	stw	r16,0(sp)
    b984:	040000b4 	movhi	r16,2
    b988:	84227104 	addi	r16,r16,-30268
    b98c:	dc400115 	stw	r17,4(sp)
    b990:	80000015 	stw	zero,0(r16)
    b994:	2023883a 	mov	r17,r4
    b998:	2809883a 	mov	r4,r5
    b99c:	300b883a 	mov	r5,r6
    b9a0:	380d883a 	mov	r6,r7
    b9a4:	dfc00215 	stw	ra,8(sp)
    b9a8:	00122fc0 	call	122fc <read>
    b9ac:	1007883a 	mov	r3,r2
    b9b0:	00bfffc4 	movi	r2,-1
    b9b4:	18800626 	beq	r3,r2,b9d0 <_read_r+0x54>
    b9b8:	1805883a 	mov	r2,r3
    b9bc:	dfc00217 	ldw	ra,8(sp)
    b9c0:	dc400117 	ldw	r17,4(sp)
    b9c4:	dc000017 	ldw	r16,0(sp)
    b9c8:	dec00304 	addi	sp,sp,12
    b9cc:	f800283a 	ret
    b9d0:	80800017 	ldw	r2,0(r16)
    b9d4:	103ff826 	beq	r2,zero,b9b8 <_read_r+0x3c>
    b9d8:	88800015 	stw	r2,0(r17)
    b9dc:	1805883a 	mov	r2,r3
    b9e0:	dfc00217 	ldw	ra,8(sp)
    b9e4:	dc400117 	ldw	r17,4(sp)
    b9e8:	dc000017 	ldw	r16,0(sp)
    b9ec:	dec00304 	addi	sp,sp,12
    b9f0:	f800283a 	ret

0000b9f4 <_realloc_r>:
    b9f4:	defff404 	addi	sp,sp,-48
    b9f8:	dd800815 	stw	r22,32(sp)
    b9fc:	dc800415 	stw	r18,16(sp)
    ba00:	dc400315 	stw	r17,12(sp)
    ba04:	dfc00b15 	stw	ra,44(sp)
    ba08:	df000a15 	stw	fp,40(sp)
    ba0c:	ddc00915 	stw	r23,36(sp)
    ba10:	dd400715 	stw	r21,28(sp)
    ba14:	dd000615 	stw	r20,24(sp)
    ba18:	dcc00515 	stw	r19,20(sp)
    ba1c:	dc000215 	stw	r16,8(sp)
    ba20:	2825883a 	mov	r18,r5
    ba24:	3023883a 	mov	r17,r6
    ba28:	202d883a 	mov	r22,r4
    ba2c:	2800c926 	beq	r5,zero,bd54 <_realloc_r+0x360>
    ba30:	00122bc0 	call	122bc <__malloc_lock>
    ba34:	943ffe04 	addi	r16,r18,-8
    ba38:	88c002c4 	addi	r3,r17,11
    ba3c:	00800584 	movi	r2,22
    ba40:	82000117 	ldw	r8,4(r16)
    ba44:	10c01b2e 	bgeu	r2,r3,bab4 <_realloc_r+0xc0>
    ba48:	00bffe04 	movi	r2,-8
    ba4c:	188e703a 	and	r7,r3,r2
    ba50:	3839883a 	mov	fp,r7
    ba54:	38001a16 	blt	r7,zero,bac0 <_realloc_r+0xcc>
    ba58:	e4401936 	bltu	fp,r17,bac0 <_realloc_r+0xcc>
    ba5c:	013fff04 	movi	r4,-4
    ba60:	4126703a 	and	r19,r8,r4
    ba64:	99c02616 	blt	r19,r7,bb00 <_realloc_r+0x10c>
    ba68:	802b883a 	mov	r21,r16
    ba6c:	9829883a 	mov	r20,r19
    ba70:	84000204 	addi	r16,r16,8
    ba74:	a80f883a 	mov	r7,r21
    ba78:	a70dc83a 	sub	r6,r20,fp
    ba7c:	008003c4 	movi	r2,15
    ba80:	1180c136 	bltu	r2,r6,bd88 <_realloc_r+0x394>
    ba84:	38800117 	ldw	r2,4(r7)
    ba88:	a549883a 	add	r4,r20,r21
    ba8c:	1080004c 	andi	r2,r2,1
    ba90:	a084b03a 	or	r2,r20,r2
    ba94:	38800115 	stw	r2,4(r7)
    ba98:	20c00117 	ldw	r3,4(r4)
    ba9c:	18c00054 	ori	r3,r3,1
    baa0:	20c00115 	stw	r3,4(r4)
    baa4:	b009883a 	mov	r4,r22
    baa8:	00122dc0 	call	122dc <__malloc_unlock>
    baac:	8023883a 	mov	r17,r16
    bab0:	00000606 	br	bacc <_realloc_r+0xd8>
    bab4:	01c00404 	movi	r7,16
    bab8:	3839883a 	mov	fp,r7
    babc:	e47fe72e 	bgeu	fp,r17,ba5c <_realloc_r+0x68>
    bac0:	00800304 	movi	r2,12
    bac4:	0023883a 	mov	r17,zero
    bac8:	b0800015 	stw	r2,0(r22)
    bacc:	8805883a 	mov	r2,r17
    bad0:	dfc00b17 	ldw	ra,44(sp)
    bad4:	df000a17 	ldw	fp,40(sp)
    bad8:	ddc00917 	ldw	r23,36(sp)
    badc:	dd800817 	ldw	r22,32(sp)
    bae0:	dd400717 	ldw	r21,28(sp)
    bae4:	dd000617 	ldw	r20,24(sp)
    bae8:	dcc00517 	ldw	r19,20(sp)
    baec:	dc800417 	ldw	r18,16(sp)
    baf0:	dc400317 	ldw	r17,12(sp)
    baf4:	dc000217 	ldw	r16,8(sp)
    baf8:	dec00c04 	addi	sp,sp,48
    bafc:	f800283a 	ret
    bb00:	00800074 	movhi	r2,1
    bb04:	10960504 	addi	r2,r2,22548
    bb08:	12400217 	ldw	r9,8(r2)
    bb0c:	84cd883a 	add	r6,r16,r19
    bb10:	802b883a 	mov	r21,r16
    bb14:	3240b926 	beq	r6,r9,bdfc <_realloc_r+0x408>
    bb18:	31400117 	ldw	r5,4(r6)
    bb1c:	00bfff84 	movi	r2,-2
    bb20:	2884703a 	and	r2,r5,r2
    bb24:	1185883a 	add	r2,r2,r6
    bb28:	10c00117 	ldw	r3,4(r2)
    bb2c:	18c0004c 	andi	r3,r3,1
    bb30:	1807003a 	cmpeq	r3,r3,zero
    bb34:	1800a326 	beq	r3,zero,bdc4 <_realloc_r+0x3d0>
    bb38:	2908703a 	and	r4,r5,r4
    bb3c:	9929883a 	add	r20,r19,r4
    bb40:	a1c0a30e 	bge	r20,r7,bdd0 <_realloc_r+0x3dc>
    bb44:	4080004c 	andi	r2,r8,1
    bb48:	1000551e 	bne	r2,zero,bca0 <_realloc_r+0x2ac>
    bb4c:	80800017 	ldw	r2,0(r16)
    bb50:	80afc83a 	sub	r23,r16,r2
    bb54:	b8c00117 	ldw	r3,4(r23)
    bb58:	00bfff04 	movi	r2,-4
    bb5c:	1884703a 	and	r2,r3,r2
    bb60:	30002e26 	beq	r6,zero,bc1c <_realloc_r+0x228>
    bb64:	3240b926 	beq	r6,r9,be4c <_realloc_r+0x458>
    bb68:	98a9883a 	add	r20,r19,r2
    bb6c:	2509883a 	add	r4,r4,r20
    bb70:	d9000015 	stw	r4,0(sp)
    bb74:	21c02a16 	blt	r4,r7,bc20 <_realloc_r+0x22c>
    bb78:	30800317 	ldw	r2,12(r6)
    bb7c:	30c00217 	ldw	r3,8(r6)
    bb80:	01400904 	movi	r5,36
    bb84:	99bfff04 	addi	r6,r19,-4
    bb88:	18800315 	stw	r2,12(r3)
    bb8c:	10c00215 	stw	r3,8(r2)
    bb90:	b9000317 	ldw	r4,12(r23)
    bb94:	b8800217 	ldw	r2,8(r23)
    bb98:	b82b883a 	mov	r21,r23
    bb9c:	bc000204 	addi	r16,r23,8
    bba0:	20800215 	stw	r2,8(r4)
    bba4:	11000315 	stw	r4,12(r2)
    bba8:	2980e436 	bltu	r5,r6,bf3c <_realloc_r+0x548>
    bbac:	008004c4 	movi	r2,19
    bbb0:	9009883a 	mov	r4,r18
    bbb4:	8011883a 	mov	r8,r16
    bbb8:	11800f2e 	bgeu	r2,r6,bbf8 <_realloc_r+0x204>
    bbbc:	90800017 	ldw	r2,0(r18)
    bbc0:	ba000404 	addi	r8,r23,16
    bbc4:	91000204 	addi	r4,r18,8
    bbc8:	b8800215 	stw	r2,8(r23)
    bbcc:	90c00117 	ldw	r3,4(r18)
    bbd0:	008006c4 	movi	r2,27
    bbd4:	b8c00315 	stw	r3,12(r23)
    bbd8:	1180072e 	bgeu	r2,r6,bbf8 <_realloc_r+0x204>
    bbdc:	90c00217 	ldw	r3,8(r18)
    bbe0:	ba000604 	addi	r8,r23,24
    bbe4:	91000404 	addi	r4,r18,16
    bbe8:	b8c00415 	stw	r3,16(r23)
    bbec:	90800317 	ldw	r2,12(r18)
    bbf0:	b8800515 	stw	r2,20(r23)
    bbf4:	3140e726 	beq	r6,r5,bf94 <_realloc_r+0x5a0>
    bbf8:	20800017 	ldw	r2,0(r4)
    bbfc:	dd000017 	ldw	r20,0(sp)
    bc00:	b80f883a 	mov	r7,r23
    bc04:	40800015 	stw	r2,0(r8)
    bc08:	20c00117 	ldw	r3,4(r4)
    bc0c:	40c00115 	stw	r3,4(r8)
    bc10:	20800217 	ldw	r2,8(r4)
    bc14:	40800215 	stw	r2,8(r8)
    bc18:	003f9706 	br	ba78 <_realloc_r+0x84>
    bc1c:	98a9883a 	add	r20,r19,r2
    bc20:	a1c01f16 	blt	r20,r7,bca0 <_realloc_r+0x2ac>
    bc24:	b8c00317 	ldw	r3,12(r23)
    bc28:	b8800217 	ldw	r2,8(r23)
    bc2c:	99bfff04 	addi	r6,r19,-4
    bc30:	01400904 	movi	r5,36
    bc34:	b82b883a 	mov	r21,r23
    bc38:	18800215 	stw	r2,8(r3)
    bc3c:	10c00315 	stw	r3,12(r2)
    bc40:	bc000204 	addi	r16,r23,8
    bc44:	2980c336 	bltu	r5,r6,bf54 <_realloc_r+0x560>
    bc48:	008004c4 	movi	r2,19
    bc4c:	9009883a 	mov	r4,r18
    bc50:	8011883a 	mov	r8,r16
    bc54:	11800f2e 	bgeu	r2,r6,bc94 <_realloc_r+0x2a0>
    bc58:	90800017 	ldw	r2,0(r18)
    bc5c:	ba000404 	addi	r8,r23,16
    bc60:	91000204 	addi	r4,r18,8
    bc64:	b8800215 	stw	r2,8(r23)
    bc68:	90c00117 	ldw	r3,4(r18)
    bc6c:	008006c4 	movi	r2,27
    bc70:	b8c00315 	stw	r3,12(r23)
    bc74:	1180072e 	bgeu	r2,r6,bc94 <_realloc_r+0x2a0>
    bc78:	90c00217 	ldw	r3,8(r18)
    bc7c:	ba000604 	addi	r8,r23,24
    bc80:	91000404 	addi	r4,r18,16
    bc84:	b8c00415 	stw	r3,16(r23)
    bc88:	90800317 	ldw	r2,12(r18)
    bc8c:	b8800515 	stw	r2,20(r23)
    bc90:	3140c726 	beq	r6,r5,bfb0 <_realloc_r+0x5bc>
    bc94:	20800017 	ldw	r2,0(r4)
    bc98:	b80f883a 	mov	r7,r23
    bc9c:	003fd906 	br	bc04 <_realloc_r+0x210>
    bca0:	880b883a 	mov	r5,r17
    bca4:	b009883a 	mov	r4,r22
    bca8:	00031400 	call	3140 <_malloc_r>
    bcac:	1023883a 	mov	r17,r2
    bcb0:	10002526 	beq	r2,zero,bd48 <_realloc_r+0x354>
    bcb4:	80800117 	ldw	r2,4(r16)
    bcb8:	00ffff84 	movi	r3,-2
    bcbc:	893ffe04 	addi	r4,r17,-8
    bcc0:	10c4703a 	and	r2,r2,r3
    bcc4:	8085883a 	add	r2,r16,r2
    bcc8:	20809526 	beq	r4,r2,bf20 <_realloc_r+0x52c>
    bccc:	99bfff04 	addi	r6,r19,-4
    bcd0:	01c00904 	movi	r7,36
    bcd4:	39804536 	bltu	r7,r6,bdec <_realloc_r+0x3f8>
    bcd8:	008004c4 	movi	r2,19
    bcdc:	9009883a 	mov	r4,r18
    bce0:	880b883a 	mov	r5,r17
    bce4:	11800f2e 	bgeu	r2,r6,bd24 <_realloc_r+0x330>
    bce8:	90800017 	ldw	r2,0(r18)
    bcec:	89400204 	addi	r5,r17,8
    bcf0:	91000204 	addi	r4,r18,8
    bcf4:	88800015 	stw	r2,0(r17)
    bcf8:	90c00117 	ldw	r3,4(r18)
    bcfc:	008006c4 	movi	r2,27
    bd00:	88c00115 	stw	r3,4(r17)
    bd04:	1180072e 	bgeu	r2,r6,bd24 <_realloc_r+0x330>
    bd08:	90c00217 	ldw	r3,8(r18)
    bd0c:	89400404 	addi	r5,r17,16
    bd10:	91000404 	addi	r4,r18,16
    bd14:	88c00215 	stw	r3,8(r17)
    bd18:	90800317 	ldw	r2,12(r18)
    bd1c:	88800315 	stw	r2,12(r17)
    bd20:	31c09126 	beq	r6,r7,bf68 <_realloc_r+0x574>
    bd24:	20800017 	ldw	r2,0(r4)
    bd28:	28800015 	stw	r2,0(r5)
    bd2c:	20c00117 	ldw	r3,4(r4)
    bd30:	28c00115 	stw	r3,4(r5)
    bd34:	20800217 	ldw	r2,8(r4)
    bd38:	28800215 	stw	r2,8(r5)
    bd3c:	900b883a 	mov	r5,r18
    bd40:	b009883a 	mov	r4,r22
    bd44:	0009b100 	call	9b10 <_free_r>
    bd48:	b009883a 	mov	r4,r22
    bd4c:	00122dc0 	call	122dc <__malloc_unlock>
    bd50:	003f5e06 	br	bacc <_realloc_r+0xd8>
    bd54:	300b883a 	mov	r5,r6
    bd58:	dfc00b17 	ldw	ra,44(sp)
    bd5c:	df000a17 	ldw	fp,40(sp)
    bd60:	ddc00917 	ldw	r23,36(sp)
    bd64:	dd800817 	ldw	r22,32(sp)
    bd68:	dd400717 	ldw	r21,28(sp)
    bd6c:	dd000617 	ldw	r20,24(sp)
    bd70:	dcc00517 	ldw	r19,20(sp)
    bd74:	dc800417 	ldw	r18,16(sp)
    bd78:	dc400317 	ldw	r17,12(sp)
    bd7c:	dc000217 	ldw	r16,8(sp)
    bd80:	dec00c04 	addi	sp,sp,48
    bd84:	00031401 	jmpi	3140 <_malloc_r>
    bd88:	38800117 	ldw	r2,4(r7)
    bd8c:	e54b883a 	add	r5,fp,r21
    bd90:	31000054 	ori	r4,r6,1
    bd94:	1080004c 	andi	r2,r2,1
    bd98:	1704b03a 	or	r2,r2,fp
    bd9c:	38800115 	stw	r2,4(r7)
    bda0:	29000115 	stw	r4,4(r5)
    bda4:	2987883a 	add	r3,r5,r6
    bda8:	18800117 	ldw	r2,4(r3)
    bdac:	29400204 	addi	r5,r5,8
    bdb0:	b009883a 	mov	r4,r22
    bdb4:	10800054 	ori	r2,r2,1
    bdb8:	18800115 	stw	r2,4(r3)
    bdbc:	0009b100 	call	9b10 <_free_r>
    bdc0:	003f3806 	br	baa4 <_realloc_r+0xb0>
    bdc4:	000d883a 	mov	r6,zero
    bdc8:	0009883a 	mov	r4,zero
    bdcc:	003f5d06 	br	bb44 <_realloc_r+0x150>
    bdd0:	30c00217 	ldw	r3,8(r6)
    bdd4:	30800317 	ldw	r2,12(r6)
    bdd8:	800f883a 	mov	r7,r16
    bddc:	84000204 	addi	r16,r16,8
    bde0:	10c00215 	stw	r3,8(r2)
    bde4:	18800315 	stw	r2,12(r3)
    bde8:	003f2306 	br	ba78 <_realloc_r+0x84>
    bdec:	8809883a 	mov	r4,r17
    bdf0:	900b883a 	mov	r5,r18
    bdf4:	000a6bc0 	call	a6bc <memmove>
    bdf8:	003fd006 	br	bd3c <_realloc_r+0x348>
    bdfc:	30800117 	ldw	r2,4(r6)
    be00:	e0c00404 	addi	r3,fp,16
    be04:	1108703a 	and	r4,r2,r4
    be08:	9905883a 	add	r2,r19,r4
    be0c:	10ff4d16 	blt	r2,r3,bb44 <_realloc_r+0x150>
    be10:	1705c83a 	sub	r2,r2,fp
    be14:	870b883a 	add	r5,r16,fp
    be18:	10800054 	ori	r2,r2,1
    be1c:	28800115 	stw	r2,4(r5)
    be20:	80c00117 	ldw	r3,4(r16)
    be24:	00800074 	movhi	r2,1
    be28:	10960504 	addi	r2,r2,22548
    be2c:	b009883a 	mov	r4,r22
    be30:	18c0004c 	andi	r3,r3,1
    be34:	e0c6b03a 	or	r3,fp,r3
    be38:	11400215 	stw	r5,8(r2)
    be3c:	80c00115 	stw	r3,4(r16)
    be40:	00122dc0 	call	122dc <__malloc_unlock>
    be44:	84400204 	addi	r17,r16,8
    be48:	003f2006 	br	bacc <_realloc_r+0xd8>
    be4c:	98a9883a 	add	r20,r19,r2
    be50:	2509883a 	add	r4,r4,r20
    be54:	e0800404 	addi	r2,fp,16
    be58:	d9000115 	stw	r4,4(sp)
    be5c:	20bf7016 	blt	r4,r2,bc20 <_realloc_r+0x22c>
    be60:	b8c00317 	ldw	r3,12(r23)
    be64:	b8800217 	ldw	r2,8(r23)
    be68:	99bfff04 	addi	r6,r19,-4
    be6c:	01400904 	movi	r5,36
    be70:	18800215 	stw	r2,8(r3)
    be74:	10c00315 	stw	r3,12(r2)
    be78:	bc400204 	addi	r17,r23,8
    be7c:	29804136 	bltu	r5,r6,bf84 <_realloc_r+0x590>
    be80:	008004c4 	movi	r2,19
    be84:	9009883a 	mov	r4,r18
    be88:	880f883a 	mov	r7,r17
    be8c:	11800f2e 	bgeu	r2,r6,becc <_realloc_r+0x4d8>
    be90:	90800017 	ldw	r2,0(r18)
    be94:	b9c00404 	addi	r7,r23,16
    be98:	91000204 	addi	r4,r18,8
    be9c:	b8800215 	stw	r2,8(r23)
    bea0:	90c00117 	ldw	r3,4(r18)
    bea4:	008006c4 	movi	r2,27
    bea8:	b8c00315 	stw	r3,12(r23)
    beac:	1180072e 	bgeu	r2,r6,becc <_realloc_r+0x4d8>
    beb0:	90c00217 	ldw	r3,8(r18)
    beb4:	b9c00604 	addi	r7,r23,24
    beb8:	91000404 	addi	r4,r18,16
    bebc:	b8c00415 	stw	r3,16(r23)
    bec0:	90800317 	ldw	r2,12(r18)
    bec4:	b8800515 	stw	r2,20(r23)
    bec8:	31404026 	beq	r6,r5,bfcc <_realloc_r+0x5d8>
    becc:	20800017 	ldw	r2,0(r4)
    bed0:	38800015 	stw	r2,0(r7)
    bed4:	20c00117 	ldw	r3,4(r4)
    bed8:	38c00115 	stw	r3,4(r7)
    bedc:	20800217 	ldw	r2,8(r4)
    bee0:	38800215 	stw	r2,8(r7)
    bee4:	d8c00117 	ldw	r3,4(sp)
    bee8:	bf0b883a 	add	r5,r23,fp
    beec:	b009883a 	mov	r4,r22
    bef0:	1f05c83a 	sub	r2,r3,fp
    bef4:	10800054 	ori	r2,r2,1
    bef8:	28800115 	stw	r2,4(r5)
    befc:	b8c00117 	ldw	r3,4(r23)
    bf00:	00800074 	movhi	r2,1
    bf04:	10960504 	addi	r2,r2,22548
    bf08:	11400215 	stw	r5,8(r2)
    bf0c:	18c0004c 	andi	r3,r3,1
    bf10:	e0c6b03a 	or	r3,fp,r3
    bf14:	b8c00115 	stw	r3,4(r23)
    bf18:	00122dc0 	call	122dc <__malloc_unlock>
    bf1c:	003eeb06 	br	bacc <_realloc_r+0xd8>
    bf20:	20800117 	ldw	r2,4(r4)
    bf24:	00ffff04 	movi	r3,-4
    bf28:	800f883a 	mov	r7,r16
    bf2c:	10c4703a 	and	r2,r2,r3
    bf30:	98a9883a 	add	r20,r19,r2
    bf34:	84000204 	addi	r16,r16,8
    bf38:	003ecf06 	br	ba78 <_realloc_r+0x84>
    bf3c:	900b883a 	mov	r5,r18
    bf40:	8009883a 	mov	r4,r16
    bf44:	000a6bc0 	call	a6bc <memmove>
    bf48:	dd000017 	ldw	r20,0(sp)
    bf4c:	b80f883a 	mov	r7,r23
    bf50:	003ec906 	br	ba78 <_realloc_r+0x84>
    bf54:	900b883a 	mov	r5,r18
    bf58:	8009883a 	mov	r4,r16
    bf5c:	000a6bc0 	call	a6bc <memmove>
    bf60:	b80f883a 	mov	r7,r23
    bf64:	003ec406 	br	ba78 <_realloc_r+0x84>
    bf68:	90c00417 	ldw	r3,16(r18)
    bf6c:	89400604 	addi	r5,r17,24
    bf70:	91000604 	addi	r4,r18,24
    bf74:	88c00415 	stw	r3,16(r17)
    bf78:	90800517 	ldw	r2,20(r18)
    bf7c:	88800515 	stw	r2,20(r17)
    bf80:	003f6806 	br	bd24 <_realloc_r+0x330>
    bf84:	900b883a 	mov	r5,r18
    bf88:	8809883a 	mov	r4,r17
    bf8c:	000a6bc0 	call	a6bc <memmove>
    bf90:	003fd406 	br	bee4 <_realloc_r+0x4f0>
    bf94:	90c00417 	ldw	r3,16(r18)
    bf98:	91000604 	addi	r4,r18,24
    bf9c:	ba000804 	addi	r8,r23,32
    bfa0:	b8c00615 	stw	r3,24(r23)
    bfa4:	90800517 	ldw	r2,20(r18)
    bfa8:	b8800715 	stw	r2,28(r23)
    bfac:	003f1206 	br	bbf8 <_realloc_r+0x204>
    bfb0:	90c00417 	ldw	r3,16(r18)
    bfb4:	91000604 	addi	r4,r18,24
    bfb8:	ba000804 	addi	r8,r23,32
    bfbc:	b8c00615 	stw	r3,24(r23)
    bfc0:	90800517 	ldw	r2,20(r18)
    bfc4:	b8800715 	stw	r2,28(r23)
    bfc8:	003f3206 	br	bc94 <_realloc_r+0x2a0>
    bfcc:	90c00417 	ldw	r3,16(r18)
    bfd0:	91000604 	addi	r4,r18,24
    bfd4:	b9c00804 	addi	r7,r23,32
    bfd8:	b8c00615 	stw	r3,24(r23)
    bfdc:	90800517 	ldw	r2,20(r18)
    bfe0:	b8800715 	stw	r2,28(r23)
    bfe4:	003fb906 	br	becc <_realloc_r+0x4d8>

0000bfe8 <__isinfd>:
    bfe8:	200d883a 	mov	r6,r4
    bfec:	0109c83a 	sub	r4,zero,r4
    bff0:	2188b03a 	or	r4,r4,r6
    bff4:	2008d7fa 	srli	r4,r4,31
    bff8:	00a00034 	movhi	r2,32768
    bffc:	10bfffc4 	addi	r2,r2,-1
    c000:	1144703a 	and	r2,r2,r5
    c004:	2088b03a 	or	r4,r4,r2
    c008:	009ffc34 	movhi	r2,32752
    c00c:	1105c83a 	sub	r2,r2,r4
    c010:	0087c83a 	sub	r3,zero,r2
    c014:	10c4b03a 	or	r2,r2,r3
    c018:	1004d7fa 	srli	r2,r2,31
    c01c:	00c00044 	movi	r3,1
    c020:	1885c83a 	sub	r2,r3,r2
    c024:	f800283a 	ret

0000c028 <__isnand>:
    c028:	200d883a 	mov	r6,r4
    c02c:	0109c83a 	sub	r4,zero,r4
    c030:	2188b03a 	or	r4,r4,r6
    c034:	2008d7fa 	srli	r4,r4,31
    c038:	00a00034 	movhi	r2,32768
    c03c:	10bfffc4 	addi	r2,r2,-1
    c040:	1144703a 	and	r2,r2,r5
    c044:	2088b03a 	or	r4,r4,r2
    c048:	009ffc34 	movhi	r2,32752
    c04c:	1105c83a 	sub	r2,r2,r4
    c050:	1004d7fa 	srli	r2,r2,31
    c054:	f800283a 	ret

0000c058 <__sccl>:
    c058:	28c00003 	ldbu	r3,0(r5)
    c05c:	00801784 	movi	r2,94
    c060:	2a000044 	addi	r8,r5,1
    c064:	18802526 	beq	r3,r2,c0fc <__sccl+0xa4>
    c068:	180f883a 	mov	r7,r3
    c06c:	0013883a 	mov	r9,zero
    c070:	000d883a 	mov	r6,zero
    c074:	0007883a 	mov	r3,zero
    c078:	01404004 	movi	r5,256
    c07c:	1905883a 	add	r2,r3,r4
    c080:	18c00044 	addi	r3,r3,1
    c084:	11800005 	stb	r6,0(r2)
    c088:	197ffc1e 	bne	r3,r5,c07c <__sccl+0x24>
    c08c:	38000c26 	beq	r7,zero,c0c0 <__sccl+0x68>
    c090:	00800044 	movi	r2,1
    c094:	124dc83a 	sub	r6,r2,r9
    c098:	3905883a 	add	r2,r7,r4
    c09c:	11800005 	stb	r6,0(r2)
    c0a0:	41400044 	addi	r5,r8,1
    c0a4:	02400b44 	movi	r9,45
    c0a8:	02801744 	movi	r10,93
    c0ac:	28bfffc3 	ldbu	r2,-1(r5)
    c0b0:	2811883a 	mov	r8,r5
    c0b4:	12400726 	beq	r2,r9,c0d4 <__sccl+0x7c>
    c0b8:	12800226 	beq	r2,r10,c0c4 <__sccl+0x6c>
    c0bc:	1000031e 	bne	r2,zero,c0cc <__sccl+0x74>
    c0c0:	423fffc4 	addi	r8,r8,-1
    c0c4:	4005883a 	mov	r2,r8
    c0c8:	f800283a 	ret
    c0cc:	100f883a 	mov	r7,r2
    c0d0:	003ff106 	br	c098 <__sccl+0x40>
    c0d4:	28c00003 	ldbu	r3,0(r5)
    c0d8:	1a800d26 	beq	r3,r10,c110 <__sccl+0xb8>
    c0dc:	19c00c16 	blt	r3,r7,c110 <__sccl+0xb8>
    c0e0:	21c5883a 	add	r2,r4,r7
    c0e4:	39c00044 	addi	r7,r7,1
    c0e8:	11800045 	stb	r6,1(r2)
    c0ec:	10800044 	addi	r2,r2,1
    c0f0:	38fffc16 	blt	r7,r3,c0e4 <__sccl+0x8c>
    c0f4:	29400084 	addi	r5,r5,2
    c0f8:	003fec06 	br	c0ac <__sccl+0x54>
    c0fc:	29c00043 	ldbu	r7,1(r5)
    c100:	02400044 	movi	r9,1
    c104:	2a000084 	addi	r8,r5,2
    c108:	480d883a 	mov	r6,r9
    c10c:	003fd906 	br	c074 <__sccl+0x1c>
    c110:	01c00b44 	movi	r7,45
    c114:	003fe006 	br	c098 <__sccl+0x40>

0000c118 <nanf>:
    c118:	009ff034 	movhi	r2,32704
    c11c:	f800283a 	ret

0000c120 <match>:
    c120:	21800017 	ldw	r6,0(r4)
    c124:	01c01004 	movi	r7,64
    c128:	02001684 	movi	r8,90
    c12c:	28800007 	ldb	r2,0(r5)
    c130:	29400044 	addi	r5,r5,1
    c134:	10000826 	beq	r2,zero,c158 <match+0x38>
    c138:	31800044 	addi	r6,r6,1
    c13c:	30c00007 	ldb	r3,0(r6)
    c140:	38c0020e 	bge	r7,r3,c14c <match+0x2c>
    c144:	40c00116 	blt	r8,r3,c14c <match+0x2c>
    c148:	18c00804 	addi	r3,r3,32
    c14c:	18bff726 	beq	r3,r2,c12c <match+0xc>
    c150:	0005883a 	mov	r2,zero
    c154:	f800283a 	ret
    c158:	30800044 	addi	r2,r6,1
    c15c:	20800015 	stw	r2,0(r4)
    c160:	00800044 	movi	r2,1
    c164:	f800283a 	ret

0000c168 <_strtod_r>:
    c168:	deffde04 	addi	sp,sp,-136
    c16c:	df002015 	stw	fp,128(sp)
    c170:	dd401d15 	stw	r21,116(sp)
    c174:	dc401915 	stw	r17,100(sp)
    c178:	dfc02115 	stw	ra,132(sp)
    c17c:	ddc01f15 	stw	r23,124(sp)
    c180:	dd801e15 	stw	r22,120(sp)
    c184:	dd001c15 	stw	r20,112(sp)
    c188:	dcc01b15 	stw	r19,108(sp)
    c18c:	dc801a15 	stw	r18,104(sp)
    c190:	dc001815 	stw	r16,96(sp)
    c194:	2823883a 	mov	r17,r5
    c198:	202b883a 	mov	r21,r4
    c19c:	d9801515 	stw	r6,84(sp)
    c1a0:	d8000915 	stw	zero,36(sp)
    c1a4:	d8000a15 	stw	zero,40(sp)
    c1a8:	d9400415 	stw	r5,16(sp)
    c1ac:	df000904 	addi	fp,sp,36
    c1b0:	da000417 	ldw	r8,16(sp)
    c1b4:	00800b44 	movi	r2,45
    c1b8:	40c00003 	ldbu	r3,0(r8)
    c1bc:	10c03536 	bltu	r2,r3,c294 <_strtod_r+0x12c>
    c1c0:	18c5883a 	add	r2,r3,r3
    c1c4:	1085883a 	add	r2,r2,r2
    c1c8:	00c00074 	movhi	r3,1
    c1cc:	18f07704 	addi	r3,r3,-15908
    c1d0:	10c5883a 	add	r2,r2,r3
    c1d4:	11000017 	ldw	r4,0(r2)
    c1d8:	2000683a 	jmp	r4
    c1dc:	0000c3d0 	cmplti	zero,zero,783
    c1e0:	0000c294 	movui	zero,778
    c1e4:	0000c294 	movui	zero,778
    c1e8:	0000c294 	movui	zero,778
    c1ec:	0000c294 	movui	zero,778
    c1f0:	0000c294 	movui	zero,778
    c1f4:	0000c294 	movui	zero,778
    c1f8:	0000c294 	movui	zero,778
    c1fc:	0000c294 	movui	zero,778
    c200:	0000c6e8 	cmpgeui	zero,zero,795
    c204:	0000c6e8 	cmpgeui	zero,zero,795
    c208:	0000c6e8 	cmpgeui	zero,zero,795
    c20c:	0000c6e8 	cmpgeui	zero,zero,795
    c210:	0000c6e8 	cmpgeui	zero,zero,795
    c214:	0000c294 	movui	zero,778
    c218:	0000c294 	movui	zero,778
    c21c:	0000c294 	movui	zero,778
    c220:	0000c294 	movui	zero,778
    c224:	0000c294 	movui	zero,778
    c228:	0000c294 	movui	zero,778
    c22c:	0000c294 	movui	zero,778
    c230:	0000c294 	movui	zero,778
    c234:	0000c294 	movui	zero,778
    c238:	0000c294 	movui	zero,778
    c23c:	0000c294 	movui	zero,778
    c240:	0000c294 	movui	zero,778
    c244:	0000c294 	movui	zero,778
    c248:	0000c294 	movui	zero,778
    c24c:	0000c294 	movui	zero,778
    c250:	0000c294 	movui	zero,778
    c254:	0000c294 	movui	zero,778
    c258:	0000c294 	movui	zero,778
    c25c:	0000c6e8 	cmpgeui	zero,zero,795
    c260:	0000c294 	movui	zero,778
    c264:	0000c294 	movui	zero,778
    c268:	0000c294 	movui	zero,778
    c26c:	0000c294 	movui	zero,778
    c270:	0000c294 	movui	zero,778
    c274:	0000c294 	movui	zero,778
    c278:	0000c294 	movui	zero,778
    c27c:	0000c294 	movui	zero,778
    c280:	0000c294 	movui	zero,778
    c284:	0000c294 	movui	zero,778
    c288:	0000c6c8 	cmpgei	zero,zero,795
    c28c:	0000c294 	movui	zero,778
    c290:	0000c6f4 	movhi	zero,795
    c294:	d8001115 	stw	zero,68(sp)
    c298:	40c00007 	ldb	r3,0(r8)
    c29c:	00800c04 	movi	r2,48
    c2a0:	1880d026 	beq	r3,r2,c5e4 <_strtod_r+0x47c>
    c2a4:	001f883a 	mov	r15,zero
    c2a8:	41000007 	ldb	r4,0(r8)
    c2ac:	00c00bc4 	movi	r3,47
    c2b0:	402d883a 	mov	r22,r8
    c2b4:	1903470e 	bge	r3,r4,cfd4 <_strtod_r+0xe6c>
    c2b8:	00800e44 	movi	r2,57
    c2bc:	11034516 	blt	r2,r4,cfd4 <_strtod_r+0xe6c>
    c2c0:	180f883a 	mov	r7,r3
    c2c4:	1013883a 	mov	r9,r2
    c2c8:	4007883a 	mov	r3,r8
    c2cc:	000d883a 	mov	r6,zero
    c2d0:	0029883a 	mov	r20,zero
    c2d4:	0021883a 	mov	r16,zero
    c2d8:	01400204 	movi	r5,8
    c2dc:	028003c4 	movi	r10,15
    c2e0:	29803116 	blt	r5,r6,c3a8 <_strtod_r+0x240>
    c2e4:	a08002a4 	muli	r2,r20,10
    c2e8:	1105883a 	add	r2,r2,r4
    c2ec:	153ff404 	addi	r20,r2,-48
    c2f0:	1a000044 	addi	r8,r3,1
    c2f4:	da000415 	stw	r8,16(sp)
    c2f8:	41000007 	ldb	r4,0(r8)
    c2fc:	31800044 	addi	r6,r6,1
    c300:	4007883a 	mov	r3,r8
    c304:	3900010e 	bge	r7,r4,c30c <_strtod_r+0x1a4>
    c308:	493ff50e 	bge	r9,r4,c2e0 <_strtod_r+0x178>
    c30c:	00800b84 	movi	r2,46
    c310:	2080c126 	beq	r4,r2,c618 <_strtod_r+0x4b0>
    c314:	3027883a 	mov	r19,r6
    c318:	0025883a 	mov	r18,zero
    c31c:	0015883a 	mov	r10,zero
    c320:	000f883a 	mov	r7,zero
    c324:	00801944 	movi	r2,101
    c328:	20802426 	beq	r4,r2,c3bc <_strtod_r+0x254>
    c32c:	00801144 	movi	r2,69
    c330:	20802226 	beq	r4,r2,c3bc <_strtod_r+0x254>
    c334:	9816c03a 	cmpne	r11,r19,zero
    c338:	000b883a 	mov	r5,zero
    c33c:	5800631e 	bne	r11,zero,c4cc <_strtod_r+0x364>
    c340:	3800c126 	beq	r7,zero,c648 <_strtod_r+0x4e0>
    c344:	d8c01517 	ldw	r3,84(sp)
    c348:	18000226 	beq	r3,zero,c354 <_strtod_r+0x1ec>
    c34c:	d8800417 	ldw	r2,16(sp)
    c350:	18800015 	stw	r2,0(r3)
    c354:	d9001117 	ldw	r4,68(sp)
    c358:	2005003a 	cmpeq	r2,r4,zero
    c35c:	10001f1e 	bne	r2,zero,c3dc <_strtod_r+0x274>
    c360:	e0800017 	ldw	r2,0(fp)
    c364:	e0c00117 	ldw	r3,4(fp)
    c368:	1009883a 	mov	r4,r2
    c36c:	1960003c 	xorhi	r5,r3,32768
    c370:	2005883a 	mov	r2,r4
    c374:	2807883a 	mov	r3,r5
    c378:	dfc02117 	ldw	ra,132(sp)
    c37c:	df002017 	ldw	fp,128(sp)
    c380:	ddc01f17 	ldw	r23,124(sp)
    c384:	dd801e17 	ldw	r22,120(sp)
    c388:	dd401d17 	ldw	r21,116(sp)
    c38c:	dd001c17 	ldw	r20,112(sp)
    c390:	dcc01b17 	ldw	r19,108(sp)
    c394:	dc801a17 	ldw	r18,104(sp)
    c398:	dc401917 	ldw	r17,100(sp)
    c39c:	dc001817 	ldw	r16,96(sp)
    c3a0:	dec02204 	addi	sp,sp,136
    c3a4:	f800283a 	ret
    c3a8:	51bfd116 	blt	r10,r6,c2f0 <_strtod_r+0x188>
    c3ac:	808002a4 	muli	r2,r16,10
    c3b0:	1105883a 	add	r2,r2,r4
    c3b4:	143ff404 	addi	r16,r2,-48
    c3b8:	003fcd06 	br	c2f0 <_strtod_r+0x188>
    c3bc:	9816c03a 	cmpne	r11,r19,zero
    c3c0:	5800091e 	bne	r11,zero,c3e8 <_strtod_r+0x280>
    c3c4:	3800081e 	bne	r7,zero,c3e8 <_strtod_r+0x280>
    c3c8:	7805003a 	cmpeq	r2,r15,zero
    c3cc:	10000626 	beq	r2,zero,c3e8 <_strtod_r+0x280>
    c3d0:	d8001115 	stw	zero,68(sp)
    c3d4:	dc400415 	stw	r17,16(sp)
    c3d8:	003fda06 	br	c344 <_strtod_r+0x1dc>
    c3dc:	e1000017 	ldw	r4,0(fp)
    c3e0:	e1400117 	ldw	r5,4(fp)
    c3e4:	003fe206 	br	c370 <_strtod_r+0x208>
    c3e8:	dc400417 	ldw	r17,16(sp)
    c3ec:	00800ac4 	movi	r2,43
    c3f0:	8a000044 	addi	r8,r17,1
    c3f4:	da000415 	stw	r8,16(sp)
    c3f8:	88c00047 	ldb	r3,1(r17)
    c3fc:	4009883a 	mov	r4,r8
    c400:	1880bf26 	beq	r3,r2,c700 <_strtod_r+0x598>
    c404:	00800b44 	movi	r2,45
    c408:	18834526 	beq	r3,r2,d120 <_strtod_r+0xfb8>
    c40c:	1809883a 	mov	r4,r3
    c410:	20fff404 	addi	r3,r4,-48
    c414:	00800244 	movi	r2,9
    c418:	001d883a 	mov	r14,zero
    c41c:	10c0bf36 	bltu	r2,r3,c71c <_strtod_r+0x5b4>
    c420:	00800c04 	movi	r2,48
    c424:	2080061e 	bne	r4,r2,c440 <_strtod_r+0x2d8>
    c428:	da000417 	ldw	r8,16(sp)
    c42c:	2005883a 	mov	r2,r4
    c430:	42000044 	addi	r8,r8,1
    c434:	da000415 	stw	r8,16(sp)
    c438:	41000007 	ldb	r4,0(r8)
    c43c:	20bffc26 	beq	r4,r2,c430 <_strtod_r+0x2c8>
    c440:	20fff3c4 	addi	r3,r4,-49
    c444:	00800204 	movi	r2,8
    c448:	10ffbb36 	bltu	r2,r3,c338 <_strtod_r+0x1d0>
    c44c:	da000417 	ldw	r8,16(sp)
    c450:	227ff404 	addi	r9,r4,-48
    c454:	03000bc4 	movi	r12,47
    c458:	4007883a 	mov	r3,r8
    c45c:	42000044 	addi	r8,r8,1
    c460:	da000415 	stw	r8,16(sp)
    c464:	41000007 	ldb	r4,0(r8)
    c468:	61000d0e 	bge	r12,r4,c4a0 <_strtod_r+0x338>
    c46c:	00800e44 	movi	r2,57
    c470:	11000b16 	blt	r2,r4,c4a0 <_strtod_r+0x338>
    c474:	601b883a 	mov	r13,r12
    c478:	1019883a 	mov	r12,r2
    c47c:	00000106 	br	c484 <_strtod_r+0x31c>
    c480:	61000716 	blt	r12,r4,c4a0 <_strtod_r+0x338>
    c484:	488002a4 	muli	r2,r9,10
    c488:	42000044 	addi	r8,r8,1
    c48c:	da000415 	stw	r8,16(sp)
    c490:	2085883a 	add	r2,r4,r2
    c494:	41000007 	ldb	r4,0(r8)
    c498:	127ff404 	addi	r9,r2,-48
    c49c:	693ff816 	blt	r13,r4,c480 <_strtod_r+0x318>
    c4a0:	40c7c83a 	sub	r3,r8,r3
    c4a4:	00800204 	movi	r2,8
    c4a8:	10c2e416 	blt	r2,r3,d03c <_strtod_r+0xed4>
    c4ac:	009387c4 	movi	r2,19999
    c4b0:	480b883a 	mov	r5,r9
    c4b4:	1240010e 	bge	r2,r9,c4bc <_strtod_r+0x354>
    c4b8:	100b883a 	mov	r5,r2
    c4bc:	7005003a 	cmpeq	r2,r14,zero
    c4c0:	103f9e1e 	bne	r2,zero,c33c <_strtod_r+0x1d4>
    c4c4:	014bc83a 	sub	r5,zero,r5
    c4c8:	583f9d26 	beq	r11,zero,c340 <_strtod_r+0x1d8>
    c4cc:	2a8bc83a 	sub	r5,r5,r10
    c4d0:	d9400f15 	stw	r5,60(sp)
    c4d4:	30007a1e 	bne	r6,zero,c6c0 <_strtod_r+0x558>
    c4d8:	dcc01215 	stw	r19,72(sp)
    c4dc:	00800404 	movi	r2,16
    c4e0:	9825883a 	mov	r18,r19
    c4e4:	14c0010e 	bge	r2,r19,c4ec <_strtod_r+0x384>
    c4e8:	1025883a 	mov	r18,r2
    c4ec:	a009883a 	mov	r4,r20
    c4f0:	00112140 	call	11214 <__floatunsidf>
    c4f4:	100f883a 	mov	r7,r2
    c4f8:	e0800015 	stw	r2,0(fp)
    c4fc:	00800244 	movi	r2,9
    c500:	e0c00115 	stw	r3,4(fp)
    c504:	1480160e 	bge	r2,r18,c560 <_strtod_r+0x3f8>
    c508:	900c90fa 	slli	r6,r18,3
    c50c:	01000074 	movhi	r4,1
    c510:	21143a04 	addi	r4,r4,20712
    c514:	180b883a 	mov	r5,r3
    c518:	310d883a 	add	r6,r6,r4
    c51c:	30ffef17 	ldw	r3,-68(r6)
    c520:	30bfee17 	ldw	r2,-72(r6)
    c524:	3809883a 	mov	r4,r7
    c528:	180f883a 	mov	r7,r3
    c52c:	100d883a 	mov	r6,r2
    c530:	00106840 	call	10684 <__muldf3>
    c534:	8009883a 	mov	r4,r16
    c538:	1823883a 	mov	r17,r3
    c53c:	1021883a 	mov	r16,r2
    c540:	00112140 	call	11214 <__floatunsidf>
    c544:	880b883a 	mov	r5,r17
    c548:	180f883a 	mov	r7,r3
    c54c:	8009883a 	mov	r4,r16
    c550:	100d883a 	mov	r6,r2
    c554:	00106100 	call	10610 <__adddf3>
    c558:	e0c00115 	stw	r3,4(fp)
    c55c:	e0800015 	stw	r2,0(fp)
    c560:	010003c4 	movi	r4,15
    c564:	24c09816 	blt	r4,r19,c7c8 <_strtod_r+0x660>
    c568:	d9800f17 	ldw	r6,60(sp)
    c56c:	303f7526 	beq	r6,zero,c344 <_strtod_r+0x1dc>
    c570:	0183be0e 	bge	zero,r6,d46c <_strtod_r+0x1304>
    c574:	00800584 	movi	r2,22
    c578:	1182b20e 	bge	r2,r6,d044 <_strtod_r+0xedc>
    c57c:	d8c00f17 	ldw	r3,60(sp)
    c580:	24e3c83a 	sub	r17,r4,r19
    c584:	88800584 	addi	r2,r17,22
    c588:	10c08f16 	blt	r2,r3,c7c8 <_strtod_r+0x660>
    c58c:	880890fa 	slli	r4,r17,3
    c590:	04000074 	movhi	r16,1
    c594:	84143a04 	addi	r16,r16,20712
    c598:	e0800017 	ldw	r2,0(fp)
    c59c:	2409883a 	add	r4,r4,r16
    c5a0:	22000017 	ldw	r8,0(r4)
    c5a4:	22400117 	ldw	r9,4(r4)
    c5a8:	e0c00117 	ldw	r3,4(fp)
    c5ac:	1009883a 	mov	r4,r2
    c5b0:	480f883a 	mov	r7,r9
    c5b4:	180b883a 	mov	r5,r3
    c5b8:	400d883a 	mov	r6,r8
    c5bc:	00106840 	call	10684 <__muldf3>
    c5c0:	d9000f17 	ldw	r4,60(sp)
    c5c4:	180b883a 	mov	r5,r3
    c5c8:	2455c83a 	sub	r10,r4,r17
    c5cc:	501490fa 	slli	r10,r10,3
    c5d0:	1009883a 	mov	r4,r2
    c5d4:	5415883a 	add	r10,r10,r16
    c5d8:	52000017 	ldw	r8,0(r10)
    c5dc:	52400117 	ldw	r9,4(r10)
    c5e0:	0002a206 	br	d06c <_strtod_r+0xf04>
    c5e4:	40c00047 	ldb	r3,1(r8)
    c5e8:	00801604 	movi	r2,88
    c5ec:	18804e26 	beq	r3,r2,c728 <_strtod_r+0x5c0>
    c5f0:	00801e04 	movi	r2,120
    c5f4:	18804c26 	beq	r3,r2,c728 <_strtod_r+0x5c0>
    c5f8:	42000044 	addi	r8,r8,1
    c5fc:	da000415 	stw	r8,16(sp)
    c600:	40c00007 	ldb	r3,0(r8)
    c604:	00800c04 	movi	r2,48
    c608:	18bffb26 	beq	r3,r2,c5f8 <_strtod_r+0x490>
    c60c:	183f4d26 	beq	r3,zero,c344 <_strtod_r+0x1dc>
    c610:	03c00044 	movi	r15,1
    c614:	003f2406 	br	c2a8 <_strtod_r+0x140>
    c618:	42000044 	addi	r8,r8,1
    c61c:	da000415 	stw	r8,16(sp)
    c620:	19000047 	ldb	r4,1(r3)
    c624:	3000b726 	beq	r6,zero,c904 <_strtod_r+0x79c>
    c628:	3027883a 	mov	r19,r6
    c62c:	0015883a 	mov	r10,zero
    c630:	000f883a 	mov	r7,zero
    c634:	227ff404 	addi	r9,r4,-48
    c638:	00800244 	movi	r2,9
    c63c:	1242592e 	bgeu	r2,r9,cfa4 <_strtod_r+0xe3c>
    c640:	04800044 	movi	r18,1
    c644:	003f3706 	br	c324 <_strtod_r+0x1bc>
    c648:	7804c03a 	cmpne	r2,r15,zero
    c64c:	103f3d1e 	bne	r2,zero,c344 <_strtod_r+0x1dc>
    c650:	9004c03a 	cmpne	r2,r18,zero
    c654:	103f5e1e 	bne	r2,zero,c3d0 <_strtod_r+0x268>
    c658:	00801384 	movi	r2,78
    c65c:	2083a226 	beq	r4,r2,d4e8 <_strtod_r+0x1380>
    c660:	11039d16 	blt	r2,r4,d4d8 <_strtod_r+0x1370>
    c664:	00801244 	movi	r2,73
    c668:	20bf591e 	bne	r4,r2,c3d0 <_strtod_r+0x268>
    c66c:	dc000404 	addi	r16,sp,16
    c670:	8009883a 	mov	r4,r16
    c674:	01400074 	movhi	r5,1
    c678:	29548304 	addi	r5,r5,21004
    c67c:	000c1200 	call	c120 <match>
    c680:	103f5326 	beq	r2,zero,c3d0 <_strtod_r+0x268>
    c684:	d8800417 	ldw	r2,16(sp)
    c688:	8009883a 	mov	r4,r16
    c68c:	01400074 	movhi	r5,1
    c690:	29548404 	addi	r5,r5,21008
    c694:	123fffc4 	addi	r8,r2,-1
    c698:	da000415 	stw	r8,16(sp)
    c69c:	000c1200 	call	c120 <match>
    c6a0:	1000031e 	bne	r2,zero,c6b0 <_strtod_r+0x548>
    c6a4:	d8800417 	ldw	r2,16(sp)
    c6a8:	12000044 	addi	r8,r2,1
    c6ac:	da000415 	stw	r8,16(sp)
    c6b0:	019ffc34 	movhi	r6,32752
    c6b4:	e1800115 	stw	r6,4(fp)
    c6b8:	e0000015 	stw	zero,0(fp)
    c6bc:	003f2106 	br	c344 <_strtod_r+0x1dc>
    c6c0:	d9801215 	stw	r6,72(sp)
    c6c4:	003f8506 	br	c4dc <_strtod_r+0x374>
    c6c8:	d8001115 	stw	zero,68(sp)
    c6cc:	42000044 	addi	r8,r8,1
    c6d0:	da000415 	stw	r8,16(sp)
    c6d4:	40800007 	ldb	r2,0(r8)
    c6d8:	103eef1e 	bne	r2,zero,c298 <_strtod_r+0x130>
    c6dc:	d8001115 	stw	zero,68(sp)
    c6e0:	dc400415 	stw	r17,16(sp)
    c6e4:	003f1706 	br	c344 <_strtod_r+0x1dc>
    c6e8:	42000044 	addi	r8,r8,1
    c6ec:	da000415 	stw	r8,16(sp)
    c6f0:	003eaf06 	br	c1b0 <_strtod_r+0x48>
    c6f4:	00800044 	movi	r2,1
    c6f8:	d8801115 	stw	r2,68(sp)
    c6fc:	003ff306 	br	c6cc <_strtod_r+0x564>
    c700:	001d883a 	mov	r14,zero
    c704:	42000044 	addi	r8,r8,1
    c708:	da000415 	stw	r8,16(sp)
    c70c:	21000047 	ldb	r4,1(r4)
    c710:	00800244 	movi	r2,9
    c714:	20fff404 	addi	r3,r4,-48
    c718:	10ff412e 	bgeu	r2,r3,c420 <_strtod_r+0x2b8>
    c71c:	000b883a 	mov	r5,zero
    c720:	dc400415 	stw	r17,16(sp)
    c724:	003f0506 	br	c33c <_strtod_r+0x1d4>
    c728:	d8c01117 	ldw	r3,68(sp)
    c72c:	04800074 	movhi	r18,1
    c730:	94970f04 	addi	r18,r18,23612
    c734:	d8800504 	addi	r2,sp,20
    c738:	a809883a 	mov	r4,r21
    c73c:	d9400404 	addi	r5,sp,16
    c740:	900d883a 	mov	r6,r18
    c744:	d9c00604 	addi	r7,sp,24
    c748:	d8800015 	stw	r2,0(sp)
    c74c:	d8c00115 	stw	r3,4(sp)
    c750:	000e8940 	call	e894 <__gethex>
    c754:	140001cc 	andi	r16,r2,7
    c758:	1027883a 	mov	r19,r2
    c75c:	803ef926 	beq	r16,zero,c344 <_strtod_r+0x1dc>
    c760:	05000184 	movi	r20,6
    c764:	853f1a26 	beq	r16,r20,c3d0 <_strtod_r+0x268>
    c768:	d9800517 	ldw	r6,20(sp)
    c76c:	30000626 	beq	r6,zero,c788 <_strtod_r+0x620>
    c770:	91400017 	ldw	r5,0(r18)
    c774:	d9000d04 	addi	r4,sp,52
    c778:	000ac3c0 	call	ac3c <__copybits>
    c77c:	d9400517 	ldw	r5,20(sp)
    c780:	a809883a 	mov	r4,r21
    c784:	000a79c0 	call	a79c <_Bfree>
    c788:	d9400617 	ldw	r5,24(sp)
    c78c:	a4024136 	bltu	r20,r16,d094 <_strtod_r+0xf2c>
    c790:	8405883a 	add	r2,r16,r16
    c794:	1085883a 	add	r2,r2,r2
    c798:	00c00074 	movhi	r3,1
    c79c:	18f1eb04 	addi	r3,r3,-14420
    c7a0:	10c5883a 	add	r2,r2,r3
    c7a4:	11000017 	ldw	r4,0(r2)
    c7a8:	2000683a 	jmp	r4
    c7ac:	0000d0d4 	movui	zero,835
    c7b0:	0000d0e0 	cmpeqi	zero,zero,835
    c7b4:	0000d084 	movi	zero,834
    c7b8:	0000d0ac 	andhi	zero,zero,834
    c7bc:	0000d0bc 	xorhi	zero,zero,834
    c7c0:	0000d0e0 	cmpeqi	zero,zero,835
    c7c4:	0000d0d4 	movui	zero,835
    c7c8:	d8c00f17 	ldw	r3,60(sp)
    c7cc:	9c85c83a 	sub	r2,r19,r18
    c7d0:	18a1883a 	add	r16,r3,r2
    c7d4:	0402d00e 	bge	zero,r16,d318 <_strtod_r+0x11b0>
    c7d8:	814003cc 	andi	r5,r16,15
    c7dc:	28000f26 	beq	r5,zero,c81c <_strtod_r+0x6b4>
    c7e0:	280a90fa 	slli	r5,r5,3
    c7e4:	01000074 	movhi	r4,1
    c7e8:	21143a04 	addi	r4,r4,20712
    c7ec:	e0800017 	ldw	r2,0(fp)
    c7f0:	290b883a 	add	r5,r5,r4
    c7f4:	2a000017 	ldw	r8,0(r5)
    c7f8:	e0c00117 	ldw	r3,4(fp)
    c7fc:	2a400117 	ldw	r9,4(r5)
    c800:	1009883a 	mov	r4,r2
    c804:	180b883a 	mov	r5,r3
    c808:	480f883a 	mov	r7,r9
    c80c:	400d883a 	mov	r6,r8
    c810:	00106840 	call	10684 <__muldf3>
    c814:	e0c00115 	stw	r3,4(fp)
    c818:	e0800015 	stw	r2,0(fp)
    c81c:	00bffc04 	movi	r2,-16
    c820:	808c703a 	and	r6,r16,r2
    c824:	30005b26 	beq	r6,zero,c994 <_strtod_r+0x82c>
    c828:	00804d04 	movi	r2,308
    c82c:	1181fd16 	blt	r2,r6,d024 <_strtod_r+0xebc>
    c830:	3021d13a 	srai	r16,r6,4
    c834:	00800044 	movi	r2,1
    c838:	1403610e 	bge	r2,r16,d5c0 <_strtod_r+0x1458>
    c83c:	102f883a 	mov	r23,r2
    c840:	0025883a 	mov	r18,zero
    c844:	04400074 	movhi	r17,1
    c848:	8c546c04 	addi	r17,r17,20912
    c84c:	8080004c 	andi	r2,r16,1
    c850:	1005003a 	cmpeq	r2,r2,zero
    c854:	1000091e 	bne	r2,zero,c87c <_strtod_r+0x714>
    c858:	e0800017 	ldw	r2,0(fp)
    c85c:	e0c00117 	ldw	r3,4(fp)
    c860:	89800017 	ldw	r6,0(r17)
    c864:	89c00117 	ldw	r7,4(r17)
    c868:	180b883a 	mov	r5,r3
    c86c:	1009883a 	mov	r4,r2
    c870:	00106840 	call	10684 <__muldf3>
    c874:	e0c00115 	stw	r3,4(fp)
    c878:	e0800015 	stw	r2,0(fp)
    c87c:	8021d07a 	srai	r16,r16,1
    c880:	94800044 	addi	r18,r18,1
    c884:	8c400204 	addi	r17,r17,8
    c888:	bc3ff016 	blt	r23,r16,c84c <_strtod_r+0x6e4>
    c88c:	900e90fa 	slli	r7,r18,3
    c890:	01800074 	movhi	r6,1
    c894:	31946c04 	addi	r6,r6,20912
    c898:	e2000117 	ldw	r8,4(fp)
    c89c:	398f883a 	add	r7,r7,r6
    c8a0:	38800017 	ldw	r2,0(r7)
    c8a4:	38c00117 	ldw	r3,4(r7)
    c8a8:	e1000017 	ldw	r4,0(fp)
    c8ac:	01bf2c34 	movhi	r6,64688
    c8b0:	418d883a 	add	r6,r8,r6
    c8b4:	300b883a 	mov	r5,r6
    c8b8:	180f883a 	mov	r7,r3
    c8bc:	100d883a 	mov	r6,r2
    c8c0:	00106840 	call	10684 <__muldf3>
    c8c4:	1009883a 	mov	r4,r2
    c8c8:	180b883a 	mov	r5,r3
    c8cc:	199ffc2c 	andhi	r6,r3,32752
    c8d0:	009f2834 	movhi	r2,31904
    c8d4:	e1000015 	stw	r4,0(fp)
    c8d8:	e1400115 	stw	r5,4(fp)
    c8dc:	1181d136 	bltu	r2,r6,d024 <_strtod_r+0xebc>
    c8e0:	009f2434 	movhi	r2,31888
    c8e4:	1183202e 	bgeu	r2,r6,d568 <_strtod_r+0x1400>
    c8e8:	d8001415 	stw	zero,80(sp)
    c8ec:	019ffc34 	movhi	r6,32752
    c8f0:	31bfffc4 	addi	r6,r6,-1
    c8f4:	01ffffc4 	movi	r7,-1
    c8f8:	e1800115 	stw	r6,4(fp)
    c8fc:	e1c00015 	stw	r7,0(fp)
    c900:	00002506 	br	c998 <_strtod_r+0x830>
    c904:	00800c04 	movi	r2,48
    c908:	2083151e 	bne	r4,r2,d560 <_strtod_r+0x13f8>
    c90c:	2005883a 	mov	r2,r4
    c910:	000f883a 	mov	r7,zero
    c914:	42000044 	addi	r8,r8,1
    c918:	da000415 	stw	r8,16(sp)
    c91c:	41000007 	ldb	r4,0(r8)
    c920:	39c00044 	addi	r7,r7,1
    c924:	20bffb26 	beq	r4,r2,c914 <_strtod_r+0x7ac>
    c928:	20fff3c4 	addi	r3,r4,-49
    c92c:	00800204 	movi	r2,8
    c930:	10c1b836 	bltu	r2,r3,d014 <_strtod_r+0xeac>
    c934:	dd800417 	ldw	r22,16(sp)
    c938:	3815883a 	mov	r10,r7
    c93c:	227ff404 	addi	r9,r4,-48
    c940:	b011883a 	mov	r8,r22
    c944:	0027883a 	mov	r19,zero
    c948:	01c00044 	movi	r7,1
    c94c:	4801fe26 	beq	r9,zero,d148 <_strtod_r+0xfe0>
    c950:	00800044 	movi	r2,1
    c954:	51d5883a 	add	r10,r10,r7
    c958:	11c31f0e 	bge	r2,r7,d5d8 <_strtod_r+0x1470>
    c95c:	1009883a 	mov	r4,r2
    c960:	9807883a 	mov	r3,r19
    c964:	02c00204 	movi	r11,8
    c968:	03000404 	movi	r12,16
    c96c:	00000306 	br	c97c <_strtod_r+0x814>
    c970:	a50002a4 	muli	r20,r20,10
    c974:	21000044 	addi	r4,r4,1
    c978:	21c1eb26 	beq	r4,r7,d128 <_strtod_r+0xfc0>
    c97c:	18c00044 	addi	r3,r3,1
    c980:	18bfffc4 	addi	r2,r3,-1
    c984:	58bffa0e 	bge	r11,r2,c970 <_strtod_r+0x808>
    c988:	60fffa16 	blt	r12,r3,c974 <_strtod_r+0x80c>
    c98c:	840002a4 	muli	r16,r16,10
    c990:	003ff806 	br	c974 <_strtod_r+0x80c>
    c994:	d8001415 	stw	zero,80(sp)
    c998:	d9801217 	ldw	r6,72(sp)
    c99c:	a809883a 	mov	r4,r21
    c9a0:	b00b883a 	mov	r5,r22
    c9a4:	980f883a 	mov	r7,r19
    c9a8:	dd000015 	stw	r20,0(sp)
    c9ac:	000b6700 	call	b670 <__s2b>
    c9b0:	d9800f17 	ldw	r6,60(sp)
    c9b4:	11000304 	addi	r4,r2,12
    c9b8:	d8801015 	stw	r2,64(sp)
    c9bc:	300c803a 	cmplt	r6,r6,zero
    c9c0:	d9001715 	stw	r4,92(sp)
    c9c4:	d9801615 	stw	r6,88(sp)
    c9c8:	d8801017 	ldw	r2,64(sp)
    c9cc:	a809883a 	mov	r4,r21
    c9d0:	11400117 	ldw	r5,4(r2)
    c9d4:	000ad1c0 	call	ad1c <_Balloc>
    c9d8:	d8c01017 	ldw	r3,64(sp)
    c9dc:	d9401717 	ldw	r5,92(sp)
    c9e0:	11000304 	addi	r4,r2,12
    c9e4:	19800417 	ldw	r6,16(r3)
    c9e8:	102f883a 	mov	r23,r2
    c9ec:	318d883a 	add	r6,r6,r6
    c9f0:	318d883a 	add	r6,r6,r6
    c9f4:	31800204 	addi	r6,r6,8
    c9f8:	00039640 	call	3964 <memcpy>
    c9fc:	e2000017 	ldw	r8,0(fp)
    ca00:	e2400117 	ldw	r9,4(fp)
    ca04:	d9800304 	addi	r6,sp,12
    ca08:	400b883a 	mov	r5,r8
    ca0c:	a809883a 	mov	r4,r21
    ca10:	d9c00204 	addi	r7,sp,8
    ca14:	d9800015 	stw	r6,0(sp)
    ca18:	480d883a 	mov	r6,r9
    ca1c:	000add80 	call	add8 <__d2b>
    ca20:	a809883a 	mov	r4,r21
    ca24:	01400044 	movi	r5,1
    ca28:	d8800515 	stw	r2,20(sp)
    ca2c:	000b4140 	call	b414 <__i2b>
    ca30:	102d883a 	mov	r22,r2
    ca34:	d8801617 	ldw	r2,88(sp)
    ca38:	1001051e 	bne	r2,zero,ce50 <_strtod_r+0xce8>
    ca3c:	dd000f17 	ldw	r20,60(sp)
    ca40:	000f883a 	mov	r7,zero
    ca44:	0013883a 	mov	r9,zero
    ca48:	a011883a 	mov	r8,r20
    ca4c:	d8800217 	ldw	r2,8(sp)
    ca50:	1000fd16 	blt	r2,zero,ce48 <_strtod_r+0xce0>
    ca54:	388f883a 	add	r7,r7,r2
    ca58:	d9801417 	ldw	r6,80(sp)
    ca5c:	d9400317 	ldw	r5,12(sp)
    ca60:	00ff0084 	movi	r3,-1022
    ca64:	1189c83a 	sub	r4,r2,r6
    ca68:	2145883a 	add	r2,r4,r5
    ca6c:	10bfffc4 	addi	r2,r2,-1
    ca70:	10c09f0e 	bge	r2,r3,ccf0 <_strtod_r+0xb88>
    ca74:	21810cc4 	addi	r6,r4,1075
    ca78:	d8c01417 	ldw	r3,80(sp)
    ca7c:	4185883a 	add	r2,r8,r6
    ca80:	39a1883a 	add	r16,r7,r6
    ca84:	18a5883a 	add	r18,r3,r2
    ca88:	3807883a 	mov	r3,r7
    ca8c:	81c0010e 	bge	r16,r7,ca94 <_strtod_r+0x92c>
    ca90:	8007883a 	mov	r3,r16
    ca94:	9005883a 	mov	r2,r18
    ca98:	1c80010e 	bge	r3,r18,caa0 <_strtod_r+0x938>
    ca9c:	1805883a 	mov	r2,r3
    caa0:	0080e70e 	bge	zero,r2,ce40 <_strtod_r+0xcd8>
    caa4:	38a7c83a 	sub	r19,r7,r2
    caa8:	80a1c83a 	sub	r16,r16,r2
    caac:	90a5c83a 	sub	r18,r18,r2
    cab0:	02400e0e 	bge	zero,r9,caec <_strtod_r+0x984>
    cab4:	480d883a 	mov	r6,r9
    cab8:	b00b883a 	mov	r5,r22
    cabc:	a809883a 	mov	r4,r21
    cac0:	000b5500 	call	b550 <__pow5mult>
    cac4:	d9800517 	ldw	r6,20(sp)
    cac8:	a809883a 	mov	r4,r21
    cacc:	100b883a 	mov	r5,r2
    cad0:	102d883a 	mov	r22,r2
    cad4:	000b22c0 	call	b22c <__multiply>
    cad8:	d9400517 	ldw	r5,20(sp)
    cadc:	1023883a 	mov	r17,r2
    cae0:	a809883a 	mov	r4,r21
    cae4:	000a79c0 	call	a79c <_Bfree>
    cae8:	dc400515 	stw	r17,20(sp)
    caec:	0400050e 	bge	zero,r16,cb04 <_strtod_r+0x99c>
    caf0:	d9400517 	ldw	r5,20(sp)
    caf4:	800d883a 	mov	r6,r16
    caf8:	a809883a 	mov	r4,r21
    cafc:	000b0e00 	call	b0e0 <__lshift>
    cb00:	d8800515 	stw	r2,20(sp)
    cb04:	a000741e 	bne	r20,zero,ccd8 <_strtod_r+0xb70>
    cb08:	0480050e 	bge	zero,r18,cb20 <_strtod_r+0x9b8>
    cb0c:	b80b883a 	mov	r5,r23
    cb10:	900d883a 	mov	r6,r18
    cb14:	a809883a 	mov	r4,r21
    cb18:	000b0e00 	call	b0e0 <__lshift>
    cb1c:	102f883a 	mov	r23,r2
    cb20:	04c0050e 	bge	zero,r19,cb38 <_strtod_r+0x9d0>
    cb24:	b00b883a 	mov	r5,r22
    cb28:	980d883a 	mov	r6,r19
    cb2c:	a809883a 	mov	r4,r21
    cb30:	000b0e00 	call	b0e0 <__lshift>
    cb34:	102d883a 	mov	r22,r2
    cb38:	d9400517 	ldw	r5,20(sp)
    cb3c:	a809883a 	mov	r4,r21
    cb40:	b80d883a 	mov	r6,r23
    cb44:	000af540 	call	af54 <__mdiff>
    cb48:	11000317 	ldw	r4,12(r2)
    cb4c:	b00b883a 	mov	r5,r22
    cb50:	10000315 	stw	zero,12(r2)
    cb54:	d9001315 	stw	r4,76(sp)
    cb58:	1009883a 	mov	r4,r2
    cb5c:	1029883a 	mov	r20,r2
    cb60:	000a8f80 	call	a8f8 <__mcmp>
    cb64:	10017c16 	blt	r2,zero,d158 <_strtod_r+0xff0>
    cb68:	1001af26 	beq	r2,zero,d228 <_strtod_r+0x10c0>
    cb6c:	a009883a 	mov	r4,r20
    cb70:	b00b883a 	mov	r5,r22
    cb74:	000aaf80 	call	aaf8 <__ratio>
    cb78:	0011883a 	mov	r8,zero
    cb7c:	02500034 	movhi	r9,16384
    cb80:	480f883a 	mov	r7,r9
    cb84:	1009883a 	mov	r4,r2
    cb88:	180b883a 	mov	r5,r3
    cb8c:	400d883a 	mov	r6,r8
    cb90:	1021883a 	mov	r16,r2
    cb94:	1823883a 	mov	r17,r3
    cb98:	0010f480 	call	10f48 <__ledf2>
    cb9c:	00805716 	blt	zero,r2,ccfc <_strtod_r+0xb94>
    cba0:	d9801317 	ldw	r6,76(sp)
    cba4:	3025003a 	cmpeq	r18,r6,zero
    cba8:	90008b1e 	bne	r18,zero,cdd8 <_strtod_r+0xc70>
    cbac:	008ffc34 	movhi	r2,16368
    cbb0:	0021883a 	mov	r16,zero
    cbb4:	1023883a 	mov	r17,r2
    cbb8:	d8000715 	stw	zero,28(sp)
    cbbc:	d8800815 	stw	r2,32(sp)
    cbc0:	e1c00117 	ldw	r7,4(fp)
    cbc4:	009ff834 	movhi	r2,32736
    cbc8:	3cdffc2c 	andhi	r19,r7,32752
    cbcc:	98805e26 	beq	r19,r2,cd48 <_strtod_r+0xbe0>
    cbd0:	d8801417 	ldw	r2,80(sp)
    cbd4:	10001b26 	beq	r2,zero,cc44 <_strtod_r+0xadc>
    cbd8:	0081a834 	movhi	r2,1696
    cbdc:	14c01936 	bltu	r2,r19,cc44 <_strtod_r+0xadc>
    cbe0:	00bff034 	movhi	r2,65472
    cbe4:	00d07834 	movhi	r3,16864
    cbe8:	18ffffc4 	addi	r3,r3,-1
    cbec:	180f883a 	mov	r7,r3
    cbf0:	8009883a 	mov	r4,r16
    cbf4:	880b883a 	mov	r5,r17
    cbf8:	100d883a 	mov	r6,r2
    cbfc:	0010f480 	call	10f48 <__ledf2>
    cc00:	00800b16 	blt	zero,r2,cc30 <_strtod_r+0xac8>
    cc04:	880b883a 	mov	r5,r17
    cc08:	8009883a 	mov	r4,r16
    cc0c:	000f3e80 	call	f3e8 <__fixunsdfsi>
    cc10:	1000df1e 	bne	r2,zero,cf90 <_strtod_r+0xe28>
    cc14:	0021883a 	mov	r16,zero
    cc18:	044ffc34 	movhi	r17,16368
    cc1c:	9000d91e 	bne	r18,zero,cf84 <_strtod_r+0xe1c>
    cc20:	8005883a 	mov	r2,r16
    cc24:	8807883a 	mov	r3,r17
    cc28:	d8c00815 	stw	r3,32(sp)
    cc2c:	d8800715 	stw	r2,28(sp)
    cc30:	d8800817 	ldw	r2,32(sp)
    cc34:	00c1ac34 	movhi	r3,1712
    cc38:	14c5c83a 	sub	r2,r2,r19
    cc3c:	10c5883a 	add	r2,r2,r3
    cc40:	d8800815 	stw	r2,32(sp)
    cc44:	e0800017 	ldw	r2,0(fp)
    cc48:	e0c00117 	ldw	r3,4(fp)
    cc4c:	1009883a 	mov	r4,r2
    cc50:	180b883a 	mov	r5,r3
    cc54:	000a9580 	call	a958 <__ulp>
    cc58:	d9800717 	ldw	r6,28(sp)
    cc5c:	d9c00817 	ldw	r7,32(sp)
    cc60:	180b883a 	mov	r5,r3
    cc64:	1009883a 	mov	r4,r2
    cc68:	00106840 	call	10684 <__muldf3>
    cc6c:	e2000017 	ldw	r8,0(fp)
    cc70:	e2400117 	ldw	r9,4(fp)
    cc74:	180b883a 	mov	r5,r3
    cc78:	1009883a 	mov	r4,r2
    cc7c:	480f883a 	mov	r7,r9
    cc80:	400d883a 	mov	r6,r8
    cc84:	00106100 	call	10610 <__adddf3>
    cc88:	e0c00115 	stw	r3,4(fp)
    cc8c:	e0800015 	stw	r2,0(fp)
    cc90:	d8c01417 	ldw	r3,80(sp)
    cc94:	e4800117 	ldw	r18,4(fp)
    cc98:	1800021e 	bne	r3,zero,cca4 <_strtod_r+0xb3c>
    cc9c:	909ffc2c 	andhi	r2,r18,32752
    cca0:	98807b26 	beq	r19,r2,ce90 <_strtod_r+0xd28>
    cca4:	d9400517 	ldw	r5,20(sp)
    cca8:	a809883a 	mov	r4,r21
    ccac:	000a79c0 	call	a79c <_Bfree>
    ccb0:	a809883a 	mov	r4,r21
    ccb4:	b80b883a 	mov	r5,r23
    ccb8:	000a79c0 	call	a79c <_Bfree>
    ccbc:	a809883a 	mov	r4,r21
    ccc0:	b00b883a 	mov	r5,r22
    ccc4:	000a79c0 	call	a79c <_Bfree>
    ccc8:	a809883a 	mov	r4,r21
    cccc:	a00b883a 	mov	r5,r20
    ccd0:	000a79c0 	call	a79c <_Bfree>
    ccd4:	003f3c06 	br	c9c8 <_strtod_r+0x860>
    ccd8:	b80b883a 	mov	r5,r23
    ccdc:	a00d883a 	mov	r6,r20
    cce0:	a809883a 	mov	r4,r21
    cce4:	000b5500 	call	b550 <__pow5mult>
    cce8:	102f883a 	mov	r23,r2
    ccec:	003f8606 	br	cb08 <_strtod_r+0x9a0>
    ccf0:	00800d84 	movi	r2,54
    ccf4:	114dc83a 	sub	r6,r2,r5
    ccf8:	003f5f06 	br	ca78 <_strtod_r+0x910>
    ccfc:	0005883a 	mov	r2,zero
    cd00:	00cff834 	movhi	r3,16352
    cd04:	880b883a 	mov	r5,r17
    cd08:	8009883a 	mov	r4,r16
    cd0c:	100d883a 	mov	r6,r2
    cd10:	180f883a 	mov	r7,r3
    cd14:	00106840 	call	10684 <__muldf3>
    cd18:	d9801317 	ldw	r6,76(sp)
    cd1c:	1021883a 	mov	r16,r2
    cd20:	1823883a 	mov	r17,r3
    cd24:	3025003a 	cmpeq	r18,r6,zero
    cd28:	90000126 	beq	r18,zero,cd30 <_strtod_r+0xbc8>
    cd2c:	18e0003c 	xorhi	r3,r3,32768
    cd30:	d8800715 	stw	r2,28(sp)
    cd34:	d8c00815 	stw	r3,32(sp)
    cd38:	e1c00117 	ldw	r7,4(fp)
    cd3c:	009ff834 	movhi	r2,32736
    cd40:	3cdffc2c 	andhi	r19,r7,32752
    cd44:	98bfa21e 	bne	r19,r2,cbd0 <_strtod_r+0xa68>
    cd48:	e1000017 	ldw	r4,0(fp)
    cd4c:	01bf2c34 	movhi	r6,64688
    cd50:	398d883a 	add	r6,r7,r6
    cd54:	d9000b15 	stw	r4,44(sp)
    cd58:	d9c00c15 	stw	r7,48(sp)
    cd5c:	300b883a 	mov	r5,r6
    cd60:	e1800115 	stw	r6,4(fp)
    cd64:	000a9580 	call	a958 <__ulp>
    cd68:	d9800717 	ldw	r6,28(sp)
    cd6c:	d9c00817 	ldw	r7,32(sp)
    cd70:	180b883a 	mov	r5,r3
    cd74:	1009883a 	mov	r4,r2
    cd78:	00106840 	call	10684 <__muldf3>
    cd7c:	e2000017 	ldw	r8,0(fp)
    cd80:	e2400117 	ldw	r9,4(fp)
    cd84:	180b883a 	mov	r5,r3
    cd88:	1009883a 	mov	r4,r2
    cd8c:	480f883a 	mov	r7,r9
    cd90:	400d883a 	mov	r6,r8
    cd94:	00106100 	call	10610 <__adddf3>
    cd98:	1009883a 	mov	r4,r2
    cd9c:	180b883a 	mov	r5,r3
    cda0:	009f2834 	movhi	r2,31904
    cda4:	10bfffc4 	addi	r2,r2,-1
    cda8:	18dffc2c 	andhi	r3,r3,32752
    cdac:	e1000015 	stw	r4,0(fp)
    cdb0:	e1400115 	stw	r5,4(fp)
    cdb4:	10c06f2e 	bgeu	r2,r3,cf74 <_strtod_r+0xe0c>
    cdb8:	d8800c17 	ldw	r2,48(sp)
    cdbc:	011ffc34 	movhi	r4,32752
    cdc0:	213fffc4 	addi	r4,r4,-1
    cdc4:	11007a26 	beq	r2,r4,cfb0 <_strtod_r+0xe48>
    cdc8:	01ffffc4 	movi	r7,-1
    cdcc:	e1000115 	stw	r4,4(fp)
    cdd0:	e1c00015 	stw	r7,0(fp)
    cdd4:	003fb306 	br	cca4 <_strtod_r+0xb3c>
    cdd8:	e0c00017 	ldw	r3,0(fp)
    cddc:	1800221e 	bne	r3,zero,ce68 <_strtod_r+0xd00>
    cde0:	e0800117 	ldw	r2,4(fp)
    cde4:	00c00434 	movhi	r3,16
    cde8:	18ffffc4 	addi	r3,r3,-1
    cdec:	10c4703a 	and	r2,r2,r3
    cdf0:	1000211e 	bne	r2,zero,ce78 <_strtod_r+0xd10>
    cdf4:	0005883a 	mov	r2,zero
    cdf8:	00cffc34 	movhi	r3,16368
    cdfc:	180f883a 	mov	r7,r3
    ce00:	8009883a 	mov	r4,r16
    ce04:	880b883a 	mov	r5,r17
    ce08:	100d883a 	mov	r6,r2
    ce0c:	0010ec00 	call	10ec0 <__ltdf2>
    ce10:	10013c16 	blt	r2,zero,d304 <_strtod_r+0x119c>
    ce14:	0005883a 	mov	r2,zero
    ce18:	00cff834 	movhi	r3,16352
    ce1c:	880b883a 	mov	r5,r17
    ce20:	8009883a 	mov	r4,r16
    ce24:	180f883a 	mov	r7,r3
    ce28:	100d883a 	mov	r6,r2
    ce2c:	00106840 	call	10684 <__muldf3>
    ce30:	1823883a 	mov	r17,r3
    ce34:	1021883a 	mov	r16,r2
    ce38:	18e0003c 	xorhi	r3,r3,32768
    ce3c:	003fbc06 	br	cd30 <_strtod_r+0xbc8>
    ce40:	3827883a 	mov	r19,r7
    ce44:	003f1a06 	br	cab0 <_strtod_r+0x948>
    ce48:	4091c83a 	sub	r8,r8,r2
    ce4c:	003f0206 	br	ca58 <_strtod_r+0x8f0>
    ce50:	d8c00f17 	ldw	r3,60(sp)
    ce54:	0011883a 	mov	r8,zero
    ce58:	0029883a 	mov	r20,zero
    ce5c:	00d3c83a 	sub	r9,zero,r3
    ce60:	480f883a 	mov	r7,r9
    ce64:	003ef906 	br	ca4c <_strtod_r+0x8e4>
    ce68:	00800044 	movi	r2,1
    ce6c:	1880021e 	bne	r3,r2,ce78 <_strtod_r+0xd10>
    ce70:	e0800117 	ldw	r2,4(fp)
    ce74:	1000a526 	beq	r2,zero,d10c <_strtod_r+0xfa4>
    ce78:	00affc34 	movhi	r2,49136
    ce7c:	0021883a 	mov	r16,zero
    ce80:	044ffc34 	movhi	r17,16368
    ce84:	d8800815 	stw	r2,32(sp)
    ce88:	d8000715 	stw	zero,28(sp)
    ce8c:	003f4c06 	br	cbc0 <_strtod_r+0xa58>
    ce90:	880b883a 	mov	r5,r17
    ce94:	8009883a 	mov	r4,r16
    ce98:	00110c80 	call	110c8 <__fixdfsi>
    ce9c:	1009883a 	mov	r4,r2
    cea0:	0010fd00 	call	10fd0 <__floatsidf>
    cea4:	880b883a 	mov	r5,r17
    cea8:	8009883a 	mov	r4,r16
    ceac:	100d883a 	mov	r6,r2
    ceb0:	180f883a 	mov	r7,r3
    ceb4:	00105900 	call	10590 <__subdf3>
    ceb8:	d9001317 	ldw	r4,76(sp)
    cebc:	100b883a 	mov	r5,r2
    cec0:	180d883a 	mov	r6,r3
    cec4:	1021883a 	mov	r16,r2
    cec8:	1823883a 	mov	r17,r3
    cecc:	2000061e 	bne	r4,zero,cee8 <_strtod_r+0xd80>
    ced0:	e0800017 	ldw	r2,0(fp)
    ced4:	1000041e 	bne	r2,zero,cee8 <_strtod_r+0xd80>
    ced8:	00c00434 	movhi	r3,16
    cedc:	18ffffc4 	addi	r3,r3,-1
    cee0:	90c4703a 	and	r2,r18,r3
    cee4:	10004026 	beq	r2,zero,cfe8 <_strtod_r+0xe80>
    cee8:	00a52834 	movhi	r2,38048
    ceec:	108d6544 	addi	r2,r2,13717
    cef0:	00cff834 	movhi	r3,16352
    cef4:	18ffffc4 	addi	r3,r3,-1
    cef8:	180f883a 	mov	r7,r3
    cefc:	8009883a 	mov	r4,r16
    cf00:	880b883a 	mov	r5,r17
    cf04:	100d883a 	mov	r6,r2
    cf08:	0010ec00 	call	10ec0 <__ltdf2>
    cf0c:	10000916 	blt	r2,zero,cf34 <_strtod_r+0xdcc>
    cf10:	008d6c34 	movhi	r2,13744
    cf14:	10b94d44 	addi	r2,r2,-6859
    cf18:	00cff834 	movhi	r3,16352
    cf1c:	880b883a 	mov	r5,r17
    cf20:	180f883a 	mov	r7,r3
    cf24:	8009883a 	mov	r4,r16
    cf28:	100d883a 	mov	r6,r2
    cf2c:	0010db00 	call	10db0 <__gtdf2>
    cf30:	00bf5c0e 	bge	zero,r2,cca4 <_strtod_r+0xb3c>
    cf34:	d9400517 	ldw	r5,20(sp)
    cf38:	a809883a 	mov	r4,r21
    cf3c:	000a79c0 	call	a79c <_Bfree>
    cf40:	a809883a 	mov	r4,r21
    cf44:	b80b883a 	mov	r5,r23
    cf48:	000a79c0 	call	a79c <_Bfree>
    cf4c:	a809883a 	mov	r4,r21
    cf50:	b00b883a 	mov	r5,r22
    cf54:	000a79c0 	call	a79c <_Bfree>
    cf58:	d9401017 	ldw	r5,64(sp)
    cf5c:	a809883a 	mov	r4,r21
    cf60:	000a79c0 	call	a79c <_Bfree>
    cf64:	a809883a 	mov	r4,r21
    cf68:	a00b883a 	mov	r5,r20
    cf6c:	000a79c0 	call	a79c <_Bfree>
    cf70:	003cf406 	br	c344 <_strtod_r+0x1dc>
    cf74:	0080d434 	movhi	r2,848
    cf78:	288d883a 	add	r6,r5,r2
    cf7c:	e1800115 	stw	r6,4(fp)
    cf80:	003f4306 	br	cc90 <_strtod_r+0xb28>
    cf84:	8005883a 	mov	r2,r16
    cf88:	88e0003c 	xorhi	r3,r17,32768
    cf8c:	003f2606 	br	cc28 <_strtod_r+0xac0>
    cf90:	1009883a 	mov	r4,r2
    cf94:	00112140 	call	11214 <__floatunsidf>
    cf98:	1021883a 	mov	r16,r2
    cf9c:	1823883a 	mov	r17,r3
    cfa0:	003f1e06 	br	cc1c <_strtod_r+0xab4>
    cfa4:	da000417 	ldw	r8,16(sp)
    cfa8:	39c00044 	addi	r7,r7,1
    cfac:	003e6706 	br	c94c <_strtod_r+0x7e4>
    cfb0:	d8c00b17 	ldw	r3,44(sp)
    cfb4:	00bfffc4 	movi	r2,-1
    cfb8:	18bf831e 	bne	r3,r2,cdc8 <_strtod_r+0xc60>
    cfbc:	00c00884 	movi	r3,34
    cfc0:	a8c00015 	stw	r3,0(r21)
    cfc4:	009ffc34 	movhi	r2,32752
    cfc8:	e0800115 	stw	r2,4(fp)
    cfcc:	e0000015 	stw	zero,0(fp)
    cfd0:	003fd806 	br	cf34 <_strtod_r+0xdcc>
    cfd4:	4007883a 	mov	r3,r8
    cfd8:	000d883a 	mov	r6,zero
    cfdc:	0029883a 	mov	r20,zero
    cfe0:	0021883a 	mov	r16,zero
    cfe4:	003cc906 	br	c30c <_strtod_r+0x1a4>
    cfe8:	00a52834 	movhi	r2,38048
    cfec:	108d6544 	addi	r2,r2,13717
    cff0:	00cff434 	movhi	r3,16336
    cff4:	18ffffc4 	addi	r3,r3,-1
    cff8:	2809883a 	mov	r4,r5
    cffc:	180f883a 	mov	r7,r3
    d000:	300b883a 	mov	r5,r6
    d004:	100d883a 	mov	r6,r2
    d008:	0010ec00 	call	10ec0 <__ltdf2>
    d00c:	103f250e 	bge	r2,zero,cca4 <_strtod_r+0xb3c>
    d010:	003fc806 	br	cf34 <_strtod_r+0xdcc>
    d014:	0027883a 	mov	r19,zero
    d018:	04800044 	movi	r18,1
    d01c:	0015883a 	mov	r10,zero
    d020:	003cc006 	br	c324 <_strtod_r+0x1bc>
    d024:	00800884 	movi	r2,34
    d028:	a8800015 	stw	r2,0(r21)
    d02c:	019ffc34 	movhi	r6,32752
    d030:	e1800115 	stw	r6,4(fp)
    d034:	e0000015 	stw	zero,0(fp)
    d038:	003cc206 	br	c344 <_strtod_r+0x1dc>
    d03c:	015387c4 	movi	r5,19999
    d040:	003d1e06 	br	c4bc <_strtod_r+0x354>
    d044:	300a90fa 	slli	r5,r6,3
    d048:	e0800017 	ldw	r2,0(fp)
    d04c:	e0c00117 	ldw	r3,4(fp)
    d050:	01000074 	movhi	r4,1
    d054:	21143a04 	addi	r4,r4,20712
    d058:	290b883a 	add	r5,r5,r4
    d05c:	2a000017 	ldw	r8,0(r5)
    d060:	2a400117 	ldw	r9,4(r5)
    d064:	1009883a 	mov	r4,r2
    d068:	180b883a 	mov	r5,r3
    d06c:	480f883a 	mov	r7,r9
    d070:	400d883a 	mov	r6,r8
    d074:	00106840 	call	10684 <__muldf3>
    d078:	e0c00115 	stw	r3,4(fp)
    d07c:	e0800015 	stw	r2,0(fp)
    d080:	003cb006 	br	c344 <_strtod_r+0x1dc>
    d084:	d8800d17 	ldw	r2,52(sp)
    d088:	e0800015 	stw	r2,0(fp)
    d08c:	d8c00e17 	ldw	r3,56(sp)
    d090:	e0c00115 	stw	r3,4(fp)
    d094:	9880020c 	andi	r2,r19,8
    d098:	103caa26 	beq	r2,zero,c344 <_strtod_r+0x1dc>
    d09c:	e0800117 	ldw	r2,4(fp)
    d0a0:	10a00034 	orhi	r2,r2,32768
    d0a4:	e0800115 	stw	r2,4(fp)
    d0a8:	003ca606 	br	c344 <_strtod_r+0x1dc>
    d0ac:	009ffc34 	movhi	r2,32752
    d0b0:	e0800115 	stw	r2,4(fp)
    d0b4:	e0000015 	stw	zero,0(fp)
    d0b8:	003ff606 	br	d094 <_strtod_r+0xf2c>
    d0bc:	00a00034 	movhi	r2,32768
    d0c0:	10bfffc4 	addi	r2,r2,-1
    d0c4:	00ffffc4 	movi	r3,-1
    d0c8:	e0800115 	stw	r2,4(fp)
    d0cc:	e0c00015 	stw	r3,0(fp)
    d0d0:	003ff006 	br	d094 <_strtod_r+0xf2c>
    d0d4:	e0000115 	stw	zero,4(fp)
    d0d8:	e0000015 	stw	zero,0(fp)
    d0dc:	003fed06 	br	d094 <_strtod_r+0xf2c>
    d0e0:	d8800e17 	ldw	r2,56(sp)
    d0e4:	29010cc4 	addi	r4,r5,1075
    d0e8:	00fffc34 	movhi	r3,65520
    d0ec:	18ffffc4 	addi	r3,r3,-1
    d0f0:	2008953a 	slli	r4,r4,20
    d0f4:	10c4703a 	and	r2,r2,r3
    d0f8:	d8c00d17 	ldw	r3,52(sp)
    d0fc:	1104b03a 	or	r2,r2,r4
    d100:	e0800115 	stw	r2,4(fp)
    d104:	e0c00015 	stw	r3,0(fp)
    d108:	003fe206 	br	d094 <_strtod_r+0xf2c>
    d10c:	00800884 	movi	r2,34
    d110:	a8800015 	stw	r2,0(r21)
    d114:	e0000015 	stw	zero,0(fp)
    d118:	e0000115 	stw	zero,4(fp)
    d11c:	003f8506 	br	cf34 <_strtod_r+0xdcc>
    d120:	03800044 	movi	r14,1
    d124:	003d7706 	br	c704 <_strtod_r+0x59c>
    d128:	99c5883a 	add	r2,r19,r7
    d12c:	11ffffc4 	addi	r7,r2,-1
    d130:	00800204 	movi	r2,8
    d134:	3cc00044 	addi	r19,r7,1
    d138:	11c0df16 	blt	r2,r7,d4b8 <_strtod_r+0x1350>
    d13c:	a08002a4 	muli	r2,r20,10
    d140:	000f883a 	mov	r7,zero
    d144:	1269883a 	add	r20,r2,r9
    d148:	42000044 	addi	r8,r8,1
    d14c:	da000415 	stw	r8,16(sp)
    d150:	41000007 	ldb	r4,0(r8)
    d154:	003d3706 	br	c634 <_strtod_r+0x4cc>
    d158:	d9801317 	ldw	r6,76(sp)
    d15c:	3000511e 	bne	r6,zero,d2a4 <_strtod_r+0x113c>
    d160:	e0800017 	ldw	r2,0(fp)
    d164:	1000d81e 	bne	r2,zero,d4c8 <_strtod_r+0x1360>
    d168:	e0c00117 	ldw	r3,4(fp)
    d16c:	01000434 	movhi	r4,16
    d170:	213fffc4 	addi	r4,r4,-1
    d174:	1904703a 	and	r2,r3,r4
    d178:	1000b01e 	bne	r2,zero,d43c <_strtod_r+0x12d4>
    d17c:	18dffc2c 	andhi	r3,r3,32752
    d180:	0081ac34 	movhi	r2,1712
    d184:	10c1102e 	bgeu	r2,r3,d5c8 <_strtod_r+0x1460>
    d188:	a0800517 	ldw	r2,20(r20)
    d18c:	1000031e 	bne	r2,zero,d19c <_strtod_r+0x1034>
    d190:	a0c00417 	ldw	r3,16(r20)
    d194:	00800044 	movi	r2,1
    d198:	10c0420e 	bge	r2,r3,d2a4 <_strtod_r+0x113c>
    d19c:	a00b883a 	mov	r5,r20
    d1a0:	a809883a 	mov	r4,r21
    d1a4:	01800044 	movi	r6,1
    d1a8:	000b0e00 	call	b0e0 <__lshift>
    d1ac:	1009883a 	mov	r4,r2
    d1b0:	b00b883a 	mov	r5,r22
    d1b4:	1029883a 	mov	r20,r2
    d1b8:	000a8f80 	call	a8f8 <__mcmp>
    d1bc:	0080c20e 	bge	zero,r2,d4c8 <_strtod_r+0x1360>
    d1c0:	e1800117 	ldw	r6,4(fp)
    d1c4:	d9001417 	ldw	r4,80(sp)
    d1c8:	2013003a 	cmpeq	r9,r4,zero
    d1cc:	4800ef1e 	bne	r9,zero,d58c <_strtod_r+0x1424>
    d1d0:	30dffc2c 	andhi	r3,r6,32752
    d1d4:	0081ac34 	movhi	r2,1712
    d1d8:	10c0ec36 	bltu	r2,r3,d58c <_strtod_r+0x1424>
    d1dc:	0080dc34 	movhi	r2,880
    d1e0:	10ffca2e 	bgeu	r2,r3,d10c <_strtod_r+0xfa4>
    d1e4:	e0800017 	ldw	r2,0(fp)
    d1e8:	e0c00117 	ldw	r3,4(fp)
    d1ec:	020e5434 	movhi	r8,14672
    d1f0:	000d883a 	mov	r6,zero
    d1f4:	400f883a 	mov	r7,r8
    d1f8:	180b883a 	mov	r5,r3
    d1fc:	1009883a 	mov	r4,r2
    d200:	da000c15 	stw	r8,48(sp)
    d204:	d8000b15 	stw	zero,44(sp)
    d208:	00106840 	call	10684 <__muldf3>
    d20c:	e0800015 	stw	r2,0(fp)
    d210:	e0c00115 	stw	r3,4(fp)
    d214:	183f471e 	bne	r3,zero,cf34 <_strtod_r+0xdcc>
    d218:	103f461e 	bne	r2,zero,cf34 <_strtod_r+0xdcc>
    d21c:	00800884 	movi	r2,34
    d220:	a8800015 	stw	r2,0(r21)
    d224:	003f4306 	br	cf34 <_strtod_r+0xdcc>
    d228:	d8801317 	ldw	r2,76(sp)
    d22c:	1025003a 	cmpeq	r18,r2,zero
    d230:	9000861e 	bne	r18,zero,d44c <_strtod_r+0x12e4>
    d234:	e1400117 	ldw	r5,4(fp)
    d238:	00c00434 	movhi	r3,16
    d23c:	18ffffc4 	addi	r3,r3,-1
    d240:	28c4703a 	and	r2,r5,r3
    d244:	10c01b26 	beq	r2,r3,d2b4 <_strtod_r+0x114c>
    d248:	e1c00017 	ldw	r7,0(fp)
    d24c:	3880004c 	andi	r2,r7,1
    d250:	1005003a 	cmpeq	r2,r2,zero
    d254:	1000791e 	bne	r2,zero,d43c <_strtod_r+0x12d4>
    d258:	9000b126 	beq	r18,zero,d520 <_strtod_r+0x13b8>
    d25c:	e4400117 	ldw	r17,4(fp)
    d260:	3809883a 	mov	r4,r7
    d264:	3821883a 	mov	r16,r7
    d268:	880b883a 	mov	r5,r17
    d26c:	000a9580 	call	a958 <__ulp>
    d270:	180f883a 	mov	r7,r3
    d274:	880b883a 	mov	r5,r17
    d278:	8009883a 	mov	r4,r16
    d27c:	100d883a 	mov	r6,r2
    d280:	00105900 	call	10590 <__subdf3>
    d284:	1009883a 	mov	r4,r2
    d288:	000d883a 	mov	r6,zero
    d28c:	000f883a 	mov	r7,zero
    d290:	180b883a 	mov	r5,r3
    d294:	e0800015 	stw	r2,0(fp)
    d298:	e0c00115 	stw	r3,4(fp)
    d29c:	0010d280 	call	10d28 <__nedf2>
    d2a0:	103f9a26 	beq	r2,zero,d10c <_strtod_r+0xfa4>
    d2a4:	d9001417 	ldw	r4,80(sp)
    d2a8:	2013003a 	cmpeq	r9,r4,zero
    d2ac:	483f211e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d2b0:	003fcc06 	br	d1e4 <_strtod_r+0x107c>
    d2b4:	d9001417 	ldw	r4,80(sp)
    d2b8:	e1c00017 	ldw	r7,0(fp)
    d2bc:	2013003a 	cmpeq	r9,r4,zero
    d2c0:	4800bd1e 	bne	r9,zero,d5b8 <_strtod_r+0x1450>
    d2c4:	28dffc2c 	andhi	r3,r5,32752
    d2c8:	0081a834 	movhi	r2,1696
    d2cc:	10c0ba36 	bltu	r2,r3,d5b8 <_strtod_r+0x1450>
    d2d0:	1804d53a 	srli	r2,r3,20
    d2d4:	00c01ac4 	movi	r3,107
    d2d8:	013fffc4 	movi	r4,-1
    d2dc:	1887c83a 	sub	r3,r3,r2
    d2e0:	20c4983a 	sll	r2,r4,r3
    d2e4:	11ffd91e 	bne	r2,r7,d24c <_strtod_r+0x10e4>
    d2e8:	28dffc2c 	andhi	r3,r5,32752
    d2ec:	00800434 	movhi	r2,16
    d2f0:	188d883a 	add	r6,r3,r2
    d2f4:	e1800115 	stw	r6,4(fp)
    d2f8:	e0000015 	stw	zero,0(fp)
    d2fc:	483f0d1e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d300:	003fb806 	br	d1e4 <_strtod_r+0x107c>
    d304:	0021883a 	mov	r16,zero
    d308:	0005883a 	mov	r2,zero
    d30c:	044ff834 	movhi	r17,16352
    d310:	00eff834 	movhi	r3,49120
    d314:	003e8606 	br	cd30 <_strtod_r+0xbc8>
    d318:	803d9e26 	beq	r16,zero,c994 <_strtod_r+0x82c>
    d31c:	0421c83a 	sub	r16,zero,r16
    d320:	814003cc 	andi	r5,r16,15
    d324:	28000f26 	beq	r5,zero,d364 <_strtod_r+0x11fc>
    d328:	280a90fa 	slli	r5,r5,3
    d32c:	01000074 	movhi	r4,1
    d330:	21143a04 	addi	r4,r4,20712
    d334:	e0800017 	ldw	r2,0(fp)
    d338:	290b883a 	add	r5,r5,r4
    d33c:	2a000017 	ldw	r8,0(r5)
    d340:	e0c00117 	ldw	r3,4(fp)
    d344:	2a400117 	ldw	r9,4(r5)
    d348:	1009883a 	mov	r4,r2
    d34c:	180b883a 	mov	r5,r3
    d350:	480f883a 	mov	r7,r9
    d354:	400d883a 	mov	r6,r8
    d358:	0010a480 	call	10a48 <__divdf3>
    d35c:	e0c00115 	stw	r3,4(fp)
    d360:	e0800015 	stw	r2,0(fp)
    d364:	8021d13a 	srai	r16,r16,4
    d368:	803d8a26 	beq	r16,zero,c994 <_strtod_r+0x82c>
    d36c:	008007c4 	movi	r2,31
    d370:	14002d16 	blt	r2,r16,d428 <_strtod_r+0x12c0>
    d374:	8080040c 	andi	r2,r16,16
    d378:	10009926 	beq	r2,zero,d5e0 <_strtod_r+0x1478>
    d37c:	00801a84 	movi	r2,106
    d380:	d8801415 	stw	r2,80(sp)
    d384:	0400110e 	bge	zero,r16,d3cc <_strtod_r+0x1264>
    d388:	04400074 	movhi	r17,1
    d38c:	8c548704 	addi	r17,r17,21020
    d390:	8080004c 	andi	r2,r16,1
    d394:	1005003a 	cmpeq	r2,r2,zero
    d398:	1000091e 	bne	r2,zero,d3c0 <_strtod_r+0x1258>
    d39c:	e0800017 	ldw	r2,0(fp)
    d3a0:	e0c00117 	ldw	r3,4(fp)
    d3a4:	89800017 	ldw	r6,0(r17)
    d3a8:	89c00117 	ldw	r7,4(r17)
    d3ac:	180b883a 	mov	r5,r3
    d3b0:	1009883a 	mov	r4,r2
    d3b4:	00106840 	call	10684 <__muldf3>
    d3b8:	e0c00115 	stw	r3,4(fp)
    d3bc:	e0800015 	stw	r2,0(fp)
    d3c0:	8021d07a 	srai	r16,r16,1
    d3c4:	8c400204 	addi	r17,r17,8
    d3c8:	043ff116 	blt	zero,r16,d390 <_strtod_r+0x1228>
    d3cc:	d8c01417 	ldw	r3,80(sp)
    d3d0:	18000d26 	beq	r3,zero,d408 <_strtod_r+0x12a0>
    d3d4:	e1000117 	ldw	r4,4(fp)
    d3d8:	00c01ac4 	movi	r3,107
    d3dc:	209ffc2c 	andhi	r2,r4,32752
    d3e0:	1004d53a 	srli	r2,r2,20
    d3e4:	1887c83a 	sub	r3,r3,r2
    d3e8:	00c0070e 	bge	zero,r3,d408 <_strtod_r+0x12a0>
    d3ec:	008007c4 	movi	r2,31
    d3f0:	10c0900e 	bge	r2,r3,d634 <_strtod_r+0x14cc>
    d3f4:	00800d04 	movi	r2,52
    d3f8:	e0000015 	stw	zero,0(fp)
    d3fc:	10c0870e 	bge	r2,r3,d61c <_strtod_r+0x14b4>
    d400:	0180dc34 	movhi	r6,880
    d404:	e1800115 	stw	r6,4(fp)
    d408:	e0800017 	ldw	r2,0(fp)
    d40c:	e0c00117 	ldw	r3,4(fp)
    d410:	000d883a 	mov	r6,zero
    d414:	000f883a 	mov	r7,zero
    d418:	180b883a 	mov	r5,r3
    d41c:	1009883a 	mov	r4,r2
    d420:	0010d280 	call	10d28 <__nedf2>
    d424:	103d5c1e 	bne	r2,zero,c998 <_strtod_r+0x830>
    d428:	00800884 	movi	r2,34
    d42c:	a8800015 	stw	r2,0(r21)
    d430:	e0000015 	stw	zero,0(fp)
    d434:	e0000115 	stw	zero,4(fp)
    d438:	003bc206 	br	c344 <_strtod_r+0x1dc>
    d43c:	d8801417 	ldw	r2,80(sp)
    d440:	1013003a 	cmpeq	r9,r2,zero
    d444:	483ebb1e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d448:	003f6606 	br	d1e4 <_strtod_r+0x107c>
    d44c:	e1800117 	ldw	r6,4(fp)
    d450:	00c00434 	movhi	r3,16
    d454:	18ffffc4 	addi	r3,r3,-1
    d458:	30c4703a 	and	r2,r6,r3
    d45c:	103f7a1e 	bne	r2,zero,d248 <_strtod_r+0x10e0>
    d460:	e1c00017 	ldw	r7,0(fp)
    d464:	383f791e 	bne	r7,zero,d24c <_strtod_r+0x10e4>
    d468:	003f5606 	br	d1c4 <_strtod_r+0x105c>
    d46c:	d9800f17 	ldw	r6,60(sp)
    d470:	00bffa84 	movi	r2,-22
    d474:	30bcd416 	blt	r6,r2,c7c8 <_strtod_r+0x660>
    d478:	317ffe24 	muli	r5,r6,-8
    d47c:	01000074 	movhi	r4,1
    d480:	21143a04 	addi	r4,r4,20712
    d484:	e0800017 	ldw	r2,0(fp)
    d488:	290b883a 	add	r5,r5,r4
    d48c:	2a000017 	ldw	r8,0(r5)
    d490:	e0c00117 	ldw	r3,4(fp)
    d494:	2a400117 	ldw	r9,4(r5)
    d498:	1009883a 	mov	r4,r2
    d49c:	180b883a 	mov	r5,r3
    d4a0:	480f883a 	mov	r7,r9
    d4a4:	400d883a 	mov	r6,r8
    d4a8:	0010a480 	call	10a48 <__divdf3>
    d4ac:	e0c00115 	stw	r3,4(fp)
    d4b0:	e0800015 	stw	r2,0(fp)
    d4b4:	003ba306 	br	c344 <_strtod_r+0x1dc>
    d4b8:	00800404 	movi	r2,16
    d4bc:	14c02f0e 	bge	r2,r19,d57c <_strtod_r+0x1414>
    d4c0:	000f883a 	mov	r7,zero
    d4c4:	003f2006 	br	d148 <_strtod_r+0xfe0>
    d4c8:	d9801417 	ldw	r6,80(sp)
    d4cc:	3013003a 	cmpeq	r9,r6,zero
    d4d0:	483e981e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d4d4:	003f4306 	br	d1e4 <_strtod_r+0x107c>
    d4d8:	00801a44 	movi	r2,105
    d4dc:	20bc6326 	beq	r4,r2,c66c <_strtod_r+0x504>
    d4e0:	00801b84 	movi	r2,110
    d4e4:	20bbba1e 	bne	r4,r2,c3d0 <_strtod_r+0x268>
    d4e8:	dc000404 	addi	r16,sp,16
    d4ec:	8009883a 	mov	r4,r16
    d4f0:	01400074 	movhi	r5,1
    d4f4:	29548604 	addi	r5,r5,21016
    d4f8:	000c1200 	call	c120 <match>
    d4fc:	103bb426 	beq	r2,zero,c3d0 <_strtod_r+0x268>
    d500:	d8800417 	ldw	r2,16(sp)
    d504:	00c00a04 	movi	r3,40
    d508:	11000007 	ldb	r4,0(r2)
    d50c:	20c03626 	beq	r4,r3,d5e8 <_strtod_r+0x1480>
    d510:	01bffe34 	movhi	r6,65528
    d514:	e1800115 	stw	r6,4(fp)
    d518:	e0000015 	stw	zero,0(fp)
    d51c:	003b8906 	br	c344 <_strtod_r+0x1dc>
    d520:	e4400117 	ldw	r17,4(fp)
    d524:	3809883a 	mov	r4,r7
    d528:	3821883a 	mov	r16,r7
    d52c:	880b883a 	mov	r5,r17
    d530:	000a9580 	call	a958 <__ulp>
    d534:	100d883a 	mov	r6,r2
    d538:	880b883a 	mov	r5,r17
    d53c:	180f883a 	mov	r7,r3
    d540:	8009883a 	mov	r4,r16
    d544:	00106100 	call	10610 <__adddf3>
    d548:	d9801417 	ldw	r6,80(sp)
    d54c:	e0c00115 	stw	r3,4(fp)
    d550:	e0800015 	stw	r2,0(fp)
    d554:	3013003a 	cmpeq	r9,r6,zero
    d558:	483e761e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d55c:	003f2106 	br	d1e4 <_strtod_r+0x107c>
    d560:	000f883a 	mov	r7,zero
    d564:	003cf006 	br	c928 <_strtod_r+0x7c0>
    d568:	0080d434 	movhi	r2,848
    d56c:	188d883a 	add	r6,r3,r2
    d570:	d8001415 	stw	zero,80(sp)
    d574:	e1800115 	stw	r6,4(fp)
    d578:	003d0706 	br	c998 <_strtod_r+0x830>
    d57c:	808002a4 	muli	r2,r16,10
    d580:	000f883a 	mov	r7,zero
    d584:	1261883a 	add	r16,r2,r9
    d588:	003eef06 	br	d148 <_strtod_r+0xfe0>
    d58c:	309ffc2c 	andhi	r2,r6,32752
    d590:	00fffc34 	movhi	r3,65520
    d594:	10c5883a 	add	r2,r2,r3
    d598:	00c00434 	movhi	r3,16
    d59c:	18ffffc4 	addi	r3,r3,-1
    d5a0:	10ccb03a 	or	r6,r2,r3
    d5a4:	01ffffc4 	movi	r7,-1
    d5a8:	e1800115 	stw	r6,4(fp)
    d5ac:	e1c00015 	stw	r7,0(fp)
    d5b0:	483e601e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d5b4:	003f0b06 	br	d1e4 <_strtod_r+0x107c>
    d5b8:	00bfffc4 	movi	r2,-1
    d5bc:	003f4906 	br	d2e4 <_strtod_r+0x117c>
    d5c0:	0025883a 	mov	r18,zero
    d5c4:	003cb106 	br	c88c <_strtod_r+0x724>
    d5c8:	d8c01417 	ldw	r3,80(sp)
    d5cc:	1813003a 	cmpeq	r9,r3,zero
    d5d0:	483e581e 	bne	r9,zero,cf34 <_strtod_r+0xdcc>
    d5d4:	003f0306 	br	d1e4 <_strtod_r+0x107c>
    d5d8:	980f883a 	mov	r7,r19
    d5dc:	003ed406 	br	d130 <_strtod_r+0xfc8>
    d5e0:	d8001415 	stw	zero,80(sp)
    d5e4:	003f6706 	br	d384 <_strtod_r+0x121c>
    d5e8:	8009883a 	mov	r4,r16
    d5ec:	01400074 	movhi	r5,1
    d5f0:	29570a04 	addi	r5,r5,23592
    d5f4:	d9800d04 	addi	r6,sp,52
    d5f8:	000f0980 	call	f098 <__hexnan>
    d5fc:	00c00144 	movi	r3,5
    d600:	10ffc31e 	bne	r2,r3,d510 <_strtod_r+0x13a8>
    d604:	d8800e17 	ldw	r2,56(sp)
    d608:	d9c00d17 	ldw	r7,52(sp)
    d60c:	119ffc34 	orhi	r6,r2,32752
    d610:	e1800115 	stw	r6,4(fp)
    d614:	e1c00015 	stw	r7,0(fp)
    d618:	003b4a06 	br	c344 <_strtod_r+0x1dc>
    d61c:	18fff804 	addi	r3,r3,-32
    d620:	00bfffc4 	movi	r2,-1
    d624:	10c4983a 	sll	r2,r2,r3
    d628:	208c703a 	and	r6,r4,r2
    d62c:	e1800115 	stw	r6,4(fp)
    d630:	003f7506 	br	d408 <_strtod_r+0x12a0>
    d634:	00bfffc4 	movi	r2,-1
    d638:	10c4983a 	sll	r2,r2,r3
    d63c:	e0c00017 	ldw	r3,0(fp)
    d640:	188e703a 	and	r7,r3,r2
    d644:	e1c00015 	stw	r7,0(fp)
    d648:	003f6f06 	br	d408 <_strtod_r+0x12a0>

0000d64c <strtof>:
    d64c:	defffa04 	addi	sp,sp,-24
    d650:	dd000415 	stw	r20,16(sp)
    d654:	05000074 	movhi	r20,1
    d658:	a51b9704 	addi	r20,r20,28252
    d65c:	2007883a 	mov	r3,r4
    d660:	a1000017 	ldw	r4,0(r20)
    d664:	280d883a 	mov	r6,r5
    d668:	180b883a 	mov	r5,r3
    d66c:	dfc00515 	stw	ra,20(sp)
    d670:	dcc00315 	stw	r19,12(sp)
    d674:	dc800215 	stw	r18,8(sp)
    d678:	dc400115 	stw	r17,4(sp)
    d67c:	dc000015 	stw	r16,0(sp)
    d680:	000c1680 	call	c168 <_strtod_r>
    d684:	180b883a 	mov	r5,r3
    d688:	1009883a 	mov	r4,r2
    d68c:	1823883a 	mov	r17,r3
    d690:	1021883a 	mov	r16,r2
    d694:	00111a00 	call	111a0 <__truncdfsf2>
    d698:	1009883a 	mov	r4,r2
    d69c:	000b883a 	mov	r5,zero
    d6a0:	1025883a 	mov	r18,r2
    d6a4:	1027883a 	mov	r19,r2
    d6a8:	00100180 	call	10018 <__nesf2>
    d6ac:	000d883a 	mov	r6,zero
    d6b0:	000f883a 	mov	r7,zero
    d6b4:	8009883a 	mov	r4,r16
    d6b8:	880b883a 	mov	r5,r17
    d6bc:	10000e1e 	bne	r2,zero,d6f8 <strtof+0xac>
    d6c0:	0010d280 	call	10d28 <__nedf2>
    d6c4:	10000c26 	beq	r2,zero,d6f8 <strtof+0xac>
    d6c8:	a0c00017 	ldw	r3,0(r20)
    d6cc:	00800884 	movi	r2,34
    d6d0:	18800015 	stw	r2,0(r3)
    d6d4:	9805883a 	mov	r2,r19
    d6d8:	dfc00517 	ldw	ra,20(sp)
    d6dc:	dd000417 	ldw	r20,16(sp)
    d6e0:	dcc00317 	ldw	r19,12(sp)
    d6e4:	dc800217 	ldw	r18,8(sp)
    d6e8:	dc400117 	ldw	r17,4(sp)
    d6ec:	dc000017 	ldw	r16,0(sp)
    d6f0:	dec00604 	addi	sp,sp,24
    d6f4:	f800283a 	ret
    d6f8:	9009883a 	mov	r4,r18
    d6fc:	015fe034 	movhi	r5,32640
    d700:	297fffc4 	addi	r5,r5,-1
    d704:	00100900 	call	10090 <__gtsf2>
    d708:	00ffffc4 	movi	r3,-1
    d70c:	011ffc34 	movhi	r4,32752
    d710:	213fffc4 	addi	r4,r4,-1
    d714:	200f883a 	mov	r7,r4
    d718:	180d883a 	mov	r6,r3
    d71c:	8009883a 	mov	r4,r16
    d720:	880b883a 	mov	r5,r17
    d724:	00800f16 	blt	zero,r2,d764 <strtof+0x118>
    d728:	9009883a 	mov	r4,r18
    d72c:	017fe034 	movhi	r5,65408
    d730:	297fffc4 	addi	r5,r5,-1
    d734:	00101080 	call	10108 <__ltsf2>
    d738:	023fffc4 	movi	r8,-1
    d73c:	027ffc34 	movhi	r9,65520
    d740:	4a7fffc4 	addi	r9,r9,-1
    d744:	880b883a 	mov	r5,r17
    d748:	480f883a 	mov	r7,r9
    d74c:	8009883a 	mov	r4,r16
    d750:	400d883a 	mov	r6,r8
    d754:	103fdf0e 	bge	r2,zero,d6d4 <strtof+0x88>
    d758:	0010ec00 	call	10ec0 <__ltdf2>
    d75c:	103fda0e 	bge	r2,zero,d6c8 <strtof+0x7c>
    d760:	003fdc06 	br	d6d4 <strtof+0x88>
    d764:	0010db00 	call	10db0 <__gtdf2>
    d768:	00bfd70e 	bge	zero,r2,d6c8 <strtof+0x7c>
    d76c:	003fee06 	br	d728 <strtof+0xdc>

0000d770 <strtod>:
    d770:	01800074 	movhi	r6,1
    d774:	319b9704 	addi	r6,r6,28252
    d778:	2007883a 	mov	r3,r4
    d77c:	31000017 	ldw	r4,0(r6)
    d780:	280d883a 	mov	r6,r5
    d784:	180b883a 	mov	r5,r3
    d788:	000c1681 	jmpi	c168 <_strtod_r>

0000d78c <_strtol_r>:
    d78c:	defff304 	addi	sp,sp,-52
    d790:	00800074 	movhi	r2,1
    d794:	109b9604 	addi	r2,r2,28248
    d798:	dcc00615 	stw	r19,24(sp)
    d79c:	14c00017 	ldw	r19,0(r2)
    d7a0:	ddc00a15 	stw	r23,40(sp)
    d7a4:	dc000315 	stw	r16,12(sp)
    d7a8:	dfc00c15 	stw	ra,48(sp)
    d7ac:	df000b15 	stw	fp,44(sp)
    d7b0:	dd800915 	stw	r22,36(sp)
    d7b4:	dd400815 	stw	r21,32(sp)
    d7b8:	dd000715 	stw	r20,28(sp)
    d7bc:	dc800515 	stw	r18,20(sp)
    d7c0:	dc400415 	stw	r17,16(sp)
    d7c4:	282f883a 	mov	r23,r5
    d7c8:	d9000015 	stw	r4,0(sp)
    d7cc:	d9800115 	stw	r6,4(sp)
    d7d0:	2821883a 	mov	r16,r5
    d7d4:	84400007 	ldb	r17,0(r16)
    d7d8:	84000044 	addi	r16,r16,1
    d7dc:	9c47883a 	add	r3,r19,r17
    d7e0:	18800003 	ldbu	r2,0(r3)
    d7e4:	1080020c 	andi	r2,r2,8
    d7e8:	103ffa1e 	bne	r2,zero,d7d4 <_strtol_r+0x48>
    d7ec:	00800b44 	movi	r2,45
    d7f0:	88805c26 	beq	r17,r2,d964 <_strtol_r+0x1d8>
    d7f4:	00800ac4 	movi	r2,43
    d7f8:	88805726 	beq	r17,r2,d958 <_strtol_r+0x1cc>
    d7fc:	0039883a 	mov	fp,zero
    d800:	3807003a 	cmpeq	r3,r7,zero
    d804:	1800431e 	bne	r3,zero,d914 <_strtol_r+0x188>
    d808:	00800404 	movi	r2,16
    d80c:	38804126 	beq	r7,r2,d914 <_strtol_r+0x188>
    d810:	3829883a 	mov	r20,r7
    d814:	e02cc03a 	cmpne	r22,fp,zero
    d818:	b0004b1e 	bne	r22,zero,d948 <_strtol_r+0x1bc>
    d81c:	04a00034 	movhi	r18,32768
    d820:	94bfffc4 	addi	r18,r18,-1
    d824:	9009883a 	mov	r4,r18
    d828:	a00b883a 	mov	r5,r20
    d82c:	d9c00215 	stw	r7,8(sp)
    d830:	0002b8c0 	call	2b8c <__umodsi3>
    d834:	9009883a 	mov	r4,r18
    d838:	a00b883a 	mov	r5,r20
    d83c:	102b883a 	mov	r21,r2
    d840:	0002b840 	call	2b84 <__udivsi3>
    d844:	1011883a 	mov	r8,r2
    d848:	9c45883a 	add	r2,r19,r17
    d84c:	11000003 	ldbu	r4,0(r2)
    d850:	000b883a 	mov	r5,zero
    d854:	000d883a 	mov	r6,zero
    d858:	20c0010c 	andi	r3,r4,4
    d85c:	d9c00217 	ldw	r7,8(sp)
    d860:	18000e26 	beq	r3,zero,d89c <_strtol_r+0x110>
    d864:	88fff404 	addi	r3,r17,-48
    d868:	19c0140e 	bge	r3,r7,d8bc <_strtol_r+0x130>
    d86c:	30003116 	blt	r6,zero,d934 <_strtol_r+0x1a8>
    d870:	41403036 	bltu	r8,r5,d934 <_strtol_r+0x1a8>
    d874:	2a002e26 	beq	r5,r8,d930 <_strtol_r+0x1a4>
    d878:	2d05383a 	mul	r2,r5,r20
    d87c:	01800044 	movi	r6,1
    d880:	10cb883a 	add	r5,r2,r3
    d884:	84400007 	ldb	r17,0(r16)
    d888:	84000044 	addi	r16,r16,1
    d88c:	9c45883a 	add	r2,r19,r17
    d890:	11000003 	ldbu	r4,0(r2)
    d894:	20c0010c 	andi	r3,r4,4
    d898:	183ff21e 	bne	r3,zero,d864 <_strtol_r+0xd8>
    d89c:	208000cc 	andi	r2,r4,3
    d8a0:	10000626 	beq	r2,zero,d8bc <_strtol_r+0x130>
    d8a4:	2080004c 	andi	r2,r4,1
    d8a8:	1005003a 	cmpeq	r2,r2,zero
    d8ac:	1000231e 	bne	r2,zero,d93c <_strtol_r+0x1b0>
    d8b0:	00800dc4 	movi	r2,55
    d8b4:	8887c83a 	sub	r3,r17,r2
    d8b8:	19ffec16 	blt	r3,r7,d86c <_strtol_r+0xe0>
    d8bc:	30002d16 	blt	r6,zero,d974 <_strtol_r+0x1e8>
    d8c0:	b000231e 	bne	r22,zero,d950 <_strtol_r+0x1c4>
    d8c4:	2807883a 	mov	r3,r5
    d8c8:	d8800117 	ldw	r2,4(sp)
    d8cc:	10000426 	beq	r2,zero,d8e0 <_strtol_r+0x154>
    d8d0:	30000126 	beq	r6,zero,d8d8 <_strtol_r+0x14c>
    d8d4:	85ffffc4 	addi	r23,r16,-1
    d8d8:	d9000117 	ldw	r4,4(sp)
    d8dc:	25c00015 	stw	r23,0(r4)
    d8e0:	1805883a 	mov	r2,r3
    d8e4:	dfc00c17 	ldw	ra,48(sp)
    d8e8:	df000b17 	ldw	fp,44(sp)
    d8ec:	ddc00a17 	ldw	r23,40(sp)
    d8f0:	dd800917 	ldw	r22,36(sp)
    d8f4:	dd400817 	ldw	r21,32(sp)
    d8f8:	dd000717 	ldw	r20,28(sp)
    d8fc:	dcc00617 	ldw	r19,24(sp)
    d900:	dc800517 	ldw	r18,20(sp)
    d904:	dc400417 	ldw	r17,16(sp)
    d908:	dc000317 	ldw	r16,12(sp)
    d90c:	dec00d04 	addi	sp,sp,52
    d910:	f800283a 	ret
    d914:	00800c04 	movi	r2,48
    d918:	88801d26 	beq	r17,r2,d990 <_strtol_r+0x204>
    d91c:	183fbc26 	beq	r3,zero,d810 <_strtol_r+0x84>
    d920:	00800c04 	movi	r2,48
    d924:	88802726 	beq	r17,r2,d9c4 <_strtol_r+0x238>
    d928:	01c00284 	movi	r7,10
    d92c:	003fb806 	br	d810 <_strtol_r+0x84>
    d930:	a8ffd10e 	bge	r21,r3,d878 <_strtol_r+0xec>
    d934:	01bfffc4 	movi	r6,-1
    d938:	003fd206 	br	d884 <_strtol_r+0xf8>
    d93c:	008015c4 	movi	r2,87
    d940:	8887c83a 	sub	r3,r17,r2
    d944:	003fdc06 	br	d8b8 <_strtol_r+0x12c>
    d948:	04a00034 	movhi	r18,32768
    d94c:	003fb506 	br	d824 <_strtol_r+0x98>
    d950:	0147c83a 	sub	r3,zero,r5
    d954:	003fdc06 	br	d8c8 <_strtol_r+0x13c>
    d958:	84400007 	ldb	r17,0(r16)
    d95c:	84000044 	addi	r16,r16,1
    d960:	003fa606 	br	d7fc <_strtol_r+0x70>
    d964:	84400007 	ldb	r17,0(r16)
    d968:	07000044 	movi	fp,1
    d96c:	84000044 	addi	r16,r16,1
    d970:	003fa306 	br	d800 <_strtol_r+0x74>
    d974:	e005003a 	cmpeq	r2,fp,zero
    d978:	10000f1e 	bne	r2,zero,d9b8 <_strtol_r+0x22c>
    d97c:	00e00034 	movhi	r3,32768
    d980:	d9000017 	ldw	r4,0(sp)
    d984:	00800884 	movi	r2,34
    d988:	20800015 	stw	r2,0(r4)
    d98c:	003fce06 	br	d8c8 <_strtol_r+0x13c>
    d990:	81000007 	ldb	r4,0(r16)
    d994:	00801e04 	movi	r2,120
    d998:	20800226 	beq	r4,r2,d9a4 <_strtol_r+0x218>
    d99c:	00801604 	movi	r2,88
    d9a0:	20bfde1e 	bne	r4,r2,d91c <_strtol_r+0x190>
    d9a4:	84400047 	ldb	r17,1(r16)
    d9a8:	01c00404 	movi	r7,16
    d9ac:	84000084 	addi	r16,r16,2
    d9b0:	3829883a 	mov	r20,r7
    d9b4:	003f9706 	br	d814 <_strtol_r+0x88>
    d9b8:	00e00034 	movhi	r3,32768
    d9bc:	18ffffc4 	addi	r3,r3,-1
    d9c0:	003fef06 	br	d980 <_strtol_r+0x1f4>
    d9c4:	01c00204 	movi	r7,8
    d9c8:	3829883a 	mov	r20,r7
    d9cc:	003f9106 	br	d814 <_strtol_r+0x88>

0000d9d0 <strtol>:
    d9d0:	00800074 	movhi	r2,1
    d9d4:	109b9704 	addi	r2,r2,28252
    d9d8:	2013883a 	mov	r9,r4
    d9dc:	11000017 	ldw	r4,0(r2)
    d9e0:	2805883a 	mov	r2,r5
    d9e4:	300f883a 	mov	r7,r6
    d9e8:	480b883a 	mov	r5,r9
    d9ec:	100d883a 	mov	r6,r2
    d9f0:	000d78c1 	jmpi	d78c <_strtol_r>

0000d9f4 <_strtoll_r>:
    d9f4:	defff004 	addi	sp,sp,-64
    d9f8:	00800074 	movhi	r2,1
    d9fc:	109b9604 	addi	r2,r2,28248
    da00:	df000e15 	stw	fp,56(sp)
    da04:	17000017 	ldw	fp,0(r2)
    da08:	ddc00d15 	stw	r23,52(sp)
    da0c:	dd000a15 	stw	r20,40(sp)
    da10:	dfc00f15 	stw	ra,60(sp)
    da14:	dd800c15 	stw	r22,48(sp)
    da18:	dd400b15 	stw	r21,44(sp)
    da1c:	dcc00915 	stw	r19,36(sp)
    da20:	dc800815 	stw	r18,32(sp)
    da24:	dc400715 	stw	r17,28(sp)
    da28:	dc000615 	stw	r16,24(sp)
    da2c:	d9400315 	stw	r5,12(sp)
    da30:	d9000215 	stw	r4,8(sp)
    da34:	d9800415 	stw	r6,16(sp)
    da38:	382f883a 	mov	r23,r7
    da3c:	2829883a 	mov	r20,r5
    da40:	a4c00007 	ldb	r19,0(r20)
    da44:	a5000044 	addi	r20,r20,1
    da48:	e4c7883a 	add	r3,fp,r19
    da4c:	18800003 	ldbu	r2,0(r3)
    da50:	1080020c 	andi	r2,r2,8
    da54:	103ffa1e 	bne	r2,zero,da40 <_strtoll_r+0x4c>
    da58:	00800b44 	movi	r2,45
    da5c:	98808826 	beq	r19,r2,dc80 <_strtoll_r+0x28c>
    da60:	00800ac4 	movi	r2,43
    da64:	98808326 	beq	r19,r2,dc74 <_strtoll_r+0x280>
    da68:	d8000115 	stw	zero,4(sp)
    da6c:	b807003a 	cmpeq	r3,r23,zero
    da70:	18005f1e 	bne	r3,zero,dbf0 <_strtoll_r+0x1fc>
    da74:	00800404 	movi	r2,16
    da78:	b8805d26 	beq	r23,r2,dbf0 <_strtoll_r+0x1fc>
    da7c:	b82dd7fa 	srai	r22,r23,31
    da80:	b82b883a 	mov	r21,r23
    da84:	d8c00117 	ldw	r3,4(sp)
    da88:	1806c03a 	cmpne	r3,r3,zero
    da8c:	d8c00515 	stw	r3,20(sp)
    da90:	1800631e 	bne	r3,zero,dc20 <_strtoll_r+0x22c>
    da94:	043fffc4 	movi	r16,-1
    da98:	04600034 	movhi	r17,32768
    da9c:	8c7fffc4 	addi	r17,r17,-1
    daa0:	880b883a 	mov	r5,r17
    daa4:	8009883a 	mov	r4,r16
    daa8:	a80d883a 	mov	r6,r21
    daac:	b00f883a 	mov	r7,r22
    dab0:	000fa680 	call	fa68 <__umoddi3>
    dab4:	880b883a 	mov	r5,r17
    dab8:	8009883a 	mov	r4,r16
    dabc:	b00f883a 	mov	r7,r22
    dac0:	a80d883a 	mov	r6,r21
    dac4:	d8800015 	stw	r2,0(sp)
    dac8:	000f48c0 	call	f48c <__udivdi3>
    dacc:	1023883a 	mov	r17,r2
    dad0:	e4c5883a 	add	r2,fp,r19
    dad4:	11000003 	ldbu	r4,0(r2)
    dad8:	1825883a 	mov	r18,r3
    dadc:	0015883a 	mov	r10,zero
    dae0:	20c0010c 	andi	r3,r4,4
    dae4:	0017883a 	mov	r11,zero
    dae8:	000f883a 	mov	r7,zero
    daec:	18001a26 	beq	r3,zero,db58 <_strtoll_r+0x164>
    daf0:	9c3ff404 	addi	r16,r19,-48
    daf4:	85c0200e 	bge	r16,r23,db78 <_strtoll_r+0x184>
    daf8:	38003b16 	blt	r7,zero,dbe8 <_strtoll_r+0x1f4>
    dafc:	92c03a36 	bltu	r18,r11,dbe8 <_strtoll_r+0x1f4>
    db00:	5c803826 	beq	r11,r18,dbe4 <_strtoll_r+0x1f0>
    db04:	54404c26 	beq	r10,r17,dc38 <_strtoll_r+0x244>
    db08:	580b883a 	mov	r5,r11
    db0c:	5009883a 	mov	r4,r10
    db10:	a80d883a 	mov	r6,r21
    db14:	b00f883a 	mov	r7,r22
    db18:	000f3500 	call	f350 <__muldi3>
    db1c:	8013d7fa 	srai	r9,r16,31
    db20:	100d883a 	mov	r6,r2
    db24:	1405883a 	add	r2,r2,r16
    db28:	118d803a 	cmpltu	r6,r2,r6
    db2c:	1a47883a 	add	r3,r3,r9
    db30:	30cd883a 	add	r6,r6,r3
    db34:	1015883a 	mov	r10,r2
    db38:	3017883a 	mov	r11,r6
    db3c:	01c00044 	movi	r7,1
    db40:	a4c00007 	ldb	r19,0(r20)
    db44:	a5000044 	addi	r20,r20,1
    db48:	e4c5883a 	add	r2,fp,r19
    db4c:	11000003 	ldbu	r4,0(r2)
    db50:	20c0010c 	andi	r3,r4,4
    db54:	183fe61e 	bne	r3,zero,daf0 <_strtoll_r+0xfc>
    db58:	208000cc 	andi	r2,r4,3
    db5c:	10000626 	beq	r2,zero,db78 <_strtoll_r+0x184>
    db60:	2080004c 	andi	r2,r4,1
    db64:	1005003a 	cmpeq	r2,r2,zero
    db68:	1000301e 	bne	r2,zero,dc2c <_strtoll_r+0x238>
    db6c:	02000dc4 	movi	r8,55
    db70:	9a21c83a 	sub	r16,r19,r8
    db74:	85ffe016 	blt	r16,r23,daf8 <_strtoll_r+0x104>
    db78:	38004616 	blt	r7,zero,dc94 <_strtoll_r+0x2a0>
    db7c:	d8800517 	ldw	r2,20(sp)
    db80:	1000341e 	bne	r2,zero,dc54 <_strtoll_r+0x260>
    db84:	500b883a 	mov	r5,r10
    db88:	580d883a 	mov	r6,r11
    db8c:	d8c00417 	ldw	r3,16(sp)
    db90:	18000626 	beq	r3,zero,dbac <_strtoll_r+0x1b8>
    db94:	38000226 	beq	r7,zero,dba0 <_strtoll_r+0x1ac>
    db98:	a53fffc4 	addi	r20,r20,-1
    db9c:	dd000315 	stw	r20,12(sp)
    dba0:	d8c00317 	ldw	r3,12(sp)
    dba4:	d8800417 	ldw	r2,16(sp)
    dba8:	10c00015 	stw	r3,0(r2)
    dbac:	2805883a 	mov	r2,r5
    dbb0:	3007883a 	mov	r3,r6
    dbb4:	dfc00f17 	ldw	ra,60(sp)
    dbb8:	df000e17 	ldw	fp,56(sp)
    dbbc:	ddc00d17 	ldw	r23,52(sp)
    dbc0:	dd800c17 	ldw	r22,48(sp)
    dbc4:	dd400b17 	ldw	r21,44(sp)
    dbc8:	dd000a17 	ldw	r20,40(sp)
    dbcc:	dcc00917 	ldw	r19,36(sp)
    dbd0:	dc800817 	ldw	r18,32(sp)
    dbd4:	dc400717 	ldw	r17,28(sp)
    dbd8:	dc000617 	ldw	r16,24(sp)
    dbdc:	dec01004 	addi	sp,sp,64
    dbe0:	f800283a 	ret
    dbe4:	8abfc72e 	bgeu	r17,r10,db04 <_strtoll_r+0x110>
    dbe8:	01ffffc4 	movi	r7,-1
    dbec:	003fd406 	br	db40 <_strtoll_r+0x14c>
    dbf0:	00800c04 	movi	r2,48
    dbf4:	98803226 	beq	r19,r2,dcc0 <_strtoll_r+0x2cc>
    dbf8:	183fa026 	beq	r3,zero,da7c <_strtoll_r+0x88>
    dbfc:	00800c04 	movi	r2,48
    dc00:	98803e26 	beq	r19,r2,dcfc <_strtoll_r+0x308>
    dc04:	d8c00117 	ldw	r3,4(sp)
    dc08:	05c00284 	movi	r23,10
    dc0c:	b82b883a 	mov	r21,r23
    dc10:	1806c03a 	cmpne	r3,r3,zero
    dc14:	002d883a 	mov	r22,zero
    dc18:	d8c00515 	stw	r3,20(sp)
    dc1c:	183f9d26 	beq	r3,zero,da94 <_strtoll_r+0xa0>
    dc20:	0021883a 	mov	r16,zero
    dc24:	04600034 	movhi	r17,32768
    dc28:	003f9d06 	br	daa0 <_strtoll_r+0xac>
    dc2c:	020015c4 	movi	r8,87
    dc30:	9a21c83a 	sub	r16,r19,r8
    dc34:	003fcf06 	br	db74 <_strtoll_r+0x180>
    dc38:	5cbfb31e 	bne	r11,r18,db08 <_strtoll_r+0x114>
    dc3c:	d8800017 	ldw	r2,0(sp)
    dc40:	143fb10e 	bge	r2,r16,db08 <_strtoll_r+0x114>
    dc44:	8815883a 	mov	r10,r17
    dc48:	9017883a 	mov	r11,r18
    dc4c:	01ffffc4 	movi	r7,-1
    dc50:	003fbb06 	br	db40 <_strtoll_r+0x14c>
    dc54:	0009883a 	mov	r4,zero
    dc58:	2285c83a 	sub	r2,r4,r10
    dc5c:	2089803a 	cmpltu	r4,r4,r2
    dc60:	02c7c83a 	sub	r3,zero,r11
    dc64:	1909c83a 	sub	r4,r3,r4
    dc68:	100b883a 	mov	r5,r2
    dc6c:	200d883a 	mov	r6,r4
    dc70:	003fc606 	br	db8c <_strtoll_r+0x198>
    dc74:	a4c00007 	ldb	r19,0(r20)
    dc78:	a5000044 	addi	r20,r20,1
    dc7c:	003f7a06 	br	da68 <_strtoll_r+0x74>
    dc80:	a4c00007 	ldb	r19,0(r20)
    dc84:	00800044 	movi	r2,1
    dc88:	a5000044 	addi	r20,r20,1
    dc8c:	d8800115 	stw	r2,4(sp)
    dc90:	003f7606 	br	da6c <_strtoll_r+0x78>
    dc94:	d8c00117 	ldw	r3,4(sp)
    dc98:	1805003a 	cmpeq	r2,r3,zero
    dc9c:	1000131e 	bne	r2,zero,dcec <_strtoll_r+0x2f8>
    dca0:	0005883a 	mov	r2,zero
    dca4:	00e00034 	movhi	r3,32768
    dca8:	100b883a 	mov	r5,r2
    dcac:	180d883a 	mov	r6,r3
    dcb0:	d8c00217 	ldw	r3,8(sp)
    dcb4:	00800884 	movi	r2,34
    dcb8:	18800015 	stw	r2,0(r3)
    dcbc:	003fb306 	br	db8c <_strtoll_r+0x198>
    dcc0:	a1000007 	ldb	r4,0(r20)
    dcc4:	00801e04 	movi	r2,120
    dcc8:	20800226 	beq	r4,r2,dcd4 <_strtoll_r+0x2e0>
    dccc:	00801604 	movi	r2,88
    dcd0:	20bfc91e 	bne	r4,r2,dbf8 <_strtoll_r+0x204>
    dcd4:	a4c00047 	ldb	r19,1(r20)
    dcd8:	05c00404 	movi	r23,16
    dcdc:	b82b883a 	mov	r21,r23
    dce0:	a5000084 	addi	r20,r20,2
    dce4:	002d883a 	mov	r22,zero
    dce8:	003f6606 	br	da84 <_strtoll_r+0x90>
    dcec:	017fffc4 	movi	r5,-1
    dcf0:	01a00034 	movhi	r6,32768
    dcf4:	31bfffc4 	addi	r6,r6,-1
    dcf8:	003fed06 	br	dcb0 <_strtoll_r+0x2bc>
    dcfc:	05c00204 	movi	r23,8
    dd00:	b82b883a 	mov	r21,r23
    dd04:	002d883a 	mov	r22,zero
    dd08:	003f5e06 	br	da84 <_strtoll_r+0x90>

0000dd0c <_strtoul_r>:
    dd0c:	defff604 	addi	sp,sp,-40
    dd10:	00800074 	movhi	r2,1
    dd14:	109b9604 	addi	r2,r2,28248
    dd18:	dd000415 	stw	r20,16(sp)
    dd1c:	15000017 	ldw	r20,0(r2)
    dd20:	ddc00715 	stw	r23,28(sp)
    dd24:	dd800615 	stw	r22,24(sp)
    dd28:	dd400515 	stw	r21,20(sp)
    dd2c:	dc800215 	stw	r18,8(sp)
    dd30:	dc000015 	stw	r16,0(sp)
    dd34:	dfc00915 	stw	ra,36(sp)
    dd38:	df000815 	stw	fp,32(sp)
    dd3c:	dcc00315 	stw	r19,12(sp)
    dd40:	dc400115 	stw	r17,4(sp)
    dd44:	282b883a 	mov	r21,r5
    dd48:	202f883a 	mov	r23,r4
    dd4c:	302d883a 	mov	r22,r6
    dd50:	3825883a 	mov	r18,r7
    dd54:	2821883a 	mov	r16,r5
    dd58:	84400007 	ldb	r17,0(r16)
    dd5c:	84000044 	addi	r16,r16,1
    dd60:	a447883a 	add	r3,r20,r17
    dd64:	18800003 	ldbu	r2,0(r3)
    dd68:	1080020c 	andi	r2,r2,8
    dd6c:	103ffa1e 	bne	r2,zero,dd58 <_strtoul_r+0x4c>
    dd70:	00800b44 	movi	r2,45
    dd74:	88805626 	beq	r17,r2,ded0 <_strtoul_r+0x1c4>
    dd78:	00800ac4 	movi	r2,43
    dd7c:	88805126 	beq	r17,r2,dec4 <_strtoul_r+0x1b8>
    dd80:	0039883a 	mov	fp,zero
    dd84:	9007003a 	cmpeq	r3,r18,zero
    dd88:	18003b1e 	bne	r3,zero,de78 <_strtoul_r+0x16c>
    dd8c:	00800404 	movi	r2,16
    dd90:	90803926 	beq	r18,r2,de78 <_strtoul_r+0x16c>
    dd94:	013fffc4 	movi	r4,-1
    dd98:	900b883a 	mov	r5,r18
    dd9c:	0002b840 	call	2b84 <__udivsi3>
    dda0:	013fffc4 	movi	r4,-1
    dda4:	900b883a 	mov	r5,r18
    dda8:	1027883a 	mov	r19,r2
    ddac:	0002b8c0 	call	2b8c <__umodsi3>
    ddb0:	1011883a 	mov	r8,r2
    ddb4:	900f883a 	mov	r7,r18
    ddb8:	a445883a 	add	r2,r20,r17
    ddbc:	11000003 	ldbu	r4,0(r2)
    ddc0:	000b883a 	mov	r5,zero
    ddc4:	000d883a 	mov	r6,zero
    ddc8:	20c0010c 	andi	r3,r4,4
    ddcc:	18000e26 	beq	r3,zero,de08 <_strtoul_r+0xfc>
    ddd0:	88fff404 	addi	r3,r17,-48
    ddd4:	1c80140e 	bge	r3,r18,de28 <_strtoul_r+0x11c>
    ddd8:	30003316 	blt	r6,zero,dea8 <_strtoul_r+0x19c>
    dddc:	99403236 	bltu	r19,r5,dea8 <_strtoul_r+0x19c>
    dde0:	2cc03026 	beq	r5,r19,dea4 <_strtoul_r+0x198>
    dde4:	29c5383a 	mul	r2,r5,r7
    dde8:	01800044 	movi	r6,1
    ddec:	10cb883a 	add	r5,r2,r3
    ddf0:	84400007 	ldb	r17,0(r16)
    ddf4:	84000044 	addi	r16,r16,1
    ddf8:	a445883a 	add	r2,r20,r17
    ddfc:	11000003 	ldbu	r4,0(r2)
    de00:	20c0010c 	andi	r3,r4,4
    de04:	183ff21e 	bne	r3,zero,ddd0 <_strtoul_r+0xc4>
    de08:	208000cc 	andi	r2,r4,3
    de0c:	10000626 	beq	r2,zero,de28 <_strtoul_r+0x11c>
    de10:	2080004c 	andi	r2,r4,1
    de14:	1005003a 	cmpeq	r2,r2,zero
    de18:	1000251e 	bne	r2,zero,deb0 <_strtoul_r+0x1a4>
    de1c:	00800dc4 	movi	r2,55
    de20:	8887c83a 	sub	r3,r17,r2
    de24:	1cbfec16 	blt	r3,r18,ddd8 <_strtoul_r+0xcc>
    de28:	3000400e 	bge	r6,zero,df2c <_strtoul_r+0x220>
    de2c:	00800884 	movi	r2,34
    de30:	017fffc4 	movi	r5,-1
    de34:	b8800015 	stw	r2,0(r23)
    de38:	b0000226 	beq	r22,zero,de44 <_strtoul_r+0x138>
    de3c:	30001f1e 	bne	r6,zero,debc <_strtoul_r+0x1b0>
    de40:	b5400015 	stw	r21,0(r22)
    de44:	2805883a 	mov	r2,r5
    de48:	dfc00917 	ldw	ra,36(sp)
    de4c:	df000817 	ldw	fp,32(sp)
    de50:	ddc00717 	ldw	r23,28(sp)
    de54:	dd800617 	ldw	r22,24(sp)
    de58:	dd400517 	ldw	r21,20(sp)
    de5c:	dd000417 	ldw	r20,16(sp)
    de60:	dcc00317 	ldw	r19,12(sp)
    de64:	dc800217 	ldw	r18,8(sp)
    de68:	dc400117 	ldw	r17,4(sp)
    de6c:	dc000017 	ldw	r16,0(sp)
    de70:	dec00a04 	addi	sp,sp,40
    de74:	f800283a 	ret
    de78:	00800c04 	movi	r2,48
    de7c:	88801826 	beq	r17,r2,dee0 <_strtoul_r+0x1d4>
    de80:	183fc426 	beq	r3,zero,dd94 <_strtoul_r+0x88>
    de84:	00800c04 	movi	r2,48
    de88:	88802226 	beq	r17,r2,df14 <_strtoul_r+0x208>
    de8c:	04800284 	movi	r18,10
    de90:	900f883a 	mov	r7,r18
    de94:	04c666b4 	movhi	r19,6554
    de98:	9ce66644 	addi	r19,r19,-26215
    de9c:	02000144 	movi	r8,5
    dea0:	003fc506 	br	ddb8 <_strtoul_r+0xac>
    dea4:	40ffcf0e 	bge	r8,r3,dde4 <_strtoul_r+0xd8>
    dea8:	01bfffc4 	movi	r6,-1
    deac:	003fd006 	br	ddf0 <_strtoul_r+0xe4>
    deb0:	008015c4 	movi	r2,87
    deb4:	8887c83a 	sub	r3,r17,r2
    deb8:	003fda06 	br	de24 <_strtoul_r+0x118>
    debc:	857fffc4 	addi	r21,r16,-1
    dec0:	003fdf06 	br	de40 <_strtoul_r+0x134>
    dec4:	84400007 	ldb	r17,0(r16)
    dec8:	84000044 	addi	r16,r16,1
    decc:	003fac06 	br	dd80 <_strtoul_r+0x74>
    ded0:	84400007 	ldb	r17,0(r16)
    ded4:	07000044 	movi	fp,1
    ded8:	84000044 	addi	r16,r16,1
    dedc:	003fa906 	br	dd84 <_strtoul_r+0x78>
    dee0:	81000007 	ldb	r4,0(r16)
    dee4:	00801e04 	movi	r2,120
    dee8:	20800226 	beq	r4,r2,def4 <_strtoul_r+0x1e8>
    deec:	00801604 	movi	r2,88
    def0:	20bfe31e 	bne	r4,r2,de80 <_strtoul_r+0x174>
    def4:	84400047 	ldb	r17,1(r16)
    def8:	04800404 	movi	r18,16
    defc:	84000084 	addi	r16,r16,2
    df00:	900f883a 	mov	r7,r18
    df04:	04c40034 	movhi	r19,4096
    df08:	9cffffc4 	addi	r19,r19,-1
    df0c:	020003c4 	movi	r8,15
    df10:	003fa906 	br	ddb8 <_strtoul_r+0xac>
    df14:	04800204 	movi	r18,8
    df18:	900f883a 	mov	r7,r18
    df1c:	04c80034 	movhi	r19,8192
    df20:	9cffffc4 	addi	r19,r19,-1
    df24:	020001c4 	movi	r8,7
    df28:	003fa306 	br	ddb8 <_strtoul_r+0xac>
    df2c:	e005003a 	cmpeq	r2,fp,zero
    df30:	103fc11e 	bne	r2,zero,de38 <_strtoul_r+0x12c>
    df34:	014bc83a 	sub	r5,zero,r5
    df38:	003fbf06 	br	de38 <_strtoul_r+0x12c>

0000df3c <strtoul>:
    df3c:	00800074 	movhi	r2,1
    df40:	109b9704 	addi	r2,r2,28252
    df44:	2013883a 	mov	r9,r4
    df48:	11000017 	ldw	r4,0(r2)
    df4c:	2805883a 	mov	r2,r5
    df50:	300f883a 	mov	r7,r6
    df54:	480b883a 	mov	r5,r9
    df58:	100d883a 	mov	r6,r2
    df5c:	000dd0c1 	jmpi	dd0c <_strtoul_r>

0000df60 <_strtoull_r>:
    df60:	defff104 	addi	sp,sp,-60
    df64:	00800074 	movhi	r2,1
    df68:	109b9604 	addi	r2,r2,28248
    df6c:	df000d15 	stw	fp,52(sp)
    df70:	17000017 	ldw	fp,0(r2)
    df74:	ddc00c15 	stw	r23,48(sp)
    df78:	dcc00815 	stw	r19,32(sp)
    df7c:	dfc00e15 	stw	ra,56(sp)
    df80:	dd800b15 	stw	r22,44(sp)
    df84:	dd400a15 	stw	r21,40(sp)
    df88:	dd000915 	stw	r20,36(sp)
    df8c:	dc800715 	stw	r18,28(sp)
    df90:	dc400615 	stw	r17,24(sp)
    df94:	dc000515 	stw	r16,20(sp)
    df98:	d9400215 	stw	r5,8(sp)
    df9c:	d9000115 	stw	r4,4(sp)
    dfa0:	d9800315 	stw	r6,12(sp)
    dfa4:	382f883a 	mov	r23,r7
    dfa8:	2827883a 	mov	r19,r5
    dfac:	9d000007 	ldb	r20,0(r19)
    dfb0:	9cc00044 	addi	r19,r19,1
    dfb4:	e507883a 	add	r3,fp,r20
    dfb8:	18800003 	ldbu	r2,0(r3)
    dfbc:	1080020c 	andi	r2,r2,8
    dfc0:	103ffa1e 	bne	r2,zero,dfac <_strtoull_r+0x4c>
    dfc4:	00800b44 	movi	r2,45
    dfc8:	a0807a26 	beq	r20,r2,e1b4 <_strtoull_r+0x254>
    dfcc:	00800ac4 	movi	r2,43
    dfd0:	a0807526 	beq	r20,r2,e1a8 <_strtoull_r+0x248>
    dfd4:	d8000015 	stw	zero,0(sp)
    dfd8:	b807003a 	cmpeq	r3,r23,zero
    dfdc:	18005a1e 	bne	r3,zero,e148 <_strtoull_r+0x1e8>
    dfe0:	00800404 	movi	r2,16
    dfe4:	b8805826 	beq	r23,r2,e148 <_strtoull_r+0x1e8>
    dfe8:	b82dd7fa 	srai	r22,r23,31
    dfec:	043fffc4 	movi	r16,-1
    dff0:	8009883a 	mov	r4,r16
    dff4:	800b883a 	mov	r5,r16
    dff8:	b80d883a 	mov	r6,r23
    dffc:	b00f883a 	mov	r7,r22
    e000:	000f48c0 	call	f48c <__udivdi3>
    e004:	8009883a 	mov	r4,r16
    e008:	800b883a 	mov	r5,r16
    e00c:	b80d883a 	mov	r6,r23
    e010:	b00f883a 	mov	r7,r22
    e014:	1023883a 	mov	r17,r2
    e018:	1825883a 	mov	r18,r3
    e01c:	000fa680 	call	fa68 <__umoddi3>
    e020:	b82b883a 	mov	r21,r23
    e024:	1019883a 	mov	r12,r2
    e028:	e505883a 	add	r2,fp,r20
    e02c:	11000003 	ldbu	r4,0(r2)
    e030:	0015883a 	mov	r10,zero
    e034:	0017883a 	mov	r11,zero
    e038:	20c0010c 	andi	r3,r4,4
    e03c:	000d883a 	mov	r6,zero
    e040:	18001c26 	beq	r3,zero,e0b4 <_strtoull_r+0x154>
    e044:	a43ff404 	addi	r16,r20,-48
    e048:	85c0220e 	bge	r16,r23,e0d4 <_strtoull_r+0x174>
    e04c:	30003c16 	blt	r6,zero,e140 <_strtoull_r+0x1e0>
    e050:	92c03b36 	bltu	r18,r11,e140 <_strtoull_r+0x1e0>
    e054:	5c803926 	beq	r11,r18,e13c <_strtoull_r+0x1dc>
    e058:	54404c26 	beq	r10,r17,e18c <_strtoull_r+0x22c>
    e05c:	580b883a 	mov	r5,r11
    e060:	5009883a 	mov	r4,r10
    e064:	a80d883a 	mov	r6,r21
    e068:	b00f883a 	mov	r7,r22
    e06c:	db000415 	stw	r12,16(sp)
    e070:	000f3500 	call	f350 <__muldi3>
    e074:	8013d7fa 	srai	r9,r16,31
    e078:	100d883a 	mov	r6,r2
    e07c:	1405883a 	add	r2,r2,r16
    e080:	118d803a 	cmpltu	r6,r2,r6
    e084:	1a47883a 	add	r3,r3,r9
    e088:	db000417 	ldw	r12,16(sp)
    e08c:	30cd883a 	add	r6,r6,r3
    e090:	3017883a 	mov	r11,r6
    e094:	1015883a 	mov	r10,r2
    e098:	01800044 	movi	r6,1
    e09c:	9d000007 	ldb	r20,0(r19)
    e0a0:	9cc00044 	addi	r19,r19,1
    e0a4:	e505883a 	add	r2,fp,r20
    e0a8:	11000003 	ldbu	r4,0(r2)
    e0ac:	20c0010c 	andi	r3,r4,4
    e0b0:	183fe41e 	bne	r3,zero,e044 <_strtoull_r+0xe4>
    e0b4:	208000cc 	andi	r2,r4,3
    e0b8:	10000626 	beq	r2,zero,e0d4 <_strtoull_r+0x174>
    e0bc:	2080004c 	andi	r2,r4,1
    e0c0:	1005003a 	cmpeq	r2,r2,zero
    e0c4:	10002e1e 	bne	r2,zero,e180 <_strtoull_r+0x220>
    e0c8:	02000dc4 	movi	r8,55
    e0cc:	a221c83a 	sub	r16,r20,r8
    e0d0:	85ffde16 	blt	r16,r23,e04c <_strtoull_r+0xec>
    e0d4:	3000530e 	bge	r6,zero,e224 <_strtoull_r+0x2c4>
    e0d8:	d8c00117 	ldw	r3,4(sp)
    e0dc:	02bfffc4 	movi	r10,-1
    e0e0:	00800884 	movi	r2,34
    e0e4:	5017883a 	mov	r11,r10
    e0e8:	18800015 	stw	r2,0(r3)
    e0ec:	d8800317 	ldw	r2,12(sp)
    e0f0:	10000426 	beq	r2,zero,e104 <_strtoull_r+0x1a4>
    e0f4:	3000291e 	bne	r6,zero,e19c <_strtoull_r+0x23c>
    e0f8:	d8800217 	ldw	r2,8(sp)
    e0fc:	d8c00317 	ldw	r3,12(sp)
    e100:	18800015 	stw	r2,0(r3)
    e104:	5005883a 	mov	r2,r10
    e108:	5807883a 	mov	r3,r11
    e10c:	dfc00e17 	ldw	ra,56(sp)
    e110:	df000d17 	ldw	fp,52(sp)
    e114:	ddc00c17 	ldw	r23,48(sp)
    e118:	dd800b17 	ldw	r22,44(sp)
    e11c:	dd400a17 	ldw	r21,40(sp)
    e120:	dd000917 	ldw	r20,36(sp)
    e124:	dcc00817 	ldw	r19,32(sp)
    e128:	dc800717 	ldw	r18,28(sp)
    e12c:	dc400617 	ldw	r17,24(sp)
    e130:	dc000517 	ldw	r16,20(sp)
    e134:	dec00f04 	addi	sp,sp,60
    e138:	f800283a 	ret
    e13c:	8abfc62e 	bgeu	r17,r10,e058 <_strtoull_r+0xf8>
    e140:	01bfffc4 	movi	r6,-1
    e144:	003fd506 	br	e09c <_strtoull_r+0x13c>
    e148:	00800c04 	movi	r2,48
    e14c:	a0801e26 	beq	r20,r2,e1c8 <_strtoull_r+0x268>
    e150:	183fa526 	beq	r3,zero,dfe8 <_strtoull_r+0x88>
    e154:	00800c04 	movi	r2,48
    e158:	a0802a26 	beq	r20,r2,e204 <_strtoull_r+0x2a4>
    e15c:	05c00284 	movi	r23,10
    e160:	b82b883a 	mov	r21,r23
    e164:	046666b4 	movhi	r17,39322
    e168:	8c666644 	addi	r17,r17,-26215
    e16c:	002d883a 	mov	r22,zero
    e170:	048666b4 	movhi	r18,6554
    e174:	94a66644 	addi	r18,r18,-26215
    e178:	03000144 	movi	r12,5
    e17c:	003faa06 	br	e028 <_strtoull_r+0xc8>
    e180:	020015c4 	movi	r8,87
    e184:	a221c83a 	sub	r16,r20,r8
    e188:	003fd106 	br	e0d0 <_strtoull_r+0x170>
    e18c:	5cbfb31e 	bne	r11,r18,e05c <_strtoull_r+0xfc>
    e190:	643fb20e 	bge	r12,r16,e05c <_strtoull_r+0xfc>
    e194:	01bfffc4 	movi	r6,-1
    e198:	003fc006 	br	e09c <_strtoull_r+0x13c>
    e19c:	9cffffc4 	addi	r19,r19,-1
    e1a0:	dcc00215 	stw	r19,8(sp)
    e1a4:	003fd406 	br	e0f8 <_strtoull_r+0x198>
    e1a8:	9d000007 	ldb	r20,0(r19)
    e1ac:	9cc00044 	addi	r19,r19,1
    e1b0:	003f8806 	br	dfd4 <_strtoull_r+0x74>
    e1b4:	9d000007 	ldb	r20,0(r19)
    e1b8:	00800044 	movi	r2,1
    e1bc:	9cc00044 	addi	r19,r19,1
    e1c0:	d8800015 	stw	r2,0(sp)
    e1c4:	003f8406 	br	dfd8 <_strtoull_r+0x78>
    e1c8:	99000007 	ldb	r4,0(r19)
    e1cc:	00801e04 	movi	r2,120
    e1d0:	20800226 	beq	r4,r2,e1dc <_strtoull_r+0x27c>
    e1d4:	00801604 	movi	r2,88
    e1d8:	20bfdd1e 	bne	r4,r2,e150 <_strtoull_r+0x1f0>
    e1dc:	9d000047 	ldb	r20,1(r19)
    e1e0:	05c00404 	movi	r23,16
    e1e4:	b82b883a 	mov	r21,r23
    e1e8:	047fffc4 	movi	r17,-1
    e1ec:	9cc00084 	addi	r19,r19,2
    e1f0:	002d883a 	mov	r22,zero
    e1f4:	04840034 	movhi	r18,4096
    e1f8:	94bfffc4 	addi	r18,r18,-1
    e1fc:	030003c4 	movi	r12,15
    e200:	003f8906 	br	e028 <_strtoull_r+0xc8>
    e204:	05c00204 	movi	r23,8
    e208:	b82b883a 	mov	r21,r23
    e20c:	047fffc4 	movi	r17,-1
    e210:	002d883a 	mov	r22,zero
    e214:	04880034 	movhi	r18,8192
    e218:	94bfffc4 	addi	r18,r18,-1
    e21c:	030001c4 	movi	r12,7
    e220:	003f8106 	br	e028 <_strtoull_r+0xc8>
    e224:	d8c00017 	ldw	r3,0(sp)
    e228:	1805003a 	cmpeq	r2,r3,zero
    e22c:	103faf1e 	bne	r2,zero,e0ec <_strtoull_r+0x18c>
    e230:	0009883a 	mov	r4,zero
    e234:	2285c83a 	sub	r2,r4,r10
    e238:	02c7c83a 	sub	r3,zero,r11
    e23c:	2089803a 	cmpltu	r4,r4,r2
    e240:	1909c83a 	sub	r4,r3,r4
    e244:	1015883a 	mov	r10,r2
    e248:	2017883a 	mov	r11,r4
    e24c:	003fa706 	br	e0ec <_strtoull_r+0x18c>

0000e250 <__submore>:
    e250:	defffa04 	addi	sp,sp,-24
    e254:	28c00c17 	ldw	r3,48(r5)
    e258:	dc800215 	stw	r18,8(sp)
    e25c:	2825883a 	mov	r18,r5
    e260:	dc000015 	stw	r16,0(sp)
    e264:	90801004 	addi	r2,r18,64
    e268:	04010004 	movi	r16,1024
    e26c:	dfc00515 	stw	ra,20(sp)
    e270:	dd000415 	stw	r20,16(sp)
    e274:	dcc00315 	stw	r19,12(sp)
    e278:	dc400115 	stw	r17,4(sp)
    e27c:	800b883a 	mov	r5,r16
    e280:	18801b26 	beq	r3,r2,e2f0 <__submore+0xa0>
    e284:	94400d17 	ldw	r17,52(r18)
    e288:	180b883a 	mov	r5,r3
    e28c:	8c69883a 	add	r20,r17,r17
    e290:	a00d883a 	mov	r6,r20
    e294:	000b9f40 	call	b9f4 <_realloc_r>
    e298:	1467883a 	add	r19,r2,r17
    e29c:	1021883a 	mov	r16,r2
    e2a0:	880d883a 	mov	r6,r17
    e2a4:	9809883a 	mov	r4,r19
    e2a8:	100b883a 	mov	r5,r2
    e2ac:	10000e26 	beq	r2,zero,e2e8 <__submore+0x98>
    e2b0:	00039640 	call	3964 <memcpy>
    e2b4:	000d883a 	mov	r6,zero
    e2b8:	95000d15 	stw	r20,52(r18)
    e2bc:	94c00015 	stw	r19,0(r18)
    e2c0:	94000c15 	stw	r16,48(r18)
    e2c4:	3005883a 	mov	r2,r6
    e2c8:	dfc00517 	ldw	ra,20(sp)
    e2cc:	dd000417 	ldw	r20,16(sp)
    e2d0:	dcc00317 	ldw	r19,12(sp)
    e2d4:	dc800217 	ldw	r18,8(sp)
    e2d8:	dc400117 	ldw	r17,4(sp)
    e2dc:	dc000017 	ldw	r16,0(sp)
    e2e0:	dec00604 	addi	sp,sp,24
    e2e4:	f800283a 	ret
    e2e8:	01bfffc4 	movi	r6,-1
    e2ec:	003ff506 	br	e2c4 <__submore+0x74>
    e2f0:	00031400 	call	3140 <_malloc_r>
    e2f4:	1009883a 	mov	r4,r2
    e2f8:	1140ff44 	addi	r5,r2,1021
    e2fc:	000d883a 	mov	r6,zero
    e300:	103ff926 	beq	r2,zero,e2e8 <__submore+0x98>
    e304:	90801083 	ldbu	r2,66(r18)
    e308:	94000d15 	stw	r16,52(r18)
    e30c:	91000c15 	stw	r4,48(r18)
    e310:	28800085 	stb	r2,2(r5)
    e314:	90c01043 	ldbu	r3,65(r18)
    e318:	28c00045 	stb	r3,1(r5)
    e31c:	90801003 	ldbu	r2,64(r18)
    e320:	2080ff45 	stb	r2,1021(r4)
    e324:	91400015 	stw	r5,0(r18)
    e328:	003fe606 	br	e2c4 <__submore+0x74>

0000e32c <_ungetc_r>:
    e32c:	defffc04 	addi	sp,sp,-16
    e330:	00bfffc4 	movi	r2,-1
    e334:	dc400215 	stw	r17,8(sp)
    e338:	dc000115 	stw	r16,4(sp)
    e33c:	dfc00315 	stw	ra,12(sp)
    e340:	2821883a 	mov	r16,r5
    e344:	2023883a 	mov	r17,r4
    e348:	28801826 	beq	r5,r2,e3ac <_ungetc_r+0x80>
    e34c:	20000226 	beq	r4,zero,e358 <_ungetc_r+0x2c>
    e350:	20800e17 	ldw	r2,56(r4)
    e354:	10001b26 	beq	r2,zero,e3c4 <_ungetc_r+0x98>
    e358:	3100030b 	ldhu	r4,12(r6)
    e35c:	00bff7c4 	movi	r2,-33
    e360:	2084703a 	and	r2,r4,r2
    e364:	117fffcc 	andi	r5,r2,65535
    e368:	28c0010c 	andi	r3,r5,4
    e36c:	1009883a 	mov	r4,r2
    e370:	3080030d 	sth	r2,12(r6)
    e374:	18003526 	beq	r3,zero,e44c <_ungetc_r+0x120>
    e378:	30800c17 	ldw	r2,48(r6)
    e37c:	84003fcc 	andi	r16,r16,255
    e380:	10001426 	beq	r2,zero,e3d4 <_ungetc_r+0xa8>
    e384:	30c00117 	ldw	r3,4(r6)
    e388:	30800d17 	ldw	r2,52(r6)
    e38c:	1880380e 	bge	r3,r2,e470 <_ungetc_r+0x144>
    e390:	30c00017 	ldw	r3,0(r6)
    e394:	19ffffc4 	addi	r7,r3,-1
    e398:	31c00015 	stw	r7,0(r6)
    e39c:	1c3fffc5 	stb	r16,-1(r3)
    e3a0:	30800117 	ldw	r2,4(r6)
    e3a4:	10800044 	addi	r2,r2,1
    e3a8:	30800115 	stw	r2,4(r6)
    e3ac:	8005883a 	mov	r2,r16
    e3b0:	dfc00317 	ldw	ra,12(sp)
    e3b4:	dc400217 	ldw	r17,8(sp)
    e3b8:	dc000117 	ldw	r16,4(sp)
    e3bc:	dec00404 	addi	sp,sp,16
    e3c0:	f800283a 	ret
    e3c4:	d9800015 	stw	r6,0(sp)
    e3c8:	0002d680 	call	2d68 <__sinit>
    e3cc:	d9800017 	ldw	r6,0(sp)
    e3d0:	003fe106 	br	e358 <_ungetc_r+0x2c>
    e3d4:	30800417 	ldw	r2,16(r6)
    e3d8:	10002326 	beq	r2,zero,e468 <_ungetc_r+0x13c>
    e3dc:	31c00017 	ldw	r7,0(r6)
    e3e0:	11c0022e 	bgeu	r2,r7,e3ec <_ungetc_r+0xc0>
    e3e4:	38bfffc3 	ldbu	r2,-1(r7)
    e3e8:	80801226 	beq	r16,r2,e434 <_ungetc_r+0x108>
    e3ec:	30c00117 	ldw	r3,4(r6)
    e3f0:	00800044 	movi	r2,1
    e3f4:	30800115 	stw	r2,4(r6)
    e3f8:	008000c4 	movi	r2,3
    e3fc:	31001004 	addi	r4,r6,64
    e400:	31401084 	addi	r5,r6,66
    e404:	30800d15 	stw	r2,52(r6)
    e408:	8005883a 	mov	r2,r16
    e40c:	30c00f15 	stw	r3,60(r6)
    e410:	31c00e15 	stw	r7,56(r6)
    e414:	31000c15 	stw	r4,48(r6)
    e418:	31400015 	stw	r5,0(r6)
    e41c:	34001085 	stb	r16,66(r6)
    e420:	dfc00317 	ldw	ra,12(sp)
    e424:	dc400217 	ldw	r17,8(sp)
    e428:	dc000117 	ldw	r16,4(sp)
    e42c:	dec00404 	addi	sp,sp,16
    e430:	f800283a 	ret
    e434:	30800117 	ldw	r2,4(r6)
    e438:	39ffffc4 	addi	r7,r7,-1
    e43c:	31c00015 	stw	r7,0(r6)
    e440:	10800044 	addi	r2,r2,1
    e444:	30800115 	stw	r2,4(r6)
    e448:	003fd806 	br	e3ac <_ungetc_r+0x80>
    e44c:	2880040c 	andi	r2,r5,16
    e450:	10000d26 	beq	r2,zero,e488 <_ungetc_r+0x15c>
    e454:	2880020c 	andi	r2,r5,8
    e458:	10000d1e 	bne	r2,zero,e490 <_ungetc_r+0x164>
    e45c:	20800114 	ori	r2,r4,4
    e460:	3080030d 	sth	r2,12(r6)
    e464:	003fc406 	br	e378 <_ungetc_r+0x4c>
    e468:	31c00017 	ldw	r7,0(r6)
    e46c:	003fdf06 	br	e3ec <_ungetc_r+0xc0>
    e470:	300b883a 	mov	r5,r6
    e474:	8809883a 	mov	r4,r17
    e478:	d9800015 	stw	r6,0(sp)
    e47c:	000e2500 	call	e250 <__submore>
    e480:	d9800017 	ldw	r6,0(sp)
    e484:	103fc226 	beq	r2,zero,e390 <_ungetc_r+0x64>
    e488:	043fffc4 	movi	r16,-1
    e48c:	003fc706 	br	e3ac <_ungetc_r+0x80>
    e490:	300b883a 	mov	r5,r6
    e494:	8809883a 	mov	r4,r17
    e498:	d9800015 	stw	r6,0(sp)
    e49c:	00095780 	call	9578 <_fflush_r>
    e4a0:	d9800017 	ldw	r6,0(sp)
    e4a4:	103ff81e 	bne	r2,zero,e488 <_ungetc_r+0x15c>
    e4a8:	3100030b 	ldhu	r4,12(r6)
    e4ac:	00bffdc4 	movi	r2,-9
    e4b0:	30000215 	stw	zero,8(r6)
    e4b4:	2084703a 	and	r2,r4,r2
    e4b8:	1009883a 	mov	r4,r2
    e4bc:	3080030d 	sth	r2,12(r6)
    e4c0:	30000615 	stw	zero,24(r6)
    e4c4:	003fe506 	br	e45c <_ungetc_r+0x130>

0000e4c8 <ungetc>:
    e4c8:	01800074 	movhi	r6,1
    e4cc:	319b9704 	addi	r6,r6,28252
    e4d0:	2007883a 	mov	r3,r4
    e4d4:	31000017 	ldw	r4,0(r6)
    e4d8:	280d883a 	mov	r6,r5
    e4dc:	180b883a 	mov	r5,r3
    e4e0:	000e32c1 	jmpi	e32c <_ungetc_r>

0000e4e4 <__swbuf_r>:
    e4e4:	defffc04 	addi	sp,sp,-16
    e4e8:	dc400215 	stw	r17,8(sp)
    e4ec:	dc000115 	stw	r16,4(sp)
    e4f0:	dfc00315 	stw	ra,12(sp)
    e4f4:	2023883a 	mov	r17,r4
    e4f8:	2821883a 	mov	r16,r5
    e4fc:	20000226 	beq	r4,zero,e508 <__swbuf_r+0x24>
    e500:	20800e17 	ldw	r2,56(r4)
    e504:	10002f26 	beq	r2,zero,e5c4 <__swbuf_r+0xe0>
    e508:	3080030b 	ldhu	r2,12(r6)
    e50c:	30c00617 	ldw	r3,24(r6)
    e510:	1080020c 	andi	r2,r2,8
    e514:	30c00215 	stw	r3,8(r6)
    e518:	10002226 	beq	r2,zero,e5a4 <__swbuf_r+0xc0>
    e51c:	30c00417 	ldw	r3,16(r6)
    e520:	18002026 	beq	r3,zero,e5a4 <__swbuf_r+0xc0>
    e524:	31000017 	ldw	r4,0(r6)
    e528:	30800517 	ldw	r2,20(r6)
    e52c:	20c7c83a 	sub	r3,r4,r3
    e530:	18802f0e 	bge	r3,r2,e5f0 <__swbuf_r+0x10c>
    e534:	19400044 	addi	r5,r3,1
    e538:	30800217 	ldw	r2,8(r6)
    e53c:	84003fcc 	andi	r16,r16,255
    e540:	20c00044 	addi	r3,r4,1
    e544:	10bfffc4 	addi	r2,r2,-1
    e548:	30800215 	stw	r2,8(r6)
    e54c:	24000005 	stb	r16,0(r4)
    e550:	30800517 	ldw	r2,20(r6)
    e554:	30c00015 	stw	r3,0(r6)
    e558:	11400c26 	beq	r2,r5,e58c <__swbuf_r+0xa8>
    e55c:	3080030b 	ldhu	r2,12(r6)
    e560:	1080004c 	andi	r2,r2,1
    e564:	1005003a 	cmpeq	r2,r2,zero
    e568:	10000626 	beq	r2,zero,e584 <__swbuf_r+0xa0>
    e56c:	8005883a 	mov	r2,r16
    e570:	dfc00317 	ldw	ra,12(sp)
    e574:	dc400217 	ldw	r17,8(sp)
    e578:	dc000117 	ldw	r16,4(sp)
    e57c:	dec00404 	addi	sp,sp,16
    e580:	f800283a 	ret
    e584:	00800284 	movi	r2,10
    e588:	80bff81e 	bne	r16,r2,e56c <__swbuf_r+0x88>
    e58c:	8809883a 	mov	r4,r17
    e590:	300b883a 	mov	r5,r6
    e594:	00095780 	call	9578 <_fflush_r>
    e598:	103ff426 	beq	r2,zero,e56c <__swbuf_r+0x88>
    e59c:	043fffc4 	movi	r16,-1
    e5a0:	003ff206 	br	e56c <__swbuf_r+0x88>
    e5a4:	300b883a 	mov	r5,r6
    e5a8:	8809883a 	mov	r4,r17
    e5ac:	d9800015 	stw	r6,0(sp)
    e5b0:	0007adc0 	call	7adc <__swsetup_r>
    e5b4:	d9800017 	ldw	r6,0(sp)
    e5b8:	1000061e 	bne	r2,zero,e5d4 <__swbuf_r+0xf0>
    e5bc:	30c00417 	ldw	r3,16(r6)
    e5c0:	003fd806 	br	e524 <__swbuf_r+0x40>
    e5c4:	d9800015 	stw	r6,0(sp)
    e5c8:	0002d680 	call	2d68 <__sinit>
    e5cc:	d9800017 	ldw	r6,0(sp)
    e5d0:	003fcd06 	br	e508 <__swbuf_r+0x24>
    e5d4:	3080030b 	ldhu	r2,12(r6)
    e5d8:	00c00244 	movi	r3,9
    e5dc:	043fffc4 	movi	r16,-1
    e5e0:	10801014 	ori	r2,r2,64
    e5e4:	3080030d 	sth	r2,12(r6)
    e5e8:	88c00015 	stw	r3,0(r17)
    e5ec:	003fdf06 	br	e56c <__swbuf_r+0x88>
    e5f0:	300b883a 	mov	r5,r6
    e5f4:	8809883a 	mov	r4,r17
    e5f8:	d9800015 	stw	r6,0(sp)
    e5fc:	00095780 	call	9578 <_fflush_r>
    e600:	d9800017 	ldw	r6,0(sp)
    e604:	103fe51e 	bne	r2,zero,e59c <__swbuf_r+0xb8>
    e608:	31000017 	ldw	r4,0(r6)
    e60c:	01400044 	movi	r5,1
    e610:	003fc906 	br	e538 <__swbuf_r+0x54>

0000e614 <__swbuf>:
    e614:	01800074 	movhi	r6,1
    e618:	319b9704 	addi	r6,r6,28252
    e61c:	2007883a 	mov	r3,r4
    e620:	31000017 	ldw	r4,0(r6)
    e624:	280d883a 	mov	r6,r5
    e628:	180b883a 	mov	r5,r3
    e62c:	000e4e41 	jmpi	e4e4 <__swbuf_r>

0000e630 <_calloc_r>:
    e630:	298b383a 	mul	r5,r5,r6
    e634:	defffe04 	addi	sp,sp,-8
    e638:	dc000015 	stw	r16,0(sp)
    e63c:	dfc00115 	stw	ra,4(sp)
    e640:	00031400 	call	3140 <_malloc_r>
    e644:	1021883a 	mov	r16,r2
    e648:	01c00904 	movi	r7,36
    e64c:	10000d26 	beq	r2,zero,e684 <_calloc_r+0x54>
    e650:	10ffff17 	ldw	r3,-4(r2)
    e654:	1009883a 	mov	r4,r2
    e658:	00bfff04 	movi	r2,-4
    e65c:	1886703a 	and	r3,r3,r2
    e660:	1887883a 	add	r3,r3,r2
    e664:	180d883a 	mov	r6,r3
    e668:	000b883a 	mov	r5,zero
    e66c:	38c01736 	bltu	r7,r3,e6cc <_calloc_r+0x9c>
    e670:	008004c4 	movi	r2,19
    e674:	10c00836 	bltu	r2,r3,e698 <_calloc_r+0x68>
    e678:	20000215 	stw	zero,8(r4)
    e67c:	20000015 	stw	zero,0(r4)
    e680:	20000115 	stw	zero,4(r4)
    e684:	8005883a 	mov	r2,r16
    e688:	dfc00117 	ldw	ra,4(sp)
    e68c:	dc000017 	ldw	r16,0(sp)
    e690:	dec00204 	addi	sp,sp,8
    e694:	f800283a 	ret
    e698:	008006c4 	movi	r2,27
    e69c:	80000015 	stw	zero,0(r16)
    e6a0:	80000115 	stw	zero,4(r16)
    e6a4:	81000204 	addi	r4,r16,8
    e6a8:	10fff32e 	bgeu	r2,r3,e678 <_calloc_r+0x48>
    e6ac:	80000215 	stw	zero,8(r16)
    e6b0:	80000315 	stw	zero,12(r16)
    e6b4:	81000404 	addi	r4,r16,16
    e6b8:	19ffef1e 	bne	r3,r7,e678 <_calloc_r+0x48>
    e6bc:	81000604 	addi	r4,r16,24
    e6c0:	80000415 	stw	zero,16(r16)
    e6c4:	80000515 	stw	zero,20(r16)
    e6c8:	003feb06 	br	e678 <_calloc_r+0x48>
    e6cc:	0003a040 	call	3a04 <memset>
    e6d0:	8005883a 	mov	r2,r16
    e6d4:	dfc00117 	ldw	ra,4(sp)
    e6d8:	dc000017 	ldw	r16,0(sp)
    e6dc:	dec00204 	addi	sp,sp,8
    e6e0:	f800283a 	ret

0000e6e4 <_fstat_r>:
    e6e4:	defffd04 	addi	sp,sp,-12
    e6e8:	dc000015 	stw	r16,0(sp)
    e6ec:	040000b4 	movhi	r16,2
    e6f0:	84227104 	addi	r16,r16,-30268
    e6f4:	dc400115 	stw	r17,4(sp)
    e6f8:	80000015 	stw	zero,0(r16)
    e6fc:	2023883a 	mov	r17,r4
    e700:	2809883a 	mov	r4,r5
    e704:	300b883a 	mov	r5,r6
    e708:	dfc00215 	stw	ra,8(sp)
    e70c:	0011dc00 	call	11dc0 <fstat>
    e710:	1007883a 	mov	r3,r2
    e714:	00bfffc4 	movi	r2,-1
    e718:	18800626 	beq	r3,r2,e734 <_fstat_r+0x50>
    e71c:	1805883a 	mov	r2,r3
    e720:	dfc00217 	ldw	ra,8(sp)
    e724:	dc400117 	ldw	r17,4(sp)
    e728:	dc000017 	ldw	r16,0(sp)
    e72c:	dec00304 	addi	sp,sp,12
    e730:	f800283a 	ret
    e734:	80800017 	ldw	r2,0(r16)
    e738:	103ff826 	beq	r2,zero,e71c <_fstat_r+0x38>
    e73c:	88800015 	stw	r2,0(r17)
    e740:	1805883a 	mov	r2,r3
    e744:	dfc00217 	ldw	ra,8(sp)
    e748:	dc400117 	ldw	r17,4(sp)
    e74c:	dc000017 	ldw	r16,0(sp)
    e750:	dec00304 	addi	sp,sp,12
    e754:	f800283a 	ret

0000e758 <htinit>:
    e758:	28800003 	ldbu	r2,0(r5)
    e75c:	10000626 	beq	r2,zero,e778 <htinit+0x20>
    e760:	1105883a 	add	r2,r2,r4
    e764:	11800005 	stb	r6,0(r2)
    e768:	28800043 	ldbu	r2,1(r5)
    e76c:	31800044 	addi	r6,r6,1
    e770:	29400044 	addi	r5,r5,1
    e774:	103ffa1e 	bne	r2,zero,e760 <htinit+0x8>
    e778:	f800283a 	ret

0000e77c <__hexdig_init>:
    e77c:	defffd04 	addi	sp,sp,-12
    e780:	dc400015 	stw	r17,0(sp)
    e784:	044000b4 	movhi	r17,2
    e788:	8c62b604 	addi	r17,r17,-29992
    e78c:	dcc00115 	stw	r19,4(sp)
    e790:	8809883a 	mov	r4,r17
    e794:	04c00684 	movi	r19,26
    e798:	01400074 	movhi	r5,1
    e79c:	29549104 	addi	r5,r5,21060
    e7a0:	01800404 	movi	r6,16
    e7a4:	dfc00215 	stw	ra,8(sp)
    e7a8:	000e7580 	call	e758 <htinit>
    e7ac:	980d883a 	mov	r6,r19
    e7b0:	8809883a 	mov	r4,r17
    e7b4:	01400074 	movhi	r5,1
    e7b8:	29549404 	addi	r5,r5,21072
    e7bc:	000e7580 	call	e758 <htinit>
    e7c0:	8809883a 	mov	r4,r17
    e7c4:	980d883a 	mov	r6,r19
    e7c8:	01400074 	movhi	r5,1
    e7cc:	29549604 	addi	r5,r5,21080
    e7d0:	dfc00217 	ldw	ra,8(sp)
    e7d4:	dcc00117 	ldw	r19,4(sp)
    e7d8:	dc400017 	ldw	r17,0(sp)
    e7dc:	dec00304 	addi	sp,sp,12
    e7e0:	000e7581 	jmpi	e758 <htinit>

0000e7e4 <rshift>:
    e7e4:	2807d17a 	srai	r3,r5,5
    e7e8:	20800417 	ldw	r2,16(r4)
    e7ec:	22400504 	addi	r9,r4,20
    e7f0:	480f883a 	mov	r7,r9
    e7f4:	1880190e 	bge	r3,r2,e85c <rshift+0x78>
    e7f8:	1085883a 	add	r2,r2,r2
    e7fc:	18c7883a 	add	r3,r3,r3
    e800:	1085883a 	add	r2,r2,r2
    e804:	18c7883a 	add	r3,r3,r3
    e808:	294007cc 	andi	r5,r5,31
    e80c:	4891883a 	add	r8,r9,r2
    e810:	48cd883a 	add	r6,r9,r3
    e814:	28001726 	beq	r5,zero,e874 <rshift+0x90>
    e818:	30c00017 	ldw	r3,0(r6)
    e81c:	00800804 	movi	r2,32
    e820:	31800104 	addi	r6,r6,4
    e824:	1155c83a 	sub	r10,r2,r5
    e828:	1946d83a 	srl	r3,r3,r5
    e82c:	3200092e 	bgeu	r6,r8,e854 <rshift+0x70>
    e830:	30800017 	ldw	r2,0(r6)
    e834:	1284983a 	sll	r2,r2,r10
    e838:	10c4b03a 	or	r2,r2,r3
    e83c:	38800015 	stw	r2,0(r7)
    e840:	30c00017 	ldw	r3,0(r6)
    e844:	31800104 	addi	r6,r6,4
    e848:	39c00104 	addi	r7,r7,4
    e84c:	1946d83a 	srl	r3,r3,r5
    e850:	323ff736 	bltu	r6,r8,e830 <rshift+0x4c>
    e854:	38c00015 	stw	r3,0(r7)
    e858:	18000c1e 	bne	r3,zero,e88c <rshift+0xa8>
    e85c:	3a45c83a 	sub	r2,r7,r9
    e860:	1005d0ba 	srai	r2,r2,2
    e864:	20800415 	stw	r2,16(r4)
    e868:	1000011e 	bne	r2,zero,e870 <rshift+0x8c>
    e86c:	20000515 	stw	zero,20(r4)
    e870:	f800283a 	ret
    e874:	323ff92e 	bgeu	r6,r8,e85c <rshift+0x78>
    e878:	30800017 	ldw	r2,0(r6)
    e87c:	31800104 	addi	r6,r6,4
    e880:	38800015 	stw	r2,0(r7)
    e884:	39c00104 	addi	r7,r7,4
    e888:	003ffa06 	br	e874 <rshift+0x90>
    e88c:	39c00104 	addi	r7,r7,4
    e890:	003ff206 	br	e85c <rshift+0x78>

0000e894 <__gethex>:
    e894:	defff304 	addi	sp,sp,-52
    e898:	dd400815 	stw	r21,32(sp)
    e89c:	dd000715 	stw	r20,28(sp)
    e8a0:	dcc00615 	stw	r19,24(sp)
    e8a4:	dc400415 	stw	r17,16(sp)
    e8a8:	dfc00c15 	stw	ra,48(sp)
    e8ac:	df000b15 	stw	fp,44(sp)
    e8b0:	ddc00a15 	stw	r23,40(sp)
    e8b4:	dd800915 	stw	r22,36(sp)
    e8b8:	dc800515 	stw	r18,20(sp)
    e8bc:	dc000315 	stw	r16,12(sp)
    e8c0:	044000b4 	movhi	r17,2
    e8c4:	8c62b604 	addi	r17,r17,-29992
    e8c8:	88800c03 	ldbu	r2,48(r17)
    e8cc:	202b883a 	mov	r21,r4
    e8d0:	2827883a 	mov	r19,r5
    e8d4:	3029883a 	mov	r20,r6
    e8d8:	d9c00115 	stw	r7,4(sp)
    e8dc:	10006e26 	beq	r2,zero,ea98 <__gethex+0x204>
    e8e0:	99800017 	ldw	r6,0(r19)
    e8e4:	00800c04 	movi	r2,48
    e8e8:	31000083 	ldbu	r4,2(r6)
    e8ec:	30c00084 	addi	r3,r6,2
    e8f0:	20806f1e 	bne	r4,r2,eab0 <__gethex+0x21c>
    e8f4:	200b883a 	mov	r5,r4
    e8f8:	3007883a 	mov	r3,r6
    e8fc:	188000c3 	ldbu	r2,3(r3)
    e900:	18c00044 	addi	r3,r3,1
    e904:	1009883a 	mov	r4,r2
    e908:	117ffc26 	beq	r2,r5,e8fc <__gethex+0x68>
    e90c:	1997c83a 	sub	r11,r3,r6
    e910:	19400084 	addi	r5,r3,2
    e914:	2445883a 	add	r2,r4,r17
    e918:	10c00003 	ldbu	r3,0(r2)
    e91c:	18002d26 	beq	r3,zero,e9d4 <__gethex+0x140>
    e920:	29000003 	ldbu	r4,0(r5)
    e924:	2825883a 	mov	r18,r5
    e928:	000d883a 	mov	r6,zero
    e92c:	0013883a 	mov	r9,zero
    e930:	21003fcc 	andi	r4,r4,255
    e934:	2445883a 	add	r2,r4,r17
    e938:	10c00003 	ldbu	r3,0(r2)
    e93c:	18000526 	beq	r3,zero,e954 <__gethex+0xc0>
    e940:	29400044 	addi	r5,r5,1
    e944:	29000003 	ldbu	r4,0(r5)
    e948:	2445883a 	add	r2,r4,r17
    e94c:	10c00003 	ldbu	r3,0(r2)
    e950:	183ffb1e 	bne	r3,zero,e940 <__gethex+0xac>
    e954:	00800b84 	movi	r2,46
    e958:	20805826 	beq	r4,r2,eabc <__gethex+0x228>
    e95c:	30007a26 	beq	r6,zero,eb48 <__gethex+0x2b4>
    e960:	2985c83a 	sub	r2,r5,r6
    e964:	1085883a 	add	r2,r2,r2
    e968:	1085883a 	add	r2,r2,r2
    e96c:	00adc83a 	sub	r22,zero,r2
    e970:	2821883a 	mov	r16,r5
    e974:	80c00003 	ldbu	r3,0(r16)
    e978:	00801404 	movi	r2,80
    e97c:	18801e26 	beq	r3,r2,e9f8 <__gethex+0x164>
    e980:	00801c04 	movi	r2,112
    e984:	18801c26 	beq	r3,r2,e9f8 <__gethex+0x164>
    e988:	800d883a 	mov	r6,r16
    e98c:	4805003a 	cmpeq	r2,r9,zero
    e990:	99800015 	stw	r6,0(r19)
    e994:	1000861e 	bne	r2,zero,ebb0 <__gethex+0x31c>
    e998:	58003d26 	beq	r11,zero,ea90 <__gethex+0x1fc>
    e99c:	0025883a 	mov	r18,zero
    e9a0:	9005883a 	mov	r2,r18
    e9a4:	dfc00c17 	ldw	ra,48(sp)
    e9a8:	df000b17 	ldw	fp,44(sp)
    e9ac:	ddc00a17 	ldw	r23,40(sp)
    e9b0:	dd800917 	ldw	r22,36(sp)
    e9b4:	dd400817 	ldw	r21,32(sp)
    e9b8:	dd000717 	ldw	r20,28(sp)
    e9bc:	dcc00617 	ldw	r19,24(sp)
    e9c0:	dc800517 	ldw	r18,20(sp)
    e9c4:	dc400417 	ldw	r17,16(sp)
    e9c8:	dc000317 	ldw	r16,12(sp)
    e9cc:	dec00d04 	addi	sp,sp,52
    e9d0:	f800283a 	ret
    e9d4:	00800b84 	movi	r2,46
    e9d8:	20804a26 	beq	r4,r2,eb04 <__gethex+0x270>
    e9dc:	2821883a 	mov	r16,r5
    e9e0:	80c00003 	ldbu	r3,0(r16)
    e9e4:	00801404 	movi	r2,80
    e9e8:	2825883a 	mov	r18,r5
    e9ec:	02400044 	movi	r9,1
    e9f0:	002d883a 	mov	r22,zero
    e9f4:	18bfe21e 	bne	r3,r2,e980 <__gethex+0xec>
    e9f8:	80c00043 	ldbu	r3,1(r16)
    e9fc:	00800ac4 	movi	r2,43
    ea00:	81000044 	addi	r4,r16,1
    ea04:	18804a26 	beq	r3,r2,eb30 <__gethex+0x29c>
    ea08:	00800b44 	movi	r2,45
    ea0c:	18804c26 	beq	r3,r2,eb40 <__gethex+0x2ac>
    ea10:	0015883a 	mov	r10,zero
    ea14:	1c45883a 	add	r2,r3,r17
    ea18:	10800003 	ldbu	r2,0(r2)
    ea1c:	103fda26 	beq	r2,zero,e988 <__gethex+0xf4>
    ea20:	02000644 	movi	r8,25
    ea24:	40bfd816 	blt	r8,r2,e988 <__gethex+0xf4>
    ea28:	20c00043 	ldbu	r3,1(r4)
    ea2c:	11fffc04 	addi	r7,r2,-16
    ea30:	008000b4 	movhi	r2,2
    ea34:	10a2b604 	addi	r2,r2,-29992
    ea38:	1887883a 	add	r3,r3,r2
    ea3c:	18800003 	ldbu	r2,0(r3)
    ea40:	21800044 	addi	r6,r4,1
    ea44:	10000d26 	beq	r2,zero,ea7c <__gethex+0x1e8>
    ea48:	100b883a 	mov	r5,r2
    ea4c:	4080020e 	bge	r8,r2,ea58 <__gethex+0x1c4>
    ea50:	00000a06 	br	ea7c <__gethex+0x1e8>
    ea54:	41000916 	blt	r8,r4,ea7c <__gethex+0x1e8>
    ea58:	31800044 	addi	r6,r6,1
    ea5c:	30800003 	ldbu	r2,0(r6)
    ea60:	38c002a4 	muli	r3,r7,10
    ea64:	1445883a 	add	r2,r2,r17
    ea68:	11000003 	ldbu	r4,0(r2)
    ea6c:	1947883a 	add	r3,r3,r5
    ea70:	19fffc04 	addi	r7,r3,-16
    ea74:	200b883a 	mov	r5,r4
    ea78:	203ff61e 	bne	r4,zero,ea54 <__gethex+0x1c0>
    ea7c:	5005003a 	cmpeq	r2,r10,zero
    ea80:	1000011e 	bne	r2,zero,ea88 <__gethex+0x1f4>
    ea84:	01cfc83a 	sub	r7,zero,r7
    ea88:	b1ed883a 	add	r22,r22,r7
    ea8c:	003fbf06 	br	e98c <__gethex+0xf8>
    ea90:	04800184 	movi	r18,6
    ea94:	003fc206 	br	e9a0 <__gethex+0x10c>
    ea98:	000e77c0 	call	e77c <__hexdig_init>
    ea9c:	99800017 	ldw	r6,0(r19)
    eaa0:	00800c04 	movi	r2,48
    eaa4:	31000083 	ldbu	r4,2(r6)
    eaa8:	30c00084 	addi	r3,r6,2
    eaac:	20bf9126 	beq	r4,r2,e8f4 <__gethex+0x60>
    eab0:	180b883a 	mov	r5,r3
    eab4:	0017883a 	mov	r11,zero
    eab8:	003f9606 	br	e914 <__gethex+0x80>
    eabc:	303fa81e 	bne	r6,zero,e960 <__gethex+0xcc>
    eac0:	29400044 	addi	r5,r5,1
    eac4:	28800003 	ldbu	r2,0(r5)
    eac8:	1445883a 	add	r2,r2,r17
    eacc:	10c00003 	ldbu	r3,0(r2)
    ead0:	1800ad26 	beq	r3,zero,ed88 <__gethex+0x4f4>
    ead4:	2809883a 	mov	r4,r5
    ead8:	21000044 	addi	r4,r4,1
    eadc:	20800003 	ldbu	r2,0(r4)
    eae0:	1445883a 	add	r2,r2,r17
    eae4:	10c00003 	ldbu	r3,0(r2)
    eae8:	183ffb1e 	bne	r3,zero,ead8 <__gethex+0x244>
    eaec:	2145c83a 	sub	r2,r4,r5
    eaf0:	1085883a 	add	r2,r2,r2
    eaf4:	1085883a 	add	r2,r2,r2
    eaf8:	00adc83a 	sub	r22,zero,r2
    eafc:	200b883a 	mov	r5,r4
    eb00:	003f9b06 	br	e970 <__gethex+0xdc>
    eb04:	29000043 	ldbu	r4,1(r5)
    eb08:	008000b4 	movhi	r2,2
    eb0c:	10a2b604 	addi	r2,r2,-29992
    eb10:	2c000044 	addi	r16,r5,1
    eb14:	2085883a 	add	r2,r4,r2
    eb18:	10c00003 	ldbu	r3,0(r2)
    eb1c:	18000d1e 	bne	r3,zero,eb54 <__gethex+0x2c0>
    eb20:	2825883a 	mov	r18,r5
    eb24:	02400044 	movi	r9,1
    eb28:	002d883a 	mov	r22,zero
    eb2c:	003f9106 	br	e974 <__gethex+0xe0>
    eb30:	0015883a 	mov	r10,zero
    eb34:	21000044 	addi	r4,r4,1
    eb38:	20c00003 	ldbu	r3,0(r4)
    eb3c:	003fb506 	br	ea14 <__gethex+0x180>
    eb40:	02800044 	movi	r10,1
    eb44:	003ffb06 	br	eb34 <__gethex+0x2a0>
    eb48:	2821883a 	mov	r16,r5
    eb4c:	002d883a 	mov	r22,zero
    eb50:	003f8806 	br	e974 <__gethex+0xe0>
    eb54:	00800c04 	movi	r2,48
    eb58:	20800e1e 	bne	r4,r2,eb94 <__gethex+0x300>
    eb5c:	2007883a 	mov	r3,r4
    eb60:	800b883a 	mov	r5,r16
    eb64:	29400044 	addi	r5,r5,1
    eb68:	29000003 	ldbu	r4,0(r5)
    eb6c:	20803fcc 	andi	r2,r4,255
    eb70:	10fffc26 	beq	r2,r3,eb64 <__gethex+0x2d0>
    eb74:	1445883a 	add	r2,r2,r17
    eb78:	10c00003 	ldbu	r3,0(r2)
    eb7c:	1800071e 	bne	r3,zero,eb9c <__gethex+0x308>
    eb80:	02c00044 	movi	r11,1
    eb84:	800d883a 	mov	r6,r16
    eb88:	2825883a 	mov	r18,r5
    eb8c:	5813883a 	mov	r9,r11
    eb90:	003f6706 	br	e930 <__gethex+0x9c>
    eb94:	81000003 	ldbu	r4,0(r16)
    eb98:	800b883a 	mov	r5,r16
    eb9c:	800d883a 	mov	r6,r16
    eba0:	2825883a 	mov	r18,r5
    eba4:	02c00044 	movi	r11,1
    eba8:	0013883a 	mov	r9,zero
    ebac:	003f6006 	br	e930 <__gethex+0x9c>
    ebb0:	8485c83a 	sub	r2,r16,r18
    ebb4:	10bfffc4 	addi	r2,r2,-1
    ebb8:	00c001c4 	movi	r3,7
    ebbc:	1880700e 	bge	r3,r2,ed80 <__gethex+0x4ec>
    ebc0:	000b883a 	mov	r5,zero
    ebc4:	1005d07a 	srai	r2,r2,1
    ebc8:	29400044 	addi	r5,r5,1
    ebcc:	18bffd16 	blt	r3,r2,ebc4 <__gethex+0x330>
    ebd0:	a809883a 	mov	r4,r21
    ebd4:	000ad1c0 	call	ad1c <_Balloc>
    ebd8:	1027883a 	mov	r19,r2
    ebdc:	10800504 	addi	r2,r2,20
    ebe0:	d8800215 	stw	r2,8(sp)
    ebe4:	9400522e 	bgeu	r18,r16,ed30 <__gethex+0x49c>
    ebe8:	da000217 	ldw	r8,8(sp)
    ebec:	800b883a 	mov	r5,r16
    ebf0:	000f883a 	mov	r7,zero
    ebf4:	0009883a 	mov	r4,zero
    ebf8:	02400b84 	movi	r9,46
    ebfc:	02800804 	movi	r10,32
    ec00:	297fffc4 	addi	r5,r5,-1
    ec04:	28c00003 	ldbu	r3,0(r5)
    ec08:	1a400826 	beq	r3,r9,ec2c <__gethex+0x398>
    ec0c:	380d883a 	mov	r6,r7
    ec10:	3a802726 	beq	r7,r10,ecb0 <__gethex+0x41c>
    ec14:	39c00104 	addi	r7,r7,4
    ec18:	1c47883a 	add	r3,r3,r17
    ec1c:	18800003 	ldbu	r2,0(r3)
    ec20:	108003cc 	andi	r2,r2,15
    ec24:	1184983a 	sll	r2,r2,r6
    ec28:	2088b03a 	or	r4,r4,r2
    ec2c:	917ff436 	bltu	r18,r5,ec00 <__gethex+0x36c>
    ec30:	d8c00217 	ldw	r3,8(sp)
    ec34:	40800104 	addi	r2,r8,4
    ec38:	41000015 	stw	r4,0(r8)
    ec3c:	10c5c83a 	sub	r2,r2,r3
    ec40:	1021d0ba 	srai	r16,r2,2
    ec44:	9c000415 	stw	r16,16(r19)
    ec48:	000a7c40 	call	a7c4 <__hi0bits>
    ec4c:	8006917a 	slli	r3,r16,5
    ec50:	a5c00017 	ldw	r23,0(r20)
    ec54:	1885c83a 	sub	r2,r3,r2
    ec58:	b8801c16 	blt	r23,r2,eccc <__gethex+0x438>
    ec5c:	15c00a16 	blt	r2,r23,ec88 <__gethex+0x3f4>
    ec60:	0039883a 	mov	fp,zero
    ec64:	a0800217 	ldw	r2,8(r20)
    ec68:	1580340e 	bge	r2,r22,ed3c <__gethex+0x4a8>
    ec6c:	a809883a 	mov	r4,r21
    ec70:	980b883a 	mov	r5,r19
    ec74:	000a79c0 	call	a79c <_Bfree>
    ec78:	d8c00d17 	ldw	r3,52(sp)
    ec7c:	048028c4 	movi	r18,163
    ec80:	18000015 	stw	zero,0(r3)
    ec84:	003f4606 	br	e9a0 <__gethex+0x10c>
    ec88:	b8a1c83a 	sub	r16,r23,r2
    ec8c:	980b883a 	mov	r5,r19
    ec90:	a809883a 	mov	r4,r21
    ec94:	800d883a 	mov	r6,r16
    ec98:	000b0e00 	call	b0e0 <__lshift>
    ec9c:	1027883a 	mov	r19,r2
    eca0:	b42dc83a 	sub	r22,r22,r16
    eca4:	10800504 	addi	r2,r2,20
    eca8:	d8800215 	stw	r2,8(sp)
    ecac:	003fec06 	br	ec60 <__gethex+0x3cc>
    ecb0:	41000015 	stw	r4,0(r8)
    ecb4:	28c00003 	ldbu	r3,0(r5)
    ecb8:	01c00104 	movi	r7,4
    ecbc:	000d883a 	mov	r6,zero
    ecc0:	41d1883a 	add	r8,r8,r7
    ecc4:	0009883a 	mov	r4,zero
    ecc8:	003fd306 	br	ec18 <__gethex+0x384>
    eccc:	15e1c83a 	sub	r16,r2,r23
    ecd0:	9809883a 	mov	r4,r19
    ecd4:	800b883a 	mov	r5,r16
    ecd8:	000ac940 	call	ac94 <__any_on>
    ecdc:	1000061e 	bne	r2,zero,ecf8 <__gethex+0x464>
    ece0:	0039883a 	mov	fp,zero
    ece4:	9809883a 	mov	r4,r19
    ece8:	800b883a 	mov	r5,r16
    ecec:	000e7e40 	call	e7e4 <rshift>
    ecf0:	b42d883a 	add	r22,r22,r16
    ecf4:	003fdb06 	br	ec64 <__gethex+0x3d0>
    ecf8:	817fffc4 	addi	r5,r16,-1
    ecfc:	2805d17a 	srai	r2,r5,5
    ed00:	d8c00217 	ldw	r3,8(sp)
    ed04:	290007cc 	andi	r4,r5,31
    ed08:	1085883a 	add	r2,r2,r2
    ed0c:	1085883a 	add	r2,r2,r2
    ed10:	01800044 	movi	r6,1
    ed14:	10c5883a 	add	r2,r2,r3
    ed18:	3108983a 	sll	r4,r6,r4
    ed1c:	10c00017 	ldw	r3,0(r2)
    ed20:	20c8703a 	and	r4,r4,r3
    ed24:	20001a1e 	bne	r4,zero,ed90 <__gethex+0x4fc>
    ed28:	3039883a 	mov	fp,r6
    ed2c:	003fed06 	br	ece4 <__gethex+0x450>
    ed30:	1011883a 	mov	r8,r2
    ed34:	0009883a 	mov	r4,zero
    ed38:	003fbd06 	br	ec30 <__gethex+0x39c>
    ed3c:	a1000117 	ldw	r4,4(r20)
    ed40:	b1001a16 	blt	r22,r4,edac <__gethex+0x518>
    ed44:	04800044 	movi	r18,1
    ed48:	e0000826 	beq	fp,zero,ed6c <__gethex+0x4d8>
    ed4c:	a1000317 	ldw	r4,12(r20)
    ed50:	00800084 	movi	r2,2
    ed54:	20809426 	beq	r4,r2,efa8 <__gethex+0x714>
    ed58:	008000c4 	movi	r2,3
    ed5c:	20805826 	beq	r4,r2,eec0 <__gethex+0x62c>
    ed60:	00800044 	movi	r2,1
    ed64:	20803f26 	beq	r4,r2,ee64 <__gethex+0x5d0>
    ed68:	94800414 	ori	r18,r18,16
    ed6c:	d8800d17 	ldw	r2,52(sp)
    ed70:	d8c00117 	ldw	r3,4(sp)
    ed74:	14c00015 	stw	r19,0(r2)
    ed78:	1d800015 	stw	r22,0(r3)
    ed7c:	003f0806 	br	e9a0 <__gethex+0x10c>
    ed80:	000b883a 	mov	r5,zero
    ed84:	003f9206 	br	ebd0 <__gethex+0x33c>
    ed88:	002d883a 	mov	r22,zero
    ed8c:	003ef806 	br	e970 <__gethex+0xdc>
    ed90:	3140160e 	bge	r6,r5,edec <__gethex+0x558>
    ed94:	9809883a 	mov	r4,r19
    ed98:	817fff84 	addi	r5,r16,-2
    ed9c:	000ac940 	call	ac94 <__any_on>
    eda0:	10001226 	beq	r2,zero,edec <__gethex+0x558>
    eda4:	070000c4 	movi	fp,3
    eda8:	003fce06 	br	ece4 <__gethex+0x450>
    edac:	25a3c83a 	sub	r17,r4,r22
    edb0:	8dc01016 	blt	r17,r23,edf4 <__gethex+0x560>
    edb4:	a0c00317 	ldw	r3,12(r20)
    edb8:	00800084 	movi	r2,2
    edbc:	18809326 	beq	r3,r2,f00c <__gethex+0x778>
    edc0:	008000c4 	movi	r2,3
    edc4:	18808e26 	beq	r3,r2,f000 <__gethex+0x76c>
    edc8:	00800044 	movi	r2,1
    edcc:	18807b26 	beq	r3,r2,efbc <__gethex+0x728>
    edd0:	a809883a 	mov	r4,r21
    edd4:	980b883a 	mov	r5,r19
    edd8:	000a79c0 	call	a79c <_Bfree>
    eddc:	d8c00d17 	ldw	r3,52(sp)
    ede0:	04801404 	movi	r18,80
    ede4:	18000015 	stw	zero,0(r3)
    ede8:	003eed06 	br	e9a0 <__gethex+0x10c>
    edec:	07000084 	movi	fp,2
    edf0:	003fbc06 	br	ece4 <__gethex+0x450>
    edf4:	8c3fffc4 	addi	r16,r17,-1
    edf8:	e0001426 	beq	fp,zero,ee4c <__gethex+0x5b8>
    edfc:	07000044 	movi	fp,1
    ee00:	8005d17a 	srai	r2,r16,5
    ee04:	d8c00217 	ldw	r3,8(sp)
    ee08:	814007cc 	andi	r5,r16,31
    ee0c:	1085883a 	add	r2,r2,r2
    ee10:	1085883a 	add	r2,r2,r2
    ee14:	10c5883a 	add	r2,r2,r3
    ee18:	00c00044 	movi	r3,1
    ee1c:	1946983a 	sll	r3,r3,r5
    ee20:	11000017 	ldw	r4,0(r2)
    ee24:	1906703a 	and	r3,r3,r4
    ee28:	18000126 	beq	r3,zero,ee30 <__gethex+0x59c>
    ee2c:	e7000094 	ori	fp,fp,2
    ee30:	880b883a 	mov	r5,r17
    ee34:	9809883a 	mov	r4,r19
    ee38:	000e7e40 	call	e7e4 <rshift>
    ee3c:	a5800117 	ldw	r22,4(r20)
    ee40:	bc6fc83a 	sub	r23,r23,r17
    ee44:	04800084 	movi	r18,2
    ee48:	003fbf06 	br	ed48 <__gethex+0x4b4>
    ee4c:	043fec0e 	bge	zero,r16,ee00 <__gethex+0x56c>
    ee50:	9809883a 	mov	r4,r19
    ee54:	800b883a 	mov	r5,r16
    ee58:	000ac940 	call	ac94 <__any_on>
    ee5c:	1039883a 	mov	fp,r2
    ee60:	003fe706 	br	ee00 <__gethex+0x56c>
    ee64:	e080008c 	andi	r2,fp,2
    ee68:	103fbf26 	beq	r2,zero,ed68 <__gethex+0x4d4>
    ee6c:	d8c00217 	ldw	r3,8(sp)
    ee70:	18800017 	ldw	r2,0(r3)
    ee74:	e084b03a 	or	r2,fp,r2
    ee78:	1104703a 	and	r2,r2,r4
    ee7c:	103fba26 	beq	r2,zero,ed68 <__gethex+0x4d4>
    ee80:	9c000417 	ldw	r16,16(r19)
    ee84:	d8c00217 	ldw	r3,8(sp)
    ee88:	017fffc4 	movi	r5,-1
    ee8c:	8405883a 	add	r2,r16,r16
    ee90:	10b9883a 	add	fp,r2,r2
    ee94:	1f09883a 	add	r4,r3,fp
    ee98:	dc000015 	stw	r16,0(sp)
    ee9c:	00000306 	br	eeac <__gethex+0x618>
    eea0:	18000015 	stw	zero,0(r3)
    eea4:	18c00104 	addi	r3,r3,4
    eea8:	1900082e 	bgeu	r3,r4,eecc <__gethex+0x638>
    eeac:	18800017 	ldw	r2,0(r3)
    eeb0:	117ffb26 	beq	r2,r5,eea0 <__gethex+0x60c>
    eeb4:	10800044 	addi	r2,r2,1
    eeb8:	18800015 	stw	r2,0(r3)
    eebc:	00001f06 	br	ef3c <__gethex+0x6a8>
    eec0:	d8800e17 	ldw	r2,56(sp)
    eec4:	103fa826 	beq	r2,zero,ed68 <__gethex+0x4d4>
    eec8:	003fed06 	br	ee80 <__gethex+0x5ec>
    eecc:	98800217 	ldw	r2,8(r19)
    eed0:	80801316 	blt	r16,r2,ef20 <__gethex+0x68c>
    eed4:	99400117 	ldw	r5,4(r19)
    eed8:	a809883a 	mov	r4,r21
    eedc:	29400044 	addi	r5,r5,1
    eee0:	000ad1c0 	call	ad1c <_Balloc>
    eee4:	99800417 	ldw	r6,16(r19)
    eee8:	99400304 	addi	r5,r19,12
    eeec:	11000304 	addi	r4,r2,12
    eef0:	318d883a 	add	r6,r6,r6
    eef4:	318d883a 	add	r6,r6,r6
    eef8:	31800204 	addi	r6,r6,8
    eefc:	1023883a 	mov	r17,r2
    ef00:	00039640 	call	3964 <memcpy>
    ef04:	980b883a 	mov	r5,r19
    ef08:	a809883a 	mov	r4,r21
    ef0c:	000a79c0 	call	a79c <_Bfree>
    ef10:	8c000417 	ldw	r16,16(r17)
    ef14:	88800504 	addi	r2,r17,20
    ef18:	8827883a 	mov	r19,r17
    ef1c:	d8800215 	stw	r2,8(sp)
    ef20:	8405883a 	add	r2,r16,r16
    ef24:	1085883a 	add	r2,r2,r2
    ef28:	14c5883a 	add	r2,r2,r19
    ef2c:	84000044 	addi	r16,r16,1
    ef30:	00c00044 	movi	r3,1
    ef34:	10c00515 	stw	r3,20(r2)
    ef38:	9c000415 	stw	r16,16(r19)
    ef3c:	00800084 	movi	r2,2
    ef40:	90801426 	beq	r18,r2,ef94 <__gethex+0x700>
    ef44:	d8800017 	ldw	r2,0(sp)
    ef48:	14000b16 	blt	r2,r16,ef78 <__gethex+0x6e4>
    ef4c:	bc0007cc 	andi	r16,r23,31
    ef50:	8000021e 	bne	r16,zero,ef5c <__gethex+0x6c8>
    ef54:	94800814 	ori	r18,r18,32
    ef58:	003f8406 	br	ed6c <__gethex+0x4d8>
    ef5c:	d8c00217 	ldw	r3,8(sp)
    ef60:	1f05883a 	add	r2,r3,fp
    ef64:	113fff17 	ldw	r4,-4(r2)
    ef68:	000a7c40 	call	a7c4 <__hi0bits>
    ef6c:	00c00804 	movi	r3,32
    ef70:	1c07c83a 	sub	r3,r3,r16
    ef74:	10fff70e 	bge	r2,r3,ef54 <__gethex+0x6c0>
    ef78:	9809883a 	mov	r4,r19
    ef7c:	01400044 	movi	r5,1
    ef80:	000e7e40 	call	e7e4 <rshift>
    ef84:	a0800217 	ldw	r2,8(r20)
    ef88:	b5800044 	addi	r22,r22,1
    ef8c:	15bf3716 	blt	r2,r22,ec6c <__gethex+0x3d8>
    ef90:	003ff006 	br	ef54 <__gethex+0x6c0>
    ef94:	a0800017 	ldw	r2,0(r20)
    ef98:	10bfffc4 	addi	r2,r2,-1
    ef9c:	b8801e26 	beq	r23,r2,f018 <__gethex+0x784>
    efa0:	04800884 	movi	r18,34
    efa4:	003f7106 	br	ed6c <__gethex+0x4d8>
    efa8:	d8c00e17 	ldw	r3,56(sp)
    efac:	00800044 	movi	r2,1
    efb0:	10c5c83a 	sub	r2,r2,r3
    efb4:	103f6c26 	beq	r2,zero,ed68 <__gethex+0x4d4>
    efb8:	003fb106 	br	ee80 <__gethex+0x5ec>
    efbc:	bc7f841e 	bne	r23,r17,edd0 <__gethex+0x53c>
    efc0:	1dc0050e 	bge	r3,r23,efd8 <__gethex+0x744>
    efc4:	b8cbc83a 	sub	r5,r23,r3
    efc8:	9809883a 	mov	r4,r19
    efcc:	000ac940 	call	ac94 <__any_on>
    efd0:	103f7f26 	beq	r2,zero,edd0 <__gethex+0x53c>
    efd4:	a1000117 	ldw	r4,4(r20)
    efd8:	d8800117 	ldw	r2,4(sp)
    efdc:	d8c00217 	ldw	r3,8(sp)
    efe0:	04000044 	movi	r16,1
    efe4:	11000015 	stw	r4,0(r2)
    efe8:	d8800d17 	ldw	r2,52(sp)
    efec:	04801884 	movi	r18,98
    eff0:	1c000015 	stw	r16,0(r3)
    eff4:	14c00015 	stw	r19,0(r2)
    eff8:	9c000415 	stw	r16,16(r19)
    effc:	003e6806 	br	e9a0 <__gethex+0x10c>
    f000:	d8c00e17 	ldw	r3,56(sp)
    f004:	183f7226 	beq	r3,zero,edd0 <__gethex+0x53c>
    f008:	003ff306 	br	efd8 <__gethex+0x744>
    f00c:	d8800e17 	ldw	r2,56(sp)
    f010:	103ff126 	beq	r2,zero,efd8 <__gethex+0x744>
    f014:	003f6e06 	br	edd0 <__gethex+0x53c>
    f018:	b805d17a 	srai	r2,r23,5
    f01c:	d8c00217 	ldw	r3,8(sp)
    f020:	b94007cc 	andi	r5,r23,31
    f024:	1085883a 	add	r2,r2,r2
    f028:	1085883a 	add	r2,r2,r2
    f02c:	10c5883a 	add	r2,r2,r3
    f030:	00c00044 	movi	r3,1
    f034:	1946983a 	sll	r3,r3,r5
    f038:	11000017 	ldw	r4,0(r2)
    f03c:	1906703a 	and	r3,r3,r4
    f040:	183fd726 	beq	r3,zero,efa0 <__gethex+0x70c>
    f044:	04800844 	movi	r18,33
    f048:	003f4806 	br	ed6c <__gethex+0x4d8>

0000f04c <L_shift>:
    f04c:	00800204 	movi	r2,8
    f050:	1185c83a 	sub	r2,r2,r6
    f054:	1085883a 	add	r2,r2,r2
    f058:	21c00017 	ldw	r7,0(r4)
    f05c:	1093883a 	add	r9,r2,r2
    f060:	00800804 	movi	r2,32
    f064:	200d883a 	mov	r6,r4
    f068:	1251c83a 	sub	r8,r2,r9
    f06c:	31800104 	addi	r6,r6,4
    f070:	3805883a 	mov	r2,r7
    f074:	31c00017 	ldw	r7,0(r6)
    f078:	3a08983a 	sll	r4,r7,r8
    f07c:	3a46d83a 	srl	r3,r7,r9
    f080:	1104b03a 	or	r2,r2,r4
    f084:	180f883a 	mov	r7,r3
    f088:	30bfff15 	stw	r2,-4(r6)
    f08c:	30c00015 	stw	r3,0(r6)
    f090:	317ff636 	bltu	r6,r5,f06c <L_shift+0x20>
    f094:	f800283a 	ret

0000f098 <__hexnan>:
    f098:	defff404 	addi	sp,sp,-48
    f09c:	dd800815 	stw	r22,32(sp)
    f0a0:	058000b4 	movhi	r22,2
    f0a4:	b5a2b604 	addi	r22,r22,-29992
    f0a8:	b0800c03 	ldbu	r2,48(r22)
    f0ac:	dcc00515 	stw	r19,20(sp)
    f0b0:	dc000215 	stw	r16,8(sp)
    f0b4:	dfc00b15 	stw	ra,44(sp)
    f0b8:	df000a15 	stw	fp,40(sp)
    f0bc:	ddc00915 	stw	r23,36(sp)
    f0c0:	dd400715 	stw	r21,28(sp)
    f0c4:	dd000615 	stw	r20,24(sp)
    f0c8:	dc800415 	stw	r18,16(sp)
    f0cc:	dc400315 	stw	r17,12(sp)
    f0d0:	d9000115 	stw	r4,4(sp)
    f0d4:	2821883a 	mov	r16,r5
    f0d8:	3027883a 	mov	r19,r6
    f0dc:	10007426 	beq	r2,zero,f2b0 <__hexnan+0x218>
    f0e0:	80c00017 	ldw	r3,0(r16)
    f0e4:	1805d17a 	srai	r2,r3,5
    f0e8:	18c007cc 	andi	r3,r3,31
    f0ec:	1839003a 	cmpeq	fp,r3,zero
    f0f0:	1085883a 	add	r2,r2,r2
    f0f4:	1085883a 	add	r2,r2,r2
    f0f8:	d8c00015 	stw	r3,0(sp)
    f0fc:	14c5883a 	add	r2,r2,r19
    f100:	e000011e 	bne	fp,zero,f108 <__hexnan+0x70>
    f104:	10800104 	addi	r2,r2,4
    f108:	d8c00117 	ldw	r3,4(sp)
    f10c:	153fff04 	addi	r20,r2,-4
    f110:	a021883a 	mov	r16,r20
    f114:	1c400017 	ldw	r17,0(r3)
    f118:	a02b883a 	mov	r21,r20
    f11c:	0025883a 	mov	r18,zero
    f120:	002f883a 	mov	r23,zero
    f124:	000d883a 	mov	r6,zero
    f128:	103fff15 	stw	zero,-4(r2)
    f12c:	8c400044 	addi	r17,r17,1
    f130:	89000003 	ldbu	r4,0(r17)
    f134:	20000e26 	beq	r4,zero,f170 <__hexnan+0xd8>
    f138:	2585883a 	add	r2,r4,r22
    f13c:	10c00003 	ldbu	r3,0(r2)
    f140:	18002e1e 	bne	r3,zero,f1fc <__hexnan+0x164>
    f144:	00800804 	movi	r2,32
    f148:	11005536 	bltu	r2,r4,f2a0 <__hexnan+0x208>
    f14c:	bcbff70e 	bge	r23,r18,f12c <__hexnan+0x94>
    f150:	8540022e 	bgeu	r16,r21,f15c <__hexnan+0xc4>
    f154:	008001c4 	movi	r2,7
    f158:	11803c0e 	bge	r2,r6,f24c <__hexnan+0x1b4>
    f15c:	9c003536 	bltu	r19,r16,f234 <__hexnan+0x19c>
    f160:	8c400044 	addi	r17,r17,1
    f164:	89000003 	ldbu	r4,0(r17)
    f168:	01800204 	movi	r6,8
    f16c:	203ff21e 	bne	r4,zero,f138 <__hexnan+0xa0>
    f170:	90004d26 	beq	r18,zero,f2a8 <__hexnan+0x210>
    f174:	85404336 	bltu	r16,r21,f284 <__hexnan+0x1ec>
    f178:	9c00382e 	bgeu	r19,r16,f25c <__hexnan+0x1c4>
    f17c:	9807883a 	mov	r3,r19
    f180:	80800017 	ldw	r2,0(r16)
    f184:	84000104 	addi	r16,r16,4
    f188:	18800015 	stw	r2,0(r3)
    f18c:	18c00104 	addi	r3,r3,4
    f190:	a43ffb2e 	bgeu	r20,r16,f180 <__hexnan+0xe8>
    f194:	18000015 	stw	zero,0(r3)
    f198:	18c00104 	addi	r3,r3,4
    f19c:	a0fffd2e 	bgeu	r20,r3,f194 <__hexnan+0xfc>
    f1a0:	a0800017 	ldw	r2,0(r20)
    f1a4:	1000071e 	bne	r2,zero,f1c4 <__hexnan+0x12c>
    f1a8:	9d004326 	beq	r19,r20,f2b8 <__hexnan+0x220>
    f1ac:	a007883a 	mov	r3,r20
    f1b0:	00000106 	br	f1b8 <__hexnan+0x120>
    f1b4:	98c04026 	beq	r19,r3,f2b8 <__hexnan+0x220>
    f1b8:	18ffff04 	addi	r3,r3,-4
    f1bc:	18800017 	ldw	r2,0(r3)
    f1c0:	103ffc26 	beq	r2,zero,f1b4 <__hexnan+0x11c>
    f1c4:	00c00144 	movi	r3,5
    f1c8:	1805883a 	mov	r2,r3
    f1cc:	dfc00b17 	ldw	ra,44(sp)
    f1d0:	df000a17 	ldw	fp,40(sp)
    f1d4:	ddc00917 	ldw	r23,36(sp)
    f1d8:	dd800817 	ldw	r22,32(sp)
    f1dc:	dd400717 	ldw	r21,28(sp)
    f1e0:	dd000617 	ldw	r20,24(sp)
    f1e4:	dcc00517 	ldw	r19,20(sp)
    f1e8:	dc800417 	ldw	r18,16(sp)
    f1ec:	dc400317 	ldw	r17,12(sp)
    f1f0:	dc000217 	ldw	r16,8(sp)
    f1f4:	dec00c04 	addi	sp,sp,48
    f1f8:	f800283a 	ret
    f1fc:	31800044 	addi	r6,r6,1
    f200:	00800204 	movi	r2,8
    f204:	94800044 	addi	r18,r18,1
    f208:	1180040e 	bge	r2,r6,f21c <__hexnan+0x184>
    f20c:	9c3fc72e 	bgeu	r19,r16,f12c <__hexnan+0x94>
    f210:	843fff04 	addi	r16,r16,-4
    f214:	80000015 	stw	zero,0(r16)
    f218:	01800044 	movi	r6,1
    f21c:	80800017 	ldw	r2,0(r16)
    f220:	18c003cc 	andi	r3,r3,15
    f224:	1004913a 	slli	r2,r2,4
    f228:	10c4b03a 	or	r2,r2,r3
    f22c:	80800015 	stw	r2,0(r16)
    f230:	003fbe06 	br	f12c <__hexnan+0x94>
    f234:	843fff04 	addi	r16,r16,-4
    f238:	802b883a 	mov	r21,r16
    f23c:	902f883a 	mov	r23,r18
    f240:	000d883a 	mov	r6,zero
    f244:	80000015 	stw	zero,0(r16)
    f248:	003fb806 	br	f12c <__hexnan+0x94>
    f24c:	8009883a 	mov	r4,r16
    f250:	a80b883a 	mov	r5,r21
    f254:	000f04c0 	call	f04c <L_shift>
    f258:	003fc006 	br	f15c <__hexnan+0xc4>
    f25c:	e03fd01e 	bne	fp,zero,f1a0 <__hexnan+0x108>
    f260:	d8c00017 	ldw	r3,0(sp)
    f264:	00800804 	movi	r2,32
    f268:	10c5c83a 	sub	r2,r2,r3
    f26c:	00ffffc4 	movi	r3,-1
    f270:	1886d83a 	srl	r3,r3,r2
    f274:	a0800017 	ldw	r2,0(r20)
    f278:	10c4703a 	and	r2,r2,r3
    f27c:	a0800015 	stw	r2,0(r20)
    f280:	003fc806 	br	f1a4 <__hexnan+0x10c>
    f284:	008001c4 	movi	r2,7
    f288:	11bfbb16 	blt	r2,r6,f178 <__hexnan+0xe0>
    f28c:	a80b883a 	mov	r5,r21
    f290:	8009883a 	mov	r4,r16
    f294:	000f04c0 	call	f04c <L_shift>
    f298:	9c3ff02e 	bgeu	r19,r16,f25c <__hexnan+0x1c4>
    f29c:	003fb706 	br	f17c <__hexnan+0xe4>
    f2a0:	00800a44 	movi	r2,41
    f2a4:	20800826 	beq	r4,r2,f2c8 <__hexnan+0x230>
    f2a8:	00c00104 	movi	r3,4
    f2ac:	003fc606 	br	f1c8 <__hexnan+0x130>
    f2b0:	000e77c0 	call	e77c <__hexdig_init>
    f2b4:	003f8a06 	br	f0e0 <__hexnan+0x48>
    f2b8:	00800044 	movi	r2,1
    f2bc:	00c00144 	movi	r3,5
    f2c0:	98800015 	stw	r2,0(r19)
    f2c4:	003fc006 	br	f1c8 <__hexnan+0x130>
    f2c8:	903ff726 	beq	r18,zero,f2a8 <__hexnan+0x210>
    f2cc:	d8c00117 	ldw	r3,4(sp)
    f2d0:	88800044 	addi	r2,r17,1
    f2d4:	18800015 	stw	r2,0(r3)
    f2d8:	857fa72e 	bgeu	r16,r21,f178 <__hexnan+0xe0>
    f2dc:	003fe906 	br	f284 <__hexnan+0x1ec>

0000f2e0 <_isatty_r>:
    f2e0:	defffd04 	addi	sp,sp,-12
    f2e4:	dc000015 	stw	r16,0(sp)
    f2e8:	040000b4 	movhi	r16,2
    f2ec:	84227104 	addi	r16,r16,-30268
    f2f0:	dc400115 	stw	r17,4(sp)
    f2f4:	80000015 	stw	zero,0(r16)
    f2f8:	2023883a 	mov	r17,r4
    f2fc:	2809883a 	mov	r4,r5
    f300:	dfc00215 	stw	ra,8(sp)
    f304:	0011ef40 	call	11ef4 <isatty>
    f308:	1007883a 	mov	r3,r2
    f30c:	00bfffc4 	movi	r2,-1
    f310:	18800626 	beq	r3,r2,f32c <_isatty_r+0x4c>
    f314:	1805883a 	mov	r2,r3
    f318:	dfc00217 	ldw	ra,8(sp)
    f31c:	dc400117 	ldw	r17,4(sp)
    f320:	dc000017 	ldw	r16,0(sp)
    f324:	dec00304 	addi	sp,sp,12
    f328:	f800283a 	ret
    f32c:	80800017 	ldw	r2,0(r16)
    f330:	103ff826 	beq	r2,zero,f314 <_isatty_r+0x34>
    f334:	88800015 	stw	r2,0(r17)
    f338:	1805883a 	mov	r2,r3
    f33c:	dfc00217 	ldw	ra,8(sp)
    f340:	dc400117 	ldw	r17,4(sp)
    f344:	dc000017 	ldw	r16,0(sp)
    f348:	dec00304 	addi	sp,sp,12
    f34c:	f800283a 	ret

0000f350 <__muldi3>:
    f350:	2011883a 	mov	r8,r4
    f354:	427fffcc 	andi	r9,r8,65535
    f358:	4018d43a 	srli	r12,r8,16
    f35c:	32bfffcc 	andi	r10,r6,65535
    f360:	3016d43a 	srli	r11,r6,16
    f364:	4a85383a 	mul	r2,r9,r10
    f368:	6295383a 	mul	r10,r12,r10
    f36c:	4ad3383a 	mul	r9,r9,r11
    f370:	113fffcc 	andi	r4,r2,65535
    f374:	1004d43a 	srli	r2,r2,16
    f378:	4a93883a 	add	r9,r9,r10
    f37c:	3807883a 	mov	r3,r7
    f380:	1245883a 	add	r2,r2,r9
    f384:	280f883a 	mov	r7,r5
    f388:	180b883a 	mov	r5,r3
    f38c:	1006943a 	slli	r3,r2,16
    f390:	defffd04 	addi	sp,sp,-12
    f394:	dc800215 	stw	r18,8(sp)
    f398:	1907883a 	add	r3,r3,r4
    f39c:	dc400115 	stw	r17,4(sp)
    f3a0:	dc000015 	stw	r16,0(sp)
    f3a4:	4165383a 	mul	r18,r8,r5
    f3a8:	31e3383a 	mul	r17,r6,r7
    f3ac:	1012d43a 	srli	r9,r2,16
    f3b0:	62d9383a 	mul	r12,r12,r11
    f3b4:	181f883a 	mov	r15,r3
    f3b8:	1280022e 	bgeu	r2,r10,f3c4 <__muldi3+0x74>
    f3bc:	00800074 	movhi	r2,1
    f3c0:	6099883a 	add	r12,r12,r2
    f3c4:	624d883a 	add	r6,r12,r9
    f3c8:	9187883a 	add	r3,r18,r6
    f3cc:	88c7883a 	add	r3,r17,r3
    f3d0:	7805883a 	mov	r2,r15
    f3d4:	dc800217 	ldw	r18,8(sp)
    f3d8:	dc400117 	ldw	r17,4(sp)
    f3dc:	dc000017 	ldw	r16,0(sp)
    f3e0:	dec00304 	addi	sp,sp,12
    f3e4:	f800283a 	ret

0000f3e8 <__fixunsdfsi>:
    f3e8:	defffb04 	addi	sp,sp,-20
    f3ec:	dc400115 	stw	r17,4(sp)
    f3f0:	dc000015 	stw	r16,0(sp)
    f3f4:	04507834 	movhi	r17,16864
    f3f8:	0021883a 	mov	r16,zero
    f3fc:	800d883a 	mov	r6,r16
    f400:	880f883a 	mov	r7,r17
    f404:	dcc00315 	stw	r19,12(sp)
    f408:	dc800215 	stw	r18,8(sp)
    f40c:	2827883a 	mov	r19,r5
    f410:	2025883a 	mov	r18,r4
    f414:	dfc00415 	stw	ra,16(sp)
    f418:	0010e380 	call	10e38 <__gedf2>
    f41c:	000d883a 	mov	r6,zero
    f420:	880f883a 	mov	r7,r17
    f424:	980b883a 	mov	r5,r19
    f428:	9009883a 	mov	r4,r18
    f42c:	10000d16 	blt	r2,zero,f464 <__fixunsdfsi+0x7c>
    f430:	00105900 	call	10590 <__subdf3>
    f434:	180b883a 	mov	r5,r3
    f438:	1009883a 	mov	r4,r2
    f43c:	00110c80 	call	110c8 <__fixdfsi>
    f440:	00e00034 	movhi	r3,32768
    f444:	10c5883a 	add	r2,r2,r3
    f448:	dfc00417 	ldw	ra,16(sp)
    f44c:	dcc00317 	ldw	r19,12(sp)
    f450:	dc800217 	ldw	r18,8(sp)
    f454:	dc400117 	ldw	r17,4(sp)
    f458:	dc000017 	ldw	r16,0(sp)
    f45c:	dec00504 	addi	sp,sp,20
    f460:	f800283a 	ret
    f464:	980b883a 	mov	r5,r19
    f468:	9009883a 	mov	r4,r18
    f46c:	00110c80 	call	110c8 <__fixdfsi>
    f470:	dfc00417 	ldw	ra,16(sp)
    f474:	dcc00317 	ldw	r19,12(sp)
    f478:	dc800217 	ldw	r18,8(sp)
    f47c:	dc400117 	ldw	r17,4(sp)
    f480:	dc000017 	ldw	r16,0(sp)
    f484:	dec00504 	addi	sp,sp,20
    f488:	f800283a 	ret

0000f48c <__udivdi3>:
    f48c:	defff004 	addi	sp,sp,-64
    f490:	2005883a 	mov	r2,r4
    f494:	3011883a 	mov	r8,r6
    f498:	df000e15 	stw	fp,56(sp)
    f49c:	dd000a15 	stw	r20,40(sp)
    f4a0:	dc000615 	stw	r16,24(sp)
    f4a4:	dfc00f15 	stw	ra,60(sp)
    f4a8:	ddc00d15 	stw	r23,52(sp)
    f4ac:	dd800c15 	stw	r22,48(sp)
    f4b0:	dd400b15 	stw	r21,44(sp)
    f4b4:	dcc00915 	stw	r19,36(sp)
    f4b8:	dc800815 	stw	r18,32(sp)
    f4bc:	dc400715 	stw	r17,28(sp)
    f4c0:	4021883a 	mov	r16,r8
    f4c4:	1039883a 	mov	fp,r2
    f4c8:	2829883a 	mov	r20,r5
    f4cc:	38003b1e 	bne	r7,zero,f5bc <__udivdi3+0x130>
    f4d0:	2a005c36 	bltu	r5,r8,f644 <__udivdi3+0x1b8>
    f4d4:	4000a626 	beq	r8,zero,f770 <__udivdi3+0x2e4>
    f4d8:	00bfffd4 	movui	r2,65535
    f4dc:	14009e36 	bltu	r2,r16,f758 <__udivdi3+0x2cc>
    f4e0:	00803fc4 	movi	r2,255
    f4e4:	14013d36 	bltu	r2,r16,f9dc <__udivdi3+0x550>
    f4e8:	000b883a 	mov	r5,zero
    f4ec:	0005883a 	mov	r2,zero
    f4f0:	8084d83a 	srl	r2,r16,r2
    f4f4:	01000074 	movhi	r4,1
    f4f8:	21149d04 	addi	r4,r4,21108
    f4fc:	01800804 	movi	r6,32
    f500:	1105883a 	add	r2,r2,r4
    f504:	10c00003 	ldbu	r3,0(r2)
    f508:	28c7883a 	add	r3,r5,r3
    f50c:	30edc83a 	sub	r22,r6,r3
    f510:	b000ee1e 	bne	r22,zero,f8cc <__udivdi3+0x440>
    f514:	802ad43a 	srli	r21,r16,16
    f518:	00800044 	movi	r2,1
    f51c:	a423c83a 	sub	r17,r20,r16
    f520:	85ffffcc 	andi	r23,r16,65535
    f524:	d8800315 	stw	r2,12(sp)
    f528:	8809883a 	mov	r4,r17
    f52c:	a80b883a 	mov	r5,r21
    f530:	0002b840 	call	2b84 <__udivsi3>
    f534:	8809883a 	mov	r4,r17
    f538:	a80b883a 	mov	r5,r21
    f53c:	102d883a 	mov	r22,r2
    f540:	0002b8c0 	call	2b8c <__umodsi3>
    f544:	1004943a 	slli	r2,r2,16
    f548:	e006d43a 	srli	r3,fp,16
    f54c:	bda3383a 	mul	r17,r23,r22
    f550:	10c4b03a 	or	r2,r2,r3
    f554:	1440042e 	bgeu	r2,r17,f568 <__udivdi3+0xdc>
    f558:	1405883a 	add	r2,r2,r16
    f55c:	b5bfffc4 	addi	r22,r22,-1
    f560:	14000136 	bltu	r2,r16,f568 <__udivdi3+0xdc>
    f564:	14413d36 	bltu	r2,r17,fa5c <__udivdi3+0x5d0>
    f568:	1463c83a 	sub	r17,r2,r17
    f56c:	8809883a 	mov	r4,r17
    f570:	a80b883a 	mov	r5,r21
    f574:	0002b840 	call	2b84 <__udivsi3>
    f578:	8809883a 	mov	r4,r17
    f57c:	a80b883a 	mov	r5,r21
    f580:	1029883a 	mov	r20,r2
    f584:	0002b8c0 	call	2b8c <__umodsi3>
    f588:	1004943a 	slli	r2,r2,16
    f58c:	bd09383a 	mul	r4,r23,r20
    f590:	e0ffffcc 	andi	r3,fp,65535
    f594:	10c4b03a 	or	r2,r2,r3
    f598:	1100042e 	bgeu	r2,r4,f5ac <__udivdi3+0x120>
    f59c:	8085883a 	add	r2,r16,r2
    f5a0:	a53fffc4 	addi	r20,r20,-1
    f5a4:	14000136 	bltu	r2,r16,f5ac <__udivdi3+0x120>
    f5a8:	11012036 	bltu	r2,r4,fa2c <__udivdi3+0x5a0>
    f5ac:	b004943a 	slli	r2,r22,16
    f5b0:	d9000317 	ldw	r4,12(sp)
    f5b4:	a084b03a 	or	r2,r20,r2
    f5b8:	00001506 	br	f610 <__udivdi3+0x184>
    f5bc:	380d883a 	mov	r6,r7
    f5c0:	29c06236 	bltu	r5,r7,f74c <__udivdi3+0x2c0>
    f5c4:	00bfffd4 	movui	r2,65535
    f5c8:	11c05a36 	bltu	r2,r7,f734 <__udivdi3+0x2a8>
    f5cc:	00803fc4 	movi	r2,255
    f5d0:	11c0fc36 	bltu	r2,r7,f9c4 <__udivdi3+0x538>
    f5d4:	000b883a 	mov	r5,zero
    f5d8:	0005883a 	mov	r2,zero
    f5dc:	3084d83a 	srl	r2,r6,r2
    f5e0:	01000074 	movhi	r4,1
    f5e4:	21149d04 	addi	r4,r4,21108
    f5e8:	01c00804 	movi	r7,32
    f5ec:	1105883a 	add	r2,r2,r4
    f5f0:	10c00003 	ldbu	r3,0(r2)
    f5f4:	28c7883a 	add	r3,r5,r3
    f5f8:	38efc83a 	sub	r23,r7,r3
    f5fc:	b800691e 	bne	r23,zero,f7a4 <__udivdi3+0x318>
    f600:	35000136 	bltu	r6,r20,f608 <__udivdi3+0x17c>
    f604:	e4005136 	bltu	fp,r16,f74c <__udivdi3+0x2c0>
    f608:	00800044 	movi	r2,1
    f60c:	0009883a 	mov	r4,zero
    f610:	2007883a 	mov	r3,r4
    f614:	dfc00f17 	ldw	ra,60(sp)
    f618:	df000e17 	ldw	fp,56(sp)
    f61c:	ddc00d17 	ldw	r23,52(sp)
    f620:	dd800c17 	ldw	r22,48(sp)
    f624:	dd400b17 	ldw	r21,44(sp)
    f628:	dd000a17 	ldw	r20,40(sp)
    f62c:	dcc00917 	ldw	r19,36(sp)
    f630:	dc800817 	ldw	r18,32(sp)
    f634:	dc400717 	ldw	r17,28(sp)
    f638:	dc000617 	ldw	r16,24(sp)
    f63c:	dec01004 	addi	sp,sp,64
    f640:	f800283a 	ret
    f644:	00bfffd4 	movui	r2,65535
    f648:	12005036 	bltu	r2,r8,f78c <__udivdi3+0x300>
    f64c:	00803fc4 	movi	r2,255
    f650:	1200e836 	bltu	r2,r8,f9f4 <__udivdi3+0x568>
    f654:	000b883a 	mov	r5,zero
    f658:	0005883a 	mov	r2,zero
    f65c:	8084d83a 	srl	r2,r16,r2
    f660:	01000074 	movhi	r4,1
    f664:	21149d04 	addi	r4,r4,21108
    f668:	01800804 	movi	r6,32
    f66c:	1105883a 	add	r2,r2,r4
    f670:	10c00003 	ldbu	r3,0(r2)
    f674:	28c7883a 	add	r3,r5,r3
    f678:	30cbc83a 	sub	r5,r6,r3
    f67c:	28000626 	beq	r5,zero,f698 <__udivdi3+0x20c>
    f680:	3145c83a 	sub	r2,r6,r5
    f684:	e084d83a 	srl	r2,fp,r2
    f688:	a146983a 	sll	r3,r20,r5
    f68c:	e178983a 	sll	fp,fp,r5
    f690:	8160983a 	sll	r16,r16,r5
    f694:	18a8b03a 	or	r20,r3,r2
    f698:	802ad43a 	srli	r21,r16,16
    f69c:	a009883a 	mov	r4,r20
    f6a0:	85ffffcc 	andi	r23,r16,65535
    f6a4:	a80b883a 	mov	r5,r21
    f6a8:	0002b840 	call	2b84 <__udivsi3>
    f6ac:	a009883a 	mov	r4,r20
    f6b0:	a80b883a 	mov	r5,r21
    f6b4:	102d883a 	mov	r22,r2
    f6b8:	0002b8c0 	call	2b8c <__umodsi3>
    f6bc:	1004943a 	slli	r2,r2,16
    f6c0:	e006d43a 	srli	r3,fp,16
    f6c4:	bda3383a 	mul	r17,r23,r22
    f6c8:	10c4b03a 	or	r2,r2,r3
    f6cc:	1440042e 	bgeu	r2,r17,f6e0 <__udivdi3+0x254>
    f6d0:	1405883a 	add	r2,r2,r16
    f6d4:	b5bfffc4 	addi	r22,r22,-1
    f6d8:	14000136 	bltu	r2,r16,f6e0 <__udivdi3+0x254>
    f6dc:	1440d536 	bltu	r2,r17,fa34 <__udivdi3+0x5a8>
    f6e0:	1463c83a 	sub	r17,r2,r17
    f6e4:	8809883a 	mov	r4,r17
    f6e8:	a80b883a 	mov	r5,r21
    f6ec:	0002b840 	call	2b84 <__udivsi3>
    f6f0:	8809883a 	mov	r4,r17
    f6f4:	a80b883a 	mov	r5,r21
    f6f8:	1029883a 	mov	r20,r2
    f6fc:	0002b8c0 	call	2b8c <__umodsi3>
    f700:	1004943a 	slli	r2,r2,16
    f704:	bd09383a 	mul	r4,r23,r20
    f708:	e0ffffcc 	andi	r3,fp,65535
    f70c:	10c4b03a 	or	r2,r2,r3
    f710:	1100042e 	bgeu	r2,r4,f724 <__udivdi3+0x298>
    f714:	8085883a 	add	r2,r16,r2
    f718:	a53fffc4 	addi	r20,r20,-1
    f71c:	14000136 	bltu	r2,r16,f724 <__udivdi3+0x298>
    f720:	1100c736 	bltu	r2,r4,fa40 <__udivdi3+0x5b4>
    f724:	b004943a 	slli	r2,r22,16
    f728:	0009883a 	mov	r4,zero
    f72c:	a084b03a 	or	r2,r20,r2
    f730:	003fb706 	br	f610 <__udivdi3+0x184>
    f734:	00804034 	movhi	r2,256
    f738:	10bfffc4 	addi	r2,r2,-1
    f73c:	11c0a436 	bltu	r2,r7,f9d0 <__udivdi3+0x544>
    f740:	01400404 	movi	r5,16
    f744:	2805883a 	mov	r2,r5
    f748:	003fa406 	br	f5dc <__udivdi3+0x150>
    f74c:	0005883a 	mov	r2,zero
    f750:	0009883a 	mov	r4,zero
    f754:	003fae06 	br	f610 <__udivdi3+0x184>
    f758:	00804034 	movhi	r2,256
    f75c:	10bfffc4 	addi	r2,r2,-1
    f760:	1400a136 	bltu	r2,r16,f9e8 <__udivdi3+0x55c>
    f764:	01400404 	movi	r5,16
    f768:	2805883a 	mov	r2,r5
    f76c:	003f6006 	br	f4f0 <__udivdi3+0x64>
    f770:	01000044 	movi	r4,1
    f774:	000b883a 	mov	r5,zero
    f778:	0002b840 	call	2b84 <__udivsi3>
    f77c:	1021883a 	mov	r16,r2
    f780:	00bfffd4 	movui	r2,65535
    f784:	143ff436 	bltu	r2,r16,f758 <__udivdi3+0x2cc>
    f788:	003f5506 	br	f4e0 <__udivdi3+0x54>
    f78c:	00804034 	movhi	r2,256
    f790:	10bfffc4 	addi	r2,r2,-1
    f794:	12009a36 	bltu	r2,r8,fa00 <__udivdi3+0x574>
    f798:	01400404 	movi	r5,16
    f79c:	2805883a 	mov	r2,r5
    f7a0:	003fae06 	br	f65c <__udivdi3+0x1d0>
    f7a4:	3dc5c83a 	sub	r2,r7,r23
    f7a8:	35c8983a 	sll	r4,r6,r23
    f7ac:	8086d83a 	srl	r3,r16,r2
    f7b0:	a0a2d83a 	srl	r17,r20,r2
    f7b4:	e084d83a 	srl	r2,fp,r2
    f7b8:	20eab03a 	or	r21,r4,r3
    f7bc:	a82cd43a 	srli	r22,r21,16
    f7c0:	a5c6983a 	sll	r3,r20,r23
    f7c4:	8809883a 	mov	r4,r17
    f7c8:	b00b883a 	mov	r5,r22
    f7cc:	1886b03a 	or	r3,r3,r2
    f7d0:	d8c00215 	stw	r3,8(sp)
    f7d4:	0002b840 	call	2b84 <__udivsi3>
    f7d8:	8809883a 	mov	r4,r17
    f7dc:	b00b883a 	mov	r5,r22
    f7e0:	1029883a 	mov	r20,r2
    f7e4:	0002b8c0 	call	2b8c <__umodsi3>
    f7e8:	a8ffffcc 	andi	r3,r21,65535
    f7ec:	d8c00515 	stw	r3,20(sp)
    f7f0:	d9000217 	ldw	r4,8(sp)
    f7f4:	d9400517 	ldw	r5,20(sp)
    f7f8:	1004943a 	slli	r2,r2,16
    f7fc:	2006d43a 	srli	r3,r4,16
    f800:	85e0983a 	sll	r16,r16,r23
    f804:	2d23383a 	mul	r17,r5,r20
    f808:	10c4b03a 	or	r2,r2,r3
    f80c:	dc000015 	stw	r16,0(sp)
    f810:	1440032e 	bgeu	r2,r17,f820 <__udivdi3+0x394>
    f814:	1545883a 	add	r2,r2,r21
    f818:	a53fffc4 	addi	r20,r20,-1
    f81c:	15407f2e 	bgeu	r2,r21,fa1c <__udivdi3+0x590>
    f820:	1463c83a 	sub	r17,r2,r17
    f824:	8809883a 	mov	r4,r17
    f828:	b00b883a 	mov	r5,r22
    f82c:	0002b840 	call	2b84 <__udivsi3>
    f830:	8809883a 	mov	r4,r17
    f834:	b00b883a 	mov	r5,r22
    f838:	1021883a 	mov	r16,r2
    f83c:	0002b8c0 	call	2b8c <__umodsi3>
    f840:	d8c00517 	ldw	r3,20(sp)
    f844:	d9000217 	ldw	r4,8(sp)
    f848:	1004943a 	slli	r2,r2,16
    f84c:	1c0f383a 	mul	r7,r3,r16
    f850:	20ffffcc 	andi	r3,r4,65535
    f854:	10e2b03a 	or	r17,r2,r3
    f858:	89c0032e 	bgeu	r17,r7,f868 <__udivdi3+0x3dc>
    f85c:	8d63883a 	add	r17,r17,r21
    f860:	843fffc4 	addi	r16,r16,-1
    f864:	8d40692e 	bgeu	r17,r21,fa0c <__udivdi3+0x580>
    f868:	a008943a 	slli	r4,r20,16
    f86c:	d9400017 	ldw	r5,0(sp)
    f870:	89e3c83a 	sub	r17,r17,r7
    f874:	8110b03a 	or	r8,r16,r4
    f878:	280cd43a 	srli	r6,r5,16
    f87c:	28ffffcc 	andi	r3,r5,65535
    f880:	40bfffcc 	andi	r2,r8,65535
    f884:	400ad43a 	srli	r5,r8,16
    f888:	10d3383a 	mul	r9,r2,r3
    f88c:	1185383a 	mul	r2,r2,r6
    f890:	28c7383a 	mul	r3,r5,r3
    f894:	4808d43a 	srli	r4,r9,16
    f898:	298b383a 	mul	r5,r5,r6
    f89c:	10c5883a 	add	r2,r2,r3
    f8a0:	2089883a 	add	r4,r4,r2
    f8a4:	20c0022e 	bgeu	r4,r3,f8b0 <__udivdi3+0x424>
    f8a8:	00800074 	movhi	r2,1
    f8ac:	288b883a 	add	r5,r5,r2
    f8b0:	2004d43a 	srli	r2,r4,16
    f8b4:	288b883a 	add	r5,r5,r2
    f8b8:	89403f36 	bltu	r17,r5,f9b8 <__udivdi3+0x52c>
    f8bc:	89403926 	beq	r17,r5,f9a4 <__udivdi3+0x518>
    f8c0:	4005883a 	mov	r2,r8
    f8c4:	0009883a 	mov	r4,zero
    f8c8:	003f5106 	br	f610 <__udivdi3+0x184>
    f8cc:	85a0983a 	sll	r16,r16,r22
    f8d0:	3585c83a 	sub	r2,r6,r22
    f8d4:	a0a2d83a 	srl	r17,r20,r2
    f8d8:	802ad43a 	srli	r21,r16,16
    f8dc:	e084d83a 	srl	r2,fp,r2
    f8e0:	a586983a 	sll	r3,r20,r22
    f8e4:	8809883a 	mov	r4,r17
    f8e8:	a80b883a 	mov	r5,r21
    f8ec:	1886b03a 	or	r3,r3,r2
    f8f0:	d8c00115 	stw	r3,4(sp)
    f8f4:	0002b840 	call	2b84 <__udivsi3>
    f8f8:	8809883a 	mov	r4,r17
    f8fc:	a80b883a 	mov	r5,r21
    f900:	d8800415 	stw	r2,16(sp)
    f904:	0002b8c0 	call	2b8c <__umodsi3>
    f908:	d9000117 	ldw	r4,4(sp)
    f90c:	d9400417 	ldw	r5,16(sp)
    f910:	1004943a 	slli	r2,r2,16
    f914:	85ffffcc 	andi	r23,r16,65535
    f918:	2006d43a 	srli	r3,r4,16
    f91c:	b963383a 	mul	r17,r23,r5
    f920:	10c4b03a 	or	r2,r2,r3
    f924:	1440042e 	bgeu	r2,r17,f938 <__udivdi3+0x4ac>
    f928:	297fffc4 	addi	r5,r5,-1
    f92c:	1405883a 	add	r2,r2,r16
    f930:	d9400415 	stw	r5,16(sp)
    f934:	1400442e 	bgeu	r2,r16,fa48 <__udivdi3+0x5bc>
    f938:	1463c83a 	sub	r17,r2,r17
    f93c:	8809883a 	mov	r4,r17
    f940:	a80b883a 	mov	r5,r21
    f944:	0002b840 	call	2b84 <__udivsi3>
    f948:	8809883a 	mov	r4,r17
    f94c:	a80b883a 	mov	r5,r21
    f950:	1029883a 	mov	r20,r2
    f954:	0002b8c0 	call	2b8c <__umodsi3>
    f958:	d9400117 	ldw	r5,4(sp)
    f95c:	1004943a 	slli	r2,r2,16
    f960:	bd09383a 	mul	r4,r23,r20
    f964:	28ffffcc 	andi	r3,r5,65535
    f968:	10c6b03a 	or	r3,r2,r3
    f96c:	1900062e 	bgeu	r3,r4,f988 <__udivdi3+0x4fc>
    f970:	1c07883a 	add	r3,r3,r16
    f974:	a53fffc4 	addi	r20,r20,-1
    f978:	1c000336 	bltu	r3,r16,f988 <__udivdi3+0x4fc>
    f97c:	1900022e 	bgeu	r3,r4,f988 <__udivdi3+0x4fc>
    f980:	a53fffc4 	addi	r20,r20,-1
    f984:	1c07883a 	add	r3,r3,r16
    f988:	d9400417 	ldw	r5,16(sp)
    f98c:	e5b8983a 	sll	fp,fp,r22
    f990:	1923c83a 	sub	r17,r3,r4
    f994:	2804943a 	slli	r2,r5,16
    f998:	a0a8b03a 	or	r20,r20,r2
    f99c:	dd000315 	stw	r20,12(sp)
    f9a0:	003ee106 	br	f528 <__udivdi3+0x9c>
    f9a4:	2004943a 	slli	r2,r4,16
    f9a8:	e5c8983a 	sll	r4,fp,r23
    f9ac:	48ffffcc 	andi	r3,r9,65535
    f9b0:	10c5883a 	add	r2,r2,r3
    f9b4:	20bfc22e 	bgeu	r4,r2,f8c0 <__udivdi3+0x434>
    f9b8:	40bfffc4 	addi	r2,r8,-1
    f9bc:	0009883a 	mov	r4,zero
    f9c0:	003f1306 	br	f610 <__udivdi3+0x184>
    f9c4:	01400204 	movi	r5,8
    f9c8:	2805883a 	mov	r2,r5
    f9cc:	003f0306 	br	f5dc <__udivdi3+0x150>
    f9d0:	01400604 	movi	r5,24
    f9d4:	2805883a 	mov	r2,r5
    f9d8:	003f0006 	br	f5dc <__udivdi3+0x150>
    f9dc:	01400204 	movi	r5,8
    f9e0:	2805883a 	mov	r2,r5
    f9e4:	003ec206 	br	f4f0 <__udivdi3+0x64>
    f9e8:	01400604 	movi	r5,24
    f9ec:	2805883a 	mov	r2,r5
    f9f0:	003ebf06 	br	f4f0 <__udivdi3+0x64>
    f9f4:	01400204 	movi	r5,8
    f9f8:	2805883a 	mov	r2,r5
    f9fc:	003f1706 	br	f65c <__udivdi3+0x1d0>
    fa00:	01400604 	movi	r5,24
    fa04:	2805883a 	mov	r2,r5
    fa08:	003f1406 	br	f65c <__udivdi3+0x1d0>
    fa0c:	89ff962e 	bgeu	r17,r7,f868 <__udivdi3+0x3dc>
    fa10:	8d63883a 	add	r17,r17,r21
    fa14:	843fffc4 	addi	r16,r16,-1
    fa18:	003f9306 	br	f868 <__udivdi3+0x3dc>
    fa1c:	147f802e 	bgeu	r2,r17,f820 <__udivdi3+0x394>
    fa20:	a53fffc4 	addi	r20,r20,-1
    fa24:	1545883a 	add	r2,r2,r21
    fa28:	003f7d06 	br	f820 <__udivdi3+0x394>
    fa2c:	a53fffc4 	addi	r20,r20,-1
    fa30:	003ede06 	br	f5ac <__udivdi3+0x120>
    fa34:	b5bfffc4 	addi	r22,r22,-1
    fa38:	1405883a 	add	r2,r2,r16
    fa3c:	003f2806 	br	f6e0 <__udivdi3+0x254>
    fa40:	a53fffc4 	addi	r20,r20,-1
    fa44:	003f3706 	br	f724 <__udivdi3+0x298>
    fa48:	147fbb2e 	bgeu	r2,r17,f938 <__udivdi3+0x4ac>
    fa4c:	297fffc4 	addi	r5,r5,-1
    fa50:	1405883a 	add	r2,r2,r16
    fa54:	d9400415 	stw	r5,16(sp)
    fa58:	003fb706 	br	f938 <__udivdi3+0x4ac>
    fa5c:	b5bfffc4 	addi	r22,r22,-1
    fa60:	1405883a 	add	r2,r2,r16
    fa64:	003ec006 	br	f568 <__udivdi3+0xdc>

0000fa68 <__umoddi3>:
    fa68:	defff104 	addi	sp,sp,-60
    fa6c:	dd800b15 	stw	r22,44(sp)
    fa70:	dd000915 	stw	r20,36(sp)
    fa74:	dc000515 	stw	r16,20(sp)
    fa78:	dfc00e15 	stw	ra,56(sp)
    fa7c:	df000d15 	stw	fp,52(sp)
    fa80:	ddc00c15 	stw	r23,48(sp)
    fa84:	dd400a15 	stw	r21,40(sp)
    fa88:	dcc00815 	stw	r19,32(sp)
    fa8c:	dc800715 	stw	r18,28(sp)
    fa90:	dc400615 	stw	r17,24(sp)
    fa94:	3021883a 	mov	r16,r6
    fa98:	202d883a 	mov	r22,r4
    fa9c:	2829883a 	mov	r20,r5
    faa0:	38002b1e 	bne	r7,zero,fb50 <__umoddi3+0xe8>
    faa4:	29805036 	bltu	r5,r6,fbe8 <__umoddi3+0x180>
    faa8:	30008a26 	beq	r6,zero,fcd4 <__umoddi3+0x26c>
    faac:	00bfffd4 	movui	r2,65535
    fab0:	14008236 	bltu	r2,r16,fcbc <__umoddi3+0x254>
    fab4:	00803fc4 	movi	r2,255
    fab8:	14013636 	bltu	r2,r16,ff94 <__umoddi3+0x52c>
    fabc:	000b883a 	mov	r5,zero
    fac0:	0005883a 	mov	r2,zero
    fac4:	8084d83a 	srl	r2,r16,r2
    fac8:	01000074 	movhi	r4,1
    facc:	21149d04 	addi	r4,r4,21108
    fad0:	01800804 	movi	r6,32
    fad4:	1105883a 	add	r2,r2,r4
    fad8:	10c00003 	ldbu	r3,0(r2)
    fadc:	28c7883a 	add	r3,r5,r3
    fae0:	30efc83a 	sub	r23,r6,r3
    fae4:	b800941e 	bne	r23,zero,fd38 <__umoddi3+0x2d0>
    fae8:	802ad43a 	srli	r21,r16,16
    faec:	a423c83a 	sub	r17,r20,r16
    faf0:	0039883a 	mov	fp,zero
    faf4:	853fffcc 	andi	r20,r16,65535
    faf8:	8809883a 	mov	r4,r17
    fafc:	a80b883a 	mov	r5,r21
    fb00:	0002b840 	call	2b84 <__udivsi3>
    fb04:	8809883a 	mov	r4,r17
    fb08:	a80b883a 	mov	r5,r21
    fb0c:	a0a3383a 	mul	r17,r20,r2
    fb10:	0002b8c0 	call	2b8c <__umodsi3>
    fb14:	1004943a 	slli	r2,r2,16
    fb18:	b006d43a 	srli	r3,r22,16
    fb1c:	10c4b03a 	or	r2,r2,r3
    fb20:	1440032e 	bgeu	r2,r17,fb30 <__umoddi3+0xc8>
    fb24:	1405883a 	add	r2,r2,r16
    fb28:	14000136 	bltu	r2,r16,fb30 <__umoddi3+0xc8>
    fb2c:	14413536 	bltu	r2,r17,10004 <__umoddi3+0x59c>
    fb30:	1463c83a 	sub	r17,r2,r17
    fb34:	8809883a 	mov	r4,r17
    fb38:	a80b883a 	mov	r5,r21
    fb3c:	0002b840 	call	2b84 <__udivsi3>
    fb40:	8809883a 	mov	r4,r17
    fb44:	a0a3383a 	mul	r17,r20,r2
    fb48:	a80b883a 	mov	r5,r21
    fb4c:	00004d06 	br	fc84 <__umoddi3+0x21c>
    fb50:	380d883a 	mov	r6,r7
    fb54:	29c0102e 	bgeu	r5,r7,fb98 <__umoddi3+0x130>
    fb58:	2011883a 	mov	r8,r4
    fb5c:	2813883a 	mov	r9,r5
    fb60:	4005883a 	mov	r2,r8
    fb64:	4807883a 	mov	r3,r9
    fb68:	dfc00e17 	ldw	ra,56(sp)
    fb6c:	df000d17 	ldw	fp,52(sp)
    fb70:	ddc00c17 	ldw	r23,48(sp)
    fb74:	dd800b17 	ldw	r22,44(sp)
    fb78:	dd400a17 	ldw	r21,40(sp)
    fb7c:	dd000917 	ldw	r20,36(sp)
    fb80:	dcc00817 	ldw	r19,32(sp)
    fb84:	dc800717 	ldw	r18,28(sp)
    fb88:	dc400617 	ldw	r17,24(sp)
    fb8c:	dc000517 	ldw	r16,20(sp)
    fb90:	dec00f04 	addi	sp,sp,60
    fb94:	f800283a 	ret
    fb98:	00bfffd4 	movui	r2,65535
    fb9c:	11c05a36 	bltu	r2,r7,fd08 <__umoddi3+0x2a0>
    fba0:	00803fc4 	movi	r2,255
    fba4:	11c0fe36 	bltu	r2,r7,ffa0 <__umoddi3+0x538>
    fba8:	000b883a 	mov	r5,zero
    fbac:	0005883a 	mov	r2,zero
    fbb0:	3084d83a 	srl	r2,r6,r2
    fbb4:	01000074 	movhi	r4,1
    fbb8:	21149d04 	addi	r4,r4,21108
    fbbc:	01c00804 	movi	r7,32
    fbc0:	1105883a 	add	r2,r2,r4
    fbc4:	10c00003 	ldbu	r3,0(r2)
    fbc8:	28c7883a 	add	r3,r5,r3
    fbcc:	38ebc83a 	sub	r21,r7,r3
    fbd0:	a800851e 	bne	r21,zero,fde8 <__umoddi3+0x380>
    fbd4:	35005236 	bltu	r6,r20,fd20 <__umoddi3+0x2b8>
    fbd8:	b400512e 	bgeu	r22,r16,fd20 <__umoddi3+0x2b8>
    fbdc:	b011883a 	mov	r8,r22
    fbe0:	a013883a 	mov	r9,r20
    fbe4:	003fde06 	br	fb60 <__umoddi3+0xf8>
    fbe8:	00bfffd4 	movui	r2,65535
    fbec:	11804036 	bltu	r2,r6,fcf0 <__umoddi3+0x288>
    fbf0:	00803fc4 	movi	r2,255
    fbf4:	1180ed36 	bltu	r2,r6,ffac <__umoddi3+0x544>
    fbf8:	000b883a 	mov	r5,zero
    fbfc:	0005883a 	mov	r2,zero
    fc00:	8084d83a 	srl	r2,r16,r2
    fc04:	01000074 	movhi	r4,1
    fc08:	21149d04 	addi	r4,r4,21108
    fc0c:	01800804 	movi	r6,32
    fc10:	1105883a 	add	r2,r2,r4
    fc14:	10c00003 	ldbu	r3,0(r2)
    fc18:	28c7883a 	add	r3,r5,r3
    fc1c:	30c7c83a 	sub	r3,r6,r3
    fc20:	1800bf1e 	bne	r3,zero,ff20 <__umoddi3+0x4b8>
    fc24:	0039883a 	mov	fp,zero
    fc28:	802ad43a 	srli	r21,r16,16
    fc2c:	a009883a 	mov	r4,r20
    fc30:	85ffffcc 	andi	r23,r16,65535
    fc34:	a80b883a 	mov	r5,r21
    fc38:	0002b840 	call	2b84 <__udivsi3>
    fc3c:	a009883a 	mov	r4,r20
    fc40:	a80b883a 	mov	r5,r21
    fc44:	b8a3383a 	mul	r17,r23,r2
    fc48:	0002b8c0 	call	2b8c <__umodsi3>
    fc4c:	1004943a 	slli	r2,r2,16
    fc50:	b006d43a 	srli	r3,r22,16
    fc54:	10c4b03a 	or	r2,r2,r3
    fc58:	1440032e 	bgeu	r2,r17,fc68 <__umoddi3+0x200>
    fc5c:	1405883a 	add	r2,r2,r16
    fc60:	14000136 	bltu	r2,r16,fc68 <__umoddi3+0x200>
    fc64:	1440e536 	bltu	r2,r17,fffc <__umoddi3+0x594>
    fc68:	1463c83a 	sub	r17,r2,r17
    fc6c:	8809883a 	mov	r4,r17
    fc70:	a80b883a 	mov	r5,r21
    fc74:	0002b840 	call	2b84 <__udivsi3>
    fc78:	8809883a 	mov	r4,r17
    fc7c:	b8a3383a 	mul	r17,r23,r2
    fc80:	a80b883a 	mov	r5,r21
    fc84:	0002b8c0 	call	2b8c <__umodsi3>
    fc88:	1004943a 	slli	r2,r2,16
    fc8c:	b0ffffcc 	andi	r3,r22,65535
    fc90:	10c4b03a 	or	r2,r2,r3
    fc94:	1440042e 	bgeu	r2,r17,fca8 <__umoddi3+0x240>
    fc98:	1405883a 	add	r2,r2,r16
    fc9c:	14000236 	bltu	r2,r16,fca8 <__umoddi3+0x240>
    fca0:	1440012e 	bgeu	r2,r17,fca8 <__umoddi3+0x240>
    fca4:	1405883a 	add	r2,r2,r16
    fca8:	1445c83a 	sub	r2,r2,r17
    fcac:	1724d83a 	srl	r18,r2,fp
    fcb0:	0013883a 	mov	r9,zero
    fcb4:	9011883a 	mov	r8,r18
    fcb8:	003fa906 	br	fb60 <__umoddi3+0xf8>
    fcbc:	00804034 	movhi	r2,256
    fcc0:	10bfffc4 	addi	r2,r2,-1
    fcc4:	1400b036 	bltu	r2,r16,ff88 <__umoddi3+0x520>
    fcc8:	01400404 	movi	r5,16
    fccc:	2805883a 	mov	r2,r5
    fcd0:	003f7c06 	br	fac4 <__umoddi3+0x5c>
    fcd4:	01000044 	movi	r4,1
    fcd8:	000b883a 	mov	r5,zero
    fcdc:	0002b840 	call	2b84 <__udivsi3>
    fce0:	1021883a 	mov	r16,r2
    fce4:	00bfffd4 	movui	r2,65535
    fce8:	143ff436 	bltu	r2,r16,fcbc <__umoddi3+0x254>
    fcec:	003f7106 	br	fab4 <__umoddi3+0x4c>
    fcf0:	00804034 	movhi	r2,256
    fcf4:	10bfffc4 	addi	r2,r2,-1
    fcf8:	1180af36 	bltu	r2,r6,ffb8 <__umoddi3+0x550>
    fcfc:	01400404 	movi	r5,16
    fd00:	2805883a 	mov	r2,r5
    fd04:	003fbe06 	br	fc00 <__umoddi3+0x198>
    fd08:	00804034 	movhi	r2,256
    fd0c:	10bfffc4 	addi	r2,r2,-1
    fd10:	11c0ac36 	bltu	r2,r7,ffc4 <__umoddi3+0x55c>
    fd14:	01400404 	movi	r5,16
    fd18:	2805883a 	mov	r2,r5
    fd1c:	003fa406 	br	fbb0 <__umoddi3+0x148>
    fd20:	b409c83a 	sub	r4,r22,r16
    fd24:	b105803a 	cmpltu	r2,r22,r4
    fd28:	a187c83a 	sub	r3,r20,r6
    fd2c:	18a9c83a 	sub	r20,r3,r2
    fd30:	202d883a 	mov	r22,r4
    fd34:	003fa906 	br	fbdc <__umoddi3+0x174>
    fd38:	85e0983a 	sll	r16,r16,r23
    fd3c:	35c5c83a 	sub	r2,r6,r23
    fd40:	a0a2d83a 	srl	r17,r20,r2
    fd44:	802ad43a 	srli	r21,r16,16
    fd48:	b084d83a 	srl	r2,r22,r2
    fd4c:	a5c6983a 	sll	r3,r20,r23
    fd50:	8809883a 	mov	r4,r17
    fd54:	a80b883a 	mov	r5,r21
    fd58:	1886b03a 	or	r3,r3,r2
    fd5c:	d8c00115 	stw	r3,4(sp)
    fd60:	853fffcc 	andi	r20,r16,65535
    fd64:	0002b840 	call	2b84 <__udivsi3>
    fd68:	8809883a 	mov	r4,r17
    fd6c:	a80b883a 	mov	r5,r21
    fd70:	a0a3383a 	mul	r17,r20,r2
    fd74:	0002b8c0 	call	2b8c <__umodsi3>
    fd78:	d9000117 	ldw	r4,4(sp)
    fd7c:	1004943a 	slli	r2,r2,16
    fd80:	b839883a 	mov	fp,r23
    fd84:	2006d43a 	srli	r3,r4,16
    fd88:	10c4b03a 	or	r2,r2,r3
    fd8c:	1440022e 	bgeu	r2,r17,fd98 <__umoddi3+0x330>
    fd90:	1405883a 	add	r2,r2,r16
    fd94:	1400962e 	bgeu	r2,r16,fff0 <__umoddi3+0x588>
    fd98:	1463c83a 	sub	r17,r2,r17
    fd9c:	8809883a 	mov	r4,r17
    fda0:	a80b883a 	mov	r5,r21
    fda4:	0002b840 	call	2b84 <__udivsi3>
    fda8:	8809883a 	mov	r4,r17
    fdac:	a80b883a 	mov	r5,r21
    fdb0:	a0a3383a 	mul	r17,r20,r2
    fdb4:	0002b8c0 	call	2b8c <__umodsi3>
    fdb8:	d9400117 	ldw	r5,4(sp)
    fdbc:	1004943a 	slli	r2,r2,16
    fdc0:	28ffffcc 	andi	r3,r5,65535
    fdc4:	10c4b03a 	or	r2,r2,r3
    fdc8:	1440042e 	bgeu	r2,r17,fddc <__umoddi3+0x374>
    fdcc:	1405883a 	add	r2,r2,r16
    fdd0:	14000236 	bltu	r2,r16,fddc <__umoddi3+0x374>
    fdd4:	1440012e 	bgeu	r2,r17,fddc <__umoddi3+0x374>
    fdd8:	1405883a 	add	r2,r2,r16
    fddc:	b5ec983a 	sll	r22,r22,r23
    fde0:	1463c83a 	sub	r17,r2,r17
    fde4:	003f4406 	br	faf8 <__umoddi3+0x90>
    fde8:	3d4fc83a 	sub	r7,r7,r21
    fdec:	3546983a 	sll	r3,r6,r21
    fdf0:	81c4d83a 	srl	r2,r16,r7
    fdf4:	a1e2d83a 	srl	r17,r20,r7
    fdf8:	a54c983a 	sll	r6,r20,r21
    fdfc:	18aeb03a 	or	r23,r3,r2
    fe00:	b828d43a 	srli	r20,r23,16
    fe04:	b1c4d83a 	srl	r2,r22,r7
    fe08:	8809883a 	mov	r4,r17
    fe0c:	a00b883a 	mov	r5,r20
    fe10:	308cb03a 	or	r6,r6,r2
    fe14:	d9c00315 	stw	r7,12(sp)
    fe18:	d9800215 	stw	r6,8(sp)
    fe1c:	0002b840 	call	2b84 <__udivsi3>
    fe20:	8809883a 	mov	r4,r17
    fe24:	a00b883a 	mov	r5,r20
    fe28:	1039883a 	mov	fp,r2
    fe2c:	0002b8c0 	call	2b8c <__umodsi3>
    fe30:	b8ffffcc 	andi	r3,r23,65535
    fe34:	d8c00415 	stw	r3,16(sp)
    fe38:	d9000217 	ldw	r4,8(sp)
    fe3c:	d9400417 	ldw	r5,16(sp)
    fe40:	1004943a 	slli	r2,r2,16
    fe44:	2006d43a 	srli	r3,r4,16
    fe48:	8560983a 	sll	r16,r16,r21
    fe4c:	2f23383a 	mul	r17,r5,fp
    fe50:	10c4b03a 	or	r2,r2,r3
    fe54:	dc000015 	stw	r16,0(sp)
    fe58:	b56c983a 	sll	r22,r22,r21
    fe5c:	1440032e 	bgeu	r2,r17,fe6c <__umoddi3+0x404>
    fe60:	15c5883a 	add	r2,r2,r23
    fe64:	e73fffc4 	addi	fp,fp,-1
    fe68:	15c05d2e 	bgeu	r2,r23,ffe0 <__umoddi3+0x578>
    fe6c:	1463c83a 	sub	r17,r2,r17
    fe70:	8809883a 	mov	r4,r17
    fe74:	a00b883a 	mov	r5,r20
    fe78:	0002b840 	call	2b84 <__udivsi3>
    fe7c:	8809883a 	mov	r4,r17
    fe80:	a00b883a 	mov	r5,r20
    fe84:	1021883a 	mov	r16,r2
    fe88:	0002b8c0 	call	2b8c <__umodsi3>
    fe8c:	d8c00417 	ldw	r3,16(sp)
    fe90:	d9000217 	ldw	r4,8(sp)
    fe94:	1004943a 	slli	r2,r2,16
    fe98:	1c23383a 	mul	r17,r3,r16
    fe9c:	20ffffcc 	andi	r3,r4,65535
    fea0:	10ceb03a 	or	r7,r2,r3
    fea4:	3c40032e 	bgeu	r7,r17,feb4 <__umoddi3+0x44c>
    fea8:	3dcf883a 	add	r7,r7,r23
    feac:	843fffc4 	addi	r16,r16,-1
    feb0:	3dc0472e 	bgeu	r7,r23,ffd0 <__umoddi3+0x568>
    feb4:	e004943a 	slli	r2,fp,16
    feb8:	d9400017 	ldw	r5,0(sp)
    febc:	3c4fc83a 	sub	r7,r7,r17
    fec0:	8084b03a 	or	r2,r16,r2
    fec4:	28ffffcc 	andi	r3,r5,65535
    fec8:	280cd43a 	srli	r6,r5,16
    fecc:	100ad43a 	srli	r5,r2,16
    fed0:	10bfffcc 	andi	r2,r2,65535
    fed4:	10d1383a 	mul	r8,r2,r3
    fed8:	28c7383a 	mul	r3,r5,r3
    fedc:	1185383a 	mul	r2,r2,r6
    fee0:	4008d43a 	srli	r4,r8,16
    fee4:	298b383a 	mul	r5,r5,r6
    fee8:	10c5883a 	add	r2,r2,r3
    feec:	2089883a 	add	r4,r4,r2
    fef0:	20c0022e 	bgeu	r4,r3,fefc <__umoddi3+0x494>
    fef4:	00800074 	movhi	r2,1
    fef8:	288b883a 	add	r5,r5,r2
    fefc:	2004d43a 	srli	r2,r4,16
    ff00:	2008943a 	slli	r4,r4,16
    ff04:	40ffffcc 	andi	r3,r8,65535
    ff08:	288b883a 	add	r5,r5,r2
    ff0c:	20c9883a 	add	r4,r4,r3
    ff10:	39400b36 	bltu	r7,r5,ff40 <__umoddi3+0x4d8>
    ff14:	39403d26 	beq	r7,r5,1000c <__umoddi3+0x5a4>
    ff18:	394bc83a 	sub	r5,r7,r5
    ff1c:	00000f06 	br	ff5c <__umoddi3+0x4f4>
    ff20:	30c5c83a 	sub	r2,r6,r3
    ff24:	1839883a 	mov	fp,r3
    ff28:	b084d83a 	srl	r2,r22,r2
    ff2c:	a0c6983a 	sll	r3,r20,r3
    ff30:	8720983a 	sll	r16,r16,fp
    ff34:	b72c983a 	sll	r22,r22,fp
    ff38:	18a8b03a 	or	r20,r3,r2
    ff3c:	003f3a06 	br	fc28 <__umoddi3+0x1c0>
    ff40:	d8c00017 	ldw	r3,0(sp)
    ff44:	20c5c83a 	sub	r2,r4,r3
    ff48:	2089803a 	cmpltu	r4,r4,r2
    ff4c:	2dc7c83a 	sub	r3,r5,r23
    ff50:	1907c83a 	sub	r3,r3,r4
    ff54:	38cbc83a 	sub	r5,r7,r3
    ff58:	1009883a 	mov	r4,r2
    ff5c:	b105c83a 	sub	r2,r22,r4
    ff60:	b087803a 	cmpltu	r3,r22,r2
    ff64:	28c7c83a 	sub	r3,r5,r3
    ff68:	d9400317 	ldw	r5,12(sp)
    ff6c:	1544d83a 	srl	r2,r2,r21
    ff70:	1948983a 	sll	r4,r3,r5
    ff74:	1d46d83a 	srl	r3,r3,r21
    ff78:	20a4b03a 	or	r18,r4,r2
    ff7c:	9011883a 	mov	r8,r18
    ff80:	1813883a 	mov	r9,r3
    ff84:	003ef606 	br	fb60 <__umoddi3+0xf8>
    ff88:	01400604 	movi	r5,24
    ff8c:	2805883a 	mov	r2,r5
    ff90:	003ecc06 	br	fac4 <__umoddi3+0x5c>
    ff94:	01400204 	movi	r5,8
    ff98:	2805883a 	mov	r2,r5
    ff9c:	003ec906 	br	fac4 <__umoddi3+0x5c>
    ffa0:	01400204 	movi	r5,8
    ffa4:	2805883a 	mov	r2,r5
    ffa8:	003f0106 	br	fbb0 <__umoddi3+0x148>
    ffac:	01400204 	movi	r5,8
    ffb0:	2805883a 	mov	r2,r5
    ffb4:	003f1206 	br	fc00 <__umoddi3+0x198>
    ffb8:	01400604 	movi	r5,24
    ffbc:	2805883a 	mov	r2,r5
    ffc0:	003f0f06 	br	fc00 <__umoddi3+0x198>
    ffc4:	01400604 	movi	r5,24
    ffc8:	2805883a 	mov	r2,r5
    ffcc:	003ef806 	br	fbb0 <__umoddi3+0x148>
    ffd0:	3c7fb82e 	bgeu	r7,r17,feb4 <__umoddi3+0x44c>
    ffd4:	843fffc4 	addi	r16,r16,-1
    ffd8:	3dcf883a 	add	r7,r7,r23
    ffdc:	003fb506 	br	feb4 <__umoddi3+0x44c>
    ffe0:	147fa22e 	bgeu	r2,r17,fe6c <__umoddi3+0x404>
    ffe4:	e73fffc4 	addi	fp,fp,-1
    ffe8:	15c5883a 	add	r2,r2,r23
    ffec:	003f9f06 	br	fe6c <__umoddi3+0x404>
    fff0:	147f692e 	bgeu	r2,r17,fd98 <__umoddi3+0x330>
    fff4:	1405883a 	add	r2,r2,r16
    fff8:	003f6706 	br	fd98 <__umoddi3+0x330>
    fffc:	1405883a 	add	r2,r2,r16
   10000:	003f1906 	br	fc68 <__umoddi3+0x200>
   10004:	1405883a 	add	r2,r2,r16
   10008:	003ec906 	br	fb30 <__umoddi3+0xc8>
   1000c:	b13fcc36 	bltu	r22,r4,ff40 <__umoddi3+0x4d8>
   10010:	000b883a 	mov	r5,zero
   10014:	003fd106 	br	ff5c <__umoddi3+0x4f4>

00010018 <__nesf2>:
   10018:	defff304 	addi	sp,sp,-52
   1001c:	dc400b15 	stw	r17,44(sp)
   10020:	dc400204 	addi	r17,sp,8
   10024:	dc000a15 	stw	r16,40(sp)
   10028:	d9000015 	stw	r4,0(sp)
   1002c:	d9400115 	stw	r5,4(sp)
   10030:	d809883a 	mov	r4,sp
   10034:	880b883a 	mov	r5,r17
   10038:	dc000604 	addi	r16,sp,24
   1003c:	dfc00c15 	stw	ra,48(sp)
   10040:	00114280 	call	11428 <__unpack_f>
   10044:	d9000104 	addi	r4,sp,4
   10048:	800b883a 	mov	r5,r16
   1004c:	00114280 	call	11428 <__unpack_f>
   10050:	d8800217 	ldw	r2,8(sp)
   10054:	00c00044 	movi	r3,1
   10058:	180d883a 	mov	r6,r3
   1005c:	1880062e 	bgeu	r3,r2,10078 <__nesf2+0x60>
   10060:	d8800617 	ldw	r2,24(sp)
   10064:	8809883a 	mov	r4,r17
   10068:	800b883a 	mov	r5,r16
   1006c:	1880022e 	bgeu	r3,r2,10078 <__nesf2+0x60>
   10070:	00114f00 	call	114f0 <__fpcmp_parts_f>
   10074:	100d883a 	mov	r6,r2
   10078:	3005883a 	mov	r2,r6
   1007c:	dfc00c17 	ldw	ra,48(sp)
   10080:	dc400b17 	ldw	r17,44(sp)
   10084:	dc000a17 	ldw	r16,40(sp)
   10088:	dec00d04 	addi	sp,sp,52
   1008c:	f800283a 	ret

00010090 <__gtsf2>:
   10090:	defff304 	addi	sp,sp,-52
   10094:	dc400b15 	stw	r17,44(sp)
   10098:	dc400204 	addi	r17,sp,8
   1009c:	dc000a15 	stw	r16,40(sp)
   100a0:	d9000015 	stw	r4,0(sp)
   100a4:	d9400115 	stw	r5,4(sp)
   100a8:	d809883a 	mov	r4,sp
   100ac:	880b883a 	mov	r5,r17
   100b0:	dc000604 	addi	r16,sp,24
   100b4:	dfc00c15 	stw	ra,48(sp)
   100b8:	00114280 	call	11428 <__unpack_f>
   100bc:	d9000104 	addi	r4,sp,4
   100c0:	800b883a 	mov	r5,r16
   100c4:	00114280 	call	11428 <__unpack_f>
   100c8:	d8800217 	ldw	r2,8(sp)
   100cc:	00c00044 	movi	r3,1
   100d0:	01bfffc4 	movi	r6,-1
   100d4:	1880062e 	bgeu	r3,r2,100f0 <__gtsf2+0x60>
   100d8:	d8800617 	ldw	r2,24(sp)
   100dc:	8809883a 	mov	r4,r17
   100e0:	800b883a 	mov	r5,r16
   100e4:	1880022e 	bgeu	r3,r2,100f0 <__gtsf2+0x60>
   100e8:	00114f00 	call	114f0 <__fpcmp_parts_f>
   100ec:	100d883a 	mov	r6,r2
   100f0:	3005883a 	mov	r2,r6
   100f4:	dfc00c17 	ldw	ra,48(sp)
   100f8:	dc400b17 	ldw	r17,44(sp)
   100fc:	dc000a17 	ldw	r16,40(sp)
   10100:	dec00d04 	addi	sp,sp,52
   10104:	f800283a 	ret

00010108 <__ltsf2>:
   10108:	defff304 	addi	sp,sp,-52
   1010c:	dc400b15 	stw	r17,44(sp)
   10110:	dc400204 	addi	r17,sp,8
   10114:	dc000a15 	stw	r16,40(sp)
   10118:	d9000015 	stw	r4,0(sp)
   1011c:	d9400115 	stw	r5,4(sp)
   10120:	d809883a 	mov	r4,sp
   10124:	880b883a 	mov	r5,r17
   10128:	dc000604 	addi	r16,sp,24
   1012c:	dfc00c15 	stw	ra,48(sp)
   10130:	00114280 	call	11428 <__unpack_f>
   10134:	d9000104 	addi	r4,sp,4
   10138:	800b883a 	mov	r5,r16
   1013c:	00114280 	call	11428 <__unpack_f>
   10140:	d8800217 	ldw	r2,8(sp)
   10144:	00c00044 	movi	r3,1
   10148:	180d883a 	mov	r6,r3
   1014c:	1880062e 	bgeu	r3,r2,10168 <__ltsf2+0x60>
   10150:	d8800617 	ldw	r2,24(sp)
   10154:	8809883a 	mov	r4,r17
   10158:	800b883a 	mov	r5,r16
   1015c:	1880022e 	bgeu	r3,r2,10168 <__ltsf2+0x60>
   10160:	00114f00 	call	114f0 <__fpcmp_parts_f>
   10164:	100d883a 	mov	r6,r2
   10168:	3005883a 	mov	r2,r6
   1016c:	dfc00c17 	ldw	ra,48(sp)
   10170:	dc400b17 	ldw	r17,44(sp)
   10174:	dc000a17 	ldw	r16,40(sp)
   10178:	dec00d04 	addi	sp,sp,52
   1017c:	f800283a 	ret

00010180 <_fpadd_parts>:
   10180:	defff804 	addi	sp,sp,-32
   10184:	dcc00315 	stw	r19,12(sp)
   10188:	2027883a 	mov	r19,r4
   1018c:	21000017 	ldw	r4,0(r4)
   10190:	00c00044 	movi	r3,1
   10194:	dd400515 	stw	r21,20(sp)
   10198:	dd000415 	stw	r20,16(sp)
   1019c:	ddc00715 	stw	r23,28(sp)
   101a0:	dd800615 	stw	r22,24(sp)
   101a4:	dc800215 	stw	r18,8(sp)
   101a8:	dc400115 	stw	r17,4(sp)
   101ac:	dc000015 	stw	r16,0(sp)
   101b0:	282b883a 	mov	r21,r5
   101b4:	3029883a 	mov	r20,r6
   101b8:	1900632e 	bgeu	r3,r4,10348 <_fpadd_parts+0x1c8>
   101bc:	28800017 	ldw	r2,0(r5)
   101c0:	1880812e 	bgeu	r3,r2,103c8 <_fpadd_parts+0x248>
   101c4:	00c00104 	movi	r3,4
   101c8:	20c0dc26 	beq	r4,r3,1053c <_fpadd_parts+0x3bc>
   101cc:	10c07e26 	beq	r2,r3,103c8 <_fpadd_parts+0x248>
   101d0:	00c00084 	movi	r3,2
   101d4:	10c06726 	beq	r2,r3,10374 <_fpadd_parts+0x1f4>
   101d8:	20c07b26 	beq	r4,r3,103c8 <_fpadd_parts+0x248>
   101dc:	9dc00217 	ldw	r23,8(r19)
   101e0:	28c00217 	ldw	r3,8(r5)
   101e4:	9c400317 	ldw	r17,12(r19)
   101e8:	2bc00317 	ldw	r15,12(r5)
   101ec:	b8cdc83a 	sub	r6,r23,r3
   101f0:	9c800417 	ldw	r18,16(r19)
   101f4:	2c000417 	ldw	r16,16(r5)
   101f8:	3009883a 	mov	r4,r6
   101fc:	30009716 	blt	r6,zero,1045c <_fpadd_parts+0x2dc>
   10200:	00800fc4 	movi	r2,63
   10204:	11806b16 	blt	r2,r6,103b4 <_fpadd_parts+0x234>
   10208:	0100a40e 	bge	zero,r4,1049c <_fpadd_parts+0x31c>
   1020c:	35bff804 	addi	r22,r6,-32
   10210:	b000bc16 	blt	r22,zero,10504 <_fpadd_parts+0x384>
   10214:	8596d83a 	srl	r11,r16,r22
   10218:	0019883a 	mov	r12,zero
   1021c:	0013883a 	mov	r9,zero
   10220:	01000044 	movi	r4,1
   10224:	0015883a 	mov	r10,zero
   10228:	b000be16 	blt	r22,zero,10524 <_fpadd_parts+0x3a4>
   1022c:	2590983a 	sll	r8,r4,r22
   10230:	000f883a 	mov	r7,zero
   10234:	00bfffc4 	movi	r2,-1
   10238:	3889883a 	add	r4,r7,r2
   1023c:	408b883a 	add	r5,r8,r2
   10240:	21cd803a 	cmpltu	r6,r4,r7
   10244:	314b883a 	add	r5,r6,r5
   10248:	7904703a 	and	r2,r15,r4
   1024c:	8146703a 	and	r3,r16,r5
   10250:	10c4b03a 	or	r2,r2,r3
   10254:	10000226 	beq	r2,zero,10260 <_fpadd_parts+0xe0>
   10258:	02400044 	movi	r9,1
   1025c:	0015883a 	mov	r10,zero
   10260:	5a5eb03a 	or	r15,r11,r9
   10264:	62a0b03a 	or	r16,r12,r10
   10268:	99400117 	ldw	r5,4(r19)
   1026c:	a8800117 	ldw	r2,4(r21)
   10270:	28806e26 	beq	r5,r2,1042c <_fpadd_parts+0x2ac>
   10274:	28006626 	beq	r5,zero,10410 <_fpadd_parts+0x290>
   10278:	7c45c83a 	sub	r2,r15,r17
   1027c:	7889803a 	cmpltu	r4,r15,r2
   10280:	8487c83a 	sub	r3,r16,r18
   10284:	1909c83a 	sub	r4,r3,r4
   10288:	100d883a 	mov	r6,r2
   1028c:	200f883a 	mov	r7,r4
   10290:	38007716 	blt	r7,zero,10470 <_fpadd_parts+0x2f0>
   10294:	a5c00215 	stw	r23,8(r20)
   10298:	a1c00415 	stw	r7,16(r20)
   1029c:	a0000115 	stw	zero,4(r20)
   102a0:	a1800315 	stw	r6,12(r20)
   102a4:	a2000317 	ldw	r8,12(r20)
   102a8:	a2400417 	ldw	r9,16(r20)
   102ac:	00bfffc4 	movi	r2,-1
   102b0:	408b883a 	add	r5,r8,r2
   102b4:	2a09803a 	cmpltu	r4,r5,r8
   102b8:	488d883a 	add	r6,r9,r2
   102bc:	01c40034 	movhi	r7,4096
   102c0:	39ffffc4 	addi	r7,r7,-1
   102c4:	218d883a 	add	r6,r4,r6
   102c8:	39801736 	bltu	r7,r6,10328 <_fpadd_parts+0x1a8>
   102cc:	31c06526 	beq	r6,r7,10464 <_fpadd_parts+0x2e4>
   102d0:	a3000217 	ldw	r12,8(r20)
   102d4:	4209883a 	add	r4,r8,r8
   102d8:	00bfffc4 	movi	r2,-1
   102dc:	220f803a 	cmpltu	r7,r4,r8
   102e0:	4a4b883a 	add	r5,r9,r9
   102e4:	394f883a 	add	r7,r7,r5
   102e8:	2095883a 	add	r10,r4,r2
   102ec:	3897883a 	add	r11,r7,r2
   102f0:	510d803a 	cmpltu	r6,r10,r4
   102f4:	6099883a 	add	r12,r12,r2
   102f8:	32d7883a 	add	r11,r6,r11
   102fc:	00840034 	movhi	r2,4096
   10300:	10bfffc4 	addi	r2,r2,-1
   10304:	2011883a 	mov	r8,r4
   10308:	3813883a 	mov	r9,r7
   1030c:	a1000315 	stw	r4,12(r20)
   10310:	a1c00415 	stw	r7,16(r20)
   10314:	a3000215 	stw	r12,8(r20)
   10318:	12c00336 	bltu	r2,r11,10328 <_fpadd_parts+0x1a8>
   1031c:	58bfed1e 	bne	r11,r2,102d4 <_fpadd_parts+0x154>
   10320:	00bfff84 	movi	r2,-2
   10324:	12bfeb2e 	bgeu	r2,r10,102d4 <_fpadd_parts+0x154>
   10328:	a2800417 	ldw	r10,16(r20)
   1032c:	008000c4 	movi	r2,3
   10330:	00c80034 	movhi	r3,8192
   10334:	18ffffc4 	addi	r3,r3,-1
   10338:	a2400317 	ldw	r9,12(r20)
   1033c:	a0800015 	stw	r2,0(r20)
   10340:	1a802336 	bltu	r3,r10,103d0 <_fpadd_parts+0x250>
   10344:	a027883a 	mov	r19,r20
   10348:	9805883a 	mov	r2,r19
   1034c:	ddc00717 	ldw	r23,28(sp)
   10350:	dd800617 	ldw	r22,24(sp)
   10354:	dd400517 	ldw	r21,20(sp)
   10358:	dd000417 	ldw	r20,16(sp)
   1035c:	dcc00317 	ldw	r19,12(sp)
   10360:	dc800217 	ldw	r18,8(sp)
   10364:	dc400117 	ldw	r17,4(sp)
   10368:	dc000017 	ldw	r16,0(sp)
   1036c:	dec00804 	addi	sp,sp,32
   10370:	f800283a 	ret
   10374:	20fff41e 	bne	r4,r3,10348 <_fpadd_parts+0x1c8>
   10378:	31000015 	stw	r4,0(r6)
   1037c:	98800117 	ldw	r2,4(r19)
   10380:	30800115 	stw	r2,4(r6)
   10384:	98c00217 	ldw	r3,8(r19)
   10388:	30c00215 	stw	r3,8(r6)
   1038c:	98800317 	ldw	r2,12(r19)
   10390:	30800315 	stw	r2,12(r6)
   10394:	98c00417 	ldw	r3,16(r19)
   10398:	30c00415 	stw	r3,16(r6)
   1039c:	98800117 	ldw	r2,4(r19)
   103a0:	28c00117 	ldw	r3,4(r5)
   103a4:	3027883a 	mov	r19,r6
   103a8:	10c4703a 	and	r2,r2,r3
   103ac:	30800115 	stw	r2,4(r6)
   103b0:	003fe506 	br	10348 <_fpadd_parts+0x1c8>
   103b4:	1dc02616 	blt	r3,r23,10450 <_fpadd_parts+0x2d0>
   103b8:	0023883a 	mov	r17,zero
   103bc:	182f883a 	mov	r23,r3
   103c0:	0025883a 	mov	r18,zero
   103c4:	003fa806 	br	10268 <_fpadd_parts+0xe8>
   103c8:	a827883a 	mov	r19,r21
   103cc:	003fde06 	br	10348 <_fpadd_parts+0x1c8>
   103d0:	01800044 	movi	r6,1
   103d4:	500497fa 	slli	r2,r10,31
   103d8:	4808d07a 	srli	r4,r9,1
   103dc:	518ad83a 	srl	r5,r10,r6
   103e0:	a2000217 	ldw	r8,8(r20)
   103e4:	1108b03a 	or	r4,r2,r4
   103e8:	0007883a 	mov	r3,zero
   103ec:	4984703a 	and	r2,r9,r6
   103f0:	208cb03a 	or	r6,r4,r2
   103f4:	28ceb03a 	or	r7,r5,r3
   103f8:	42000044 	addi	r8,r8,1
   103fc:	a027883a 	mov	r19,r20
   10400:	a1c00415 	stw	r7,16(r20)
   10404:	a2000215 	stw	r8,8(r20)
   10408:	a1800315 	stw	r6,12(r20)
   1040c:	003fce06 	br	10348 <_fpadd_parts+0x1c8>
   10410:	8bc5c83a 	sub	r2,r17,r15
   10414:	8889803a 	cmpltu	r4,r17,r2
   10418:	9407c83a 	sub	r3,r18,r16
   1041c:	1909c83a 	sub	r4,r3,r4
   10420:	100d883a 	mov	r6,r2
   10424:	200f883a 	mov	r7,r4
   10428:	003f9906 	br	10290 <_fpadd_parts+0x110>
   1042c:	7c45883a 	add	r2,r15,r17
   10430:	13c9803a 	cmpltu	r4,r2,r15
   10434:	8487883a 	add	r3,r16,r18
   10438:	20c9883a 	add	r4,r4,r3
   1043c:	a1400115 	stw	r5,4(r20)
   10440:	a5c00215 	stw	r23,8(r20)
   10444:	a0800315 	stw	r2,12(r20)
   10448:	a1000415 	stw	r4,16(r20)
   1044c:	003fb606 	br	10328 <_fpadd_parts+0x1a8>
   10450:	001f883a 	mov	r15,zero
   10454:	0021883a 	mov	r16,zero
   10458:	003f8306 	br	10268 <_fpadd_parts+0xe8>
   1045c:	018dc83a 	sub	r6,zero,r6
   10460:	003f6706 	br	10200 <_fpadd_parts+0x80>
   10464:	00bfff84 	movi	r2,-2
   10468:	117faf36 	bltu	r2,r5,10328 <_fpadd_parts+0x1a8>
   1046c:	003f9806 	br	102d0 <_fpadd_parts+0x150>
   10470:	0005883a 	mov	r2,zero
   10474:	1189c83a 	sub	r4,r2,r6
   10478:	1105803a 	cmpltu	r2,r2,r4
   1047c:	01cbc83a 	sub	r5,zero,r7
   10480:	2885c83a 	sub	r2,r5,r2
   10484:	01800044 	movi	r6,1
   10488:	a1800115 	stw	r6,4(r20)
   1048c:	a5c00215 	stw	r23,8(r20)
   10490:	a1000315 	stw	r4,12(r20)
   10494:	a0800415 	stw	r2,16(r20)
   10498:	003f8206 	br	102a4 <_fpadd_parts+0x124>
   1049c:	203f7226 	beq	r4,zero,10268 <_fpadd_parts+0xe8>
   104a0:	35bff804 	addi	r22,r6,-32
   104a4:	b9af883a 	add	r23,r23,r6
   104a8:	b0003116 	blt	r22,zero,10570 <_fpadd_parts+0x3f0>
   104ac:	959ad83a 	srl	r13,r18,r22
   104b0:	001d883a 	mov	r14,zero
   104b4:	000f883a 	mov	r7,zero
   104b8:	01000044 	movi	r4,1
   104bc:	0011883a 	mov	r8,zero
   104c0:	b0002516 	blt	r22,zero,10558 <_fpadd_parts+0x3d8>
   104c4:	2594983a 	sll	r10,r4,r22
   104c8:	0013883a 	mov	r9,zero
   104cc:	00bfffc4 	movi	r2,-1
   104d0:	4889883a 	add	r4,r9,r2
   104d4:	508b883a 	add	r5,r10,r2
   104d8:	224d803a 	cmpltu	r6,r4,r9
   104dc:	314b883a 	add	r5,r6,r5
   104e0:	8904703a 	and	r2,r17,r4
   104e4:	9146703a 	and	r3,r18,r5
   104e8:	10c4b03a 	or	r2,r2,r3
   104ec:	10000226 	beq	r2,zero,104f8 <_fpadd_parts+0x378>
   104f0:	01c00044 	movi	r7,1
   104f4:	0011883a 	mov	r8,zero
   104f8:	69e2b03a 	or	r17,r13,r7
   104fc:	7224b03a 	or	r18,r14,r8
   10500:	003f5906 	br	10268 <_fpadd_parts+0xe8>
   10504:	8407883a 	add	r3,r16,r16
   10508:	008007c4 	movi	r2,31
   1050c:	1185c83a 	sub	r2,r2,r6
   10510:	1886983a 	sll	r3,r3,r2
   10514:	7996d83a 	srl	r11,r15,r6
   10518:	8198d83a 	srl	r12,r16,r6
   1051c:	1ad6b03a 	or	r11,r3,r11
   10520:	003f3e06 	br	1021c <_fpadd_parts+0x9c>
   10524:	2006d07a 	srli	r3,r4,1
   10528:	008007c4 	movi	r2,31
   1052c:	1185c83a 	sub	r2,r2,r6
   10530:	1890d83a 	srl	r8,r3,r2
   10534:	218e983a 	sll	r7,r4,r6
   10538:	003f3e06 	br	10234 <_fpadd_parts+0xb4>
   1053c:	113f821e 	bne	r2,r4,10348 <_fpadd_parts+0x1c8>
   10540:	28c00117 	ldw	r3,4(r5)
   10544:	98800117 	ldw	r2,4(r19)
   10548:	10ff7f26 	beq	r2,r3,10348 <_fpadd_parts+0x1c8>
   1054c:	04c00074 	movhi	r19,1
   10550:	9cd49804 	addi	r19,r19,21088
   10554:	003f7c06 	br	10348 <_fpadd_parts+0x1c8>
   10558:	2006d07a 	srli	r3,r4,1
   1055c:	008007c4 	movi	r2,31
   10560:	1185c83a 	sub	r2,r2,r6
   10564:	1894d83a 	srl	r10,r3,r2
   10568:	2192983a 	sll	r9,r4,r6
   1056c:	003fd706 	br	104cc <_fpadd_parts+0x34c>
   10570:	9487883a 	add	r3,r18,r18
   10574:	008007c4 	movi	r2,31
   10578:	1185c83a 	sub	r2,r2,r6
   1057c:	1886983a 	sll	r3,r3,r2
   10580:	899ad83a 	srl	r13,r17,r6
   10584:	919cd83a 	srl	r14,r18,r6
   10588:	1b5ab03a 	or	r13,r3,r13
   1058c:	003fc906 	br	104b4 <_fpadd_parts+0x334>

00010590 <__subdf3>:
   10590:	deffea04 	addi	sp,sp,-88
   10594:	dcc01415 	stw	r19,80(sp)
   10598:	dcc00404 	addi	r19,sp,16
   1059c:	2011883a 	mov	r8,r4
   105a0:	2813883a 	mov	r9,r5
   105a4:	dc401315 	stw	r17,76(sp)
   105a8:	d809883a 	mov	r4,sp
   105ac:	980b883a 	mov	r5,r19
   105b0:	dc400904 	addi	r17,sp,36
   105b4:	dfc01515 	stw	ra,84(sp)
   105b8:	da400115 	stw	r9,4(sp)
   105bc:	d9c00315 	stw	r7,12(sp)
   105c0:	da000015 	stw	r8,0(sp)
   105c4:	d9800215 	stw	r6,8(sp)
   105c8:	00118d80 	call	118d8 <__unpack_d>
   105cc:	d9000204 	addi	r4,sp,8
   105d0:	880b883a 	mov	r5,r17
   105d4:	00118d80 	call	118d8 <__unpack_d>
   105d8:	d8800a17 	ldw	r2,40(sp)
   105dc:	880b883a 	mov	r5,r17
   105e0:	9809883a 	mov	r4,r19
   105e4:	d9800e04 	addi	r6,sp,56
   105e8:	1080005c 	xori	r2,r2,1
   105ec:	d8800a15 	stw	r2,40(sp)
   105f0:	00101800 	call	10180 <_fpadd_parts>
   105f4:	1009883a 	mov	r4,r2
   105f8:	00115c40 	call	115c4 <__pack_d>
   105fc:	dfc01517 	ldw	ra,84(sp)
   10600:	dcc01417 	ldw	r19,80(sp)
   10604:	dc401317 	ldw	r17,76(sp)
   10608:	dec01604 	addi	sp,sp,88
   1060c:	f800283a 	ret

00010610 <__adddf3>:
   10610:	deffea04 	addi	sp,sp,-88
   10614:	dcc01415 	stw	r19,80(sp)
   10618:	dcc00404 	addi	r19,sp,16
   1061c:	2011883a 	mov	r8,r4
   10620:	2813883a 	mov	r9,r5
   10624:	dc401315 	stw	r17,76(sp)
   10628:	d809883a 	mov	r4,sp
   1062c:	980b883a 	mov	r5,r19
   10630:	dc400904 	addi	r17,sp,36
   10634:	dfc01515 	stw	ra,84(sp)
   10638:	da400115 	stw	r9,4(sp)
   1063c:	d9c00315 	stw	r7,12(sp)
   10640:	da000015 	stw	r8,0(sp)
   10644:	d9800215 	stw	r6,8(sp)
   10648:	00118d80 	call	118d8 <__unpack_d>
   1064c:	d9000204 	addi	r4,sp,8
   10650:	880b883a 	mov	r5,r17
   10654:	00118d80 	call	118d8 <__unpack_d>
   10658:	d9800e04 	addi	r6,sp,56
   1065c:	9809883a 	mov	r4,r19
   10660:	880b883a 	mov	r5,r17
   10664:	00101800 	call	10180 <_fpadd_parts>
   10668:	1009883a 	mov	r4,r2
   1066c:	00115c40 	call	115c4 <__pack_d>
   10670:	dfc01517 	ldw	ra,84(sp)
   10674:	dcc01417 	ldw	r19,80(sp)
   10678:	dc401317 	ldw	r17,76(sp)
   1067c:	dec01604 	addi	sp,sp,88
   10680:	f800283a 	ret

00010684 <__muldf3>:
   10684:	deffe004 	addi	sp,sp,-128
   10688:	dc401815 	stw	r17,96(sp)
   1068c:	dc400404 	addi	r17,sp,16
   10690:	2011883a 	mov	r8,r4
   10694:	2813883a 	mov	r9,r5
   10698:	dc001715 	stw	r16,92(sp)
   1069c:	d809883a 	mov	r4,sp
   106a0:	880b883a 	mov	r5,r17
   106a4:	dc000904 	addi	r16,sp,36
   106a8:	dfc01f15 	stw	ra,124(sp)
   106ac:	da400115 	stw	r9,4(sp)
   106b0:	d9c00315 	stw	r7,12(sp)
   106b4:	da000015 	stw	r8,0(sp)
   106b8:	d9800215 	stw	r6,8(sp)
   106bc:	ddc01e15 	stw	r23,120(sp)
   106c0:	dd801d15 	stw	r22,116(sp)
   106c4:	dd401c15 	stw	r21,112(sp)
   106c8:	dd001b15 	stw	r20,108(sp)
   106cc:	dcc01a15 	stw	r19,104(sp)
   106d0:	dc801915 	stw	r18,100(sp)
   106d4:	00118d80 	call	118d8 <__unpack_d>
   106d8:	d9000204 	addi	r4,sp,8
   106dc:	800b883a 	mov	r5,r16
   106e0:	00118d80 	call	118d8 <__unpack_d>
   106e4:	d9000417 	ldw	r4,16(sp)
   106e8:	00800044 	movi	r2,1
   106ec:	1100102e 	bgeu	r2,r4,10730 <__muldf3+0xac>
   106f0:	d8c00917 	ldw	r3,36(sp)
   106f4:	10c0062e 	bgeu	r2,r3,10710 <__muldf3+0x8c>
   106f8:	00800104 	movi	r2,4
   106fc:	20800a26 	beq	r4,r2,10728 <__muldf3+0xa4>
   10700:	1880cc26 	beq	r3,r2,10a34 <__muldf3+0x3b0>
   10704:	00800084 	movi	r2,2
   10708:	20800926 	beq	r4,r2,10730 <__muldf3+0xac>
   1070c:	1880191e 	bne	r3,r2,10774 <__muldf3+0xf0>
   10710:	d8c00a17 	ldw	r3,40(sp)
   10714:	d8800517 	ldw	r2,20(sp)
   10718:	8009883a 	mov	r4,r16
   1071c:	10c4c03a 	cmpne	r2,r2,r3
   10720:	d8800a15 	stw	r2,40(sp)
   10724:	00000706 	br	10744 <__muldf3+0xc0>
   10728:	00800084 	movi	r2,2
   1072c:	1880c326 	beq	r3,r2,10a3c <__muldf3+0x3b8>
   10730:	d8800517 	ldw	r2,20(sp)
   10734:	d8c00a17 	ldw	r3,40(sp)
   10738:	8809883a 	mov	r4,r17
   1073c:	10c4c03a 	cmpne	r2,r2,r3
   10740:	d8800515 	stw	r2,20(sp)
   10744:	00115c40 	call	115c4 <__pack_d>
   10748:	dfc01f17 	ldw	ra,124(sp)
   1074c:	ddc01e17 	ldw	r23,120(sp)
   10750:	dd801d17 	ldw	r22,116(sp)
   10754:	dd401c17 	ldw	r21,112(sp)
   10758:	dd001b17 	ldw	r20,108(sp)
   1075c:	dcc01a17 	ldw	r19,104(sp)
   10760:	dc801917 	ldw	r18,100(sp)
   10764:	dc401817 	ldw	r17,96(sp)
   10768:	dc001717 	ldw	r16,92(sp)
   1076c:	dec02004 	addi	sp,sp,128
   10770:	f800283a 	ret
   10774:	dd800717 	ldw	r22,28(sp)
   10778:	dc800c17 	ldw	r18,48(sp)
   1077c:	002b883a 	mov	r21,zero
   10780:	0023883a 	mov	r17,zero
   10784:	a80b883a 	mov	r5,r21
   10788:	b00d883a 	mov	r6,r22
   1078c:	880f883a 	mov	r7,r17
   10790:	ddc00817 	ldw	r23,32(sp)
   10794:	dcc00d17 	ldw	r19,52(sp)
   10798:	9009883a 	mov	r4,r18
   1079c:	000f3500 	call	f350 <__muldi3>
   107a0:	001b883a 	mov	r13,zero
   107a4:	680f883a 	mov	r7,r13
   107a8:	b009883a 	mov	r4,r22
   107ac:	000b883a 	mov	r5,zero
   107b0:	980d883a 	mov	r6,r19
   107b4:	b82d883a 	mov	r22,r23
   107b8:	002f883a 	mov	r23,zero
   107bc:	db401615 	stw	r13,88(sp)
   107c0:	d8801315 	stw	r2,76(sp)
   107c4:	d8c01415 	stw	r3,80(sp)
   107c8:	dcc01515 	stw	r19,84(sp)
   107cc:	000f3500 	call	f350 <__muldi3>
   107d0:	b00d883a 	mov	r6,r22
   107d4:	000b883a 	mov	r5,zero
   107d8:	9009883a 	mov	r4,r18
   107dc:	b80f883a 	mov	r7,r23
   107e0:	1021883a 	mov	r16,r2
   107e4:	1823883a 	mov	r17,r3
   107e8:	000f3500 	call	f350 <__muldi3>
   107ec:	8085883a 	add	r2,r16,r2
   107f0:	140d803a 	cmpltu	r6,r2,r16
   107f4:	88c7883a 	add	r3,r17,r3
   107f8:	30cd883a 	add	r6,r6,r3
   107fc:	1029883a 	mov	r20,r2
   10800:	302b883a 	mov	r21,r6
   10804:	da801317 	ldw	r10,76(sp)
   10808:	dac01417 	ldw	r11,80(sp)
   1080c:	db001517 	ldw	r12,84(sp)
   10810:	db401617 	ldw	r13,88(sp)
   10814:	3440612e 	bgeu	r6,r17,1099c <__muldf3+0x318>
   10818:	0009883a 	mov	r4,zero
   1081c:	5105883a 	add	r2,r10,r4
   10820:	128d803a 	cmpltu	r6,r2,r10
   10824:	5d07883a 	add	r3,r11,r20
   10828:	30cd883a 	add	r6,r6,r3
   1082c:	0021883a 	mov	r16,zero
   10830:	04400044 	movi	r17,1
   10834:	1025883a 	mov	r18,r2
   10838:	3027883a 	mov	r19,r6
   1083c:	32c06236 	bltu	r6,r11,109c8 <__muldf3+0x344>
   10840:	59807a26 	beq	r11,r6,10a2c <__muldf3+0x3a8>
   10844:	680b883a 	mov	r5,r13
   10848:	b80f883a 	mov	r7,r23
   1084c:	6009883a 	mov	r4,r12
   10850:	b00d883a 	mov	r6,r22
   10854:	000f3500 	call	f350 <__muldi3>
   10858:	1009883a 	mov	r4,r2
   1085c:	000f883a 	mov	r7,zero
   10860:	1545883a 	add	r2,r2,r21
   10864:	1111803a 	cmpltu	r8,r2,r4
   10868:	19c7883a 	add	r3,r3,r7
   1086c:	40c7883a 	add	r3,r8,r3
   10870:	88cb883a 	add	r5,r17,r3
   10874:	d8c00617 	ldw	r3,24(sp)
   10878:	8089883a 	add	r4,r16,r2
   1087c:	d8800b17 	ldw	r2,44(sp)
   10880:	18c00104 	addi	r3,r3,4
   10884:	240d803a 	cmpltu	r6,r4,r16
   10888:	10c7883a 	add	r3,r2,r3
   1088c:	2013883a 	mov	r9,r4
   10890:	d8800a17 	ldw	r2,40(sp)
   10894:	d9000517 	ldw	r4,20(sp)
   10898:	314d883a 	add	r6,r6,r5
   1089c:	3015883a 	mov	r10,r6
   108a0:	2088c03a 	cmpne	r4,r4,r2
   108a4:	00880034 	movhi	r2,8192
   108a8:	10bfffc4 	addi	r2,r2,-1
   108ac:	d9000f15 	stw	r4,60(sp)
   108b0:	d8c01015 	stw	r3,64(sp)
   108b4:	1180162e 	bgeu	r2,r6,10910 <__muldf3+0x28c>
   108b8:	1811883a 	mov	r8,r3
   108bc:	101f883a 	mov	r15,r2
   108c0:	980497fa 	slli	r2,r19,31
   108c4:	9016d07a 	srli	r11,r18,1
   108c8:	500697fa 	slli	r3,r10,31
   108cc:	480cd07a 	srli	r6,r9,1
   108d0:	500ed07a 	srli	r7,r10,1
   108d4:	12d6b03a 	or	r11,r2,r11
   108d8:	00800044 	movi	r2,1
   108dc:	198cb03a 	or	r6,r3,r6
   108e0:	4888703a 	and	r4,r9,r2
   108e4:	9818d07a 	srli	r12,r19,1
   108e8:	001b883a 	mov	r13,zero
   108ec:	03a00034 	movhi	r14,32768
   108f0:	3013883a 	mov	r9,r6
   108f4:	3815883a 	mov	r10,r7
   108f8:	4091883a 	add	r8,r8,r2
   108fc:	20000226 	beq	r4,zero,10908 <__muldf3+0x284>
   10900:	5b64b03a 	or	r18,r11,r13
   10904:	63a6b03a 	or	r19,r12,r14
   10908:	7abfed36 	bltu	r15,r10,108c0 <__muldf3+0x23c>
   1090c:	da001015 	stw	r8,64(sp)
   10910:	00840034 	movhi	r2,4096
   10914:	10bfffc4 	addi	r2,r2,-1
   10918:	12801436 	bltu	r2,r10,1096c <__muldf3+0x2e8>
   1091c:	da001017 	ldw	r8,64(sp)
   10920:	101f883a 	mov	r15,r2
   10924:	4a45883a 	add	r2,r9,r9
   10928:	124d803a 	cmpltu	r6,r2,r9
   1092c:	5287883a 	add	r3,r10,r10
   10930:	9497883a 	add	r11,r18,r18
   10934:	5c8f803a 	cmpltu	r7,r11,r18
   10938:	9cd9883a 	add	r12,r19,r19
   1093c:	01000044 	movi	r4,1
   10940:	30cd883a 	add	r6,r6,r3
   10944:	3b0f883a 	add	r7,r7,r12
   10948:	423fffc4 	addi	r8,r8,-1
   1094c:	1013883a 	mov	r9,r2
   10950:	3015883a 	mov	r10,r6
   10954:	111ab03a 	or	r13,r2,r4
   10958:	98003016 	blt	r19,zero,10a1c <__muldf3+0x398>
   1095c:	5825883a 	mov	r18,r11
   10960:	3827883a 	mov	r19,r7
   10964:	7abfef2e 	bgeu	r15,r10,10924 <__muldf3+0x2a0>
   10968:	da001015 	stw	r8,64(sp)
   1096c:	00803fc4 	movi	r2,255
   10970:	488e703a 	and	r7,r9,r2
   10974:	00802004 	movi	r2,128
   10978:	0007883a 	mov	r3,zero
   1097c:	0011883a 	mov	r8,zero
   10980:	38801826 	beq	r7,r2,109e4 <__muldf3+0x360>
   10984:	008000c4 	movi	r2,3
   10988:	d9000e04 	addi	r4,sp,56
   1098c:	da801215 	stw	r10,72(sp)
   10990:	d8800e15 	stw	r2,56(sp)
   10994:	da401115 	stw	r9,68(sp)
   10998:	003f6a06 	br	10744 <__muldf3+0xc0>
   1099c:	89802126 	beq	r17,r6,10a24 <__muldf3+0x3a0>
   109a0:	0009883a 	mov	r4,zero
   109a4:	5105883a 	add	r2,r10,r4
   109a8:	128d803a 	cmpltu	r6,r2,r10
   109ac:	5d07883a 	add	r3,r11,r20
   109b0:	30cd883a 	add	r6,r6,r3
   109b4:	0021883a 	mov	r16,zero
   109b8:	0023883a 	mov	r17,zero
   109bc:	1025883a 	mov	r18,r2
   109c0:	3027883a 	mov	r19,r6
   109c4:	32ff9e2e 	bgeu	r6,r11,10840 <__muldf3+0x1bc>
   109c8:	00800044 	movi	r2,1
   109cc:	8089883a 	add	r4,r16,r2
   109d0:	240d803a 	cmpltu	r6,r4,r16
   109d4:	344d883a 	add	r6,r6,r17
   109d8:	2021883a 	mov	r16,r4
   109dc:	3023883a 	mov	r17,r6
   109e0:	003f9806 	br	10844 <__muldf3+0x1c0>
   109e4:	403fe71e 	bne	r8,zero,10984 <__muldf3+0x300>
   109e8:	01004004 	movi	r4,256
   109ec:	4904703a 	and	r2,r9,r4
   109f0:	10c4b03a 	or	r2,r2,r3
   109f4:	103fe31e 	bne	r2,zero,10984 <__muldf3+0x300>
   109f8:	94c4b03a 	or	r2,r18,r19
   109fc:	103fe126 	beq	r2,zero,10984 <__muldf3+0x300>
   10a00:	49c5883a 	add	r2,r9,r7
   10a04:	1251803a 	cmpltu	r8,r2,r9
   10a08:	4291883a 	add	r8,r8,r10
   10a0c:	013fc004 	movi	r4,-256
   10a10:	1112703a 	and	r9,r2,r4
   10a14:	4015883a 	mov	r10,r8
   10a18:	003fda06 	br	10984 <__muldf3+0x300>
   10a1c:	6813883a 	mov	r9,r13
   10a20:	003fce06 	br	1095c <__muldf3+0x2d8>
   10a24:	143f7c36 	bltu	r2,r16,10818 <__muldf3+0x194>
   10a28:	003fdd06 	br	109a0 <__muldf3+0x31c>
   10a2c:	12bf852e 	bgeu	r2,r10,10844 <__muldf3+0x1c0>
   10a30:	003fe506 	br	109c8 <__muldf3+0x344>
   10a34:	00800084 	movi	r2,2
   10a38:	20bf351e 	bne	r4,r2,10710 <__muldf3+0x8c>
   10a3c:	01000074 	movhi	r4,1
   10a40:	21149804 	addi	r4,r4,21088
   10a44:	003f3f06 	br	10744 <__muldf3+0xc0>

00010a48 <__divdf3>:
   10a48:	deffed04 	addi	sp,sp,-76
   10a4c:	dcc01115 	stw	r19,68(sp)
   10a50:	dcc00404 	addi	r19,sp,16
   10a54:	2011883a 	mov	r8,r4
   10a58:	2813883a 	mov	r9,r5
   10a5c:	dc000e15 	stw	r16,56(sp)
   10a60:	d809883a 	mov	r4,sp
   10a64:	980b883a 	mov	r5,r19
   10a68:	dc000904 	addi	r16,sp,36
   10a6c:	dfc01215 	stw	ra,72(sp)
   10a70:	da400115 	stw	r9,4(sp)
   10a74:	d9c00315 	stw	r7,12(sp)
   10a78:	da000015 	stw	r8,0(sp)
   10a7c:	d9800215 	stw	r6,8(sp)
   10a80:	dc801015 	stw	r18,64(sp)
   10a84:	dc400f15 	stw	r17,60(sp)
   10a88:	00118d80 	call	118d8 <__unpack_d>
   10a8c:	d9000204 	addi	r4,sp,8
   10a90:	800b883a 	mov	r5,r16
   10a94:	00118d80 	call	118d8 <__unpack_d>
   10a98:	d9000417 	ldw	r4,16(sp)
   10a9c:	00800044 	movi	r2,1
   10aa0:	11000b2e 	bgeu	r2,r4,10ad0 <__divdf3+0x88>
   10aa4:	d9400917 	ldw	r5,36(sp)
   10aa8:	1140762e 	bgeu	r2,r5,10c84 <__divdf3+0x23c>
   10aac:	d8800517 	ldw	r2,20(sp)
   10ab0:	d8c00a17 	ldw	r3,40(sp)
   10ab4:	01800104 	movi	r6,4
   10ab8:	10c4f03a 	xor	r2,r2,r3
   10abc:	d8800515 	stw	r2,20(sp)
   10ac0:	21800226 	beq	r4,r6,10acc <__divdf3+0x84>
   10ac4:	00800084 	movi	r2,2
   10ac8:	2080141e 	bne	r4,r2,10b1c <__divdf3+0xd4>
   10acc:	29000926 	beq	r5,r4,10af4 <__divdf3+0xac>
   10ad0:	9809883a 	mov	r4,r19
   10ad4:	00115c40 	call	115c4 <__pack_d>
   10ad8:	dfc01217 	ldw	ra,72(sp)
   10adc:	dcc01117 	ldw	r19,68(sp)
   10ae0:	dc801017 	ldw	r18,64(sp)
   10ae4:	dc400f17 	ldw	r17,60(sp)
   10ae8:	dc000e17 	ldw	r16,56(sp)
   10aec:	dec01304 	addi	sp,sp,76
   10af0:	f800283a 	ret
   10af4:	01000074 	movhi	r4,1
   10af8:	21149804 	addi	r4,r4,21088
   10afc:	00115c40 	call	115c4 <__pack_d>
   10b00:	dfc01217 	ldw	ra,72(sp)
   10b04:	dcc01117 	ldw	r19,68(sp)
   10b08:	dc801017 	ldw	r18,64(sp)
   10b0c:	dc400f17 	ldw	r17,60(sp)
   10b10:	dc000e17 	ldw	r16,56(sp)
   10b14:	dec01304 	addi	sp,sp,76
   10b18:	f800283a 	ret
   10b1c:	29805b26 	beq	r5,r6,10c8c <__divdf3+0x244>
   10b20:	28802d26 	beq	r5,r2,10bd8 <__divdf3+0x190>
   10b24:	d8c00617 	ldw	r3,24(sp)
   10b28:	d8800b17 	ldw	r2,44(sp)
   10b2c:	d9c00817 	ldw	r7,32(sp)
   10b30:	dc400d17 	ldw	r17,52(sp)
   10b34:	188bc83a 	sub	r5,r3,r2
   10b38:	d9800717 	ldw	r6,28(sp)
   10b3c:	dc000c17 	ldw	r16,48(sp)
   10b40:	d9400615 	stw	r5,24(sp)
   10b44:	3c403836 	bltu	r7,r17,10c28 <__divdf3+0x1e0>
   10b48:	89c03626 	beq	r17,r7,10c24 <__divdf3+0x1dc>
   10b4c:	0015883a 	mov	r10,zero
   10b50:	001d883a 	mov	r14,zero
   10b54:	02c40034 	movhi	r11,4096
   10b58:	001f883a 	mov	r15,zero
   10b5c:	003f883a 	mov	ra,zero
   10b60:	04800f44 	movi	r18,61
   10b64:	00000f06 	br	10ba4 <__divdf3+0x15c>
   10b68:	601d883a 	mov	r14,r12
   10b6c:	681f883a 	mov	r15,r13
   10b70:	400d883a 	mov	r6,r8
   10b74:	100f883a 	mov	r7,r2
   10b78:	3191883a 	add	r8,r6,r6
   10b7c:	5808d07a 	srli	r4,r11,1
   10b80:	4185803a 	cmpltu	r2,r8,r6
   10b84:	39d3883a 	add	r9,r7,r7
   10b88:	28c6b03a 	or	r3,r5,r3
   10b8c:	1245883a 	add	r2,r2,r9
   10b90:	1815883a 	mov	r10,r3
   10b94:	2017883a 	mov	r11,r4
   10b98:	400d883a 	mov	r6,r8
   10b9c:	100f883a 	mov	r7,r2
   10ba0:	fc801726 	beq	ra,r18,10c00 <__divdf3+0x1b8>
   10ba4:	580a97fa 	slli	r5,r11,31
   10ba8:	5006d07a 	srli	r3,r10,1
   10bac:	ffc00044 	addi	ra,ra,1
   10bb0:	3c7ff136 	bltu	r7,r17,10b78 <__divdf3+0x130>
   10bb4:	3411c83a 	sub	r8,r6,r16
   10bb8:	3205803a 	cmpltu	r2,r6,r8
   10bbc:	3c53c83a 	sub	r9,r7,r17
   10bc0:	7298b03a 	or	r12,r14,r10
   10bc4:	7adab03a 	or	r13,r15,r11
   10bc8:	4885c83a 	sub	r2,r9,r2
   10bcc:	89ffe61e 	bne	r17,r7,10b68 <__divdf3+0x120>
   10bd0:	343fe936 	bltu	r6,r16,10b78 <__divdf3+0x130>
   10bd4:	003fe406 	br	10b68 <__divdf3+0x120>
   10bd8:	9809883a 	mov	r4,r19
   10bdc:	d9800415 	stw	r6,16(sp)
   10be0:	00115c40 	call	115c4 <__pack_d>
   10be4:	dfc01217 	ldw	ra,72(sp)
   10be8:	dcc01117 	ldw	r19,68(sp)
   10bec:	dc801017 	ldw	r18,64(sp)
   10bf0:	dc400f17 	ldw	r17,60(sp)
   10bf4:	dc000e17 	ldw	r16,56(sp)
   10bf8:	dec01304 	addi	sp,sp,76
   10bfc:	f800283a 	ret
   10c00:	00803fc4 	movi	r2,255
   10c04:	7090703a 	and	r8,r14,r2
   10c08:	00802004 	movi	r2,128
   10c0c:	0007883a 	mov	r3,zero
   10c10:	0013883a 	mov	r9,zero
   10c14:	40800d26 	beq	r8,r2,10c4c <__divdf3+0x204>
   10c18:	dbc00815 	stw	r15,32(sp)
   10c1c:	db800715 	stw	r14,28(sp)
   10c20:	003fab06 	br	10ad0 <__divdf3+0x88>
   10c24:	343fc92e 	bgeu	r6,r16,10b4c <__divdf3+0x104>
   10c28:	3185883a 	add	r2,r6,r6
   10c2c:	1189803a 	cmpltu	r4,r2,r6
   10c30:	39c7883a 	add	r3,r7,r7
   10c34:	20c9883a 	add	r4,r4,r3
   10c38:	297fffc4 	addi	r5,r5,-1
   10c3c:	100d883a 	mov	r6,r2
   10c40:	200f883a 	mov	r7,r4
   10c44:	d9400615 	stw	r5,24(sp)
   10c48:	003fc006 	br	10b4c <__divdf3+0x104>
   10c4c:	483ff21e 	bne	r9,zero,10c18 <__divdf3+0x1d0>
   10c50:	01004004 	movi	r4,256
   10c54:	7104703a 	and	r2,r14,r4
   10c58:	10c4b03a 	or	r2,r2,r3
   10c5c:	103fee1e 	bne	r2,zero,10c18 <__divdf3+0x1d0>
   10c60:	31c4b03a 	or	r2,r6,r7
   10c64:	103fec26 	beq	r2,zero,10c18 <__divdf3+0x1d0>
   10c68:	7205883a 	add	r2,r14,r8
   10c6c:	1391803a 	cmpltu	r8,r2,r14
   10c70:	43d1883a 	add	r8,r8,r15
   10c74:	013fc004 	movi	r4,-256
   10c78:	111c703a 	and	r14,r2,r4
   10c7c:	401f883a 	mov	r15,r8
   10c80:	003fe506 	br	10c18 <__divdf3+0x1d0>
   10c84:	8009883a 	mov	r4,r16
   10c88:	003f9206 	br	10ad4 <__divdf3+0x8c>
   10c8c:	9809883a 	mov	r4,r19
   10c90:	d8000715 	stw	zero,28(sp)
   10c94:	d8000815 	stw	zero,32(sp)
   10c98:	d8000615 	stw	zero,24(sp)
   10c9c:	003f8d06 	br	10ad4 <__divdf3+0x8c>

00010ca0 <__eqdf2>:
   10ca0:	deffef04 	addi	sp,sp,-68
   10ca4:	dc400f15 	stw	r17,60(sp)
   10ca8:	dc400404 	addi	r17,sp,16
   10cac:	2005883a 	mov	r2,r4
   10cb0:	2807883a 	mov	r3,r5
   10cb4:	dc000e15 	stw	r16,56(sp)
   10cb8:	d809883a 	mov	r4,sp
   10cbc:	880b883a 	mov	r5,r17
   10cc0:	dc000904 	addi	r16,sp,36
   10cc4:	d8c00115 	stw	r3,4(sp)
   10cc8:	d8800015 	stw	r2,0(sp)
   10ccc:	d9800215 	stw	r6,8(sp)
   10cd0:	dfc01015 	stw	ra,64(sp)
   10cd4:	d9c00315 	stw	r7,12(sp)
   10cd8:	00118d80 	call	118d8 <__unpack_d>
   10cdc:	d9000204 	addi	r4,sp,8
   10ce0:	800b883a 	mov	r5,r16
   10ce4:	00118d80 	call	118d8 <__unpack_d>
   10ce8:	d8800417 	ldw	r2,16(sp)
   10cec:	00c00044 	movi	r3,1
   10cf0:	180d883a 	mov	r6,r3
   10cf4:	1880062e 	bgeu	r3,r2,10d10 <__eqdf2+0x70>
   10cf8:	d8800917 	ldw	r2,36(sp)
   10cfc:	8809883a 	mov	r4,r17
   10d00:	800b883a 	mov	r5,r16
   10d04:	1880022e 	bgeu	r3,r2,10d10 <__eqdf2+0x70>
   10d08:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10d0c:	100d883a 	mov	r6,r2
   10d10:	3005883a 	mov	r2,r6
   10d14:	dfc01017 	ldw	ra,64(sp)
   10d18:	dc400f17 	ldw	r17,60(sp)
   10d1c:	dc000e17 	ldw	r16,56(sp)
   10d20:	dec01104 	addi	sp,sp,68
   10d24:	f800283a 	ret

00010d28 <__nedf2>:
   10d28:	deffef04 	addi	sp,sp,-68
   10d2c:	dc400f15 	stw	r17,60(sp)
   10d30:	dc400404 	addi	r17,sp,16
   10d34:	2005883a 	mov	r2,r4
   10d38:	2807883a 	mov	r3,r5
   10d3c:	dc000e15 	stw	r16,56(sp)
   10d40:	d809883a 	mov	r4,sp
   10d44:	880b883a 	mov	r5,r17
   10d48:	dc000904 	addi	r16,sp,36
   10d4c:	d8c00115 	stw	r3,4(sp)
   10d50:	d8800015 	stw	r2,0(sp)
   10d54:	d9800215 	stw	r6,8(sp)
   10d58:	dfc01015 	stw	ra,64(sp)
   10d5c:	d9c00315 	stw	r7,12(sp)
   10d60:	00118d80 	call	118d8 <__unpack_d>
   10d64:	d9000204 	addi	r4,sp,8
   10d68:	800b883a 	mov	r5,r16
   10d6c:	00118d80 	call	118d8 <__unpack_d>
   10d70:	d8800417 	ldw	r2,16(sp)
   10d74:	00c00044 	movi	r3,1
   10d78:	180d883a 	mov	r6,r3
   10d7c:	1880062e 	bgeu	r3,r2,10d98 <__nedf2+0x70>
   10d80:	d8800917 	ldw	r2,36(sp)
   10d84:	8809883a 	mov	r4,r17
   10d88:	800b883a 	mov	r5,r16
   10d8c:	1880022e 	bgeu	r3,r2,10d98 <__nedf2+0x70>
   10d90:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10d94:	100d883a 	mov	r6,r2
   10d98:	3005883a 	mov	r2,r6
   10d9c:	dfc01017 	ldw	ra,64(sp)
   10da0:	dc400f17 	ldw	r17,60(sp)
   10da4:	dc000e17 	ldw	r16,56(sp)
   10da8:	dec01104 	addi	sp,sp,68
   10dac:	f800283a 	ret

00010db0 <__gtdf2>:
   10db0:	deffef04 	addi	sp,sp,-68
   10db4:	dc400f15 	stw	r17,60(sp)
   10db8:	dc400404 	addi	r17,sp,16
   10dbc:	2005883a 	mov	r2,r4
   10dc0:	2807883a 	mov	r3,r5
   10dc4:	dc000e15 	stw	r16,56(sp)
   10dc8:	d809883a 	mov	r4,sp
   10dcc:	880b883a 	mov	r5,r17
   10dd0:	dc000904 	addi	r16,sp,36
   10dd4:	d8c00115 	stw	r3,4(sp)
   10dd8:	d8800015 	stw	r2,0(sp)
   10ddc:	d9800215 	stw	r6,8(sp)
   10de0:	dfc01015 	stw	ra,64(sp)
   10de4:	d9c00315 	stw	r7,12(sp)
   10de8:	00118d80 	call	118d8 <__unpack_d>
   10dec:	d9000204 	addi	r4,sp,8
   10df0:	800b883a 	mov	r5,r16
   10df4:	00118d80 	call	118d8 <__unpack_d>
   10df8:	d8800417 	ldw	r2,16(sp)
   10dfc:	00c00044 	movi	r3,1
   10e00:	01bfffc4 	movi	r6,-1
   10e04:	1880062e 	bgeu	r3,r2,10e20 <__gtdf2+0x70>
   10e08:	d8800917 	ldw	r2,36(sp)
   10e0c:	8809883a 	mov	r4,r17
   10e10:	800b883a 	mov	r5,r16
   10e14:	1880022e 	bgeu	r3,r2,10e20 <__gtdf2+0x70>
   10e18:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10e1c:	100d883a 	mov	r6,r2
   10e20:	3005883a 	mov	r2,r6
   10e24:	dfc01017 	ldw	ra,64(sp)
   10e28:	dc400f17 	ldw	r17,60(sp)
   10e2c:	dc000e17 	ldw	r16,56(sp)
   10e30:	dec01104 	addi	sp,sp,68
   10e34:	f800283a 	ret

00010e38 <__gedf2>:
   10e38:	deffef04 	addi	sp,sp,-68
   10e3c:	dc400f15 	stw	r17,60(sp)
   10e40:	dc400404 	addi	r17,sp,16
   10e44:	2005883a 	mov	r2,r4
   10e48:	2807883a 	mov	r3,r5
   10e4c:	dc000e15 	stw	r16,56(sp)
   10e50:	d809883a 	mov	r4,sp
   10e54:	880b883a 	mov	r5,r17
   10e58:	dc000904 	addi	r16,sp,36
   10e5c:	d8c00115 	stw	r3,4(sp)
   10e60:	d8800015 	stw	r2,0(sp)
   10e64:	d9800215 	stw	r6,8(sp)
   10e68:	dfc01015 	stw	ra,64(sp)
   10e6c:	d9c00315 	stw	r7,12(sp)
   10e70:	00118d80 	call	118d8 <__unpack_d>
   10e74:	d9000204 	addi	r4,sp,8
   10e78:	800b883a 	mov	r5,r16
   10e7c:	00118d80 	call	118d8 <__unpack_d>
   10e80:	d8800417 	ldw	r2,16(sp)
   10e84:	00c00044 	movi	r3,1
   10e88:	01bfffc4 	movi	r6,-1
   10e8c:	1880062e 	bgeu	r3,r2,10ea8 <__gedf2+0x70>
   10e90:	d8800917 	ldw	r2,36(sp)
   10e94:	8809883a 	mov	r4,r17
   10e98:	800b883a 	mov	r5,r16
   10e9c:	1880022e 	bgeu	r3,r2,10ea8 <__gedf2+0x70>
   10ea0:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10ea4:	100d883a 	mov	r6,r2
   10ea8:	3005883a 	mov	r2,r6
   10eac:	dfc01017 	ldw	ra,64(sp)
   10eb0:	dc400f17 	ldw	r17,60(sp)
   10eb4:	dc000e17 	ldw	r16,56(sp)
   10eb8:	dec01104 	addi	sp,sp,68
   10ebc:	f800283a 	ret

00010ec0 <__ltdf2>:
   10ec0:	deffef04 	addi	sp,sp,-68
   10ec4:	dc400f15 	stw	r17,60(sp)
   10ec8:	dc400404 	addi	r17,sp,16
   10ecc:	2005883a 	mov	r2,r4
   10ed0:	2807883a 	mov	r3,r5
   10ed4:	dc000e15 	stw	r16,56(sp)
   10ed8:	d809883a 	mov	r4,sp
   10edc:	880b883a 	mov	r5,r17
   10ee0:	dc000904 	addi	r16,sp,36
   10ee4:	d8c00115 	stw	r3,4(sp)
   10ee8:	d8800015 	stw	r2,0(sp)
   10eec:	d9800215 	stw	r6,8(sp)
   10ef0:	dfc01015 	stw	ra,64(sp)
   10ef4:	d9c00315 	stw	r7,12(sp)
   10ef8:	00118d80 	call	118d8 <__unpack_d>
   10efc:	d9000204 	addi	r4,sp,8
   10f00:	800b883a 	mov	r5,r16
   10f04:	00118d80 	call	118d8 <__unpack_d>
   10f08:	d8800417 	ldw	r2,16(sp)
   10f0c:	00c00044 	movi	r3,1
   10f10:	180d883a 	mov	r6,r3
   10f14:	1880062e 	bgeu	r3,r2,10f30 <__ltdf2+0x70>
   10f18:	d8800917 	ldw	r2,36(sp)
   10f1c:	8809883a 	mov	r4,r17
   10f20:	800b883a 	mov	r5,r16
   10f24:	1880022e 	bgeu	r3,r2,10f30 <__ltdf2+0x70>
   10f28:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10f2c:	100d883a 	mov	r6,r2
   10f30:	3005883a 	mov	r2,r6
   10f34:	dfc01017 	ldw	ra,64(sp)
   10f38:	dc400f17 	ldw	r17,60(sp)
   10f3c:	dc000e17 	ldw	r16,56(sp)
   10f40:	dec01104 	addi	sp,sp,68
   10f44:	f800283a 	ret

00010f48 <__ledf2>:
   10f48:	deffef04 	addi	sp,sp,-68
   10f4c:	dc400f15 	stw	r17,60(sp)
   10f50:	dc400404 	addi	r17,sp,16
   10f54:	2005883a 	mov	r2,r4
   10f58:	2807883a 	mov	r3,r5
   10f5c:	dc000e15 	stw	r16,56(sp)
   10f60:	d809883a 	mov	r4,sp
   10f64:	880b883a 	mov	r5,r17
   10f68:	dc000904 	addi	r16,sp,36
   10f6c:	d8c00115 	stw	r3,4(sp)
   10f70:	d8800015 	stw	r2,0(sp)
   10f74:	d9800215 	stw	r6,8(sp)
   10f78:	dfc01015 	stw	ra,64(sp)
   10f7c:	d9c00315 	stw	r7,12(sp)
   10f80:	00118d80 	call	118d8 <__unpack_d>
   10f84:	d9000204 	addi	r4,sp,8
   10f88:	800b883a 	mov	r5,r16
   10f8c:	00118d80 	call	118d8 <__unpack_d>
   10f90:	d8800417 	ldw	r2,16(sp)
   10f94:	00c00044 	movi	r3,1
   10f98:	180d883a 	mov	r6,r3
   10f9c:	1880062e 	bgeu	r3,r2,10fb8 <__ledf2+0x70>
   10fa0:	d8800917 	ldw	r2,36(sp)
   10fa4:	8809883a 	mov	r4,r17
   10fa8:	800b883a 	mov	r5,r16
   10fac:	1880022e 	bgeu	r3,r2,10fb8 <__ledf2+0x70>
   10fb0:	0011a100 	call	11a10 <__fpcmp_parts_d>
   10fb4:	100d883a 	mov	r6,r2
   10fb8:	3005883a 	mov	r2,r6
   10fbc:	dfc01017 	ldw	ra,64(sp)
   10fc0:	dc400f17 	ldw	r17,60(sp)
   10fc4:	dc000e17 	ldw	r16,56(sp)
   10fc8:	dec01104 	addi	sp,sp,68
   10fcc:	f800283a 	ret

00010fd0 <__floatsidf>:
   10fd0:	2006d7fa 	srli	r3,r4,31
   10fd4:	defff604 	addi	sp,sp,-40
   10fd8:	008000c4 	movi	r2,3
   10fdc:	dfc00915 	stw	ra,36(sp)
   10fe0:	dcc00815 	stw	r19,32(sp)
   10fe4:	dc800715 	stw	r18,28(sp)
   10fe8:	dc400615 	stw	r17,24(sp)
   10fec:	dc000515 	stw	r16,20(sp)
   10ff0:	d8800015 	stw	r2,0(sp)
   10ff4:	d8c00115 	stw	r3,4(sp)
   10ff8:	20000f1e 	bne	r4,zero,11038 <__floatsidf+0x68>
   10ffc:	00800084 	movi	r2,2
   11000:	d8800015 	stw	r2,0(sp)
   11004:	d809883a 	mov	r4,sp
   11008:	00115c40 	call	115c4 <__pack_d>
   1100c:	1009883a 	mov	r4,r2
   11010:	180b883a 	mov	r5,r3
   11014:	2005883a 	mov	r2,r4
   11018:	2807883a 	mov	r3,r5
   1101c:	dfc00917 	ldw	ra,36(sp)
   11020:	dcc00817 	ldw	r19,32(sp)
   11024:	dc800717 	ldw	r18,28(sp)
   11028:	dc400617 	ldw	r17,24(sp)
   1102c:	dc000517 	ldw	r16,20(sp)
   11030:	dec00a04 	addi	sp,sp,40
   11034:	f800283a 	ret
   11038:	00800f04 	movi	r2,60
   1103c:	1807003a 	cmpeq	r3,r3,zero
   11040:	d8800215 	stw	r2,8(sp)
   11044:	18001126 	beq	r3,zero,1108c <__floatsidf+0xbc>
   11048:	0027883a 	mov	r19,zero
   1104c:	2025883a 	mov	r18,r4
   11050:	d9000315 	stw	r4,12(sp)
   11054:	dcc00415 	stw	r19,16(sp)
   11058:	00113a80 	call	113a8 <__clzsi2>
   1105c:	11000744 	addi	r4,r2,29
   11060:	013fe80e 	bge	zero,r4,11004 <__floatsidf+0x34>
   11064:	10bfff44 	addi	r2,r2,-3
   11068:	10000c16 	blt	r2,zero,1109c <__floatsidf+0xcc>
   1106c:	90a2983a 	sll	r17,r18,r2
   11070:	0021883a 	mov	r16,zero
   11074:	d8800217 	ldw	r2,8(sp)
   11078:	dc400415 	stw	r17,16(sp)
   1107c:	dc000315 	stw	r16,12(sp)
   11080:	1105c83a 	sub	r2,r2,r4
   11084:	d8800215 	stw	r2,8(sp)
   11088:	003fde06 	br	11004 <__floatsidf+0x34>
   1108c:	00a00034 	movhi	r2,32768
   11090:	20800a26 	beq	r4,r2,110bc <__floatsidf+0xec>
   11094:	0109c83a 	sub	r4,zero,r4
   11098:	003feb06 	br	11048 <__floatsidf+0x78>
   1109c:	9006d07a 	srli	r3,r18,1
   110a0:	008007c4 	movi	r2,31
   110a4:	1105c83a 	sub	r2,r2,r4
   110a8:	1886d83a 	srl	r3,r3,r2
   110ac:	9922983a 	sll	r17,r19,r4
   110b0:	9120983a 	sll	r16,r18,r4
   110b4:	1c62b03a 	or	r17,r3,r17
   110b8:	003fee06 	br	11074 <__floatsidf+0xa4>
   110bc:	0009883a 	mov	r4,zero
   110c0:	01707834 	movhi	r5,49632
   110c4:	003fd306 	br	11014 <__floatsidf+0x44>

000110c8 <__fixdfsi>:
   110c8:	defff804 	addi	sp,sp,-32
   110cc:	2005883a 	mov	r2,r4
   110d0:	2807883a 	mov	r3,r5
   110d4:	d809883a 	mov	r4,sp
   110d8:	d9400204 	addi	r5,sp,8
   110dc:	d8c00115 	stw	r3,4(sp)
   110e0:	d8800015 	stw	r2,0(sp)
   110e4:	dfc00715 	stw	ra,28(sp)
   110e8:	00118d80 	call	118d8 <__unpack_d>
   110ec:	d8c00217 	ldw	r3,8(sp)
   110f0:	00800084 	movi	r2,2
   110f4:	1880051e 	bne	r3,r2,1110c <__fixdfsi+0x44>
   110f8:	0007883a 	mov	r3,zero
   110fc:	1805883a 	mov	r2,r3
   11100:	dfc00717 	ldw	ra,28(sp)
   11104:	dec00804 	addi	sp,sp,32
   11108:	f800283a 	ret
   1110c:	00800044 	movi	r2,1
   11110:	10fff92e 	bgeu	r2,r3,110f8 <__fixdfsi+0x30>
   11114:	00800104 	movi	r2,4
   11118:	18800426 	beq	r3,r2,1112c <__fixdfsi+0x64>
   1111c:	d8c00417 	ldw	r3,16(sp)
   11120:	183ff516 	blt	r3,zero,110f8 <__fixdfsi+0x30>
   11124:	00800784 	movi	r2,30
   11128:	10c0080e 	bge	r2,r3,1114c <__fixdfsi+0x84>
   1112c:	d8800317 	ldw	r2,12(sp)
   11130:	1000121e 	bne	r2,zero,1117c <__fixdfsi+0xb4>
   11134:	00e00034 	movhi	r3,32768
   11138:	18ffffc4 	addi	r3,r3,-1
   1113c:	1805883a 	mov	r2,r3
   11140:	dfc00717 	ldw	ra,28(sp)
   11144:	dec00804 	addi	sp,sp,32
   11148:	f800283a 	ret
   1114c:	00800f04 	movi	r2,60
   11150:	10d1c83a 	sub	r8,r2,r3
   11154:	40bff804 	addi	r2,r8,-32
   11158:	d9800517 	ldw	r6,20(sp)
   1115c:	d9c00617 	ldw	r7,24(sp)
   11160:	10000816 	blt	r2,zero,11184 <__fixdfsi+0xbc>
   11164:	3888d83a 	srl	r4,r7,r2
   11168:	d8800317 	ldw	r2,12(sp)
   1116c:	2007883a 	mov	r3,r4
   11170:	103fe226 	beq	r2,zero,110fc <__fixdfsi+0x34>
   11174:	0107c83a 	sub	r3,zero,r4
   11178:	003fe006 	br	110fc <__fixdfsi+0x34>
   1117c:	00e00034 	movhi	r3,32768
   11180:	003fde06 	br	110fc <__fixdfsi+0x34>
   11184:	39c7883a 	add	r3,r7,r7
   11188:	008007c4 	movi	r2,31
   1118c:	1205c83a 	sub	r2,r2,r8
   11190:	1886983a 	sll	r3,r3,r2
   11194:	3208d83a 	srl	r4,r6,r8
   11198:	1908b03a 	or	r4,r3,r4
   1119c:	003ff206 	br	11168 <__fixdfsi+0xa0>

000111a0 <__truncdfsf2>:
   111a0:	defff804 	addi	sp,sp,-32
   111a4:	2005883a 	mov	r2,r4
   111a8:	2807883a 	mov	r3,r5
   111ac:	d809883a 	mov	r4,sp
   111b0:	d9400204 	addi	r5,sp,8
   111b4:	d8c00115 	stw	r3,4(sp)
   111b8:	d8800015 	stw	r2,0(sp)
   111bc:	dfc00715 	stw	ra,28(sp)
   111c0:	00118d80 	call	118d8 <__unpack_d>
   111c4:	d9c00517 	ldw	r7,20(sp)
   111c8:	da000617 	ldw	r8,24(sp)
   111cc:	02d00034 	movhi	r11,16384
   111d0:	5affffc4 	addi	r11,r11,-1
   111d4:	3812d7ba 	srli	r9,r7,30
   111d8:	401a90ba 	slli	r13,r8,2
   111dc:	3ac4703a 	and	r2,r7,r11
   111e0:	0007883a 	mov	r3,zero
   111e4:	6a52b03a 	or	r9,r13,r9
   111e8:	10c4b03a 	or	r2,r2,r3
   111ec:	d9000217 	ldw	r4,8(sp)
   111f0:	d9400317 	ldw	r5,12(sp)
   111f4:	d9800417 	ldw	r6,16(sp)
   111f8:	480f883a 	mov	r7,r9
   111fc:	10000126 	beq	r2,zero,11204 <__truncdfsf2+0x64>
   11200:	49c00054 	ori	r7,r9,1
   11204:	00115980 	call	11598 <__make_fp>
   11208:	dfc00717 	ldw	ra,28(sp)
   1120c:	dec00804 	addi	sp,sp,32
   11210:	f800283a 	ret

00011214 <__floatunsidf>:
   11214:	defff204 	addi	sp,sp,-56
   11218:	dfc00d15 	stw	ra,52(sp)
   1121c:	ddc00c15 	stw	r23,48(sp)
   11220:	dd800b15 	stw	r22,44(sp)
   11224:	dd400a15 	stw	r21,40(sp)
   11228:	dd000915 	stw	r20,36(sp)
   1122c:	dcc00815 	stw	r19,32(sp)
   11230:	dc800715 	stw	r18,28(sp)
   11234:	dc400615 	stw	r17,24(sp)
   11238:	dc000515 	stw	r16,20(sp)
   1123c:	d8000115 	stw	zero,4(sp)
   11240:	20000f1e 	bne	r4,zero,11280 <__floatunsidf+0x6c>
   11244:	00800084 	movi	r2,2
   11248:	d8800015 	stw	r2,0(sp)
   1124c:	d809883a 	mov	r4,sp
   11250:	00115c40 	call	115c4 <__pack_d>
   11254:	dfc00d17 	ldw	ra,52(sp)
   11258:	ddc00c17 	ldw	r23,48(sp)
   1125c:	dd800b17 	ldw	r22,44(sp)
   11260:	dd400a17 	ldw	r21,40(sp)
   11264:	dd000917 	ldw	r20,36(sp)
   11268:	dcc00817 	ldw	r19,32(sp)
   1126c:	dc800717 	ldw	r18,28(sp)
   11270:	dc400617 	ldw	r17,24(sp)
   11274:	dc000517 	ldw	r16,20(sp)
   11278:	dec00e04 	addi	sp,sp,56
   1127c:	f800283a 	ret
   11280:	008000c4 	movi	r2,3
   11284:	00c00f04 	movi	r3,60
   11288:	002f883a 	mov	r23,zero
   1128c:	202d883a 	mov	r22,r4
   11290:	d8800015 	stw	r2,0(sp)
   11294:	d8c00215 	stw	r3,8(sp)
   11298:	d9000315 	stw	r4,12(sp)
   1129c:	ddc00415 	stw	r23,16(sp)
   112a0:	00113a80 	call	113a8 <__clzsi2>
   112a4:	12400744 	addi	r9,r2,29
   112a8:	48000b16 	blt	r9,zero,112d8 <__floatunsidf+0xc4>
   112ac:	483fe726 	beq	r9,zero,1124c <__floatunsidf+0x38>
   112b0:	10bfff44 	addi	r2,r2,-3
   112b4:	10002e16 	blt	r2,zero,11370 <__floatunsidf+0x15c>
   112b8:	b0a2983a 	sll	r17,r22,r2
   112bc:	0021883a 	mov	r16,zero
   112c0:	d8800217 	ldw	r2,8(sp)
   112c4:	dc400415 	stw	r17,16(sp)
   112c8:	dc000315 	stw	r16,12(sp)
   112cc:	1245c83a 	sub	r2,r2,r9
   112d0:	d8800215 	stw	r2,8(sp)
   112d4:	003fdd06 	br	1124c <__floatunsidf+0x38>
   112d8:	0255c83a 	sub	r10,zero,r9
   112dc:	51bff804 	addi	r6,r10,-32
   112e0:	30001b16 	blt	r6,zero,11350 <__floatunsidf+0x13c>
   112e4:	b9a8d83a 	srl	r20,r23,r6
   112e8:	002b883a 	mov	r21,zero
   112ec:	000f883a 	mov	r7,zero
   112f0:	01000044 	movi	r4,1
   112f4:	0011883a 	mov	r8,zero
   112f8:	30002516 	blt	r6,zero,11390 <__floatunsidf+0x17c>
   112fc:	21a6983a 	sll	r19,r4,r6
   11300:	0025883a 	mov	r18,zero
   11304:	00bfffc4 	movi	r2,-1
   11308:	9089883a 	add	r4,r18,r2
   1130c:	988b883a 	add	r5,r19,r2
   11310:	248d803a 	cmpltu	r6,r4,r18
   11314:	314b883a 	add	r5,r6,r5
   11318:	b104703a 	and	r2,r22,r4
   1131c:	b946703a 	and	r3,r23,r5
   11320:	10c4b03a 	or	r2,r2,r3
   11324:	10000226 	beq	r2,zero,11330 <__floatunsidf+0x11c>
   11328:	01c00044 	movi	r7,1
   1132c:	0011883a 	mov	r8,zero
   11330:	d9000217 	ldw	r4,8(sp)
   11334:	a1c4b03a 	or	r2,r20,r7
   11338:	aa06b03a 	or	r3,r21,r8
   1133c:	2249c83a 	sub	r4,r4,r9
   11340:	d8c00415 	stw	r3,16(sp)
   11344:	d9000215 	stw	r4,8(sp)
   11348:	d8800315 	stw	r2,12(sp)
   1134c:	003fbf06 	br	1124c <__floatunsidf+0x38>
   11350:	bdc7883a 	add	r3,r23,r23
   11354:	008007c4 	movi	r2,31
   11358:	1285c83a 	sub	r2,r2,r10
   1135c:	1886983a 	sll	r3,r3,r2
   11360:	b2a8d83a 	srl	r20,r22,r10
   11364:	baaad83a 	srl	r21,r23,r10
   11368:	1d28b03a 	or	r20,r3,r20
   1136c:	003fdf06 	br	112ec <__floatunsidf+0xd8>
   11370:	b006d07a 	srli	r3,r22,1
   11374:	008007c4 	movi	r2,31
   11378:	1245c83a 	sub	r2,r2,r9
   1137c:	1886d83a 	srl	r3,r3,r2
   11380:	ba62983a 	sll	r17,r23,r9
   11384:	b260983a 	sll	r16,r22,r9
   11388:	1c62b03a 	or	r17,r3,r17
   1138c:	003fcc06 	br	112c0 <__floatunsidf+0xac>
   11390:	2006d07a 	srli	r3,r4,1
   11394:	008007c4 	movi	r2,31
   11398:	1285c83a 	sub	r2,r2,r10
   1139c:	18a6d83a 	srl	r19,r3,r2
   113a0:	22a4983a 	sll	r18,r4,r10
   113a4:	003fd706 	br	11304 <__floatunsidf+0xf0>

000113a8 <__clzsi2>:
   113a8:	00bfffd4 	movui	r2,65535
   113ac:	11000e36 	bltu	r2,r4,113e8 <__clzsi2+0x40>
   113b0:	00803fc4 	movi	r2,255
   113b4:	01400204 	movi	r5,8
   113b8:	0007883a 	mov	r3,zero
   113bc:	11001036 	bltu	r2,r4,11400 <__clzsi2+0x58>
   113c0:	000b883a 	mov	r5,zero
   113c4:	20c6d83a 	srl	r3,r4,r3
   113c8:	00800074 	movhi	r2,1
   113cc:	10949d04 	addi	r2,r2,21108
   113d0:	1887883a 	add	r3,r3,r2
   113d4:	18800003 	ldbu	r2,0(r3)
   113d8:	00c00804 	movi	r3,32
   113dc:	2885883a 	add	r2,r5,r2
   113e0:	1885c83a 	sub	r2,r3,r2
   113e4:	f800283a 	ret
   113e8:	01400404 	movi	r5,16
   113ec:	00804034 	movhi	r2,256
   113f0:	10bfffc4 	addi	r2,r2,-1
   113f4:	2807883a 	mov	r3,r5
   113f8:	113ff22e 	bgeu	r2,r4,113c4 <__clzsi2+0x1c>
   113fc:	01400604 	movi	r5,24
   11400:	2807883a 	mov	r3,r5
   11404:	20c6d83a 	srl	r3,r4,r3
   11408:	00800074 	movhi	r2,1
   1140c:	10949d04 	addi	r2,r2,21108
   11410:	1887883a 	add	r3,r3,r2
   11414:	18800003 	ldbu	r2,0(r3)
   11418:	00c00804 	movi	r3,32
   1141c:	2885883a 	add	r2,r5,r2
   11420:	1885c83a 	sub	r2,r3,r2
   11424:	f800283a 	ret

00011428 <__unpack_f>:
   11428:	21800017 	ldw	r6,0(r4)
   1142c:	00c02034 	movhi	r3,128
   11430:	18ffffc4 	addi	r3,r3,-1
   11434:	3004d5fa 	srli	r2,r6,23
   11438:	3008d7fa 	srli	r4,r6,31
   1143c:	30ce703a 	and	r7,r6,r3
   11440:	10c03fcc 	andi	r3,r2,255
   11444:	29000115 	stw	r4,4(r5)
   11448:	1800131e 	bne	r3,zero,11498 <__unpack_f+0x70>
   1144c:	38000f26 	beq	r7,zero,1148c <__unpack_f+0x64>
   11450:	380691fa 	slli	r3,r7,7
   11454:	01bfe084 	movi	r6,-126
   11458:	008000c4 	movi	r2,3
   1145c:	01100034 	movhi	r4,16384
   11460:	213fffc4 	addi	r4,r4,-1
   11464:	28800015 	stw	r2,0(r5)
   11468:	29800215 	stw	r6,8(r5)
   1146c:	20c00536 	bltu	r4,r3,11484 <__unpack_f+0x5c>
   11470:	3005883a 	mov	r2,r6
   11474:	18c7883a 	add	r3,r3,r3
   11478:	10bfffc4 	addi	r2,r2,-1
   1147c:	20fffd2e 	bgeu	r4,r3,11474 <__unpack_f+0x4c>
   11480:	28800215 	stw	r2,8(r5)
   11484:	28c00315 	stw	r3,12(r5)
   11488:	f800283a 	ret
   1148c:	00800084 	movi	r2,2
   11490:	28800015 	stw	r2,0(r5)
   11494:	f800283a 	ret
   11498:	00803fc4 	movi	r2,255
   1149c:	18800826 	beq	r3,r2,114c0 <__unpack_f+0x98>
   114a0:	380491fa 	slli	r2,r7,7
   114a4:	18ffe044 	addi	r3,r3,-127
   114a8:	28c00215 	stw	r3,8(r5)
   114ac:	10900034 	orhi	r2,r2,16384
   114b0:	28800315 	stw	r2,12(r5)
   114b4:	008000c4 	movi	r2,3
   114b8:	28800015 	stw	r2,0(r5)
   114bc:	f800283a 	ret
   114c0:	3800031e 	bne	r7,zero,114d0 <__unpack_f+0xa8>
   114c4:	00800104 	movi	r2,4
   114c8:	28800015 	stw	r2,0(r5)
   114cc:	f800283a 	ret
   114d0:	3080042c 	andhi	r2,r6,16
   114d4:	10000426 	beq	r2,zero,114e8 <__unpack_f+0xc0>
   114d8:	00800044 	movi	r2,1
   114dc:	28800015 	stw	r2,0(r5)
   114e0:	29c00315 	stw	r7,12(r5)
   114e4:	f800283a 	ret
   114e8:	28000015 	stw	zero,0(r5)
   114ec:	003ffc06 	br	114e0 <__unpack_f+0xb8>

000114f0 <__fpcmp_parts_f>:
   114f0:	21800017 	ldw	r6,0(r4)
   114f4:	00c00044 	movi	r3,1
   114f8:	19800a2e 	bgeu	r3,r6,11524 <__fpcmp_parts_f+0x34>
   114fc:	28800017 	ldw	r2,0(r5)
   11500:	1880082e 	bgeu	r3,r2,11524 <__fpcmp_parts_f+0x34>
   11504:	00c00104 	movi	r3,4
   11508:	30c01e26 	beq	r6,r3,11584 <__fpcmp_parts_f+0x94>
   1150c:	10c01a26 	beq	r2,r3,11578 <__fpcmp_parts_f+0x88>
   11510:	00c00084 	movi	r3,2
   11514:	30c00526 	beq	r6,r3,1152c <__fpcmp_parts_f+0x3c>
   11518:	10c0071e 	bne	r2,r3,11538 <__fpcmp_parts_f+0x48>
   1151c:	20800117 	ldw	r2,4(r4)
   11520:	1000091e 	bne	r2,zero,11548 <__fpcmp_parts_f+0x58>
   11524:	00800044 	movi	r2,1
   11528:	f800283a 	ret
   1152c:	10c0121e 	bne	r2,r3,11578 <__fpcmp_parts_f+0x88>
   11530:	0005883a 	mov	r2,zero
   11534:	f800283a 	ret
   11538:	20c00117 	ldw	r3,4(r4)
   1153c:	28800117 	ldw	r2,4(r5)
   11540:	18800326 	beq	r3,r2,11550 <__fpcmp_parts_f+0x60>
   11544:	183ff726 	beq	r3,zero,11524 <__fpcmp_parts_f+0x34>
   11548:	00bfffc4 	movi	r2,-1
   1154c:	f800283a 	ret
   11550:	21800217 	ldw	r6,8(r4)
   11554:	28800217 	ldw	r2,8(r5)
   11558:	11bffa16 	blt	r2,r6,11544 <__fpcmp_parts_f+0x54>
   1155c:	30800416 	blt	r6,r2,11570 <__fpcmp_parts_f+0x80>
   11560:	21000317 	ldw	r4,12(r4)
   11564:	29400317 	ldw	r5,12(r5)
   11568:	293ff636 	bltu	r5,r4,11544 <__fpcmp_parts_f+0x54>
   1156c:	217ff02e 	bgeu	r4,r5,11530 <__fpcmp_parts_f+0x40>
   11570:	183fec1e 	bne	r3,zero,11524 <__fpcmp_parts_f+0x34>
   11574:	003ff406 	br	11548 <__fpcmp_parts_f+0x58>
   11578:	28800117 	ldw	r2,4(r5)
   1157c:	103fe91e 	bne	r2,zero,11524 <__fpcmp_parts_f+0x34>
   11580:	003ff106 	br	11548 <__fpcmp_parts_f+0x58>
   11584:	11bfe51e 	bne	r2,r6,1151c <__fpcmp_parts_f+0x2c>
   11588:	28c00117 	ldw	r3,4(r5)
   1158c:	20800117 	ldw	r2,4(r4)
   11590:	1885c83a 	sub	r2,r3,r2
   11594:	f800283a 	ret

00011598 <__make_fp>:
   11598:	defffb04 	addi	sp,sp,-20
   1159c:	d9000015 	stw	r4,0(sp)
   115a0:	d809883a 	mov	r4,sp
   115a4:	dfc00415 	stw	ra,16(sp)
   115a8:	d9400115 	stw	r5,4(sp)
   115ac:	d9800215 	stw	r6,8(sp)
   115b0:	d9c00315 	stw	r7,12(sp)
   115b4:	0011ad80 	call	11ad8 <__pack_f>
   115b8:	dfc00417 	ldw	ra,16(sp)
   115bc:	dec00504 	addi	sp,sp,20
   115c0:	f800283a 	ret

000115c4 <__pack_d>:
   115c4:	20c00017 	ldw	r3,0(r4)
   115c8:	defffd04 	addi	sp,sp,-12
   115cc:	dc000015 	stw	r16,0(sp)
   115d0:	dc800215 	stw	r18,8(sp)
   115d4:	dc400115 	stw	r17,4(sp)
   115d8:	00800044 	movi	r2,1
   115dc:	22000317 	ldw	r8,12(r4)
   115e0:	001f883a 	mov	r15,zero
   115e4:	22400417 	ldw	r9,16(r4)
   115e8:	24000117 	ldw	r16,4(r4)
   115ec:	10c0552e 	bgeu	r2,r3,11744 <__pack_d+0x180>
   115f0:	00800104 	movi	r2,4
   115f4:	18804f26 	beq	r3,r2,11734 <__pack_d+0x170>
   115f8:	00800084 	movi	r2,2
   115fc:	18800226 	beq	r3,r2,11608 <__pack_d+0x44>
   11600:	4244b03a 	or	r2,r8,r9
   11604:	10001a1e 	bne	r2,zero,11670 <__pack_d+0xac>
   11608:	000d883a 	mov	r6,zero
   1160c:	000f883a 	mov	r7,zero
   11610:	0011883a 	mov	r8,zero
   11614:	00800434 	movhi	r2,16
   11618:	10bfffc4 	addi	r2,r2,-1
   1161c:	301d883a 	mov	r14,r6
   11620:	3884703a 	and	r2,r7,r2
   11624:	400a953a 	slli	r5,r8,20
   11628:	79bffc2c 	andhi	r6,r15,65520
   1162c:	308cb03a 	or	r6,r6,r2
   11630:	00e00434 	movhi	r3,32784
   11634:	18ffffc4 	addi	r3,r3,-1
   11638:	800497fa 	slli	r2,r16,31
   1163c:	30c6703a 	and	r3,r6,r3
   11640:	1946b03a 	or	r3,r3,r5
   11644:	01600034 	movhi	r5,32768
   11648:	297fffc4 	addi	r5,r5,-1
   1164c:	194a703a 	and	r5,r3,r5
   11650:	288ab03a 	or	r5,r5,r2
   11654:	2807883a 	mov	r3,r5
   11658:	7005883a 	mov	r2,r14
   1165c:	dc800217 	ldw	r18,8(sp)
   11660:	dc400117 	ldw	r17,4(sp)
   11664:	dc000017 	ldw	r16,0(sp)
   11668:	dec00304 	addi	sp,sp,12
   1166c:	f800283a 	ret
   11670:	21000217 	ldw	r4,8(r4)
   11674:	00bf0084 	movi	r2,-1022
   11678:	20803f16 	blt	r4,r2,11778 <__pack_d+0x1b4>
   1167c:	0080ffc4 	movi	r2,1023
   11680:	11002c16 	blt	r2,r4,11734 <__pack_d+0x170>
   11684:	00803fc4 	movi	r2,255
   11688:	408c703a 	and	r6,r8,r2
   1168c:	00802004 	movi	r2,128
   11690:	0007883a 	mov	r3,zero
   11694:	000f883a 	mov	r7,zero
   11698:	2280ffc4 	addi	r10,r4,1023
   1169c:	30801e26 	beq	r6,r2,11718 <__pack_d+0x154>
   116a0:	00801fc4 	movi	r2,127
   116a4:	4089883a 	add	r4,r8,r2
   116a8:	220d803a 	cmpltu	r6,r4,r8
   116ac:	324d883a 	add	r6,r6,r9
   116b0:	2011883a 	mov	r8,r4
   116b4:	3013883a 	mov	r9,r6
   116b8:	00880034 	movhi	r2,8192
   116bc:	10bfffc4 	addi	r2,r2,-1
   116c0:	12400d36 	bltu	r2,r9,116f8 <__pack_d+0x134>
   116c4:	4804963a 	slli	r2,r9,24
   116c8:	400cd23a 	srli	r6,r8,8
   116cc:	480ed23a 	srli	r7,r9,8
   116d0:	013fffc4 	movi	r4,-1
   116d4:	118cb03a 	or	r6,r2,r6
   116d8:	01400434 	movhi	r5,16
   116dc:	297fffc4 	addi	r5,r5,-1
   116e0:	3104703a 	and	r2,r6,r4
   116e4:	3946703a 	and	r3,r7,r5
   116e8:	5201ffcc 	andi	r8,r10,2047
   116ec:	100d883a 	mov	r6,r2
   116f0:	180f883a 	mov	r7,r3
   116f4:	003fc706 	br	11614 <__pack_d+0x50>
   116f8:	480897fa 	slli	r4,r9,31
   116fc:	4004d07a 	srli	r2,r8,1
   11700:	4806d07a 	srli	r3,r9,1
   11704:	52800044 	addi	r10,r10,1
   11708:	2084b03a 	or	r2,r4,r2
   1170c:	1011883a 	mov	r8,r2
   11710:	1813883a 	mov	r9,r3
   11714:	003feb06 	br	116c4 <__pack_d+0x100>
   11718:	383fe11e 	bne	r7,zero,116a0 <__pack_d+0xdc>
   1171c:	01004004 	movi	r4,256
   11720:	4104703a 	and	r2,r8,r4
   11724:	10c4b03a 	or	r2,r2,r3
   11728:	103fe326 	beq	r2,zero,116b8 <__pack_d+0xf4>
   1172c:	3005883a 	mov	r2,r6
   11730:	003fdc06 	br	116a4 <__pack_d+0xe0>
   11734:	000d883a 	mov	r6,zero
   11738:	000f883a 	mov	r7,zero
   1173c:	0201ffc4 	movi	r8,2047
   11740:	003fb406 	br	11614 <__pack_d+0x50>
   11744:	0005883a 	mov	r2,zero
   11748:	00c00234 	movhi	r3,8
   1174c:	408cb03a 	or	r6,r8,r2
   11750:	48ceb03a 	or	r7,r9,r3
   11754:	013fffc4 	movi	r4,-1
   11758:	01400434 	movhi	r5,16
   1175c:	297fffc4 	addi	r5,r5,-1
   11760:	3104703a 	and	r2,r6,r4
   11764:	3946703a 	and	r3,r7,r5
   11768:	100d883a 	mov	r6,r2
   1176c:	180f883a 	mov	r7,r3
   11770:	0201ffc4 	movi	r8,2047
   11774:	003fa706 	br	11614 <__pack_d+0x50>
   11778:	1109c83a 	sub	r4,r2,r4
   1177c:	00800e04 	movi	r2,56
   11780:	11004316 	blt	r2,r4,11890 <__pack_d+0x2cc>
   11784:	21fff804 	addi	r7,r4,-32
   11788:	38004516 	blt	r7,zero,118a0 <__pack_d+0x2dc>
   1178c:	49d8d83a 	srl	r12,r9,r7
   11790:	001b883a 	mov	r13,zero
   11794:	0023883a 	mov	r17,zero
   11798:	01400044 	movi	r5,1
   1179c:	0025883a 	mov	r18,zero
   117a0:	38004716 	blt	r7,zero,118c0 <__pack_d+0x2fc>
   117a4:	29d6983a 	sll	r11,r5,r7
   117a8:	0015883a 	mov	r10,zero
   117ac:	00bfffc4 	movi	r2,-1
   117b0:	5089883a 	add	r4,r10,r2
   117b4:	588b883a 	add	r5,r11,r2
   117b8:	228d803a 	cmpltu	r6,r4,r10
   117bc:	314b883a 	add	r5,r6,r5
   117c0:	4104703a 	and	r2,r8,r4
   117c4:	4946703a 	and	r3,r9,r5
   117c8:	10c4b03a 	or	r2,r2,r3
   117cc:	10000226 	beq	r2,zero,117d8 <__pack_d+0x214>
   117d0:	04400044 	movi	r17,1
   117d4:	0025883a 	mov	r18,zero
   117d8:	00803fc4 	movi	r2,255
   117dc:	644eb03a 	or	r7,r12,r17
   117e0:	3892703a 	and	r9,r7,r2
   117e4:	00802004 	movi	r2,128
   117e8:	6c90b03a 	or	r8,r13,r18
   117ec:	0015883a 	mov	r10,zero
   117f0:	48801626 	beq	r9,r2,1184c <__pack_d+0x288>
   117f4:	01001fc4 	movi	r4,127
   117f8:	3905883a 	add	r2,r7,r4
   117fc:	11cd803a 	cmpltu	r6,r2,r7
   11800:	320d883a 	add	r6,r6,r8
   11804:	100f883a 	mov	r7,r2
   11808:	00840034 	movhi	r2,4096
   1180c:	10bfffc4 	addi	r2,r2,-1
   11810:	3011883a 	mov	r8,r6
   11814:	0007883a 	mov	r3,zero
   11818:	11801b36 	bltu	r2,r6,11888 <__pack_d+0x2c4>
   1181c:	4004963a 	slli	r2,r8,24
   11820:	3808d23a 	srli	r4,r7,8
   11824:	400ad23a 	srli	r5,r8,8
   11828:	1813883a 	mov	r9,r3
   1182c:	1108b03a 	or	r4,r2,r4
   11830:	00bfffc4 	movi	r2,-1
   11834:	00c00434 	movhi	r3,16
   11838:	18ffffc4 	addi	r3,r3,-1
   1183c:	208c703a 	and	r6,r4,r2
   11840:	28ce703a 	and	r7,r5,r3
   11844:	4a01ffcc 	andi	r8,r9,2047
   11848:	003f7206 	br	11614 <__pack_d+0x50>
   1184c:	503fe91e 	bne	r10,zero,117f4 <__pack_d+0x230>
   11850:	01004004 	movi	r4,256
   11854:	3904703a 	and	r2,r7,r4
   11858:	0007883a 	mov	r3,zero
   1185c:	10c4b03a 	or	r2,r2,r3
   11860:	10000626 	beq	r2,zero,1187c <__pack_d+0x2b8>
   11864:	3a45883a 	add	r2,r7,r9
   11868:	11cd803a 	cmpltu	r6,r2,r7
   1186c:	320d883a 	add	r6,r6,r8
   11870:	100f883a 	mov	r7,r2
   11874:	3011883a 	mov	r8,r6
   11878:	0007883a 	mov	r3,zero
   1187c:	00840034 	movhi	r2,4096
   11880:	10bfffc4 	addi	r2,r2,-1
   11884:	123fe52e 	bgeu	r2,r8,1181c <__pack_d+0x258>
   11888:	00c00044 	movi	r3,1
   1188c:	003fe306 	br	1181c <__pack_d+0x258>
   11890:	0009883a 	mov	r4,zero
   11894:	0013883a 	mov	r9,zero
   11898:	000b883a 	mov	r5,zero
   1189c:	003fe406 	br	11830 <__pack_d+0x26c>
   118a0:	4a47883a 	add	r3,r9,r9
   118a4:	008007c4 	movi	r2,31
   118a8:	1105c83a 	sub	r2,r2,r4
   118ac:	1886983a 	sll	r3,r3,r2
   118b0:	4118d83a 	srl	r12,r8,r4
   118b4:	491ad83a 	srl	r13,r9,r4
   118b8:	1b18b03a 	or	r12,r3,r12
   118bc:	003fb506 	br	11794 <__pack_d+0x1d0>
   118c0:	2806d07a 	srli	r3,r5,1
   118c4:	008007c4 	movi	r2,31
   118c8:	1105c83a 	sub	r2,r2,r4
   118cc:	1896d83a 	srl	r11,r3,r2
   118d0:	2914983a 	sll	r10,r5,r4
   118d4:	003fb506 	br	117ac <__pack_d+0x1e8>

000118d8 <__unpack_d>:
   118d8:	20c00117 	ldw	r3,4(r4)
   118dc:	22400017 	ldw	r9,0(r4)
   118e0:	00800434 	movhi	r2,16
   118e4:	10bfffc4 	addi	r2,r2,-1
   118e8:	1808d53a 	srli	r4,r3,20
   118ec:	180cd7fa 	srli	r6,r3,31
   118f0:	1894703a 	and	r10,r3,r2
   118f4:	2201ffcc 	andi	r8,r4,2047
   118f8:	281b883a 	mov	r13,r5
   118fc:	4817883a 	mov	r11,r9
   11900:	29800115 	stw	r6,4(r5)
   11904:	5019883a 	mov	r12,r10
   11908:	40001e1e 	bne	r8,zero,11984 <__unpack_d+0xac>
   1190c:	4a84b03a 	or	r2,r9,r10
   11910:	10001926 	beq	r2,zero,11978 <__unpack_d+0xa0>
   11914:	4804d63a 	srli	r2,r9,24
   11918:	500c923a 	slli	r6,r10,8
   1191c:	013f0084 	movi	r4,-1022
   11920:	00c40034 	movhi	r3,4096
   11924:	18ffffc4 	addi	r3,r3,-1
   11928:	118cb03a 	or	r6,r2,r6
   1192c:	008000c4 	movi	r2,3
   11930:	480a923a 	slli	r5,r9,8
   11934:	68800015 	stw	r2,0(r13)
   11938:	69000215 	stw	r4,8(r13)
   1193c:	19800b36 	bltu	r3,r6,1196c <__unpack_d+0x94>
   11940:	200f883a 	mov	r7,r4
   11944:	1811883a 	mov	r8,r3
   11948:	2945883a 	add	r2,r5,r5
   1194c:	1149803a 	cmpltu	r4,r2,r5
   11950:	3187883a 	add	r3,r6,r6
   11954:	20c9883a 	add	r4,r4,r3
   11958:	100b883a 	mov	r5,r2
   1195c:	200d883a 	mov	r6,r4
   11960:	39ffffc4 	addi	r7,r7,-1
   11964:	413ff82e 	bgeu	r8,r4,11948 <__unpack_d+0x70>
   11968:	69c00215 	stw	r7,8(r13)
   1196c:	69800415 	stw	r6,16(r13)
   11970:	69400315 	stw	r5,12(r13)
   11974:	f800283a 	ret
   11978:	00800084 	movi	r2,2
   1197c:	28800015 	stw	r2,0(r5)
   11980:	f800283a 	ret
   11984:	0081ffc4 	movi	r2,2047
   11988:	40800f26 	beq	r8,r2,119c8 <__unpack_d+0xf0>
   1198c:	480cd63a 	srli	r6,r9,24
   11990:	5006923a 	slli	r3,r10,8
   11994:	4804923a 	slli	r2,r9,8
   11998:	0009883a 	mov	r4,zero
   1199c:	30c6b03a 	or	r3,r6,r3
   119a0:	01440034 	movhi	r5,4096
   119a4:	110cb03a 	or	r6,r2,r4
   119a8:	423f0044 	addi	r8,r8,-1023
   119ac:	194eb03a 	or	r7,r3,r5
   119b0:	008000c4 	movi	r2,3
   119b4:	69c00415 	stw	r7,16(r13)
   119b8:	6a000215 	stw	r8,8(r13)
   119bc:	68800015 	stw	r2,0(r13)
   119c0:	69800315 	stw	r6,12(r13)
   119c4:	f800283a 	ret
   119c8:	4a84b03a 	or	r2,r9,r10
   119cc:	1000031e 	bne	r2,zero,119dc <__unpack_d+0x104>
   119d0:	00800104 	movi	r2,4
   119d4:	28800015 	stw	r2,0(r5)
   119d8:	f800283a 	ret
   119dc:	0009883a 	mov	r4,zero
   119e0:	01400234 	movhi	r5,8
   119e4:	4904703a 	and	r2,r9,r4
   119e8:	5146703a 	and	r3,r10,r5
   119ec:	10c4b03a 	or	r2,r2,r3
   119f0:	10000526 	beq	r2,zero,11a08 <__unpack_d+0x130>
   119f4:	00800044 	movi	r2,1
   119f8:	68800015 	stw	r2,0(r13)
   119fc:	6b000415 	stw	r12,16(r13)
   11a00:	6ac00315 	stw	r11,12(r13)
   11a04:	f800283a 	ret
   11a08:	68000015 	stw	zero,0(r13)
   11a0c:	003ffb06 	br	119fc <__unpack_d+0x124>

00011a10 <__fpcmp_parts_d>:
   11a10:	21800017 	ldw	r6,0(r4)
   11a14:	00c00044 	movi	r3,1
   11a18:	19800a2e 	bgeu	r3,r6,11a44 <__fpcmp_parts_d+0x34>
   11a1c:	28800017 	ldw	r2,0(r5)
   11a20:	1880082e 	bgeu	r3,r2,11a44 <__fpcmp_parts_d+0x34>
   11a24:	00c00104 	movi	r3,4
   11a28:	30c02626 	beq	r6,r3,11ac4 <__fpcmp_parts_d+0xb4>
   11a2c:	10c02226 	beq	r2,r3,11ab8 <__fpcmp_parts_d+0xa8>
   11a30:	00c00084 	movi	r3,2
   11a34:	30c00526 	beq	r6,r3,11a4c <__fpcmp_parts_d+0x3c>
   11a38:	10c0071e 	bne	r2,r3,11a58 <__fpcmp_parts_d+0x48>
   11a3c:	20800117 	ldw	r2,4(r4)
   11a40:	1000091e 	bne	r2,zero,11a68 <__fpcmp_parts_d+0x58>
   11a44:	00800044 	movi	r2,1
   11a48:	f800283a 	ret
   11a4c:	10c01a1e 	bne	r2,r3,11ab8 <__fpcmp_parts_d+0xa8>
   11a50:	0005883a 	mov	r2,zero
   11a54:	f800283a 	ret
   11a58:	22000117 	ldw	r8,4(r4)
   11a5c:	28800117 	ldw	r2,4(r5)
   11a60:	40800326 	beq	r8,r2,11a70 <__fpcmp_parts_d+0x60>
   11a64:	403ff726 	beq	r8,zero,11a44 <__fpcmp_parts_d+0x34>
   11a68:	00bfffc4 	movi	r2,-1
   11a6c:	f800283a 	ret
   11a70:	20c00217 	ldw	r3,8(r4)
   11a74:	28800217 	ldw	r2,8(r5)
   11a78:	10fffa16 	blt	r2,r3,11a64 <__fpcmp_parts_d+0x54>
   11a7c:	18800916 	blt	r3,r2,11aa4 <__fpcmp_parts_d+0x94>
   11a80:	21c00417 	ldw	r7,16(r4)
   11a84:	28c00417 	ldw	r3,16(r5)
   11a88:	21800317 	ldw	r6,12(r4)
   11a8c:	28800317 	ldw	r2,12(r5)
   11a90:	19fff436 	bltu	r3,r7,11a64 <__fpcmp_parts_d+0x54>
   11a94:	38c00526 	beq	r7,r3,11aac <__fpcmp_parts_d+0x9c>
   11a98:	38c00236 	bltu	r7,r3,11aa4 <__fpcmp_parts_d+0x94>
   11a9c:	19ffec1e 	bne	r3,r7,11a50 <__fpcmp_parts_d+0x40>
   11aa0:	30bfeb2e 	bgeu	r6,r2,11a50 <__fpcmp_parts_d+0x40>
   11aa4:	403fe71e 	bne	r8,zero,11a44 <__fpcmp_parts_d+0x34>
   11aa8:	003fef06 	br	11a68 <__fpcmp_parts_d+0x58>
   11aac:	11bffa2e 	bgeu	r2,r6,11a98 <__fpcmp_parts_d+0x88>
   11ab0:	403fe426 	beq	r8,zero,11a44 <__fpcmp_parts_d+0x34>
   11ab4:	003fec06 	br	11a68 <__fpcmp_parts_d+0x58>
   11ab8:	28800117 	ldw	r2,4(r5)
   11abc:	103fe11e 	bne	r2,zero,11a44 <__fpcmp_parts_d+0x34>
   11ac0:	003fe906 	br	11a68 <__fpcmp_parts_d+0x58>
   11ac4:	11bfdd1e 	bne	r2,r6,11a3c <__fpcmp_parts_d+0x2c>
   11ac8:	28c00117 	ldw	r3,4(r5)
   11acc:	20800117 	ldw	r2,4(r4)
   11ad0:	1885c83a 	sub	r2,r3,r2
   11ad4:	f800283a 	ret

00011ad8 <__pack_f>:
   11ad8:	20c00017 	ldw	r3,0(r4)
   11adc:	01c00044 	movi	r7,1
   11ae0:	21800317 	ldw	r6,12(r4)
   11ae4:	21400117 	ldw	r5,4(r4)
   11ae8:	38c02d2e 	bgeu	r7,r3,11ba0 <__pack_f+0xc8>
   11aec:	00800104 	movi	r2,4
   11af0:	18802826 	beq	r3,r2,11b94 <__pack_f+0xbc>
   11af4:	00800084 	movi	r2,2
   11af8:	18800126 	beq	r3,r2,11b00 <__pack_f+0x28>
   11afc:	3000101e 	bne	r6,zero,11b40 <__pack_f+0x68>
   11b00:	000d883a 	mov	r6,zero
   11b04:	0007883a 	mov	r3,zero
   11b08:	19003fcc 	andi	r4,r3,255
   11b0c:	200895fa 	slli	r4,r4,23
   11b10:	00c02034 	movhi	r3,128
   11b14:	18ffffc4 	addi	r3,r3,-1
   11b18:	30c6703a 	and	r3,r6,r3
   11b1c:	10a0002c 	andhi	r2,r2,32768
   11b20:	10c4b03a 	or	r2,r2,r3
   11b24:	280a97fa 	slli	r5,r5,31
   11b28:	1104b03a 	or	r2,r2,r4
   11b2c:	00e00034 	movhi	r3,32768
   11b30:	18ffffc4 	addi	r3,r3,-1
   11b34:	10c4703a 	and	r2,r2,r3
   11b38:	1144b03a 	or	r2,r2,r5
   11b3c:	f800283a 	ret
   11b40:	21000217 	ldw	r4,8(r4)
   11b44:	00bfe084 	movi	r2,-126
   11b48:	20801b16 	blt	r4,r2,11bb8 <__pack_f+0xe0>
   11b4c:	00801fc4 	movi	r2,127
   11b50:	11001016 	blt	r2,r4,11b94 <__pack_f+0xbc>
   11b54:	308e703a 	and	r7,r6,r2
   11b58:	2087883a 	add	r3,r4,r2
   11b5c:	00801004 	movi	r2,64
   11b60:	38800526 	beq	r7,r2,11b78 <__pack_f+0xa0>
   11b64:	31800fc4 	addi	r6,r6,63
   11b68:	30000716 	blt	r6,zero,11b88 <__pack_f+0xb0>
   11b6c:	300490ba 	slli	r2,r6,2
   11b70:	100cd27a 	srli	r6,r2,9
   11b74:	003fe406 	br	11b08 <__pack_f+0x30>
   11b78:	3080200c 	andi	r2,r6,128
   11b7c:	103ffa26 	beq	r2,zero,11b68 <__pack_f+0x90>
   11b80:	31cd883a 	add	r6,r6,r7
   11b84:	003ff806 	br	11b68 <__pack_f+0x90>
   11b88:	300cd07a 	srli	r6,r6,1
   11b8c:	18c00044 	addi	r3,r3,1
   11b90:	003ff606 	br	11b6c <__pack_f+0x94>
   11b94:	000d883a 	mov	r6,zero
   11b98:	00ffffc4 	movi	r3,-1
   11b9c:	003fda06 	br	11b08 <__pack_f+0x30>
   11ba0:	31800434 	orhi	r6,r6,16
   11ba4:	00802034 	movhi	r2,128
   11ba8:	10bfffc4 	addi	r2,r2,-1
   11bac:	308c703a 	and	r6,r6,r2
   11bb0:	00ffffc4 	movi	r3,-1
   11bb4:	003fd406 	br	11b08 <__pack_f+0x30>
   11bb8:	1109c83a 	sub	r4,r2,r4
   11bbc:	00800644 	movi	r2,25
   11bc0:	11001216 	blt	r2,r4,11c0c <__pack_f+0x134>
   11bc4:	3904983a 	sll	r2,r7,r4
   11bc8:	3106d83a 	srl	r3,r6,r4
   11bcc:	10bfffc4 	addi	r2,r2,-1
   11bd0:	3084703a 	and	r2,r6,r2
   11bd4:	1004c03a 	cmpne	r2,r2,zero
   11bd8:	1886b03a 	or	r3,r3,r2
   11bdc:	19001fcc 	andi	r4,r3,127
   11be0:	00801004 	movi	r2,64
   11be4:	20800c26 	beq	r4,r2,11c18 <__pack_f+0x140>
   11be8:	18c00fc4 	addi	r3,r3,63
   11bec:	00900034 	movhi	r2,16384
   11bf0:	10bfffc4 	addi	r2,r2,-1
   11bf4:	180cd1fa 	srli	r6,r3,7
   11bf8:	10c7803a 	cmpltu	r3,r2,r3
   11bfc:	00802034 	movhi	r2,128
   11c00:	10bfffc4 	addi	r2,r2,-1
   11c04:	308c703a 	and	r6,r6,r2
   11c08:	003fbf06 	br	11b08 <__pack_f+0x30>
   11c0c:	0007883a 	mov	r3,zero
   11c10:	000d883a 	mov	r6,zero
   11c14:	003ff906 	br	11bfc <__pack_f+0x124>
   11c18:	1880200c 	andi	r2,r3,128
   11c1c:	10000126 	beq	r2,zero,11c24 <__pack_f+0x14c>
   11c20:	1907883a 	add	r3,r3,r4
   11c24:	180cd1fa 	srli	r6,r3,7
   11c28:	00900034 	movhi	r2,16384
   11c2c:	10bfffc4 	addi	r2,r2,-1
   11c30:	10c7803a 	cmpltu	r3,r2,r3
   11c34:	003ff106 	br	11bfc <__pack_f+0x124>

00011c38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11c38:	defff804 	addi	sp,sp,-32
   11c3c:	dfc00715 	stw	ra,28(sp)
   11c40:	df000615 	stw	fp,24(sp)
   11c44:	df000604 	addi	fp,sp,24
   11c48:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   11c4c:	e0bffc17 	ldw	r2,-16(fp)
   11c50:	1004803a 	cmplt	r2,r2,zero
   11c54:	1000081e 	bne	r2,zero,11c78 <close+0x40>
   11c58:	e0bffc17 	ldw	r2,-16(fp)
   11c5c:	10800324 	muli	r2,r2,12
   11c60:	1007883a 	mov	r3,r2
   11c64:	00800074 	movhi	r2,1
   11c68:	10971e04 	addi	r2,r2,23672
   11c6c:	1887883a 	add	r3,r3,r2
   11c70:	e0ffff15 	stw	r3,-4(fp)
   11c74:	00000106 	br	11c7c <close+0x44>
   11c78:	e03fff15 	stw	zero,-4(fp)
   11c7c:	e0bfff17 	ldw	r2,-4(fp)
   11c80:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   11c84:	e0bffb17 	ldw	r2,-20(fp)
   11c88:	1005003a 	cmpeq	r2,r2,zero
   11c8c:	10001d1e 	bne	r2,zero,11d04 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   11c90:	e0bffb17 	ldw	r2,-20(fp)
   11c94:	10800017 	ldw	r2,0(r2)
   11c98:	10800417 	ldw	r2,16(r2)
   11c9c:	1005003a 	cmpeq	r2,r2,zero
   11ca0:	1000071e 	bne	r2,zero,11cc0 <close+0x88>
   11ca4:	e0bffb17 	ldw	r2,-20(fp)
   11ca8:	10800017 	ldw	r2,0(r2)
   11cac:	10800417 	ldw	r2,16(r2)
   11cb0:	e13ffb17 	ldw	r4,-20(fp)
   11cb4:	103ee83a 	callr	r2
   11cb8:	e0bffe15 	stw	r2,-8(fp)
   11cbc:	00000106 	br	11cc4 <close+0x8c>
   11cc0:	e03ffe15 	stw	zero,-8(fp)
   11cc4:	e0bffe17 	ldw	r2,-8(fp)
   11cc8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   11ccc:	e13ffc17 	ldw	r4,-16(fp)
   11cd0:	001247c0 	call	1247c <alt_release_fd>
    if (rval < 0)
   11cd4:	e0bffa17 	ldw	r2,-24(fp)
   11cd8:	1004403a 	cmpge	r2,r2,zero
   11cdc:	1000071e 	bne	r2,zero,11cfc <close+0xc4>
    {
      ALT_ERRNO = -rval;
   11ce0:	0011d340 	call	11d34 <alt_get_errno>
   11ce4:	e0fffa17 	ldw	r3,-24(fp)
   11ce8:	00c7c83a 	sub	r3,zero,r3
   11cec:	10c00015 	stw	r3,0(r2)
      return -1;
   11cf0:	00bfffc4 	movi	r2,-1
   11cf4:	e0bffd15 	stw	r2,-12(fp)
   11cf8:	00000806 	br	11d1c <close+0xe4>
    }
    return 0;
   11cfc:	e03ffd15 	stw	zero,-12(fp)
   11d00:	00000606 	br	11d1c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11d04:	0011d340 	call	11d34 <alt_get_errno>
   11d08:	1007883a 	mov	r3,r2
   11d0c:	00801444 	movi	r2,81
   11d10:	18800015 	stw	r2,0(r3)
    return -1;
   11d14:	00bfffc4 	movi	r2,-1
   11d18:	e0bffd15 	stw	r2,-12(fp)
   11d1c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11d20:	e037883a 	mov	sp,fp
   11d24:	dfc00117 	ldw	ra,4(sp)
   11d28:	df000017 	ldw	fp,0(sp)
   11d2c:	dec00204 	addi	sp,sp,8
   11d30:	f800283a 	ret

00011d34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11d34:	defffd04 	addi	sp,sp,-12
   11d38:	dfc00215 	stw	ra,8(sp)
   11d3c:	df000115 	stw	fp,4(sp)
   11d40:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11d44:	00800074 	movhi	r2,1
   11d48:	109ba204 	addi	r2,r2,28296
   11d4c:	10800017 	ldw	r2,0(r2)
   11d50:	1005003a 	cmpeq	r2,r2,zero
   11d54:	1000061e 	bne	r2,zero,11d70 <alt_get_errno+0x3c>
   11d58:	00800074 	movhi	r2,1
   11d5c:	109ba204 	addi	r2,r2,28296
   11d60:	10800017 	ldw	r2,0(r2)
   11d64:	103ee83a 	callr	r2
   11d68:	e0bfff15 	stw	r2,-4(fp)
   11d6c:	00000306 	br	11d7c <alt_get_errno+0x48>
   11d70:	008000b4 	movhi	r2,2
   11d74:	10a27104 	addi	r2,r2,-30268
   11d78:	e0bfff15 	stw	r2,-4(fp)
   11d7c:	e0bfff17 	ldw	r2,-4(fp)
}
   11d80:	e037883a 	mov	sp,fp
   11d84:	dfc00117 	ldw	ra,4(sp)
   11d88:	df000017 	ldw	fp,0(sp)
   11d8c:	dec00204 	addi	sp,sp,8
   11d90:	f800283a 	ret

00011d94 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11d94:	defffc04 	addi	sp,sp,-16
   11d98:	df000315 	stw	fp,12(sp)
   11d9c:	df000304 	addi	fp,sp,12
   11da0:	e13ffd15 	stw	r4,-12(fp)
   11da4:	e17ffe15 	stw	r5,-8(fp)
   11da8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11dac:	e0bfff17 	ldw	r2,-4(fp)
}
   11db0:	e037883a 	mov	sp,fp
   11db4:	df000017 	ldw	fp,0(sp)
   11db8:	dec00104 	addi	sp,sp,4
   11dbc:	f800283a 	ret

00011dc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11dc0:	defff904 	addi	sp,sp,-28
   11dc4:	dfc00615 	stw	ra,24(sp)
   11dc8:	df000515 	stw	fp,20(sp)
   11dcc:	df000504 	addi	fp,sp,20
   11dd0:	e13ffc15 	stw	r4,-16(fp)
   11dd4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11dd8:	e0bffc17 	ldw	r2,-16(fp)
   11ddc:	1004803a 	cmplt	r2,r2,zero
   11de0:	1000081e 	bne	r2,zero,11e04 <fstat+0x44>
   11de4:	e0bffc17 	ldw	r2,-16(fp)
   11de8:	10800324 	muli	r2,r2,12
   11dec:	1007883a 	mov	r3,r2
   11df0:	00800074 	movhi	r2,1
   11df4:	10971e04 	addi	r2,r2,23672
   11df8:	1887883a 	add	r3,r3,r2
   11dfc:	e0ffff15 	stw	r3,-4(fp)
   11e00:	00000106 	br	11e08 <fstat+0x48>
   11e04:	e03fff15 	stw	zero,-4(fp)
   11e08:	e0bfff17 	ldw	r2,-4(fp)
   11e0c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11e10:	e0bffb17 	ldw	r2,-20(fp)
   11e14:	1005003a 	cmpeq	r2,r2,zero
   11e18:	1000121e 	bne	r2,zero,11e64 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11e1c:	e0bffb17 	ldw	r2,-20(fp)
   11e20:	10800017 	ldw	r2,0(r2)
   11e24:	10800817 	ldw	r2,32(r2)
   11e28:	1005003a 	cmpeq	r2,r2,zero
   11e2c:	1000081e 	bne	r2,zero,11e50 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   11e30:	e0bffb17 	ldw	r2,-20(fp)
   11e34:	10800017 	ldw	r2,0(r2)
   11e38:	10800817 	ldw	r2,32(r2)
   11e3c:	e13ffb17 	ldw	r4,-20(fp)
   11e40:	e17ffd17 	ldw	r5,-12(fp)
   11e44:	103ee83a 	callr	r2
   11e48:	e0bffe15 	stw	r2,-8(fp)
   11e4c:	00000b06 	br	11e7c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11e50:	e0fffd17 	ldw	r3,-12(fp)
   11e54:	00880004 	movi	r2,8192
   11e58:	18800115 	stw	r2,4(r3)
      return 0;
   11e5c:	e03ffe15 	stw	zero,-8(fp)
   11e60:	00000606 	br	11e7c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11e64:	0011e940 	call	11e94 <alt_get_errno>
   11e68:	1007883a 	mov	r3,r2
   11e6c:	00801444 	movi	r2,81
   11e70:	18800015 	stw	r2,0(r3)
    return -1;
   11e74:	00bfffc4 	movi	r2,-1
   11e78:	e0bffe15 	stw	r2,-8(fp)
   11e7c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11e80:	e037883a 	mov	sp,fp
   11e84:	dfc00117 	ldw	ra,4(sp)
   11e88:	df000017 	ldw	fp,0(sp)
   11e8c:	dec00204 	addi	sp,sp,8
   11e90:	f800283a 	ret

00011e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11e94:	defffd04 	addi	sp,sp,-12
   11e98:	dfc00215 	stw	ra,8(sp)
   11e9c:	df000115 	stw	fp,4(sp)
   11ea0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11ea4:	00800074 	movhi	r2,1
   11ea8:	109ba204 	addi	r2,r2,28296
   11eac:	10800017 	ldw	r2,0(r2)
   11eb0:	1005003a 	cmpeq	r2,r2,zero
   11eb4:	1000061e 	bne	r2,zero,11ed0 <alt_get_errno+0x3c>
   11eb8:	00800074 	movhi	r2,1
   11ebc:	109ba204 	addi	r2,r2,28296
   11ec0:	10800017 	ldw	r2,0(r2)
   11ec4:	103ee83a 	callr	r2
   11ec8:	e0bfff15 	stw	r2,-4(fp)
   11ecc:	00000306 	br	11edc <alt_get_errno+0x48>
   11ed0:	008000b4 	movhi	r2,2
   11ed4:	10a27104 	addi	r2,r2,-30268
   11ed8:	e0bfff15 	stw	r2,-4(fp)
   11edc:	e0bfff17 	ldw	r2,-4(fp)
}
   11ee0:	e037883a 	mov	sp,fp
   11ee4:	dfc00117 	ldw	ra,4(sp)
   11ee8:	df000017 	ldw	fp,0(sp)
   11eec:	dec00204 	addi	sp,sp,8
   11ef0:	f800283a 	ret

00011ef4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11ef4:	deffeb04 	addi	sp,sp,-84
   11ef8:	dfc01415 	stw	ra,80(sp)
   11efc:	df001315 	stw	fp,76(sp)
   11f00:	df001304 	addi	fp,sp,76
   11f04:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11f08:	e0bffd17 	ldw	r2,-12(fp)
   11f0c:	1004803a 	cmplt	r2,r2,zero
   11f10:	1000081e 	bne	r2,zero,11f34 <isatty+0x40>
   11f14:	e0bffd17 	ldw	r2,-12(fp)
   11f18:	10800324 	muli	r2,r2,12
   11f1c:	1007883a 	mov	r3,r2
   11f20:	00800074 	movhi	r2,1
   11f24:	10971e04 	addi	r2,r2,23672
   11f28:	1887883a 	add	r3,r3,r2
   11f2c:	e0ffff15 	stw	r3,-4(fp)
   11f30:	00000106 	br	11f38 <isatty+0x44>
   11f34:	e03fff15 	stw	zero,-4(fp)
   11f38:	e0bfff17 	ldw	r2,-4(fp)
   11f3c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   11f40:	e0bfed17 	ldw	r2,-76(fp)
   11f44:	1005003a 	cmpeq	r2,r2,zero
   11f48:	10000f1e 	bne	r2,zero,11f88 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11f4c:	e0bfed17 	ldw	r2,-76(fp)
   11f50:	10800017 	ldw	r2,0(r2)
   11f54:	10800817 	ldw	r2,32(r2)
   11f58:	1004c03a 	cmpne	r2,r2,zero
   11f5c:	1000031e 	bne	r2,zero,11f6c <isatty+0x78>
    {
      return 1;
   11f60:	00800044 	movi	r2,1
   11f64:	e0bffe15 	stw	r2,-8(fp)
   11f68:	00000c06 	br	11f9c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11f6c:	e17fee04 	addi	r5,fp,-72
   11f70:	e13ffd17 	ldw	r4,-12(fp)
   11f74:	0011dc00 	call	11dc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11f78:	e0bfef17 	ldw	r2,-68(fp)
   11f7c:	10880020 	cmpeqi	r2,r2,8192
   11f80:	e0bffe15 	stw	r2,-8(fp)
   11f84:	00000506 	br	11f9c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11f88:	0011fb40 	call	11fb4 <alt_get_errno>
   11f8c:	1007883a 	mov	r3,r2
   11f90:	00801444 	movi	r2,81
   11f94:	18800015 	stw	r2,0(r3)
    return 0;
   11f98:	e03ffe15 	stw	zero,-8(fp)
   11f9c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11fa0:	e037883a 	mov	sp,fp
   11fa4:	dfc00117 	ldw	ra,4(sp)
   11fa8:	df000017 	ldw	fp,0(sp)
   11fac:	dec00204 	addi	sp,sp,8
   11fb0:	f800283a 	ret

00011fb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11fb4:	defffd04 	addi	sp,sp,-12
   11fb8:	dfc00215 	stw	ra,8(sp)
   11fbc:	df000115 	stw	fp,4(sp)
   11fc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11fc4:	00800074 	movhi	r2,1
   11fc8:	109ba204 	addi	r2,r2,28296
   11fcc:	10800017 	ldw	r2,0(r2)
   11fd0:	1005003a 	cmpeq	r2,r2,zero
   11fd4:	1000061e 	bne	r2,zero,11ff0 <alt_get_errno+0x3c>
   11fd8:	00800074 	movhi	r2,1
   11fdc:	109ba204 	addi	r2,r2,28296
   11fe0:	10800017 	ldw	r2,0(r2)
   11fe4:	103ee83a 	callr	r2
   11fe8:	e0bfff15 	stw	r2,-4(fp)
   11fec:	00000306 	br	11ffc <alt_get_errno+0x48>
   11ff0:	008000b4 	movhi	r2,2
   11ff4:	10a27104 	addi	r2,r2,-30268
   11ff8:	e0bfff15 	stw	r2,-4(fp)
   11ffc:	e0bfff17 	ldw	r2,-4(fp)
}
   12000:	e037883a 	mov	sp,fp
   12004:	dfc00117 	ldw	ra,4(sp)
   12008:	df000017 	ldw	fp,0(sp)
   1200c:	dec00204 	addi	sp,sp,8
   12010:	f800283a 	ret

00012014 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   12014:	defffe04 	addi	sp,sp,-8
   12018:	dfc00115 	stw	ra,4(sp)
   1201c:	df000015 	stw	fp,0(sp)
   12020:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   12024:	01000074 	movhi	r4,1
   12028:	211ba704 	addi	r4,r4,28316
   1202c:	01400074 	movhi	r5,1
   12030:	2954ea04 	addi	r5,r5,21416
   12034:	01800074 	movhi	r6,1
   12038:	319ba704 	addi	r6,r6,28316
   1203c:	00120940 	call	12094 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   12040:	01000034 	movhi	r4,0
   12044:	21000804 	addi	r4,r4,32
   12048:	01400034 	movhi	r5,0
   1204c:	29400804 	addi	r5,r5,32
   12050:	01800034 	movhi	r6,0
   12054:	31806d04 	addi	r6,r6,436
   12058:	00120940 	call	12094 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1205c:	01000074 	movhi	r4,1
   12060:	2111b204 	addi	r4,r4,18120
   12064:	01400074 	movhi	r5,1
   12068:	2951b204 	addi	r5,r5,18120
   1206c:	01800074 	movhi	r6,1
   12070:	3194ea04 	addi	r6,r6,21416
   12074:	00120940 	call	12094 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   12078:	00134e00 	call	134e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   1207c:	00137000 	call	13700 <alt_icache_flush_all>
}
   12080:	e037883a 	mov	sp,fp
   12084:	dfc00117 	ldw	ra,4(sp)
   12088:	df000017 	ldw	fp,0(sp)
   1208c:	dec00204 	addi	sp,sp,8
   12090:	f800283a 	ret

00012094 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   12094:	defffc04 	addi	sp,sp,-16
   12098:	df000315 	stw	fp,12(sp)
   1209c:	df000304 	addi	fp,sp,12
   120a0:	e13ffd15 	stw	r4,-12(fp)
   120a4:	e17ffe15 	stw	r5,-8(fp)
   120a8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   120ac:	e0fffe17 	ldw	r3,-8(fp)
   120b0:	e0bffd17 	ldw	r2,-12(fp)
   120b4:	18800e26 	beq	r3,r2,120f0 <alt_load_section+0x5c>
  {
    while( to != end )
   120b8:	00000a06 	br	120e4 <alt_load_section+0x50>
    {
      *to++ = *from++;
   120bc:	e0bffd17 	ldw	r2,-12(fp)
   120c0:	10c00017 	ldw	r3,0(r2)
   120c4:	e0bffe17 	ldw	r2,-8(fp)
   120c8:	10c00015 	stw	r3,0(r2)
   120cc:	e0bffe17 	ldw	r2,-8(fp)
   120d0:	10800104 	addi	r2,r2,4
   120d4:	e0bffe15 	stw	r2,-8(fp)
   120d8:	e0bffd17 	ldw	r2,-12(fp)
   120dc:	10800104 	addi	r2,r2,4
   120e0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   120e4:	e0fffe17 	ldw	r3,-8(fp)
   120e8:	e0bfff17 	ldw	r2,-4(fp)
   120ec:	18bff31e 	bne	r3,r2,120bc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   120f0:	e037883a 	mov	sp,fp
   120f4:	df000017 	ldw	fp,0(sp)
   120f8:	dec00104 	addi	sp,sp,4
   120fc:	f800283a 	ret

00012100 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   12100:	defff804 	addi	sp,sp,-32
   12104:	dfc00715 	stw	ra,28(sp)
   12108:	df000615 	stw	fp,24(sp)
   1210c:	df000604 	addi	fp,sp,24
   12110:	e13ffc15 	stw	r4,-16(fp)
   12114:	e17ffd15 	stw	r5,-12(fp)
   12118:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   1211c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12120:	e0bffc17 	ldw	r2,-16(fp)
   12124:	1004803a 	cmplt	r2,r2,zero
   12128:	1000081e 	bne	r2,zero,1214c <lseek+0x4c>
   1212c:	e0bffc17 	ldw	r2,-16(fp)
   12130:	10800324 	muli	r2,r2,12
   12134:	1007883a 	mov	r3,r2
   12138:	00800074 	movhi	r2,1
   1213c:	10971e04 	addi	r2,r2,23672
   12140:	1887883a 	add	r3,r3,r2
   12144:	e0ffff15 	stw	r3,-4(fp)
   12148:	00000106 	br	12150 <lseek+0x50>
   1214c:	e03fff15 	stw	zero,-4(fp)
   12150:	e0bfff17 	ldw	r2,-4(fp)
   12154:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   12158:	e0bffb17 	ldw	r2,-20(fp)
   1215c:	1005003a 	cmpeq	r2,r2,zero
   12160:	1000111e 	bne	r2,zero,121a8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   12164:	e0bffb17 	ldw	r2,-20(fp)
   12168:	10800017 	ldw	r2,0(r2)
   1216c:	10800717 	ldw	r2,28(r2)
   12170:	1005003a 	cmpeq	r2,r2,zero
   12174:	1000091e 	bne	r2,zero,1219c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   12178:	e0bffb17 	ldw	r2,-20(fp)
   1217c:	10800017 	ldw	r2,0(r2)
   12180:	10800717 	ldw	r2,28(r2)
   12184:	e13ffb17 	ldw	r4,-20(fp)
   12188:	e17ffd17 	ldw	r5,-12(fp)
   1218c:	e1bffe17 	ldw	r6,-8(fp)
   12190:	103ee83a 	callr	r2
   12194:	e0bffa15 	stw	r2,-24(fp)
   12198:	00000506 	br	121b0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   1219c:	00bfde84 	movi	r2,-134
   121a0:	e0bffa15 	stw	r2,-24(fp)
   121a4:	00000206 	br	121b0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   121a8:	00bfebc4 	movi	r2,-81
   121ac:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   121b0:	e0bffa17 	ldw	r2,-24(fp)
   121b4:	1004403a 	cmpge	r2,r2,zero
   121b8:	1000071e 	bne	r2,zero,121d8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   121bc:	00121f00 	call	121f0 <alt_get_errno>
   121c0:	1007883a 	mov	r3,r2
   121c4:	e0bffa17 	ldw	r2,-24(fp)
   121c8:	0085c83a 	sub	r2,zero,r2
   121cc:	18800015 	stw	r2,0(r3)
    rc = -1;
   121d0:	00bfffc4 	movi	r2,-1
   121d4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   121d8:	e0bffa17 	ldw	r2,-24(fp)
}
   121dc:	e037883a 	mov	sp,fp
   121e0:	dfc00117 	ldw	ra,4(sp)
   121e4:	df000017 	ldw	fp,0(sp)
   121e8:	dec00204 	addi	sp,sp,8
   121ec:	f800283a 	ret

000121f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   121f0:	defffd04 	addi	sp,sp,-12
   121f4:	dfc00215 	stw	ra,8(sp)
   121f8:	df000115 	stw	fp,4(sp)
   121fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   12200:	00800074 	movhi	r2,1
   12204:	109ba204 	addi	r2,r2,28296
   12208:	10800017 	ldw	r2,0(r2)
   1220c:	1005003a 	cmpeq	r2,r2,zero
   12210:	1000061e 	bne	r2,zero,1222c <alt_get_errno+0x3c>
   12214:	00800074 	movhi	r2,1
   12218:	109ba204 	addi	r2,r2,28296
   1221c:	10800017 	ldw	r2,0(r2)
   12220:	103ee83a 	callr	r2
   12224:	e0bfff15 	stw	r2,-4(fp)
   12228:	00000306 	br	12238 <alt_get_errno+0x48>
   1222c:	008000b4 	movhi	r2,2
   12230:	10a27104 	addi	r2,r2,-30268
   12234:	e0bfff15 	stw	r2,-4(fp)
   12238:	e0bfff17 	ldw	r2,-4(fp)
}
   1223c:	e037883a 	mov	sp,fp
   12240:	dfc00117 	ldw	ra,4(sp)
   12244:	df000017 	ldw	fp,0(sp)
   12248:	dec00204 	addi	sp,sp,8
   1224c:	f800283a 	ret

00012250 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   12250:	defffd04 	addi	sp,sp,-12
   12254:	dfc00215 	stw	ra,8(sp)
   12258:	df000115 	stw	fp,4(sp)
   1225c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   12260:	0009883a 	mov	r4,zero
   12264:	00127180 	call	12718 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   12268:	001274c0 	call	1274c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   1226c:	01000074 	movhi	r4,1
   12270:	2114e004 	addi	r4,r4,21376
   12274:	01400074 	movhi	r5,1
   12278:	2954e004 	addi	r5,r5,21376
   1227c:	01800074 	movhi	r6,1
   12280:	3194e004 	addi	r6,r6,21376
   12284:	0013ac00 	call	13ac0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   12288:	00136380 	call	13638 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   1228c:	01000074 	movhi	r4,1
   12290:	210da704 	addi	r4,r4,13980
   12294:	00142bc0 	call	142bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   12298:	d126df17 	ldw	r4,-25732(gp)
   1229c:	d166e017 	ldw	r5,-25728(gp)
   122a0:	d1a6e117 	ldw	r6,-25724(gp)
   122a4:	0002a140 	call	2a14 <main>
   122a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   122ac:	01000044 	movi	r4,1
   122b0:	0011c380 	call	11c38 <close>
  exit (result);
   122b4:	e13fff17 	ldw	r4,-4(fp)
   122b8:	00142d00 	call	142d0 <exit>

000122bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   122bc:	defffe04 	addi	sp,sp,-8
   122c0:	df000115 	stw	fp,4(sp)
   122c4:	df000104 	addi	fp,sp,4
   122c8:	e13fff15 	stw	r4,-4(fp)
}
   122cc:	e037883a 	mov	sp,fp
   122d0:	df000017 	ldw	fp,0(sp)
   122d4:	dec00104 	addi	sp,sp,4
   122d8:	f800283a 	ret

000122dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   122dc:	defffe04 	addi	sp,sp,-8
   122e0:	df000115 	stw	fp,4(sp)
   122e4:	df000104 	addi	fp,sp,4
   122e8:	e13fff15 	stw	r4,-4(fp)
}
   122ec:	e037883a 	mov	sp,fp
   122f0:	df000017 	ldw	fp,0(sp)
   122f4:	dec00104 	addi	sp,sp,4
   122f8:	f800283a 	ret

000122fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   122fc:	defff704 	addi	sp,sp,-36
   12300:	dfc00815 	stw	ra,32(sp)
   12304:	df000715 	stw	fp,28(sp)
   12308:	df000704 	addi	fp,sp,28
   1230c:	e13ffb15 	stw	r4,-20(fp)
   12310:	e17ffc15 	stw	r5,-16(fp)
   12314:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12318:	e0bffb17 	ldw	r2,-20(fp)
   1231c:	1004803a 	cmplt	r2,r2,zero
   12320:	1000081e 	bne	r2,zero,12344 <read+0x48>
   12324:	e0bffb17 	ldw	r2,-20(fp)
   12328:	10800324 	muli	r2,r2,12
   1232c:	1007883a 	mov	r3,r2
   12330:	00800074 	movhi	r2,1
   12334:	10971e04 	addi	r2,r2,23672
   12338:	1887883a 	add	r3,r3,r2
   1233c:	e0ffff15 	stw	r3,-4(fp)
   12340:	00000106 	br	12348 <read+0x4c>
   12344:	e03fff15 	stw	zero,-4(fp)
   12348:	e0bfff17 	ldw	r2,-4(fp)
   1234c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   12350:	e0bffa17 	ldw	r2,-24(fp)
   12354:	1005003a 	cmpeq	r2,r2,zero
   12358:	1000241e 	bne	r2,zero,123ec <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1235c:	e0bffa17 	ldw	r2,-24(fp)
   12360:	10800217 	ldw	r2,8(r2)
   12364:	108000cc 	andi	r2,r2,3
   12368:	10800060 	cmpeqi	r2,r2,1
   1236c:	10001a1e 	bne	r2,zero,123d8 <read+0xdc>
   12370:	e0bffa17 	ldw	r2,-24(fp)
   12374:	10800017 	ldw	r2,0(r2)
   12378:	10800517 	ldw	r2,20(r2)
   1237c:	1005003a 	cmpeq	r2,r2,zero
   12380:	1000151e 	bne	r2,zero,123d8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   12384:	e0bffa17 	ldw	r2,-24(fp)
   12388:	10800017 	ldw	r2,0(r2)
   1238c:	10800517 	ldw	r2,20(r2)
   12390:	e17ffc17 	ldw	r5,-16(fp)
   12394:	e1bffd17 	ldw	r6,-12(fp)
   12398:	e13ffa17 	ldw	r4,-24(fp)
   1239c:	103ee83a 	callr	r2
   123a0:	e0bff915 	stw	r2,-28(fp)
   123a4:	e0bff917 	ldw	r2,-28(fp)
   123a8:	1004403a 	cmpge	r2,r2,zero
   123ac:	1000071e 	bne	r2,zero,123cc <read+0xd0>
        {
          ALT_ERRNO = -rval;
   123b0:	001241c0 	call	1241c <alt_get_errno>
   123b4:	e0fff917 	ldw	r3,-28(fp)
   123b8:	00c7c83a 	sub	r3,zero,r3
   123bc:	10c00015 	stw	r3,0(r2)
          return -1;
   123c0:	00bfffc4 	movi	r2,-1
   123c4:	e0bffe15 	stw	r2,-8(fp)
   123c8:	00000e06 	br	12404 <read+0x108>
        }
        return rval;
   123cc:	e0bff917 	ldw	r2,-28(fp)
   123d0:	e0bffe15 	stw	r2,-8(fp)
   123d4:	00000b06 	br	12404 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   123d8:	001241c0 	call	1241c <alt_get_errno>
   123dc:	1007883a 	mov	r3,r2
   123e0:	00800344 	movi	r2,13
   123e4:	18800015 	stw	r2,0(r3)
   123e8:	00000406 	br	123fc <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   123ec:	001241c0 	call	1241c <alt_get_errno>
   123f0:	1007883a 	mov	r3,r2
   123f4:	00801444 	movi	r2,81
   123f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   123fc:	00bfffc4 	movi	r2,-1
   12400:	e0bffe15 	stw	r2,-8(fp)
   12404:	e0bffe17 	ldw	r2,-8(fp)
}
   12408:	e037883a 	mov	sp,fp
   1240c:	dfc00117 	ldw	ra,4(sp)
   12410:	df000017 	ldw	fp,0(sp)
   12414:	dec00204 	addi	sp,sp,8
   12418:	f800283a 	ret

0001241c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1241c:	defffd04 	addi	sp,sp,-12
   12420:	dfc00215 	stw	ra,8(sp)
   12424:	df000115 	stw	fp,4(sp)
   12428:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1242c:	00800074 	movhi	r2,1
   12430:	109ba204 	addi	r2,r2,28296
   12434:	10800017 	ldw	r2,0(r2)
   12438:	1005003a 	cmpeq	r2,r2,zero
   1243c:	1000061e 	bne	r2,zero,12458 <alt_get_errno+0x3c>
   12440:	00800074 	movhi	r2,1
   12444:	109ba204 	addi	r2,r2,28296
   12448:	10800017 	ldw	r2,0(r2)
   1244c:	103ee83a 	callr	r2
   12450:	e0bfff15 	stw	r2,-4(fp)
   12454:	00000306 	br	12464 <alt_get_errno+0x48>
   12458:	008000b4 	movhi	r2,2
   1245c:	10a27104 	addi	r2,r2,-30268
   12460:	e0bfff15 	stw	r2,-4(fp)
   12464:	e0bfff17 	ldw	r2,-4(fp)
}
   12468:	e037883a 	mov	sp,fp
   1246c:	dfc00117 	ldw	ra,4(sp)
   12470:	df000017 	ldw	fp,0(sp)
   12474:	dec00204 	addi	sp,sp,8
   12478:	f800283a 	ret

0001247c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1247c:	defffe04 	addi	sp,sp,-8
   12480:	df000115 	stw	fp,4(sp)
   12484:	df000104 	addi	fp,sp,4
   12488:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   1248c:	e0bfff17 	ldw	r2,-4(fp)
   12490:	108000d0 	cmplti	r2,r2,3
   12494:	10000d1e 	bne	r2,zero,124cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   12498:	e0bfff17 	ldw	r2,-4(fp)
   1249c:	00c00074 	movhi	r3,1
   124a0:	18d71e04 	addi	r3,r3,23672
   124a4:	10800324 	muli	r2,r2,12
   124a8:	10c5883a 	add	r2,r2,r3
   124ac:	10800204 	addi	r2,r2,8
   124b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   124b4:	e0bfff17 	ldw	r2,-4(fp)
   124b8:	00c00074 	movhi	r3,1
   124bc:	18d71e04 	addi	r3,r3,23672
   124c0:	10800324 	muli	r2,r2,12
   124c4:	10c5883a 	add	r2,r2,r3
   124c8:	10000015 	stw	zero,0(r2)
  }
}
   124cc:	e037883a 	mov	sp,fp
   124d0:	df000017 	ldw	fp,0(sp)
   124d4:	dec00104 	addi	sp,sp,4
   124d8:	f800283a 	ret

000124dc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   124dc:	defff804 	addi	sp,sp,-32
   124e0:	df000715 	stw	fp,28(sp)
   124e4:	df000704 	addi	fp,sp,28
   124e8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   124ec:	0005303a 	rdctl	r2,status
   124f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   124f4:	e0fffb17 	ldw	r3,-20(fp)
   124f8:	00bfff84 	movi	r2,-2
   124fc:	1884703a 	and	r2,r3,r2
   12500:	1001703a 	wrctl	status,r2
  
  return context;
   12504:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12508:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1250c:	d0a00d17 	ldw	r2,-32716(gp)
   12510:	10c000c4 	addi	r3,r2,3
   12514:	00bfff04 	movi	r2,-4
   12518:	1884703a 	and	r2,r3,r2
   1251c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12520:	d0e00d17 	ldw	r3,-32716(gp)
   12524:	e0bffe17 	ldw	r2,-8(fp)
   12528:	1887883a 	add	r3,r3,r2
   1252c:	00802034 	movhi	r2,128
   12530:	10800004 	addi	r2,r2,0
   12534:	10c0072e 	bgeu	r2,r3,12554 <sbrk+0x78>
   12538:	e0bffd17 	ldw	r2,-12(fp)
   1253c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12540:	e0bffa17 	ldw	r2,-24(fp)
   12544:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12548:	00bfffc4 	movi	r2,-1
   1254c:	e0bfff15 	stw	r2,-4(fp)
   12550:	00000c06 	br	12584 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   12554:	d0a00d17 	ldw	r2,-32716(gp)
   12558:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1255c:	d0e00d17 	ldw	r3,-32716(gp)
   12560:	e0bffe17 	ldw	r2,-8(fp)
   12564:	1885883a 	add	r2,r3,r2
   12568:	d0a00d15 	stw	r2,-32716(gp)
   1256c:	e0bffd17 	ldw	r2,-12(fp)
   12570:	e0bff915 	stw	r2,-28(fp)
   12574:	e0bff917 	ldw	r2,-28(fp)
   12578:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1257c:	e0bffc17 	ldw	r2,-16(fp)
   12580:	e0bfff15 	stw	r2,-4(fp)
   12584:	e0bfff17 	ldw	r2,-4(fp)
} 
   12588:	e037883a 	mov	sp,fp
   1258c:	df000017 	ldw	fp,0(sp)
   12590:	dec00104 	addi	sp,sp,4
   12594:	f800283a 	ret

00012598 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   12598:	defff704 	addi	sp,sp,-36
   1259c:	dfc00815 	stw	ra,32(sp)
   125a0:	df000715 	stw	fp,28(sp)
   125a4:	df000704 	addi	fp,sp,28
   125a8:	e13ffb15 	stw	r4,-20(fp)
   125ac:	e17ffc15 	stw	r5,-16(fp)
   125b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   125b4:	e0bffb17 	ldw	r2,-20(fp)
   125b8:	1004803a 	cmplt	r2,r2,zero
   125bc:	1000081e 	bne	r2,zero,125e0 <write+0x48>
   125c0:	e0bffb17 	ldw	r2,-20(fp)
   125c4:	10800324 	muli	r2,r2,12
   125c8:	1007883a 	mov	r3,r2
   125cc:	00800074 	movhi	r2,1
   125d0:	10971e04 	addi	r2,r2,23672
   125d4:	1887883a 	add	r3,r3,r2
   125d8:	e0ffff15 	stw	r3,-4(fp)
   125dc:	00000106 	br	125e4 <write+0x4c>
   125e0:	e03fff15 	stw	zero,-4(fp)
   125e4:	e0bfff17 	ldw	r2,-4(fp)
   125e8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   125ec:	e0bffa17 	ldw	r2,-24(fp)
   125f0:	1005003a 	cmpeq	r2,r2,zero
   125f4:	1000241e 	bne	r2,zero,12688 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   125f8:	e0bffa17 	ldw	r2,-24(fp)
   125fc:	10800217 	ldw	r2,8(r2)
   12600:	108000cc 	andi	r2,r2,3
   12604:	1005003a 	cmpeq	r2,r2,zero
   12608:	10001a1e 	bne	r2,zero,12674 <write+0xdc>
   1260c:	e0bffa17 	ldw	r2,-24(fp)
   12610:	10800017 	ldw	r2,0(r2)
   12614:	10800617 	ldw	r2,24(r2)
   12618:	1005003a 	cmpeq	r2,r2,zero
   1261c:	1000151e 	bne	r2,zero,12674 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12620:	e0bffa17 	ldw	r2,-24(fp)
   12624:	10800017 	ldw	r2,0(r2)
   12628:	10800617 	ldw	r2,24(r2)
   1262c:	e17ffc17 	ldw	r5,-16(fp)
   12630:	e1bffd17 	ldw	r6,-12(fp)
   12634:	e13ffa17 	ldw	r4,-24(fp)
   12638:	103ee83a 	callr	r2
   1263c:	e0bff915 	stw	r2,-28(fp)
   12640:	e0bff917 	ldw	r2,-28(fp)
   12644:	1004403a 	cmpge	r2,r2,zero
   12648:	1000071e 	bne	r2,zero,12668 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1264c:	00126b80 	call	126b8 <alt_get_errno>
   12650:	e0fff917 	ldw	r3,-28(fp)
   12654:	00c7c83a 	sub	r3,zero,r3
   12658:	10c00015 	stw	r3,0(r2)
        return -1;
   1265c:	00bfffc4 	movi	r2,-1
   12660:	e0bffe15 	stw	r2,-8(fp)
   12664:	00000e06 	br	126a0 <write+0x108>
      }
      return rval;
   12668:	e0bff917 	ldw	r2,-28(fp)
   1266c:	e0bffe15 	stw	r2,-8(fp)
   12670:	00000b06 	br	126a0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12674:	00126b80 	call	126b8 <alt_get_errno>
   12678:	1007883a 	mov	r3,r2
   1267c:	00800344 	movi	r2,13
   12680:	18800015 	stw	r2,0(r3)
   12684:	00000406 	br	12698 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   12688:	00126b80 	call	126b8 <alt_get_errno>
   1268c:	1007883a 	mov	r3,r2
   12690:	00801444 	movi	r2,81
   12694:	18800015 	stw	r2,0(r3)
  }
  return -1;
   12698:	00bfffc4 	movi	r2,-1
   1269c:	e0bffe15 	stw	r2,-8(fp)
   126a0:	e0bffe17 	ldw	r2,-8(fp)
}
   126a4:	e037883a 	mov	sp,fp
   126a8:	dfc00117 	ldw	ra,4(sp)
   126ac:	df000017 	ldw	fp,0(sp)
   126b0:	dec00204 	addi	sp,sp,8
   126b4:	f800283a 	ret

000126b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   126b8:	defffd04 	addi	sp,sp,-12
   126bc:	dfc00215 	stw	ra,8(sp)
   126c0:	df000115 	stw	fp,4(sp)
   126c4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   126c8:	00800074 	movhi	r2,1
   126cc:	109ba204 	addi	r2,r2,28296
   126d0:	10800017 	ldw	r2,0(r2)
   126d4:	1005003a 	cmpeq	r2,r2,zero
   126d8:	1000061e 	bne	r2,zero,126f4 <alt_get_errno+0x3c>
   126dc:	00800074 	movhi	r2,1
   126e0:	109ba204 	addi	r2,r2,28296
   126e4:	10800017 	ldw	r2,0(r2)
   126e8:	103ee83a 	callr	r2
   126ec:	e0bfff15 	stw	r2,-4(fp)
   126f0:	00000306 	br	12700 <alt_get_errno+0x48>
   126f4:	008000b4 	movhi	r2,2
   126f8:	10a27104 	addi	r2,r2,-30268
   126fc:	e0bfff15 	stw	r2,-4(fp)
   12700:	e0bfff17 	ldw	r2,-4(fp)
}
   12704:	e037883a 	mov	sp,fp
   12708:	dfc00117 	ldw	ra,4(sp)
   1270c:	df000017 	ldw	fp,0(sp)
   12710:	dec00204 	addi	sp,sp,8
   12714:	f800283a 	ret

00012718 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12718:	defffd04 	addi	sp,sp,-12
   1271c:	dfc00215 	stw	ra,8(sp)
   12720:	df000115 	stw	fp,4(sp)
   12724:	df000104 	addi	fp,sp,4
   12728:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   1272c:	0013fa00 	call	13fa0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12730:	00800044 	movi	r2,1
   12734:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12738:	e037883a 	mov	sp,fp
   1273c:	dfc00117 	ldw	ra,4(sp)
   12740:	df000017 	ldw	fp,0(sp)
   12744:	dec00204 	addi	sp,sp,8
   12748:	f800283a 	ret

0001274c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1274c:	defffe04 	addi	sp,sp,-8
   12750:	dfc00115 	stw	ra,4(sp)
   12754:	df000015 	stw	fp,0(sp)
   12758:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1275c:	01002034 	movhi	r4,128
   12760:	21081004 	addi	r4,r4,8256
   12764:	000b883a 	mov	r5,zero
   12768:	000d883a 	mov	r6,zero
   1276c:	01c0fa04 	movi	r7,1000
   12770:	00132fc0 	call	132fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   12774:	01000074 	movhi	r4,1
   12778:	21178804 	addi	r4,r4,24096
   1277c:	000b883a 	mov	r5,zero
   12780:	01800204 	movi	r6,8
   12784:	00129280 	call	12928 <altera_avalon_jtag_uart_init>
   12788:	01000074 	movhi	r4,1
   1278c:	21177e04 	addi	r4,r4,24056
   12790:	00127a80 	call	127a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   12794:	e037883a 	mov	sp,fp
   12798:	dfc00117 	ldw	ra,4(sp)
   1279c:	df000017 	ldw	fp,0(sp)
   127a0:	dec00204 	addi	sp,sp,8
   127a4:	f800283a 	ret

000127a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   127a8:	defffd04 	addi	sp,sp,-12
   127ac:	dfc00215 	stw	ra,8(sp)
   127b0:	df000115 	stw	fp,4(sp)
   127b4:	df000104 	addi	fp,sp,4
   127b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   127bc:	e13fff17 	ldw	r4,-4(fp)
   127c0:	01400074 	movhi	r5,1
   127c4:	295b9f04 	addi	r5,r5,28284
   127c8:	00135240 	call	13524 <alt_dev_llist_insert>
}
   127cc:	e037883a 	mov	sp,fp
   127d0:	dfc00117 	ldw	ra,4(sp)
   127d4:	df000017 	ldw	fp,0(sp)
   127d8:	dec00204 	addi	sp,sp,8
   127dc:	f800283a 	ret

000127e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   127e0:	defffa04 	addi	sp,sp,-24
   127e4:	dfc00515 	stw	ra,20(sp)
   127e8:	df000415 	stw	fp,16(sp)
   127ec:	df000404 	addi	fp,sp,16
   127f0:	e13ffd15 	stw	r4,-12(fp)
   127f4:	e17ffe15 	stw	r5,-8(fp)
   127f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   127fc:	e0bffd17 	ldw	r2,-12(fp)
   12800:	10800017 	ldw	r2,0(r2)
   12804:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12808:	e0bffc17 	ldw	r2,-16(fp)
   1280c:	11000a04 	addi	r4,r2,40
   12810:	e0bffd17 	ldw	r2,-12(fp)
   12814:	11c00217 	ldw	r7,8(r2)
   12818:	e17ffe17 	ldw	r5,-8(fp)
   1281c:	e1bfff17 	ldw	r6,-4(fp)
   12820:	0012e280 	call	12e28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12824:	e037883a 	mov	sp,fp
   12828:	dfc00117 	ldw	ra,4(sp)
   1282c:	df000017 	ldw	fp,0(sp)
   12830:	dec00204 	addi	sp,sp,8
   12834:	f800283a 	ret

00012838 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12838:	defffa04 	addi	sp,sp,-24
   1283c:	dfc00515 	stw	ra,20(sp)
   12840:	df000415 	stw	fp,16(sp)
   12844:	df000404 	addi	fp,sp,16
   12848:	e13ffd15 	stw	r4,-12(fp)
   1284c:	e17ffe15 	stw	r5,-8(fp)
   12850:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12854:	e0bffd17 	ldw	r2,-12(fp)
   12858:	10800017 	ldw	r2,0(r2)
   1285c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12860:	e0bffc17 	ldw	r2,-16(fp)
   12864:	11000a04 	addi	r4,r2,40
   12868:	e0bffd17 	ldw	r2,-12(fp)
   1286c:	11c00217 	ldw	r7,8(r2)
   12870:	e17ffe17 	ldw	r5,-8(fp)
   12874:	e1bfff17 	ldw	r6,-4(fp)
   12878:	001304c0 	call	1304c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1287c:	e037883a 	mov	sp,fp
   12880:	dfc00117 	ldw	ra,4(sp)
   12884:	df000017 	ldw	fp,0(sp)
   12888:	dec00204 	addi	sp,sp,8
   1288c:	f800283a 	ret

00012890 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   12890:	defffc04 	addi	sp,sp,-16
   12894:	dfc00315 	stw	ra,12(sp)
   12898:	df000215 	stw	fp,8(sp)
   1289c:	df000204 	addi	fp,sp,8
   128a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   128a4:	e0bfff17 	ldw	r2,-4(fp)
   128a8:	10800017 	ldw	r2,0(r2)
   128ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   128b0:	e0bffe17 	ldw	r2,-8(fp)
   128b4:	11000a04 	addi	r4,r2,40
   128b8:	e0bfff17 	ldw	r2,-4(fp)
   128bc:	11400217 	ldw	r5,8(r2)
   128c0:	0012cc00 	call	12cc0 <altera_avalon_jtag_uart_close>
}
   128c4:	e037883a 	mov	sp,fp
   128c8:	dfc00117 	ldw	ra,4(sp)
   128cc:	df000017 	ldw	fp,0(sp)
   128d0:	dec00204 	addi	sp,sp,8
   128d4:	f800283a 	ret

000128d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   128d8:	defffa04 	addi	sp,sp,-24
   128dc:	dfc00515 	stw	ra,20(sp)
   128e0:	df000415 	stw	fp,16(sp)
   128e4:	df000404 	addi	fp,sp,16
   128e8:	e13ffd15 	stw	r4,-12(fp)
   128ec:	e17ffe15 	stw	r5,-8(fp)
   128f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   128f4:	e0bffd17 	ldw	r2,-12(fp)
   128f8:	10800017 	ldw	r2,0(r2)
   128fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   12900:	e0bffc17 	ldw	r2,-16(fp)
   12904:	11000a04 	addi	r4,r2,40
   12908:	e17ffe17 	ldw	r5,-8(fp)
   1290c:	e1bfff17 	ldw	r6,-4(fp)
   12910:	0012d340 	call	12d34 <altera_avalon_jtag_uart_ioctl>
}
   12914:	e037883a 	mov	sp,fp
   12918:	dfc00117 	ldw	ra,4(sp)
   1291c:	df000017 	ldw	fp,0(sp)
   12920:	dec00204 	addi	sp,sp,8
   12924:	f800283a 	ret

00012928 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12928:	defffa04 	addi	sp,sp,-24
   1292c:	dfc00515 	stw	ra,20(sp)
   12930:	df000415 	stw	fp,16(sp)
   12934:	df000404 	addi	fp,sp,16
   12938:	e13ffd15 	stw	r4,-12(fp)
   1293c:	e17ffe15 	stw	r5,-8(fp)
   12940:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12944:	e0fffd17 	ldw	r3,-12(fp)
   12948:	00800044 	movi	r2,1
   1294c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12950:	e0bffd17 	ldw	r2,-12(fp)
   12954:	10800017 	ldw	r2,0(r2)
   12958:	11000104 	addi	r4,r2,4
   1295c:	e0bffd17 	ldw	r2,-12(fp)
   12960:	10800817 	ldw	r2,32(r2)
   12964:	1007883a 	mov	r3,r2
   12968:	2005883a 	mov	r2,r4
   1296c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12970:	e13ffe17 	ldw	r4,-8(fp)
   12974:	e17fff17 	ldw	r5,-4(fp)
   12978:	d8000015 	stw	zero,0(sp)
   1297c:	01800074 	movhi	r6,1
   12980:	318a7a04 	addi	r6,r6,10728
   12984:	e1fffd17 	ldw	r7,-12(fp)
   12988:	00137300 	call	13730 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   1298c:	e0bffd17 	ldw	r2,-12(fp)
   12990:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   12994:	e0bffd17 	ldw	r2,-12(fp)
   12998:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   1299c:	008000b4 	movhi	r2,2
   129a0:	10a27904 	addi	r2,r2,-30236
   129a4:	10800017 	ldw	r2,0(r2)
   129a8:	100b883a 	mov	r5,r2
   129ac:	01800074 	movhi	r6,1
   129b0:	318b0404 	addi	r6,r6,11280
   129b4:	e1fffd17 	ldw	r7,-12(fp)
   129b8:	001338c0 	call	1338c <alt_alarm_start>
   129bc:	1004403a 	cmpge	r2,r2,zero
   129c0:	1000041e 	bne	r2,zero,129d4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   129c4:	e0fffd17 	ldw	r3,-12(fp)
   129c8:	00a00034 	movhi	r2,32768
   129cc:	10bfffc4 	addi	r2,r2,-1
   129d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   129d4:	e037883a 	mov	sp,fp
   129d8:	dfc00117 	ldw	ra,4(sp)
   129dc:	df000017 	ldw	fp,0(sp)
   129e0:	dec00204 	addi	sp,sp,8
   129e4:	f800283a 	ret

000129e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   129e8:	defff804 	addi	sp,sp,-32
   129ec:	df000715 	stw	fp,28(sp)
   129f0:	df000704 	addi	fp,sp,28
   129f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   129f8:	e0bfff17 	ldw	r2,-4(fp)
   129fc:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   12a00:	e0bffe17 	ldw	r2,-8(fp)
   12a04:	10800017 	ldw	r2,0(r2)
   12a08:	e0bffd15 	stw	r2,-12(fp)
   12a0c:	00000006 	br	12a10 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12a10:	e0bffd17 	ldw	r2,-12(fp)
   12a14:	10800104 	addi	r2,r2,4
   12a18:	10800037 	ldwio	r2,0(r2)
   12a1c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12a20:	e0bffc17 	ldw	r2,-16(fp)
   12a24:	1080c00c 	andi	r2,r2,768
   12a28:	1005003a 	cmpeq	r2,r2,zero
   12a2c:	1000741e 	bne	r2,zero,12c00 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12a30:	e0bffc17 	ldw	r2,-16(fp)
   12a34:	1080400c 	andi	r2,r2,256
   12a38:	1005003a 	cmpeq	r2,r2,zero
   12a3c:	1000351e 	bne	r2,zero,12b14 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12a40:	00800074 	movhi	r2,1
   12a44:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12a48:	e0bffe17 	ldw	r2,-8(fp)
   12a4c:	10800a17 	ldw	r2,40(r2)
   12a50:	10800044 	addi	r2,r2,1
   12a54:	1081ffcc 	andi	r2,r2,2047
   12a58:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   12a5c:	e0bffe17 	ldw	r2,-8(fp)
   12a60:	10c00b17 	ldw	r3,44(r2)
   12a64:	e0bffa17 	ldw	r2,-24(fp)
   12a68:	18801626 	beq	r3,r2,12ac4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   12a6c:	e0bffd17 	ldw	r2,-12(fp)
   12a70:	10800037 	ldwio	r2,0(r2)
   12a74:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12a78:	e0bffb17 	ldw	r2,-20(fp)
   12a7c:	10a0000c 	andi	r2,r2,32768
   12a80:	1005003a 	cmpeq	r2,r2,zero
   12a84:	10000f1e 	bne	r2,zero,12ac4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   12a88:	e0bffe17 	ldw	r2,-8(fp)
   12a8c:	10c00a17 	ldw	r3,40(r2)
   12a90:	e0bffb17 	ldw	r2,-20(fp)
   12a94:	1009883a 	mov	r4,r2
   12a98:	e0bffe17 	ldw	r2,-8(fp)
   12a9c:	1885883a 	add	r2,r3,r2
   12aa0:	10800e04 	addi	r2,r2,56
   12aa4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12aa8:	e0bffe17 	ldw	r2,-8(fp)
   12aac:	10800a17 	ldw	r2,40(r2)
   12ab0:	10800044 	addi	r2,r2,1
   12ab4:	10c1ffcc 	andi	r3,r2,2047
   12ab8:	e0bffe17 	ldw	r2,-8(fp)
   12abc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   12ac0:	003fe106 	br	12a48 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   12ac4:	e0bffb17 	ldw	r2,-20(fp)
   12ac8:	10bfffec 	andhi	r2,r2,65535
   12acc:	1005003a 	cmpeq	r2,r2,zero
   12ad0:	1000101e 	bne	r2,zero,12b14 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12ad4:	e0bffe17 	ldw	r2,-8(fp)
   12ad8:	10c00817 	ldw	r3,32(r2)
   12adc:	00bfff84 	movi	r2,-2
   12ae0:	1886703a 	and	r3,r3,r2
   12ae4:	e0bffe17 	ldw	r2,-8(fp)
   12ae8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   12aec:	e0bffd17 	ldw	r2,-12(fp)
   12af0:	11000104 	addi	r4,r2,4
   12af4:	e0bffe17 	ldw	r2,-8(fp)
   12af8:	10800817 	ldw	r2,32(r2)
   12afc:	1007883a 	mov	r3,r2
   12b00:	2005883a 	mov	r2,r4
   12b04:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12b08:	e0bffd17 	ldw	r2,-12(fp)
   12b0c:	10800104 	addi	r2,r2,4
   12b10:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12b14:	e0bffc17 	ldw	r2,-16(fp)
   12b18:	1080800c 	andi	r2,r2,512
   12b1c:	1005003a 	cmpeq	r2,r2,zero
   12b20:	103fbb1e 	bne	r2,zero,12a10 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12b24:	e0bffc17 	ldw	r2,-16(fp)
   12b28:	10bfffec 	andhi	r2,r2,65535
   12b2c:	1004d43a 	srli	r2,r2,16
   12b30:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12b34:	00001506 	br	12b8c <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12b38:	e13ffd17 	ldw	r4,-12(fp)
   12b3c:	e0bffe17 	ldw	r2,-8(fp)
   12b40:	10c00d17 	ldw	r3,52(r2)
   12b44:	e0bffe17 	ldw	r2,-8(fp)
   12b48:	1885883a 	add	r2,r3,r2
   12b4c:	10820e04 	addi	r2,r2,2104
   12b50:	10800003 	ldbu	r2,0(r2)
   12b54:	10c03fcc 	andi	r3,r2,255
   12b58:	18c0201c 	xori	r3,r3,128
   12b5c:	18ffe004 	addi	r3,r3,-128
   12b60:	2005883a 	mov	r2,r4
   12b64:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12b68:	e0bffe17 	ldw	r2,-8(fp)
   12b6c:	10800d17 	ldw	r2,52(r2)
   12b70:	10800044 	addi	r2,r2,1
   12b74:	10c1ffcc 	andi	r3,r2,2047
   12b78:	e0bffe17 	ldw	r2,-8(fp)
   12b7c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   12b80:	e0bff917 	ldw	r2,-28(fp)
   12b84:	10bfffc4 	addi	r2,r2,-1
   12b88:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   12b8c:	e0bff917 	ldw	r2,-28(fp)
   12b90:	1005003a 	cmpeq	r2,r2,zero
   12b94:	1000051e 	bne	r2,zero,12bac <altera_avalon_jtag_uart_irq+0x1c4>
   12b98:	e0bffe17 	ldw	r2,-8(fp)
   12b9c:	10c00d17 	ldw	r3,52(r2)
   12ba0:	e0bffe17 	ldw	r2,-8(fp)
   12ba4:	10800c17 	ldw	r2,48(r2)
   12ba8:	18bfe31e 	bne	r3,r2,12b38 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   12bac:	e0bff917 	ldw	r2,-28(fp)
   12bb0:	1005003a 	cmpeq	r2,r2,zero
   12bb4:	103f961e 	bne	r2,zero,12a10 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12bb8:	e0bffe17 	ldw	r2,-8(fp)
   12bbc:	10c00817 	ldw	r3,32(r2)
   12bc0:	00bfff44 	movi	r2,-3
   12bc4:	1886703a 	and	r3,r3,r2
   12bc8:	e0bffe17 	ldw	r2,-8(fp)
   12bcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12bd0:	e0bffe17 	ldw	r2,-8(fp)
   12bd4:	10800017 	ldw	r2,0(r2)
   12bd8:	11000104 	addi	r4,r2,4
   12bdc:	e0bffe17 	ldw	r2,-8(fp)
   12be0:	10800817 	ldw	r2,32(r2)
   12be4:	1007883a 	mov	r3,r2
   12be8:	2005883a 	mov	r2,r4
   12bec:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12bf0:	e0bffd17 	ldw	r2,-12(fp)
   12bf4:	10800104 	addi	r2,r2,4
   12bf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   12bfc:	003f8406 	br	12a10 <altera_avalon_jtag_uart_irq+0x28>
}
   12c00:	e037883a 	mov	sp,fp
   12c04:	df000017 	ldw	fp,0(sp)
   12c08:	dec00104 	addi	sp,sp,4
   12c0c:	f800283a 	ret

00012c10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12c10:	defffc04 	addi	sp,sp,-16
   12c14:	df000315 	stw	fp,12(sp)
   12c18:	df000304 	addi	fp,sp,12
   12c1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12c20:	e0bfff17 	ldw	r2,-4(fp)
   12c24:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12c28:	e0bffe17 	ldw	r2,-8(fp)
   12c2c:	10800017 	ldw	r2,0(r2)
   12c30:	10800104 	addi	r2,r2,4
   12c34:	10800037 	ldwio	r2,0(r2)
   12c38:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   12c3c:	e0bffd17 	ldw	r2,-12(fp)
   12c40:	1081000c 	andi	r2,r2,1024
   12c44:	1005003a 	cmpeq	r2,r2,zero
   12c48:	10000c1e 	bne	r2,zero,12c7c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   12c4c:	e0bffe17 	ldw	r2,-8(fp)
   12c50:	10800017 	ldw	r2,0(r2)
   12c54:	11000104 	addi	r4,r2,4
   12c58:	e0bffe17 	ldw	r2,-8(fp)
   12c5c:	10800817 	ldw	r2,32(r2)
   12c60:	10810014 	ori	r2,r2,1024
   12c64:	1007883a 	mov	r3,r2
   12c68:	2005883a 	mov	r2,r4
   12c6c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   12c70:	e0bffe17 	ldw	r2,-8(fp)
   12c74:	10000915 	stw	zero,36(r2)
   12c78:	00000a06 	br	12ca4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   12c7c:	e0bffe17 	ldw	r2,-8(fp)
   12c80:	10c00917 	ldw	r3,36(r2)
   12c84:	00a00034 	movhi	r2,32768
   12c88:	10bfff04 	addi	r2,r2,-4
   12c8c:	10c00536 	bltu	r2,r3,12ca4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   12c90:	e0bffe17 	ldw	r2,-8(fp)
   12c94:	10800917 	ldw	r2,36(r2)
   12c98:	10c00044 	addi	r3,r2,1
   12c9c:	e0bffe17 	ldw	r2,-8(fp)
   12ca0:	10c00915 	stw	r3,36(r2)
   12ca4:	008000b4 	movhi	r2,2
   12ca8:	10a27904 	addi	r2,r2,-30236
   12cac:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   12cb0:	e037883a 	mov	sp,fp
   12cb4:	df000017 	ldw	fp,0(sp)
   12cb8:	dec00104 	addi	sp,sp,4
   12cbc:	f800283a 	ret

00012cc0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   12cc0:	defffc04 	addi	sp,sp,-16
   12cc4:	df000315 	stw	fp,12(sp)
   12cc8:	df000304 	addi	fp,sp,12
   12ccc:	e13ffd15 	stw	r4,-12(fp)
   12cd0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12cd4:	00000706 	br	12cf4 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   12cd8:	e0bffe17 	ldw	r2,-8(fp)
   12cdc:	1090000c 	andi	r2,r2,16384
   12ce0:	1005003a 	cmpeq	r2,r2,zero
   12ce4:	1000031e 	bne	r2,zero,12cf4 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   12ce8:	00bffd44 	movi	r2,-11
   12cec:	e0bfff15 	stw	r2,-4(fp)
   12cf0:	00000b06 	br	12d20 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12cf4:	e0bffd17 	ldw	r2,-12(fp)
   12cf8:	10c00d17 	ldw	r3,52(r2)
   12cfc:	e0bffd17 	ldw	r2,-12(fp)
   12d00:	10800c17 	ldw	r2,48(r2)
   12d04:	18800526 	beq	r3,r2,12d1c <altera_avalon_jtag_uart_close+0x5c>
   12d08:	e0bffd17 	ldw	r2,-12(fp)
   12d0c:	10c00917 	ldw	r3,36(r2)
   12d10:	e0bffd17 	ldw	r2,-12(fp)
   12d14:	10800117 	ldw	r2,4(r2)
   12d18:	18bfef36 	bltu	r3,r2,12cd8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12d1c:	e03fff15 	stw	zero,-4(fp)
   12d20:	e0bfff17 	ldw	r2,-4(fp)
}
   12d24:	e037883a 	mov	sp,fp
   12d28:	df000017 	ldw	fp,0(sp)
   12d2c:	dec00104 	addi	sp,sp,4
   12d30:	f800283a 	ret

00012d34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12d34:	defff804 	addi	sp,sp,-32
   12d38:	df000715 	stw	fp,28(sp)
   12d3c:	df000704 	addi	fp,sp,28
   12d40:	e13ffb15 	stw	r4,-20(fp)
   12d44:	e17ffc15 	stw	r5,-16(fp)
   12d48:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   12d4c:	00bff9c4 	movi	r2,-25
   12d50:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   12d54:	e0bffc17 	ldw	r2,-16(fp)
   12d58:	e0bfff15 	stw	r2,-4(fp)
   12d5c:	e0ffff17 	ldw	r3,-4(fp)
   12d60:	189a8060 	cmpeqi	r2,r3,27137
   12d64:	1000041e 	bne	r2,zero,12d78 <altera_avalon_jtag_uart_ioctl+0x44>
   12d68:	e0ffff17 	ldw	r3,-4(fp)
   12d6c:	189a80a0 	cmpeqi	r2,r3,27138
   12d70:	10001b1e 	bne	r2,zero,12de0 <altera_avalon_jtag_uart_ioctl+0xac>
   12d74:	00002706 	br	12e14 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12d78:	e0bffb17 	ldw	r2,-20(fp)
   12d7c:	10c00117 	ldw	r3,4(r2)
   12d80:	00a00034 	movhi	r2,32768
   12d84:	10bfffc4 	addi	r2,r2,-1
   12d88:	18802226 	beq	r3,r2,12e14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   12d8c:	e0bffd17 	ldw	r2,-12(fp)
   12d90:	10800017 	ldw	r2,0(r2)
   12d94:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12d98:	e0bff917 	ldw	r2,-28(fp)
   12d9c:	10800090 	cmplti	r2,r2,2
   12da0:	1000071e 	bne	r2,zero,12dc0 <altera_avalon_jtag_uart_ioctl+0x8c>
   12da4:	e0fff917 	ldw	r3,-28(fp)
   12da8:	00a00034 	movhi	r2,32768
   12dac:	10bfffc4 	addi	r2,r2,-1
   12db0:	18800326 	beq	r3,r2,12dc0 <altera_avalon_jtag_uart_ioctl+0x8c>
   12db4:	e0bff917 	ldw	r2,-28(fp)
   12db8:	e0bffe15 	stw	r2,-8(fp)
   12dbc:	00000306 	br	12dcc <altera_avalon_jtag_uart_ioctl+0x98>
   12dc0:	00e00034 	movhi	r3,32768
   12dc4:	18ffff84 	addi	r3,r3,-2
   12dc8:	e0fffe15 	stw	r3,-8(fp)
   12dcc:	e0bffb17 	ldw	r2,-20(fp)
   12dd0:	e0fffe17 	ldw	r3,-8(fp)
   12dd4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   12dd8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   12ddc:	00000d06 	br	12e14 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12de0:	e0bffb17 	ldw	r2,-20(fp)
   12de4:	10c00117 	ldw	r3,4(r2)
   12de8:	00a00034 	movhi	r2,32768
   12dec:	10bfffc4 	addi	r2,r2,-1
   12df0:	18800826 	beq	r3,r2,12e14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12df4:	e13ffd17 	ldw	r4,-12(fp)
   12df8:	e0bffb17 	ldw	r2,-20(fp)
   12dfc:	10c00917 	ldw	r3,36(r2)
   12e00:	e0bffb17 	ldw	r2,-20(fp)
   12e04:	10800117 	ldw	r2,4(r2)
   12e08:	1885803a 	cmpltu	r2,r3,r2
   12e0c:	20800015 	stw	r2,0(r4)
      rc = 0;
   12e10:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   12e14:	e0bffa17 	ldw	r2,-24(fp)
}
   12e18:	e037883a 	mov	sp,fp
   12e1c:	df000017 	ldw	fp,0(sp)
   12e20:	dec00104 	addi	sp,sp,4
   12e24:	f800283a 	ret

00012e28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12e28:	defff204 	addi	sp,sp,-56
   12e2c:	dfc00d15 	stw	ra,52(sp)
   12e30:	df000c15 	stw	fp,48(sp)
   12e34:	df000c04 	addi	fp,sp,48
   12e38:	e13ffb15 	stw	r4,-20(fp)
   12e3c:	e17ffc15 	stw	r5,-16(fp)
   12e40:	e1bffd15 	stw	r6,-12(fp)
   12e44:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   12e48:	e0bffc17 	ldw	r2,-16(fp)
   12e4c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12e50:	00004806 	br	12f74 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12e54:	e0bffb17 	ldw	r2,-20(fp)
   12e58:	10800a17 	ldw	r2,40(r2)
   12e5c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12e60:	e0bffb17 	ldw	r2,-20(fp)
   12e64:	10800b17 	ldw	r2,44(r2)
   12e68:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   12e6c:	e0fff717 	ldw	r3,-36(fp)
   12e70:	e0bff617 	ldw	r2,-40(fp)
   12e74:	18800536 	bltu	r3,r2,12e8c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12e78:	e0bff717 	ldw	r2,-36(fp)
   12e7c:	e0fff617 	ldw	r3,-40(fp)
   12e80:	10c5c83a 	sub	r2,r2,r3
   12e84:	e0bff815 	stw	r2,-32(fp)
   12e88:	00000406 	br	12e9c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12e8c:	00820004 	movi	r2,2048
   12e90:	e0fff617 	ldw	r3,-40(fp)
   12e94:	10c5c83a 	sub	r2,r2,r3
   12e98:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   12e9c:	e0bff817 	ldw	r2,-32(fp)
   12ea0:	1005003a 	cmpeq	r2,r2,zero
   12ea4:	10001f1e 	bne	r2,zero,12f24 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   12ea8:	e0fffd17 	ldw	r3,-12(fp)
   12eac:	e0bff817 	ldw	r2,-32(fp)
   12eb0:	1880022e 	bgeu	r3,r2,12ebc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   12eb4:	e0bffd17 	ldw	r2,-12(fp)
   12eb8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12ebc:	e0bffb17 	ldw	r2,-20(fp)
   12ec0:	10c00e04 	addi	r3,r2,56
   12ec4:	e0bff617 	ldw	r2,-40(fp)
   12ec8:	1887883a 	add	r3,r3,r2
   12ecc:	e0bffa17 	ldw	r2,-24(fp)
   12ed0:	1009883a 	mov	r4,r2
   12ed4:	180b883a 	mov	r5,r3
   12ed8:	e1bff817 	ldw	r6,-32(fp)
   12edc:	00039640 	call	3964 <memcpy>
      ptr   += n;
   12ee0:	e0fff817 	ldw	r3,-32(fp)
   12ee4:	e0bffa17 	ldw	r2,-24(fp)
   12ee8:	10c5883a 	add	r2,r2,r3
   12eec:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   12ef0:	e0fffd17 	ldw	r3,-12(fp)
   12ef4:	e0bff817 	ldw	r2,-32(fp)
   12ef8:	1885c83a 	sub	r2,r3,r2
   12efc:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12f00:	e0fff617 	ldw	r3,-40(fp)
   12f04:	e0bff817 	ldw	r2,-32(fp)
   12f08:	1885883a 	add	r2,r3,r2
   12f0c:	10c1ffcc 	andi	r3,r2,2047
   12f10:	e0bffb17 	ldw	r2,-20(fp)
   12f14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12f18:	e0bffd17 	ldw	r2,-12(fp)
   12f1c:	10800048 	cmpgei	r2,r2,1
   12f20:	103fcc1e 	bne	r2,zero,12e54 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   12f24:	e0fffa17 	ldw	r3,-24(fp)
   12f28:	e0bffc17 	ldw	r2,-16(fp)
   12f2c:	1880141e 	bne	r3,r2,12f80 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12f30:	e0bffe17 	ldw	r2,-8(fp)
   12f34:	1090000c 	andi	r2,r2,16384
   12f38:	1004c03a 	cmpne	r2,r2,zero
   12f3c:	1000101e 	bne	r2,zero,12f80 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12f40:	e0bffb17 	ldw	r2,-20(fp)
   12f44:	10c00a17 	ldw	r3,40(r2)
   12f48:	e0bff717 	ldw	r2,-36(fp)
   12f4c:	1880051e 	bne	r3,r2,12f64 <altera_avalon_jtag_uart_read+0x13c>
   12f50:	e0bffb17 	ldw	r2,-20(fp)
   12f54:	10c00917 	ldw	r3,36(r2)
   12f58:	e0bffb17 	ldw	r2,-20(fp)
   12f5c:	10800117 	ldw	r2,4(r2)
   12f60:	18bff736 	bltu	r3,r2,12f40 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12f64:	e0bffb17 	ldw	r2,-20(fp)
   12f68:	10c00a17 	ldw	r3,40(r2)
   12f6c:	e0bff717 	ldw	r2,-36(fp)
   12f70:	18800326 	beq	r3,r2,12f80 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12f74:	e0bffd17 	ldw	r2,-12(fp)
   12f78:	10800048 	cmpgei	r2,r2,1
   12f7c:	103fb51e 	bne	r2,zero,12e54 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12f80:	e0fffa17 	ldw	r3,-24(fp)
   12f84:	e0bffc17 	ldw	r2,-16(fp)
   12f88:	18801926 	beq	r3,r2,12ff0 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12f8c:	0005303a 	rdctl	r2,status
   12f90:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12f94:	e0fff517 	ldw	r3,-44(fp)
   12f98:	00bfff84 	movi	r2,-2
   12f9c:	1884703a 	and	r2,r3,r2
   12fa0:	1001703a 	wrctl	status,r2
  
  return context;
   12fa4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12fa8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12fac:	e0bffb17 	ldw	r2,-20(fp)
   12fb0:	10800817 	ldw	r2,32(r2)
   12fb4:	10c00054 	ori	r3,r2,1
   12fb8:	e0bffb17 	ldw	r2,-20(fp)
   12fbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12fc0:	e0bffb17 	ldw	r2,-20(fp)
   12fc4:	10800017 	ldw	r2,0(r2)
   12fc8:	11000104 	addi	r4,r2,4
   12fcc:	e0bffb17 	ldw	r2,-20(fp)
   12fd0:	10800817 	ldw	r2,32(r2)
   12fd4:	1007883a 	mov	r3,r2
   12fd8:	2005883a 	mov	r2,r4
   12fdc:	10c00035 	stwio	r3,0(r2)
   12fe0:	e0bff917 	ldw	r2,-28(fp)
   12fe4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12fe8:	e0bff417 	ldw	r2,-48(fp)
   12fec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12ff0:	e0fffa17 	ldw	r3,-24(fp)
   12ff4:	e0bffc17 	ldw	r2,-16(fp)
   12ff8:	18800526 	beq	r3,r2,13010 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   12ffc:	e0fffa17 	ldw	r3,-24(fp)
   13000:	e0bffc17 	ldw	r2,-16(fp)
   13004:	1887c83a 	sub	r3,r3,r2
   13008:	e0ffff15 	stw	r3,-4(fp)
   1300c:	00000906 	br	13034 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   13010:	e0bffe17 	ldw	r2,-8(fp)
   13014:	1090000c 	andi	r2,r2,16384
   13018:	1005003a 	cmpeq	r2,r2,zero
   1301c:	1000031e 	bne	r2,zero,1302c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   13020:	00bffd44 	movi	r2,-11
   13024:	e0bfff15 	stw	r2,-4(fp)
   13028:	00000206 	br	13034 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   1302c:	00bffec4 	movi	r2,-5
   13030:	e0bfff15 	stw	r2,-4(fp)
   13034:	e0bfff17 	ldw	r2,-4(fp)
}
   13038:	e037883a 	mov	sp,fp
   1303c:	dfc00117 	ldw	ra,4(sp)
   13040:	df000017 	ldw	fp,0(sp)
   13044:	dec00204 	addi	sp,sp,8
   13048:	f800283a 	ret

0001304c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   1304c:	defff204 	addi	sp,sp,-56
   13050:	dfc00d15 	stw	ra,52(sp)
   13054:	df000c15 	stw	fp,48(sp)
   13058:	df000c04 	addi	fp,sp,48
   1305c:	e13ffb15 	stw	r4,-20(fp)
   13060:	e17ffc15 	stw	r5,-16(fp)
   13064:	e1bffd15 	stw	r6,-12(fp)
   13068:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   1306c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   13070:	e0bffc17 	ldw	r2,-16(fp)
   13074:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13078:	00003a06 	br	13164 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   1307c:	e0bffb17 	ldw	r2,-20(fp)
   13080:	10800c17 	ldw	r2,48(r2)
   13084:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   13088:	e0bffb17 	ldw	r2,-20(fp)
   1308c:	10800d17 	ldw	r2,52(r2)
   13090:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   13094:	e0fffa17 	ldw	r3,-24(fp)
   13098:	e0bff917 	ldw	r2,-28(fp)
   1309c:	1880062e 	bgeu	r3,r2,130b8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   130a0:	e0fff917 	ldw	r3,-28(fp)
   130a4:	e0bffa17 	ldw	r2,-24(fp)
   130a8:	1885c83a 	sub	r2,r3,r2
   130ac:	10bfffc4 	addi	r2,r2,-1
   130b0:	e0bff815 	stw	r2,-32(fp)
   130b4:	00000c06 	br	130e8 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   130b8:	e0bff917 	ldw	r2,-28(fp)
   130bc:	1005003a 	cmpeq	r2,r2,zero
   130c0:	1000051e 	bne	r2,zero,130d8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   130c4:	00820004 	movi	r2,2048
   130c8:	e0fffa17 	ldw	r3,-24(fp)
   130cc:	10c5c83a 	sub	r2,r2,r3
   130d0:	e0bff815 	stw	r2,-32(fp)
   130d4:	00000406 	br	130e8 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   130d8:	0081ffc4 	movi	r2,2047
   130dc:	e0fffa17 	ldw	r3,-24(fp)
   130e0:	10c5c83a 	sub	r2,r2,r3
   130e4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   130e8:	e0bff817 	ldw	r2,-32(fp)
   130ec:	1005003a 	cmpeq	r2,r2,zero
   130f0:	10001f1e 	bne	r2,zero,13170 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   130f4:	e0fffd17 	ldw	r3,-12(fp)
   130f8:	e0bff817 	ldw	r2,-32(fp)
   130fc:	1880022e 	bgeu	r3,r2,13108 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   13100:	e0bffd17 	ldw	r2,-12(fp)
   13104:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   13108:	e0bffb17 	ldw	r2,-20(fp)
   1310c:	10c20e04 	addi	r3,r2,2104
   13110:	e0bffa17 	ldw	r2,-24(fp)
   13114:	1885883a 	add	r2,r3,r2
   13118:	e0fffc17 	ldw	r3,-16(fp)
   1311c:	1009883a 	mov	r4,r2
   13120:	180b883a 	mov	r5,r3
   13124:	e1bff817 	ldw	r6,-32(fp)
   13128:	00039640 	call	3964 <memcpy>
      ptr   += n;
   1312c:	e0fff817 	ldw	r3,-32(fp)
   13130:	e0bffc17 	ldw	r2,-16(fp)
   13134:	10c5883a 	add	r2,r2,r3
   13138:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   1313c:	e0fffd17 	ldw	r3,-12(fp)
   13140:	e0bff817 	ldw	r2,-32(fp)
   13144:	1885c83a 	sub	r2,r3,r2
   13148:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   1314c:	e0fffa17 	ldw	r3,-24(fp)
   13150:	e0bff817 	ldw	r2,-32(fp)
   13154:	1885883a 	add	r2,r3,r2
   13158:	10c1ffcc 	andi	r3,r2,2047
   1315c:	e0bffb17 	ldw	r2,-20(fp)
   13160:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   13164:	e0bffd17 	ldw	r2,-12(fp)
   13168:	10800048 	cmpgei	r2,r2,1
   1316c:	103fc31e 	bne	r2,zero,1307c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13170:	0005303a 	rdctl	r2,status
   13174:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13178:	e0fff517 	ldw	r3,-44(fp)
   1317c:	00bfff84 	movi	r2,-2
   13180:	1884703a 	and	r2,r3,r2
   13184:	1001703a 	wrctl	status,r2
  
  return context;
   13188:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1318c:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13190:	e0bffb17 	ldw	r2,-20(fp)
   13194:	10800817 	ldw	r2,32(r2)
   13198:	10c00094 	ori	r3,r2,2
   1319c:	e0bffb17 	ldw	r2,-20(fp)
   131a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   131a4:	e0bffb17 	ldw	r2,-20(fp)
   131a8:	10800017 	ldw	r2,0(r2)
   131ac:	11000104 	addi	r4,r2,4
   131b0:	e0bffb17 	ldw	r2,-20(fp)
   131b4:	10800817 	ldw	r2,32(r2)
   131b8:	1007883a 	mov	r3,r2
   131bc:	2005883a 	mov	r2,r4
   131c0:	10c00035 	stwio	r3,0(r2)
   131c4:	e0bff717 	ldw	r2,-36(fp)
   131c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131cc:	e0bff417 	ldw	r2,-48(fp)
   131d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   131d4:	e0bffd17 	ldw	r2,-12(fp)
   131d8:	10800050 	cmplti	r2,r2,1
   131dc:	1000111e 	bne	r2,zero,13224 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   131e0:	e0bffe17 	ldw	r2,-8(fp)
   131e4:	1090000c 	andi	r2,r2,16384
   131e8:	1004c03a 	cmpne	r2,r2,zero
   131ec:	1000101e 	bne	r2,zero,13230 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   131f0:	e0bffb17 	ldw	r2,-20(fp)
   131f4:	10c00d17 	ldw	r3,52(r2)
   131f8:	e0bff917 	ldw	r2,-28(fp)
   131fc:	1880051e 	bne	r3,r2,13214 <altera_avalon_jtag_uart_write+0x1c8>
   13200:	e0bffb17 	ldw	r2,-20(fp)
   13204:	10c00917 	ldw	r3,36(r2)
   13208:	e0bffb17 	ldw	r2,-20(fp)
   1320c:	10800117 	ldw	r2,4(r2)
   13210:	18bff736 	bltu	r3,r2,131f0 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   13214:	e0bffb17 	ldw	r2,-20(fp)
   13218:	10c00d17 	ldw	r3,52(r2)
   1321c:	e0bff917 	ldw	r2,-28(fp)
   13220:	18800326 	beq	r3,r2,13230 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   13224:	e0bffd17 	ldw	r2,-12(fp)
   13228:	10800048 	cmpgei	r2,r2,1
   1322c:	103fcd1e 	bne	r2,zero,13164 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   13230:	e0fffc17 	ldw	r3,-16(fp)
   13234:	e0bff617 	ldw	r2,-40(fp)
   13238:	18800526 	beq	r3,r2,13250 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   1323c:	e0fffc17 	ldw	r3,-16(fp)
   13240:	e0bff617 	ldw	r2,-40(fp)
   13244:	1887c83a 	sub	r3,r3,r2
   13248:	e0ffff15 	stw	r3,-4(fp)
   1324c:	00000906 	br	13274 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   13250:	e0bffe17 	ldw	r2,-8(fp)
   13254:	1090000c 	andi	r2,r2,16384
   13258:	1005003a 	cmpeq	r2,r2,zero
   1325c:	1000031e 	bne	r2,zero,1326c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   13260:	00bffd44 	movi	r2,-11
   13264:	e0bfff15 	stw	r2,-4(fp)
   13268:	00000206 	br	13274 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   1326c:	00bffec4 	movi	r2,-5
   13270:	e0bfff15 	stw	r2,-4(fp)
   13274:	e0bfff17 	ldw	r2,-4(fp)
}
   13278:	e037883a 	mov	sp,fp
   1327c:	dfc00117 	ldw	ra,4(sp)
   13280:	df000017 	ldw	fp,0(sp)
   13284:	dec00204 	addi	sp,sp,8
   13288:	f800283a 	ret

0001328c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   1328c:	defffa04 	addi	sp,sp,-24
   13290:	dfc00515 	stw	ra,20(sp)
   13294:	df000415 	stw	fp,16(sp)
   13298:	df000404 	addi	fp,sp,16
   1329c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   132a0:	e0bfff17 	ldw	r2,-4(fp)
   132a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   132a8:	e0bfff17 	ldw	r2,-4(fp)
   132ac:	10800104 	addi	r2,r2,4
   132b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   132b4:	0005303a 	rdctl	r2,status
   132b8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   132bc:	e0fffd17 	ldw	r3,-12(fp)
   132c0:	00bfff84 	movi	r2,-2
   132c4:	1884703a 	and	r2,r3,r2
   132c8:	1001703a 	wrctl	status,r2
  
  return context;
   132cc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   132d0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   132d4:	0013e940 	call	13e94 <alt_tick>
   132d8:	e0bffe17 	ldw	r2,-8(fp)
   132dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   132e0:	e0bffc17 	ldw	r2,-16(fp)
   132e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   132e8:	e037883a 	mov	sp,fp
   132ec:	dfc00117 	ldw	ra,4(sp)
   132f0:	df000017 	ldw	fp,0(sp)
   132f4:	dec00204 	addi	sp,sp,8
   132f8:	f800283a 	ret

000132fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   132fc:	defff804 	addi	sp,sp,-32
   13300:	dfc00715 	stw	ra,28(sp)
   13304:	df000615 	stw	fp,24(sp)
   13308:	df000604 	addi	fp,sp,24
   1330c:	e13ffc15 	stw	r4,-16(fp)
   13310:	e17ffd15 	stw	r5,-12(fp)
   13314:	e1bffe15 	stw	r6,-8(fp)
   13318:	e1ffff15 	stw	r7,-4(fp)
   1331c:	e0bfff17 	ldw	r2,-4(fp)
   13320:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13324:	008000b4 	movhi	r2,2
   13328:	10a27904 	addi	r2,r2,-30236
   1332c:	10800017 	ldw	r2,0(r2)
   13330:	1004c03a 	cmpne	r2,r2,zero
   13334:	1000041e 	bne	r2,zero,13348 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   13338:	00c000b4 	movhi	r3,2
   1333c:	18e27904 	addi	r3,r3,-30236
   13340:	e0bffb17 	ldw	r2,-20(fp)
   13344:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13348:	e0bffc17 	ldw	r2,-16(fp)
   1334c:	10800104 	addi	r2,r2,4
   13350:	1007883a 	mov	r3,r2
   13354:	008001c4 	movi	r2,7
   13358:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1335c:	d8000015 	stw	zero,0(sp)
   13360:	e13ffd17 	ldw	r4,-12(fp)
   13364:	e17ffe17 	ldw	r5,-8(fp)
   13368:	01800074 	movhi	r6,1
   1336c:	318ca304 	addi	r6,r6,12940
   13370:	e1fffc17 	ldw	r7,-16(fp)
   13374:	00137300 	call	13730 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13378:	e037883a 	mov	sp,fp
   1337c:	dfc00117 	ldw	ra,4(sp)
   13380:	df000017 	ldw	fp,0(sp)
   13384:	dec00204 	addi	sp,sp,8
   13388:	f800283a 	ret

0001338c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   1338c:	defff404 	addi	sp,sp,-48
   13390:	df000b15 	stw	fp,44(sp)
   13394:	df000b04 	addi	fp,sp,44
   13398:	e13ffb15 	stw	r4,-20(fp)
   1339c:	e17ffc15 	stw	r5,-16(fp)
   133a0:	e1bffd15 	stw	r6,-12(fp)
   133a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   133a8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   133ac:	008000b4 	movhi	r2,2
   133b0:	10a27904 	addi	r2,r2,-30236
   133b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   133b8:	1005003a 	cmpeq	r2,r2,zero
   133bc:	1000411e 	bne	r2,zero,134c4 <alt_alarm_start+0x138>
  {
    if (alarm)
   133c0:	e0bffb17 	ldw	r2,-20(fp)
   133c4:	1005003a 	cmpeq	r2,r2,zero
   133c8:	10003b1e 	bne	r2,zero,134b8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   133cc:	e0fffb17 	ldw	r3,-20(fp)
   133d0:	e0bffd17 	ldw	r2,-12(fp)
   133d4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   133d8:	e0fffb17 	ldw	r3,-20(fp)
   133dc:	e0bffe17 	ldw	r2,-8(fp)
   133e0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   133e4:	0005303a 	rdctl	r2,status
   133e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   133ec:	e0fff817 	ldw	r3,-32(fp)
   133f0:	00bfff84 	movi	r2,-2
   133f4:	1884703a 	and	r2,r3,r2
   133f8:	1001703a 	wrctl	status,r2
  
  return context;
   133fc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   13400:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13404:	008000b4 	movhi	r2,2
   13408:	10a27a04 	addi	r2,r2,-30232
   1340c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   13410:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13414:	e0fffc17 	ldw	r3,-16(fp)
   13418:	e0bff917 	ldw	r2,-28(fp)
   1341c:	1885883a 	add	r2,r3,r2
   13420:	10c00044 	addi	r3,r2,1
   13424:	e0bffb17 	ldw	r2,-20(fp)
   13428:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1342c:	e0bffb17 	ldw	r2,-20(fp)
   13430:	10c00217 	ldw	r3,8(r2)
   13434:	e0bff917 	ldw	r2,-28(fp)
   13438:	1880042e 	bgeu	r3,r2,1344c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1343c:	e0fffb17 	ldw	r3,-20(fp)
   13440:	00800044 	movi	r2,1
   13444:	18800405 	stb	r2,16(r3)
   13448:	00000206 	br	13454 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1344c:	e0bffb17 	ldw	r2,-20(fp)
   13450:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   13454:	e0fffb17 	ldw	r3,-20(fp)
   13458:	00800074 	movhi	r2,1
   1345c:	109ba504 	addi	r2,r2,28308
   13460:	e0bff615 	stw	r2,-40(fp)
   13464:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13468:	e0fff717 	ldw	r3,-36(fp)
   1346c:	e0bff617 	ldw	r2,-40(fp)
   13470:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   13474:	e0bff617 	ldw	r2,-40(fp)
   13478:	10c00017 	ldw	r3,0(r2)
   1347c:	e0bff717 	ldw	r2,-36(fp)
   13480:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   13484:	e0bff617 	ldw	r2,-40(fp)
   13488:	10c00017 	ldw	r3,0(r2)
   1348c:	e0bff717 	ldw	r2,-36(fp)
   13490:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   13494:	e0fff617 	ldw	r3,-40(fp)
   13498:	e0bff717 	ldw	r2,-36(fp)
   1349c:	18800015 	stw	r2,0(r3)
   134a0:	e0bffa17 	ldw	r2,-24(fp)
   134a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   134a8:	e0bff517 	ldw	r2,-44(fp)
   134ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   134b0:	e03fff15 	stw	zero,-4(fp)
   134b4:	00000506 	br	134cc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   134b8:	00bffa84 	movi	r2,-22
   134bc:	e0bfff15 	stw	r2,-4(fp)
   134c0:	00000206 	br	134cc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   134c4:	00bfde84 	movi	r2,-134
   134c8:	e0bfff15 	stw	r2,-4(fp)
   134cc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   134d0:	e037883a 	mov	sp,fp
   134d4:	df000017 	ldw	fp,0(sp)
   134d8:	dec00104 	addi	sp,sp,4
   134dc:	f800283a 	ret

000134e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   134e0:	defffe04 	addi	sp,sp,-8
   134e4:	df000115 	stw	fp,4(sp)
   134e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   134ec:	e03fff15 	stw	zero,-4(fp)
   134f0:	00000506 	br	13508 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   134f4:	e0bfff17 	ldw	r2,-4(fp)
   134f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   134fc:	e0bfff17 	ldw	r2,-4(fp)
   13500:	10800804 	addi	r2,r2,32
   13504:	e0bfff15 	stw	r2,-4(fp)
   13508:	e0bfff17 	ldw	r2,-4(fp)
   1350c:	10820030 	cmpltui	r2,r2,2048
   13510:	103ff81e 	bne	r2,zero,134f4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13514:	e037883a 	mov	sp,fp
   13518:	df000017 	ldw	fp,0(sp)
   1351c:	dec00104 	addi	sp,sp,4
   13520:	f800283a 	ret

00013524 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13524:	defff904 	addi	sp,sp,-28
   13528:	dfc00615 	stw	ra,24(sp)
   1352c:	df000515 	stw	fp,20(sp)
   13530:	df000504 	addi	fp,sp,20
   13534:	e13ffd15 	stw	r4,-12(fp)
   13538:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1353c:	e0bffd17 	ldw	r2,-12(fp)
   13540:	1005003a 	cmpeq	r2,r2,zero
   13544:	1000041e 	bne	r2,zero,13558 <alt_dev_llist_insert+0x34>
   13548:	e0bffd17 	ldw	r2,-12(fp)
   1354c:	10800217 	ldw	r2,8(r2)
   13550:	1004c03a 	cmpne	r2,r2,zero
   13554:	1000071e 	bne	r2,zero,13574 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   13558:	00135d80 	call	135d8 <alt_get_errno>
   1355c:	1007883a 	mov	r3,r2
   13560:	00800584 	movi	r2,22
   13564:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13568:	00bffa84 	movi	r2,-22
   1356c:	e0bfff15 	stw	r2,-4(fp)
   13570:	00001306 	br	135c0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13574:	e0fffd17 	ldw	r3,-12(fp)
   13578:	e0bffe17 	ldw	r2,-8(fp)
   1357c:	e0bffb15 	stw	r2,-20(fp)
   13580:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13584:	e0fffc17 	ldw	r3,-16(fp)
   13588:	e0bffb17 	ldw	r2,-20(fp)
   1358c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   13590:	e0bffb17 	ldw	r2,-20(fp)
   13594:	10c00017 	ldw	r3,0(r2)
   13598:	e0bffc17 	ldw	r2,-16(fp)
   1359c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   135a0:	e0bffb17 	ldw	r2,-20(fp)
   135a4:	10c00017 	ldw	r3,0(r2)
   135a8:	e0bffc17 	ldw	r2,-16(fp)
   135ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   135b0:	e0fffb17 	ldw	r3,-20(fp)
   135b4:	e0bffc17 	ldw	r2,-16(fp)
   135b8:	18800015 	stw	r2,0(r3)

  return 0;  
   135bc:	e03fff15 	stw	zero,-4(fp)
   135c0:	e0bfff17 	ldw	r2,-4(fp)
}
   135c4:	e037883a 	mov	sp,fp
   135c8:	dfc00117 	ldw	ra,4(sp)
   135cc:	df000017 	ldw	fp,0(sp)
   135d0:	dec00204 	addi	sp,sp,8
   135d4:	f800283a 	ret

000135d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135d8:	defffd04 	addi	sp,sp,-12
   135dc:	dfc00215 	stw	ra,8(sp)
   135e0:	df000115 	stw	fp,4(sp)
   135e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   135e8:	00800074 	movhi	r2,1
   135ec:	109ba204 	addi	r2,r2,28296
   135f0:	10800017 	ldw	r2,0(r2)
   135f4:	1005003a 	cmpeq	r2,r2,zero
   135f8:	1000061e 	bne	r2,zero,13614 <alt_get_errno+0x3c>
   135fc:	00800074 	movhi	r2,1
   13600:	109ba204 	addi	r2,r2,28296
   13604:	10800017 	ldw	r2,0(r2)
   13608:	103ee83a 	callr	r2
   1360c:	e0bfff15 	stw	r2,-4(fp)
   13610:	00000306 	br	13620 <alt_get_errno+0x48>
   13614:	008000b4 	movhi	r2,2
   13618:	10a27104 	addi	r2,r2,-30268
   1361c:	e0bfff15 	stw	r2,-4(fp)
   13620:	e0bfff17 	ldw	r2,-4(fp)
}
   13624:	e037883a 	mov	sp,fp
   13628:	dfc00117 	ldw	ra,4(sp)
   1362c:	df000017 	ldw	fp,0(sp)
   13630:	dec00204 	addi	sp,sp,8
   13634:	f800283a 	ret

00013638 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13638:	defffd04 	addi	sp,sp,-12
   1363c:	dfc00215 	stw	ra,8(sp)
   13640:	df000115 	stw	fp,4(sp)
   13644:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13648:	00bfff04 	movi	r2,-4
   1364c:	00c00074 	movhi	r3,1
   13650:	18d1b204 	addi	r3,r3,18120
   13654:	1885883a 	add	r2,r3,r2
   13658:	e0bfff15 	stw	r2,-4(fp)
   1365c:	00000606 	br	13678 <_do_ctors+0x40>
        (*ctor) (); 
   13660:	e0bfff17 	ldw	r2,-4(fp)
   13664:	10800017 	ldw	r2,0(r2)
   13668:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1366c:	e0bfff17 	ldw	r2,-4(fp)
   13670:	10bfff04 	addi	r2,r2,-4
   13674:	e0bfff15 	stw	r2,-4(fp)
   13678:	e0ffff17 	ldw	r3,-4(fp)
   1367c:	00800074 	movhi	r2,1
   13680:	1091b104 	addi	r2,r2,18116
   13684:	18bff62e 	bgeu	r3,r2,13660 <_do_ctors+0x28>
        (*ctor) (); 
}
   13688:	e037883a 	mov	sp,fp
   1368c:	dfc00117 	ldw	ra,4(sp)
   13690:	df000017 	ldw	fp,0(sp)
   13694:	dec00204 	addi	sp,sp,8
   13698:	f800283a 	ret

0001369c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   1369c:	defffd04 	addi	sp,sp,-12
   136a0:	dfc00215 	stw	ra,8(sp)
   136a4:	df000115 	stw	fp,4(sp)
   136a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   136ac:	00bfff04 	movi	r2,-4
   136b0:	00c00074 	movhi	r3,1
   136b4:	18d1b204 	addi	r3,r3,18120
   136b8:	1885883a 	add	r2,r3,r2
   136bc:	e0bfff15 	stw	r2,-4(fp)
   136c0:	00000606 	br	136dc <_do_dtors+0x40>
        (*dtor) (); 
   136c4:	e0bfff17 	ldw	r2,-4(fp)
   136c8:	10800017 	ldw	r2,0(r2)
   136cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   136d0:	e0bfff17 	ldw	r2,-4(fp)
   136d4:	10bfff04 	addi	r2,r2,-4
   136d8:	e0bfff15 	stw	r2,-4(fp)
   136dc:	e0ffff17 	ldw	r3,-4(fp)
   136e0:	00800074 	movhi	r2,1
   136e4:	1091b204 	addi	r2,r2,18120
   136e8:	18bff62e 	bgeu	r3,r2,136c4 <_do_dtors+0x28>
        (*dtor) (); 
}
   136ec:	e037883a 	mov	sp,fp
   136f0:	dfc00117 	ldw	ra,4(sp)
   136f4:	df000017 	ldw	fp,0(sp)
   136f8:	dec00204 	addi	sp,sp,8
   136fc:	f800283a 	ret

00013700 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13700:	defffe04 	addi	sp,sp,-8
   13704:	dfc00115 	stw	ra,4(sp)
   13708:	df000015 	stw	fp,0(sp)
   1370c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13710:	0009883a 	mov	r4,zero
   13714:	01440004 	movi	r5,4096
   13718:	001422c0 	call	1422c <alt_icache_flush>
#endif
}
   1371c:	e037883a 	mov	sp,fp
   13720:	dfc00117 	ldw	ra,4(sp)
   13724:	df000017 	ldw	fp,0(sp)
   13728:	dec00204 	addi	sp,sp,8
   1372c:	f800283a 	ret

00013730 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13730:	defff904 	addi	sp,sp,-28
   13734:	dfc00615 	stw	ra,24(sp)
   13738:	df000515 	stw	fp,20(sp)
   1373c:	df000504 	addi	fp,sp,20
   13740:	e13ffc15 	stw	r4,-16(fp)
   13744:	e17ffd15 	stw	r5,-12(fp)
   13748:	e1bffe15 	stw	r6,-8(fp)
   1374c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13750:	e0800217 	ldw	r2,8(fp)
   13754:	d8800015 	stw	r2,0(sp)
   13758:	e13ffc17 	ldw	r4,-16(fp)
   1375c:	e17ffd17 	ldw	r5,-12(fp)
   13760:	e1bffe17 	ldw	r6,-8(fp)
   13764:	e1ffff17 	ldw	r7,-4(fp)
   13768:	00139040 	call	13904 <alt_iic_isr_register>
}  
   1376c:	e037883a 	mov	sp,fp
   13770:	dfc00117 	ldw	ra,4(sp)
   13774:	df000017 	ldw	fp,0(sp)
   13778:	dec00204 	addi	sp,sp,8
   1377c:	f800283a 	ret

00013780 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   13780:	defff904 	addi	sp,sp,-28
   13784:	df000615 	stw	fp,24(sp)
   13788:	df000604 	addi	fp,sp,24
   1378c:	e13ffe15 	stw	r4,-8(fp)
   13790:	e17fff15 	stw	r5,-4(fp)
   13794:	e0bfff17 	ldw	r2,-4(fp)
   13798:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1379c:	0005303a 	rdctl	r2,status
   137a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   137a4:	e0fffb17 	ldw	r3,-20(fp)
   137a8:	00bfff84 	movi	r2,-2
   137ac:	1884703a 	and	r2,r3,r2
   137b0:	1001703a 	wrctl	status,r2
  
  return context;
   137b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   137b8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   137bc:	e0fffc17 	ldw	r3,-16(fp)
   137c0:	00800044 	movi	r2,1
   137c4:	10c4983a 	sll	r2,r2,r3
   137c8:	1007883a 	mov	r3,r2
   137cc:	008000b4 	movhi	r2,2
   137d0:	10a27804 	addi	r2,r2,-30240
   137d4:	10800017 	ldw	r2,0(r2)
   137d8:	1886b03a 	or	r3,r3,r2
   137dc:	008000b4 	movhi	r2,2
   137e0:	10a27804 	addi	r2,r2,-30240
   137e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   137e8:	008000b4 	movhi	r2,2
   137ec:	10a27804 	addi	r2,r2,-30240
   137f0:	10800017 	ldw	r2,0(r2)
   137f4:	100170fa 	wrctl	ienable,r2
   137f8:	e0bffd17 	ldw	r2,-12(fp)
   137fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13800:	e0bffa17 	ldw	r2,-24(fp)
   13804:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13808:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1380c:	e037883a 	mov	sp,fp
   13810:	df000017 	ldw	fp,0(sp)
   13814:	dec00104 	addi	sp,sp,4
   13818:	f800283a 	ret

0001381c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1381c:	defff904 	addi	sp,sp,-28
   13820:	df000615 	stw	fp,24(sp)
   13824:	df000604 	addi	fp,sp,24
   13828:	e13ffe15 	stw	r4,-8(fp)
   1382c:	e17fff15 	stw	r5,-4(fp)
   13830:	e0bfff17 	ldw	r2,-4(fp)
   13834:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13838:	0005303a 	rdctl	r2,status
   1383c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13840:	e0fffb17 	ldw	r3,-20(fp)
   13844:	00bfff84 	movi	r2,-2
   13848:	1884703a 	and	r2,r3,r2
   1384c:	1001703a 	wrctl	status,r2
  
  return context;
   13850:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13854:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   13858:	e0fffc17 	ldw	r3,-16(fp)
   1385c:	00800044 	movi	r2,1
   13860:	10c4983a 	sll	r2,r2,r3
   13864:	0084303a 	nor	r2,zero,r2
   13868:	1007883a 	mov	r3,r2
   1386c:	008000b4 	movhi	r2,2
   13870:	10a27804 	addi	r2,r2,-30240
   13874:	10800017 	ldw	r2,0(r2)
   13878:	1886703a 	and	r3,r3,r2
   1387c:	008000b4 	movhi	r2,2
   13880:	10a27804 	addi	r2,r2,-30240
   13884:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13888:	008000b4 	movhi	r2,2
   1388c:	10a27804 	addi	r2,r2,-30240
   13890:	10800017 	ldw	r2,0(r2)
   13894:	100170fa 	wrctl	ienable,r2
   13898:	e0bffd17 	ldw	r2,-12(fp)
   1389c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   138a0:	e0bffa17 	ldw	r2,-24(fp)
   138a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   138a8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   138ac:	e037883a 	mov	sp,fp
   138b0:	df000017 	ldw	fp,0(sp)
   138b4:	dec00104 	addi	sp,sp,4
   138b8:	f800283a 	ret

000138bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   138bc:	defffc04 	addi	sp,sp,-16
   138c0:	df000315 	stw	fp,12(sp)
   138c4:	df000304 	addi	fp,sp,12
   138c8:	e13ffe15 	stw	r4,-8(fp)
   138cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   138d0:	000530fa 	rdctl	r2,ienable
   138d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   138d8:	e0ffff17 	ldw	r3,-4(fp)
   138dc:	00800044 	movi	r2,1
   138e0:	10c4983a 	sll	r2,r2,r3
   138e4:	1007883a 	mov	r3,r2
   138e8:	e0bffd17 	ldw	r2,-12(fp)
   138ec:	1884703a 	and	r2,r3,r2
   138f0:	1004c03a 	cmpne	r2,r2,zero
}
   138f4:	e037883a 	mov	sp,fp
   138f8:	df000017 	ldw	fp,0(sp)
   138fc:	dec00104 	addi	sp,sp,4
   13900:	f800283a 	ret

00013904 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13904:	defff404 	addi	sp,sp,-48
   13908:	dfc00b15 	stw	ra,44(sp)
   1390c:	df000a15 	stw	fp,40(sp)
   13910:	df000a04 	addi	fp,sp,40
   13914:	e13ffb15 	stw	r4,-20(fp)
   13918:	e17ffc15 	stw	r5,-16(fp)
   1391c:	e1bffd15 	stw	r6,-12(fp)
   13920:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   13924:	00bffa84 	movi	r2,-22
   13928:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1392c:	e0bffc17 	ldw	r2,-16(fp)
   13930:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13934:	e0bff917 	ldw	r2,-28(fp)
   13938:	10800808 	cmpgei	r2,r2,32
   1393c:	1000291e 	bne	r2,zero,139e4 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13940:	0005303a 	rdctl	r2,status
   13944:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13948:	e0fff717 	ldw	r3,-36(fp)
   1394c:	00bfff84 	movi	r2,-2
   13950:	1884703a 	and	r2,r3,r2
   13954:	1001703a 	wrctl	status,r2
  
  return context;
   13958:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1395c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   13960:	e0bff917 	ldw	r2,-28(fp)
   13964:	00c000b4 	movhi	r3,2
   13968:	18e2f604 	addi	r3,r3,-29736
   1396c:	100490fa 	slli	r2,r2,3
   13970:	10c7883a 	add	r3,r2,r3
   13974:	e0bffd17 	ldw	r2,-12(fp)
   13978:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1397c:	e0bff917 	ldw	r2,-28(fp)
   13980:	00c000b4 	movhi	r3,2
   13984:	18e2f604 	addi	r3,r3,-29736
   13988:	100490fa 	slli	r2,r2,3
   1398c:	10c5883a 	add	r2,r2,r3
   13990:	10c00104 	addi	r3,r2,4
   13994:	e0bffe17 	ldw	r2,-8(fp)
   13998:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   1399c:	e0bffd17 	ldw	r2,-12(fp)
   139a0:	1005003a 	cmpeq	r2,r2,zero
   139a4:	1000051e 	bne	r2,zero,139bc <alt_iic_isr_register+0xb8>
   139a8:	e17ff917 	ldw	r5,-28(fp)
   139ac:	e13ffb17 	ldw	r4,-20(fp)
   139b0:	00137800 	call	13780 <alt_ic_irq_enable>
   139b4:	e0bfff15 	stw	r2,-4(fp)
   139b8:	00000406 	br	139cc <alt_iic_isr_register+0xc8>
   139bc:	e17ff917 	ldw	r5,-28(fp)
   139c0:	e13ffb17 	ldw	r4,-20(fp)
   139c4:	001381c0 	call	1381c <alt_ic_irq_disable>
   139c8:	e0bfff15 	stw	r2,-4(fp)
   139cc:	e0bfff17 	ldw	r2,-4(fp)
   139d0:	e0bffa15 	stw	r2,-24(fp)
   139d4:	e0bff817 	ldw	r2,-32(fp)
   139d8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139dc:	e0bff617 	ldw	r2,-40(fp)
   139e0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   139e4:	e0bffa17 	ldw	r2,-24(fp)
}
   139e8:	e037883a 	mov	sp,fp
   139ec:	dfc00117 	ldw	ra,4(sp)
   139f0:	df000017 	ldw	fp,0(sp)
   139f4:	dec00204 	addi	sp,sp,8
   139f8:	f800283a 	ret

000139fc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   139fc:	defff904 	addi	sp,sp,-28
   13a00:	dfc00615 	stw	ra,24(sp)
   13a04:	df000515 	stw	fp,20(sp)
   13a08:	df000504 	addi	fp,sp,20
   13a0c:	e13ffc15 	stw	r4,-16(fp)
   13a10:	e17ffd15 	stw	r5,-12(fp)
   13a14:	e1bffe15 	stw	r6,-8(fp)
   13a18:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   13a1c:	e13ffd17 	ldw	r4,-12(fp)
   13a20:	e17ffe17 	ldw	r5,-8(fp)
   13a24:	e1bfff17 	ldw	r6,-4(fp)
   13a28:	0013c140 	call	13c14 <open>
   13a2c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   13a30:	e0bffb17 	ldw	r2,-20(fp)
   13a34:	1004803a 	cmplt	r2,r2,zero
   13a38:	10001c1e 	bne	r2,zero,13aac <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   13a3c:	e0bffb17 	ldw	r2,-20(fp)
   13a40:	00c00074 	movhi	r3,1
   13a44:	18d71e04 	addi	r3,r3,23672
   13a48:	10800324 	muli	r2,r2,12
   13a4c:	10c5883a 	add	r2,r2,r3
   13a50:	10c00017 	ldw	r3,0(r2)
   13a54:	e0bffc17 	ldw	r2,-16(fp)
   13a58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   13a5c:	e0bffb17 	ldw	r2,-20(fp)
   13a60:	00c00074 	movhi	r3,1
   13a64:	18d71e04 	addi	r3,r3,23672
   13a68:	10800324 	muli	r2,r2,12
   13a6c:	10c5883a 	add	r2,r2,r3
   13a70:	10800104 	addi	r2,r2,4
   13a74:	10c00017 	ldw	r3,0(r2)
   13a78:	e0bffc17 	ldw	r2,-16(fp)
   13a7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   13a80:	e0bffb17 	ldw	r2,-20(fp)
   13a84:	00c00074 	movhi	r3,1
   13a88:	18d71e04 	addi	r3,r3,23672
   13a8c:	10800324 	muli	r2,r2,12
   13a90:	10c5883a 	add	r2,r2,r3
   13a94:	10800204 	addi	r2,r2,8
   13a98:	10c00017 	ldw	r3,0(r2)
   13a9c:	e0bffc17 	ldw	r2,-16(fp)
   13aa0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   13aa4:	e13ffb17 	ldw	r4,-20(fp)
   13aa8:	001247c0 	call	1247c <alt_release_fd>
  }
} 
   13aac:	e037883a 	mov	sp,fp
   13ab0:	dfc00117 	ldw	ra,4(sp)
   13ab4:	df000017 	ldw	fp,0(sp)
   13ab8:	dec00204 	addi	sp,sp,8
   13abc:	f800283a 	ret

00013ac0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   13ac0:	defffb04 	addi	sp,sp,-20
   13ac4:	dfc00415 	stw	ra,16(sp)
   13ac8:	df000315 	stw	fp,12(sp)
   13acc:	df000304 	addi	fp,sp,12
   13ad0:	e13ffd15 	stw	r4,-12(fp)
   13ad4:	e17ffe15 	stw	r5,-8(fp)
   13ad8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   13adc:	01000074 	movhi	r4,1
   13ae0:	21172104 	addi	r4,r4,23684
   13ae4:	e17ffd17 	ldw	r5,-12(fp)
   13ae8:	01800044 	movi	r6,1
   13aec:	01c07fc4 	movi	r7,511
   13af0:	00139fc0 	call	139fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13af4:	01000074 	movhi	r4,1
   13af8:	21171e04 	addi	r4,r4,23672
   13afc:	e17ffe17 	ldw	r5,-8(fp)
   13b00:	000d883a 	mov	r6,zero
   13b04:	01c07fc4 	movi	r7,511
   13b08:	00139fc0 	call	139fc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   13b0c:	01000074 	movhi	r4,1
   13b10:	21172404 	addi	r4,r4,23696
   13b14:	e17fff17 	ldw	r5,-4(fp)
   13b18:	01800044 	movi	r6,1
   13b1c:	01c07fc4 	movi	r7,511
   13b20:	00139fc0 	call	139fc <alt_open_fd>
}  
   13b24:	e037883a 	mov	sp,fp
   13b28:	dfc00117 	ldw	ra,4(sp)
   13b2c:	df000017 	ldw	fp,0(sp)
   13b30:	dec00204 	addi	sp,sp,8
   13b34:	f800283a 	ret

00013b38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13b38:	defffc04 	addi	sp,sp,-16
   13b3c:	df000315 	stw	fp,12(sp)
   13b40:	df000304 	addi	fp,sp,12
   13b44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13b48:	e0bffe17 	ldw	r2,-8(fp)
   13b4c:	10800217 	ldw	r2,8(r2)
   13b50:	10d00034 	orhi	r3,r2,16384
   13b54:	e0bffe17 	ldw	r2,-8(fp)
   13b58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13b5c:	e03ffd15 	stw	zero,-12(fp)
   13b60:	00002006 	br	13be4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13b64:	e0bffd17 	ldw	r2,-12(fp)
   13b68:	00c00074 	movhi	r3,1
   13b6c:	18d71e04 	addi	r3,r3,23672
   13b70:	10800324 	muli	r2,r2,12
   13b74:	10c5883a 	add	r2,r2,r3
   13b78:	10c00017 	ldw	r3,0(r2)
   13b7c:	e0bffe17 	ldw	r2,-8(fp)
   13b80:	10800017 	ldw	r2,0(r2)
   13b84:	1880141e 	bne	r3,r2,13bd8 <alt_file_locked+0xa0>
   13b88:	e0bffd17 	ldw	r2,-12(fp)
   13b8c:	00c00074 	movhi	r3,1
   13b90:	18d71e04 	addi	r3,r3,23672
   13b94:	10800324 	muli	r2,r2,12
   13b98:	10c5883a 	add	r2,r2,r3
   13b9c:	10800204 	addi	r2,r2,8
   13ba0:	10800017 	ldw	r2,0(r2)
   13ba4:	1004403a 	cmpge	r2,r2,zero
   13ba8:	10000b1e 	bne	r2,zero,13bd8 <alt_file_locked+0xa0>
   13bac:	e0bffd17 	ldw	r2,-12(fp)
   13bb0:	10800324 	muli	r2,r2,12
   13bb4:	1007883a 	mov	r3,r2
   13bb8:	00800074 	movhi	r2,1
   13bbc:	10971e04 	addi	r2,r2,23672
   13bc0:	1887883a 	add	r3,r3,r2
   13bc4:	e0bffe17 	ldw	r2,-8(fp)
   13bc8:	18800326 	beq	r3,r2,13bd8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   13bcc:	00bffcc4 	movi	r2,-13
   13bd0:	e0bfff15 	stw	r2,-4(fp)
   13bd4:	00000a06 	br	13c00 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   13bd8:	e0bffd17 	ldw	r2,-12(fp)
   13bdc:	10800044 	addi	r2,r2,1
   13be0:	e0bffd15 	stw	r2,-12(fp)
   13be4:	00800074 	movhi	r2,1
   13be8:	109ba104 	addi	r2,r2,28292
   13bec:	10800017 	ldw	r2,0(r2)
   13bf0:	1007883a 	mov	r3,r2
   13bf4:	e0bffd17 	ldw	r2,-12(fp)
   13bf8:	18bfda2e 	bgeu	r3,r2,13b64 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   13bfc:	e03fff15 	stw	zero,-4(fp)
   13c00:	e0bfff17 	ldw	r2,-4(fp)
}
   13c04:	e037883a 	mov	sp,fp
   13c08:	df000017 	ldw	fp,0(sp)
   13c0c:	dec00104 	addi	sp,sp,4
   13c10:	f800283a 	ret

00013c14 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13c14:	defff404 	addi	sp,sp,-48
   13c18:	dfc00b15 	stw	ra,44(sp)
   13c1c:	df000a15 	stw	fp,40(sp)
   13c20:	df000a04 	addi	fp,sp,40
   13c24:	e13ffb15 	stw	r4,-20(fp)
   13c28:	e17ffc15 	stw	r5,-16(fp)
   13c2c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13c30:	00bfffc4 	movi	r2,-1
   13c34:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   13c38:	00bffb44 	movi	r2,-19
   13c3c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   13c40:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13c44:	e13ffb17 	ldw	r4,-20(fp)
   13c48:	01400074 	movhi	r5,1
   13c4c:	295b9f04 	addi	r5,r5,28284
   13c50:	0013fc00 	call	13fc0 <alt_find_dev>
   13c54:	e0bffa15 	stw	r2,-24(fp)
   13c58:	e0bffa17 	ldw	r2,-24(fp)
   13c5c:	1004c03a 	cmpne	r2,r2,zero
   13c60:	1000051e 	bne	r2,zero,13c78 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13c64:	e13ffb17 	ldw	r4,-20(fp)
   13c68:	00140540 	call	14054 <alt_find_file>
   13c6c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   13c70:	00800044 	movi	r2,1
   13c74:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13c78:	e0bffa17 	ldw	r2,-24(fp)
   13c7c:	1005003a 	cmpeq	r2,r2,zero
   13c80:	1000301e 	bne	r2,zero,13d44 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   13c84:	e13ffa17 	ldw	r4,-24(fp)
   13c88:	00141740 	call	14174 <alt_get_fd>
   13c8c:	e0bff815 	stw	r2,-32(fp)
   13c90:	e0bff817 	ldw	r2,-32(fp)
   13c94:	1004403a 	cmpge	r2,r2,zero
   13c98:	1000031e 	bne	r2,zero,13ca8 <open+0x94>
    {
      status = index;
   13c9c:	e0bff817 	ldw	r2,-32(fp)
   13ca0:	e0bff715 	stw	r2,-36(fp)
   13ca4:	00002906 	br	13d4c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   13ca8:	e0bff817 	ldw	r2,-32(fp)
   13cac:	10800324 	muli	r2,r2,12
   13cb0:	1007883a 	mov	r3,r2
   13cb4:	00800074 	movhi	r2,1
   13cb8:	10971e04 	addi	r2,r2,23672
   13cbc:	1885883a 	add	r2,r3,r2
   13cc0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   13cc4:	e0fffc17 	ldw	r3,-16(fp)
   13cc8:	00900034 	movhi	r2,16384
   13ccc:	10bfffc4 	addi	r2,r2,-1
   13cd0:	1886703a 	and	r3,r3,r2
   13cd4:	e0bff917 	ldw	r2,-28(fp)
   13cd8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   13cdc:	e0bff617 	ldw	r2,-40(fp)
   13ce0:	1004c03a 	cmpne	r2,r2,zero
   13ce4:	1000061e 	bne	r2,zero,13d00 <open+0xec>
   13ce8:	e13ff917 	ldw	r4,-28(fp)
   13cec:	0013b380 	call	13b38 <alt_file_locked>
   13cf0:	e0bff715 	stw	r2,-36(fp)
   13cf4:	e0bff717 	ldw	r2,-36(fp)
   13cf8:	1004803a 	cmplt	r2,r2,zero
   13cfc:	1000131e 	bne	r2,zero,13d4c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13d00:	e0bffa17 	ldw	r2,-24(fp)
   13d04:	10800317 	ldw	r2,12(r2)
   13d08:	1005003a 	cmpeq	r2,r2,zero
   13d0c:	1000091e 	bne	r2,zero,13d34 <open+0x120>
   13d10:	e0bffa17 	ldw	r2,-24(fp)
   13d14:	10800317 	ldw	r2,12(r2)
   13d18:	e13ff917 	ldw	r4,-28(fp)
   13d1c:	e17ffb17 	ldw	r5,-20(fp)
   13d20:	e1bffc17 	ldw	r6,-16(fp)
   13d24:	e1fffd17 	ldw	r7,-12(fp)
   13d28:	103ee83a 	callr	r2
   13d2c:	e0bfff15 	stw	r2,-4(fp)
   13d30:	00000106 	br	13d38 <open+0x124>
   13d34:	e03fff15 	stw	zero,-4(fp)
   13d38:	e0bfff17 	ldw	r2,-4(fp)
   13d3c:	e0bff715 	stw	r2,-36(fp)
   13d40:	00000206 	br	13d4c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13d44:	00bffb44 	movi	r2,-19
   13d48:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13d4c:	e0bff717 	ldw	r2,-36(fp)
   13d50:	1004403a 	cmpge	r2,r2,zero
   13d54:	1000091e 	bne	r2,zero,13d7c <open+0x168>
  {
    alt_release_fd (index);  
   13d58:	e13ff817 	ldw	r4,-32(fp)
   13d5c:	001247c0 	call	1247c <alt_release_fd>
    ALT_ERRNO = -status;
   13d60:	0013d9c0 	call	13d9c <alt_get_errno>
   13d64:	e0fff717 	ldw	r3,-36(fp)
   13d68:	00c7c83a 	sub	r3,zero,r3
   13d6c:	10c00015 	stw	r3,0(r2)
    return -1;
   13d70:	00bfffc4 	movi	r2,-1
   13d74:	e0bffe15 	stw	r2,-8(fp)
   13d78:	00000206 	br	13d84 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   13d7c:	e0bff817 	ldw	r2,-32(fp)
   13d80:	e0bffe15 	stw	r2,-8(fp)
   13d84:	e0bffe17 	ldw	r2,-8(fp)
}
   13d88:	e037883a 	mov	sp,fp
   13d8c:	dfc00117 	ldw	ra,4(sp)
   13d90:	df000017 	ldw	fp,0(sp)
   13d94:	dec00204 	addi	sp,sp,8
   13d98:	f800283a 	ret

00013d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13d9c:	defffd04 	addi	sp,sp,-12
   13da0:	dfc00215 	stw	ra,8(sp)
   13da4:	df000115 	stw	fp,4(sp)
   13da8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13dac:	00800074 	movhi	r2,1
   13db0:	109ba204 	addi	r2,r2,28296
   13db4:	10800017 	ldw	r2,0(r2)
   13db8:	1005003a 	cmpeq	r2,r2,zero
   13dbc:	1000061e 	bne	r2,zero,13dd8 <alt_get_errno+0x3c>
   13dc0:	00800074 	movhi	r2,1
   13dc4:	109ba204 	addi	r2,r2,28296
   13dc8:	10800017 	ldw	r2,0(r2)
   13dcc:	103ee83a 	callr	r2
   13dd0:	e0bfff15 	stw	r2,-4(fp)
   13dd4:	00000306 	br	13de4 <alt_get_errno+0x48>
   13dd8:	008000b4 	movhi	r2,2
   13ddc:	10a27104 	addi	r2,r2,-30268
   13de0:	e0bfff15 	stw	r2,-4(fp)
   13de4:	e0bfff17 	ldw	r2,-4(fp)
}
   13de8:	e037883a 	mov	sp,fp
   13dec:	dfc00117 	ldw	ra,4(sp)
   13df0:	df000017 	ldw	fp,0(sp)
   13df4:	dec00204 	addi	sp,sp,8
   13df8:	f800283a 	ret

00013dfc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13dfc:	defffa04 	addi	sp,sp,-24
   13e00:	df000515 	stw	fp,20(sp)
   13e04:	df000504 	addi	fp,sp,20
   13e08:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13e0c:	0005303a 	rdctl	r2,status
   13e10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13e14:	e0fffd17 	ldw	r3,-12(fp)
   13e18:	00bfff84 	movi	r2,-2
   13e1c:	1884703a 	and	r2,r3,r2
   13e20:	1001703a 	wrctl	status,r2
  
  return context;
   13e24:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13e28:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   13e2c:	e0bfff17 	ldw	r2,-4(fp)
   13e30:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13e34:	e0bffc17 	ldw	r2,-16(fp)
   13e38:	10c00017 	ldw	r3,0(r2)
   13e3c:	e0bffc17 	ldw	r2,-16(fp)
   13e40:	10800117 	ldw	r2,4(r2)
   13e44:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   13e48:	e0bffc17 	ldw	r2,-16(fp)
   13e4c:	10c00117 	ldw	r3,4(r2)
   13e50:	e0bffc17 	ldw	r2,-16(fp)
   13e54:	10800017 	ldw	r2,0(r2)
   13e58:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13e5c:	e0fffc17 	ldw	r3,-16(fp)
   13e60:	e0bffc17 	ldw	r2,-16(fp)
   13e64:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   13e68:	e0fffc17 	ldw	r3,-16(fp)
   13e6c:	e0bffc17 	ldw	r2,-16(fp)
   13e70:	18800015 	stw	r2,0(r3)
   13e74:	e0bffe17 	ldw	r2,-8(fp)
   13e78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13e7c:	e0bffb17 	ldw	r2,-20(fp)
   13e80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13e84:	e037883a 	mov	sp,fp
   13e88:	df000017 	ldw	fp,0(sp)
   13e8c:	dec00104 	addi	sp,sp,4
   13e90:	f800283a 	ret

00013e94 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13e94:	defffb04 	addi	sp,sp,-20
   13e98:	dfc00415 	stw	ra,16(sp)
   13e9c:	df000315 	stw	fp,12(sp)
   13ea0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13ea4:	d0a00f17 	ldw	r2,-32708(gp)
   13ea8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13eac:	d0a6e417 	ldw	r2,-25712(gp)
   13eb0:	10800044 	addi	r2,r2,1
   13eb4:	d0a6e415 	stw	r2,-25712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13eb8:	00003106 	br	13f80 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   13ebc:	e0bffe17 	ldw	r2,-8(fp)
   13ec0:	10800017 	ldw	r2,0(r2)
   13ec4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13ec8:	e0bffe17 	ldw	r2,-8(fp)
   13ecc:	10800403 	ldbu	r2,16(r2)
   13ed0:	10803fcc 	andi	r2,r2,255
   13ed4:	1005003a 	cmpeq	r2,r2,zero
   13ed8:	1000051e 	bne	r2,zero,13ef0 <alt_tick+0x5c>
   13edc:	d0a6e417 	ldw	r2,-25712(gp)
   13ee0:	1004c03a 	cmpne	r2,r2,zero
   13ee4:	1000021e 	bne	r2,zero,13ef0 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   13ee8:	e0bffe17 	ldw	r2,-8(fp)
   13eec:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13ef0:	e0bffe17 	ldw	r2,-8(fp)
   13ef4:	10c00217 	ldw	r3,8(r2)
   13ef8:	d0a6e417 	ldw	r2,-25712(gp)
   13efc:	10c01e36 	bltu	r2,r3,13f78 <alt_tick+0xe4>
   13f00:	e0bffe17 	ldw	r2,-8(fp)
   13f04:	10800403 	ldbu	r2,16(r2)
   13f08:	10803fcc 	andi	r2,r2,255
   13f0c:	1004c03a 	cmpne	r2,r2,zero
   13f10:	1000191e 	bne	r2,zero,13f78 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   13f14:	e0bffe17 	ldw	r2,-8(fp)
   13f18:	10c00317 	ldw	r3,12(r2)
   13f1c:	e0bffe17 	ldw	r2,-8(fp)
   13f20:	11000517 	ldw	r4,20(r2)
   13f24:	183ee83a 	callr	r3
   13f28:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13f2c:	e0bffd17 	ldw	r2,-12(fp)
   13f30:	1004c03a 	cmpne	r2,r2,zero
   13f34:	1000031e 	bne	r2,zero,13f44 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   13f38:	e13ffe17 	ldw	r4,-8(fp)
   13f3c:	0013dfc0 	call	13dfc <alt_alarm_stop>
   13f40:	00000d06 	br	13f78 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   13f44:	e0bffe17 	ldw	r2,-8(fp)
   13f48:	10c00217 	ldw	r3,8(r2)
   13f4c:	e0bffd17 	ldw	r2,-12(fp)
   13f50:	1887883a 	add	r3,r3,r2
   13f54:	e0bffe17 	ldw	r2,-8(fp)
   13f58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13f5c:	e0bffe17 	ldw	r2,-8(fp)
   13f60:	10c00217 	ldw	r3,8(r2)
   13f64:	d0a6e417 	ldw	r2,-25712(gp)
   13f68:	1880032e 	bgeu	r3,r2,13f78 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   13f6c:	e0fffe17 	ldw	r3,-8(fp)
   13f70:	00800044 	movi	r2,1
   13f74:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   13f78:	e0bfff17 	ldw	r2,-4(fp)
   13f7c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13f80:	d0e00f04 	addi	r3,gp,-32708
   13f84:	e0bffe17 	ldw	r2,-8(fp)
   13f88:	10ffcc1e 	bne	r2,r3,13ebc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   13f8c:	e037883a 	mov	sp,fp
   13f90:	dfc00117 	ldw	ra,4(sp)
   13f94:	df000017 	ldw	fp,0(sp)
   13f98:	dec00204 	addi	sp,sp,8
   13f9c:	f800283a 	ret

00013fa0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13fa0:	deffff04 	addi	sp,sp,-4
   13fa4:	df000015 	stw	fp,0(sp)
   13fa8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13fac:	000170fa 	wrctl	ienable,zero
}
   13fb0:	e037883a 	mov	sp,fp
   13fb4:	df000017 	ldw	fp,0(sp)
   13fb8:	dec00104 	addi	sp,sp,4
   13fbc:	f800283a 	ret

00013fc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13fc0:	defff904 	addi	sp,sp,-28
   13fc4:	dfc00615 	stw	ra,24(sp)
   13fc8:	df000515 	stw	fp,20(sp)
   13fcc:	df000504 	addi	fp,sp,20
   13fd0:	e13ffd15 	stw	r4,-12(fp)
   13fd4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13fd8:	e0bffe17 	ldw	r2,-8(fp)
   13fdc:	10800017 	ldw	r2,0(r2)
   13fe0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13fe4:	e13ffd17 	ldw	r4,-12(fp)
   13fe8:	00043480 	call	4348 <strlen>
   13fec:	10800044 	addi	r2,r2,1
   13ff0:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13ff4:	00000d06 	br	1402c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13ff8:	e0bffc17 	ldw	r2,-16(fp)
   13ffc:	11000217 	ldw	r4,8(r2)
   14000:	e1bffb17 	ldw	r6,-20(fp)
   14004:	e17ffd17 	ldw	r5,-12(fp)
   14008:	00143080 	call	14308 <memcmp>
   1400c:	1004c03a 	cmpne	r2,r2,zero
   14010:	1000031e 	bne	r2,zero,14020 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   14014:	e0bffc17 	ldw	r2,-16(fp)
   14018:	e0bfff15 	stw	r2,-4(fp)
   1401c:	00000706 	br	1403c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   14020:	e0bffc17 	ldw	r2,-16(fp)
   14024:	10800017 	ldw	r2,0(r2)
   14028:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1402c:	e0fffe17 	ldw	r3,-8(fp)
   14030:	e0bffc17 	ldw	r2,-16(fp)
   14034:	10fff01e 	bne	r2,r3,13ff8 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   14038:	e03fff15 	stw	zero,-4(fp)
   1403c:	e0bfff17 	ldw	r2,-4(fp)
}
   14040:	e037883a 	mov	sp,fp
   14044:	dfc00117 	ldw	ra,4(sp)
   14048:	df000017 	ldw	fp,0(sp)
   1404c:	dec00204 	addi	sp,sp,8
   14050:	f800283a 	ret

00014054 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   14054:	defffa04 	addi	sp,sp,-24
   14058:	dfc00515 	stw	ra,20(sp)
   1405c:	df000415 	stw	fp,16(sp)
   14060:	df000404 	addi	fp,sp,16
   14064:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   14068:	00800074 	movhi	r2,1
   1406c:	109b9d04 	addi	r2,r2,28276
   14070:	10800017 	ldw	r2,0(r2)
   14074:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14078:	00003306 	br	14148 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   1407c:	e0bffd17 	ldw	r2,-12(fp)
   14080:	11000217 	ldw	r4,8(r2)
   14084:	00043480 	call	4348 <strlen>
   14088:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   1408c:	e0bffd17 	ldw	r2,-12(fp)
   14090:	10c00217 	ldw	r3,8(r2)
   14094:	e0bffc17 	ldw	r2,-16(fp)
   14098:	1885883a 	add	r2,r3,r2
   1409c:	10bfffc4 	addi	r2,r2,-1
   140a0:	10800003 	ldbu	r2,0(r2)
   140a4:	10803fcc 	andi	r2,r2,255
   140a8:	1080201c 	xori	r2,r2,128
   140ac:	10bfe004 	addi	r2,r2,-128
   140b0:	10800bd8 	cmpnei	r2,r2,47
   140b4:	1000031e 	bne	r2,zero,140c4 <alt_find_file+0x70>
    {
      len -= 1;
   140b8:	e0bffc17 	ldw	r2,-16(fp)
   140bc:	10bfffc4 	addi	r2,r2,-1
   140c0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   140c4:	e0bffc17 	ldw	r2,-16(fp)
   140c8:	1007883a 	mov	r3,r2
   140cc:	e0bffe17 	ldw	r2,-8(fp)
   140d0:	1885883a 	add	r2,r3,r2
   140d4:	10800003 	ldbu	r2,0(r2)
   140d8:	10803fcc 	andi	r2,r2,255
   140dc:	1080201c 	xori	r2,r2,128
   140e0:	10bfe004 	addi	r2,r2,-128
   140e4:	10800be0 	cmpeqi	r2,r2,47
   140e8:	10000a1e 	bne	r2,zero,14114 <alt_find_file+0xc0>
   140ec:	e0bffc17 	ldw	r2,-16(fp)
   140f0:	1007883a 	mov	r3,r2
   140f4:	e0bffe17 	ldw	r2,-8(fp)
   140f8:	1885883a 	add	r2,r3,r2
   140fc:	10800003 	ldbu	r2,0(r2)
   14100:	10803fcc 	andi	r2,r2,255
   14104:	1080201c 	xori	r2,r2,128
   14108:	10bfe004 	addi	r2,r2,-128
   1410c:	1004c03a 	cmpne	r2,r2,zero
   14110:	10000a1e 	bne	r2,zero,1413c <alt_find_file+0xe8>
   14114:	e0bffd17 	ldw	r2,-12(fp)
   14118:	11000217 	ldw	r4,8(r2)
   1411c:	e1bffc17 	ldw	r6,-16(fp)
   14120:	e17ffe17 	ldw	r5,-8(fp)
   14124:	00143080 	call	14308 <memcmp>
   14128:	1004c03a 	cmpne	r2,r2,zero
   1412c:	1000031e 	bne	r2,zero,1413c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   14130:	e0bffd17 	ldw	r2,-12(fp)
   14134:	e0bfff15 	stw	r2,-4(fp)
   14138:	00000806 	br	1415c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   1413c:	e0bffd17 	ldw	r2,-12(fp)
   14140:	10800017 	ldw	r2,0(r2)
   14144:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   14148:	00c00074 	movhi	r3,1
   1414c:	18db9d04 	addi	r3,r3,28276
   14150:	e0bffd17 	ldw	r2,-12(fp)
   14154:	10ffc91e 	bne	r2,r3,1407c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   14158:	e03fff15 	stw	zero,-4(fp)
   1415c:	e0bfff17 	ldw	r2,-4(fp)
}
   14160:	e037883a 	mov	sp,fp
   14164:	dfc00117 	ldw	ra,4(sp)
   14168:	df000017 	ldw	fp,0(sp)
   1416c:	dec00204 	addi	sp,sp,8
   14170:	f800283a 	ret

00014174 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   14174:	defffc04 	addi	sp,sp,-16
   14178:	df000315 	stw	fp,12(sp)
   1417c:	df000304 	addi	fp,sp,12
   14180:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   14184:	00bffa04 	movi	r2,-24
   14188:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   1418c:	e03ffe15 	stw	zero,-8(fp)
   14190:	00001e06 	br	1420c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   14194:	e0bffe17 	ldw	r2,-8(fp)
   14198:	00c00074 	movhi	r3,1
   1419c:	18d71e04 	addi	r3,r3,23672
   141a0:	10800324 	muli	r2,r2,12
   141a4:	10c5883a 	add	r2,r2,r3
   141a8:	10800017 	ldw	r2,0(r2)
   141ac:	1004c03a 	cmpne	r2,r2,zero
   141b0:	1000131e 	bne	r2,zero,14200 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   141b4:	e0bffe17 	ldw	r2,-8(fp)
   141b8:	00c00074 	movhi	r3,1
   141bc:	18d71e04 	addi	r3,r3,23672
   141c0:	10800324 	muli	r2,r2,12
   141c4:	10c7883a 	add	r3,r2,r3
   141c8:	e0bfff17 	ldw	r2,-4(fp)
   141cc:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   141d0:	00800074 	movhi	r2,1
   141d4:	109ba104 	addi	r2,r2,28292
   141d8:	10c00017 	ldw	r3,0(r2)
   141dc:	e0bffe17 	ldw	r2,-8(fp)
   141e0:	1880040e 	bge	r3,r2,141f4 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   141e4:	00c00074 	movhi	r3,1
   141e8:	18dba104 	addi	r3,r3,28292
   141ec:	e0bffe17 	ldw	r2,-8(fp)
   141f0:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   141f4:	e0bffe17 	ldw	r2,-8(fp)
   141f8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   141fc:	00000606 	br	14218 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   14200:	e0bffe17 	ldw	r2,-8(fp)
   14204:	10800044 	addi	r2,r2,1
   14208:	e0bffe15 	stw	r2,-8(fp)
   1420c:	e0bffe17 	ldw	r2,-8(fp)
   14210:	10800810 	cmplti	r2,r2,32
   14214:	103fdf1e 	bne	r2,zero,14194 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   14218:	e0bffd17 	ldw	r2,-12(fp)
}
   1421c:	e037883a 	mov	sp,fp
   14220:	df000017 	ldw	fp,0(sp)
   14224:	dec00104 	addi	sp,sp,4
   14228:	f800283a 	ret

0001422c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   1422c:	defffb04 	addi	sp,sp,-20
   14230:	df000415 	stw	fp,16(sp)
   14234:	df000404 	addi	fp,sp,16
   14238:	e13ffe15 	stw	r4,-8(fp)
   1423c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   14240:	e0bfff17 	ldw	r2,-4(fp)
   14244:	10840070 	cmpltui	r2,r2,4097
   14248:	1000021e 	bne	r2,zero,14254 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   1424c:	00840004 	movi	r2,4096
   14250:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   14254:	e0fffe17 	ldw	r3,-8(fp)
   14258:	e0bfff17 	ldw	r2,-4(fp)
   1425c:	1885883a 	add	r2,r3,r2
   14260:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   14264:	e0bffe17 	ldw	r2,-8(fp)
   14268:	e0bffd15 	stw	r2,-12(fp)
   1426c:	00000506 	br	14284 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   14270:	e0bffd17 	ldw	r2,-12(fp)
   14274:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   14278:	e0bffd17 	ldw	r2,-12(fp)
   1427c:	10800804 	addi	r2,r2,32
   14280:	e0bffd15 	stw	r2,-12(fp)
   14284:	e0fffd17 	ldw	r3,-12(fp)
   14288:	e0bffc17 	ldw	r2,-16(fp)
   1428c:	18bff836 	bltu	r3,r2,14270 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   14290:	e0bffe17 	ldw	r2,-8(fp)
   14294:	108007cc 	andi	r2,r2,31
   14298:	1005003a 	cmpeq	r2,r2,zero
   1429c:	1000021e 	bne	r2,zero,142a8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   142a0:	e0bffd17 	ldw	r2,-12(fp)
   142a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   142a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   142ac:	e037883a 	mov	sp,fp
   142b0:	df000017 	ldw	fp,0(sp)
   142b4:	dec00104 	addi	sp,sp,4
   142b8:	f800283a 	ret

000142bc <atexit>:
   142bc:	200b883a 	mov	r5,r4
   142c0:	000d883a 	mov	r6,zero
   142c4:	0009883a 	mov	r4,zero
   142c8:	000f883a 	mov	r7,zero
   142cc:	001437c1 	jmpi	1437c <__register_exitproc>

000142d0 <exit>:
   142d0:	defffe04 	addi	sp,sp,-8
   142d4:	000b883a 	mov	r5,zero
   142d8:	dc000015 	stw	r16,0(sp)
   142dc:	dfc00115 	stw	ra,4(sp)
   142e0:	2021883a 	mov	r16,r4
   142e4:	00144b40 	call	144b4 <__call_exitprocs>
   142e8:	00800074 	movhi	r2,1
   142ec:	109b9804 	addi	r2,r2,28256
   142f0:	11000017 	ldw	r4,0(r2)
   142f4:	20800f17 	ldw	r2,60(r4)
   142f8:	10000126 	beq	r2,zero,14300 <exit+0x30>
   142fc:	103ee83a 	callr	r2
   14300:	8009883a 	mov	r4,r16
   14304:	00146a40 	call	146a4 <_exit>

00014308 <memcmp>:
   14308:	00c000c4 	movi	r3,3
   1430c:	1980032e 	bgeu	r3,r6,1431c <memcmp+0x14>
   14310:	2144b03a 	or	r2,r4,r5
   14314:	10c4703a 	and	r2,r2,r3
   14318:	10000f26 	beq	r2,zero,14358 <memcmp+0x50>
   1431c:	31ffffc4 	addi	r7,r6,-1
   14320:	3000061e 	bne	r6,zero,1433c <memcmp+0x34>
   14324:	00000a06 	br	14350 <memcmp+0x48>
   14328:	39ffffc4 	addi	r7,r7,-1
   1432c:	00bfffc4 	movi	r2,-1
   14330:	21000044 	addi	r4,r4,1
   14334:	29400044 	addi	r5,r5,1
   14338:	38800526 	beq	r7,r2,14350 <memcmp+0x48>
   1433c:	20c00003 	ldbu	r3,0(r4)
   14340:	28800003 	ldbu	r2,0(r5)
   14344:	18bff826 	beq	r3,r2,14328 <memcmp+0x20>
   14348:	1885c83a 	sub	r2,r3,r2
   1434c:	f800283a 	ret
   14350:	0005883a 	mov	r2,zero
   14354:	f800283a 	ret
   14358:	180f883a 	mov	r7,r3
   1435c:	20c00017 	ldw	r3,0(r4)
   14360:	28800017 	ldw	r2,0(r5)
   14364:	18bfed1e 	bne	r3,r2,1431c <memcmp+0x14>
   14368:	31bfff04 	addi	r6,r6,-4
   1436c:	21000104 	addi	r4,r4,4
   14370:	29400104 	addi	r5,r5,4
   14374:	39bff936 	bltu	r7,r6,1435c <memcmp+0x54>
   14378:	003fe806 	br	1431c <memcmp+0x14>

0001437c <__register_exitproc>:
   1437c:	defffa04 	addi	sp,sp,-24
   14380:	00800074 	movhi	r2,1
   14384:	109b9804 	addi	r2,r2,28256
   14388:	dc000015 	stw	r16,0(sp)
   1438c:	14000017 	ldw	r16,0(r2)
   14390:	dd000415 	stw	r20,16(sp)
   14394:	2829883a 	mov	r20,r5
   14398:	81405217 	ldw	r5,328(r16)
   1439c:	dcc00315 	stw	r19,12(sp)
   143a0:	dc800215 	stw	r18,8(sp)
   143a4:	dc400115 	stw	r17,4(sp)
   143a8:	dfc00515 	stw	ra,20(sp)
   143ac:	2023883a 	mov	r17,r4
   143b0:	3027883a 	mov	r19,r6
   143b4:	3825883a 	mov	r18,r7
   143b8:	28002526 	beq	r5,zero,14450 <__register_exitproc+0xd4>
   143bc:	29000117 	ldw	r4,4(r5)
   143c0:	008007c4 	movi	r2,31
   143c4:	11002716 	blt	r2,r4,14464 <__register_exitproc+0xe8>
   143c8:	8800101e 	bne	r17,zero,1440c <__register_exitproc+0x90>
   143cc:	2105883a 	add	r2,r4,r4
   143d0:	1085883a 	add	r2,r2,r2
   143d4:	20c00044 	addi	r3,r4,1
   143d8:	1145883a 	add	r2,r2,r5
   143dc:	0009883a 	mov	r4,zero
   143e0:	15000215 	stw	r20,8(r2)
   143e4:	28c00115 	stw	r3,4(r5)
   143e8:	2005883a 	mov	r2,r4
   143ec:	dfc00517 	ldw	ra,20(sp)
   143f0:	dd000417 	ldw	r20,16(sp)
   143f4:	dcc00317 	ldw	r19,12(sp)
   143f8:	dc800217 	ldw	r18,8(sp)
   143fc:	dc400117 	ldw	r17,4(sp)
   14400:	dc000017 	ldw	r16,0(sp)
   14404:	dec00604 	addi	sp,sp,24
   14408:	f800283a 	ret
   1440c:	29802204 	addi	r6,r5,136
   14410:	00800044 	movi	r2,1
   14414:	110e983a 	sll	r7,r2,r4
   14418:	30c04017 	ldw	r3,256(r6)
   1441c:	2105883a 	add	r2,r4,r4
   14420:	1085883a 	add	r2,r2,r2
   14424:	1185883a 	add	r2,r2,r6
   14428:	19c6b03a 	or	r3,r3,r7
   1442c:	14802015 	stw	r18,128(r2)
   14430:	14c00015 	stw	r19,0(r2)
   14434:	00800084 	movi	r2,2
   14438:	30c04015 	stw	r3,256(r6)
   1443c:	88bfe31e 	bne	r17,r2,143cc <__register_exitproc+0x50>
   14440:	30804117 	ldw	r2,260(r6)
   14444:	11c4b03a 	or	r2,r2,r7
   14448:	30804115 	stw	r2,260(r6)
   1444c:	003fdf06 	br	143cc <__register_exitproc+0x50>
   14450:	008000b4 	movhi	r2,2
   14454:	10a33604 	addi	r2,r2,-29480
   14458:	100b883a 	mov	r5,r2
   1445c:	80805215 	stw	r2,328(r16)
   14460:	003fd606 	br	143bc <__register_exitproc+0x40>
   14464:	00800034 	movhi	r2,0
   14468:	10800004 	addi	r2,r2,0
   1446c:	1000021e 	bne	r2,zero,14478 <__register_exitproc+0xfc>
   14470:	013fffc4 	movi	r4,-1
   14474:	003fdc06 	br	143e8 <__register_exitproc+0x6c>
   14478:	01006404 	movi	r4,400
   1447c:	103ee83a 	callr	r2
   14480:	1007883a 	mov	r3,r2
   14484:	103ffa26 	beq	r2,zero,14470 <__register_exitproc+0xf4>
   14488:	80805217 	ldw	r2,328(r16)
   1448c:	180b883a 	mov	r5,r3
   14490:	18000115 	stw	zero,4(r3)
   14494:	18800015 	stw	r2,0(r3)
   14498:	80c05215 	stw	r3,328(r16)
   1449c:	18006215 	stw	zero,392(r3)
   144a0:	18006315 	stw	zero,396(r3)
   144a4:	0009883a 	mov	r4,zero
   144a8:	883fc826 	beq	r17,zero,143cc <__register_exitproc+0x50>
   144ac:	003fd706 	br	1440c <__register_exitproc+0x90>

000144b0 <register_fini>:
   144b0:	f800283a 	ret

000144b4 <__call_exitprocs>:
   144b4:	00800074 	movhi	r2,1
   144b8:	109b9804 	addi	r2,r2,28256
   144bc:	10800017 	ldw	r2,0(r2)
   144c0:	defff304 	addi	sp,sp,-52
   144c4:	df000b15 	stw	fp,44(sp)
   144c8:	d8800115 	stw	r2,4(sp)
   144cc:	00800034 	movhi	r2,0
   144d0:	10800004 	addi	r2,r2,0
   144d4:	1005003a 	cmpeq	r2,r2,zero
   144d8:	d8800215 	stw	r2,8(sp)
   144dc:	d8800117 	ldw	r2,4(sp)
   144e0:	dd400815 	stw	r21,32(sp)
   144e4:	dd000715 	stw	r20,28(sp)
   144e8:	10805204 	addi	r2,r2,328
   144ec:	dfc00c15 	stw	ra,48(sp)
   144f0:	ddc00a15 	stw	r23,40(sp)
   144f4:	dd800915 	stw	r22,36(sp)
   144f8:	dcc00615 	stw	r19,24(sp)
   144fc:	dc800515 	stw	r18,20(sp)
   14500:	dc400415 	stw	r17,16(sp)
   14504:	dc000315 	stw	r16,12(sp)
   14508:	282b883a 	mov	r21,r5
   1450c:	2039883a 	mov	fp,r4
   14510:	d8800015 	stw	r2,0(sp)
   14514:	2829003a 	cmpeq	r20,r5,zero
   14518:	d8800117 	ldw	r2,4(sp)
   1451c:	14405217 	ldw	r17,328(r2)
   14520:	88001026 	beq	r17,zero,14564 <__call_exitprocs+0xb0>
   14524:	ddc00017 	ldw	r23,0(sp)
   14528:	88800117 	ldw	r2,4(r17)
   1452c:	8c802204 	addi	r18,r17,136
   14530:	143fffc4 	addi	r16,r2,-1
   14534:	80000916 	blt	r16,zero,1455c <__call_exitprocs+0xa8>
   14538:	05bfffc4 	movi	r22,-1
   1453c:	a000151e 	bne	r20,zero,14594 <__call_exitprocs+0xe0>
   14540:	8409883a 	add	r4,r16,r16
   14544:	2105883a 	add	r2,r4,r4
   14548:	1485883a 	add	r2,r2,r18
   1454c:	10c02017 	ldw	r3,128(r2)
   14550:	a8c01126 	beq	r21,r3,14598 <__call_exitprocs+0xe4>
   14554:	843fffc4 	addi	r16,r16,-1
   14558:	85bff81e 	bne	r16,r22,1453c <__call_exitprocs+0x88>
   1455c:	d8800217 	ldw	r2,8(sp)
   14560:	10003126 	beq	r2,zero,14628 <__call_exitprocs+0x174>
   14564:	dfc00c17 	ldw	ra,48(sp)
   14568:	df000b17 	ldw	fp,44(sp)
   1456c:	ddc00a17 	ldw	r23,40(sp)
   14570:	dd800917 	ldw	r22,36(sp)
   14574:	dd400817 	ldw	r21,32(sp)
   14578:	dd000717 	ldw	r20,28(sp)
   1457c:	dcc00617 	ldw	r19,24(sp)
   14580:	dc800517 	ldw	r18,20(sp)
   14584:	dc400417 	ldw	r17,16(sp)
   14588:	dc000317 	ldw	r16,12(sp)
   1458c:	dec00d04 	addi	sp,sp,52
   14590:	f800283a 	ret
   14594:	8409883a 	add	r4,r16,r16
   14598:	88c00117 	ldw	r3,4(r17)
   1459c:	2105883a 	add	r2,r4,r4
   145a0:	1445883a 	add	r2,r2,r17
   145a4:	18ffffc4 	addi	r3,r3,-1
   145a8:	11800217 	ldw	r6,8(r2)
   145ac:	1c001526 	beq	r3,r16,14604 <__call_exitprocs+0x150>
   145b0:	10000215 	stw	zero,8(r2)
   145b4:	303fe726 	beq	r6,zero,14554 <__call_exitprocs+0xa0>
   145b8:	00c00044 	movi	r3,1
   145bc:	1c06983a 	sll	r3,r3,r16
   145c0:	90804017 	ldw	r2,256(r18)
   145c4:	8cc00117 	ldw	r19,4(r17)
   145c8:	1884703a 	and	r2,r3,r2
   145cc:	10001426 	beq	r2,zero,14620 <__call_exitprocs+0x16c>
   145d0:	90804117 	ldw	r2,260(r18)
   145d4:	1884703a 	and	r2,r3,r2
   145d8:	10000c1e 	bne	r2,zero,1460c <__call_exitprocs+0x158>
   145dc:	2105883a 	add	r2,r4,r4
   145e0:	1485883a 	add	r2,r2,r18
   145e4:	11400017 	ldw	r5,0(r2)
   145e8:	e009883a 	mov	r4,fp
   145ec:	303ee83a 	callr	r6
   145f0:	88800117 	ldw	r2,4(r17)
   145f4:	98bfc81e 	bne	r19,r2,14518 <__call_exitprocs+0x64>
   145f8:	b8800017 	ldw	r2,0(r23)
   145fc:	147fd526 	beq	r2,r17,14554 <__call_exitprocs+0xa0>
   14600:	003fc506 	br	14518 <__call_exitprocs+0x64>
   14604:	8c000115 	stw	r16,4(r17)
   14608:	003fea06 	br	145b4 <__call_exitprocs+0x100>
   1460c:	2105883a 	add	r2,r4,r4
   14610:	1485883a 	add	r2,r2,r18
   14614:	11000017 	ldw	r4,0(r2)
   14618:	303ee83a 	callr	r6
   1461c:	003ff406 	br	145f0 <__call_exitprocs+0x13c>
   14620:	303ee83a 	callr	r6
   14624:	003ff206 	br	145f0 <__call_exitprocs+0x13c>
   14628:	88800117 	ldw	r2,4(r17)
   1462c:	1000081e 	bne	r2,zero,14650 <__call_exitprocs+0x19c>
   14630:	89000017 	ldw	r4,0(r17)
   14634:	20000726 	beq	r4,zero,14654 <__call_exitprocs+0x1a0>
   14638:	b9000015 	stw	r4,0(r23)
   1463c:	8809883a 	mov	r4,r17
   14640:	00000000 	call	0 <__alt_mem_sdram>
   14644:	bc400017 	ldw	r17,0(r23)
   14648:	883fb71e 	bne	r17,zero,14528 <__call_exitprocs+0x74>
   1464c:	003fc506 	br	14564 <__call_exitprocs+0xb0>
   14650:	89000017 	ldw	r4,0(r17)
   14654:	882f883a 	mov	r23,r17
   14658:	2023883a 	mov	r17,r4
   1465c:	883fb21e 	bne	r17,zero,14528 <__call_exitprocs+0x74>
   14660:	003fc006 	br	14564 <__call_exitprocs+0xb0>

00014664 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   14664:	defffd04 	addi	sp,sp,-12
   14668:	df000215 	stw	fp,8(sp)
   1466c:	df000204 	addi	fp,sp,8
   14670:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   14674:	e0bfff17 	ldw	r2,-4(fp)
   14678:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1467c:	e0bffe17 	ldw	r2,-8(fp)
   14680:	1005003a 	cmpeq	r2,r2,zero
   14684:	1000021e 	bne	r2,zero,14690 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   14688:	002af070 	cmpltui	zero,zero,43969
   1468c:	00000106 	br	14694 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   14690:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   14694:	e037883a 	mov	sp,fp
   14698:	df000017 	ldw	fp,0(sp)
   1469c:	dec00104 	addi	sp,sp,4
   146a0:	f800283a 	ret

000146a4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   146a4:	defffd04 	addi	sp,sp,-12
   146a8:	dfc00215 	stw	ra,8(sp)
   146ac:	df000115 	stw	fp,4(sp)
   146b0:	df000104 	addi	fp,sp,4
   146b4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   146b8:	e13fff17 	ldw	r4,-4(fp)
   146bc:	00146640 	call	14664 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   146c0:	003fff06 	br	146c0 <_exit+0x1c>
   146c4:	000144b0 	cmpltui	zero,zero,1298
