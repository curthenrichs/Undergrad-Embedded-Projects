
Milestone_5.elf:     file format elf32-littlenios2
Milestone_5.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000150b4 memsz 0x000150b4 flags r-x
    LOAD off    0x000160d4 vaddr 0x000150d4 paddr 0x00016bc8 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x000186bc vaddr 0x000186bc paddr 0x000186bc align 2**12
         filesz 0x00000000 memsz 0x000004e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014234  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000cec  000143e8  000143e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000150d4  00016bc8  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004e0  000186bc  000186bc  000186bc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00017bc8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001238  00000000  00000000  00017bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001bff  00000000  00000000  00018e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00033a1f  00000000  00000000  0001aa27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b29e  00000000  00000000  0004e446  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001cd56  00000000  00000000  000596e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002660  00000000  00000000  0007643c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002c87  00000000  00000000  00078a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012c1a  00000000  00000000  0007b723  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0008e340  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000b30  00000000  00000000  0008e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009308a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0009308d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00093090  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00093091  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00093092  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00093096  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009309a  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0009309e  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000930a9  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000930b4  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000011  00000000  00000000  000930bf  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000040  00000000  00000000  000930d0  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00093cf1  00000000  00000000  00093110  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
000143e8 l    d  .rodata	00000000 .rodata
000150d4 l    d  .rwdata	00000000 .rwdata
000186bc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Camera.c
000186e0 l     O .bss	00000002 fd
000186bc l     O .bss	00000001 pixel.1403
000186c0 l     O .bss	00000004 vgaPtr.1402
000186c4 l     O .bss	00000004 col.1401
000186c8 l     O .bss	00000004 row.1400
000186cc l     O .bss	00000002 prevPixel.1519
000186ce l     O .bss	00000002 vpixel.1518
000186d0 l     O .bss	00000002 pixel.1517
000186d4 l     O .bss	00000004 vgaPtr.1516
000186d8 l     O .bss	00000004 col.1515
000186dc l     O .bss	00000004 row.1514
00000000 l    df *ABS*	00000000 CommandLine.c
000150d4 l     O .rwdata	0000000c HELP
00000af0 l     F .text	0000017c _help
00000954 l     F .text	000000d0 _generateList
00018744 l     O .bss	00000050 inputStr
00018794 l     O .bss	00000050 cmdStr
00000a24 l     F .text	000000cc cmd_parseInput
00018720 l     O .bss	00000024 commandList
00000000 l    df *ABS*	00000000 CameraCMD.c
00000c6c l     F .text	00000094 _readCam
00000d00 l     F .text	0000008c _writeCam
00000d8c l     F .text	00000060 _displayImage
00000dec l     F .text	000002a4 _track
000011d0 l     F .text	00000224 _track_inputParsing
00001090 l     F .text	00000140 _track_boundingBox
000186e4 l     O .bss	00000004 ptr.2593
000186e8 l     O .bss	00000001 pixel.2592
000186e9 l     O .bss	00000001 col.2591
000186ea l     O .bss	00000001 row.2590
00000000 l    df *ABS*	00000000 MemoryCMD.c
000013f4 l     F .text	0000009c _read
00001490 l     F .text	00000088 _write
00001518 l     F .text	00000290 _printMem
00000000 l    df *ABS*	00000000 ServoCMD.c
000017a8 l     F .text	000000bc _pan
00001864 l     F .text	000000bc _tilt
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 LCD.c
00001ec4 l     F .text	0000008c lcd_util_pollBusyFlag
00000000 l    df *ABS*	00000000 PWM.c
00000000 l    df *ABS*	00000000 Pushbutton.c
00000000 l    df *ABS*	00000000 Timer.c
00000000 l       *ABS*	00000000 irq0
00000002 l       *ABS*	00000000 irq2
00000000 l    df *ABS*	00000000 VGA.c
00000000 l    df *ABS*	00000000 Servo.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002768 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 ctype_.c
00014b91 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fgets.c
00000000 l    df *ABS*	00000000 findfp.c
00002a20 l     F .text	00000058 std
00002b2c l     F .text	00000008 __fp_lock
00002b34 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00015140 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00003ad0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00003c30 l     F .text	00000008 eofread
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000040dc l     F .text	00000058 __sprint_r
00014d8a l     O .rodata	00000010 blanks.3452
00014d7a l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vfscanf.c
00014da2 l     O .rodata	00000022 basefix.3357
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
000079a8 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
00016b9c l     O .rwdata	00000004 charset
00014de4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00014f2c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strtod.c
0000be40 l     F .text	00000048 match
00015968 l     O .rwdata	00000014 fpi.1950
00014f48 l     O .rodata	00000028 tinytens
00015954 l     O .rwdata	00000014 fpinan.1986
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
0000e478 l     F .text	00000024 htinit
0000e504 l     F .text	000000b0 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
0000ed6c l     F .text	0000004c L_shift
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
0000fea0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00011a54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00011ab4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00011bb4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00011cd4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00011db4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00011f10 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001213c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00016bb8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
000123d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00015b24 l     O .rwdata	00001060 jtag_uart_0
000124c8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00012708 l     F .text	00000228 altera_avalon_jtag_uart_irq
00012930 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00012fac l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000132f8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0001371c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00013858 l     F .text	000000dc alt_file_locked
00013abc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
000141d0 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00014384 l     F .text	00000040 alt_sim_halt
00003834 g     F .text	0000001c putchar
0000a8c8 g     F .text	00000094 _mprec_log10
0000a9b4 g     F .text	00000088 __any_on
0000f000 g     F .text	00000070 _isatty_r
00014f04 g     O .rodata	00000028 __mprec_tinytens
00011f70 g     F .text	0000006c alt_main
00003fdc g     F .text	0000008c strcpy
00003858 g     F .text	000000a0 _puts_r
0001890c g     O .bss	00000100 alt_irq
0000a0d0 g     F .text	00000078 _lseek_r
0000246c g     F .text	00000034 servo_init
000002c0 g     F .text	00000204 cam_imageCapture
00016bc8 g       *ABS*	00000000 __flash_rwdata_start
000109c0 g     F .text	00000088 __eqdf2
00002184 g     F .text	00000098 timer_delay
00002148 g     F .text	0000003c pushbutton_read
00018b9c g       *ABS*	00000000 __alt_heap_start
000037bc g     F .text	00000044 printf
00003d4c g     F .text	00000068 __sseek
00002a88 g     F .text	000000a4 __sinit
0000e204 g     F .text	00000130 __swbuf_r
0000a030 g     F .text	00000084 _setlocale_r
00002b88 g     F .text	00000068 __sfmoreglue
0000e1e8 g     F .text	0000001c ungetc
00011ffc g     F .text	00000020 __malloc_unlock
0001511c g     O .rwdata	0000000c WR
0000be88 g     F .text	000014e4 _strtod_r
000150e0 g     O .rwdata	0000000c RDCAMREG
0000a3dc g     F .text	000000e0 memmove
000024a0 g     F .text	00000070 servo_pan
00002b78 g     F .text	00000010 _cleanup
0000aa3c g     F .text	000000bc _Balloc
00001cfc g     F .text	0000002c lcd_clr
00010ad0 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00001de0 g     F .text	000000e4 lcd_printString
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000e404 g     F .text	00000074 _fstat_r
000186f8 g     O .bss	00000004 errno
00007684 g     F .text	00000024 __svfscanf
000112b8 g     F .text	0000002c __make_fp
0001870c g     O .bss	00000004 alt_argv
0001eb84 g       *ABS*	00000000 _gp
000020a0 g     F .text	00000050 PWM_writeOCRB
000029fc g     F .text	00000024 fgets
000159a4 g     O .rwdata	00000180 alt_fd_list
0000221c g     F .text	00000124 timer_interrupt_init
00015104 g     O .rwdata	0000000c TRACK
00003850 g     F .text	00000008 _putchar_r
00015128 g     O .rwdata	0000000c PAN
00013ce0 g     F .text	00000094 alt_find_dev
00003684 g     F .text	000000a0 memcpy
0000edb8 g     F .text	00000248 __hexnan
00002b6c g     F .text	0000000c _cleanup_r
00010cf0 g     F .text	000000f8 __floatsidf
000137e0 g     F .text	00000078 alt_io_redirect
00010be0 g     F .text	00000088 __ltdf2
000143e8 g       *ABS*	00000000 __DTOR_END__
000038f8 g     F .text	00000014 puts
0000a35c g     F .text	00000040 mbrtowc
000076a8 g     F .text	00000068 _vfscanf_r
0000a818 g     F .text	000000b0 __ratio
00012b48 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00003800 g     F .text	00000034 _printf_r
00800000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000028a4 g     F .text	00000008 __udivsi3
00011c14 g     F .text	000000c0 isatty
00009fe0 g     F .text	0000002c iswspace
00014e14 g     O .rodata	000000c8 __mprec_tens
0000a00c g     F .text	00000008 __locale_charset
0000f108 g     F .text	000000a4 __fixunsdfsi
00013f4c g     F .text	00000090 alt_icache_flush
000150ec g     O .rwdata	0000000c WRCAMREG
000186ec g     O .bss	00000004 __malloc_top_pad
0000dc5c g     F .text	00000024 strtoul
00016b98 g     O .rwdata	00000004 __mb_cur_max
0000a014 g     F .text	0000000c _localeconv_r
0000dc80 g     F .text	000002f0 _strtoull_r
0000b134 g     F .text	0000003c __i2b
00009b44 g     F .text	0000049c __sfvwrite_r
00003aec g     F .text	00000070 _sbrk_r
00001b4c g     F .text	00000064 I2C_action
0000b69c g     F .text	00000078 _read_r
00015948 g     O .rwdata	0000000c __lc_ctype
00016bb0 g     O .rwdata	00000004 alt_max_fd
000115f8 g     F .text	00000138 __unpack_d
00009174 g     F .text	00000110 _fclose_r
00009494 g     F .text	00000034 fflush
000186f0 g     O .bss	00000004 __malloc_max_sbrked_mem
00010330 g     F .text	00000074 __adddf3
0000fd38 g     F .text	00000078 __nesf2
0000a6f8 g     F .text	00000120 __b2d
0000f788 g     F .text	000005b0 __umoddi3
00011e20 g     F .text	000000f0 lseek
00016b8c g     O .rwdata	00000004 _global_impure_ptr
000004c4 g     F .text	00000338 cam_track
0000b714 g     F .text	000005f4 _realloc_r
00018b9c g       *ABS*	00000000 __bss_end
00013624 g     F .text	000000f8 alt_iic_isr_register
00013bb4 g     F .text	0000010c alt_tick
0001880c g     O .bss	00000100 __hexdig
0000f1ac g     F .text	000005dc __udivdi3
00014edc g     O .rodata	00000028 __mprec_bigtens
0000b390 g     F .text	00000120 __s2b
00010f34 g     F .text	00000194 __floatunsidf
0000a618 g     F .text	00000060 __mcmp
00016b84 g     O .rwdata	00000004 __ctype_ptr
00002b54 g     F .text	00000018 __fp_lock_all
000135dc g     F .text	00000048 alt_ic_irq_enabled
00013b1c g     F .text	00000098 alt_alarm_stop
0000d6f0 g     F .text	00000024 strtol
00018714 g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0001597c g     O .rwdata	00000028 alt_dev_null
00011148 g     F .text	000000c8 __unpack_f
0000211c g     F .text	0000002c PWM_readOCRB
00013200 g     F .text	00000044 alt_dcache_flush_all
0000a4e4 g     F .text	00000070 __hi0bits
00001d28 g     F .text	00000034 lcd_home
00010de8 g     F .text	000000d8 __fixdfsi
0000d490 g     F .text	0000001c strtod
00016bc8 g       *ABS*	00000000 __ram_rwdata_end
00002398 g     F .text	0000002c timer_ISR_TIMER_0
00016ba8 g     O .rwdata	00000008 alt_dev_list
000122b8 g     F .text	00000120 write
0000b5b4 g     F .text	000000e8 _putc_r
0000fdb0 g     F .text	00000078 __gtsf2
00002340 g     F .text	00000058 timer_interrupt_start_stop
000150d4 g       *ABS*	00000000 __ram_rodata_end
00011ae0 g     F .text	000000d4 fstat
00010c68 g     F .text	00000088 __ledf2
00003e90 g     F .text	00000090 strcat
0000b270 g     F .text	00000120 __pow5mult
000186fc g     O .bss	00000004 __nlocale_changed
000028ac g     F .text	00000008 __umodsi3
00018b9c g       *ABS*	00000000 end
000117f8 g     F .text	00000160 __pack_f
00012648 g     F .text	000000c0 altera_avalon_jtag_uart_init
000143e4 g       *ABS*	00000000 __CTOR_LIST__
00800000 g       *ABS*	00000000 __alt_stack_pointer
0001301c g     F .text	00000090 alt_avalon_timer_sc_init
000110c8 g     F .text	00000080 __clzsi2
00012d6c g     F .text	00000240 altera_avalon_jtag_uart_write
00002a78 g     F .text	00000004 __sfp_lock_acquire
000035a0 g     F .text	000000e4 memchr
00004134 g     F .text	00001eac ___vfprintf_internal_r
00003bd0 g     F .text	00000060 _sprintf_r
00009830 g     F .text	00000314 _free_r
000141d4 g     F .text	000001b0 __call_exitprocs
00018700 g     O .bss	00000004 __mlocale_changed
00016b94 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000004c _start
00018718 g     O .bss	00000004 _alt_tick_rate
0000d714 g     F .text	00000318 _strtoll_r
0000ae00 g     F .text	0000014c __lshift
0001871c g     O .bss	00000004 _alt_nticks
0001201c g     F .text	00000120 read
0001246c g     F .text	0000005c alt_sys_init
0001409c g     F .text	00000134 __register_exitproc
0000af4c g     F .text	000001e8 __multiply
000129e0 g     F .text	00000074 altera_avalon_jtag_uart_close
000150d4 g       *ABS*	00000000 __ram_rwdata_start
000143e8 g       *ABS*	00000000 __ram_rodata_start
000187e4 g     O .bss	00000028 __malloc_current_mallinfo
0000aaf8 g     F .text	0000017c __d2b
00001db0 g     F .text	00000030 lcd_portInit
00012500 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000da2c g     F .text	00000230 _strtoul_r
00013e94 g     F .text	000000b8 alt_get_fd
00015110 g     O .rwdata	0000000c RR
00011730 g     F .text	000000c8 __fpcmp_parts_d
00007938 g     F .text	00000070 _close_r
00014028 g     F .text	00000074 memcmp
000125b0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00018b9c g       *ABS*	00000000 __alt_stack_base
000125f8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00003cc0 g     F .text	00000084 sscanf
000077fc g     F .text	0000013c __swsetup_r
00010768 g     F .text	00000258 __divdf3
00002bf0 g     F .text	000000f0 __sfp
0000a95c g     F .text	00000058 __copybits
00015540 g     O .rwdata	00000408 __malloc_av_
00002a84 g     F .text	00000004 __sinit_lock_release
00001fd0 g     F .text	00000080 PWM_setDutyCycle_B
000103a4 g     F .text	000003c4 __muldf3
00003e30 g     F .text	00000060 __sread
000096c4 g     F .text	00000040 fread
00013d74 g     F .text	00000120 alt_find_file
00002580 g     F .text	00000038 getServoX
00013244 g     F .text	000000b4 alt_dev_llist_insert
00011fdc g     F .text	00000020 __malloc_lock
000121fc g     F .text	000000bc sbrk
00009298 g     F .text	000001fc _fflush_r
0000e350 g     F .text	000000b4 _calloc_r
000186bc g       *ABS*	00000000 __bss_start
00003724 g     F .text	00000098 memset
00001d5c g     F .text	00000054 lcd_init
00002730 g     F .text	00000038 main
00018710 g     O .bss	00000004 alt_envp
000186f4 g     O .bss	00000004 __malloc_max_total_mem
00012558 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000e334 g     F .text	0000001c __swbuf
0000fe28 g     F .text	00000078 __ltsf2
000094c8 g     F .text	000001fc _fread_r
00002690 g     F .text	000000a0 setServoY
00003d44 g     F .text	00000008 __sclose
00800000 g       *ABS*	00000000 __alt_heap_limit
00009284 g     F .text	00000014 fclose
0000d4ac g     F .text	00000244 _strtol_r
00010ec0 g     F .text	00000074 __truncdfsf2
00018a0c g     O .bss	00000190 _atexit0
00007bc0 g     F .text	000015b4 _dtoa_r
00002e60 g     F .text	00000740 _malloc_r
00016bb4 g     O .rwdata	00000004 alt_errno
0000df70 g     F .text	000000dc __submore
00002da8 g     F .text	000000b8 _fwalk
000028b4 g     F .text	00000148 _fgets_r
0000a39c g     F .text	00000040 _mbtowc_r
0000b4b0 g     F .text	00000104 putc
000027e4 g     F .text	00000060 __divsi3
00014f8c g     O .rodata	00000014 __thenan_df
00015134 g     O .rwdata	0000000c TILT
00009704 g     F .text	0000012c _malloc_trim_r
000143e8 g       *ABS*	00000000 __CTOR_END__
00001990 g     F .text	000000f8 I2C_read
00003f20 g     F .text	000000bc strcmp
000143e8 g       *ABS*	00000000 __flash_rodata_start
000143e8 g       *ABS*	00000000 __DTOR_LIST__
00010a48 g     F .text	00000088 __nedf2
00012438 g     F .text	00000034 alt_irq_init
0001219c g     F .text	00000060 alt_release_fd
000020f0 g     F .text	0000002c PWM_readOCRA
00003b5c g     F .text	00000074 sprintf
00014fa0 g     O .rodata	00000100 __clz_tab
00018704 g     O .bss	00000004 _PathLocale
000025b8 g     F .text	000000a0 setServoX
00001c54 g     F .text	000000a8 lcd_prt
0000d36c g     F .text	00000124 strtof
00013fdc g     F .text	00000014 atexit
00007784 g     F .text	00000078 _write_r
0000a0b4 g     F .text	0000001c setlocale
0000be38 g     F .text	00000008 nanf
00016b88 g     O .rwdata	00000004 _impure_ptr
00018708 g     O .bss	00000004 alt_argc
0000a2dc g     F .text	00000080 _mbrtowc_r
000133bc g     F .text	00000064 _do_dtors
00002050 g     F .text	00000050 PWM_writeOCRA
0000390c g     F .text	000001c4 __srefill_r
00000020 g       .exceptions	00000000 alt_irq_entry
0000a678 g     F .text	00000080 __ulp
0000bd08 g     F .text	00000040 __isinfd
00002b3c g     F .text	00000018 __fp_unlock_all
00016ba0 g     O .rwdata	00000008 alt_fs_list
00001920 g     F .text	00000070 I2C_init
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000a020 g     F .text	00000010 localeconv
00013450 g     F .text	00000050 alt_ic_isr_register
0000e49c g     F .text	00000068 __hexdig_init
00003c38 g     F .text	00000088 _sscanf_r
00016bc8 g       *ABS*	00000000 _edata
00018b9c g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
00007710 g     F .text	00000074 vfscanf
00012a54 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0001353c g     F .text	000000a0 alt_ic_irq_disable
000023c4 g     F .text	0000002c timer_ISR_TIMER_1
000007fc g     F .text	00000028 cmd_init
00003db4 g     F .text	0000007c __swrite
00016b90 g     O .rwdata	00000004 __malloc_trim_threshold
00013cc0 g     F .text	00000020 altera_nios2_qsys_irq_init
00013ff0 g     F .text	00000038 exit
00002ce0 g     F .text	000000c8 _fwalk_reent
0000ac74 g     F .text	0000018c __mdiff
00002844 g     F .text	00000060 __modsi3
00800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00000824 g     F .text	00000130 cmd_getCommand
00002a7c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
000023f0 g     F .text	0000007c vga_clearDisplay
0000bd78 g     F .text	000000c0 __sccl
00014a90 g     O .rodata	00000101 _ctype_
000150f8 g     O .rwdata	0000000c IMAGE
00001bb0 g     F .text	000000a4 lcd_cmd
00011210 g     F .text	000000a8 __fpcmp_parts_f
000143c4 g     F .text	00000020 _exit
0000bd48 g     F .text	00000030 __isnand
000130ac g     F .text	00000154 alt_alarm_start
00000200 g     F .text	000000c0 cam_init
0000f070 g     F .text	00000098 __muldi3
0000a148 g     F .text	00000194 __smakebuf_r
00004068 g     F .text	00000074 strlen
00013934 g     F .text	00000188 open
00010b58 g     F .text	00000088 __gedf2
0000e5b4 g     F .text	000007b8 __gethex
00001f50 g     F .text	00000080 PWM_setDutyCycle_A
00013420 g     F .text	00000030 alt_icache_flush_all
00002510 g     F .text	00000070 servo_tilt
00016bbc g     O .rwdata	00000004 alt_priority_mask
000134a0 g     F .text	0000009c alt_ic_irq_enable
00005fe0 g     F .text	00000024 __vfprintf_internal
000102b0 g     F .text	00000080 __subdf3
0000a554 g     F .text	000000c4 __lo0bits
00006004 g     F .text	00001680 __svfscanf_r
00016bc0 g     O .rwdata	00000008 alt_alarm_list
0000e04c g     F .text	0000019c _ungetc_r
00013358 g     F .text	00000064 _do_ctors
00011958 g     F .text	000000fc close
00002658 g     F .text	00000038 getServoY
00011d34 g     F .text	00000080 alt_load
000112e4 g     F .text	00000314 __pack_d
00001a88 g     F .text	000000c4 I2C_write
00000000  w      *UND*	00000000 free
00002a80 g     F .text	00000004 __sinit_lock_acquire
0000b170 g     F .text	00000100 __multadd
0000a4bc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <irq2+0x2>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c000b4 	movhi	r3,2
 134:	18e24304 	addi	r3,r3,-30452
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c000b4 	movhi	r3,2
 14c:	18e24304 	addi	r3,r3,-30452
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
     1c0:	00bffd16 	blt	zero,r2,1b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c4:	06c02034 	movhi	sp,128
    ori sp, sp, %lo(__alt_stack_pointer)
     1c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1cc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1d0:	d6bae114 	ori	gp,gp,60292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1d8:	10a1af14 	ori	r2,r2,34492

    movhi r3, %hi(__bss_end)
     1dc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1e0:	18e2e714 	ori	r3,r3,35740

    beq r2, r3, 1f
     1e4:	10c00326 	beq	r2,r3,1f4 <_start+0x40>

0:
    stw zero, (r2)
     1e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f0:	10fffd36 	bltu	r2,r3,1e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f4:	0011d340 	call	11d34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1f8:	0011f700 	call	11f70 <alt_main>

000001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1fc:	003fff06 	br	1fc <alt_after_alt_main>

00000200 <cam_init>:
/**
 * Initializes the camera module over I2C for slow rate and desired format.
 * Sets any necessary flags and controls for the camera and prepares all
 * data structures.
 */
void cam_init(){
     200:	defffe04 	addi	sp,sp,-8
     204:	dfc00115 	stw	ra,4(sp)
     208:	df000015 	stw	fp,0(sp)
     20c:	d839883a 	mov	fp,sp

	//initialize members
	fd.maxBrightness = 0x00;
     210:	d026d705 	stb	zero,-25764(gp)
	fd.minBrightness = 0xFF;
     214:	00c000b4 	movhi	r3,2
     218:	18e1b844 	addi	r3,r3,-31007
     21c:	00bfffc4 	movi	r2,-1
     220:	18800005 	stb	r2,0(r3)

	//initialize I2C camera hardware
	I2C_init();
     224:	00019200 	call	1920 <I2C_init>
	timer_delay(100000,TIMER_0);
     228:	010000b4 	movhi	r4,2
     22c:	2121a804 	addi	r4,r4,-31072
     230:	01602034 	movhi	r5,32896
     234:	29481004 	addi	r5,r5,8256
     238:	00021840 	call	2184 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_CLKRC,CAMERA_CLKRC_SCALER);
     23c:	01001804 	movi	r4,96
     240:	01400444 	movi	r5,17
     244:	018003c4 	movi	r6,15
     248:	0001a880 	call	1a88 <I2C_write>
	timer_delay(100000,TIMER_0);
     24c:	010000b4 	movhi	r4,2
     250:	2121a804 	addi	r4,r4,-31072
     254:	01602034 	movhi	r5,32896
     258:	29481004 	addi	r5,r5,8256
     25c:	00021840 	call	2184 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COML,CAMERA_COML_PCLK_VALID_MASK);
     260:	01001804 	movi	r4,96
     264:	01400e44 	movi	r5,57
     268:	01801004 	movi	r6,64
     26c:	0001a880 	call	1a88 <I2C_write>
	timer_delay(100000,TIMER_0);
     270:	010000b4 	movhi	r4,2
     274:	2121a804 	addi	r4,r4,-31072
     278:	01602034 	movhi	r5,32896
     27c:	29481004 	addi	r5,r5,8256
     280:	00021840 	call	2184 <timer_delay>
	I2C_write(CAMERA_I2C_ADDRESS,CAMERA_I2C_COMC,CAMERA_COMC_QCIF_MASK);
     284:	01001804 	movi	r4,96
     288:	01400504 	movi	r5,20
     28c:	01800804 	movi	r6,32
     290:	0001a880 	call	1a88 <I2C_write>
	timer_delay(100000,TIMER_0);
     294:	010000b4 	movhi	r4,2
     298:	2121a804 	addi	r4,r4,-31072
     29c:	01602034 	movhi	r5,32896
     2a0:	29481004 	addi	r5,r5,8256
     2a4:	00021840 	call	2184 <timer_delay>

	//clear VGA display
	vga_clearDisplay();
     2a8:	00023f00 	call	23f0 <vga_clearDisplay>
}
     2ac:	e037883a 	mov	sp,fp
     2b0:	dfc00117 	ldw	ra,4(sp)
     2b4:	df000017 	ldw	fp,0(sp)
     2b8:	dec00204 	addi	sp,sp,8
     2bc:	f800283a 	ret

000002c0 <cam_imageCapture>:

/**
 * Captures a frame from the camera and returns it unaltered.
 */
void cam_imageCapture(){
     2c0:	deffff04 	addi	sp,sp,-4
     2c4:	df000015 	stw	fp,0(sp)
     2c8:	d839883a 	mov	fp,sp
	static int row, col;
	static volatile uint8_t* vgaPtr;
	static uint8_t pixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2cc:	00a02034 	movhi	r2,32896
     2d0:	10880004 	addi	r2,r2,8192
     2d4:	10800003 	ldbu	r2,0(r2)
     2d8:	10803fcc 	andi	r2,r2,255
     2dc:	1080010c 	andi	r2,r2,4
     2e0:	1005003a 	cmpeq	r2,r2,zero
     2e4:	103ff91e 	bne	r2,zero,2cc <cam_imageCapture+0xc>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     2e8:	00a02034 	movhi	r2,32896
     2ec:	10880004 	addi	r2,r2,8192
     2f0:	10800003 	ldbu	r2,0(r2)
     2f4:	10803fcc 	andi	r2,r2,255
     2f8:	1080010c 	andi	r2,r2,4
     2fc:	1004c03a 	cmpne	r2,r2,zero
     300:	103ff91e 	bne	r2,zero,2e8 <cam_imageCapture+0x28>
	vgaPtr = VGA_MEM_START;
     304:	00a02034 	movhi	r2,32896
     308:	d0a6cf15 	stw	r2,-25796(gp)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     30c:	008023c4 	movi	r2,143
     310:	d0a6d115 	stw	r2,-25788(gp)
     314:	00006406 	br	4a8 <cam_imageCapture+0x1e8>
		//set next VGA row
		if(row > 11 && row < 132 && row%2){
     318:	d0a6d117 	ldw	r2,-25788(gp)
     31c:	10800310 	cmplti	r2,r2,12
     320:	1000121e 	bne	r2,zero,36c <cam_imageCapture+0xac>
     324:	d0a6d117 	ldw	r2,-25788(gp)
     328:	10802108 	cmpgei	r2,r2,132
     32c:	10000f1e 	bne	r2,zero,36c <cam_imageCapture+0xac>
     330:	d0a6d117 	ldw	r2,-25788(gp)
     334:	1080004c 	andi	r2,r2,1
     338:	10803fcc 	andi	r2,r2,255
     33c:	1005003a 	cmpeq	r2,r2,zero
     340:	10000a1e 	bne	r2,zero,36c <cam_imageCapture+0xac>
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
     344:	d0a6d117 	ldw	r2,-25788(gp)
     348:	10fffd04 	addi	r3,r2,-12
     34c:	1804d7fa 	srli	r2,r3,31
     350:	10c5883a 	add	r2,r2,r3
     354:	1005d07a 	srai	r2,r2,1
     358:	100491fa 	slli	r2,r2,7
     35c:	1007883a 	mov	r3,r2
     360:	00a02034 	movhi	r2,32896
     364:	1885883a 	add	r2,r3,r2
     368:	d0a6cf15 	stw	r2,-25796(gp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     36c:	00a02034 	movhi	r2,32896
     370:	10880004 	addi	r2,r2,8192
     374:	10800003 	ldbu	r2,0(r2)
     378:	10803fcc 	andi	r2,r2,255
     37c:	1080008c 	andi	r2,r2,2
     380:	1005003a 	cmpeq	r2,r2,zero
     384:	103ff91e 	bne	r2,zero,36c <cam_imageCapture+0xac>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     388:	d026d015 	stw	zero,-25792(gp)
     38c:	00003206 	br	458 <cam_imageCapture+0x198>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     390:	00a02034 	movhi	r2,32896
     394:	10880004 	addi	r2,r2,8192
     398:	10800003 	ldbu	r2,0(r2)
     39c:	10803fcc 	andi	r2,r2,255
     3a0:	1080004c 	andi	r2,r2,1
     3a4:	1005003a 	cmpeq	r2,r2,zero
     3a8:	103ff91e 	bne	r2,zero,390 <cam_imageCapture+0xd0>
			pixel = *CAM_PIXEL_REGISTER;
     3ac:	00a02034 	movhi	r2,32896
     3b0:	10880404 	addi	r2,r2,8208
     3b4:	10800003 	ldbu	r2,0(r2)
     3b8:	d0a6ce05 	stb	r2,-25800(gp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     3bc:	00a02034 	movhi	r2,32896
     3c0:	10880004 	addi	r2,r2,8192
     3c4:	10800003 	ldbu	r2,0(r2)
     3c8:	10803fcc 	andi	r2,r2,255
     3cc:	1080004c 	andi	r2,r2,1
     3d0:	10803fcc 	andi	r2,r2,255
     3d4:	1004c03a 	cmpne	r2,r2,zero
     3d8:	103ff81e 	bne	r2,zero,3bc <cam_imageCapture+0xfc>

			//display pixels to VGA
			if(row > 11 && row < 132 && row%2 && col > 7 && col < 168 && col%2){
     3dc:	d0a6d117 	ldw	r2,-25788(gp)
     3e0:	10800310 	cmplti	r2,r2,12
     3e4:	1000191e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     3e8:	d0a6d117 	ldw	r2,-25788(gp)
     3ec:	10802108 	cmpgei	r2,r2,132
     3f0:	1000161e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     3f4:	d0a6d117 	ldw	r2,-25788(gp)
     3f8:	1080004c 	andi	r2,r2,1
     3fc:	10803fcc 	andi	r2,r2,255
     400:	1005003a 	cmpeq	r2,r2,zero
     404:	1000111e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     408:	d0a6d017 	ldw	r2,-25792(gp)
     40c:	10800210 	cmplti	r2,r2,8
     410:	10000e1e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     414:	d0a6d017 	ldw	r2,-25792(gp)
     418:	10802a08 	cmpgei	r2,r2,168
     41c:	10000b1e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
     420:	d0a6d017 	ldw	r2,-25792(gp)
     424:	1080004c 	andi	r2,r2,1
     428:	10803fcc 	andi	r2,r2,255
     42c:	1005003a 	cmpeq	r2,r2,zero
     430:	1000061e 	bne	r2,zero,44c <cam_imageCapture+0x18c>
				//write to VGA
				*vgaPtr = pixel;
     434:	d0e6cf17 	ldw	r3,-25796(gp)
     438:	d0a6ce03 	ldbu	r2,-25800(gp)
     43c:	18800005 	stb	r2,0(r3)
				vgaPtr++;
     440:	d0a6cf17 	ldw	r2,-25796(gp)
     444:	10800044 	addi	r2,r2,1
     448:	d0a6cf15 	stw	r2,-25796(gp)
		if(row > 11 && row < 132 && row%2){
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     44c:	d0a6d017 	ldw	r2,-25792(gp)
     450:	10800044 	addi	r2,r2,1
     454:	d0a6d015 	stw	r2,-25792(gp)
     458:	d0a6d017 	ldw	r2,-25792(gp)
     45c:	10802c08 	cmpgei	r2,r2,176
     460:	1000071e 	bne	r2,zero,480 <cam_imageCapture+0x1c0>
     464:	00a02034 	movhi	r2,32896
     468:	10880004 	addi	r2,r2,8192
     46c:	10800003 	ldbu	r2,0(r2)
     470:	10803fcc 	andi	r2,r2,255
     474:	1080008c 	andi	r2,r2,2
     478:	1004c03a 	cmpne	r2,r2,zero
     47c:	103fc41e 	bne	r2,zero,390 <cam_imageCapture+0xd0>
				//write to VGA
				*vgaPtr = pixel;
				vgaPtr++;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     480:	00a02034 	movhi	r2,32896
     484:	10880004 	addi	r2,r2,8192
     488:	10800003 	ldbu	r2,0(r2)
     48c:	10803fcc 	andi	r2,r2,255
     490:	1080008c 	andi	r2,r2,2
     494:	1004c03a 	cmpne	r2,r2,zero
     498:	103ff91e 	bne	r2,zero,480 <cam_imageCapture+0x1c0>
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
	vgaPtr = VGA_MEM_START;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     49c:	d0a6d117 	ldw	r2,-25788(gp)
     4a0:	10bfffc4 	addi	r2,r2,-1
     4a4:	d0a6d115 	stw	r2,-25788(gp)
     4a8:	d0a6d117 	ldw	r2,-25788(gp)
     4ac:	1004403a 	cmpge	r2,r2,zero
     4b0:	103f991e 	bne	r2,zero,318 <cam_imageCapture+0x58>
				vgaPtr++;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
	}
}
     4b4:	e037883a 	mov	sp,fp
     4b8:	df000017 	ldw	fp,0(sp)
     4bc:	dec00104 	addi	sp,sp,4
     4c0:	f800283a 	ret

000004c4 <cam_track>:
 * Captures a frame from the camera and returns it filtered with the given value
 * @param thresMin value used as lower bound for filtering
 * @param thresMax value used as upper bound for filtering
 * @return meta-date of the frame as pointer to the internal structure.
 */
struct frameData* cam_track(uint8_t thresMin, uint8_t thresMax){
     4c4:	defffb04 	addi	sp,sp,-20
     4c8:	df000415 	stw	fp,16(sp)
     4cc:	df000404 	addi	fp,sp,16
     4d0:	e13ffc05 	stb	r4,-16(fp)
     4d4:	e17ffd05 	stb	r5,-12(fp)
	static int row, col;
	static volatile uint8_t* vgaPtr;
	static uint16_t pixel, vpixel, prevPixel;

	//start of image
	while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     4d8:	00a02034 	movhi	r2,32896
     4dc:	10880004 	addi	r2,r2,8192
     4e0:	10800003 	ldbu	r2,0(r2)
     4e4:	10803fcc 	andi	r2,r2,255
     4e8:	1080010c 	andi	r2,r2,4
     4ec:	1005003a 	cmpeq	r2,r2,zero
     4f0:	103ff91e 	bne	r2,zero,4d8 <cam_track+0x14>
	while((*CAM_CNTRL_REGISTER & CAM_CNTRL_VSYNC_MASK));
     4f4:	00a02034 	movhi	r2,32896
     4f8:	10880004 	addi	r2,r2,8192
     4fc:	10800003 	ldbu	r2,0(r2)
     500:	10803fcc 	andi	r2,r2,255
     504:	1080010c 	andi	r2,r2,4
     508:	1004c03a 	cmpne	r2,r2,zero
     50c:	103ff91e 	bne	r2,zero,4f4 <cam_track+0x30>
	fd.maxBrightness = 0x00;
     510:	d026d705 	stb	zero,-25764(gp)
	fd.minBrightness = 0xFF;
     514:	00c000b4 	movhi	r3,2
     518:	18e1b844 	addi	r3,r3,-31007
     51c:	00bfffc4 	movi	r2,-1
     520:	18800005 	stb	r2,0(r3)
	vgaPtr = VGA_MEM_START;
     524:	00a02034 	movhi	r2,32896
     528:	d0a6d415 	stw	r2,-25776(gp)

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     52c:	008023c4 	movi	r2,143
     530:	d0a6d615 	stw	r2,-25768(gp)
     534:	0000a906 	br	7dc <cam_track+0x318>
		//reset confidence
		prevPixel = 0;
     538:	d026d20d 	sth	zero,-25784(gp)

		//set next VGA row
		if(row > 11 && row < 132 && row%2){
     53c:	d0a6d617 	ldw	r2,-25768(gp)
     540:	10800310 	cmplti	r2,r2,12
     544:	1000121e 	bne	r2,zero,590 <cam_track+0xcc>
     548:	d0a6d617 	ldw	r2,-25768(gp)
     54c:	10802108 	cmpgei	r2,r2,132
     550:	10000f1e 	bne	r2,zero,590 <cam_track+0xcc>
     554:	d0a6d617 	ldw	r2,-25768(gp)
     558:	1080004c 	andi	r2,r2,1
     55c:	10803fcc 	andi	r2,r2,255
     560:	1005003a 	cmpeq	r2,r2,zero
     564:	10000a1e 	bne	r2,zero,590 <cam_track+0xcc>
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
     568:	d0a6d617 	ldw	r2,-25768(gp)
     56c:	10fffd04 	addi	r3,r2,-12
     570:	1804d7fa 	srli	r2,r3,31
     574:	10c5883a 	add	r2,r2,r3
     578:	1005d07a 	srai	r2,r2,1
     57c:	100491fa 	slli	r2,r2,7
     580:	1007883a 	mov	r3,r2
     584:	00a02034 	movhi	r2,32896
     588:	1885883a 	add	r2,r3,r2
     58c:	d0a6d415 	stw	r2,-25776(gp)
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK)); //while 0
     590:	00a02034 	movhi	r2,32896
     594:	10880004 	addi	r2,r2,8192
     598:	10800003 	ldbu	r2,0(r2)
     59c:	10803fcc 	andi	r2,r2,255
     5a0:	1080008c 	andi	r2,r2,2
     5a4:	1005003a 	cmpeq	r2,r2,zero
     5a8:	103ff91e 	bne	r2,zero,590 <cam_track+0xcc>
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     5ac:	d026d515 	stw	zero,-25772(gp)
     5b0:	00007606 	br	78c <cam_track+0x2c8>
			//get single pixel
			while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5b4:	00a02034 	movhi	r2,32896
     5b8:	10880004 	addi	r2,r2,8192
     5bc:	10800003 	ldbu	r2,0(r2)
     5c0:	10803fcc 	andi	r2,r2,255
     5c4:	1080004c 	andi	r2,r2,1
     5c8:	1005003a 	cmpeq	r2,r2,zero
     5cc:	103ff91e 	bne	r2,zero,5b4 <cam_track+0xf0>
			pixel = *CAM_PIXEL_REGISTER;
     5d0:	00a02034 	movhi	r2,32896
     5d4:	10880404 	addi	r2,r2,8208
     5d8:	10800003 	ldbu	r2,0(r2)
     5dc:	10803fcc 	andi	r2,r2,255
     5e0:	d0a6d30d 	sth	r2,-25780(gp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));
     5e4:	00a02034 	movhi	r2,32896
     5e8:	10880004 	addi	r2,r2,8192
     5ec:	10800003 	ldbu	r2,0(r2)
     5f0:	10803fcc 	andi	r2,r2,255
     5f4:	1080004c 	andi	r2,r2,1
     5f8:	10803fcc 	andi	r2,r2,255
     5fc:	1004c03a 	cmpne	r2,r2,zero
     600:	103ff81e 	bne	r2,zero,5e4 <cam_track+0x120>

			//display pixels to VGA
			if(row > 11 && row < 132 && row%2 && col > 7 && col < 168 && col%2){
     604:	d0a6d617 	ldw	r2,-25768(gp)
     608:	10800310 	cmplti	r2,r2,12
     60c:	10005c1e 	bne	r2,zero,780 <cam_track+0x2bc>
     610:	d0a6d617 	ldw	r2,-25768(gp)
     614:	10802108 	cmpgei	r2,r2,132
     618:	1000591e 	bne	r2,zero,780 <cam_track+0x2bc>
     61c:	d0a6d617 	ldw	r2,-25768(gp)
     620:	1080004c 	andi	r2,r2,1
     624:	10803fcc 	andi	r2,r2,255
     628:	1005003a 	cmpeq	r2,r2,zero
     62c:	1000541e 	bne	r2,zero,780 <cam_track+0x2bc>
     630:	d0a6d517 	ldw	r2,-25772(gp)
     634:	10800210 	cmplti	r2,r2,8
     638:	1000511e 	bne	r2,zero,780 <cam_track+0x2bc>
     63c:	d0a6d517 	ldw	r2,-25772(gp)
     640:	10802a08 	cmpgei	r2,r2,168
     644:	10004e1e 	bne	r2,zero,780 <cam_track+0x2bc>
     648:	d0a6d517 	ldw	r2,-25772(gp)
     64c:	1080004c 	andi	r2,r2,1
     650:	10803fcc 	andi	r2,r2,255
     654:	1005003a 	cmpeq	r2,r2,zero
     658:	1000491e 	bne	r2,zero,780 <cam_track+0x2bc>
				//write to VGA
				if(pixel >= thresMin && pixel <= thresMax){
     65c:	e0bffc03 	ldbu	r2,-16(fp)
     660:	d0e6d30b 	ldhu	r3,-25780(gp)
     664:	113fffcc 	andi	r4,r2,65535
     668:	18bfffcc 	andi	r2,r3,65535
     66c:	11001b36 	bltu	r2,r4,6dc <cam_track+0x218>
     670:	e0bffd03 	ldbu	r2,-12(fp)
     674:	d0e6d30b 	ldhu	r3,-25780(gp)
     678:	113fffcc 	andi	r4,r2,65535
     67c:	18bfffcc 	andi	r2,r3,65535
     680:	20801636 	bltu	r4,r2,6dc <cam_track+0x218>
					vpixel = MIN_CONFIDENCE_MATCH + prevPixel;
     684:	d0a6d20b 	ldhu	r2,-25784(gp)
     688:	10801fc4 	addi	r2,r2,127
     68c:	d0a6d28d 	sth	r2,-25782(gp)
					prevPixel = *vgaPtr = (vpixel > 0x00FF)? 0xFF : (uint8_t)(vpixel);
     690:	d0a6d417 	ldw	r2,-25776(gp)
     694:	e0bfff15 	stw	r2,-4(fp)
     698:	d0a6d28b 	ldhu	r2,-25782(gp)
     69c:	10bfffcc 	andi	r2,r2,65535
     6a0:	10804028 	cmpgeui	r2,r2,256
     6a4:	1000031e 	bne	r2,zero,6b4 <cam_track+0x1f0>
     6a8:	d0a6d28b 	ldhu	r2,-25782(gp)
     6ac:	e0bffe05 	stb	r2,-8(fp)
     6b0:	00000206 	br	6bc <cam_track+0x1f8>
     6b4:	00ffffc4 	movi	r3,-1
     6b8:	e0fffe05 	stb	r3,-8(fp)
     6bc:	e0bffe03 	ldbu	r2,-8(fp)
     6c0:	e0ffff17 	ldw	r3,-4(fp)
     6c4:	18800005 	stb	r2,0(r3)
     6c8:	e0ffff17 	ldw	r3,-4(fp)
     6cc:	18800003 	ldbu	r2,0(r3)
     6d0:	10803fcc 	andi	r2,r2,255
     6d4:	d0a6d20d 	sth	r2,-25784(gp)
			while((*CAM_CNTRL_REGISTER & CAM_CNTRL_PCLK_MASK));

			//display pixels to VGA
			if(row > 11 && row < 132 && row%2 && col > 7 && col < 168 && col%2){
				//write to VGA
				if(pixel >= thresMin && pixel <= thresMax){
     6d8:	00001106 	br	720 <cam_track+0x25c>
					vpixel = MIN_CONFIDENCE_MATCH + prevPixel;
					prevPixel = *vgaPtr = (vpixel > 0x00FF)? 0xFF : (uint8_t)(vpixel);
				}else{
					vpixel = (prevPixel >= MIN_CONFIDENCE_MATCH)?
     6dc:	d0a6d20b 	ldhu	r2,-25784(gp)
     6e0:	10bfffcc 	andi	r2,r2,65535
     6e4:	10801ff0 	cmpltui	r2,r2,127
     6e8:	1000041e 	bne	r2,zero,6fc <cam_track+0x238>
     6ec:	d0a6d20b 	ldhu	r2,-25784(gp)
     6f0:	10bfe044 	addi	r2,r2,-127
     6f4:	e0bffd8d 	sth	r2,-10(fp)
     6f8:	00000106 	br	700 <cam_track+0x23c>
     6fc:	e03ffd8d 	sth	zero,-10(fp)
     700:	e0bffd8b 	ldhu	r2,-10(fp)
     704:	d0a6d28d 	sth	r2,-25782(gp)
							 (prevPixel - MIN_CONFIDENCE_MATCH) : 0;
					prevPixel = *vgaPtr = (uint8_t)(vpixel);
     708:	d0e6d417 	ldw	r3,-25776(gp)
     70c:	d0a6d28b 	ldhu	r2,-25782(gp)
     710:	18800005 	stb	r2,0(r3)
     714:	18800003 	ldbu	r2,0(r3)
     718:	10803fcc 	andi	r2,r2,255
     71c:	d0a6d20d 	sth	r2,-25784(gp)
				}
				vgaPtr++;
     720:	d0a6d417 	ldw	r2,-25776(gp)
     724:	10800044 	addi	r2,r2,1
     728:	d0a6d415 	stw	r2,-25776(gp)

				//update pixel information
				if(fd.maxBrightness < pixel)
     72c:	d0a6d703 	ldbu	r2,-25764(gp)
     730:	10803fcc 	andi	r2,r2,255
     734:	d0e6d30b 	ldhu	r3,-25780(gp)
     738:	113fffcc 	andi	r4,r2,65535
     73c:	18bfffcc 	andi	r2,r3,65535
     740:	2080022e 	bgeu	r4,r2,74c <cam_track+0x288>
					fd.maxBrightness = pixel;
     744:	d0a6d30b 	ldhu	r2,-25780(gp)
     748:	d0a6d705 	stb	r2,-25764(gp)
				if(fd.minBrightness > pixel)
     74c:	008000b4 	movhi	r2,2
     750:	10a1b844 	addi	r2,r2,-31007
     754:	10800003 	ldbu	r2,0(r2)
     758:	10803fcc 	andi	r2,r2,255
     75c:	d0e6d30b 	ldhu	r3,-25780(gp)
     760:	113fffcc 	andi	r4,r2,65535
     764:	18bfffcc 	andi	r2,r3,65535
     768:	1100052e 	bgeu	r2,r4,780 <cam_track+0x2bc>
					fd.minBrightness = pixel;
     76c:	d0a6d30b 	ldhu	r2,-25780(gp)
     770:	1007883a 	mov	r3,r2
     774:	008000b4 	movhi	r2,2
     778:	10a1b844 	addi	r2,r2,-31007
     77c:	10c00005 	stb	r3,0(r2)
		if(row > 11 && row < 132 && row%2){
			vgaPtr = VGA_MEM_START + ((row - 12)/2 << 7);
		}
		//gather pixels in each column
		while(!(*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK)); //while 0
		for(col = 0; (col < QCIF_COL_MAX) && (*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK); col++){
     780:	d0a6d517 	ldw	r2,-25772(gp)
     784:	10800044 	addi	r2,r2,1
     788:	d0a6d515 	stw	r2,-25772(gp)
     78c:	d0a6d517 	ldw	r2,-25772(gp)
     790:	10802c08 	cmpgei	r2,r2,176
     794:	1000071e 	bne	r2,zero,7b4 <cam_track+0x2f0>
     798:	00a02034 	movhi	r2,32896
     79c:	10880004 	addi	r2,r2,8192
     7a0:	10800003 	ldbu	r2,0(r2)
     7a4:	10803fcc 	andi	r2,r2,255
     7a8:	1080008c 	andi	r2,r2,2
     7ac:	1004c03a 	cmpne	r2,r2,zero
     7b0:	103f801e 	bne	r2,zero,5b4 <cam_track+0xf0>
					fd.maxBrightness = pixel;
				if(fd.minBrightness > pixel)
					fd.minBrightness = pixel;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
     7b4:	00a02034 	movhi	r2,32896
     7b8:	10880004 	addi	r2,r2,8192
     7bc:	10800003 	ldbu	r2,0(r2)
     7c0:	10803fcc 	andi	r2,r2,255
     7c4:	1080008c 	andi	r2,r2,2
     7c8:	1004c03a 	cmpne	r2,r2,zero
     7cc:	103ff91e 	bne	r2,zero,7b4 <cam_track+0x2f0>
	fd.maxBrightness = 0x00;
	fd.minBrightness = 0xFF;
	vgaPtr = VGA_MEM_START;

	//gather by row
	for(row = QCIF_ROW_MAX-1;row >= 0; row--){
     7d0:	d0a6d617 	ldw	r2,-25768(gp)
     7d4:	10bfffc4 	addi	r2,r2,-1
     7d8:	d0a6d615 	stw	r2,-25768(gp)
     7dc:	d0a6d617 	ldw	r2,-25768(gp)
     7e0:	1004403a 	cmpge	r2,r2,zero
     7e4:	103f541e 	bne	r2,zero,538 <cam_track+0x74>
					fd.minBrightness = pixel;
			}
		}
		while((*CAM_CNTRL_REGISTER & CAM_CNTRL_HREF_MASK));
	}
	return &fd;
     7e8:	d0a6d704 	addi	r2,gp,-25764
}
     7ec:	e037883a 	mov	sp,fp
     7f0:	df000017 	ldw	fp,0(sp)
     7f4:	dec00104 	addi	sp,sp,4
     7f8:	f800283a 	ret

000007fc <cmd_init>:

/**
 * Initializes the command line module. Specifically the command list is
 * generated so that command parsing can occur.
 */
void cmd_init(){
     7fc:	defffe04 	addi	sp,sp,-8
     800:	dfc00115 	stw	ra,4(sp)
     804:	df000015 	stw	fp,0(sp)
     808:	d839883a 	mov	fp,sp
	_generateList();
     80c:	00009540 	call	954 <_generateList>
}
     810:	e037883a 	mov	sp,fp
     814:	dfc00117 	ldw	ra,4(sp)
     818:	df000017 	ldw	fp,0(sp)
     81c:	dec00204 	addi	sp,sp,8
     820:	f800283a 	ret

00000824 <cmd_getCommand>:

/**
 * Gets the command from the user and will perform that action. Blocking
 */
void cmd_getCommand(){
     824:	defffa04 	addi	sp,sp,-24
     828:	dfc00515 	stw	ra,20(sp)
     82c:	df000415 	stw	fp,16(sp)
     830:	df000404 	addi	fp,sp,16
	//print prompt to the user for next command
	printf("\nEnter Command:");
     834:	01000074 	movhi	r4,1
     838:	21111004 	addi	r4,r4,17472
     83c:	00037bc0 	call	37bc <printf>

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
     840:	00800074 	movhi	r2,1
     844:	109ae204 	addi	r2,r2,27528
     848:	10800017 	ldw	r2,0(r2)
     84c:	11800117 	ldw	r6,4(r2)
     850:	010000b4 	movhi	r4,2
     854:	2121d104 	addi	r4,r4,-30908
     858:	01401404 	movi	r5,80
     85c:	00029fc0 	call	29fc <fgets>
	char* str = inputStr;
     860:	008000b4 	movhi	r2,2
     864:	10a1d104 	addi	r2,r2,-30908
     868:	e0bffe15 	stw	r2,-8(fp)
	while(*str){
     86c:	00001d06 	br	8e4 <cmd_getCommand+0xc0>
		*str = toupper(*str);
     870:	e0bffe17 	ldw	r2,-8(fp)
     874:	10800003 	ldbu	r2,0(r2)
     878:	10803fcc 	andi	r2,r2,255
     87c:	1080201c 	xori	r2,r2,128
     880:	10bfe004 	addi	r2,r2,-128
     884:	e0bffc15 	stw	r2,-16(fp)
     888:	00800074 	movhi	r2,1
     88c:	109ae104 	addi	r2,r2,27524
     890:	10c00017 	ldw	r3,0(r2)
     894:	e0bffc17 	ldw	r2,-16(fp)
     898:	1885883a 	add	r2,r3,r2
     89c:	10800003 	ldbu	r2,0(r2)
     8a0:	10803fcc 	andi	r2,r2,255
     8a4:	1080008c 	andi	r2,r2,2
     8a8:	1005003a 	cmpeq	r2,r2,zero
     8ac:	1000041e 	bne	r2,zero,8c0 <cmd_getCommand+0x9c>
     8b0:	e0bffc17 	ldw	r2,-16(fp)
     8b4:	10bff804 	addi	r2,r2,-32
     8b8:	e0bfff15 	stw	r2,-4(fp)
     8bc:	00000206 	br	8c8 <cmd_getCommand+0xa4>
     8c0:	e0bffc17 	ldw	r2,-16(fp)
     8c4:	e0bfff15 	stw	r2,-4(fp)
     8c8:	e0bfff17 	ldw	r2,-4(fp)
     8cc:	1007883a 	mov	r3,r2
     8d0:	e0bffe17 	ldw	r2,-8(fp)
     8d4:	10c00005 	stb	r3,0(r2)
		str++;
     8d8:	e0bffe17 	ldw	r2,-8(fp)
     8dc:	10800044 	addi	r2,r2,1
     8e0:	e0bffe15 	stw	r2,-8(fp)
	printf("\nEnter Command:");

	//block until string entered
	fgets(inputStr, sizeof inputStr,stdin);
	char* str = inputStr;
	while(*str){
     8e4:	e0bffe17 	ldw	r2,-8(fp)
     8e8:	10800003 	ldbu	r2,0(r2)
     8ec:	10803fcc 	andi	r2,r2,255
     8f0:	1080201c 	xori	r2,r2,128
     8f4:	10bfe004 	addi	r2,r2,-128
     8f8:	1004c03a 	cmpne	r2,r2,zero
     8fc:	103fdc1e 	bne	r2,zero,870 <cmd_getCommand+0x4c>
		*str = toupper(*str);
		str++;
	}

	//parse for command
	int matched = sscanf(inputStr,"%s",cmdStr);
     900:	010000b4 	movhi	r4,2
     904:	2121d104 	addi	r4,r4,-30908
     908:	01400074 	movhi	r5,1
     90c:	29511404 	addi	r5,r5,17488
     910:	018000b4 	movhi	r6,2
     914:	31a1e504 	addi	r6,r6,-30828
     918:	0003cc00 	call	3cc0 <sscanf>
     91c:	e0bffd15 	stw	r2,-12(fp)
	if(matched != EOF){
     920:	e0bffd17 	ldw	r2,-12(fp)
     924:	10bfffe0 	cmpeqi	r2,r2,-1
     928:	1000051e 	bne	r2,zero,940 <cmd_getCommand+0x11c>
		cmd_parseInput(inputStr,cmdStr);
     92c:	010000b4 	movhi	r4,2
     930:	2121d104 	addi	r4,r4,-30908
     934:	014000b4 	movhi	r5,2
     938:	2961e504 	addi	r5,r5,-30828
     93c:	0000a240 	call	a24 <cmd_parseInput>
	}
}
     940:	e037883a 	mov	sp,fp
     944:	dfc00117 	ldw	ra,4(sp)
     948:	df000017 	ldw	fp,0(sp)
     94c:	dec00204 	addi	sp,sp,8
     950:	f800283a 	ret

00000954 <_generateList>:

/**
 * Generates the list of commands in an array of pointers so that commands
 * can be looked up based on their name when parsed.
 */
static void _generateList(){
     954:	deffff04 	addi	sp,sp,-4
     958:	df000015 	stw	fp,0(sp)
     95c:	d839883a 	mov	fp,sp
	//setup command list
	commandList[0] = &RR;
     960:	00c000b4 	movhi	r3,2
     964:	18e1c804 	addi	r3,r3,-30944
     968:	00800074 	movhi	r2,1
     96c:	10944404 	addi	r2,r2,20752
     970:	18800015 	stw	r2,0(r3)
	commandList[1] = &WR;
     974:	00c000b4 	movhi	r3,2
     978:	18e1c804 	addi	r3,r3,-30944
     97c:	00800074 	movhi	r2,1
     980:	10944704 	addi	r2,r2,20764
     984:	18800115 	stw	r2,4(r3)
	commandList[2] = &HELP;
     988:	00c000b4 	movhi	r3,2
     98c:	18e1c804 	addi	r3,r3,-30944
     990:	00800074 	movhi	r2,1
     994:	10943504 	addi	r2,r2,20692
     998:	18800215 	stw	r2,8(r3)
	commandList[3] = &PAN;
     99c:	00c000b4 	movhi	r3,2
     9a0:	18e1c804 	addi	r3,r3,-30944
     9a4:	00800074 	movhi	r2,1
     9a8:	10944a04 	addi	r2,r2,20776
     9ac:	18800315 	stw	r2,12(r3)
	commandList[4] = &TILT;
     9b0:	00c000b4 	movhi	r3,2
     9b4:	18e1c804 	addi	r3,r3,-30944
     9b8:	00800074 	movhi	r2,1
     9bc:	10944d04 	addi	r2,r2,20788
     9c0:	18800415 	stw	r2,16(r3)
	commandList[5] = &WRCAMREG;
     9c4:	00c000b4 	movhi	r3,2
     9c8:	18e1c804 	addi	r3,r3,-30944
     9cc:	00800074 	movhi	r2,1
     9d0:	10943b04 	addi	r2,r2,20716
     9d4:	18800515 	stw	r2,20(r3)
	commandList[6] = &RDCAMREG;
     9d8:	00c000b4 	movhi	r3,2
     9dc:	18e1c804 	addi	r3,r3,-30944
     9e0:	00800074 	movhi	r2,1
     9e4:	10943804 	addi	r2,r2,20704
     9e8:	18800615 	stw	r2,24(r3)
	commandList[7] = &IMAGE;
     9ec:	00c000b4 	movhi	r3,2
     9f0:	18e1c804 	addi	r3,r3,-30944
     9f4:	00800074 	movhi	r2,1
     9f8:	10943e04 	addi	r2,r2,20728
     9fc:	18800715 	stw	r2,28(r3)
	commandList[8] = &TRACK;
     a00:	00c000b4 	movhi	r3,2
     a04:	18e1c804 	addi	r3,r3,-30944
     a08:	00800074 	movhi	r2,1
     a0c:	10944104 	addi	r2,r2,20740
     a10:	18800815 	stw	r2,32(r3)
}
     a14:	e037883a 	mov	sp,fp
     a18:	df000017 	ldw	fp,0(sp)
     a1c:	dec00104 	addi	sp,sp,4
     a20:	f800283a 	ret

00000a24 <cmd_parseInput>:
 * Matches the command given by the user with the predefined list. Will run
 * any command that is matched with given.
 * @param inputStr original string from the user.
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
     a24:	defffa04 	addi	sp,sp,-24
     a28:	dfc00515 	stw	ra,20(sp)
     a2c:	df000415 	stw	fp,16(sp)
     a30:	df000404 	addi	fp,sp,16
     a34:	e13ffe15 	stw	r4,-8(fp)
     a38:	e17fff15 	stw	r5,-4(fp)
		//search command list for match
		int commandFoundFlag = 0;
     a3c:	e03ffd15 	stw	zero,-12(fp)
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     a40:	e03ffc15 	stw	zero,-16(fp)
     a44:	00001c06 	br	ab8 <cmd_parseInput+0x94>
			if(strcmp(cmdStr,commandList[i]->name)==0){
     a48:	e0bffc17 	ldw	r2,-16(fp)
     a4c:	00c000b4 	movhi	r3,2
     a50:	18e1c804 	addi	r3,r3,-30944
     a54:	1085883a 	add	r2,r2,r2
     a58:	1085883a 	add	r2,r2,r2
     a5c:	10c5883a 	add	r2,r2,r3
     a60:	10800017 	ldw	r2,0(r2)
     a64:	11400017 	ldw	r5,0(r2)
     a68:	e13fff17 	ldw	r4,-4(fp)
     a6c:	0003f200 	call	3f20 <strcmp>
     a70:	1004c03a 	cmpne	r2,r2,zero
     a74:	10000d1e 	bne	r2,zero,aac <cmd_parseInput+0x88>
				lcd_clr();
     a78:	0001cfc0 	call	1cfc <lcd_clr>
				commandList[i]->cmdFnt(inputStr);
     a7c:	e0bffc17 	ldw	r2,-16(fp)
     a80:	00c000b4 	movhi	r3,2
     a84:	18e1c804 	addi	r3,r3,-30944
     a88:	1085883a 	add	r2,r2,r2
     a8c:	1085883a 	add	r2,r2,r2
     a90:	10c5883a 	add	r2,r2,r3
     a94:	10800017 	ldw	r2,0(r2)
     a98:	10800217 	ldw	r2,8(r2)
     a9c:	e13ffe17 	ldw	r4,-8(fp)
     aa0:	103ee83a 	callr	r2
				commandFoundFlag = 1;
     aa4:	00800044 	movi	r2,1
     aa8:	e0bffd15 	stw	r2,-12(fp)
 * @param cmdStr parsed out command for matching and further parsing.
 */
static void cmd_parseInput(char* inputStr, char* cmdStr){
		//search command list for match
		int commandFoundFlag = 0;
		int i; for(i = 0; i < NUMBER_OF_COMMANDS;++i){
     aac:	e0bffc17 	ldw	r2,-16(fp)
     ab0:	10800044 	addi	r2,r2,1
     ab4:	e0bffc15 	stw	r2,-16(fp)
     ab8:	e0bffc17 	ldw	r2,-16(fp)
     abc:	10800250 	cmplti	r2,r2,9
     ac0:	103fe11e 	bne	r2,zero,a48 <cmd_parseInput+0x24>
				commandFoundFlag = 1;
			}
		}

		//if command not found then print error message
		if(!commandFoundFlag){
     ac4:	e0bffd17 	ldw	r2,-12(fp)
     ac8:	1004c03a 	cmpne	r2,r2,zero
     acc:	1000031e 	bne	r2,zero,adc <cmd_parseInput+0xb8>
			printf("Invalid Command.\n");
     ad0:	01000074 	movhi	r4,1
     ad4:	21111504 	addi	r4,r4,17492
     ad8:	00038f80 	call	38f8 <puts>
		}
}
     adc:	e037883a 	mov	sp,fp
     ae0:	dfc00117 	ldw	ra,4(sp)
     ae4:	df000017 	ldw	fp,0(sp)
     ae8:	dec00204 	addi	sp,sp,8
     aec:	f800283a 	ret

00000af0 <_help>:

/**
 * Help Command Function
 * @param arg string to parse
 */
static void _help(char* arg){
     af0:	deffe404 	addi	sp,sp,-112
     af4:	dfc01b15 	stw	ra,108(sp)
     af8:	df001a15 	stw	fp,104(sp)
     afc:	df001a04 	addi	fp,sp,104
     b00:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Help Menu");
     b04:	01000074 	movhi	r4,1
     b08:	21111a04 	addi	r4,r4,17512
     b0c:	0001de00 	call	1de0 <lcd_printString>
	char cmd[5];
	char otherStr[80]; //large to prevent failure of size

	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
     b10:	e1bfe904 	addi	r6,fp,-92
     b14:	e1ffea44 	addi	r7,fp,-87
     b18:	e13fff17 	ldw	r4,-4(fp)
     b1c:	01400074 	movhi	r5,1
     b20:	29511d04 	addi	r5,r5,17524
     b24:	0003cc00 	call	3cc0 <sscanf>
     b28:	e0bfe815 	stw	r2,-96(fp)
	if(matched == 2){
     b2c:	e0bfe817 	ldw	r2,-96(fp)
     b30:	10800098 	cmpnei	r2,r2,2
     b34:	1000441e 	bne	r2,zero,c48 <_help+0x158>
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
     b38:	e13fea44 	addi	r4,fp,-87
     b3c:	01400074 	movhi	r5,1
     b40:	29511f04 	addi	r5,r5,17532
     b44:	0003f200 	call	3f20 <strcmp>
     b48:	1004c03a 	cmpne	r2,r2,zero
     b4c:	10001c1e 	bne	r2,zero,bc0 <_help+0xd0>
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     b50:	e03fe715 	stw	zero,-100(fp)
     b54:	00001606 	br	bb0 <_help+0xc0>
				printf("%s:\n%s\n",commandList[i]->name,
     b58:	e0bfe717 	ldw	r2,-100(fp)
     b5c:	00c000b4 	movhi	r3,2
     b60:	18e1c804 	addi	r3,r3,-30944
     b64:	1085883a 	add	r2,r2,r2
     b68:	1085883a 	add	r2,r2,r2
     b6c:	10c5883a 	add	r2,r2,r3
     b70:	10800017 	ldw	r2,0(r2)
     b74:	11400017 	ldw	r5,0(r2)
     b78:	e0bfe717 	ldw	r2,-100(fp)
     b7c:	00c000b4 	movhi	r3,2
     b80:	18e1c804 	addi	r3,r3,-30944
     b84:	1085883a 	add	r2,r2,r2
     b88:	1085883a 	add	r2,r2,r2
     b8c:	10c5883a 	add	r2,r2,r3
     b90:	10800017 	ldw	r2,0(r2)
     b94:	11800117 	ldw	r6,4(r2)
     b98:	01000074 	movhi	r4,1
     b9c:	21112004 	addi	r4,r4,17536
     ba0:	00037bc0 	call	37bc <printf>
	//parse string for HELP <command> or HELP
	int matched = sscanf(arg,"%s %s",cmd,otherStr);
	if(matched == 2){
		//check for all parameter
		if(strcmp(otherStr,"ALL") == 0){
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     ba4:	e0bfe717 	ldw	r2,-100(fp)
     ba8:	10800044 	addi	r2,r2,1
     bac:	e0bfe715 	stw	r2,-100(fp)
     bb0:	e0bfe717 	ldw	r2,-100(fp)
     bb4:	10800250 	cmplti	r2,r2,9
     bb8:	103fe71e 	bne	r2,zero,b58 <_help+0x68>
				printf("%s:\n%s\n",commandList[i]->name,
						commandList[i]->helpInfo);
			}
			return;
     bbc:	00002606 	br	c58 <_help+0x168>
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     bc0:	e03fe615 	stw	zero,-104(fp)
     bc4:	00001906 	br	c2c <_help+0x13c>
				if(strcmp(otherStr,commandList[i]->name)==0){
     bc8:	e0bfe617 	ldw	r2,-104(fp)
     bcc:	00c000b4 	movhi	r3,2
     bd0:	18e1c804 	addi	r3,r3,-30944
     bd4:	1085883a 	add	r2,r2,r2
     bd8:	1085883a 	add	r2,r2,r2
     bdc:	10c5883a 	add	r2,r2,r3
     be0:	10800017 	ldw	r2,0(r2)
     be4:	11400017 	ldw	r5,0(r2)
     be8:	e13fea44 	addi	r4,fp,-87
     bec:	0003f200 	call	3f20 <strcmp>
     bf0:	1004c03a 	cmpne	r2,r2,zero
     bf4:	10000a1e 	bne	r2,zero,c20 <_help+0x130>
					printf(commandList[i]->helpInfo);
     bf8:	e0bfe617 	ldw	r2,-104(fp)
     bfc:	00c000b4 	movhi	r3,2
     c00:	18e1c804 	addi	r3,r3,-30944
     c04:	1085883a 	add	r2,r2,r2
     c08:	1085883a 	add	r2,r2,r2
     c0c:	10c5883a 	add	r2,r2,r3
     c10:	10800017 	ldw	r2,0(r2)
     c14:	11000117 	ldw	r4,4(r2)
     c18:	00037bc0 	call	37bc <printf>
					return; //ends early as the item was found
     c1c:	00000e06 	br	c58 <_help+0x168>
						commandList[i]->helpInfo);
			}
			return;
		}else{
			//search list of commands for helpInfo and print
			int i; for(i = 0; i < NUMBER_OF_COMMANDS; ++i){
     c20:	e0bfe617 	ldw	r2,-104(fp)
     c24:	10800044 	addi	r2,r2,1
     c28:	e0bfe615 	stw	r2,-104(fp)
     c2c:	e0bfe617 	ldw	r2,-104(fp)
     c30:	10800250 	cmplti	r2,r2,9
     c34:	103fe41e 	bne	r2,zero,bc8 <_help+0xd8>
				}
			}
		}

		//did not find command.
		printf("Command %s is not valid.\n",otherStr);
     c38:	e17fea44 	addi	r5,fp,-87
     c3c:	01000074 	movhi	r4,1
     c40:	21112204 	addi	r4,r4,17544
     c44:	00037bc0 	call	37bc <printf>
	}

	//print its own help info
	printf(HELP.helpInfo);
     c48:	00800074 	movhi	r2,1
     c4c:	10943504 	addi	r2,r2,20692
     c50:	11000117 	ldw	r4,4(r2)
     c54:	00037bc0 	call	37bc <printf>
}
     c58:	e037883a 	mov	sp,fp
     c5c:	dfc00117 	ldw	ra,4(sp)
     c60:	df000017 	ldw	fp,0(sp)
     c64:	dec00204 	addi	sp,sp,8
     c68:	f800283a 	ret

00000c6c <_readCam>:

/**
 * Reads from the I2C camera.
 * @param arg string to parse
 */
static void _readCam(char* arg){
     c6c:	defff704 	addi	sp,sp,-36
     c70:	dfc00815 	stw	ra,32(sp)
     c74:	df000715 	stw	fp,28(sp)
     c78:	df000704 	addi	fp,sp,28
     c7c:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading I2C");
     c80:	01000074 	movhi	r4,1
     c84:	2111ab04 	addi	r4,r4,18092
     c88:	0001de00 	call	1de0 <lcd_printString>
	char cmd[10];
	unsigned int regNumber;
	int matched = sscanf(arg,"%s %x",cmd,&regNumber);
     c8c:	e1bffb04 	addi	r6,fp,-20
     c90:	e1fffe04 	addi	r7,fp,-8
     c94:	e13fff17 	ldw	r4,-4(fp)
     c98:	01400074 	movhi	r5,1
     c9c:	2951ae04 	addi	r5,r5,18104
     ca0:	0003cc00 	call	3cc0 <sscanf>
     ca4:	e0bffa15 	stw	r2,-24(fp)
	if(matched > 1){
     ca8:	e0bffa17 	ldw	r2,-24(fp)
     cac:	10800090 	cmplti	r2,r2,2
     cb0:	10000b1e 	bne	r2,zero,ce0 <_readCam+0x74>
		unsigned char data = I2C_read(CAMERA_I2C_ADDRESS,regNumber);
     cb4:	e0bffe17 	ldw	r2,-8(fp)
     cb8:	11403fcc 	andi	r5,r2,255
     cbc:	01001804 	movi	r4,96
     cc0:	00019900 	call	1990 <I2C_read>
     cc4:	e0bff905 	stb	r2,-28(fp)
		printf("%02x: %02x\n",regNumber,data);
     cc8:	e17ffe17 	ldw	r5,-8(fp)
     ccc:	e1bff903 	ldbu	r6,-28(fp)
     cd0:	01000074 	movhi	r4,1
     cd4:	2111b004 	addi	r4,r4,18112
     cd8:	00037bc0 	call	37bc <printf>
     cdc:	00000306 	br	cec <_readCam+0x80>
	}else{
		printf("Invalid read command structure\n");
     ce0:	01000074 	movhi	r4,1
     ce4:	2111b304 	addi	r4,r4,18124
     ce8:	00038f80 	call	38f8 <puts>
	}
}
     cec:	e037883a 	mov	sp,fp
     cf0:	dfc00117 	ldw	ra,4(sp)
     cf4:	df000017 	ldw	fp,0(sp)
     cf8:	dec00204 	addi	sp,sp,8
     cfc:	f800283a 	ret

00000d00 <_writeCam>:

/**
 * Writes to the I2C camera.
 * @param arg string to parse.
 */
static void _writeCam(char* arg){
     d00:	defff604 	addi	sp,sp,-40
     d04:	dfc00915 	stw	ra,36(sp)
     d08:	df000815 	stw	fp,32(sp)
     d0c:	df000804 	addi	fp,sp,32
     d10:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing I2C");
     d14:	01000074 	movhi	r4,1
     d18:	2111bb04 	addi	r4,r4,18156
     d1c:	0001de00 	call	1de0 <lcd_printString>
	char cmd[10];
	unsigned int regNumber, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&regNumber,&value);
     d20:	e1bffa04 	addi	r6,fp,-24
     d24:	e1fffd04 	addi	r7,fp,-12
     d28:	e0bffe04 	addi	r2,fp,-8
     d2c:	d8800015 	stw	r2,0(sp)
     d30:	e13fff17 	ldw	r4,-4(fp)
     d34:	01400074 	movhi	r5,1
     d38:	2951be04 	addi	r5,r5,18168
     d3c:	0003cc00 	call	3cc0 <sscanf>
     d40:	e0bff915 	stw	r2,-28(fp)
	if(matched > 2){
     d44:	e0bff917 	ldw	r2,-28(fp)
     d48:	108000d0 	cmplti	r2,r2,3
     d4c:	1000071e 	bne	r2,zero,d6c <_writeCam+0x6c>
		I2C_write(CAMERA_I2C_ADDRESS,regNumber,value);
     d50:	e0bffd17 	ldw	r2,-12(fp)
     d54:	11403fcc 	andi	r5,r2,255
     d58:	e0bffe17 	ldw	r2,-8(fp)
     d5c:	11803fcc 	andi	r6,r2,255
     d60:	01001804 	movi	r4,96
     d64:	0001a880 	call	1a88 <I2C_write>
     d68:	00000306 	br	d78 <_writeCam+0x78>
	}else{
		printf("Invalid write command structure\n");
     d6c:	01000074 	movhi	r4,1
     d70:	2111c104 	addi	r4,r4,18180
     d74:	00038f80 	call	38f8 <puts>
	}
}
     d78:	e037883a 	mov	sp,fp
     d7c:	dfc00117 	ldw	ra,4(sp)
     d80:	df000017 	ldw	fp,0(sp)
     d84:	dec00204 	addi	sp,sp,8
     d88:	f800283a 	ret

00000d8c <_displayImage>:
/**
 * Displays the camera image onto the VGA hardware. Runs in a loop until
 * pushbutton two is pressed to exit.
 * @param arg ignored
 */
static void _displayImage(char* arg){
     d8c:	defffd04 	addi	sp,sp,-12
     d90:	dfc00215 	stw	ra,8(sp)
     d94:	df000115 	stw	fp,4(sp)
     d98:	df000104 	addi	fp,sp,4
     d9c:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Displaying\nCamera Image");
     da0:	01000074 	movhi	r4,1
     da4:	2111c904 	addi	r4,r4,18212
     da8:	0001de00 	call	1de0 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     dac:	01000074 	movhi	r4,1
     db0:	2111cf04 	addi	r4,r4,18236
     db4:	00038f80 	call	38f8 <puts>

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     db8:	00000106 	br	dc0 <_displayImage+0x34>
		cam_imageCapture();
     dbc:	00002c00 	call	2c0 <cam_imageCapture>
 */
static void _displayImage(char* arg){
	lcd_printString("Displaying\nCamera Image");
	printf("Press Button 2 to exit.\n");

	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     dc0:	01000044 	movi	r4,1
     dc4:	00021480 	call	2148 <pushbutton_read>
     dc8:	10803fcc 	andi	r2,r2,255
     dcc:	1004c03a 	cmpne	r2,r2,zero
     dd0:	103ffa1e 	bne	r2,zero,dbc <_displayImage+0x30>
		cam_imageCapture();
	}

	//set to default
	vga_clearDisplay();
     dd4:	00023f00 	call	23f0 <vga_clearDisplay>
}
     dd8:	e037883a 	mov	sp,fp
     ddc:	dfc00117 	ldw	ra,4(sp)
     de0:	df000017 	ldw	fp,0(sp)
     de4:	dec00204 	addi	sp,sp,8
     de8:	f800283a 	ret

00000dec <_track>:
/**
 * Track command looks for target that meets threshold requirement. Manipulates
 * servo turret to track target under closed loop control.
 * @param arg ignored
 */
static void _track(char* arg){
     dec:	defff104 	addi	sp,sp,-60
     df0:	dfc00e15 	stw	ra,56(sp)
     df4:	df000d15 	stw	fp,52(sp)
     df8:	df000d04 	addi	fp,sp,52
     dfc:	e13ffc15 	stw	r4,-16(fp)

	//data members
	struct frameData* fd;
	struct boundingBox box;
	int16_t errorX, prevErrorX = 0;
     e00:	e03ff80d 	sth	zero,-32(fp)
	int16_t errorY, prevErrorY = 0;
     e04:	e03ff70d 	sth	zero,-36(fp)
	uint8_t targetMin = 0, targetMax = 0;
     e08:	e03ffb05 	stb	zero,-20(fp)
     e0c:	e03ffb45 	stb	zero,-19(fp)

	//parse user input
	FILTER_TYPE_t type = _track_inputParsing(arg,&targetMin,&targetMax);
     e10:	e17ffb04 	addi	r5,fp,-20
     e14:	e1bffb44 	addi	r6,fp,-19
     e18:	e13ffc17 	ldw	r4,-16(fp)
     e1c:	00011d00 	call	11d0 <_track_inputParsing>
     e20:	e0bff615 	stw	r2,-40(fp)
	if(type == ERROR){
     e24:	e0bff617 	ldw	r2,-40(fp)
     e28:	10800160 	cmpeqi	r2,r2,5
     e2c:	1000931e 	bne	r2,zero,107c <_track+0x290>
		return; //return since parse failed
	}

	//notify user UI of exit process
	lcd_printString("Tracking Target");
     e30:	01000074 	movhi	r4,1
     e34:	2111d504 	addi	r4,r4,18260
     e38:	0001de00 	call	1de0 <lcd_printString>
	printf("Press Button 2 to exit.\n");
     e3c:	01000074 	movhi	r4,1
     e40:	2111cf04 	addi	r4,r4,18236
     e44:	00038f80 	call	38f8 <puts>

	//loop the tracking until button pressed
	int16_t cogx,cogy;
	int32_t xcommand, ycommand;
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
     e48:	00008506 	br	1060 <_track+0x274>
		//get frame data
		fd = cam_track(targetMin,targetMax);
     e4c:	e0bffb03 	ldbu	r2,-20(fp)
     e50:	11003fcc 	andi	r4,r2,255
     e54:	e0bffb43 	ldbu	r2,-19(fp)
     e58:	11403fcc 	andi	r5,r2,255
     e5c:	00004c40 	call	4c4 <cam_track>
     e60:	e0bff915 	stw	r2,-28(fp)

		//determine location of object
		box.minr = VGA_ROW_MAX;
     e64:	00800f04 	movi	r2,60
     e68:	e0bffa05 	stb	r2,-24(fp)
		box.minc = VGA_COL_MAX;
     e6c:	00801404 	movi	r2,80
     e70:	e0bffa45 	stb	r2,-23(fp)
		box.maxr = 0;
     e74:	e03ffa85 	stb	zero,-22(fp)
		box.maxc = 0;
     e78:	e03ffac5 	stb	zero,-21(fp)
		_track_boundingBox(&box);
     e7c:	e13ffa04 	addi	r4,fp,-24
     e80:	00010900 	call	1090 <_track_boundingBox>

		//calculate cog of the object
		cogy = (box.maxr + box.minr)/2;
     e84:	e0bffa83 	ldbu	r2,-22(fp)
     e88:	10c03fcc 	andi	r3,r2,255
     e8c:	e0bffa03 	ldbu	r2,-24(fp)
     e90:	10803fcc 	andi	r2,r2,255
     e94:	1887883a 	add	r3,r3,r2
     e98:	1804d7fa 	srli	r2,r3,31
     e9c:	10c5883a 	add	r2,r2,r3
     ea0:	1005d07a 	srai	r2,r2,1
     ea4:	e0bff50d 	sth	r2,-44(fp)
		cogx = (box.maxc + box.minc)/2;
     ea8:	e0bffac3 	ldbu	r2,-21(fp)
     eac:	10c03fcc 	andi	r3,r2,255
     eb0:	e0bffa43 	ldbu	r2,-23(fp)
     eb4:	10803fcc 	andi	r2,r2,255
     eb8:	1887883a 	add	r3,r3,r2
     ebc:	1804d7fa 	srli	r2,r3,31
     ec0:	10c5883a 	add	r2,r2,r3
     ec4:	1005d07a 	srai	r2,r2,1
     ec8:	e0bff58d 	sth	r2,-42(fp)
		if(cogx < 0 || cogy < 0){
     ecc:	e0bff58f 	ldh	r2,-42(fp)
     ed0:	1004803a 	cmplt	r2,r2,zero
     ed4:	1000621e 	bne	r2,zero,1060 <_track+0x274>
     ed8:	e0bff50f 	ldh	r2,-44(fp)
     edc:	1004803a 	cmplt	r2,r2,zero
     ee0:	10005f1e 	bne	r2,zero,1060 <_track+0x274>
			continue; //no pixels to track
		}

		//calculate servo command
		errorX = (40 - cogx);
     ee4:	e0fff58b 	ldhu	r3,-42(fp)
     ee8:	00800a04 	movi	r2,40
     eec:	10c5c83a 	sub	r2,r2,r3
     ef0:	e0bff88d 	sth	r2,-30(fp)
		errorY = (30 - cogy);
     ef4:	e0fff50b 	ldhu	r3,-44(fp)
     ef8:	00800784 	movi	r2,30
     efc:	10c5c83a 	sub	r2,r2,r3
     f00:	e0bff78d 	sth	r2,-34(fp)
		xcommand = ((errorX*PX) + (errorX - prevErrorX)*DX)/PID_DEM;
     f04:	e0bff88f 	ldh	r2,-30(fp)
     f08:	e0bffd15 	stw	r2,-12(fp)
     f0c:	e0fffd17 	ldw	r3,-12(fp)
     f10:	1804403a 	cmpge	r2,r3,zero
     f14:	1000031e 	bne	r2,zero,f24 <_track+0x138>
     f18:	e0bffd17 	ldw	r2,-12(fp)
     f1c:	108000c4 	addi	r2,r2,3
     f20:	e0bffd15 	stw	r2,-12(fp)
     f24:	e0fffd17 	ldw	r3,-12(fp)
     f28:	1805d0ba 	srai	r2,r3,2
     f2c:	e0bff415 	stw	r2,-48(fp)
		if(xcommand < MIN_SERVO_COMMAND_X && xcommand > -MIN_SERVO_COMMAND_X){
     f30:	e0bff417 	ldw	r2,-48(fp)
     f34:	10800048 	cmpgei	r2,r2,1
     f38:	1000041e 	bne	r2,zero,f4c <_track+0x160>
     f3c:	e0bff417 	ldw	r2,-48(fp)
     f40:	1004803a 	cmplt	r2,r2,zero
     f44:	1000011e 	bne	r2,zero,f4c <_track+0x160>
			xcommand = 0;
     f48:	e03ff415 	stw	zero,-48(fp)
		}
		ycommand = ((errorY*PY) + (errorY - prevErrorY)*DY)/PID_DEM;
     f4c:	e0fff78f 	ldh	r3,-34(fp)
     f50:	1805883a 	mov	r2,r3
     f54:	1085883a 	add	r2,r2,r2
     f58:	10c9883a 	add	r4,r2,r3
     f5c:	e0fff78f 	ldh	r3,-34(fp)
     f60:	e0bff70f 	ldh	r2,-36(fp)
     f64:	1885c83a 	sub	r2,r3,r2
     f68:	2085883a 	add	r2,r4,r2
     f6c:	e0bffe15 	stw	r2,-8(fp)
     f70:	e0fffe17 	ldw	r3,-8(fp)
     f74:	1804403a 	cmpge	r2,r3,zero
     f78:	1000031e 	bne	r2,zero,f88 <_track+0x19c>
     f7c:	e0bffe17 	ldw	r2,-8(fp)
     f80:	108001c4 	addi	r2,r2,7
     f84:	e0bffe15 	stw	r2,-8(fp)
     f88:	e0fffe17 	ldw	r3,-8(fp)
     f8c:	1805d0fa 	srai	r2,r3,3
     f90:	e0bff315 	stw	r2,-52(fp)
		if(ycommand < MIN_SERVO_COMMAND_Y && ycommand > -MIN_SERVO_COMMAND_Y){
     f94:	e0bff317 	ldw	r2,-52(fp)
     f98:	10800108 	cmpgei	r2,r2,4
     f9c:	1000041e 	bne	r2,zero,fb0 <_track+0x1c4>
     fa0:	e0bff317 	ldw	r2,-52(fp)
     fa4:	10bfff50 	cmplti	r2,r2,-3
     fa8:	1000011e 	bne	r2,zero,fb0 <_track+0x1c4>
			ycommand = 0;
     fac:	e03ff315 	stw	zero,-52(fp)
		}
		prevErrorX = errorX;
     fb0:	e0bff88b 	ldhu	r2,-30(fp)
     fb4:	e0bff80d 	sth	r2,-32(fp)
		prevErrorY = errorY;
     fb8:	e0bff78b 	ldhu	r2,-34(fp)
     fbc:	e0bff70d 	sth	r2,-36(fp)

		//set servo motors
		setServoX(xcommand);
     fc0:	e13ff417 	ldw	r4,-48(fp)
     fc4:	00025b80 	call	25b8 <setServoX>
		setServoY(ycommand);
     fc8:	e13ff317 	ldw	r4,-52(fp)
     fcc:	00026900 	call	2690 <setServoY>

		//adjust target value in automatic mode
		switch(type){
     fd0:	e0bff617 	ldw	r2,-40(fp)
     fd4:	e0bfff15 	stw	r2,-4(fp)
     fd8:	e0ffff17 	ldw	r3,-4(fp)
     fdc:	1805003a 	cmpeq	r2,r3,zero
     fe0:	1000041e 	bne	r2,zero,ff4 <_track+0x208>
     fe4:	e0ffff17 	ldw	r3,-4(fp)
     fe8:	18800060 	cmpeqi	r2,r3,1
     fec:	10000f1e 	bne	r2,zero,102c <_track+0x240>
     ff0:	00001b06 	br	1060 <_track+0x274>
			case DARK_AUTO:
				if(fd->minBrightness > (0xFF - TOLERANCE)){
     ff4:	e0bff917 	ldw	r2,-28(fp)
     ff8:	10800043 	ldbu	r2,1(r2)
     ffc:	10803fcc 	andi	r2,r2,255
    1000:	10803e30 	cmpltui	r2,r2,248
    1004:	1000041e 	bne	r2,zero,1018 <_track+0x22c>
					targetMax = fd->minBrightness;
    1008:	e0bff917 	ldw	r2,-28(fp)
    100c:	10800043 	ldbu	r2,1(r2)
    1010:	e0bffb45 	stb	r2,-19(fp)
    1014:	00001206 	br	1060 <_track+0x274>
				}else{
					targetMax = fd->minBrightness + TOLERANCE;
    1018:	e0bff917 	ldw	r2,-28(fp)
    101c:	10800043 	ldbu	r2,1(r2)
    1020:	10800204 	addi	r2,r2,8
    1024:	e0bffb45 	stb	r2,-19(fp)
				}
				break;
    1028:	00000d06 	br	1060 <_track+0x274>
			case LIGHT_AUTO:
				if(fd->maxBrightness < (TOLERANCE)){
    102c:	e0bff917 	ldw	r2,-28(fp)
    1030:	10800003 	ldbu	r2,0(r2)
    1034:	10803fcc 	andi	r2,r2,255
    1038:	10800228 	cmpgeui	r2,r2,8
    103c:	1000041e 	bne	r2,zero,1050 <_track+0x264>
					targetMin = fd->maxBrightness;
    1040:	e0bff917 	ldw	r2,-28(fp)
    1044:	10800003 	ldbu	r2,0(r2)
    1048:	e0bffb05 	stb	r2,-20(fp)
    104c:	00000406 	br	1060 <_track+0x274>
				}else{
					targetMin = fd->maxBrightness - TOLERANCE;
    1050:	e0bff917 	ldw	r2,-28(fp)
    1054:	10800003 	ldbu	r2,0(r2)
    1058:	10bffe04 	addi	r2,r2,-8
    105c:	e0bffb05 	stb	r2,-20(fp)
	printf("Press Button 2 to exit.\n");

	//loop the tracking until button pressed
	int16_t cogx,cogy;
	int32_t xcommand, ycommand;
	while(pushbutton_read(PUSHBUTTON_1_MASK)){
    1060:	01000044 	movi	r4,1
    1064:	00021480 	call	2148 <pushbutton_read>
    1068:	10803fcc 	andi	r2,r2,255
    106c:	1004c03a 	cmpne	r2,r2,zero
    1070:	103f761e 	bne	r2,zero,e4c <_track+0x60>
				break;
		}
	}

	//set system to default
	servo_init();
    1074:	000246c0 	call	246c <servo_init>
	vga_clearDisplay();
    1078:	00023f00 	call	23f0 <vga_clearDisplay>
}
    107c:	e037883a 	mov	sp,fp
    1080:	dfc00117 	ldw	ra,4(sp)
    1084:	df000017 	ldw	fp,0(sp)
    1088:	dec00204 	addi	sp,sp,8
    108c:	f800283a 	ret

00001090 <_track_boundingBox>:
/**
 * Calculates the bounding box of the target and updates through the bounding
 * box pointer.
 * @param box pointer to object that will be updated with new bounding info.
 */
static inline void _track_boundingBox(struct boundingBox* box){
    1090:	defffe04 	addi	sp,sp,-8
    1094:	df000115 	stw	fp,4(sp)
    1098:	df000104 	addi	fp,sp,4
    109c:	e13fff15 	stw	r4,-4(fp)
	//store data statically for reduced stack frame time
	static uint8_t row,col,pixel;
	static uint8_t* ptr;

	//iterate through buffer to determine location of object
	for(row=0;row<VGA_ROW_MAX;row++){
    10a0:	d026d985 	stb	zero,-25754(gp)
    10a4:	00004206 	br	11b0 <_track_boundingBox+0x120>
		ptr = (uint8_t*)(VGA_MEM_START + (row << 7));
    10a8:	d0a6d983 	ldbu	r2,-25754(gp)
    10ac:	10803fcc 	andi	r2,r2,255
    10b0:	100491fa 	slli	r2,r2,7
    10b4:	1007883a 	mov	r3,r2
    10b8:	00a02034 	movhi	r2,32896
    10bc:	1885883a 	add	r2,r3,r2
    10c0:	d0a6d815 	stw	r2,-25760(gp)
		for(col=0;col<VGA_COL_MAX;col++){
    10c4:	d026d945 	stb	zero,-25755(gp)
    10c8:	00003206 	br	1194 <_track_boundingBox+0x104>
			pixel = *(ptr + col);
    10cc:	d0a6d943 	ldbu	r2,-25755(gp)
    10d0:	10803fcc 	andi	r2,r2,255
    10d4:	1007883a 	mov	r3,r2
    10d8:	d0a6d817 	ldw	r2,-25760(gp)
    10dc:	1885883a 	add	r2,r3,r2
    10e0:	10800003 	ldbu	r2,0(r2)
    10e4:	d0a6d905 	stb	r2,-25756(gp)
			if(pixel > CONFIDENCE_THRESHOLD){
    10e8:	d0a6d903 	ldbu	r2,-25756(gp)
    10ec:	10803fcc 	andi	r2,r2,255
    10f0:	10803c70 	cmpltui	r2,r2,241
    10f4:	1000241e 	bne	r2,zero,1188 <_track_boundingBox+0xf8>
				//check within current bounding box
				if(row < box->minr)
    10f8:	e0bfff17 	ldw	r2,-4(fp)
    10fc:	10800003 	ldbu	r2,0(r2)
    1100:	d0e6d983 	ldbu	r3,-25754(gp)
    1104:	11003fcc 	andi	r4,r2,255
    1108:	18803fcc 	andi	r2,r3,255
    110c:	1100032e 	bgeu	r2,r4,111c <_track_boundingBox+0x8c>
					box->minr = row;
    1110:	d0e6d983 	ldbu	r3,-25754(gp)
    1114:	e0bfff17 	ldw	r2,-4(fp)
    1118:	10c00005 	stb	r3,0(r2)
				if(col < box->minc)
    111c:	e0bfff17 	ldw	r2,-4(fp)
    1120:	10800043 	ldbu	r2,1(r2)
    1124:	d0e6d943 	ldbu	r3,-25755(gp)
    1128:	11003fcc 	andi	r4,r2,255
    112c:	18803fcc 	andi	r2,r3,255
    1130:	1100032e 	bgeu	r2,r4,1140 <_track_boundingBox+0xb0>
					box->minc = col;
    1134:	d0e6d943 	ldbu	r3,-25755(gp)
    1138:	e0bfff17 	ldw	r2,-4(fp)
    113c:	10c00045 	stb	r3,1(r2)
				if(col > box->maxc)
    1140:	e0bfff17 	ldw	r2,-4(fp)
    1144:	108000c3 	ldbu	r2,3(r2)
    1148:	d0e6d943 	ldbu	r3,-25755(gp)
    114c:	11003fcc 	andi	r4,r2,255
    1150:	18803fcc 	andi	r2,r3,255
    1154:	2080032e 	bgeu	r4,r2,1164 <_track_boundingBox+0xd4>
					box->maxc = col;
    1158:	d0e6d943 	ldbu	r3,-25755(gp)
    115c:	e0bfff17 	ldw	r2,-4(fp)
    1160:	10c000c5 	stb	r3,3(r2)
				if(row > box->maxr)
    1164:	e0bfff17 	ldw	r2,-4(fp)
    1168:	10800083 	ldbu	r2,2(r2)
    116c:	d0e6d983 	ldbu	r3,-25754(gp)
    1170:	11003fcc 	andi	r4,r2,255
    1174:	18803fcc 	andi	r2,r3,255
    1178:	2080032e 	bgeu	r4,r2,1188 <_track_boundingBox+0xf8>
					box->maxr = row;
    117c:	d0e6d983 	ldbu	r3,-25754(gp)
    1180:	e0bfff17 	ldw	r2,-4(fp)
    1184:	10c00085 	stb	r3,2(r2)
	static uint8_t* ptr;

	//iterate through buffer to determine location of object
	for(row=0;row<VGA_ROW_MAX;row++){
		ptr = (uint8_t*)(VGA_MEM_START + (row << 7));
		for(col=0;col<VGA_COL_MAX;col++){
    1188:	d0a6d943 	ldbu	r2,-25755(gp)
    118c:	10800044 	addi	r2,r2,1
    1190:	d0a6d945 	stb	r2,-25755(gp)
    1194:	d0a6d943 	ldbu	r2,-25755(gp)
    1198:	10803fcc 	andi	r2,r2,255
    119c:	10801430 	cmpltui	r2,r2,80
    11a0:	103fca1e 	bne	r2,zero,10cc <_track_boundingBox+0x3c>
	//store data statically for reduced stack frame time
	static uint8_t row,col,pixel;
	static uint8_t* ptr;

	//iterate through buffer to determine location of object
	for(row=0;row<VGA_ROW_MAX;row++){
    11a4:	d0a6d983 	ldbu	r2,-25754(gp)
    11a8:	10800044 	addi	r2,r2,1
    11ac:	d0a6d985 	stb	r2,-25754(gp)
    11b0:	d0a6d983 	ldbu	r2,-25754(gp)
    11b4:	10803fcc 	andi	r2,r2,255
    11b8:	10800f30 	cmpltui	r2,r2,60
    11bc:	103fba1e 	bne	r2,zero,10a8 <_track_boundingBox+0x18>
				if(row > box->maxr)
					box->maxr = row;
			}
		}
	}
}
    11c0:	e037883a 	mov	sp,fp
    11c4:	df000017 	ldw	fp,0(sp)
    11c8:	dec00104 	addi	sp,sp,4
    11cc:	f800283a 	ret

000011d0 <_track_inputParsing>:
 * @param arg String to parse
 * @param min minimum value of range
 * @param max maximum value of range
 * @return filter type
 */
static inline FILTER_TYPE_t _track_inputParsing(char* arg, uint8_t* min, uint8_t* max){
    11d0:	deffdf04 	addi	sp,sp,-132
    11d4:	dfc02015 	stw	ra,128(sp)
    11d8:	df001f15 	stw	fp,124(sp)
    11dc:	df001f04 	addi	fp,sp,124
    11e0:	e13ffc15 	stw	r4,-16(fp)
    11e4:	e17ffd15 	stw	r5,-12(fp)
    11e8:	e1bffe15 	stw	r6,-8(fp)
	// parse input for filtering method
	char cmd[10];
	char typeStr[80]; //large to prevent failure of size
	unsigned int value;
	FILTER_TYPE_t retVal;
	int matched = sscanf(arg,"%s %s %x",cmd,typeStr,&value);
    11ec:	e1bfe404 	addi	r6,fp,-112
    11f0:	e1ffe684 	addi	r7,fp,-102
    11f4:	e0bffb04 	addi	r2,fp,-20
    11f8:	d8800015 	stw	r2,0(sp)
    11fc:	e13ffc17 	ldw	r4,-16(fp)
    1200:	01400074 	movhi	r5,1
    1204:	2951d904 	addi	r5,r5,18276
    1208:	0003cc00 	call	3cc0 <sscanf>
    120c:	e0bfe215 	stw	r2,-120(fp)
	if(matched == 3){
    1210:	e0bfe217 	ldw	r2,-120(fp)
    1214:	108000d8 	cmpnei	r2,r2,3
    1218:	1000461e 	bne	r2,zero,1334 <_track_inputParsing+0x164>
		if(strcmp(typeStr,"TARGET") == 0){
    121c:	e13fe684 	addi	r4,fp,-102
    1220:	01400074 	movhi	r5,1
    1224:	2951dc04 	addi	r5,r5,18288
    1228:	0003f200 	call	3f20 <strcmp>
    122c:	1004c03a 	cmpne	r2,r2,zero
    1230:	10001b1e 	bne	r2,zero,12a0 <_track_inputParsing+0xd0>
			retVal = TARGET_VALUE;
    1234:	00800104 	movi	r2,4
    1238:	e0bfe315 	stw	r2,-116(fp)
			*min = (value < TOLERANCE)? value : value - TOLERANCE;
    123c:	e0bffb17 	ldw	r2,-20(fp)
    1240:	10800230 	cmpltui	r2,r2,8
    1244:	1000041e 	bne	r2,zero,1258 <_track_inputParsing+0x88>
    1248:	e0bffb17 	ldw	r2,-20(fp)
    124c:	10bffe04 	addi	r2,r2,-8
    1250:	e0bfff45 	stb	r2,-3(fp)
    1254:	00000206 	br	1260 <_track_inputParsing+0x90>
    1258:	e0bffb17 	ldw	r2,-20(fp)
    125c:	e0bfff45 	stb	r2,-3(fp)
    1260:	e0bffd17 	ldw	r2,-12(fp)
    1264:	e0ffff43 	ldbu	r3,-3(fp)
    1268:	10c00005 	stb	r3,0(r2)
			*max = (value > 0xFF - TOLERANCE)? value : value + TOLERANCE;
    126c:	e0bffb17 	ldw	r2,-20(fp)
    1270:	10803e28 	cmpgeui	r2,r2,248
    1274:	1000041e 	bne	r2,zero,1288 <_track_inputParsing+0xb8>
    1278:	e0bffb17 	ldw	r2,-20(fp)
    127c:	10800204 	addi	r2,r2,8
    1280:	e0bfff05 	stb	r2,-4(fp)
    1284:	00000206 	br	1290 <_track_inputParsing+0xc0>
    1288:	e0bffb17 	ldw	r2,-20(fp)
    128c:	e0bfff05 	stb	r2,-4(fp)
    1290:	e0bffe17 	ldw	r2,-8(fp)
    1294:	e0ffff03 	ldbu	r3,-4(fp)
    1298:	10c00005 	stb	r3,0(r2)
    129c:	00004f06 	br	13dc <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"LIGHT") == 0){
    12a0:	e13fe684 	addi	r4,fp,-102
    12a4:	01400074 	movhi	r5,1
    12a8:	2951de04 	addi	r5,r5,18296
    12ac:	0003f200 	call	3f20 <strcmp>
    12b0:	1004c03a 	cmpne	r2,r2,zero
    12b4:	10000a1e 	bne	r2,zero,12e0 <_track_inputParsing+0x110>
			retVal = LIGHT_MANUAL;
    12b8:	008000c4 	movi	r2,3
    12bc:	e0bfe315 	stw	r2,-116(fp)
			*min = value;
    12c0:	e0bffb17 	ldw	r2,-20(fp)
    12c4:	1007883a 	mov	r3,r2
    12c8:	e0bffd17 	ldw	r2,-12(fp)
    12cc:	10c00005 	stb	r3,0(r2)
			*max = 0xFF;
    12d0:	e0fffe17 	ldw	r3,-8(fp)
    12d4:	00bfffc4 	movi	r2,-1
    12d8:	18800005 	stb	r2,0(r3)
    12dc:	00003f06 	br	13dc <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"DARK") == 0){
    12e0:	e13fe684 	addi	r4,fp,-102
    12e4:	01400074 	movhi	r5,1
    12e8:	2951e004 	addi	r5,r5,18304
    12ec:	0003f200 	call	3f20 <strcmp>
    12f0:	1004c03a 	cmpne	r2,r2,zero
    12f4:	1000091e 	bne	r2,zero,131c <_track_inputParsing+0x14c>
			retVal = DARK_MANUAL;
    12f8:	00800084 	movi	r2,2
    12fc:	e0bfe315 	stw	r2,-116(fp)
			*min = 0x00;
    1300:	e0bffd17 	ldw	r2,-12(fp)
    1304:	10000005 	stb	zero,0(r2)
			*max = value;
    1308:	e0bffb17 	ldw	r2,-20(fp)
    130c:	1007883a 	mov	r3,r2
    1310:	e0bffe17 	ldw	r2,-8(fp)
    1314:	10c00005 	stb	r3,0(r2)
    1318:	00003006 	br	13dc <_track_inputParsing+0x20c>
		}else{
			//error
			printf("Invalid TRACK Command Structure.\n");
    131c:	01000074 	movhi	r4,1
    1320:	2111e204 	addi	r4,r4,18312
    1324:	00038f80 	call	38f8 <puts>
			retVal = ERROR;
    1328:	00800144 	movi	r2,5
    132c:	e0bfe315 	stw	r2,-116(fp)
    1330:	00002a06 	br	13dc <_track_inputParsing+0x20c>
		}
	}else if(matched == 2){
    1334:	e0bfe217 	ldw	r2,-120(fp)
    1338:	10800098 	cmpnei	r2,r2,2
    133c:	1000221e 	bne	r2,zero,13c8 <_track_inputParsing+0x1f8>
		if(strcmp(typeStr,"LIGHT") == 0){
    1340:	e13fe684 	addi	r4,fp,-102
    1344:	01400074 	movhi	r5,1
    1348:	2951de04 	addi	r5,r5,18296
    134c:	0003f200 	call	3f20 <strcmp>
    1350:	1004c03a 	cmpne	r2,r2,zero
    1354:	1000091e 	bne	r2,zero,137c <_track_inputParsing+0x1ac>
			retVal = LIGHT_AUTO;
    1358:	00800044 	movi	r2,1
    135c:	e0bfe315 	stw	r2,-116(fp)
			*min = 0x55; //default value
    1360:	e0fffd17 	ldw	r3,-12(fp)
    1364:	00801544 	movi	r2,85
    1368:	18800005 	stb	r2,0(r3)
			*max = 0xFF;
    136c:	e0fffe17 	ldw	r3,-8(fp)
    1370:	00bfffc4 	movi	r2,-1
    1374:	18800005 	stb	r2,0(r3)
    1378:	00001806 	br	13dc <_track_inputParsing+0x20c>
		}else if(strcmp(typeStr,"DARK") == 0){
    137c:	e13fe684 	addi	r4,fp,-102
    1380:	01400074 	movhi	r5,1
    1384:	2951e004 	addi	r5,r5,18304
    1388:	0003f200 	call	3f20 <strcmp>
    138c:	1004c03a 	cmpne	r2,r2,zero
    1390:	1000071e 	bne	r2,zero,13b0 <_track_inputParsing+0x1e0>
			retVal = DARK_AUTO;
    1394:	e03fe315 	stw	zero,-116(fp)
			*min = 0x00;
    1398:	e0bffd17 	ldw	r2,-12(fp)
    139c:	10000005 	stb	zero,0(r2)
			*max = 0x55;
    13a0:	e0fffe17 	ldw	r3,-8(fp)
    13a4:	00801544 	movi	r2,85
    13a8:	18800005 	stb	r2,0(r3)
    13ac:	00000b06 	br	13dc <_track_inputParsing+0x20c>
		}else{
			//error
			printf("Invalid TRACK Command Structure.\n");
    13b0:	01000074 	movhi	r4,1
    13b4:	2111e204 	addi	r4,r4,18312
    13b8:	00038f80 	call	38f8 <puts>
			retVal = ERROR;
    13bc:	00800144 	movi	r2,5
    13c0:	e0bfe315 	stw	r2,-116(fp)
    13c4:	00000506 	br	13dc <_track_inputParsing+0x20c>
		}
	}else{
		printf("Invalid TRACK Command Structure.\n");
    13c8:	01000074 	movhi	r4,1
    13cc:	2111e204 	addi	r4,r4,18312
    13d0:	00038f80 	call	38f8 <puts>
		retVal = ERROR;
    13d4:	00800144 	movi	r2,5
    13d8:	e0bfe315 	stw	r2,-116(fp)
	}
	return retVal;
    13dc:	e0bfe317 	ldw	r2,-116(fp)
}
    13e0:	e037883a 	mov	sp,fp
    13e4:	dfc00117 	ldw	ra,4(sp)
    13e8:	df000017 	ldw	fp,0(sp)
    13ec:	dec00204 	addi	sp,sp,8
    13f0:	f800283a 	ret

000013f4 <_read>:

/**
 * Read Command Function
 * @param arg string to parse
 */
static void _read(char* arg){
    13f4:	defff804 	addi	sp,sp,-32
    13f8:	dfc00715 	stw	ra,28(sp)
    13fc:	df000615 	stw	fp,24(sp)
    1400:	df000604 	addi	fp,sp,24
    1404:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Reading Memory");
    1408:	01000074 	movhi	r4,1
    140c:	21120e04 	addi	r4,r4,18488
    1410:	0001de00 	call	1de0 <lcd_printString>
	char cmd[3];
	unsigned int address, count;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&count);
    1414:	e1bffc04 	addi	r6,fp,-16
    1418:	e1fffd04 	addi	r7,fp,-12
    141c:	e0bffe04 	addi	r2,fp,-8
    1420:	d8800015 	stw	r2,0(sp)
    1424:	e13fff17 	ldw	r4,-4(fp)
    1428:	01400074 	movhi	r5,1
    142c:	29521204 	addi	r5,r5,18504
    1430:	0003cc00 	call	3cc0 <sscanf>
    1434:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
    1438:	e0bffb17 	ldw	r2,-20(fp)
    143c:	108000d8 	cmpnei	r2,r2,3
    1440:	1000041e 	bne	r2,zero,1454 <_read+0x60>
		//Read multiple
		_printMem(address,count);
    1444:	e13ffd17 	ldw	r4,-12(fp)
    1448:	e17ffe17 	ldw	r5,-8(fp)
    144c:	00015180 	call	1518 <_printMem>
    1450:	00000a06 	br	147c <_read+0x88>
	}else if(matched == 2){
    1454:	e0bffb17 	ldw	r2,-20(fp)
    1458:	10800098 	cmpnei	r2,r2,2
    145c:	1000041e 	bne	r2,zero,1470 <_read+0x7c>
		//Read single
		_printMem(address,1);
    1460:	e13ffd17 	ldw	r4,-12(fp)
    1464:	01400044 	movi	r5,1
    1468:	00015180 	call	1518 <_printMem>
    146c:	00000306 	br	147c <_read+0x88>
	}else{
		printf("Invalid RR Command Structure.\n");
    1470:	01000074 	movhi	r4,1
    1474:	21121504 	addi	r4,r4,18516
    1478:	00038f80 	call	38f8 <puts>
	}
}
    147c:	e037883a 	mov	sp,fp
    1480:	dfc00117 	ldw	ra,4(sp)
    1484:	df000017 	ldw	fp,0(sp)
    1488:	dec00204 	addi	sp,sp,8
    148c:	f800283a 	ret

00001490 <_write>:

/**
 * Write Command Function
 * @param arg string to parse
 */
static void _write(char* arg){
    1490:	defff804 	addi	sp,sp,-32
    1494:	dfc00715 	stw	ra,28(sp)
    1498:	df000615 	stw	fp,24(sp)
    149c:	df000604 	addi	fp,sp,24
    14a0:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Writing Memory");
    14a4:	01000074 	movhi	r4,1
    14a8:	21121d04 	addi	r4,r4,18548
    14ac:	0001de00 	call	1de0 <lcd_printString>
	char cmd[3];
	unsigned int address, value;
	int matched = sscanf(arg,"%s %x %x",cmd,&address,&value);
    14b0:	e1bffc04 	addi	r6,fp,-16
    14b4:	e1fffd04 	addi	r7,fp,-12
    14b8:	e0bffe04 	addi	r2,fp,-8
    14bc:	d8800015 	stw	r2,0(sp)
    14c0:	e13fff17 	ldw	r4,-4(fp)
    14c4:	01400074 	movhi	r5,1
    14c8:	29521204 	addi	r5,r5,18504
    14cc:	0003cc00 	call	3cc0 <sscanf>
    14d0:	e0bffb15 	stw	r2,-20(fp)
	if(matched == 3){
    14d4:	e0bffb17 	ldw	r2,-20(fp)
    14d8:	108000d8 	cmpnei	r2,r2,3
    14dc:	1000061e 	bne	r2,zero,14f8 <_write+0x68>
		//always apply the store IO version of the instruction for immediate
		// change and store in original for memory required versions
		*((volatile unsigned char*)(address | BYPASS_CACHE_FLAG)) = value;
    14e0:	e0bffd17 	ldw	r2,-12(fp)
    14e4:	10a00034 	orhi	r2,r2,32768
    14e8:	1007883a 	mov	r3,r2
    14ec:	e0bffe17 	ldw	r2,-8(fp)
    14f0:	18800005 	stb	r2,0(r3)
    14f4:	00000306 	br	1504 <_write+0x74>
	}else{
		printf("Invalid WR Command Structure.\n");
    14f8:	01000074 	movhi	r4,1
    14fc:	21122104 	addi	r4,r4,18564
    1500:	00038f80 	call	38f8 <puts>
	}
}
    1504:	e037883a 	mov	sp,fp
    1508:	dfc00117 	ldw	ra,4(sp)
    150c:	df000017 	ldw	fp,0(sp)
    1510:	dec00204 	addi	sp,sp,8
    1514:	f800283a 	ret

00001518 <_printMem>:
/**
 * Prints out memory starting at the address for the count amount of bytes
 * @param address the address of memory to start printing
 * @param count the number of bytes to read and print
 */
static void _printMem(unsigned int address, unsigned int count){
    1518:	deffdf04 	addi	sp,sp,-132
    151c:	dfc02015 	stw	ra,128(sp)
    1520:	df001f15 	stw	fp,124(sp)
    1524:	dc001e15 	stw	r16,120(sp)
    1528:	df001e04 	addi	fp,sp,120
    152c:	e13ffe15 	stw	r4,-8(fp)
    1530:	e17fff15 	stw	r5,-4(fp)

	//sanity check count for valid specification
	if(count < 1){
    1534:	e0bfff17 	ldw	r2,-4(fp)
    1538:	1004c03a 	cmpne	r2,r2,zero
    153c:	1000041e 	bne	r2,zero,1550 <_printMem+0x38>
		printf("Error - Invalid Number of Addresses Specified.\n");
    1540:	01000074 	movhi	r4,1
    1544:	21122904 	addi	r4,r4,18596
    1548:	00038f80 	call	38f8 <puts>
		return; //error case so leave early
    154c:	00009006 	br	1790 <_printMem+0x278>
	}else if(address + count < address){
    1550:	e0fffe17 	ldw	r3,-8(fp)
    1554:	e0bfff17 	ldw	r2,-4(fp)
    1558:	1887883a 	add	r3,r3,r2
    155c:	e0bffe17 	ldw	r2,-8(fp)
    1560:	1880032e 	bgeu	r3,r2,1570 <_printMem+0x58>
		printf("Warning - Address Overflow.\n");
    1564:	01000074 	movhi	r4,1
    1568:	21123504 	addi	r4,r4,18644
    156c:	00038f80 	call	38f8 <puts>
	//buffer allocation
	char buffer[80];
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
    1570:	e0bfe704 	addi	r2,fp,-100
    1574:	1009883a 	mov	r4,r2
    1578:	01801404 	movi	r6,80
    157c:	000b883a 	mov	r5,zero
    1580:	00037240 	call	3724 <memset>
	strcat(buffer,"  Base   :");
    1584:	e43fe704 	addi	r16,fp,-100
    1588:	e13fe704 	addi	r4,fp,-100
    158c:	00040680 	call	4068 <strlen>
    1590:	8085883a 	add	r2,r16,r2
    1594:	1007883a 	mov	r3,r2
    1598:	00800804 	movi	r2,32
    159c:	18800005 	stb	r2,0(r3)
    15a0:	00800804 	movi	r2,32
    15a4:	18800045 	stb	r2,1(r3)
    15a8:	00801084 	movi	r2,66
    15ac:	18800085 	stb	r2,2(r3)
    15b0:	00801844 	movi	r2,97
    15b4:	188000c5 	stb	r2,3(r3)
    15b8:	00801cc4 	movi	r2,115
    15bc:	18800105 	stb	r2,4(r3)
    15c0:	00801944 	movi	r2,101
    15c4:	18800145 	stb	r2,5(r3)
    15c8:	00800804 	movi	r2,32
    15cc:	18800185 	stb	r2,6(r3)
    15d0:	00800804 	movi	r2,32
    15d4:	188001c5 	stb	r2,7(r3)
    15d8:	00800804 	movi	r2,32
    15dc:	18800205 	stb	r2,8(r3)
    15e0:	00800e84 	movi	r2,58
    15e4:	18800245 	stb	r2,9(r3)
    15e8:	18000285 	stb	zero,10(r3)
	int i; for(i = 0; i < count && i < 16; ++i){
    15ec:	e03fe615 	stw	zero,-104(fp)
    15f0:	00000e06 	br	162c <_printMem+0x114>
		*(temp+3) = '\0';
    15f4:	e0bffb04 	addi	r2,fp,-20
    15f8:	108000c4 	addi	r2,r2,3
    15fc:	10000005 	stb	zero,0(r2)
		sprintf(temp," +%x",i);
    1600:	e13ffb04 	addi	r4,fp,-20
    1604:	01400074 	movhi	r5,1
    1608:	29523c04 	addi	r5,r5,18672
    160c:	e1bfe617 	ldw	r6,-104(fp)
    1610:	0003b5c0 	call	3b5c <sprintf>
		strcat(buffer,temp);
    1614:	e13fe704 	addi	r4,fp,-100
    1618:	e17ffb04 	addi	r5,fp,-20
    161c:	0003e900 	call	3e90 <strcat>
	char temp[12];

	//print header
	memset(buffer,'\0',sizeof buffer);
	strcat(buffer,"  Base   :");
	int i; for(i = 0; i < count && i < 16; ++i){
    1620:	e0bfe617 	ldw	r2,-104(fp)
    1624:	10800044 	addi	r2,r2,1
    1628:	e0bfe615 	stw	r2,-104(fp)
    162c:	e0ffe617 	ldw	r3,-104(fp)
    1630:	e0bfff17 	ldw	r2,-4(fp)
    1634:	1880032e 	bgeu	r3,r2,1644 <_printMem+0x12c>
    1638:	e0bfe617 	ldw	r2,-104(fp)
    163c:	10800410 	cmplti	r2,r2,16
    1640:	103fec1e 	bne	r2,zero,15f4 <_printMem+0xdc>
		*(temp+3) = '\0';
		sprintf(temp," +%x",i);
		strcat(buffer,temp);
	}
	strcat(buffer,"\n");
    1644:	e13fe704 	addi	r4,fp,-100
    1648:	01400074 	movhi	r5,1
    164c:	29523e04 	addi	r5,r5,18680
    1650:	0003e900 	call	3e90 <strcat>
	printf(buffer);
    1654:	e13fe704 	addi	r4,fp,-100
    1658:	00037bc0 	call	37bc <printf>

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    165c:	e03fe515 	stw	zero,-108(fp)
    1660:	00004306 	br	1770 <_printMem+0x258>
		memset(buffer,'\0',sizeof buffer);
    1664:	e0bfe704 	addi	r2,fp,-100
    1668:	1009883a 	mov	r4,r2
    166c:	01801404 	movi	r6,80
    1670:	000b883a 	mov	r5,zero
    1674:	00037240 	call	3724 <memset>

		//print address
		*(temp+10) = '\0';
    1678:	e0bffb04 	addi	r2,fp,-20
    167c:	10800284 	addi	r2,r2,10
    1680:	10000005 	stb	zero,0(r2)
		sprintf(temp,"%08x :",address + j*16);
    1684:	e0bfe517 	ldw	r2,-108(fp)
    1688:	1004913a 	slli	r2,r2,4
    168c:	1007883a 	mov	r3,r2
    1690:	e0bffe17 	ldw	r2,-8(fp)
    1694:	188d883a 	add	r6,r3,r2
    1698:	e13ffb04 	addi	r4,fp,-20
    169c:	01400074 	movhi	r5,1
    16a0:	29523f04 	addi	r5,r5,18684
    16a4:	0003b5c0 	call	3b5c <sprintf>
		strcat(buffer,temp);
    16a8:	e13fe704 	addi	r4,fp,-100
    16ac:	e17ffb04 	addi	r5,fp,-20
    16b0:	0003e900 	call	3e90 <strcat>

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    16b4:	e03fe415 	stw	zero,-112(fp)
    16b8:	00001a06 	br	1724 <_printMem+0x20c>
			unsigned int addr = address + j*16+a;
    16bc:	e0bfe517 	ldw	r2,-108(fp)
    16c0:	1004913a 	slli	r2,r2,4
    16c4:	1007883a 	mov	r3,r2
    16c8:	e0bffe17 	ldw	r2,-8(fp)
    16cc:	1887883a 	add	r3,r3,r2
    16d0:	e0bfe417 	ldw	r2,-112(fp)
    16d4:	1885883a 	add	r2,r3,r2
    16d8:	e0bfe315 	stw	r2,-116(fp)
			unsigned char val = *((unsigned char*)(addr | BYPASS_CACHE_FLAG));
    16dc:	e0bfe317 	ldw	r2,-116(fp)
    16e0:	10a00034 	orhi	r2,r2,32768
    16e4:	10800003 	ldbu	r2,0(r2)
    16e8:	e0bfe205 	stb	r2,-120(fp)
			*(temp+3) = '\0';
    16ec:	e0bffb04 	addi	r2,fp,-20
    16f0:	108000c4 	addi	r2,r2,3
    16f4:	10000005 	stb	zero,0(r2)
			sprintf(temp," %02x",val);
    16f8:	e1bfe203 	ldbu	r6,-120(fp)
    16fc:	e13ffb04 	addi	r4,fp,-20
    1700:	01400074 	movhi	r5,1
    1704:	29524104 	addi	r5,r5,18692
    1708:	0003b5c0 	call	3b5c <sprintf>
			strcat(buffer,temp);
    170c:	e13fe704 	addi	r4,fp,-100
    1710:	e17ffb04 	addi	r5,fp,-20
    1714:	0003e900 	call	3e90 <strcat>
		*(temp+10) = '\0';
		sprintf(temp,"%08x :",address + j*16);
		strcat(buffer,temp);

		//print row or less if count
		int a; for(a = 0; a < 16 && a < (count - j * 16); ++a){
    1718:	e0bfe417 	ldw	r2,-112(fp)
    171c:	10800044 	addi	r2,r2,1
    1720:	e0bfe415 	stw	r2,-112(fp)
    1724:	e0bfe417 	ldw	r2,-112(fp)
    1728:	10800408 	cmpgei	r2,r2,16
    172c:	1000071e 	bne	r2,zero,174c <_printMem+0x234>
    1730:	e13fe417 	ldw	r4,-112(fp)
    1734:	e0bfe517 	ldw	r2,-108(fp)
    1738:	1004913a 	slli	r2,r2,4
    173c:	1007883a 	mov	r3,r2
    1740:	e0bfff17 	ldw	r2,-4(fp)
    1744:	10c5c83a 	sub	r2,r2,r3
    1748:	20bfdc36 	bltu	r4,r2,16bc <_printMem+0x1a4>
			sprintf(temp," %02x",val);
			strcat(buffer,temp);
		}

		//send to serial device
		strcat(buffer,"\n");
    174c:	e13fe704 	addi	r4,fp,-100
    1750:	01400074 	movhi	r5,1
    1754:	29523e04 	addi	r5,r5,18680
    1758:	0003e900 	call	3e90 <strcat>
		printf(buffer);
    175c:	e13fe704 	addi	r4,fp,-100
    1760:	00037bc0 	call	37bc <printf>
	}
	strcat(buffer,"\n");
	printf(buffer);

	//print bytes as chunks of buffer
	int j; for(j = 0; j < (count - 1) / 16 + 1; ++j){
    1764:	e0bfe517 	ldw	r2,-108(fp)
    1768:	10800044 	addi	r2,r2,1
    176c:	e0bfe515 	stw	r2,-108(fp)
    1770:	e0ffe517 	ldw	r3,-108(fp)
    1774:	e0bfff17 	ldw	r2,-4(fp)
    1778:	10bfffc4 	addi	r2,r2,-1
    177c:	1004d13a 	srli	r2,r2,4
    1780:	10800044 	addi	r2,r2,1
    1784:	18bfb736 	bltu	r3,r2,1664 <_printMem+0x14c>
		strcat(buffer,"\n");
		printf(buffer);
	}

	//send final character to clean up display
	printf("\n");
    1788:	01000284 	movi	r4,10
    178c:	00038340 	call	3834 <putchar>
}
    1790:	e037883a 	mov	sp,fp
    1794:	dfc00217 	ldw	ra,8(sp)
    1798:	df000117 	ldw	fp,4(sp)
    179c:	dc000017 	ldw	r16,0(sp)
    17a0:	dec00304 	addi	sp,sp,12
    17a4:	f800283a 	ret

000017a8 <_pan>:

/**
 * Pans the servo by the input value provided
 * @param arg string to parse
 */
static void _pan(char* arg){
    17a8:	defff604 	addi	sp,sp,-40
    17ac:	dfc00915 	stw	ra,36(sp)
    17b0:	df000815 	stw	fp,32(sp)
    17b4:	df000804 	addi	fp,sp,32
    17b8:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Panning");
    17bc:	01000074 	movhi	r4,1
    17c0:	21127904 	addi	r4,r4,18916
    17c4:	0001de00 	call	1de0 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    17c8:	e1bff904 	addi	r6,fp,-28
    17cc:	e1fffb04 	addi	r7,fp,-20
    17d0:	e13fff17 	ldw	r4,-4(fp)
    17d4:	01400074 	movhi	r5,1
    17d8:	29527b04 	addi	r5,r5,18924
    17dc:	0003cc00 	call	3cc0 <sscanf>
    17e0:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    17e4:	e0bff817 	ldw	r2,-32(fp)
    17e8:	10800090 	cmplti	r2,r2,2
    17ec:	1000151e 	bne	r2,zero,1844 <_pan+0x9c>
		if(servo_pan(pos) == -1){
    17f0:	e13ffb17 	ldw	r4,-20(fp)
    17f4:	00024a00 	call	24a0 <servo_pan>
    17f8:	10bfffd8 	cmpnei	r2,r2,-1
    17fc:	1000141e 	bne	r2,zero,1850 <_pan+0xa8>
			printf("Position ");
    1800:	01000074 	movhi	r4,1
    1804:	21127d04 	addi	r4,r4,18932
    1808:	00037bc0 	call	37bc <printf>
			char temp[11]; *(temp+10) = '\0';
    180c:	e0bffc04 	addi	r2,fp,-16
    1810:	10800284 	addi	r2,r2,10
    1814:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    1818:	e1bffb17 	ldw	r6,-20(fp)
    181c:	e13ffc04 	addi	r4,fp,-16
    1820:	01400074 	movhi	r5,1
    1824:	29528004 	addi	r5,r5,18944
    1828:	0003b5c0 	call	3b5c <sprintf>
			printf(temp);
    182c:	e13ffc04 	addi	r4,fp,-16
    1830:	00037bc0 	call	37bc <printf>
			printf(" is invalid. Enter between 0 and 175.\n");
    1834:	01000074 	movhi	r4,1
    1838:	21128104 	addi	r4,r4,18948
    183c:	00038f80 	call	38f8 <puts>
    1840:	00000306 	br	1850 <_pan+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    1844:	01000074 	movhi	r4,1
    1848:	21128b04 	addi	r4,r4,18988
    184c:	00038f80 	call	38f8 <puts>
	}
}
    1850:	e037883a 	mov	sp,fp
    1854:	dfc00117 	ldw	ra,4(sp)
    1858:	df000017 	ldw	fp,0(sp)
    185c:	dec00204 	addi	sp,sp,8
    1860:	f800283a 	ret

00001864 <_tilt>:

/**
 * Tilts the servo by the input value provided
 * @param arg string to parse
 */
static void _tilt(char* arg){
    1864:	defff604 	addi	sp,sp,-40
    1868:	dfc00915 	stw	ra,36(sp)
    186c:	df000815 	stw	fp,32(sp)
    1870:	df000804 	addi	fp,sp,32
    1874:	e13fff15 	stw	r4,-4(fp)
	lcd_printString("Tilting");
    1878:	01000074 	movhi	r4,1
    187c:	21129204 	addi	r4,r4,19016
    1880:	0001de00 	call	1de0 <lcd_printString>
	char cmd[5];
	int pos;
	int matched = sscanf(arg,"%s %d",cmd,&pos);
    1884:	e1bff904 	addi	r6,fp,-28
    1888:	e1fffb04 	addi	r7,fp,-20
    188c:	e13fff17 	ldw	r4,-4(fp)
    1890:	01400074 	movhi	r5,1
    1894:	29527b04 	addi	r5,r5,18924
    1898:	0003cc00 	call	3cc0 <sscanf>
    189c:	e0bff815 	stw	r2,-32(fp)
	if(matched > 1){
    18a0:	e0bff817 	ldw	r2,-32(fp)
    18a4:	10800090 	cmplti	r2,r2,2
    18a8:	1000151e 	bne	r2,zero,1900 <_tilt+0x9c>
		if(servo_tilt(pos) == -1){
    18ac:	e13ffb17 	ldw	r4,-20(fp)
    18b0:	00025100 	call	2510 <servo_tilt>
    18b4:	10bfffd8 	cmpnei	r2,r2,-1
    18b8:	1000141e 	bne	r2,zero,190c <_tilt+0xa8>
			printf("Position ");
    18bc:	01000074 	movhi	r4,1
    18c0:	21127d04 	addi	r4,r4,18932
    18c4:	00037bc0 	call	37bc <printf>
			char temp[11]; *(temp+10) = '\0';
    18c8:	e0bffc04 	addi	r2,fp,-16
    18cc:	10800284 	addi	r2,r2,10
    18d0:	10000005 	stb	zero,0(r2)
			sprintf(temp,"%d",pos);
    18d4:	e1bffb17 	ldw	r6,-20(fp)
    18d8:	e13ffc04 	addi	r4,fp,-16
    18dc:	01400074 	movhi	r5,1
    18e0:	29528004 	addi	r5,r5,18944
    18e4:	0003b5c0 	call	3b5c <sprintf>
			printf(temp);
    18e8:	e13ffc04 	addi	r4,fp,-16
    18ec:	00037bc0 	call	37bc <printf>
			printf(" is invalid. Enter between 0 and 143.\n");
    18f0:	01000074 	movhi	r4,1
    18f4:	21129404 	addi	r4,r4,19024
    18f8:	00038f80 	call	38f8 <puts>
    18fc:	00000306 	br	190c <_tilt+0xa8>
		}
	}else{
		printf("Invalid command structure.\n");
    1900:	01000074 	movhi	r4,1
    1904:	21128b04 	addi	r4,r4,18988
    1908:	00038f80 	call	38f8 <puts>
	}
}
    190c:	e037883a 	mov	sp,fp
    1910:	dfc00117 	ldw	ra,4(sp)
    1914:	df000017 	ldw	fp,0(sp)
    1918:	dec00204 	addi	sp,sp,8
    191c:	f800283a 	ret

00001920 <I2C_init>:

/**
 * This function will initialize the pre-scaler register and enable the I2C
 * peripheral
 */
void I2C_init(){
    1920:	defffe04 	addi	sp,sp,-8
    1924:	df000115 	stw	fp,4(sp)
    1928:	df000104 	addi	fp,sp,4
	uint16_t scaler = I2C_PRESCALER_FORMULA(50000000,100000);
    192c:	008018c4 	movi	r2,99
    1930:	e0bfff0d 	sth	r2,-4(fp)
	I2C->PRESCALER_LO = (scaler)&0xFF;
    1934:	01202034 	movhi	r4,32896
    1938:	21080804 	addi	r4,r4,8224
    193c:	e0bfff0b 	ldhu	r2,-4(fp)
    1940:	1007883a 	mov	r3,r2
    1944:	00bfffc4 	movi	r2,-1
    1948:	1884703a 	and	r2,r3,r2
    194c:	20800005 	stb	r2,0(r4)
	I2C->PRESCALER_HI = (scaler>>8)&0xFF;
    1950:	01202034 	movhi	r4,32896
    1954:	21080804 	addi	r4,r4,8224
    1958:	e0bfff0b 	ldhu	r2,-4(fp)
    195c:	1004d23a 	srli	r2,r2,8
    1960:	1007883a 	mov	r3,r2
    1964:	00bfffc4 	movi	r2,-1
    1968:	1884703a 	and	r2,r3,r2
    196c:	20800045 	stb	r2,1(r4)
	I2C->CNTRL = I2C_CNTRL_ENABLE_MASK;
    1970:	00e02034 	movhi	r3,32896
    1974:	18c80804 	addi	r3,r3,8224
    1978:	00bfe004 	movi	r2,-128
    197c:	18800085 	stb	r2,2(r3)
}
    1980:	e037883a 	mov	sp,fp
    1984:	df000017 	ldw	fp,0(sp)
    1988:	dec00104 	addi	sp,sp,4
    198c:	f800283a 	ret

00001990 <I2C_read>:
 * It returns the 8-bit contents of the specified register.
 * @param addr slave address of device 7-bit
 * @param regNumber register address to read on slave device.
 * @return byte read from the device.
 */
uint8_t I2C_read(uint8_t addr, uint8_t regNumber){
    1990:	defffa04 	addi	sp,sp,-24
    1994:	dfc00515 	stw	ra,20(sp)
    1998:	df000415 	stw	fp,16(sp)
    199c:	df000404 	addi	fp,sp,16
    19a0:	e13ffd05 	stb	r4,-12(fp)
    19a4:	e17ffe05 	stb	r5,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    19a8:	00e02034 	movhi	r3,32896
    19ac:	18c80804 	addi	r3,r3,8224
    19b0:	e0bffd03 	ldbu	r2,-12(fp)
    19b4:	1085883a 	add	r2,r2,r2
    19b8:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    19bc:	01002404 	movi	r4,144
    19c0:	0001b4c0 	call	1b4c <I2C_action>
    19c4:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    19c8:	e0bffc03 	ldbu	r2,-16(fp)
    19cc:	1005003a 	cmpeq	r2,r2,zero
    19d0:	1000031e 	bne	r2,zero,19e0 <I2C_read+0x50>
		return -1; //error occurred
    19d4:	00803fc4 	movi	r2,255
    19d8:	e0bfff15 	stw	r2,-4(fp)
    19dc:	00002406 	br	1a70 <I2C_read+0xe0>
	}

	//write register address and end transmit
	I2C->RX_TX = regNumber;
    19e0:	00e02034 	movhi	r3,32896
    19e4:	18c80804 	addi	r3,r3,8224
    19e8:	e0bffe03 	ldbu	r2,-8(fp)
    19ec:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK| I2C_CMD_STO_MASK);
    19f0:	01001404 	movi	r4,80
    19f4:	0001b4c0 	call	1b4c <I2C_action>
    19f8:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    19fc:	e0bffc03 	ldbu	r2,-16(fp)
    1a00:	1005003a 	cmpeq	r2,r2,zero
    1a04:	1000031e 	bne	r2,zero,1a14 <I2C_read+0x84>
		return -1; //error occurred
    1a08:	00803fc4 	movi	r2,255
    1a0c:	e0bfff15 	stw	r2,-4(fp)
    1a10:	00001706 	br	1a70 <I2C_read+0xe0>
	}

	//write slave read address, data received is from device
	I2C->RX_TX = (addr << 1) | 1;
    1a14:	00e02034 	movhi	r3,32896
    1a18:	18c80804 	addi	r3,r3,8224
    1a1c:	e0bffd03 	ldbu	r2,-12(fp)
    1a20:	1085883a 	add	r2,r2,r2
    1a24:	10800054 	ori	r2,r2,1
    1a28:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    1a2c:	01002404 	movi	r4,144
    1a30:	0001b4c0 	call	1b4c <I2C_action>
    1a34:	e0bffc05 	stb	r2,-16(fp)
	if(nacked){
    1a38:	e0bffc03 	ldbu	r2,-16(fp)
    1a3c:	1005003a 	cmpeq	r2,r2,zero
    1a40:	1000031e 	bne	r2,zero,1a50 <I2C_read+0xc0>
		return -1; //error occurred
    1a44:	00803fc4 	movi	r2,255
    1a48:	e0bfff15 	stw	r2,-4(fp)
    1a4c:	00000806 	br	1a70 <I2C_read+0xe0>
	}
	nacked = I2C_action(I2C_CMD_RD_MASK | I2C_CMD_STO_MASK | I2C_CMD_ACK_MASK);
    1a50:	01001a04 	movi	r4,104
    1a54:	0001b4c0 	call	1b4c <I2C_action>
    1a58:	e0bffc05 	stb	r2,-16(fp)
	return I2C->RX_TX;
    1a5c:	00a02034 	movhi	r2,32896
    1a60:	10880804 	addi	r2,r2,8224
    1a64:	108000c3 	ldbu	r2,3(r2)
    1a68:	10803fcc 	andi	r2,r2,255
    1a6c:	e0bfff15 	stw	r2,-4(fp)
    1a70:	e0bfff17 	ldw	r2,-4(fp)

}
    1a74:	e037883a 	mov	sp,fp
    1a78:	dfc00117 	ldw	ra,4(sp)
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00204 	addi	sp,sp,8
    1a84:	f800283a 	ret

00001a88 <I2C_write>:
 * @param addr slave address of device 7-bit
 * @param regNumber register address to write on slave device.
 * @param value data byte to send to slave register.
 * @return 1 if nacked, 0 if acked
 */
uint8_t I2C_write(uint8_t addr, uint8_t regNumber, uint8_t value){
    1a88:	defff904 	addi	sp,sp,-28
    1a8c:	dfc00615 	stw	ra,24(sp)
    1a90:	df000515 	stw	fp,20(sp)
    1a94:	df000504 	addi	fp,sp,20
    1a98:	e13ffc05 	stb	r4,-16(fp)
    1a9c:	e17ffd05 	stb	r5,-12(fp)
    1aa0:	e1bffe05 	stb	r6,-8(fp)
	uint8_t nacked;

	//write slave address
	I2C->RX_TX = addr << 1;
    1aa4:	00e02034 	movhi	r3,32896
    1aa8:	18c80804 	addi	r3,r3,8224
    1aac:	e0bffc03 	ldbu	r2,-16(fp)
    1ab0:	1085883a 	add	r2,r2,r2
    1ab4:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_STA_MASK | I2C_CMD_WR_MASK);
    1ab8:	01002404 	movi	r4,144
    1abc:	0001b4c0 	call	1b4c <I2C_action>
    1ac0:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    1ac4:	e0bffb03 	ldbu	r2,-20(fp)
    1ac8:	1005003a 	cmpeq	r2,r2,zero
    1acc:	1000031e 	bne	r2,zero,1adc <I2C_write+0x54>
		return nacked; //error occurred
    1ad0:	e0bffb03 	ldbu	r2,-20(fp)
    1ad4:	e0bfff15 	stw	r2,-4(fp)
    1ad8:	00001606 	br	1b34 <I2C_write+0xac>
	}

	//write register address
	I2C->RX_TX = regNumber;
    1adc:	00e02034 	movhi	r3,32896
    1ae0:	18c80804 	addi	r3,r3,8224
    1ae4:	e0bffd03 	ldbu	r2,-12(fp)
    1ae8:	188000c5 	stb	r2,3(r3)
	nacked = I2C_action(I2C_CMD_WR_MASK);
    1aec:	01000404 	movi	r4,16
    1af0:	0001b4c0 	call	1b4c <I2C_action>
    1af4:	e0bffb05 	stb	r2,-20(fp)
	if(nacked){
    1af8:	e0bffb03 	ldbu	r2,-20(fp)
    1afc:	1005003a 	cmpeq	r2,r2,zero
    1b00:	1000031e 	bne	r2,zero,1b10 <I2C_write+0x88>
		return nacked; //error occurred
    1b04:	e0bffb03 	ldbu	r2,-20(fp)
    1b08:	e0bfff15 	stw	r2,-4(fp)
    1b0c:	00000906 	br	1b34 <I2C_write+0xac>
	}

	//write data
	I2C->RX_TX = value;
    1b10:	00a02034 	movhi	r2,32896
    1b14:	10880804 	addi	r2,r2,8224
    1b18:	e0fffe03 	ldbu	r3,-8(fp)
    1b1c:	10c000c5 	stb	r3,3(r2)
	nacked = I2C_action(I2C_CMD_WR_MASK | I2C_CMD_STO_MASK);
    1b20:	01001404 	movi	r4,80
    1b24:	0001b4c0 	call	1b4c <I2C_action>
    1b28:	e0bffb05 	stb	r2,-20(fp)
	return nacked;
    1b2c:	e0bffb03 	ldbu	r2,-20(fp)
    1b30:	e0bfff15 	stw	r2,-4(fp)
    1b34:	e0bfff17 	ldw	r2,-4(fp)
}
    1b38:	e037883a 	mov	sp,fp
    1b3c:	dfc00117 	ldw	ra,4(sp)
    1b40:	df000017 	ldw	fp,0(sp)
    1b44:	dec00204 	addi	sp,sp,8
    1b48:	f800283a 	ret

00001b4c <I2C_action>:
 * particular I2C transfer, polls TIP for end of transfer and returns the
 * RxACK status (0 for success).
 * @param command bit flags specifying the commands to apply to I2C control
 * @return success/fail of command (NACK != 0, ACK = 0)
 */
uint8_t I2C_action(uint8_t command){
    1b4c:	defffe04 	addi	sp,sp,-8
    1b50:	df000115 	stw	fp,4(sp)
    1b54:	df000104 	addi	fp,sp,4
    1b58:	e13fff05 	stb	r4,-4(fp)
	I2C->STATUS_CMD = command;
    1b5c:	00e02034 	movhi	r3,32896
    1b60:	18c80804 	addi	r3,r3,8224
    1b64:	e0bfff03 	ldbu	r2,-4(fp)
    1b68:	18800105 	stb	r2,4(r3)
	while(I2C->STATUS_CMD&I2C_STATUS_TIP_FLAG); //wait for TIP
    1b6c:	00a02034 	movhi	r2,32896
    1b70:	10880804 	addi	r2,r2,8224
    1b74:	10800103 	ldbu	r2,4(r2)
    1b78:	10803fcc 	andi	r2,r2,255
    1b7c:	1080008c 	andi	r2,r2,2
    1b80:	1004c03a 	cmpne	r2,r2,zero
    1b84:	103ff91e 	bne	r2,zero,1b6c <I2C_action+0x20>
	return I2C->STATUS_CMD&I2C_STATUS_RXACK_FLAG;
    1b88:	00a02034 	movhi	r2,32896
    1b8c:	10880804 	addi	r2,r2,8224
    1b90:	10800103 	ldbu	r2,4(r2)
    1b94:	10c03fcc 	andi	r3,r2,255
    1b98:	00802004 	movi	r2,128
    1b9c:	1884703a 	and	r2,r3,r2
}
    1ba0:	e037883a 	mov	sp,fp
    1ba4:	df000017 	ldw	fp,0(sp)
    1ba8:	dec00104 	addi	sp,sp,4
    1bac:	f800283a 	ret

00001bb0 <lcd_cmd>:

/**
 * Writes a command to the LCD.
 * @param cmd command to be sent to LCD.
 */
void lcd_cmd(uint8_t cmd){
    1bb0:	defffc04 	addi	sp,sp,-16
    1bb4:	dfc00315 	stw	ra,12(sp)
    1bb8:	df000215 	stw	fp,8(sp)
    1bbc:	df000204 	addi	fp,sp,8
    1bc0:	e13fff05 	stb	r4,-4(fp)
	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    1bc4:	0001ec40 	call	1ec4 <lcd_util_pollBusyFlag>

	// write E=RS=RW=0
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_CMD_MASK;
    1bc8:	00a02034 	movhi	r2,32896
    1bcc:	10882004 	addi	r2,r2,8320
    1bd0:	10000005 	stb	zero,0(r2)

	// write command to data port
	(LCD_DATA->DATA) = cmd;
    1bd4:	00e02034 	movhi	r3,32896
    1bd8:	18c82804 	addi	r3,r3,8352
    1bdc:	e0bfff03 	ldbu	r2,-4(fp)
    1be0:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    1be4:	00a02034 	movhi	r2,32896
    1be8:	10882004 	addi	r2,r2,8320
    1bec:	10800003 	ldbu	r2,0(r2)
    1bf0:	10800114 	ori	r2,r2,4
    1bf4:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1bf8:	00e02034 	movhi	r3,32896
    1bfc:	18c82004 	addi	r3,r3,8320
    1c00:	e0bffe03 	ldbu	r2,-8(fp)
    1c04:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    1c08:	01007d04 	movi	r4,500
    1c0c:	01602034 	movhi	r5,32896
    1c10:	29481804 	addi	r5,r5,8288
    1c14:	00021840 	call	2184 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    1c18:	00a02034 	movhi	r2,32896
    1c1c:	10882004 	addi	r2,r2,8320
    1c20:	10c00003 	ldbu	r3,0(r2)
    1c24:	00bffec4 	movi	r2,-5
    1c28:	1884703a 	and	r2,r3,r2
    1c2c:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1c30:	00e02034 	movhi	r3,32896
    1c34:	18c82004 	addi	r3,r3,8320
    1c38:	e0bffe03 	ldbu	r2,-8(fp)
    1c3c:	18800005 	stb	r2,0(r3)

}
    1c40:	e037883a 	mov	sp,fp
    1c44:	dfc00117 	ldw	ra,4(sp)
    1c48:	df000017 	ldw	fp,0(sp)
    1c4c:	dec00204 	addi	sp,sp,8
    1c50:	f800283a 	ret

00001c54 <lcd_prt>:

/**
 * Writes a character to the LCD.
 * @param c character that is to be sent to LCD.
 */
void lcd_prt(char c){
    1c54:	defffc04 	addi	sp,sp,-16
    1c58:	dfc00315 	stw	ra,12(sp)
    1c5c:	df000215 	stw	fp,8(sp)
    1c60:	df000204 	addi	fp,sp,8
    1c64:	e13fff05 	stb	r4,-4(fp)

	//temporary value for data pin manipulation
	uint8_t ctrlVal;

	//Wait till LCD is ready to accept new instruction
	lcd_util_pollBusyFlag();
    1c68:	0001ec40 	call	1ec4 <lcd_util_pollBusyFlag>

	// write RW=E=0 RS=1  "0b010"
	(LCD_CTRL->L_CTRL) = LCD_DATA_CMD_SELECT_DATA_MASK;
    1c6c:	00e02034 	movhi	r3,32896
    1c70:	18c82004 	addi	r3,r3,8320
    1c74:	00800084 	movi	r2,2
    1c78:	18800005 	stb	r2,0(r3)

	// write character to data port
	(LCD_DATA->DATA) = c;
    1c7c:	00e02034 	movhi	r3,32896
    1c80:	18c82804 	addi	r3,r3,8352
    1c84:	e0bfff07 	ldb	r2,-4(fp)
    1c88:	18800015 	stw	r2,0(r3)

	// set enable ON
	ctrlVal = (LCD_CTRL->L_CTRL) | LCD_ENABLE_ON_MASK;
    1c8c:	00a02034 	movhi	r2,32896
    1c90:	10882004 	addi	r2,r2,8320
    1c94:	10800003 	ldbu	r2,0(r2)
    1c98:	10800114 	ori	r2,r2,4
    1c9c:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1ca0:	00e02034 	movhi	r3,32896
    1ca4:	18c82004 	addi	r3,r3,8320
    1ca8:	e0bffe03 	ldbu	r2,-8(fp)
    1cac:	18800005 	stb	r2,0(r3)

	// delay for 500ns
	timer_delay(500, TIMER_1);
    1cb0:	01007d04 	movi	r4,500
    1cb4:	01602034 	movhi	r5,32896
    1cb8:	29481804 	addi	r5,r5,8288
    1cbc:	00021840 	call	2184 <timer_delay>

	// set enable OFF
	ctrlVal = (LCD_CTRL->L_CTRL) & LCD_ENABLE_OFF_MASK;
    1cc0:	00a02034 	movhi	r2,32896
    1cc4:	10882004 	addi	r2,r2,8320
    1cc8:	10c00003 	ldbu	r3,0(r2)
    1ccc:	00bffec4 	movi	r2,-5
    1cd0:	1884703a 	and	r2,r3,r2
    1cd4:	e0bffe05 	stb	r2,-8(fp)
	(LCD_CTRL->L_CTRL) = ctrlVal;
    1cd8:	00e02034 	movhi	r3,32896
    1cdc:	18c82004 	addi	r3,r3,8320
    1ce0:	e0bffe03 	ldbu	r2,-8(fp)
    1ce4:	18800005 	stb	r2,0(r3)
}
    1ce8:	e037883a 	mov	sp,fp
    1cec:	dfc00117 	ldw	ra,4(sp)
    1cf0:	df000017 	ldw	fp,0(sp)
    1cf4:	dec00204 	addi	sp,sp,8
    1cf8:	f800283a 	ret

00001cfc <lcd_clr>:

/**
 * Writes the clear command to the LCD.
 */
void lcd_clr(void){
    1cfc:	defffe04 	addi	sp,sp,-8
    1d00:	dfc00115 	stw	ra,4(sp)
    1d04:	df000015 	stw	fp,0(sp)
    1d08:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_CLEAR);
    1d0c:	01000044 	movi	r4,1
    1d10:	0001bb00 	call	1bb0 <lcd_cmd>
}
    1d14:	e037883a 	mov	sp,fp
    1d18:	dfc00117 	ldw	ra,4(sp)
    1d1c:	df000017 	ldw	fp,0(sp)
    1d20:	dec00204 	addi	sp,sp,8
    1d24:	f800283a 	ret

00001d28 <lcd_home>:

/**
 * Moves the cursor back to home on the LCD.
 */
void lcd_home(void){
    1d28:	defffe04 	addi	sp,sp,-8
    1d2c:	dfc00115 	stw	ra,4(sp)
    1d30:	df000015 	stw	fp,0(sp)
    1d34:	d839883a 	mov	fp,sp
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    1d38:	01000184 	movi	r4,6
    1d3c:	0001bb00 	call	1bb0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1d40:	01000084 	movi	r4,2
    1d44:	0001bb00 	call	1bb0 <lcd_cmd>
}
    1d48:	e037883a 	mov	sp,fp
    1d4c:	dfc00117 	ldw	ra,4(sp)
    1d50:	df000017 	ldw	fp,0(sp)
    1d54:	dec00204 	addi	sp,sp,8
    1d58:	f800283a 	ret

00001d5c <lcd_init>:

/**
 * Initializes the LCD. Sends out the command stream to setup the display. Must
 * call LCDportInit first for direction setting.
 */
void lcd_init(void){
    1d5c:	defffe04 	addi	sp,sp,-8
    1d60:	dfc00115 	stw	ra,4(sp)
    1d64:	df000015 	stw	fp,0(sp)
    1d68:	d839883a 	mov	fp,sp
	lcd_portInit(0xFF);
    1d6c:	01003fc4 	movi	r4,255
    1d70:	0001db00 	call	1db0 <lcd_portInit>
	lcd_cmd(LCD_CMD_DATALENGTH_8BIT);
    1d74:	01000e04 	movi	r4,56
    1d78:	0001bb00 	call	1bb0 <lcd_cmd>
	lcd_cmd(LCD_CMD_DISPLAY_CURSOR_BLINK_ON);
    1d7c:	010003c4 	movi	r4,15
    1d80:	0001bb00 	call	1bb0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CLEAR);
    1d84:	01000044 	movi	r4,1
    1d88:	0001bb00 	call	1bb0 <lcd_cmd>
	lcd_cmd(LCD_CMD_INCREMENT_CURSOR_1);
    1d8c:	01000184 	movi	r4,6
    1d90:	0001bb00 	call	1bb0 <lcd_cmd>
	lcd_cmd(LCD_CMD_CURSOR_HOME);
    1d94:	01000084 	movi	r4,2
    1d98:	0001bb00 	call	1bb0 <lcd_cmd>
}
    1d9c:	e037883a 	mov	sp,fp
    1da0:	dfc00117 	ldw	ra,4(sp)
    1da4:	df000017 	ldw	fp,0(sp)
    1da8:	dec00204 	addi	sp,sp,8
    1dac:	f800283a 	ret

00001db0 <lcd_portInit>:

/**
 * Sets the direction of the LCD data port.
 * @param dir Port direction mask for the LCD data port
 */
void lcd_portInit(uint8_t dir){
    1db0:	defffe04 	addi	sp,sp,-8
    1db4:	df000115 	stw	fp,4(sp)
    1db8:	df000104 	addi	fp,sp,4
    1dbc:	e13fff05 	stb	r4,-4(fp)
	(LCD_DATA->DIRECTION) = dir;
    1dc0:	00e02034 	movhi	r3,32896
    1dc4:	18c82804 	addi	r3,r3,8352
    1dc8:	e0bfff03 	ldbu	r2,-4(fp)
    1dcc:	18800115 	stw	r2,4(r3)
}
    1dd0:	e037883a 	mov	sp,fp
    1dd4:	df000017 	ldw	fp,0(sp)
    1dd8:	dec00104 	addi	sp,sp,4
    1ddc:	f800283a 	ret

00001de0 <lcd_printString>:

/**
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
    1de0:	defffc04 	addi	sp,sp,-16
    1de4:	dfc00315 	stw	ra,12(sp)
    1de8:	df000215 	stw	fp,8(sp)
    1dec:	df000204 	addi	fp,sp,8
    1df0:	e13fff15 	stw	r4,-4(fp)
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    1df4:	e03ffe15 	stw	zero,-8(fp)
    1df8:	00002306 	br	1e88 <lcd_printString+0xa8>

		// If enter character
		if(*ptr == '\n'){
    1dfc:	e0bfff17 	ldw	r2,-4(fp)
    1e00:	10800003 	ldbu	r2,0(r2)
    1e04:	10803fcc 	andi	r2,r2,255
    1e08:	1080201c 	xori	r2,r2,128
    1e0c:	10bfe004 	addi	r2,r2,-128
    1e10:	10800298 	cmpnei	r2,r2,10
    1e14:	10000b1e 	bne	r2,zero,1e44 <lcd_printString+0x64>
			//If on first line move to second
			if(counter < 16){
    1e18:	e0bffe17 	ldw	r2,-8(fp)
    1e1c:	10800408 	cmpgei	r2,r2,16
    1e20:	1000231e 	bne	r2,zero,1eb0 <lcd_printString+0xd0>
				lcd_cmd(LCD_SECONDLINE_CMD);
    1e24:	01003004 	movi	r4,192
    1e28:	0001bb00 	call	1bb0 <lcd_cmd>
				counter = 16;
    1e2c:	00800404 	movi	r2,16
    1e30:	e0bffe15 	stw	r2,-8(fp)
			else {
				return;
			}

			//index pointer
			ptr++;
    1e34:	e0bfff17 	ldw	r2,-4(fp)
    1e38:	10800044 	addi	r2,r2,1
    1e3c:	e0bfff15 	stw	r2,-4(fp)
    1e40:	00000e06 	br	1e7c <lcd_printString+0x9c>
		}
		//Roll over to second line when first line fills
		else{
			if(counter == 16)
    1e44:	e0bffe17 	ldw	r2,-8(fp)
    1e48:	10800418 	cmpnei	r2,r2,16
    1e4c:	1000021e 	bne	r2,zero,1e58 <lcd_printString+0x78>
				lcd_cmd(LCD_SECONDLINE_CMD);
    1e50:	01003004 	movi	r4,192
    1e54:	0001bb00 	call	1bb0 <lcd_cmd>

			//print the character and index pointer
			lcd_prt(*ptr);
    1e58:	e0bfff17 	ldw	r2,-4(fp)
    1e5c:	10800003 	ldbu	r2,0(r2)
    1e60:	11003fcc 	andi	r4,r2,255
    1e64:	2100201c 	xori	r4,r4,128
    1e68:	213fe004 	addi	r4,r4,-128
    1e6c:	0001c540 	call	1c54 <lcd_prt>
			ptr++;
    1e70:	e0bfff17 	ldw	r2,-4(fp)
    1e74:	10800044 	addi	r2,r2,1
    1e78:	e0bfff15 	stw	r2,-4(fp)
 * Prints a string of characters to the LCD.
 * @param ptr pointer to the start of a C-string ended with a nul character.
 */
void lcd_printString(char* ptr){
	int counter;
	for(counter = 0; (*ptr != '\0')&&(counter != 32); counter++){
    1e7c:	e0bffe17 	ldw	r2,-8(fp)
    1e80:	10800044 	addi	r2,r2,1
    1e84:	e0bffe15 	stw	r2,-8(fp)
    1e88:	e0bfff17 	ldw	r2,-4(fp)
    1e8c:	10800003 	ldbu	r2,0(r2)
    1e90:	10803fcc 	andi	r2,r2,255
    1e94:	1080201c 	xori	r2,r2,128
    1e98:	10bfe004 	addi	r2,r2,-128
    1e9c:	1005003a 	cmpeq	r2,r2,zero
    1ea0:	1000031e 	bne	r2,zero,1eb0 <lcd_printString+0xd0>
    1ea4:	e0bffe17 	ldw	r2,-8(fp)
    1ea8:	10800818 	cmpnei	r2,r2,32
    1eac:	103fd31e 	bne	r2,zero,1dfc <lcd_printString+0x1c>
			//print the character and index pointer
			lcd_prt(*ptr);
			ptr++;
		}
	}
}
    1eb0:	e037883a 	mov	sp,fp
    1eb4:	dfc00117 	ldw	ra,4(sp)
    1eb8:	df000017 	ldw	fp,0(sp)
    1ebc:	dec00204 	addi	sp,sp,8
    1ec0:	f800283a 	ret

00001ec4 <lcd_util_pollBusyFlag>:

/**
 * Polls the busy flag of the LCD to synchronize the program to the LCD
 * instruction execution.
 */
static void lcd_util_pollBusyFlag(){
    1ec4:	defffd04 	addi	sp,sp,-12
    1ec8:	df000215 	stw	fp,8(sp)
    1ecc:	df000204 	addi	fp,sp,8

	//Set data register to input
	uint32_t tempDataDir = (LCD_DATA->DIRECTION);
    1ed0:	00a02034 	movhi	r2,32896
    1ed4:	10882804 	addi	r2,r2,8352
    1ed8:	10800117 	ldw	r2,4(r2)
    1edc:	e0bfff15 	stw	r2,-4(fp)
	(LCD_DATA->DIRECTION) = 0;
    1ee0:	00a02034 	movhi	r2,32896
    1ee4:	10882804 	addi	r2,r2,8352
    1ee8:	10000115 	stw	zero,4(r2)

	// Set RW=E=1, RS=0 to get visible busy flag
	(LCD_CTRL->L_CTRL) = 0x5;
    1eec:	00e02034 	movhi	r3,32896
    1ef0:	18c82004 	addi	r3,r3,8320
    1ef4:	00800144 	movi	r2,5
    1ef8:	18800005 	stb	r2,0(r3)

	// Needs small delay since processor is faster than LCD. Thus this noop
	// is ran.
	int i = 0; i++;
    1efc:	e03ffe15 	stw	zero,-8(fp)
    1f00:	e0bffe17 	ldw	r2,-8(fp)
    1f04:	10800044 	addi	r2,r2,1
    1f08:	e0bffe15 	stw	r2,-8(fp)

	// Poll busy flag while it is active, since old operation is still running
	while((LCD_DATA->DATA) & 0x80);
    1f0c:	00a02034 	movhi	r2,32896
    1f10:	10882804 	addi	r2,r2,8352
    1f14:	10800017 	ldw	r2,0(r2)
    1f18:	1080200c 	andi	r2,r2,128
    1f1c:	1004c03a 	cmpne	r2,r2,zero
    1f20:	103ffa1e 	bne	r2,zero,1f0c <lcd_util_pollBusyFlag+0x48>

	// Restore the initial direction of the data ports
	(LCD_DATA->DIRECTION) = tempDataDir;
    1f24:	00a02034 	movhi	r2,32896
    1f28:	10882804 	addi	r2,r2,8352
    1f2c:	e0ffff17 	ldw	r3,-4(fp)
    1f30:	10c00115 	stw	r3,4(r2)
	(LCD_CTRL->L_CTRL) = 0;
    1f34:	00a02034 	movhi	r2,32896
    1f38:	10882004 	addi	r2,r2,8320
    1f3c:	10000005 	stb	zero,0(r2)
}
    1f40:	e037883a 	mov	sp,fp
    1f44:	df000017 	ldw	fp,0(sp)
    1f48:	dec00104 	addi	sp,sp,4
    1f4c:	f800283a 	ret

00001f50 <PWM_setDutyCycle_A>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_A(int dutyCycle){
    1f50:	defffc04 	addi	sp,sp,-16
    1f54:	df000315 	stw	fp,12(sp)
    1f58:	df000304 	addi	fp,sp,12
    1f5c:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1f60:	e0bffe17 	ldw	r2,-8(fp)
    1f64:	10801948 	cmpgei	r2,r2,101
    1f68:	1000121e 	bne	r2,zero,1fb4 <PWM_setDutyCycle_A+0x64>
    1f6c:	e0bffe17 	ldw	r2,-8(fp)
    1f70:	1004803a 	cmplt	r2,r2,zero
    1f74:	10000f1e 	bne	r2,zero,1fb4 <PWM_setDutyCycle_A+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    1f78:	e0bffe17 	ldw	r2,-8(fp)
    1f7c:	10803224 	muli	r2,r2,200
    1f80:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    1f84:	e0bffd17 	ldw	r2,-12(fp)
    1f88:	10938818 	cmpnei	r2,r2,20000
    1f8c:	1000031e 	bne	r2,zero,1f9c <PWM_setDutyCycle_A+0x4c>
			duty--;
    1f90:	e0bffd17 	ldw	r2,-12(fp)
    1f94:	10bfffc4 	addi	r2,r2,-1
    1f98:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRA = duty;
    1f9c:	00a02034 	movhi	r2,32896
    1fa0:	10880a04 	addi	r2,r2,8232
    1fa4:	e0fffd17 	ldw	r3,-12(fp)
    1fa8:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1; // return an error
	}
	// no error
	return 0;
    1fac:	e03fff15 	stw	zero,-4(fp)
    1fb0:	00000206 	br	1fbc <PWM_setDutyCycle_A+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRA = duty;
	} else {
		return -1; // return an error
    1fb4:	00bfffc4 	movi	r2,-1
    1fb8:	e0bfff15 	stw	r2,-4(fp)
    1fbc:	e0bfff17 	ldw	r2,-4(fp)
	}
	// no error
	return 0;
}
    1fc0:	e037883a 	mov	sp,fp
    1fc4:	df000017 	ldw	fp,0(sp)
    1fc8:	dec00104 	addi	sp,sp,4
    1fcc:	f800283a 	ret

00001fd0 <PWM_setDutyCycle_B>:
 * @param dutyPercent Duty cycle, given as a percent from 0 to 100. (anything
 *        lower or higher will be ignored and no change will occur to register
 * @return Either a 0 if there was no error (Bad input) or a EOF (-1) if the
 *         input was out of bounds.
 */
int PWM_setDutyCycle_B(int dutyCycle){
    1fd0:	defffc04 	addi	sp,sp,-16
    1fd4:	df000315 	stw	fp,12(sp)
    1fd8:	df000304 	addi	fp,sp,12
    1fdc:	e13ffe15 	stw	r4,-8(fp)
	if((dutyCycle <= 100) && (dutyCycle >= 0)){
    1fe0:	e0bffe17 	ldw	r2,-8(fp)
    1fe4:	10801948 	cmpgei	r2,r2,101
    1fe8:	1000121e 	bne	r2,zero,2034 <PWM_setDutyCycle_B+0x64>
    1fec:	e0bffe17 	ldw	r2,-8(fp)
    1ff0:	1004803a 	cmplt	r2,r2,zero
    1ff4:	10000f1e 	bne	r2,zero,2034 <PWM_setDutyCycle_B+0x64>
		//Convert from percent to the acceptable OCR value with max 20000
		int duty = dutyCycle * (MAX_OCR_VALUE / 100);
    1ff8:	e0bffe17 	ldw	r2,-8(fp)
    1ffc:	10803224 	muli	r2,r2,200
    2000:	e0bffd15 	stw	r2,-12(fp)
		//We can never actually get to 20000 based on my CE2800 notes
		if(duty == MAX_OCR_VALUE)
    2004:	e0bffd17 	ldw	r2,-12(fp)
    2008:	10938818 	cmpnei	r2,r2,20000
    200c:	1000031e 	bne	r2,zero,201c <PWM_setDutyCycle_B+0x4c>
			duty--;
    2010:	e0bffd17 	ldw	r2,-12(fp)
    2014:	10bfffc4 	addi	r2,r2,-1
    2018:	e0bffd15 	stw	r2,-12(fp)
		//set register
		*OCRB = duty;
    201c:	00a02034 	movhi	r2,32896
    2020:	10880a84 	addi	r2,r2,8234
    2024:	e0fffd17 	ldw	r3,-12(fp)
    2028:	10c0000d 	sth	r3,0(r2)
	} else {
		return -1;
	}
	return 0;
    202c:	e03fff15 	stw	zero,-4(fp)
    2030:	00000206 	br	203c <PWM_setDutyCycle_B+0x6c>
		if(duty == MAX_OCR_VALUE)
			duty--;
		//set register
		*OCRB = duty;
	} else {
		return -1;
    2034:	00bfffc4 	movi	r2,-1
    2038:	e0bfff15 	stw	r2,-4(fp)
    203c:	e0bfff17 	ldw	r2,-4(fp)
	}
	return 0;
}
    2040:	e037883a 	mov	sp,fp
    2044:	df000017 	ldw	fp,0(sp)
    2048:	dec00104 	addi	sp,sp,4
    204c:	f800283a 	ret

00002050 <PWM_writeOCRA>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRA(unsigned int value){
    2050:	defffd04 	addi	sp,sp,-12
    2054:	df000215 	stw	fp,8(sp)
    2058:	df000204 	addi	fp,sp,8
    205c:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    2060:	e0bffe17 	ldw	r2,-8(fp)
    2064:	10938870 	cmpltui	r2,r2,20001
    2068:	1000031e 	bne	r2,zero,2078 <PWM_writeOCRA+0x28>
		return -1;
    206c:	00bfffc4 	movi	r2,-1
    2070:	e0bfff15 	stw	r2,-4(fp)
    2074:	00000506 	br	208c <PWM_writeOCRA+0x3c>
	}
	*OCRA = value;
    2078:	00a02034 	movhi	r2,32896
    207c:	10880a04 	addi	r2,r2,8232
    2080:	e0fffe17 	ldw	r3,-8(fp)
    2084:	10c0000d 	sth	r3,0(r2)
	return 0;
    2088:	e03fff15 	stw	zero,-4(fp)
    208c:	e0bfff17 	ldw	r2,-4(fp)
}
    2090:	e037883a 	mov	sp,fp
    2094:	df000017 	ldw	fp,0(sp)
    2098:	dec00104 	addi	sp,sp,4
    209c:	f800283a 	ret

000020a0 <PWM_writeOCRB>:
 * Writes a value to the PWM register. Note that the function will only
 * write out valid ranged values.
 * @param value place number directly into register
 * @return -1 if invalid data, 0 otherwise
 */
int PWM_writeOCRB(unsigned int value){
    20a0:	defffd04 	addi	sp,sp,-12
    20a4:	df000215 	stw	fp,8(sp)
    20a8:	df000204 	addi	fp,sp,8
    20ac:	e13ffe15 	stw	r4,-8(fp)
	if(value > MAX_OCR_VALUE){
    20b0:	e0bffe17 	ldw	r2,-8(fp)
    20b4:	10938870 	cmpltui	r2,r2,20001
    20b8:	1000031e 	bne	r2,zero,20c8 <PWM_writeOCRB+0x28>
		return -1;
    20bc:	00bfffc4 	movi	r2,-1
    20c0:	e0bfff15 	stw	r2,-4(fp)
    20c4:	00000506 	br	20dc <PWM_writeOCRB+0x3c>
	}
	*OCRB = value;
    20c8:	00a02034 	movhi	r2,32896
    20cc:	10880a84 	addi	r2,r2,8234
    20d0:	e0fffe17 	ldw	r3,-8(fp)
    20d4:	10c0000d 	sth	r3,0(r2)
	return 0;
    20d8:	e03fff15 	stw	zero,-4(fp)
    20dc:	e0bfff17 	ldw	r2,-4(fp)
}
    20e0:	e037883a 	mov	sp,fp
    20e4:	df000017 	ldw	fp,0(sp)
    20e8:	dec00104 	addi	sp,sp,4
    20ec:	f800283a 	ret

000020f0 <PWM_readOCRA>:

/**
 * Reads from the OCRA register in counts.
 * @return count value.
 */
int PWM_readOCRA(){
    20f0:	deffff04 	addi	sp,sp,-4
    20f4:	df000015 	stw	fp,0(sp)
    20f8:	d839883a 	mov	fp,sp
	return *OCRA;
    20fc:	00a02034 	movhi	r2,32896
    2100:	10880a04 	addi	r2,r2,8232
    2104:	1080000b 	ldhu	r2,0(r2)
    2108:	10bfffcc 	andi	r2,r2,65535
}
    210c:	e037883a 	mov	sp,fp
    2110:	df000017 	ldw	fp,0(sp)
    2114:	dec00104 	addi	sp,sp,4
    2118:	f800283a 	ret

0000211c <PWM_readOCRB>:

/**
 * Reads from the OCRB register in counts.
 * @return count value.
 */
int PWM_readOCRB(){
    211c:	deffff04 	addi	sp,sp,-4
    2120:	df000015 	stw	fp,0(sp)
    2124:	d839883a 	mov	fp,sp
	return *OCRB;
    2128:	00a02034 	movhi	r2,32896
    212c:	10880a84 	addi	r2,r2,8234
    2130:	1080000b 	ldhu	r2,0(r2)
    2134:	10bfffcc 	andi	r2,r2,65535
}
    2138:	e037883a 	mov	sp,fp
    213c:	df000017 	ldw	fp,0(sp)
    2140:	dec00104 	addi	sp,sp,4
    2144:	f800283a 	ret

00002148 <pushbutton_read>:
 * Reads the raw data from the pushbutton. Note that the pushbutton logic is
 * inverted.
 * @param selectedButton number for the correct pushbutton. 1 or 2
 * @return  masked value returning value for register
 */
uint8_t pushbutton_read(uint8_t selectedButton){
    2148:	defffe04 	addi	sp,sp,-8
    214c:	df000115 	stw	fp,4(sp)
    2150:	df000104 	addi	fp,sp,4
    2154:	e13fff05 	stb	r4,-4(fp)
	return (PUSHBUTTON -> DATA) & selectedButton;
    2158:	00a02034 	movhi	r2,32896
    215c:	10883404 	addi	r2,r2,8400
    2160:	10800017 	ldw	r2,0(r2)
    2164:	1007883a 	mov	r3,r2
    2168:	e0bfff03 	ldbu	r2,-4(fp)
    216c:	1884703a 	and	r2,r3,r2
    2170:	10803fcc 	andi	r2,r2,255
}
    2174:	e037883a 	mov	sp,fp
    2178:	df000017 	ldw	fp,0(sp)
    217c:	dec00104 	addi	sp,sp,4
    2180:	f800283a 	ret

00002184 <timer_delay>:
/**
 * Delay for the time passed into the timer as a polling loop.
 * @param timeToDelay nanoseconds to delay
 * @param timer Pointer to TIMER hardware.
 */
void timer_delay(uint32_t timeToDelay, struct TIMER_HARDWARE volatile * timer){
    2184:	defffb04 	addi	sp,sp,-20
    2188:	dfc00415 	stw	ra,16(sp)
    218c:	df000315 	stw	fp,12(sp)
    2190:	df000304 	addi	fp,sp,12
    2194:	e13ffe15 	stw	r4,-8(fp)
    2198:	e17fff15 	stw	r5,-4(fp)

	//Convert from seconds to clock cycles
	timeToDelay = timeToDelay / TIME_PER_CYCLE;
    219c:	e13ffe17 	ldw	r4,-8(fp)
    21a0:	01400504 	movi	r5,20
    21a4:	00028a40 	call	28a4 <__udivsi3>
    21a8:	e0bffe15 	stw	r2,-8(fp)

	//Set initial state of the timer needs both since they are 16 bit registers
	(timer -> PERIODL) = timeToDelay;
    21ac:	e0ffff17 	ldw	r3,-4(fp)
    21b0:	e0bffe17 	ldw	r2,-8(fp)
    21b4:	18800215 	stw	r2,8(r3)
	(timer -> PERIODH) = timeToDelay >> 16;
    21b8:	e0bffe17 	ldw	r2,-8(fp)
    21bc:	1006d43a 	srli	r3,r2,16
    21c0:	e0bfff17 	ldw	r2,-4(fp)
    21c4:	10c00315 	stw	r3,12(r2)

	// Clear t0 flag to reset timer if it was set before for whatever reason
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    21c8:	e0ffff17 	ldw	r3,-4(fp)
    21cc:	00800044 	movi	r2,1
    21d0:	18800015 	stw	r2,0(r3)

	//Start timer count down by setting start bit
	uint8_t timerStatus = START_TIMER_MASK;
    21d4:	00800104 	movi	r2,4
    21d8:	e0bffd05 	stb	r2,-12(fp)
	(timer -> CTRL) = timerStatus;
    21dc:	e0fffd03 	ldbu	r3,-12(fp)
    21e0:	e0bfff17 	ldw	r2,-4(fp)
    21e4:	10c00115 	stw	r3,4(r2)

	//Loop while t0 flag is a zero
	while(((timer -> STATUS) & TIMER_STATUS_T0_MASK) == 0)
    21e8:	e0bfff17 	ldw	r2,-4(fp)
    21ec:	10800017 	ldw	r2,0(r2)
    21f0:	1080004c 	andi	r2,r2,1
    21f4:	1005003a 	cmpeq	r2,r2,zero
    21f8:	103ffb1e 	bne	r2,zero,21e8 <timer_delay+0x64>
		;

	// Clear t0 flag to reset timer
	(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    21fc:	e0ffff17 	ldw	r3,-4(fp)
    2200:	00800044 	movi	r2,1
    2204:	18800015 	stw	r2,0(r3)
}
    2208:	e037883a 	mov	sp,fp
    220c:	dfc00117 	ldw	ra,4(sp)
    2210:	df000017 	ldw	fp,0(sp)
    2214:	dec00204 	addi	sp,sp,8
    2218:	f800283a 	ret

0000221c <timer_interrupt_init>:
 * @param isInterruptable 0 is disabling interrupts, 1 is enabling interrupts
 * @param timeToDelay Time to set in timer before interrupt once started.
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_init(uint8_t isInterruptable, uint32_t timeToDelay,
		struct TIMER_HARDWARE volatile * timer){
    221c:	defffb04 	addi	sp,sp,-20
    2220:	dfc00415 	stw	ra,16(sp)
    2224:	df000315 	stw	fp,12(sp)
    2228:	df000304 	addi	fp,sp,12
    222c:	e17ffe15 	stw	r5,-8(fp)
    2230:	e1bfff15 	stw	r6,-4(fp)
    2234:	e13ffd05 	stb	r4,-12(fp)

	//check to see if enabling or disabling interrupts
	if(isInterruptable){
    2238:	e0bffd03 	ldbu	r2,-12(fp)
    223c:	1005003a 	cmpeq	r2,r2,zero
    2240:	1000251e 	bne	r2,zero,22d8 <timer_interrupt_init+0xbc>

		// set IRQ0
		if(timer == TIMER_0){
    2244:	e0ffff17 	ldw	r3,-4(fp)
    2248:	00a02034 	movhi	r2,32896
    224c:	10881004 	addi	r2,r2,8256
    2250:	1880051e 	bne	r3,r2,2268 <timer_interrupt_init+0x4c>
			// set interrupt ienable
			asm volatile(
    2254:	01c00044 	movi	r7,1
    2258:	000d30fa 	rdctl	r6,ienable
    225c:	398eb03a 	or	r7,r7,r6
    2260:	380170fa 	wrctl	ienable,r7
    2264:	00000806 	br	2288 <timer_interrupt_init+0x6c>
							::
						);

		}
		// set IRQ2
		else if (timer == TIMER_1){
    2268:	e0ffff17 	ldw	r3,-4(fp)
    226c:	00a02034 	movhi	r2,32896
    2270:	10881804 	addi	r2,r2,8288
    2274:	1880041e 	bne	r3,r2,2288 <timer_interrupt_init+0x6c>
			// set interrupt ienable
			asm volatile(
    2278:	01c00104 	movi	r7,4
    227c:	000d30fa 	rdctl	r6,ienable
    2280:	398eb03a 	or	r7,r7,r6
    2284:	380170fa 	wrctl	ienable,r7
						);
		}

		//Clear t0 flag to reset timer if it was
		// set before for whatever reason
		(timer -> STATUS) = TIMER_STATUS_T0_MASK;
    2288:	e0ffff17 	ldw	r3,-4(fp)
    228c:	00800044 	movi	r2,1
    2290:	18800015 	stw	r2,0(r3)

		//Convert from seconds to clock cycles
		timeToDelay = timeToDelay / TIME_PER_CYCLE;
    2294:	e13ffe17 	ldw	r4,-8(fp)
    2298:	01400504 	movi	r5,20
    229c:	00028a40 	call	28a4 <__udivsi3>
    22a0:	e0bffe15 	stw	r2,-8(fp)

		//Set initial state of the timer needs both since
		// they are 16 bit registers
		(timer -> PERIODL) = timeToDelay;
    22a4:	e0ffff17 	ldw	r3,-4(fp)
    22a8:	e0bffe17 	ldw	r2,-8(fp)
    22ac:	18800215 	stw	r2,8(r3)
		(timer -> PERIODH) = timeToDelay >> 16;
    22b0:	e0bffe17 	ldw	r2,-8(fp)
    22b4:	1006d43a 	srli	r3,r2,16
    22b8:	e0bfff17 	ldw	r2,-4(fp)
    22bc:	10c00315 	stw	r3,12(r2)

		// set interrupt on control register
		(timer -> CTRL) = (timer -> CTRL) | (INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    22c0:	e0bfff17 	ldw	r2,-4(fp)
    22c4:	10800117 	ldw	r2,4(r2)
    22c8:	10c000d4 	ori	r3,r2,3
    22cc:	e0bfff17 	ldw	r2,-4(fp)
    22d0:	10c00115 	stw	r3,4(r2)
    22d4:	00001506 	br	232c <timer_interrupt_init+0x110>

	} else {
		// set IRQ to off
		if(timer == TIMER_0){
    22d8:	e0ffff17 	ldw	r3,-4(fp)
    22dc:	00a02034 	movhi	r2,32896
    22e0:	10881004 	addi	r2,r2,8256
    22e4:	1880051e 	bne	r3,r2,22fc <timer_interrupt_init+0xe0>
			asm volatile(
    22e8:	01ffff84 	movi	r7,-2
    22ec:	000d30fa 	rdctl	r6,ienable
    22f0:	398e703a 	and	r7,r7,r6
    22f4:	380170fa 	wrctl	ienable,r7
    22f8:	00000806 	br	231c <timer_interrupt_init+0x100>
							"rdctl	r6, ienable\n\t"	// combine previous
							"and	r7, r7, r6\n\t"     // ienable and irq0
							"wrctl	ienable, r7"
							::
						);
		}else if(timer == TIMER_1){
    22fc:	e0ffff17 	ldw	r3,-4(fp)
    2300:	00a02034 	movhi	r2,32896
    2304:	10881804 	addi	r2,r2,8288
    2308:	1880041e 	bne	r3,r2,231c <timer_interrupt_init+0x100>
			asm volatile(
    230c:	01fffec4 	movi	r7,-5
    2310:	000d30fa 	rdctl	r6,ienable
    2314:	398e703a 	and	r7,r7,r6
    2318:	380170fa 	wrctl	ienable,r7
							::
						);
		}

		// disable interrupt
		(timer -> CTRL) = (timer -> CTRL) & !(INTERRUPT_TIMER_MASK | CONT_TIMER_MASK);
    231c:	e0bfff17 	ldw	r2,-4(fp)
    2320:	10800117 	ldw	r2,4(r2)
    2324:	e0bfff17 	ldw	r2,-4(fp)
    2328:	10000115 	stw	zero,4(r2)
	}
}
    232c:	e037883a 	mov	sp,fp
    2330:	dfc00117 	ldw	ra,4(sp)
    2334:	df000017 	ldw	fp,0(sp)
    2338:	dec00204 	addi	sp,sp,8
    233c:	f800283a 	ret

00002340 <timer_interrupt_start_stop>:
 * Sets the timer to be started or stopped for interrupt use.
 * @param isStart boolean value whether to start of stop timer
 * @param timer Pointer to Timer hardware
 */
void timer_interrupt_start_stop(uint8_t isStart,
		struct TIMER_HARDWARE volatile * timer){
    2340:	defffd04 	addi	sp,sp,-12
    2344:	df000215 	stw	fp,8(sp)
    2348:	df000204 	addi	fp,sp,8
    234c:	e17fff15 	stw	r5,-4(fp)
    2350:	e13ffe05 	stb	r4,-8(fp)
	//Start the timer
	if(isStart){
    2354:	e0bffe03 	ldbu	r2,-8(fp)
    2358:	1005003a 	cmpeq	r2,r2,zero
    235c:	1000061e 	bne	r2,zero,2378 <timer_interrupt_start_stop+0x38>
		(timer -> CTRL) = (timer -> CTRL) | START_TIMER_MASK;
    2360:	e0bfff17 	ldw	r2,-4(fp)
    2364:	10800117 	ldw	r2,4(r2)
    2368:	10c00114 	ori	r3,r2,4
    236c:	e0bfff17 	ldw	r2,-4(fp)
    2370:	10c00115 	stw	r3,4(r2)
    2374:	00000406 	br	2388 <timer_interrupt_start_stop+0x48>
	}
	//Stop the timer
	else {
		(timer -> CTRL) = (timer -> CTRL) & !START_TIMER_MASK;
    2378:	e0bfff17 	ldw	r2,-4(fp)
    237c:	10800117 	ldw	r2,4(r2)
    2380:	e0bfff17 	ldw	r2,-4(fp)
    2384:	10000115 	stw	zero,4(r2)
	}
}
    2388:	e037883a 	mov	sp,fp
    238c:	df000017 	ldw	fp,0(sp)
    2390:	dec00104 	addi	sp,sp,4
    2394:	f800283a 	ret

00002398 <timer_ISR_TIMER_0>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_0(){
    2398:	deffff04 	addi	sp,sp,-4
    239c:	df000015 	stw	fp,0(sp)
    23a0:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_0 -> STATUS) = TIMER_STATUS_T0_MASK;
    23a4:	00e02034 	movhi	r3,32896
    23a8:	18c81004 	addi	r3,r3,8256
    23ac:	00800044 	movi	r2,1
    23b0:	18800015 	stw	r2,0(r3)
}
    23b4:	e037883a 	mov	sp,fp
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00104 	addi	sp,sp,4
    23c0:	f800283a 	ret

000023c4 <timer_ISR_TIMER_1>:
/**
 * Handles the interrupt for the given timer in name. Note that this clears the
 * interrupt but does not perform a callback. Instead template this function or
 * call from actual ISR.
 */
void timer_ISR_TIMER_1(){
    23c4:	deffff04 	addi	sp,sp,-4
    23c8:	df000015 	stw	fp,0(sp)
    23cc:	d839883a 	mov	fp,sp
	//write T0 flag to clear interrupt
	(TIMER_1 -> STATUS) = TIMER_STATUS_T0_MASK;
    23d0:	00e02034 	movhi	r3,32896
    23d4:	18c81804 	addi	r3,r3,8288
    23d8:	00800044 	movi	r2,1
    23dc:	18800015 	stw	r2,0(r3)
}
    23e0:	e037883a 	mov	sp,fp
    23e4:	df000017 	ldw	fp,0(sp)
    23e8:	dec00104 	addi	sp,sp,4
    23ec:	f800283a 	ret

000023f0 <vga_clearDisplay>:
//=============================================================================

/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
    23f0:	defffe04 	addi	sp,sp,-8
    23f4:	df000115 	stw	fp,4(sp)
    23f8:	df000104 	addi	fp,sp,4
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    23fc:	e03fff45 	stb	zero,-3(fp)
    2400:	00001306 	br	2450 <vga_clearDisplay+0x60>
		for(col=0;col<VGA_COL_MAX;col++){
    2404:	e03fff05 	stb	zero,-4(fp)
    2408:	00000b06 	br	2438 <vga_clearDisplay+0x48>
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
    240c:	e0bfff43 	ldbu	r2,-3(fp)
    2410:	100491fa 	slli	r2,r2,7
    2414:	1007883a 	mov	r3,r2
    2418:	e0bfff03 	ldbu	r2,-4(fp)
    241c:	1887883a 	add	r3,r3,r2
    2420:	00a02034 	movhi	r2,32896
    2424:	1885883a 	add	r2,r3,r2
    2428:	10000005 	stb	zero,0(r2)
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
		for(col=0;col<VGA_COL_MAX;col++){
    242c:	e0bfff03 	ldbu	r2,-4(fp)
    2430:	10800044 	addi	r2,r2,1
    2434:	e0bfff05 	stb	r2,-4(fp)
    2438:	e0bfff03 	ldbu	r2,-4(fp)
    243c:	10801430 	cmpltui	r2,r2,80
    2440:	103ff21e 	bne	r2,zero,240c <vga_clearDisplay+0x1c>
/**
 * Clears the VGA device by making the screen black on all pixels.
 */
void vga_clearDisplay(){
	uint8_t row,col;
	for(row=0;row<VGA_ROW_MAX;row++){
    2444:	e0bfff43 	ldbu	r2,-3(fp)
    2448:	10800044 	addi	r2,r2,1
    244c:	e0bfff45 	stb	r2,-3(fp)
    2450:	e0bfff43 	ldbu	r2,-3(fp)
    2454:	10800f30 	cmpltui	r2,r2,60
    2458:	103fea1e 	bne	r2,zero,2404 <vga_clearDisplay+0x14>
		for(col=0;col<VGA_COL_MAX;col++){
			*(VGA_MEM_START + (row << 7) + col) = 0x00;
		}
	}
}
    245c:	e037883a 	mov	sp,fp
    2460:	df000017 	ldw	fp,0(sp)
    2464:	dec00104 	addi	sp,sp,4
    2468:	f800283a 	ret

0000246c <servo_init>:
//=============================================================================

/**
 * Sets up the PWM to move the servos to center position
 */
void servo_init(){
    246c:	defffe04 	addi	sp,sp,-8
    2470:	dfc00115 	stw	ra,4(sp)
    2474:	df000015 	stw	fp,0(sp)
    2478:	d839883a 	mov	fp,sp
	servo_pan(PAN_MAX/2);
    247c:	010015c4 	movi	r4,87
    2480:	00024a00 	call	24a0 <servo_pan>
	servo_tilt(TILT_MAX/2+5);
    2484:	01001304 	movi	r4,76
    2488:	00025100 	call	2510 <servo_tilt>
}
    248c:	e037883a 	mov	sp,fp
    2490:	dfc00117 	ldw	ra,4(sp)
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00204 	addi	sp,sp,8
    249c:	f800283a 	ret

000024a0 <servo_pan>:
 * of the camera. These values should cause a full range of travel from far
 * left to far right.
 * @param col the x tracking position
 * @return -1 if invalid input, else 0
 */
int servo_pan(int col){
    24a0:	defffc04 	addi	sp,sp,-16
    24a4:	dfc00315 	stw	ra,12(sp)
    24a8:	df000215 	stw	fp,8(sp)
    24ac:	df000204 	addi	fp,sp,8
    24b0:	e13ffe15 	stw	r4,-8(fp)
	if(col < PAN_MIN || col > PAN_MAX){
    24b4:	e0bffe17 	ldw	r2,-8(fp)
    24b8:	1004803a 	cmplt	r2,r2,zero
    24bc:	1000031e 	bne	r2,zero,24cc <servo_pan+0x2c>
    24c0:	e0bffe17 	ldw	r2,-8(fp)
    24c4:	10802c10 	cmplti	r2,r2,176
    24c8:	1000031e 	bne	r2,zero,24d8 <servo_pan+0x38>
		return -1;
    24cc:	00bfffc4 	movi	r2,-1
    24d0:	e0bfff15 	stw	r2,-4(fp)
    24d4:	00000806 	br	24f8 <servo_pan+0x58>
	}
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(col));
    24d8:	e0bffe17 	ldw	r2,-8(fp)
    24dc:	11001ae4 	muli	r4,r2,107
    24e0:	01400284 	movi	r5,10
    24e4:	00027e40 	call	27e4 <__divsi3>
    24e8:	10807f84 	addi	r2,r2,510
    24ec:	1009883a 	mov	r4,r2
    24f0:	00020500 	call	2050 <PWM_writeOCRA>
	return 0;
    24f4:	e03fff15 	stw	zero,-4(fp)
    24f8:	e0bfff17 	ldw	r2,-4(fp)
}
    24fc:	e037883a 	mov	sp,fp
    2500:	dfc00117 	ldw	ra,4(sp)
    2504:	df000017 	ldw	fp,0(sp)
    2508:	dec00204 	addi	sp,sp,8
    250c:	f800283a 	ret

00002510 <servo_tilt>:
 * the camera. These values should cause a full range of travel from top to
 * bottom.
 * @param row the y tracking position
 * @return -1 if invalid input, else 0
 */
int servo_tilt(int row){
    2510:	defffc04 	addi	sp,sp,-16
    2514:	dfc00315 	stw	ra,12(sp)
    2518:	df000215 	stw	fp,8(sp)
    251c:	df000204 	addi	fp,sp,8
    2520:	e13ffe15 	stw	r4,-8(fp)
	if(row < TILT_MIN || row > TILT_MAX){
    2524:	e0bffe17 	ldw	r2,-8(fp)
    2528:	1004803a 	cmplt	r2,r2,zero
    252c:	1000031e 	bne	r2,zero,253c <servo_tilt+0x2c>
    2530:	e0bffe17 	ldw	r2,-8(fp)
    2534:	10802410 	cmplti	r2,r2,144
    2538:	1000031e 	bne	r2,zero,2548 <servo_tilt+0x38>
		return -1;
    253c:	00bfffc4 	movi	r2,-1
    2540:	e0bfff15 	stw	r2,-4(fp)
    2544:	00000806 	br	2568 <servo_tilt+0x58>
	}
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(row));
    2548:	e0bffe17 	ldw	r2,-8(fp)
    254c:	11001164 	muli	r4,r2,69
    2550:	01400284 	movi	r5,10
    2554:	00027e40 	call	27e4 <__divsi3>
    2558:	1080fdc4 	addi	r2,r2,1015
    255c:	1009883a 	mov	r4,r2
    2560:	00020a00 	call	20a0 <PWM_writeOCRB>
	return 0;
    2564:	e03fff15 	stw	zero,-4(fp)
    2568:	e0bfff17 	ldw	r2,-4(fp)
}
    256c:	e037883a 	mov	sp,fp
    2570:	dfc00117 	ldw	ra,4(sp)
    2574:	df000017 	ldw	fp,0(sp)
    2578:	dec00204 	addi	sp,sp,8
    257c:	f800283a 	ret

00002580 <getServoX>:

/**
 * Gets the current pan location
 * @return absolute position of servo.
 */
int getServoX(){
    2580:	defffe04 	addi	sp,sp,-8
    2584:	dfc00115 	stw	ra,4(sp)
    2588:	df000015 	stw	fp,0(sp)
    258c:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_PAN_POS(PWM_readOCRA());
    2590:	00020f00 	call	20f0 <PWM_readOCRA>
    2594:	108002a4 	muli	r2,r2,10
    2598:	113b0504 	addi	r4,r2,-5100
    259c:	01401ac4 	movi	r5,107
    25a0:	00027e40 	call	27e4 <__divsi3>
}
    25a4:	e037883a 	mov	sp,fp
    25a8:	dfc00117 	ldw	ra,4(sp)
    25ac:	df000017 	ldw	fp,0(sp)
    25b0:	dec00204 	addi	sp,sp,8
    25b4:	f800283a 	ret

000025b8 <setServoX>:

/**
 * Sets the relative pan location. Will stop at limit of range.
 * @param xpos position to add to current position.
 */
void setServoX(int xpos){
    25b8:	defffb04 	addi	sp,sp,-20
    25bc:	dfc00415 	stw	ra,16(sp)
    25c0:	df000315 	stw	fp,12(sp)
    25c4:	df000304 	addi	fp,sp,12
    25c8:	e13ffe15 	stw	r4,-8(fp)
	int pos = OCR_VALUE_TO_PAN_POS(PWM_readOCRA()) + xpos;
    25cc:	00020f00 	call	20f0 <PWM_readOCRA>
    25d0:	108002a4 	muli	r2,r2,10
    25d4:	113b0504 	addi	r4,r2,-5100
    25d8:	01401ac4 	movi	r5,107
    25dc:	00027e40 	call	27e4 <__divsi3>
    25e0:	1007883a 	mov	r3,r2
    25e4:	e0bffe17 	ldw	r2,-8(fp)
    25e8:	1885883a 	add	r2,r3,r2
    25ec:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > PAN_MAX) ? (PAN_MAX) : ((pos < PAN_MIN) ? PAN_MIN : pos);
    25f0:	e0bffd17 	ldw	r2,-12(fp)
    25f4:	10802c08 	cmpgei	r2,r2,176
    25f8:	1000071e 	bne	r2,zero,2618 <setServoX+0x60>
    25fc:	e0bffd17 	ldw	r2,-12(fp)
    2600:	e0bfff15 	stw	r2,-4(fp)
    2604:	e0ffff17 	ldw	r3,-4(fp)
    2608:	1804403a 	cmpge	r2,r3,zero
    260c:	1000041e 	bne	r2,zero,2620 <setServoX+0x68>
    2610:	e03fff15 	stw	zero,-4(fp)
    2614:	00000206 	br	2620 <setServoX+0x68>
    2618:	00802bc4 	movi	r2,175
    261c:	e0bfff15 	stw	r2,-4(fp)
    2620:	e0ffff17 	ldw	r3,-4(fp)
    2624:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRA(PAN_POS_TO_OCR_VALUE(pos));
    2628:	e0bffd17 	ldw	r2,-12(fp)
    262c:	11001ae4 	muli	r4,r2,107
    2630:	01400284 	movi	r5,10
    2634:	00027e40 	call	27e4 <__divsi3>
    2638:	10807f84 	addi	r2,r2,510
    263c:	1009883a 	mov	r4,r2
    2640:	00020500 	call	2050 <PWM_writeOCRA>
}
    2644:	e037883a 	mov	sp,fp
    2648:	dfc00117 	ldw	ra,4(sp)
    264c:	df000017 	ldw	fp,0(sp)
    2650:	dec00204 	addi	sp,sp,8
    2654:	f800283a 	ret

00002658 <getServoY>:

/**
 * Gets the current tilt location.
 * @return absolute position of servo.
 */
int getServoY(){
    2658:	defffe04 	addi	sp,sp,-8
    265c:	dfc00115 	stw	ra,4(sp)
    2660:	df000015 	stw	fp,0(sp)
    2664:	d839883a 	mov	fp,sp
	return OCR_VALUE_TO_TILT_POS(PWM_readOCRB());
    2668:	000211c0 	call	211c <PWM_readOCRB>
    266c:	108002a4 	muli	r2,r2,10
    2670:	11361684 	addi	r4,r2,-10150
    2674:	01401144 	movi	r5,69
    2678:	00027e40 	call	27e4 <__divsi3>
}
    267c:	e037883a 	mov	sp,fp
    2680:	dfc00117 	ldw	ra,4(sp)
    2684:	df000017 	ldw	fp,0(sp)
    2688:	dec00204 	addi	sp,sp,8
    268c:	f800283a 	ret

00002690 <setServoY>:

/**
 * Sets the relative tilt location. Will stop at limit of range.
 * @param ypos position to add to current position.
 */
void setServoY(int ypos){
    2690:	defffb04 	addi	sp,sp,-20
    2694:	dfc00415 	stw	ra,16(sp)
    2698:	df000315 	stw	fp,12(sp)
    269c:	df000304 	addi	fp,sp,12
    26a0:	e13ffe15 	stw	r4,-8(fp)
	int pos = OCR_VALUE_TO_TILT_POS(PWM_readOCRB()) + ypos;
    26a4:	000211c0 	call	211c <PWM_readOCRB>
    26a8:	108002a4 	muli	r2,r2,10
    26ac:	11361684 	addi	r4,r2,-10150
    26b0:	01401144 	movi	r5,69
    26b4:	00027e40 	call	27e4 <__divsi3>
    26b8:	1007883a 	mov	r3,r2
    26bc:	e0bffe17 	ldw	r2,-8(fp)
    26c0:	1885883a 	add	r2,r3,r2
    26c4:	e0bffd15 	stw	r2,-12(fp)
	pos = (pos > TILT_MAX) ? (TILT_MAX) : ((pos < TILT_MIN) ? TILT_MIN : pos);
    26c8:	e0bffd17 	ldw	r2,-12(fp)
    26cc:	10802408 	cmpgei	r2,r2,144
    26d0:	1000071e 	bne	r2,zero,26f0 <setServoY+0x60>
    26d4:	e0bffd17 	ldw	r2,-12(fp)
    26d8:	e0bfff15 	stw	r2,-4(fp)
    26dc:	e0ffff17 	ldw	r3,-4(fp)
    26e0:	1804403a 	cmpge	r2,r3,zero
    26e4:	1000041e 	bne	r2,zero,26f8 <setServoY+0x68>
    26e8:	e03fff15 	stw	zero,-4(fp)
    26ec:	00000206 	br	26f8 <setServoY+0x68>
    26f0:	008023c4 	movi	r2,143
    26f4:	e0bfff15 	stw	r2,-4(fp)
    26f8:	e0ffff17 	ldw	r3,-4(fp)
    26fc:	e0fffd15 	stw	r3,-12(fp)
	PWM_writeOCRB(TILT_POS_TO_OCR_VALUE(pos));
    2700:	e0bffd17 	ldw	r2,-12(fp)
    2704:	11001164 	muli	r4,r2,69
    2708:	01400284 	movi	r5,10
    270c:	00027e40 	call	27e4 <__divsi3>
    2710:	1080fdc4 	addi	r2,r2,1015
    2714:	1009883a 	mov	r4,r2
    2718:	00020a00 	call	20a0 <PWM_writeOCRB>
}
    271c:	e037883a 	mov	sp,fp
    2720:	dfc00117 	ldw	ra,4(sp)
    2724:	df000017 	ldw	fp,0(sp)
    2728:	dec00204 	addi	sp,sp,8
    272c:	f800283a 	ret

00002730 <main>:
/**
 * main will run the serial command line input to get information from user
 * and enact the commands.
 * @return does not actually return (infinite loop)
 */
int main(){
    2730:	defffe04 	addi	sp,sp,-8
    2734:	dfc00115 	stw	ra,4(sp)
    2738:	df000015 	stw	fp,0(sp)
    273c:	d839883a 	mov	fp,sp
	//initialization
	lcd_init();
    2740:	0001d5c0 	call	1d5c <lcd_init>
	servo_init();
    2744:	000246c0 	call	246c <servo_init>
	cam_init();
    2748:	00002000 	call	200 <cam_init>
	cmd_init();
    274c:	00007fc0 	call	7fc <cmd_init>

	//run input loop from serial input to command the controller
	while(1){
		lcd_clr();
    2750:	0001cfc0 	call	1cfc <lcd_clr>
		lcd_printString("Waiting For\nUser Input");
    2754:	01000074 	movhi	r4,1
    2758:	21129e04 	addi	r4,r4,19064
    275c:	0001de00 	call	1de0 <lcd_printString>
		cmd_getCommand();
    2760:	00008240 	call	824 <cmd_getCommand>
	}
    2764:	003ffa06 	br	2750 <main+0x20>

00002768 <udivmodsi4>:
    2768:	29001b2e 	bgeu	r5,r4,27d8 <udivmodsi4+0x70>
    276c:	28001a16 	blt	r5,zero,27d8 <udivmodsi4+0x70>
    2770:	00800044 	movi	r2,1
    2774:	0007883a 	mov	r3,zero
    2778:	01c007c4 	movi	r7,31
    277c:	00000306 	br	278c <udivmodsi4+0x24>
    2780:	19c01326 	beq	r3,r7,27d0 <udivmodsi4+0x68>
    2784:	18c00044 	addi	r3,r3,1
    2788:	28000416 	blt	r5,zero,279c <udivmodsi4+0x34>
    278c:	294b883a 	add	r5,r5,r5
    2790:	1085883a 	add	r2,r2,r2
    2794:	293ffa36 	bltu	r5,r4,2780 <udivmodsi4+0x18>
    2798:	10000d26 	beq	r2,zero,27d0 <udivmodsi4+0x68>
    279c:	0007883a 	mov	r3,zero
    27a0:	21400236 	bltu	r4,r5,27ac <udivmodsi4+0x44>
    27a4:	2149c83a 	sub	r4,r4,r5
    27a8:	1886b03a 	or	r3,r3,r2
    27ac:	1004d07a 	srli	r2,r2,1
    27b0:	280ad07a 	srli	r5,r5,1
    27b4:	103ffa1e 	bne	r2,zero,27a0 <udivmodsi4+0x38>
    27b8:	30000226 	beq	r6,zero,27c4 <udivmodsi4+0x5c>
    27bc:	2005883a 	mov	r2,r4
    27c0:	f800283a 	ret
    27c4:	1809883a 	mov	r4,r3
    27c8:	2005883a 	mov	r2,r4
    27cc:	f800283a 	ret
    27d0:	0007883a 	mov	r3,zero
    27d4:	003ff806 	br	27b8 <udivmodsi4+0x50>
    27d8:	00800044 	movi	r2,1
    27dc:	0007883a 	mov	r3,zero
    27e0:	003fef06 	br	27a0 <udivmodsi4+0x38>

000027e4 <__divsi3>:
    27e4:	defffe04 	addi	sp,sp,-8
    27e8:	dc000015 	stw	r16,0(sp)
    27ec:	dfc00115 	stw	ra,4(sp)
    27f0:	0021883a 	mov	r16,zero
    27f4:	20000c16 	blt	r4,zero,2828 <__divsi3+0x44>
    27f8:	000d883a 	mov	r6,zero
    27fc:	28000e16 	blt	r5,zero,2838 <__divsi3+0x54>
    2800:	00027680 	call	2768 <udivmodsi4>
    2804:	1007883a 	mov	r3,r2
    2808:	8005003a 	cmpeq	r2,r16,zero
    280c:	1000011e 	bne	r2,zero,2814 <__divsi3+0x30>
    2810:	00c7c83a 	sub	r3,zero,r3
    2814:	1805883a 	mov	r2,r3
    2818:	dfc00117 	ldw	ra,4(sp)
    281c:	dc000017 	ldw	r16,0(sp)
    2820:	dec00204 	addi	sp,sp,8
    2824:	f800283a 	ret
    2828:	0109c83a 	sub	r4,zero,r4
    282c:	04000044 	movi	r16,1
    2830:	000d883a 	mov	r6,zero
    2834:	283ff20e 	bge	r5,zero,2800 <__divsi3+0x1c>
    2838:	014bc83a 	sub	r5,zero,r5
    283c:	8021003a 	cmpeq	r16,r16,zero
    2840:	003fef06 	br	2800 <__divsi3+0x1c>

00002844 <__modsi3>:
    2844:	deffff04 	addi	sp,sp,-4
    2848:	dfc00015 	stw	ra,0(sp)
    284c:	01800044 	movi	r6,1
    2850:	2807883a 	mov	r3,r5
    2854:	20000416 	blt	r4,zero,2868 <__modsi3+0x24>
    2858:	28000c16 	blt	r5,zero,288c <__modsi3+0x48>
    285c:	dfc00017 	ldw	ra,0(sp)
    2860:	dec00104 	addi	sp,sp,4
    2864:	00027681 	jmpi	2768 <udivmodsi4>
    2868:	0109c83a 	sub	r4,zero,r4
    286c:	28000b16 	blt	r5,zero,289c <__modsi3+0x58>
    2870:	180b883a 	mov	r5,r3
    2874:	01800044 	movi	r6,1
    2878:	00027680 	call	2768 <udivmodsi4>
    287c:	0085c83a 	sub	r2,zero,r2
    2880:	dfc00017 	ldw	ra,0(sp)
    2884:	dec00104 	addi	sp,sp,4
    2888:	f800283a 	ret
    288c:	014bc83a 	sub	r5,zero,r5
    2890:	dfc00017 	ldw	ra,0(sp)
    2894:	dec00104 	addi	sp,sp,4
    2898:	00027681 	jmpi	2768 <udivmodsi4>
    289c:	0147c83a 	sub	r3,zero,r5
    28a0:	003ff306 	br	2870 <__modsi3+0x2c>

000028a4 <__udivsi3>:
    28a4:	000d883a 	mov	r6,zero
    28a8:	00027681 	jmpi	2768 <udivmodsi4>

000028ac <__umodsi3>:
    28ac:	01800044 	movi	r6,1
    28b0:	00027681 	jmpi	2768 <udivmodsi4>

000028b4 <_fgets_r>:
    28b4:	defff804 	addi	sp,sp,-32
    28b8:	00800044 	movi	r2,1
    28bc:	dd800615 	stw	r22,24(sp)
    28c0:	dd400515 	stw	r21,20(sp)
    28c4:	dc400115 	stw	r17,4(sp)
    28c8:	dc000015 	stw	r16,0(sp)
    28cc:	dfc00715 	stw	ra,28(sp)
    28d0:	dd000415 	stw	r20,16(sp)
    28d4:	dcc00315 	stw	r19,12(sp)
    28d8:	dc800215 	stw	r18,8(sp)
    28dc:	3021883a 	mov	r16,r6
    28e0:	282d883a 	mov	r22,r5
    28e4:	3823883a 	mov	r17,r7
    28e8:	202b883a 	mov	r21,r4
    28ec:	1180410e 	bge	r2,r6,29f4 <_fgets_r+0x140>
    28f0:	20000226 	beq	r4,zero,28fc <_fgets_r+0x48>
    28f4:	20800e17 	ldw	r2,56(r4)
    28f8:	10002e26 	beq	r2,zero,29b4 <_fgets_r+0x100>
    28fc:	853fffc4 	addi	r20,r16,-1
    2900:	b027883a 	mov	r19,r22
    2904:	88800117 	ldw	r2,4(r17)
    2908:	a809883a 	mov	r4,r21
    290c:	880b883a 	mov	r5,r17
    2910:	100d883a 	mov	r6,r2
    2914:	1000031e 	bne	r2,zero,2924 <_fgets_r+0x70>
    2918:	000390c0 	call	390c <__srefill_r>
    291c:	1000341e 	bne	r2,zero,29f0 <_fgets_r+0x13c>
    2920:	89800117 	ldw	r6,4(r17)
    2924:	01400284 	movi	r5,10
    2928:	3021883a 	mov	r16,r6
    292c:	8c800017 	ldw	r18,0(r17)
    2930:	a180012e 	bgeu	r20,r6,2938 <_fgets_r+0x84>
    2934:	a021883a 	mov	r16,r20
    2938:	9009883a 	mov	r4,r18
    293c:	800d883a 	mov	r6,r16
    2940:	00035a00 	call	35a0 <memchr>
    2944:	1007883a 	mov	r3,r2
    2948:	900b883a 	mov	r5,r18
    294c:	9809883a 	mov	r4,r19
    2950:	800d883a 	mov	r6,r16
    2954:	1000191e 	bne	r2,zero,29bc <_fgets_r+0x108>
    2958:	88800117 	ldw	r2,4(r17)
    295c:	88c00017 	ldw	r3,0(r17)
    2960:	9c27883a 	add	r19,r19,r16
    2964:	1405c83a 	sub	r2,r2,r16
    2968:	1c07883a 	add	r3,r3,r16
    296c:	88c00015 	stw	r3,0(r17)
    2970:	88800115 	stw	r2,4(r17)
    2974:	00036840 	call	3684 <memcpy>
    2978:	a407c83a 	sub	r3,r20,r16
    297c:	1829883a 	mov	r20,r3
    2980:	183fe01e 	bne	r3,zero,2904 <_fgets_r+0x50>
    2984:	98000005 	stb	zero,0(r19)
    2988:	b005883a 	mov	r2,r22
    298c:	dfc00717 	ldw	ra,28(sp)
    2990:	dd800617 	ldw	r22,24(sp)
    2994:	dd400517 	ldw	r21,20(sp)
    2998:	dd000417 	ldw	r20,16(sp)
    299c:	dcc00317 	ldw	r19,12(sp)
    29a0:	dc800217 	ldw	r18,8(sp)
    29a4:	dc400117 	ldw	r17,4(sp)
    29a8:	dc000017 	ldw	r16,0(sp)
    29ac:	dec00804 	addi	sp,sp,32
    29b0:	f800283a 	ret
    29b4:	0002a880 	call	2a88 <__sinit>
    29b8:	003fd006 	br	28fc <_fgets_r+0x48>
    29bc:	88800117 	ldw	r2,4(r17)
    29c0:	18c00044 	addi	r3,r3,1
    29c4:	1ca1c83a 	sub	r16,r3,r18
    29c8:	1405c83a 	sub	r2,r2,r16
    29cc:	800d883a 	mov	r6,r16
    29d0:	88c00015 	stw	r3,0(r17)
    29d4:	88800115 	stw	r2,4(r17)
    29d8:	900b883a 	mov	r5,r18
    29dc:	9809883a 	mov	r4,r19
    29e0:	00036840 	call	3684 <memcpy>
    29e4:	9c21883a 	add	r16,r19,r16
    29e8:	80000005 	stb	zero,0(r16)
    29ec:	003fe606 	br	2988 <_fgets_r+0xd4>
    29f0:	9dbfe41e 	bne	r19,r22,2984 <_fgets_r+0xd0>
    29f4:	002d883a 	mov	r22,zero
    29f8:	003fe306 	br	2988 <_fgets_r+0xd4>

000029fc <fgets>:
    29fc:	00800074 	movhi	r2,1
    2a00:	109ae204 	addi	r2,r2,27528
    2a04:	2013883a 	mov	r9,r4
    2a08:	11000017 	ldw	r4,0(r2)
    2a0c:	2805883a 	mov	r2,r5
    2a10:	300f883a 	mov	r7,r6
    2a14:	480b883a 	mov	r5,r9
    2a18:	100d883a 	mov	r6,r2
    2a1c:	00028b41 	jmpi	28b4 <_fgets_r>

00002a20 <std>:
    2a20:	00800034 	movhi	r2,0
    2a24:	108f5104 	addi	r2,r2,15684
    2a28:	20800b15 	stw	r2,44(r4)
    2a2c:	00800034 	movhi	r2,0
    2a30:	108f8c04 	addi	r2,r2,15920
    2a34:	20800815 	stw	r2,32(r4)
    2a38:	00c00034 	movhi	r3,0
    2a3c:	18cf6d04 	addi	r3,r3,15796
    2a40:	00800034 	movhi	r2,0
    2a44:	108f5304 	addi	r2,r2,15692
    2a48:	2140030d 	sth	r5,12(r4)
    2a4c:	2180038d 	sth	r6,14(r4)
    2a50:	20c00915 	stw	r3,36(r4)
    2a54:	20800a15 	stw	r2,40(r4)
    2a58:	20000015 	stw	zero,0(r4)
    2a5c:	20000115 	stw	zero,4(r4)
    2a60:	20000215 	stw	zero,8(r4)
    2a64:	20000415 	stw	zero,16(r4)
    2a68:	20000515 	stw	zero,20(r4)
    2a6c:	20000615 	stw	zero,24(r4)
    2a70:	21000715 	stw	r4,28(r4)
    2a74:	f800283a 	ret

00002a78 <__sfp_lock_acquire>:
    2a78:	f800283a 	ret

00002a7c <__sfp_lock_release>:
    2a7c:	f800283a 	ret

00002a80 <__sinit_lock_acquire>:
    2a80:	f800283a 	ret

00002a84 <__sinit_lock_release>:
    2a84:	f800283a 	ret

00002a88 <__sinit>:
    2a88:	20800e17 	ldw	r2,56(r4)
    2a8c:	defffd04 	addi	sp,sp,-12
    2a90:	dc400115 	stw	r17,4(sp)
    2a94:	dc000015 	stw	r16,0(sp)
    2a98:	dfc00215 	stw	ra,8(sp)
    2a9c:	04400044 	movi	r17,1
    2aa0:	01400104 	movi	r5,4
    2aa4:	000d883a 	mov	r6,zero
    2aa8:	2021883a 	mov	r16,r4
    2aac:	2200bb04 	addi	r8,r4,748
    2ab0:	200f883a 	mov	r7,r4
    2ab4:	10000526 	beq	r2,zero,2acc <__sinit+0x44>
    2ab8:	dfc00217 	ldw	ra,8(sp)
    2abc:	dc400117 	ldw	r17,4(sp)
    2ac0:	dc000017 	ldw	r16,0(sp)
    2ac4:	dec00304 	addi	sp,sp,12
    2ac8:	f800283a 	ret
    2acc:	21000117 	ldw	r4,4(r4)
    2ad0:	00800034 	movhi	r2,0
    2ad4:	108adb04 	addi	r2,r2,11116
    2ad8:	00c000c4 	movi	r3,3
    2adc:	80800f15 	stw	r2,60(r16)
    2ae0:	80c0b915 	stw	r3,740(r16)
    2ae4:	8200ba15 	stw	r8,744(r16)
    2ae8:	84400e15 	stw	r17,56(r16)
    2aec:	8000b815 	stw	zero,736(r16)
    2af0:	0002a200 	call	2a20 <std>
    2af4:	81000217 	ldw	r4,8(r16)
    2af8:	880d883a 	mov	r6,r17
    2afc:	800f883a 	mov	r7,r16
    2b00:	01400284 	movi	r5,10
    2b04:	0002a200 	call	2a20 <std>
    2b08:	81000317 	ldw	r4,12(r16)
    2b0c:	800f883a 	mov	r7,r16
    2b10:	01400484 	movi	r5,18
    2b14:	01800084 	movi	r6,2
    2b18:	dfc00217 	ldw	ra,8(sp)
    2b1c:	dc400117 	ldw	r17,4(sp)
    2b20:	dc000017 	ldw	r16,0(sp)
    2b24:	dec00304 	addi	sp,sp,12
    2b28:	0002a201 	jmpi	2a20 <std>

00002b2c <__fp_lock>:
    2b2c:	0005883a 	mov	r2,zero
    2b30:	f800283a 	ret

00002b34 <__fp_unlock>:
    2b34:	0005883a 	mov	r2,zero
    2b38:	f800283a 	ret

00002b3c <__fp_unlock_all>:
    2b3c:	00800074 	movhi	r2,1
    2b40:	109ae204 	addi	r2,r2,27528
    2b44:	11000017 	ldw	r4,0(r2)
    2b48:	01400034 	movhi	r5,0
    2b4c:	294acd04 	addi	r5,r5,11060
    2b50:	0002da81 	jmpi	2da8 <_fwalk>

00002b54 <__fp_lock_all>:
    2b54:	00800074 	movhi	r2,1
    2b58:	109ae204 	addi	r2,r2,27528
    2b5c:	11000017 	ldw	r4,0(r2)
    2b60:	01400034 	movhi	r5,0
    2b64:	294acb04 	addi	r5,r5,11052
    2b68:	0002da81 	jmpi	2da8 <_fwalk>

00002b6c <_cleanup_r>:
    2b6c:	01400074 	movhi	r5,1
    2b70:	2964a104 	addi	r5,r5,-28028
    2b74:	0002da81 	jmpi	2da8 <_fwalk>

00002b78 <_cleanup>:
    2b78:	00800074 	movhi	r2,1
    2b7c:	109ae304 	addi	r2,r2,27532
    2b80:	11000017 	ldw	r4,0(r2)
    2b84:	0002b6c1 	jmpi	2b6c <_cleanup_r>

00002b88 <__sfmoreglue>:
    2b88:	defffc04 	addi	sp,sp,-16
    2b8c:	dc400115 	stw	r17,4(sp)
    2b90:	2c401724 	muli	r17,r5,92
    2b94:	dc800215 	stw	r18,8(sp)
    2b98:	2825883a 	mov	r18,r5
    2b9c:	89400304 	addi	r5,r17,12
    2ba0:	dc000015 	stw	r16,0(sp)
    2ba4:	dfc00315 	stw	ra,12(sp)
    2ba8:	0002e600 	call	2e60 <_malloc_r>
    2bac:	0021883a 	mov	r16,zero
    2bb0:	880d883a 	mov	r6,r17
    2bb4:	000b883a 	mov	r5,zero
    2bb8:	10000626 	beq	r2,zero,2bd4 <__sfmoreglue+0x4c>
    2bbc:	11000304 	addi	r4,r2,12
    2bc0:	14800115 	stw	r18,4(r2)
    2bc4:	10000015 	stw	zero,0(r2)
    2bc8:	11000215 	stw	r4,8(r2)
    2bcc:	1021883a 	mov	r16,r2
    2bd0:	00037240 	call	3724 <memset>
    2bd4:	8005883a 	mov	r2,r16
    2bd8:	dfc00317 	ldw	ra,12(sp)
    2bdc:	dc800217 	ldw	r18,8(sp)
    2be0:	dc400117 	ldw	r17,4(sp)
    2be4:	dc000017 	ldw	r16,0(sp)
    2be8:	dec00404 	addi	sp,sp,16
    2bec:	f800283a 	ret

00002bf0 <__sfp>:
    2bf0:	defffd04 	addi	sp,sp,-12
    2bf4:	00800074 	movhi	r2,1
    2bf8:	109ae304 	addi	r2,r2,27532
    2bfc:	dc000015 	stw	r16,0(sp)
    2c00:	14000017 	ldw	r16,0(r2)
    2c04:	dc400115 	stw	r17,4(sp)
    2c08:	dfc00215 	stw	ra,8(sp)
    2c0c:	80800e17 	ldw	r2,56(r16)
    2c10:	2023883a 	mov	r17,r4
    2c14:	10002626 	beq	r2,zero,2cb0 <__sfp+0xc0>
    2c18:	8400b804 	addi	r16,r16,736
    2c1c:	80800117 	ldw	r2,4(r16)
    2c20:	81000217 	ldw	r4,8(r16)
    2c24:	10ffffc4 	addi	r3,r2,-1
    2c28:	18000916 	blt	r3,zero,2c50 <__sfp+0x60>
    2c2c:	2080030f 	ldh	r2,12(r4)
    2c30:	10000b26 	beq	r2,zero,2c60 <__sfp+0x70>
    2c34:	017fffc4 	movi	r5,-1
    2c38:	00000206 	br	2c44 <__sfp+0x54>
    2c3c:	2080030f 	ldh	r2,12(r4)
    2c40:	10000726 	beq	r2,zero,2c60 <__sfp+0x70>
    2c44:	18ffffc4 	addi	r3,r3,-1
    2c48:	21001704 	addi	r4,r4,92
    2c4c:	197ffb1e 	bne	r3,r5,2c3c <__sfp+0x4c>
    2c50:	80800017 	ldw	r2,0(r16)
    2c54:	10001926 	beq	r2,zero,2cbc <__sfp+0xcc>
    2c58:	1021883a 	mov	r16,r2
    2c5c:	003fef06 	br	2c1c <__sfp+0x2c>
    2c60:	00bfffc4 	movi	r2,-1
    2c64:	00c00044 	movi	r3,1
    2c68:	2080038d 	sth	r2,14(r4)
    2c6c:	20c0030d 	sth	r3,12(r4)
    2c70:	20000015 	stw	zero,0(r4)
    2c74:	20000215 	stw	zero,8(r4)
    2c78:	20000115 	stw	zero,4(r4)
    2c7c:	20000415 	stw	zero,16(r4)
    2c80:	20000515 	stw	zero,20(r4)
    2c84:	20000615 	stw	zero,24(r4)
    2c88:	20000c15 	stw	zero,48(r4)
    2c8c:	20000d15 	stw	zero,52(r4)
    2c90:	20001115 	stw	zero,68(r4)
    2c94:	20001215 	stw	zero,72(r4)
    2c98:	2005883a 	mov	r2,r4
    2c9c:	dfc00217 	ldw	ra,8(sp)
    2ca0:	dc400117 	ldw	r17,4(sp)
    2ca4:	dc000017 	ldw	r16,0(sp)
    2ca8:	dec00304 	addi	sp,sp,12
    2cac:	f800283a 	ret
    2cb0:	8009883a 	mov	r4,r16
    2cb4:	0002a880 	call	2a88 <__sinit>
    2cb8:	003fd706 	br	2c18 <__sfp+0x28>
    2cbc:	8809883a 	mov	r4,r17
    2cc0:	01400104 	movi	r5,4
    2cc4:	0002b880 	call	2b88 <__sfmoreglue>
    2cc8:	80800015 	stw	r2,0(r16)
    2ccc:	103fe21e 	bne	r2,zero,2c58 <__sfp+0x68>
    2cd0:	00800304 	movi	r2,12
    2cd4:	0009883a 	mov	r4,zero
    2cd8:	88800015 	stw	r2,0(r17)
    2cdc:	003fee06 	br	2c98 <__sfp+0xa8>

00002ce0 <_fwalk_reent>:
    2ce0:	defff704 	addi	sp,sp,-36
    2ce4:	dcc00315 	stw	r19,12(sp)
    2ce8:	24c0b804 	addi	r19,r4,736
    2cec:	dd800615 	stw	r22,24(sp)
    2cf0:	dd400515 	stw	r21,20(sp)
    2cf4:	dfc00815 	stw	ra,32(sp)
    2cf8:	ddc00715 	stw	r23,28(sp)
    2cfc:	dd000415 	stw	r20,16(sp)
    2d00:	dc800215 	stw	r18,8(sp)
    2d04:	dc400115 	stw	r17,4(sp)
    2d08:	dc000015 	stw	r16,0(sp)
    2d0c:	202b883a 	mov	r21,r4
    2d10:	282d883a 	mov	r22,r5
    2d14:	0002a780 	call	2a78 <__sfp_lock_acquire>
    2d18:	98002126 	beq	r19,zero,2da0 <_fwalk_reent+0xc0>
    2d1c:	002f883a 	mov	r23,zero
    2d20:	9c800117 	ldw	r18,4(r19)
    2d24:	9c000217 	ldw	r16,8(r19)
    2d28:	90bfffc4 	addi	r2,r18,-1
    2d2c:	10000d16 	blt	r2,zero,2d64 <_fwalk_reent+0x84>
    2d30:	0023883a 	mov	r17,zero
    2d34:	053fffc4 	movi	r20,-1
    2d38:	8080030f 	ldh	r2,12(r16)
    2d3c:	8c400044 	addi	r17,r17,1
    2d40:	10000626 	beq	r2,zero,2d5c <_fwalk_reent+0x7c>
    2d44:	8080038f 	ldh	r2,14(r16)
    2d48:	800b883a 	mov	r5,r16
    2d4c:	a809883a 	mov	r4,r21
    2d50:	15000226 	beq	r2,r20,2d5c <_fwalk_reent+0x7c>
    2d54:	b03ee83a 	callr	r22
    2d58:	b8aeb03a 	or	r23,r23,r2
    2d5c:	84001704 	addi	r16,r16,92
    2d60:	947ff51e 	bne	r18,r17,2d38 <_fwalk_reent+0x58>
    2d64:	9cc00017 	ldw	r19,0(r19)
    2d68:	983fed1e 	bne	r19,zero,2d20 <_fwalk_reent+0x40>
    2d6c:	0002a7c0 	call	2a7c <__sfp_lock_release>
    2d70:	b805883a 	mov	r2,r23
    2d74:	dfc00817 	ldw	ra,32(sp)
    2d78:	ddc00717 	ldw	r23,28(sp)
    2d7c:	dd800617 	ldw	r22,24(sp)
    2d80:	dd400517 	ldw	r21,20(sp)
    2d84:	dd000417 	ldw	r20,16(sp)
    2d88:	dcc00317 	ldw	r19,12(sp)
    2d8c:	dc800217 	ldw	r18,8(sp)
    2d90:	dc400117 	ldw	r17,4(sp)
    2d94:	dc000017 	ldw	r16,0(sp)
    2d98:	dec00904 	addi	sp,sp,36
    2d9c:	f800283a 	ret
    2da0:	002f883a 	mov	r23,zero
    2da4:	003ff106 	br	2d6c <_fwalk_reent+0x8c>

00002da8 <_fwalk>:
    2da8:	defff804 	addi	sp,sp,-32
    2dac:	dcc00315 	stw	r19,12(sp)
    2db0:	24c0b804 	addi	r19,r4,736
    2db4:	dd400515 	stw	r21,20(sp)
    2db8:	dfc00715 	stw	ra,28(sp)
    2dbc:	dd800615 	stw	r22,24(sp)
    2dc0:	dd000415 	stw	r20,16(sp)
    2dc4:	dc800215 	stw	r18,8(sp)
    2dc8:	dc400115 	stw	r17,4(sp)
    2dcc:	dc000015 	stw	r16,0(sp)
    2dd0:	282b883a 	mov	r21,r5
    2dd4:	0002a780 	call	2a78 <__sfp_lock_acquire>
    2dd8:	98001f26 	beq	r19,zero,2e58 <_fwalk+0xb0>
    2ddc:	002d883a 	mov	r22,zero
    2de0:	9c800117 	ldw	r18,4(r19)
    2de4:	9c000217 	ldw	r16,8(r19)
    2de8:	90bfffc4 	addi	r2,r18,-1
    2dec:	10000c16 	blt	r2,zero,2e20 <_fwalk+0x78>
    2df0:	0023883a 	mov	r17,zero
    2df4:	053fffc4 	movi	r20,-1
    2df8:	8080030f 	ldh	r2,12(r16)
    2dfc:	8c400044 	addi	r17,r17,1
    2e00:	10000526 	beq	r2,zero,2e18 <_fwalk+0x70>
    2e04:	8080038f 	ldh	r2,14(r16)
    2e08:	8009883a 	mov	r4,r16
    2e0c:	15000226 	beq	r2,r20,2e18 <_fwalk+0x70>
    2e10:	a83ee83a 	callr	r21
    2e14:	b0acb03a 	or	r22,r22,r2
    2e18:	84001704 	addi	r16,r16,92
    2e1c:	947ff61e 	bne	r18,r17,2df8 <_fwalk+0x50>
    2e20:	9cc00017 	ldw	r19,0(r19)
    2e24:	983fee1e 	bne	r19,zero,2de0 <_fwalk+0x38>
    2e28:	0002a7c0 	call	2a7c <__sfp_lock_release>
    2e2c:	b005883a 	mov	r2,r22
    2e30:	dfc00717 	ldw	ra,28(sp)
    2e34:	dd800617 	ldw	r22,24(sp)
    2e38:	dd400517 	ldw	r21,20(sp)
    2e3c:	dd000417 	ldw	r20,16(sp)
    2e40:	dcc00317 	ldw	r19,12(sp)
    2e44:	dc800217 	ldw	r18,8(sp)
    2e48:	dc400117 	ldw	r17,4(sp)
    2e4c:	dc000017 	ldw	r16,0(sp)
    2e50:	dec00804 	addi	sp,sp,32
    2e54:	f800283a 	ret
    2e58:	002d883a 	mov	r22,zero
    2e5c:	003ff206 	br	2e28 <_fwalk+0x80>

00002e60 <_malloc_r>:
    2e60:	defff604 	addi	sp,sp,-40
    2e64:	28c002c4 	addi	r3,r5,11
    2e68:	00800584 	movi	r2,22
    2e6c:	dc800215 	stw	r18,8(sp)
    2e70:	dfc00915 	stw	ra,36(sp)
    2e74:	df000815 	stw	fp,32(sp)
    2e78:	ddc00715 	stw	r23,28(sp)
    2e7c:	dd800615 	stw	r22,24(sp)
    2e80:	dd400515 	stw	r21,20(sp)
    2e84:	dd000415 	stw	r20,16(sp)
    2e88:	dcc00315 	stw	r19,12(sp)
    2e8c:	dc400115 	stw	r17,4(sp)
    2e90:	dc000015 	stw	r16,0(sp)
    2e94:	2025883a 	mov	r18,r4
    2e98:	10c01236 	bltu	r2,r3,2ee4 <_malloc_r+0x84>
    2e9c:	04400404 	movi	r17,16
    2ea0:	8940142e 	bgeu	r17,r5,2ef4 <_malloc_r+0x94>
    2ea4:	00800304 	movi	r2,12
    2ea8:	0007883a 	mov	r3,zero
    2eac:	90800015 	stw	r2,0(r18)
    2eb0:	1805883a 	mov	r2,r3
    2eb4:	dfc00917 	ldw	ra,36(sp)
    2eb8:	df000817 	ldw	fp,32(sp)
    2ebc:	ddc00717 	ldw	r23,28(sp)
    2ec0:	dd800617 	ldw	r22,24(sp)
    2ec4:	dd400517 	ldw	r21,20(sp)
    2ec8:	dd000417 	ldw	r20,16(sp)
    2ecc:	dcc00317 	ldw	r19,12(sp)
    2ed0:	dc800217 	ldw	r18,8(sp)
    2ed4:	dc400117 	ldw	r17,4(sp)
    2ed8:	dc000017 	ldw	r16,0(sp)
    2edc:	dec00a04 	addi	sp,sp,40
    2ee0:	f800283a 	ret
    2ee4:	00bffe04 	movi	r2,-8
    2ee8:	18a2703a 	and	r17,r3,r2
    2eec:	883fed16 	blt	r17,zero,2ea4 <_malloc_r+0x44>
    2ef0:	897fec36 	bltu	r17,r5,2ea4 <_malloc_r+0x44>
    2ef4:	9009883a 	mov	r4,r18
    2ef8:	0011fdc0 	call	11fdc <__malloc_lock>
    2efc:	00807dc4 	movi	r2,503
    2f00:	14402b2e 	bgeu	r2,r17,2fb0 <_malloc_r+0x150>
    2f04:	8806d27a 	srli	r3,r17,9
    2f08:	18003f1e 	bne	r3,zero,3008 <_malloc_r+0x1a8>
    2f0c:	880cd0fa 	srli	r6,r17,3
    2f10:	300490fa 	slli	r2,r6,3
    2f14:	02c00074 	movhi	r11,1
    2f18:	5ad55004 	addi	r11,r11,21824
    2f1c:	12cb883a 	add	r5,r2,r11
    2f20:	2c000317 	ldw	r16,12(r5)
    2f24:	580f883a 	mov	r7,r11
    2f28:	2c00041e 	bne	r5,r16,2f3c <_malloc_r+0xdc>
    2f2c:	00000a06 	br	2f58 <_malloc_r+0xf8>
    2f30:	1800860e 	bge	r3,zero,314c <_malloc_r+0x2ec>
    2f34:	84000317 	ldw	r16,12(r16)
    2f38:	2c000726 	beq	r5,r16,2f58 <_malloc_r+0xf8>
    2f3c:	80800117 	ldw	r2,4(r16)
    2f40:	00ffff04 	movi	r3,-4
    2f44:	10c8703a 	and	r4,r2,r3
    2f48:	2447c83a 	sub	r3,r4,r17
    2f4c:	008003c4 	movi	r2,15
    2f50:	10fff70e 	bge	r2,r3,2f30 <_malloc_r+0xd0>
    2f54:	31bfffc4 	addi	r6,r6,-1
    2f58:	32400044 	addi	r9,r6,1
    2f5c:	02800074 	movhi	r10,1
    2f60:	52955204 	addi	r10,r10,21832
    2f64:	54000217 	ldw	r16,8(r10)
    2f68:	8280a026 	beq	r16,r10,31ec <_malloc_r+0x38c>
    2f6c:	80800117 	ldw	r2,4(r16)
    2f70:	00ffff04 	movi	r3,-4
    2f74:	10ca703a 	and	r5,r2,r3
    2f78:	2c4dc83a 	sub	r6,r5,r17
    2f7c:	008003c4 	movi	r2,15
    2f80:	11808316 	blt	r2,r6,3190 <_malloc_r+0x330>
    2f84:	52800315 	stw	r10,12(r10)
    2f88:	52800215 	stw	r10,8(r10)
    2f8c:	30002916 	blt	r6,zero,3034 <_malloc_r+0x1d4>
    2f90:	8147883a 	add	r3,r16,r5
    2f94:	18800117 	ldw	r2,4(r3)
    2f98:	9009883a 	mov	r4,r18
    2f9c:	10800054 	ori	r2,r2,1
    2fa0:	18800115 	stw	r2,4(r3)
    2fa4:	0011ffc0 	call	11ffc <__malloc_unlock>
    2fa8:	80c00204 	addi	r3,r16,8
    2fac:	003fc006 	br	2eb0 <_malloc_r+0x50>
    2fb0:	02c00074 	movhi	r11,1
    2fb4:	5ad55004 	addi	r11,r11,21824
    2fb8:	8ac5883a 	add	r2,r17,r11
    2fbc:	14000317 	ldw	r16,12(r2)
    2fc0:	580f883a 	mov	r7,r11
    2fc4:	8806d0fa 	srli	r3,r17,3
    2fc8:	14006c26 	beq	r2,r16,317c <_malloc_r+0x31c>
    2fcc:	80c00117 	ldw	r3,4(r16)
    2fd0:	00bfff04 	movi	r2,-4
    2fd4:	81800317 	ldw	r6,12(r16)
    2fd8:	1886703a 	and	r3,r3,r2
    2fdc:	80c7883a 	add	r3,r16,r3
    2fe0:	18800117 	ldw	r2,4(r3)
    2fe4:	81400217 	ldw	r5,8(r16)
    2fe8:	9009883a 	mov	r4,r18
    2fec:	10800054 	ori	r2,r2,1
    2ff0:	18800115 	stw	r2,4(r3)
    2ff4:	31400215 	stw	r5,8(r6)
    2ff8:	29800315 	stw	r6,12(r5)
    2ffc:	0011ffc0 	call	11ffc <__malloc_unlock>
    3000:	80c00204 	addi	r3,r16,8
    3004:	003faa06 	br	2eb0 <_malloc_r+0x50>
    3008:	00800104 	movi	r2,4
    300c:	10c0052e 	bgeu	r2,r3,3024 <_malloc_r+0x1c4>
    3010:	00800504 	movi	r2,20
    3014:	10c07836 	bltu	r2,r3,31f8 <_malloc_r+0x398>
    3018:	198016c4 	addi	r6,r3,91
    301c:	300490fa 	slli	r2,r6,3
    3020:	003fbc06 	br	2f14 <_malloc_r+0xb4>
    3024:	8804d1ba 	srli	r2,r17,6
    3028:	11800e04 	addi	r6,r2,56
    302c:	300490fa 	slli	r2,r6,3
    3030:	003fb806 	br	2f14 <_malloc_r+0xb4>
    3034:	00807fc4 	movi	r2,511
    3038:	1140bb36 	bltu	r2,r5,3328 <_malloc_r+0x4c8>
    303c:	2806d0fa 	srli	r3,r5,3
    3040:	573ffe04 	addi	fp,r10,-8
    3044:	00800044 	movi	r2,1
    3048:	180890fa 	slli	r4,r3,3
    304c:	1807d0ba 	srai	r3,r3,2
    3050:	e1c00117 	ldw	r7,4(fp)
    3054:	5909883a 	add	r4,r11,r4
    3058:	21400217 	ldw	r5,8(r4)
    305c:	10c4983a 	sll	r2,r2,r3
    3060:	81000315 	stw	r4,12(r16)
    3064:	81400215 	stw	r5,8(r16)
    3068:	388eb03a 	or	r7,r7,r2
    306c:	2c000315 	stw	r16,12(r5)
    3070:	24000215 	stw	r16,8(r4)
    3074:	e1c00115 	stw	r7,4(fp)
    3078:	4807883a 	mov	r3,r9
    307c:	4800cd16 	blt	r9,zero,33b4 <_malloc_r+0x554>
    3080:	1807d0ba 	srai	r3,r3,2
    3084:	00800044 	movi	r2,1
    3088:	10c8983a 	sll	r4,r2,r3
    308c:	39004436 	bltu	r7,r4,31a0 <_malloc_r+0x340>
    3090:	21c4703a 	and	r2,r4,r7
    3094:	10000a1e 	bne	r2,zero,30c0 <_malloc_r+0x260>
    3098:	2109883a 	add	r4,r4,r4
    309c:	00bfff04 	movi	r2,-4
    30a0:	4884703a 	and	r2,r9,r2
    30a4:	3906703a 	and	r3,r7,r4
    30a8:	12400104 	addi	r9,r2,4
    30ac:	1800041e 	bne	r3,zero,30c0 <_malloc_r+0x260>
    30b0:	2109883a 	add	r4,r4,r4
    30b4:	3904703a 	and	r2,r7,r4
    30b8:	4a400104 	addi	r9,r9,4
    30bc:	103ffc26 	beq	r2,zero,30b0 <_malloc_r+0x250>
    30c0:	480490fa 	slli	r2,r9,3
    30c4:	4819883a 	mov	r12,r9
    30c8:	023fff04 	movi	r8,-4
    30cc:	589b883a 	add	r13,r11,r2
    30d0:	6807883a 	mov	r3,r13
    30d4:	014003c4 	movi	r5,15
    30d8:	1c000317 	ldw	r16,12(r3)
    30dc:	1c00041e 	bne	r3,r16,30f0 <_malloc_r+0x290>
    30e0:	0000a706 	br	3380 <_malloc_r+0x520>
    30e4:	3000ab0e 	bge	r6,zero,3394 <_malloc_r+0x534>
    30e8:	84000317 	ldw	r16,12(r16)
    30ec:	1c00a426 	beq	r3,r16,3380 <_malloc_r+0x520>
    30f0:	80800117 	ldw	r2,4(r16)
    30f4:	1204703a 	and	r2,r2,r8
    30f8:	144dc83a 	sub	r6,r2,r17
    30fc:	29bff90e 	bge	r5,r6,30e4 <_malloc_r+0x284>
    3100:	81000317 	ldw	r4,12(r16)
    3104:	80c00217 	ldw	r3,8(r16)
    3108:	89400054 	ori	r5,r17,1
    310c:	8445883a 	add	r2,r16,r17
    3110:	20c00215 	stw	r3,8(r4)
    3114:	19000315 	stw	r4,12(r3)
    3118:	81400115 	stw	r5,4(r16)
    311c:	1187883a 	add	r3,r2,r6
    3120:	31000054 	ori	r4,r6,1
    3124:	50800315 	stw	r2,12(r10)
    3128:	50800215 	stw	r2,8(r10)
    312c:	19800015 	stw	r6,0(r3)
    3130:	11000115 	stw	r4,4(r2)
    3134:	12800215 	stw	r10,8(r2)
    3138:	12800315 	stw	r10,12(r2)
    313c:	9009883a 	mov	r4,r18
    3140:	0011ffc0 	call	11ffc <__malloc_unlock>
    3144:	80c00204 	addi	r3,r16,8
    3148:	003f5906 	br	2eb0 <_malloc_r+0x50>
    314c:	8109883a 	add	r4,r16,r4
    3150:	20800117 	ldw	r2,4(r4)
    3154:	80c00217 	ldw	r3,8(r16)
    3158:	81400317 	ldw	r5,12(r16)
    315c:	10800054 	ori	r2,r2,1
    3160:	20800115 	stw	r2,4(r4)
    3164:	28c00215 	stw	r3,8(r5)
    3168:	19400315 	stw	r5,12(r3)
    316c:	9009883a 	mov	r4,r18
    3170:	0011ffc0 	call	11ffc <__malloc_unlock>
    3174:	80c00204 	addi	r3,r16,8
    3178:	003f4d06 	br	2eb0 <_malloc_r+0x50>
    317c:	80800204 	addi	r2,r16,8
    3180:	14000317 	ldw	r16,12(r2)
    3184:	143f911e 	bne	r2,r16,2fcc <_malloc_r+0x16c>
    3188:	1a400084 	addi	r9,r3,2
    318c:	003f7306 	br	2f5c <_malloc_r+0xfc>
    3190:	88c00054 	ori	r3,r17,1
    3194:	8445883a 	add	r2,r16,r17
    3198:	80c00115 	stw	r3,4(r16)
    319c:	003fdf06 	br	311c <_malloc_r+0x2bc>
    31a0:	e4000217 	ldw	r16,8(fp)
    31a4:	00bfff04 	movi	r2,-4
    31a8:	80c00117 	ldw	r3,4(r16)
    31ac:	802d883a 	mov	r22,r16
    31b0:	18aa703a 	and	r21,r3,r2
    31b4:	ac401636 	bltu	r21,r17,3210 <_malloc_r+0x3b0>
    31b8:	ac49c83a 	sub	r4,r21,r17
    31bc:	008003c4 	movi	r2,15
    31c0:	1100130e 	bge	r2,r4,3210 <_malloc_r+0x3b0>
    31c4:	88800054 	ori	r2,r17,1
    31c8:	8447883a 	add	r3,r16,r17
    31cc:	80800115 	stw	r2,4(r16)
    31d0:	20800054 	ori	r2,r4,1
    31d4:	18800115 	stw	r2,4(r3)
    31d8:	e0c00215 	stw	r3,8(fp)
    31dc:	9009883a 	mov	r4,r18
    31e0:	0011ffc0 	call	11ffc <__malloc_unlock>
    31e4:	80c00204 	addi	r3,r16,8
    31e8:	003f3106 	br	2eb0 <_malloc_r+0x50>
    31ec:	39c00117 	ldw	r7,4(r7)
    31f0:	573ffe04 	addi	fp,r10,-8
    31f4:	003fa006 	br	3078 <_malloc_r+0x218>
    31f8:	00801504 	movi	r2,84
    31fc:	10c06736 	bltu	r2,r3,339c <_malloc_r+0x53c>
    3200:	8804d33a 	srli	r2,r17,12
    3204:	11801b84 	addi	r6,r2,110
    3208:	300490fa 	slli	r2,r6,3
    320c:	003f4106 	br	2f14 <_malloc_r+0xb4>
    3210:	d0a6da17 	ldw	r2,-25752(gp)
    3214:	d0e00417 	ldw	r3,-32752(gp)
    3218:	053fffc4 	movi	r20,-1
    321c:	10800404 	addi	r2,r2,16
    3220:	88a7883a 	add	r19,r17,r2
    3224:	1d000326 	beq	r3,r20,3234 <_malloc_r+0x3d4>
    3228:	98c3ffc4 	addi	r3,r19,4095
    322c:	00bc0004 	movi	r2,-4096
    3230:	18a6703a 	and	r19,r3,r2
    3234:	9009883a 	mov	r4,r18
    3238:	980b883a 	mov	r5,r19
    323c:	0003aec0 	call	3aec <_sbrk_r>
    3240:	1009883a 	mov	r4,r2
    3244:	15000426 	beq	r2,r20,3258 <_malloc_r+0x3f8>
    3248:	854b883a 	add	r5,r16,r21
    324c:	1029883a 	mov	r20,r2
    3250:	11405a2e 	bgeu	r2,r5,33bc <_malloc_r+0x55c>
    3254:	87000c26 	beq	r16,fp,3288 <_malloc_r+0x428>
    3258:	e4000217 	ldw	r16,8(fp)
    325c:	80c00117 	ldw	r3,4(r16)
    3260:	00bfff04 	movi	r2,-4
    3264:	1884703a 	and	r2,r3,r2
    3268:	14400336 	bltu	r2,r17,3278 <_malloc_r+0x418>
    326c:	1449c83a 	sub	r4,r2,r17
    3270:	008003c4 	movi	r2,15
    3274:	113fd316 	blt	r2,r4,31c4 <_malloc_r+0x364>
    3278:	9009883a 	mov	r4,r18
    327c:	0011ffc0 	call	11ffc <__malloc_unlock>
    3280:	0007883a 	mov	r3,zero
    3284:	003f0a06 	br	2eb0 <_malloc_r+0x50>
    3288:	05c000b4 	movhi	r23,2
    328c:	bde1f904 	addi	r23,r23,-30748
    3290:	b8800017 	ldw	r2,0(r23)
    3294:	988d883a 	add	r6,r19,r2
    3298:	b9800015 	stw	r6,0(r23)
    329c:	d0e00417 	ldw	r3,-32752(gp)
    32a0:	00bfffc4 	movi	r2,-1
    32a4:	18808e26 	beq	r3,r2,34e0 <_malloc_r+0x680>
    32a8:	2145c83a 	sub	r2,r4,r5
    32ac:	3085883a 	add	r2,r6,r2
    32b0:	b8800015 	stw	r2,0(r23)
    32b4:	20c001cc 	andi	r3,r4,7
    32b8:	18005f1e 	bne	r3,zero,3438 <_malloc_r+0x5d8>
    32bc:	000b883a 	mov	r5,zero
    32c0:	a4c5883a 	add	r2,r20,r19
    32c4:	1083ffcc 	andi	r2,r2,4095
    32c8:	00c40004 	movi	r3,4096
    32cc:	1887c83a 	sub	r3,r3,r2
    32d0:	28e7883a 	add	r19,r5,r3
    32d4:	9009883a 	mov	r4,r18
    32d8:	980b883a 	mov	r5,r19
    32dc:	0003aec0 	call	3aec <_sbrk_r>
    32e0:	1007883a 	mov	r3,r2
    32e4:	00bfffc4 	movi	r2,-1
    32e8:	18807a26 	beq	r3,r2,34d4 <_malloc_r+0x674>
    32ec:	1d05c83a 	sub	r2,r3,r20
    32f0:	9885883a 	add	r2,r19,r2
    32f4:	10c00054 	ori	r3,r2,1
    32f8:	b8800017 	ldw	r2,0(r23)
    32fc:	a021883a 	mov	r16,r20
    3300:	a0c00115 	stw	r3,4(r20)
    3304:	9885883a 	add	r2,r19,r2
    3308:	b8800015 	stw	r2,0(r23)
    330c:	e5000215 	stw	r20,8(fp)
    3310:	b7003626 	beq	r22,fp,33ec <_malloc_r+0x58c>
    3314:	018003c4 	movi	r6,15
    3318:	35404b36 	bltu	r6,r21,3448 <_malloc_r+0x5e8>
    331c:	00800044 	movi	r2,1
    3320:	a0800115 	stw	r2,4(r20)
    3324:	003fcd06 	br	325c <_malloc_r+0x3fc>
    3328:	2808d27a 	srli	r4,r5,9
    332c:	2000371e 	bne	r4,zero,340c <_malloc_r+0x5ac>
    3330:	2808d0fa 	srli	r4,r5,3
    3334:	200690fa 	slli	r3,r4,3
    3338:	1ad1883a 	add	r8,r3,r11
    333c:	41800217 	ldw	r6,8(r8)
    3340:	41805b26 	beq	r8,r6,34b0 <_malloc_r+0x650>
    3344:	30800117 	ldw	r2,4(r6)
    3348:	00ffff04 	movi	r3,-4
    334c:	10c4703a 	and	r2,r2,r3
    3350:	2880022e 	bgeu	r5,r2,335c <_malloc_r+0x4fc>
    3354:	31800217 	ldw	r6,8(r6)
    3358:	41bffa1e 	bne	r8,r6,3344 <_malloc_r+0x4e4>
    335c:	32000317 	ldw	r8,12(r6)
    3360:	39c00117 	ldw	r7,4(r7)
    3364:	82000315 	stw	r8,12(r16)
    3368:	81800215 	stw	r6,8(r16)
    336c:	07000074 	movhi	fp,1
    3370:	e7155004 	addi	fp,fp,21824
    3374:	34000315 	stw	r16,12(r6)
    3378:	44000215 	stw	r16,8(r8)
    337c:	003f3e06 	br	3078 <_malloc_r+0x218>
    3380:	63000044 	addi	r12,r12,1
    3384:	608000cc 	andi	r2,r12,3
    3388:	10005d26 	beq	r2,zero,3500 <_malloc_r+0x6a0>
    338c:	18c00204 	addi	r3,r3,8
    3390:	003f5106 	br	30d8 <_malloc_r+0x278>
    3394:	8089883a 	add	r4,r16,r2
    3398:	003f6d06 	br	3150 <_malloc_r+0x2f0>
    339c:	00805504 	movi	r2,340
    33a0:	10c02036 	bltu	r2,r3,3424 <_malloc_r+0x5c4>
    33a4:	8804d3fa 	srli	r2,r17,15
    33a8:	11801dc4 	addi	r6,r2,119
    33ac:	300490fa 	slli	r2,r6,3
    33b0:	003ed806 	br	2f14 <_malloc_r+0xb4>
    33b4:	48c000c4 	addi	r3,r9,3
    33b8:	003f3106 	br	3080 <_malloc_r+0x220>
    33bc:	05c000b4 	movhi	r23,2
    33c0:	bde1f904 	addi	r23,r23,-30748
    33c4:	b8800017 	ldw	r2,0(r23)
    33c8:	988d883a 	add	r6,r19,r2
    33cc:	b9800015 	stw	r6,0(r23)
    33d0:	293fb21e 	bne	r5,r4,329c <_malloc_r+0x43c>
    33d4:	2083ffcc 	andi	r2,r4,4095
    33d8:	103fb01e 	bne	r2,zero,329c <_malloc_r+0x43c>
    33dc:	e4000217 	ldw	r16,8(fp)
    33e0:	9d45883a 	add	r2,r19,r21
    33e4:	10800054 	ori	r2,r2,1
    33e8:	80800115 	stw	r2,4(r16)
    33ec:	b8c00017 	ldw	r3,0(r23)
    33f0:	d0a6db17 	ldw	r2,-25748(gp)
    33f4:	10c0012e 	bgeu	r2,r3,33fc <_malloc_r+0x59c>
    33f8:	d0e6db15 	stw	r3,-25748(gp)
    33fc:	d0a6dc17 	ldw	r2,-25744(gp)
    3400:	10ff962e 	bgeu	r2,r3,325c <_malloc_r+0x3fc>
    3404:	d0e6dc15 	stw	r3,-25744(gp)
    3408:	003f9406 	br	325c <_malloc_r+0x3fc>
    340c:	00800104 	movi	r2,4
    3410:	11001e36 	bltu	r2,r4,348c <_malloc_r+0x62c>
    3414:	2804d1ba 	srli	r2,r5,6
    3418:	11000e04 	addi	r4,r2,56
    341c:	200690fa 	slli	r3,r4,3
    3420:	003fc506 	br	3338 <_malloc_r+0x4d8>
    3424:	00815504 	movi	r2,1364
    3428:	10c01d2e 	bgeu	r2,r3,34a0 <_malloc_r+0x640>
    342c:	01801f84 	movi	r6,126
    3430:	0080fc04 	movi	r2,1008
    3434:	003eb706 	br	2f14 <_malloc_r+0xb4>
    3438:	00800204 	movi	r2,8
    343c:	10cbc83a 	sub	r5,r2,r3
    3440:	2169883a 	add	r20,r4,r5
    3444:	003f9e06 	br	32c0 <_malloc_r+0x460>
    3448:	00bffe04 	movi	r2,-8
    344c:	a93ffd04 	addi	r4,r21,-12
    3450:	2088703a 	and	r4,r4,r2
    3454:	b10b883a 	add	r5,r22,r4
    3458:	00c00144 	movi	r3,5
    345c:	28c00215 	stw	r3,8(r5)
    3460:	28c00115 	stw	r3,4(r5)
    3464:	b0800117 	ldw	r2,4(r22)
    3468:	1080004c 	andi	r2,r2,1
    346c:	2084b03a 	or	r2,r4,r2
    3470:	b0800115 	stw	r2,4(r22)
    3474:	313fdd2e 	bgeu	r6,r4,33ec <_malloc_r+0x58c>
    3478:	b1400204 	addi	r5,r22,8
    347c:	9009883a 	mov	r4,r18
    3480:	00098300 	call	9830 <_free_r>
    3484:	e4000217 	ldw	r16,8(fp)
    3488:	003fd806 	br	33ec <_malloc_r+0x58c>
    348c:	00800504 	movi	r2,20
    3490:	11001536 	bltu	r2,r4,34e8 <_malloc_r+0x688>
    3494:	210016c4 	addi	r4,r4,91
    3498:	200690fa 	slli	r3,r4,3
    349c:	003fa606 	br	3338 <_malloc_r+0x4d8>
    34a0:	8804d4ba 	srli	r2,r17,18
    34a4:	11801f04 	addi	r6,r2,124
    34a8:	300490fa 	slli	r2,r6,3
    34ac:	003e9906 	br	2f14 <_malloc_r+0xb4>
    34b0:	2009d0ba 	srai	r4,r4,2
    34b4:	01400074 	movhi	r5,1
    34b8:	29555004 	addi	r5,r5,21824
    34bc:	00c00044 	movi	r3,1
    34c0:	28800117 	ldw	r2,4(r5)
    34c4:	1906983a 	sll	r3,r3,r4
    34c8:	10c4b03a 	or	r2,r2,r3
    34cc:	28800115 	stw	r2,4(r5)
    34d0:	003fa306 	br	3360 <_malloc_r+0x500>
    34d4:	0027883a 	mov	r19,zero
    34d8:	00c00044 	movi	r3,1
    34dc:	003f8606 	br	32f8 <_malloc_r+0x498>
    34e0:	d1200415 	stw	r4,-32752(gp)
    34e4:	003f7306 	br	32b4 <_malloc_r+0x454>
    34e8:	00801504 	movi	r2,84
    34ec:	11001936 	bltu	r2,r4,3554 <_malloc_r+0x6f4>
    34f0:	2804d33a 	srli	r2,r5,12
    34f4:	11001b84 	addi	r4,r2,110
    34f8:	200690fa 	slli	r3,r4,3
    34fc:	003f8e06 	br	3338 <_malloc_r+0x4d8>
    3500:	480b883a 	mov	r5,r9
    3504:	6807883a 	mov	r3,r13
    3508:	288000cc 	andi	r2,r5,3
    350c:	18fffe04 	addi	r3,r3,-8
    3510:	297fffc4 	addi	r5,r5,-1
    3514:	10001526 	beq	r2,zero,356c <_malloc_r+0x70c>
    3518:	18800217 	ldw	r2,8(r3)
    351c:	10fffa26 	beq	r2,r3,3508 <_malloc_r+0x6a8>
    3520:	2109883a 	add	r4,r4,r4
    3524:	393f1e36 	bltu	r7,r4,31a0 <_malloc_r+0x340>
    3528:	203f1d26 	beq	r4,zero,31a0 <_malloc_r+0x340>
    352c:	21c4703a 	and	r2,r4,r7
    3530:	10000226 	beq	r2,zero,353c <_malloc_r+0x6dc>
    3534:	6013883a 	mov	r9,r12
    3538:	003ee106 	br	30c0 <_malloc_r+0x260>
    353c:	2109883a 	add	r4,r4,r4
    3540:	3904703a 	and	r2,r7,r4
    3544:	63000104 	addi	r12,r12,4
    3548:	103ffc26 	beq	r2,zero,353c <_malloc_r+0x6dc>
    354c:	6013883a 	mov	r9,r12
    3550:	003edb06 	br	30c0 <_malloc_r+0x260>
    3554:	00805504 	movi	r2,340
    3558:	11000836 	bltu	r2,r4,357c <_malloc_r+0x71c>
    355c:	2804d3fa 	srli	r2,r5,15
    3560:	11001dc4 	addi	r4,r2,119
    3564:	200690fa 	slli	r3,r4,3
    3568:	003f7306 	br	3338 <_malloc_r+0x4d8>
    356c:	0104303a 	nor	r2,zero,r4
    3570:	388e703a 	and	r7,r7,r2
    3574:	e1c00115 	stw	r7,4(fp)
    3578:	003fe906 	br	3520 <_malloc_r+0x6c0>
    357c:	00815504 	movi	r2,1364
    3580:	1100032e 	bgeu	r2,r4,3590 <_malloc_r+0x730>
    3584:	01001f84 	movi	r4,126
    3588:	00c0fc04 	movi	r3,1008
    358c:	003f6a06 	br	3338 <_malloc_r+0x4d8>
    3590:	2804d4ba 	srli	r2,r5,18
    3594:	11001f04 	addi	r4,r2,124
    3598:	200690fa 	slli	r3,r4,3
    359c:	003f6606 	br	3338 <_malloc_r+0x4d8>

000035a0 <memchr>:
    35a0:	008000c4 	movi	r2,3
    35a4:	29403fcc 	andi	r5,r5,255
    35a8:	2007883a 	mov	r3,r4
    35ac:	1180022e 	bgeu	r2,r6,35b8 <memchr+0x18>
    35b0:	2084703a 	and	r2,r4,r2
    35b4:	10000b26 	beq	r2,zero,35e4 <memchr+0x44>
    35b8:	313fffc4 	addi	r4,r6,-1
    35bc:	3000051e 	bne	r6,zero,35d4 <memchr+0x34>
    35c0:	00002c06 	br	3674 <memchr+0xd4>
    35c4:	213fffc4 	addi	r4,r4,-1
    35c8:	00bfffc4 	movi	r2,-1
    35cc:	18c00044 	addi	r3,r3,1
    35d0:	20802826 	beq	r4,r2,3674 <memchr+0xd4>
    35d4:	18800003 	ldbu	r2,0(r3)
    35d8:	28bffa1e 	bne	r5,r2,35c4 <memchr+0x24>
    35dc:	1805883a 	mov	r2,r3
    35e0:	f800283a 	ret
    35e4:	0011883a 	mov	r8,zero
    35e8:	0007883a 	mov	r3,zero
    35ec:	01c00104 	movi	r7,4
    35f0:	4004923a 	slli	r2,r8,8
    35f4:	18c00044 	addi	r3,r3,1
    35f8:	1151883a 	add	r8,r2,r5
    35fc:	19fffc1e 	bne	r3,r7,35f0 <memchr+0x50>
    3600:	02bfbff4 	movhi	r10,65279
    3604:	52bfbfc4 	addi	r10,r10,-257
    3608:	02602074 	movhi	r9,32897
    360c:	4a602004 	addi	r9,r9,-32640
    3610:	02c000c4 	movi	r11,3
    3614:	20800017 	ldw	r2,0(r4)
    3618:	31bfff04 	addi	r6,r6,-4
    361c:	200f883a 	mov	r7,r4
    3620:	1204f03a 	xor	r2,r2,r8
    3624:	1287883a 	add	r3,r2,r10
    3628:	1a46703a 	and	r3,r3,r9
    362c:	0084303a 	nor	r2,zero,r2
    3630:	10c4703a 	and	r2,r2,r3
    3634:	10000b26 	beq	r2,zero,3664 <memchr+0xc4>
    3638:	20800003 	ldbu	r2,0(r4)
    363c:	28800f26 	beq	r5,r2,367c <memchr+0xdc>
    3640:	20800043 	ldbu	r2,1(r4)
    3644:	21c00044 	addi	r7,r4,1
    3648:	28800c26 	beq	r5,r2,367c <memchr+0xdc>
    364c:	20800083 	ldbu	r2,2(r4)
    3650:	21c00084 	addi	r7,r4,2
    3654:	28800926 	beq	r5,r2,367c <memchr+0xdc>
    3658:	208000c3 	ldbu	r2,3(r4)
    365c:	21c000c4 	addi	r7,r4,3
    3660:	28800626 	beq	r5,r2,367c <memchr+0xdc>
    3664:	21000104 	addi	r4,r4,4
    3668:	59bfea36 	bltu	r11,r6,3614 <memchr+0x74>
    366c:	2007883a 	mov	r3,r4
    3670:	003fd106 	br	35b8 <memchr+0x18>
    3674:	0005883a 	mov	r2,zero
    3678:	f800283a 	ret
    367c:	3805883a 	mov	r2,r7
    3680:	f800283a 	ret

00003684 <memcpy>:
    3684:	01c003c4 	movi	r7,15
    3688:	2007883a 	mov	r3,r4
    368c:	3980032e 	bgeu	r7,r6,369c <memcpy+0x18>
    3690:	2904b03a 	or	r2,r5,r4
    3694:	108000cc 	andi	r2,r2,3
    3698:	10000926 	beq	r2,zero,36c0 <memcpy+0x3c>
    369c:	30000626 	beq	r6,zero,36b8 <memcpy+0x34>
    36a0:	30cd883a 	add	r6,r6,r3
    36a4:	28800003 	ldbu	r2,0(r5)
    36a8:	29400044 	addi	r5,r5,1
    36ac:	18800005 	stb	r2,0(r3)
    36b0:	18c00044 	addi	r3,r3,1
    36b4:	30fffb1e 	bne	r6,r3,36a4 <memcpy+0x20>
    36b8:	2005883a 	mov	r2,r4
    36bc:	f800283a 	ret
    36c0:	3811883a 	mov	r8,r7
    36c4:	200f883a 	mov	r7,r4
    36c8:	28c00017 	ldw	r3,0(r5)
    36cc:	31bffc04 	addi	r6,r6,-16
    36d0:	38c00015 	stw	r3,0(r7)
    36d4:	28800117 	ldw	r2,4(r5)
    36d8:	38800115 	stw	r2,4(r7)
    36dc:	28c00217 	ldw	r3,8(r5)
    36e0:	38c00215 	stw	r3,8(r7)
    36e4:	28800317 	ldw	r2,12(r5)
    36e8:	29400404 	addi	r5,r5,16
    36ec:	38800315 	stw	r2,12(r7)
    36f0:	39c00404 	addi	r7,r7,16
    36f4:	41bff436 	bltu	r8,r6,36c8 <memcpy+0x44>
    36f8:	008000c4 	movi	r2,3
    36fc:	1180072e 	bgeu	r2,r6,371c <memcpy+0x98>
    3700:	1007883a 	mov	r3,r2
    3704:	28800017 	ldw	r2,0(r5)
    3708:	31bfff04 	addi	r6,r6,-4
    370c:	29400104 	addi	r5,r5,4
    3710:	38800015 	stw	r2,0(r7)
    3714:	39c00104 	addi	r7,r7,4
    3718:	19bffa36 	bltu	r3,r6,3704 <memcpy+0x80>
    371c:	3807883a 	mov	r3,r7
    3720:	003fde06 	br	369c <memcpy+0x18>

00003724 <memset>:
    3724:	008000c4 	movi	r2,3
    3728:	29403fcc 	andi	r5,r5,255
    372c:	2007883a 	mov	r3,r4
    3730:	1180022e 	bgeu	r2,r6,373c <memset+0x18>
    3734:	2084703a 	and	r2,r4,r2
    3738:	10000826 	beq	r2,zero,375c <memset+0x38>
    373c:	30000526 	beq	r6,zero,3754 <memset+0x30>
    3740:	2805883a 	mov	r2,r5
    3744:	30cd883a 	add	r6,r6,r3
    3748:	18800005 	stb	r2,0(r3)
    374c:	18c00044 	addi	r3,r3,1
    3750:	19bffd1e 	bne	r3,r6,3748 <memset+0x24>
    3754:	2005883a 	mov	r2,r4
    3758:	f800283a 	ret
    375c:	2804923a 	slli	r2,r5,8
    3760:	020003c4 	movi	r8,15
    3764:	200f883a 	mov	r7,r4
    3768:	2884b03a 	or	r2,r5,r2
    376c:	1006943a 	slli	r3,r2,16
    3770:	10c6b03a 	or	r3,r2,r3
    3774:	41800a2e 	bgeu	r8,r6,37a0 <memset+0x7c>
    3778:	4005883a 	mov	r2,r8
    377c:	31bffc04 	addi	r6,r6,-16
    3780:	38c00015 	stw	r3,0(r7)
    3784:	38c00115 	stw	r3,4(r7)
    3788:	38c00215 	stw	r3,8(r7)
    378c:	38c00315 	stw	r3,12(r7)
    3790:	39c00404 	addi	r7,r7,16
    3794:	11bff936 	bltu	r2,r6,377c <memset+0x58>
    3798:	008000c4 	movi	r2,3
    379c:	1180052e 	bgeu	r2,r6,37b4 <memset+0x90>
    37a0:	31bfff04 	addi	r6,r6,-4
    37a4:	008000c4 	movi	r2,3
    37a8:	38c00015 	stw	r3,0(r7)
    37ac:	39c00104 	addi	r7,r7,4
    37b0:	11bffb36 	bltu	r2,r6,37a0 <memset+0x7c>
    37b4:	3807883a 	mov	r3,r7
    37b8:	003fe006 	br	373c <memset+0x18>

000037bc <printf>:
    37bc:	defffb04 	addi	sp,sp,-20
    37c0:	dfc00115 	stw	ra,4(sp)
    37c4:	d9400215 	stw	r5,8(sp)
    37c8:	d9800315 	stw	r6,12(sp)
    37cc:	d9c00415 	stw	r7,16(sp)
    37d0:	00800074 	movhi	r2,1
    37d4:	109ae204 	addi	r2,r2,27528
    37d8:	10c00017 	ldw	r3,0(r2)
    37dc:	200b883a 	mov	r5,r4
    37e0:	d8800204 	addi	r2,sp,8
    37e4:	19000217 	ldw	r4,8(r3)
    37e8:	100d883a 	mov	r6,r2
    37ec:	d8800015 	stw	r2,0(sp)
    37f0:	0005fe00 	call	5fe0 <__vfprintf_internal>
    37f4:	dfc00117 	ldw	ra,4(sp)
    37f8:	dec00504 	addi	sp,sp,20
    37fc:	f800283a 	ret

00003800 <_printf_r>:
    3800:	defffc04 	addi	sp,sp,-16
    3804:	dfc00115 	stw	ra,4(sp)
    3808:	d9800215 	stw	r6,8(sp)
    380c:	d9c00315 	stw	r7,12(sp)
    3810:	280d883a 	mov	r6,r5
    3814:	21400217 	ldw	r5,8(r4)
    3818:	d8c00204 	addi	r3,sp,8
    381c:	180f883a 	mov	r7,r3
    3820:	d8c00015 	stw	r3,0(sp)
    3824:	00041340 	call	4134 <___vfprintf_internal_r>
    3828:	dfc00117 	ldw	ra,4(sp)
    382c:	dec00404 	addi	sp,sp,16
    3830:	f800283a 	ret

00003834 <putchar>:
    3834:	00800074 	movhi	r2,1
    3838:	109ae204 	addi	r2,r2,27528
    383c:	11800017 	ldw	r6,0(r2)
    3840:	200b883a 	mov	r5,r4
    3844:	3009883a 	mov	r4,r6
    3848:	31800217 	ldw	r6,8(r6)
    384c:	000b5b41 	jmpi	b5b4 <_putc_r>

00003850 <_putchar_r>:
    3850:	21800217 	ldw	r6,8(r4)
    3854:	000b5b41 	jmpi	b5b4 <_putc_r>

00003858 <_puts_r>:
    3858:	defff604 	addi	sp,sp,-40
    385c:	dc400715 	stw	r17,28(sp)
    3860:	2023883a 	mov	r17,r4
    3864:	2809883a 	mov	r4,r5
    3868:	dfc00915 	stw	ra,36(sp)
    386c:	dcc00815 	stw	r19,32(sp)
    3870:	2827883a 	mov	r19,r5
    3874:	00040680 	call	4068 <strlen>
    3878:	89400217 	ldw	r5,8(r17)
    387c:	00c00074 	movhi	r3,1
    3880:	18d34604 	addi	r3,r3,19736
    3884:	01c00044 	movi	r7,1
    3888:	12000044 	addi	r8,r2,1
    388c:	d8c00515 	stw	r3,20(sp)
    3890:	d9c00615 	stw	r7,24(sp)
    3894:	d8c00304 	addi	r3,sp,12
    3898:	01c00084 	movi	r7,2
    389c:	8809883a 	mov	r4,r17
    38a0:	d80d883a 	mov	r6,sp
    38a4:	d8c00015 	stw	r3,0(sp)
    38a8:	dcc00315 	stw	r19,12(sp)
    38ac:	da000215 	stw	r8,8(sp)
    38b0:	d9c00115 	stw	r7,4(sp)
    38b4:	d8800415 	stw	r2,16(sp)
    38b8:	0009b440 	call	9b44 <__sfvwrite_r>
    38bc:	00ffffc4 	movi	r3,-1
    38c0:	10000626 	beq	r2,zero,38dc <_puts_r+0x84>
    38c4:	1805883a 	mov	r2,r3
    38c8:	dfc00917 	ldw	ra,36(sp)
    38cc:	dcc00817 	ldw	r19,32(sp)
    38d0:	dc400717 	ldw	r17,28(sp)
    38d4:	dec00a04 	addi	sp,sp,40
    38d8:	f800283a 	ret
    38dc:	00c00284 	movi	r3,10
    38e0:	1805883a 	mov	r2,r3
    38e4:	dfc00917 	ldw	ra,36(sp)
    38e8:	dcc00817 	ldw	r19,32(sp)
    38ec:	dc400717 	ldw	r17,28(sp)
    38f0:	dec00a04 	addi	sp,sp,40
    38f4:	f800283a 	ret

000038f8 <puts>:
    38f8:	00800074 	movhi	r2,1
    38fc:	109ae204 	addi	r2,r2,27528
    3900:	200b883a 	mov	r5,r4
    3904:	11000017 	ldw	r4,0(r2)
    3908:	00038581 	jmpi	3858 <_puts_r>

0000390c <__srefill_r>:
    390c:	defffd04 	addi	sp,sp,-12
    3910:	dc400115 	stw	r17,4(sp)
    3914:	dc000015 	stw	r16,0(sp)
    3918:	dfc00215 	stw	ra,8(sp)
    391c:	2023883a 	mov	r17,r4
    3920:	2821883a 	mov	r16,r5
    3924:	20000226 	beq	r4,zero,3930 <__srefill_r+0x24>
    3928:	20800e17 	ldw	r2,56(r4)
    392c:	10004126 	beq	r2,zero,3a34 <__srefill_r+0x128>
    3930:	80c0030b 	ldhu	r3,12(r16)
    3934:	80000115 	stw	zero,4(r16)
    3938:	1880080c 	andi	r2,r3,32
    393c:	1000361e 	bne	r2,zero,3a18 <__srefill_r+0x10c>
    3940:	1880010c 	andi	r2,r3,4
    3944:	1000211e 	bne	r2,zero,39cc <__srefill_r+0xc0>
    3948:	1880040c 	andi	r2,r3,16
    394c:	10005026 	beq	r2,zero,3a90 <__srefill_r+0x184>
    3950:	1880020c 	andi	r2,r3,8
    3954:	1000541e 	bne	r2,zero,3aa8 <__srefill_r+0x19c>
    3958:	8080030b 	ldhu	r2,12(r16)
    395c:	10800114 	ori	r2,r2,4
    3960:	8080030d 	sth	r2,12(r16)
    3964:	80800417 	ldw	r2,16(r16)
    3968:	10004526 	beq	r2,zero,3a80 <__srefill_r+0x174>
    396c:	8080030b 	ldhu	r2,12(r16)
    3970:	108000cc 	andi	r2,r2,3
    3974:	1000361e 	bne	r2,zero,3a50 <__srefill_r+0x144>
    3978:	81800417 	ldw	r6,16(r16)
    397c:	80c00817 	ldw	r3,32(r16)
    3980:	81400717 	ldw	r5,28(r16)
    3984:	81c00517 	ldw	r7,20(r16)
    3988:	8809883a 	mov	r4,r17
    398c:	81800015 	stw	r6,0(r16)
    3990:	183ee83a 	callr	r3
    3994:	80c0030b 	ldhu	r3,12(r16)
    3998:	1009883a 	mov	r4,r2
    399c:	80800115 	stw	r2,4(r16)
    39a0:	00b7ffc4 	movi	r2,-8193
    39a4:	1884703a 	and	r2,r3,r2
    39a8:	8080030d 	sth	r2,12(r16)
    39ac:	0100230e 	bge	zero,r4,3a3c <__srefill_r+0x130>
    39b0:	0009883a 	mov	r4,zero
    39b4:	2005883a 	mov	r2,r4
    39b8:	dfc00217 	ldw	ra,8(sp)
    39bc:	dc400117 	ldw	r17,4(sp)
    39c0:	dc000017 	ldw	r16,0(sp)
    39c4:	dec00304 	addi	sp,sp,12
    39c8:	f800283a 	ret
    39cc:	81400c17 	ldw	r5,48(r16)
    39d0:	283fe426 	beq	r5,zero,3964 <__srefill_r+0x58>
    39d4:	80801004 	addi	r2,r16,64
    39d8:	28800226 	beq	r5,r2,39e4 <__srefill_r+0xd8>
    39dc:	8809883a 	mov	r4,r17
    39e0:	00098300 	call	9830 <_free_r>
    39e4:	80800f17 	ldw	r2,60(r16)
    39e8:	80000c15 	stw	zero,48(r16)
    39ec:	80800115 	stw	r2,4(r16)
    39f0:	103fdc26 	beq	r2,zero,3964 <__srefill_r+0x58>
    39f4:	80800e17 	ldw	r2,56(r16)
    39f8:	0009883a 	mov	r4,zero
    39fc:	80800015 	stw	r2,0(r16)
    3a00:	2005883a 	mov	r2,r4
    3a04:	dfc00217 	ldw	ra,8(sp)
    3a08:	dc400117 	ldw	r17,4(sp)
    3a0c:	dc000017 	ldw	r16,0(sp)
    3a10:	dec00304 	addi	sp,sp,12
    3a14:	f800283a 	ret
    3a18:	013fffc4 	movi	r4,-1
    3a1c:	2005883a 	mov	r2,r4
    3a20:	dfc00217 	ldw	ra,8(sp)
    3a24:	dc400117 	ldw	r17,4(sp)
    3a28:	dc000017 	ldw	r16,0(sp)
    3a2c:	dec00304 	addi	sp,sp,12
    3a30:	f800283a 	ret
    3a34:	0002a880 	call	2a88 <__sinit>
    3a38:	003fbd06 	br	3930 <__srefill_r+0x24>
    3a3c:	20000b1e 	bne	r4,zero,3a6c <__srefill_r+0x160>
    3a40:	10800814 	ori	r2,r2,32
    3a44:	013fffc4 	movi	r4,-1
    3a48:	8080030d 	sth	r2,12(r16)
    3a4c:	003fd906 	br	39b4 <__srefill_r+0xa8>
    3a50:	00800074 	movhi	r2,1
    3a54:	109ae304 	addi	r2,r2,27532
    3a58:	11000017 	ldw	r4,0(r2)
    3a5c:	01400034 	movhi	r5,0
    3a60:	294eb404 	addi	r5,r5,15056
    3a64:	0002da80 	call	2da8 <_fwalk>
    3a68:	003fc306 	br	3978 <__srefill_r+0x6c>
    3a6c:	10801014 	ori	r2,r2,64
    3a70:	013fffc4 	movi	r4,-1
    3a74:	8080030d 	sth	r2,12(r16)
    3a78:	80000115 	stw	zero,4(r16)
    3a7c:	003fcd06 	br	39b4 <__srefill_r+0xa8>
    3a80:	8809883a 	mov	r4,r17
    3a84:	800b883a 	mov	r5,r16
    3a88:	000a1480 	call	a148 <__smakebuf_r>
    3a8c:	003fb706 	br	396c <__srefill_r+0x60>
    3a90:	18c01014 	ori	r3,r3,64
    3a94:	00800244 	movi	r2,9
    3a98:	013fffc4 	movi	r4,-1
    3a9c:	88800015 	stw	r2,0(r17)
    3aa0:	80c0030d 	sth	r3,12(r16)
    3aa4:	003fc306 	br	39b4 <__srefill_r+0xa8>
    3aa8:	8809883a 	mov	r4,r17
    3aac:	800b883a 	mov	r5,r16
    3ab0:	00092980 	call	9298 <_fflush_r>
    3ab4:	103fd81e 	bne	r2,zero,3a18 <__srefill_r+0x10c>
    3ab8:	8080030b 	ldhu	r2,12(r16)
    3abc:	80000215 	stw	zero,8(r16)
    3ac0:	80000615 	stw	zero,24(r16)
    3ac4:	10bffdcc 	andi	r2,r2,65527
    3ac8:	8080030d 	sth	r2,12(r16)
    3acc:	003fa206 	br	3958 <__srefill_r+0x4c>

00003ad0 <lflush>:
    3ad0:	20c0030b 	ldhu	r3,12(r4)
    3ad4:	01400244 	movi	r5,9
    3ad8:	0005883a 	mov	r2,zero
    3adc:	18c0024c 	andi	r3,r3,9
    3ae0:	19400126 	beq	r3,r5,3ae8 <lflush+0x18>
    3ae4:	f800283a 	ret
    3ae8:	00094941 	jmpi	9494 <fflush>

00003aec <_sbrk_r>:
    3aec:	defffd04 	addi	sp,sp,-12
    3af0:	dc000015 	stw	r16,0(sp)
    3af4:	040000b4 	movhi	r16,2
    3af8:	8421be04 	addi	r16,r16,-30984
    3afc:	dc400115 	stw	r17,4(sp)
    3b00:	80000015 	stw	zero,0(r16)
    3b04:	2023883a 	mov	r17,r4
    3b08:	2809883a 	mov	r4,r5
    3b0c:	dfc00215 	stw	ra,8(sp)
    3b10:	00121fc0 	call	121fc <sbrk>
    3b14:	1007883a 	mov	r3,r2
    3b18:	00bfffc4 	movi	r2,-1
    3b1c:	18800626 	beq	r3,r2,3b38 <_sbrk_r+0x4c>
    3b20:	1805883a 	mov	r2,r3
    3b24:	dfc00217 	ldw	ra,8(sp)
    3b28:	dc400117 	ldw	r17,4(sp)
    3b2c:	dc000017 	ldw	r16,0(sp)
    3b30:	dec00304 	addi	sp,sp,12
    3b34:	f800283a 	ret
    3b38:	80800017 	ldw	r2,0(r16)
    3b3c:	103ff826 	beq	r2,zero,3b20 <_sbrk_r+0x34>
    3b40:	88800015 	stw	r2,0(r17)
    3b44:	1805883a 	mov	r2,r3
    3b48:	dfc00217 	ldw	ra,8(sp)
    3b4c:	dc400117 	ldw	r17,4(sp)
    3b50:	dc000017 	ldw	r16,0(sp)
    3b54:	dec00304 	addi	sp,sp,12
    3b58:	f800283a 	ret

00003b5c <sprintf>:
    3b5c:	deffe504 	addi	sp,sp,-108
    3b60:	2013883a 	mov	r9,r4
    3b64:	dfc01815 	stw	ra,96(sp)
    3b68:	d9801915 	stw	r6,100(sp)
    3b6c:	d9c01a15 	stw	r7,104(sp)
    3b70:	d8801904 	addi	r2,sp,100
    3b74:	d8800015 	stw	r2,0(sp)
    3b78:	00800074 	movhi	r2,1
    3b7c:	109ae204 	addi	r2,r2,27528
    3b80:	11000017 	ldw	r4,0(r2)
    3b84:	d9c00017 	ldw	r7,0(sp)
    3b88:	00808204 	movi	r2,520
    3b8c:	00e00034 	movhi	r3,32768
    3b90:	18ffffc4 	addi	r3,r3,-1
    3b94:	280d883a 	mov	r6,r5
    3b98:	d880040d 	sth	r2,16(sp)
    3b9c:	d9400104 	addi	r5,sp,4
    3ba0:	00bfffc4 	movi	r2,-1
    3ba4:	d8c00615 	stw	r3,24(sp)
    3ba8:	d8c00315 	stw	r3,12(sp)
    3bac:	da400515 	stw	r9,20(sp)
    3bb0:	d880048d 	sth	r2,18(sp)
    3bb4:	da400115 	stw	r9,4(sp)
    3bb8:	00041340 	call	4134 <___vfprintf_internal_r>
    3bbc:	d8c00117 	ldw	r3,4(sp)
    3bc0:	18000005 	stb	zero,0(r3)
    3bc4:	dfc01817 	ldw	ra,96(sp)
    3bc8:	dec01b04 	addi	sp,sp,108
    3bcc:	f800283a 	ret

00003bd0 <_sprintf_r>:
    3bd0:	deffe604 	addi	sp,sp,-104
    3bd4:	2813883a 	mov	r9,r5
    3bd8:	dfc01815 	stw	ra,96(sp)
    3bdc:	d9c01915 	stw	r7,100(sp)
    3be0:	d8801904 	addi	r2,sp,100
    3be4:	d8800015 	stw	r2,0(sp)
    3be8:	100f883a 	mov	r7,r2
    3bec:	00808204 	movi	r2,520
    3bf0:	00e00034 	movhi	r3,32768
    3bf4:	18ffffc4 	addi	r3,r3,-1
    3bf8:	d880040d 	sth	r2,16(sp)
    3bfc:	d9400104 	addi	r5,sp,4
    3c00:	00bfffc4 	movi	r2,-1
    3c04:	d8c00615 	stw	r3,24(sp)
    3c08:	d8c00315 	stw	r3,12(sp)
    3c0c:	da400515 	stw	r9,20(sp)
    3c10:	d880048d 	sth	r2,18(sp)
    3c14:	da400115 	stw	r9,4(sp)
    3c18:	00041340 	call	4134 <___vfprintf_internal_r>
    3c1c:	d8c00117 	ldw	r3,4(sp)
    3c20:	18000005 	stb	zero,0(r3)
    3c24:	dfc01817 	ldw	ra,96(sp)
    3c28:	dec01a04 	addi	sp,sp,104
    3c2c:	f800283a 	ret

00003c30 <eofread>:
    3c30:	0005883a 	mov	r2,zero
    3c34:	f800283a 	ret

00003c38 <_sscanf_r>:
    3c38:	deffe404 	addi	sp,sp,-112
    3c3c:	dcc01915 	stw	r19,100(sp)
    3c40:	2027883a 	mov	r19,r4
    3c44:	dfc01a15 	stw	ra,104(sp)
    3c48:	dc401815 	stw	r17,96(sp)
    3c4c:	d9c01b15 	stw	r7,108(sp)
    3c50:	00808104 	movi	r2,516
    3c54:	2809883a 	mov	r4,r5
    3c58:	3023883a 	mov	r17,r6
    3c5c:	d9400115 	stw	r5,4(sp)
    3c60:	d9400515 	stw	r5,20(sp)
    3c64:	d880040d 	sth	r2,16(sp)
    3c68:	00040680 	call	4068 <strlen>
    3c6c:	d8c01b04 	addi	r3,sp,108
    3c70:	d8c00015 	stw	r3,0(sp)
    3c74:	180f883a 	mov	r7,r3
    3c78:	023fffc4 	movi	r8,-1
    3c7c:	00c00034 	movhi	r3,0
    3c80:	18cf0c04 	addi	r3,r3,15408
    3c84:	9809883a 	mov	r4,r19
    3c88:	880d883a 	mov	r6,r17
    3c8c:	d9400104 	addi	r5,sp,4
    3c90:	d8800615 	stw	r2,24(sp)
    3c94:	d8c00915 	stw	r3,36(sp)
    3c98:	da00048d 	sth	r8,18(sp)
    3c9c:	d8800215 	stw	r2,8(sp)
    3ca0:	d8000d15 	stw	zero,52(sp)
    3ca4:	d8001215 	stw	zero,72(sp)
    3ca8:	00060040 	call	6004 <__svfscanf_r>
    3cac:	dfc01a17 	ldw	ra,104(sp)
    3cb0:	dcc01917 	ldw	r19,100(sp)
    3cb4:	dc401817 	ldw	r17,96(sp)
    3cb8:	dec01c04 	addi	sp,sp,112
    3cbc:	f800283a 	ret

00003cc0 <sscanf>:
    3cc0:	deffe404 	addi	sp,sp,-112
    3cc4:	dfc01915 	stw	ra,100(sp)
    3cc8:	dc401815 	stw	r17,96(sp)
    3ccc:	d9801a15 	stw	r6,104(sp)
    3cd0:	d9c01b15 	stw	r7,108(sp)
    3cd4:	00808104 	movi	r2,516
    3cd8:	2823883a 	mov	r17,r5
    3cdc:	d9000515 	stw	r4,20(sp)
    3ce0:	d9000115 	stw	r4,4(sp)
    3ce4:	d880040d 	sth	r2,16(sp)
    3ce8:	00040680 	call	4068 <strlen>
    3cec:	d8c01a04 	addi	r3,sp,104
    3cf0:	d8c00015 	stw	r3,0(sp)
    3cf4:	00c00074 	movhi	r3,1
    3cf8:	18dae204 	addi	r3,r3,27528
    3cfc:	19000017 	ldw	r4,0(r3)
    3d00:	d9c00017 	ldw	r7,0(sp)
    3d04:	00c00034 	movhi	r3,0
    3d08:	18cf0c04 	addi	r3,r3,15408
    3d0c:	023fffc4 	movi	r8,-1
    3d10:	880d883a 	mov	r6,r17
    3d14:	d9400104 	addi	r5,sp,4
    3d18:	d8800615 	stw	r2,24(sp)
    3d1c:	d8c00915 	stw	r3,36(sp)
    3d20:	da00048d 	sth	r8,18(sp)
    3d24:	d8800215 	stw	r2,8(sp)
    3d28:	d8000d15 	stw	zero,52(sp)
    3d2c:	d8001215 	stw	zero,72(sp)
    3d30:	00060040 	call	6004 <__svfscanf_r>
    3d34:	dfc01917 	ldw	ra,100(sp)
    3d38:	dc401817 	ldw	r17,96(sp)
    3d3c:	dec01c04 	addi	sp,sp,112
    3d40:	f800283a 	ret

00003d44 <__sclose>:
    3d44:	2940038f 	ldh	r5,14(r5)
    3d48:	00079381 	jmpi	7938 <_close_r>

00003d4c <__sseek>:
    3d4c:	defffe04 	addi	sp,sp,-8
    3d50:	dc000015 	stw	r16,0(sp)
    3d54:	2821883a 	mov	r16,r5
    3d58:	2940038f 	ldh	r5,14(r5)
    3d5c:	dfc00115 	stw	ra,4(sp)
    3d60:	000a0d00 	call	a0d0 <_lseek_r>
    3d64:	1007883a 	mov	r3,r2
    3d68:	00bfffc4 	movi	r2,-1
    3d6c:	18800926 	beq	r3,r2,3d94 <__sseek+0x48>
    3d70:	8080030b 	ldhu	r2,12(r16)
    3d74:	80c01415 	stw	r3,80(r16)
    3d78:	10840014 	ori	r2,r2,4096
    3d7c:	8080030d 	sth	r2,12(r16)
    3d80:	1805883a 	mov	r2,r3
    3d84:	dfc00117 	ldw	ra,4(sp)
    3d88:	dc000017 	ldw	r16,0(sp)
    3d8c:	dec00204 	addi	sp,sp,8
    3d90:	f800283a 	ret
    3d94:	8080030b 	ldhu	r2,12(r16)
    3d98:	10bbffcc 	andi	r2,r2,61439
    3d9c:	8080030d 	sth	r2,12(r16)
    3da0:	1805883a 	mov	r2,r3
    3da4:	dfc00117 	ldw	ra,4(sp)
    3da8:	dc000017 	ldw	r16,0(sp)
    3dac:	dec00204 	addi	sp,sp,8
    3db0:	f800283a 	ret

00003db4 <__swrite>:
    3db4:	2880030b 	ldhu	r2,12(r5)
    3db8:	defffb04 	addi	sp,sp,-20
    3dbc:	dcc00315 	stw	r19,12(sp)
    3dc0:	1080400c 	andi	r2,r2,256
    3dc4:	dc800215 	stw	r18,8(sp)
    3dc8:	dc400115 	stw	r17,4(sp)
    3dcc:	dc000015 	stw	r16,0(sp)
    3dd0:	3027883a 	mov	r19,r6
    3dd4:	3825883a 	mov	r18,r7
    3dd8:	dfc00415 	stw	ra,16(sp)
    3ddc:	2821883a 	mov	r16,r5
    3de0:	000d883a 	mov	r6,zero
    3de4:	01c00084 	movi	r7,2
    3de8:	2023883a 	mov	r17,r4
    3dec:	10000226 	beq	r2,zero,3df8 <__swrite+0x44>
    3df0:	2940038f 	ldh	r5,14(r5)
    3df4:	000a0d00 	call	a0d0 <_lseek_r>
    3df8:	8080030b 	ldhu	r2,12(r16)
    3dfc:	8140038f 	ldh	r5,14(r16)
    3e00:	8809883a 	mov	r4,r17
    3e04:	10bbffcc 	andi	r2,r2,61439
    3e08:	980d883a 	mov	r6,r19
    3e0c:	900f883a 	mov	r7,r18
    3e10:	8080030d 	sth	r2,12(r16)
    3e14:	dfc00417 	ldw	ra,16(sp)
    3e18:	dcc00317 	ldw	r19,12(sp)
    3e1c:	dc800217 	ldw	r18,8(sp)
    3e20:	dc400117 	ldw	r17,4(sp)
    3e24:	dc000017 	ldw	r16,0(sp)
    3e28:	dec00504 	addi	sp,sp,20
    3e2c:	00077841 	jmpi	7784 <_write_r>

00003e30 <__sread>:
    3e30:	defffe04 	addi	sp,sp,-8
    3e34:	dc000015 	stw	r16,0(sp)
    3e38:	2821883a 	mov	r16,r5
    3e3c:	2940038f 	ldh	r5,14(r5)
    3e40:	dfc00115 	stw	ra,4(sp)
    3e44:	000b69c0 	call	b69c <_read_r>
    3e48:	1007883a 	mov	r3,r2
    3e4c:	10000816 	blt	r2,zero,3e70 <__sread+0x40>
    3e50:	80801417 	ldw	r2,80(r16)
    3e54:	10c5883a 	add	r2,r2,r3
    3e58:	80801415 	stw	r2,80(r16)
    3e5c:	1805883a 	mov	r2,r3
    3e60:	dfc00117 	ldw	ra,4(sp)
    3e64:	dc000017 	ldw	r16,0(sp)
    3e68:	dec00204 	addi	sp,sp,8
    3e6c:	f800283a 	ret
    3e70:	8080030b 	ldhu	r2,12(r16)
    3e74:	10bbffcc 	andi	r2,r2,61439
    3e78:	8080030d 	sth	r2,12(r16)
    3e7c:	1805883a 	mov	r2,r3
    3e80:	dfc00117 	ldw	ra,4(sp)
    3e84:	dc000017 	ldw	r16,0(sp)
    3e88:	dec00204 	addi	sp,sp,8
    3e8c:	f800283a 	ret

00003e90 <strcat>:
    3e90:	defffe04 	addi	sp,sp,-8
    3e94:	208000cc 	andi	r2,r4,3
    3e98:	dc000015 	stw	r16,0(sp)
    3e9c:	dfc00115 	stw	ra,4(sp)
    3ea0:	2021883a 	mov	r16,r4
    3ea4:	1000161e 	bne	r2,zero,3f00 <strcat+0x70>
    3ea8:	20c00017 	ldw	r3,0(r4)
    3eac:	01bfbff4 	movhi	r6,65279
    3eb0:	31bfbfc4 	addi	r6,r6,-257
    3eb4:	02202074 	movhi	r8,32897
    3eb8:	42202004 	addi	r8,r8,-32640
    3ebc:	1985883a 	add	r2,r3,r6
    3ec0:	1204703a 	and	r2,r2,r8
    3ec4:	00c6303a 	nor	r3,zero,r3
    3ec8:	1886703a 	and	r3,r3,r2
    3ecc:	18000c1e 	bne	r3,zero,3f00 <strcat+0x70>
    3ed0:	300f883a 	mov	r7,r6
    3ed4:	400d883a 	mov	r6,r8
    3ed8:	21000104 	addi	r4,r4,4
    3edc:	20800017 	ldw	r2,0(r4)
    3ee0:	11c7883a 	add	r3,r2,r7
    3ee4:	1986703a 	and	r3,r3,r6
    3ee8:	0084303a 	nor	r2,zero,r2
    3eec:	10c4703a 	and	r2,r2,r3
    3ef0:	103ff926 	beq	r2,zero,3ed8 <strcat+0x48>
    3ef4:	20800007 	ldb	r2,0(r4)
    3ef8:	10000326 	beq	r2,zero,3f08 <strcat+0x78>
    3efc:	21000044 	addi	r4,r4,1
    3f00:	20800007 	ldb	r2,0(r4)
    3f04:	103ffd1e 	bne	r2,zero,3efc <strcat+0x6c>
    3f08:	0003fdc0 	call	3fdc <strcpy>
    3f0c:	8005883a 	mov	r2,r16
    3f10:	dfc00117 	ldw	ra,4(sp)
    3f14:	dc000017 	ldw	r16,0(sp)
    3f18:	dec00204 	addi	sp,sp,8
    3f1c:	f800283a 	ret

00003f20 <strcmp>:
    3f20:	2144b03a 	or	r2,r4,r5
    3f24:	108000cc 	andi	r2,r2,3
    3f28:	10001d1e 	bne	r2,zero,3fa0 <strcmp+0x80>
    3f2c:	200f883a 	mov	r7,r4
    3f30:	28800017 	ldw	r2,0(r5)
    3f34:	21000017 	ldw	r4,0(r4)
    3f38:	280d883a 	mov	r6,r5
    3f3c:	2080161e 	bne	r4,r2,3f98 <strcmp+0x78>
    3f40:	023fbff4 	movhi	r8,65279
    3f44:	423fbfc4 	addi	r8,r8,-257
    3f48:	2207883a 	add	r3,r4,r8
    3f4c:	01602074 	movhi	r5,32897
    3f50:	29602004 	addi	r5,r5,-32640
    3f54:	1946703a 	and	r3,r3,r5
    3f58:	0104303a 	nor	r2,zero,r4
    3f5c:	10c4703a 	and	r2,r2,r3
    3f60:	10001c1e 	bne	r2,zero,3fd4 <strcmp+0xb4>
    3f64:	4013883a 	mov	r9,r8
    3f68:	2811883a 	mov	r8,r5
    3f6c:	00000106 	br	3f74 <strcmp+0x54>
    3f70:	1800181e 	bne	r3,zero,3fd4 <strcmp+0xb4>
    3f74:	39c00104 	addi	r7,r7,4
    3f78:	39000017 	ldw	r4,0(r7)
    3f7c:	31800104 	addi	r6,r6,4
    3f80:	31400017 	ldw	r5,0(r6)
    3f84:	2245883a 	add	r2,r4,r9
    3f88:	1204703a 	and	r2,r2,r8
    3f8c:	0106303a 	nor	r3,zero,r4
    3f90:	1886703a 	and	r3,r3,r2
    3f94:	217ff626 	beq	r4,r5,3f70 <strcmp+0x50>
    3f98:	3809883a 	mov	r4,r7
    3f9c:	300b883a 	mov	r5,r6
    3fa0:	20c00007 	ldb	r3,0(r4)
    3fa4:	1800051e 	bne	r3,zero,3fbc <strcmp+0x9c>
    3fa8:	00000606 	br	3fc4 <strcmp+0xa4>
    3fac:	21000044 	addi	r4,r4,1
    3fb0:	20c00007 	ldb	r3,0(r4)
    3fb4:	29400044 	addi	r5,r5,1
    3fb8:	18000226 	beq	r3,zero,3fc4 <strcmp+0xa4>
    3fbc:	28800007 	ldb	r2,0(r5)
    3fc0:	18bffa26 	beq	r3,r2,3fac <strcmp+0x8c>
    3fc4:	20c00003 	ldbu	r3,0(r4)
    3fc8:	28800003 	ldbu	r2,0(r5)
    3fcc:	1885c83a 	sub	r2,r3,r2
    3fd0:	f800283a 	ret
    3fd4:	0005883a 	mov	r2,zero
    3fd8:	f800283a 	ret

00003fdc <strcpy>:
    3fdc:	2904b03a 	or	r2,r5,r4
    3fe0:	108000cc 	andi	r2,r2,3
    3fe4:	10000826 	beq	r2,zero,4008 <strcpy+0x2c>
    3fe8:	2007883a 	mov	r3,r4
    3fec:	28800003 	ldbu	r2,0(r5)
    3ff0:	29400044 	addi	r5,r5,1
    3ff4:	18800005 	stb	r2,0(r3)
    3ff8:	18c00044 	addi	r3,r3,1
    3ffc:	103ffb1e 	bne	r2,zero,3fec <strcpy+0x10>
    4000:	2005883a 	mov	r2,r4
    4004:	f800283a 	ret
    4008:	29800017 	ldw	r6,0(r5)
    400c:	023fbff4 	movhi	r8,65279
    4010:	423fbfc4 	addi	r8,r8,-257
    4014:	02a02074 	movhi	r10,32897
    4018:	52a02004 	addi	r10,r10,-32640
    401c:	3205883a 	add	r2,r6,r8
    4020:	0186303a 	nor	r3,zero,r6
    4024:	10c4703a 	and	r2,r2,r3
    4028:	1284703a 	and	r2,r2,r10
    402c:	200f883a 	mov	r7,r4
    4030:	10000b1e 	bne	r2,zero,4060 <strcpy+0x84>
    4034:	4013883a 	mov	r9,r8
    4038:	5011883a 	mov	r8,r10
    403c:	39800015 	stw	r6,0(r7)
    4040:	29400104 	addi	r5,r5,4
    4044:	29800017 	ldw	r6,0(r5)
    4048:	39c00104 	addi	r7,r7,4
    404c:	3245883a 	add	r2,r6,r9
    4050:	0186303a 	nor	r3,zero,r6
    4054:	10c4703a 	and	r2,r2,r3
    4058:	1204703a 	and	r2,r2,r8
    405c:	103ff726 	beq	r2,zero,403c <strcpy+0x60>
    4060:	3807883a 	mov	r3,r7
    4064:	003fe106 	br	3fec <strcpy+0x10>

00004068 <strlen>:
    4068:	208000cc 	andi	r2,r4,3
    406c:	2011883a 	mov	r8,r4
    4070:	1000161e 	bne	r2,zero,40cc <strlen+0x64>
    4074:	20c00017 	ldw	r3,0(r4)
    4078:	017fbff4 	movhi	r5,65279
    407c:	297fbfc4 	addi	r5,r5,-257
    4080:	01e02074 	movhi	r7,32897
    4084:	39e02004 	addi	r7,r7,-32640
    4088:	1945883a 	add	r2,r3,r5
    408c:	11c4703a 	and	r2,r2,r7
    4090:	00c6303a 	nor	r3,zero,r3
    4094:	1886703a 	and	r3,r3,r2
    4098:	18000c1e 	bne	r3,zero,40cc <strlen+0x64>
    409c:	280d883a 	mov	r6,r5
    40a0:	380b883a 	mov	r5,r7
    40a4:	21000104 	addi	r4,r4,4
    40a8:	20800017 	ldw	r2,0(r4)
    40ac:	1187883a 	add	r3,r2,r6
    40b0:	1946703a 	and	r3,r3,r5
    40b4:	0084303a 	nor	r2,zero,r2
    40b8:	10c4703a 	and	r2,r2,r3
    40bc:	103ff926 	beq	r2,zero,40a4 <strlen+0x3c>
    40c0:	20800007 	ldb	r2,0(r4)
    40c4:	10000326 	beq	r2,zero,40d4 <strlen+0x6c>
    40c8:	21000044 	addi	r4,r4,1
    40cc:	20800007 	ldb	r2,0(r4)
    40d0:	103ffd1e 	bne	r2,zero,40c8 <strlen+0x60>
    40d4:	2205c83a 	sub	r2,r4,r8
    40d8:	f800283a 	ret

000040dc <__sprint_r>:
    40dc:	30800217 	ldw	r2,8(r6)
    40e0:	defffe04 	addi	sp,sp,-8
    40e4:	dc000015 	stw	r16,0(sp)
    40e8:	dfc00115 	stw	ra,4(sp)
    40ec:	3021883a 	mov	r16,r6
    40f0:	0007883a 	mov	r3,zero
    40f4:	1000061e 	bne	r2,zero,4110 <__sprint_r+0x34>
    40f8:	1805883a 	mov	r2,r3
    40fc:	30000115 	stw	zero,4(r6)
    4100:	dfc00117 	ldw	ra,4(sp)
    4104:	dc000017 	ldw	r16,0(sp)
    4108:	dec00204 	addi	sp,sp,8
    410c:	f800283a 	ret
    4110:	0009b440 	call	9b44 <__sfvwrite_r>
    4114:	1007883a 	mov	r3,r2
    4118:	1805883a 	mov	r2,r3
    411c:	80000115 	stw	zero,4(r16)
    4120:	80000215 	stw	zero,8(r16)
    4124:	dfc00117 	ldw	ra,4(sp)
    4128:	dc000017 	ldw	r16,0(sp)
    412c:	dec00204 	addi	sp,sp,8
    4130:	f800283a 	ret

00004134 <___vfprintf_internal_r>:
    4134:	defea404 	addi	sp,sp,-1392
    4138:	dd815815 	stw	r22,1376(sp)
    413c:	dc015215 	stw	r16,1352(sp)
    4140:	d9c15115 	stw	r7,1348(sp)
    4144:	dfc15b15 	stw	ra,1388(sp)
    4148:	df015a15 	stw	fp,1384(sp)
    414c:	ddc15915 	stw	r23,1380(sp)
    4150:	dd415715 	stw	r21,1372(sp)
    4154:	dd015615 	stw	r20,1368(sp)
    4158:	dcc15515 	stw	r19,1364(sp)
    415c:	dc815415 	stw	r18,1360(sp)
    4160:	dc415315 	stw	r17,1356(sp)
    4164:	282d883a 	mov	r22,r5
    4168:	3021883a 	mov	r16,r6
    416c:	d9014f15 	stw	r4,1340(sp)
    4170:	000a0140 	call	a014 <_localeconv_r>
    4174:	10800017 	ldw	r2,0(r2)
    4178:	d9c15117 	ldw	r7,1348(sp)
    417c:	d8814915 	stw	r2,1316(sp)
    4180:	d8814f17 	ldw	r2,1340(sp)
    4184:	10000226 	beq	r2,zero,4190 <___vfprintf_internal_r+0x5c>
    4188:	10800e17 	ldw	r2,56(r2)
    418c:	10020d26 	beq	r2,zero,49c4 <___vfprintf_internal_r+0x890>
    4190:	b080030b 	ldhu	r2,12(r22)
    4194:	1080020c 	andi	r2,r2,8
    4198:	10020e26 	beq	r2,zero,49d4 <___vfprintf_internal_r+0x8a0>
    419c:	b0800417 	ldw	r2,16(r22)
    41a0:	10020c26 	beq	r2,zero,49d4 <___vfprintf_internal_r+0x8a0>
    41a4:	b200030b 	ldhu	r8,12(r22)
    41a8:	00800284 	movi	r2,10
    41ac:	40c0068c 	andi	r3,r8,26
    41b0:	18802f1e 	bne	r3,r2,4270 <___vfprintf_internal_r+0x13c>
    41b4:	b080038f 	ldh	r2,14(r22)
    41b8:	10002d16 	blt	r2,zero,4270 <___vfprintf_internal_r+0x13c>
    41bc:	b240038b 	ldhu	r9,14(r22)
    41c0:	b2800717 	ldw	r10,28(r22)
    41c4:	b2c00917 	ldw	r11,36(r22)
    41c8:	d9014f17 	ldw	r4,1340(sp)
    41cc:	dc402904 	addi	r17,sp,164
    41d0:	d8804004 	addi	r2,sp,256
    41d4:	00c10004 	movi	r3,1024
    41d8:	423fff4c 	andi	r8,r8,65533
    41dc:	800d883a 	mov	r6,r16
    41e0:	880b883a 	mov	r5,r17
    41e4:	da002c0d 	sth	r8,176(sp)
    41e8:	da402c8d 	sth	r9,178(sp)
    41ec:	da803015 	stw	r10,192(sp)
    41f0:	dac03215 	stw	r11,200(sp)
    41f4:	d8802d15 	stw	r2,180(sp)
    41f8:	d8c02e15 	stw	r3,184(sp)
    41fc:	d8802915 	stw	r2,164(sp)
    4200:	d8c02b15 	stw	r3,172(sp)
    4204:	d8002f15 	stw	zero,188(sp)
    4208:	00041340 	call	4134 <___vfprintf_internal_r>
    420c:	d8814b15 	stw	r2,1324(sp)
    4210:	10000416 	blt	r2,zero,4224 <___vfprintf_internal_r+0xf0>
    4214:	d9014f17 	ldw	r4,1340(sp)
    4218:	880b883a 	mov	r5,r17
    421c:	00092980 	call	9298 <_fflush_r>
    4220:	1002321e 	bne	r2,zero,4aec <___vfprintf_internal_r+0x9b8>
    4224:	d8802c0b 	ldhu	r2,176(sp)
    4228:	1080100c 	andi	r2,r2,64
    422c:	10000326 	beq	r2,zero,423c <___vfprintf_internal_r+0x108>
    4230:	b080030b 	ldhu	r2,12(r22)
    4234:	10801014 	ori	r2,r2,64
    4238:	b080030d 	sth	r2,12(r22)
    423c:	d8814b17 	ldw	r2,1324(sp)
    4240:	dfc15b17 	ldw	ra,1388(sp)
    4244:	df015a17 	ldw	fp,1384(sp)
    4248:	ddc15917 	ldw	r23,1380(sp)
    424c:	dd815817 	ldw	r22,1376(sp)
    4250:	dd415717 	ldw	r21,1372(sp)
    4254:	dd015617 	ldw	r20,1368(sp)
    4258:	dcc15517 	ldw	r19,1364(sp)
    425c:	dc815417 	ldw	r18,1360(sp)
    4260:	dc415317 	ldw	r17,1356(sp)
    4264:	dc015217 	ldw	r16,1352(sp)
    4268:	dec15c04 	addi	sp,sp,1392
    426c:	f800283a 	ret
    4270:	0005883a 	mov	r2,zero
    4274:	0007883a 	mov	r3,zero
    4278:	dd401904 	addi	r21,sp,100
    427c:	d8814215 	stw	r2,1288(sp)
    4280:	802f883a 	mov	r23,r16
    4284:	d8c14315 	stw	r3,1292(sp)
    4288:	d8014b15 	stw	zero,1324(sp)
    428c:	d8014815 	stw	zero,1312(sp)
    4290:	d8014415 	stw	zero,1296(sp)
    4294:	d8014715 	stw	zero,1308(sp)
    4298:	dd400c15 	stw	r21,48(sp)
    429c:	d8000e15 	stw	zero,56(sp)
    42a0:	d8000d15 	stw	zero,52(sp)
    42a4:	b8800007 	ldb	r2,0(r23)
    42a8:	10001926 	beq	r2,zero,4310 <___vfprintf_internal_r+0x1dc>
    42ac:	00c00944 	movi	r3,37
    42b0:	10c01726 	beq	r2,r3,4310 <___vfprintf_internal_r+0x1dc>
    42b4:	b821883a 	mov	r16,r23
    42b8:	00000106 	br	42c0 <___vfprintf_internal_r+0x18c>
    42bc:	10c00326 	beq	r2,r3,42cc <___vfprintf_internal_r+0x198>
    42c0:	84000044 	addi	r16,r16,1
    42c4:	80800007 	ldb	r2,0(r16)
    42c8:	103ffc1e 	bne	r2,zero,42bc <___vfprintf_internal_r+0x188>
    42cc:	85e7c83a 	sub	r19,r16,r23
    42d0:	98000e26 	beq	r19,zero,430c <___vfprintf_internal_r+0x1d8>
    42d4:	dc800e17 	ldw	r18,56(sp)
    42d8:	dc400d17 	ldw	r17,52(sp)
    42dc:	008001c4 	movi	r2,7
    42e0:	94e5883a 	add	r18,r18,r19
    42e4:	8c400044 	addi	r17,r17,1
    42e8:	adc00015 	stw	r23,0(r21)
    42ec:	dc800e15 	stw	r18,56(sp)
    42f0:	acc00115 	stw	r19,4(r21)
    42f4:	dc400d15 	stw	r17,52(sp)
    42f8:	14428b16 	blt	r2,r17,4d28 <___vfprintf_internal_r+0xbf4>
    42fc:	ad400204 	addi	r21,r21,8
    4300:	d9014b17 	ldw	r4,1324(sp)
    4304:	24c9883a 	add	r4,r4,r19
    4308:	d9014b15 	stw	r4,1324(sp)
    430c:	802f883a 	mov	r23,r16
    4310:	b8800007 	ldb	r2,0(r23)
    4314:	10013c26 	beq	r2,zero,4808 <___vfprintf_internal_r+0x6d4>
    4318:	bdc00044 	addi	r23,r23,1
    431c:	d8000405 	stb	zero,16(sp)
    4320:	b8c00007 	ldb	r3,0(r23)
    4324:	04ffffc4 	movi	r19,-1
    4328:	d8014c15 	stw	zero,1328(sp)
    432c:	d8014a15 	stw	zero,1320(sp)
    4330:	d8c14d15 	stw	r3,1332(sp)
    4334:	bdc00044 	addi	r23,r23,1
    4338:	d9414d17 	ldw	r5,1332(sp)
    433c:	00801604 	movi	r2,88
    4340:	28fff804 	addi	r3,r5,-32
    4344:	10c06036 	bltu	r2,r3,44c8 <___vfprintf_internal_r+0x394>
    4348:	18c5883a 	add	r2,r3,r3
    434c:	1085883a 	add	r2,r2,r2
    4350:	00c00034 	movhi	r3,0
    4354:	18d0d904 	addi	r3,r3,17252
    4358:	10c5883a 	add	r2,r2,r3
    435c:	11000017 	ldw	r4,0(r2)
    4360:	2000683a 	jmp	r4
    4364:	000052d8 	cmpnei	zero,zero,331
    4368:	000044c8 	cmpgei	zero,zero,275
    436c:	000044c8 	cmpgei	zero,zero,275
    4370:	000052c4 	movi	zero,331
    4374:	000044c8 	cmpgei	zero,zero,275
    4378:	000044c8 	cmpgei	zero,zero,275
    437c:	000044c8 	cmpgei	zero,zero,275
    4380:	000044c8 	cmpgei	zero,zero,275
    4384:	000044c8 	cmpgei	zero,zero,275
    4388:	000044c8 	cmpgei	zero,zero,275
    438c:	000050a4 	muli	zero,zero,322
    4390:	000052b4 	movhi	zero,330
    4394:	000044c8 	cmpgei	zero,zero,275
    4398:	000050bc 	xorhi	zero,zero,322
    439c:	00005350 	cmplti	zero,zero,333
    43a0:	000044c8 	cmpgei	zero,zero,275
    43a4:	0000533c 	xorhi	zero,zero,332
    43a8:	00005304 	movi	zero,332
    43ac:	00005304 	movi	zero,332
    43b0:	00005304 	movi	zero,332
    43b4:	00005304 	movi	zero,332
    43b8:	00005304 	movi	zero,332
    43bc:	00005304 	movi	zero,332
    43c0:	00005304 	movi	zero,332
    43c4:	00005304 	movi	zero,332
    43c8:	00005304 	movi	zero,332
    43cc:	000044c8 	cmpgei	zero,zero,275
    43d0:	000044c8 	cmpgei	zero,zero,275
    43d4:	000044c8 	cmpgei	zero,zero,275
    43d8:	000044c8 	cmpgei	zero,zero,275
    43dc:	000044c8 	cmpgei	zero,zero,275
    43e0:	000044c8 	cmpgei	zero,zero,275
    43e4:	000044c8 	cmpgei	zero,zero,275
    43e8:	000044c8 	cmpgei	zero,zero,275
    43ec:	000044c8 	cmpgei	zero,zero,275
    43f0:	000044c8 	cmpgei	zero,zero,275
    43f4:	00004b20 	cmpeqi	zero,zero,300
    43f8:	0000518c 	andi	zero,zero,326
    43fc:	000044c8 	cmpgei	zero,zero,275
    4400:	0000518c 	andi	zero,zero,326
    4404:	000044c8 	cmpgei	zero,zero,275
    4408:	000044c8 	cmpgei	zero,zero,275
    440c:	000044c8 	cmpgei	zero,zero,275
    4410:	000044c8 	cmpgei	zero,zero,275
    4414:	000052f0 	cmpltui	zero,zero,331
    4418:	000044c8 	cmpgei	zero,zero,275
    441c:	000044c8 	cmpgei	zero,zero,275
    4420:	00004bd4 	movui	zero,303
    4424:	000044c8 	cmpgei	zero,zero,275
    4428:	000044c8 	cmpgei	zero,zero,275
    442c:	000044c8 	cmpgei	zero,zero,275
    4430:	000044c8 	cmpgei	zero,zero,275
    4434:	000044c8 	cmpgei	zero,zero,275
    4438:	00004c20 	cmpeqi	zero,zero,304
    443c:	000044c8 	cmpgei	zero,zero,275
    4440:	000044c8 	cmpgei	zero,zero,275
    4444:	00005240 	call	524 <cam_track+0x60>
    4448:	000044c8 	cmpgei	zero,zero,275
    444c:	000044c8 	cmpgei	zero,zero,275
    4450:	000044c8 	cmpgei	zero,zero,275
    4454:	000044c8 	cmpgei	zero,zero,275
    4458:	000044c8 	cmpgei	zero,zero,275
    445c:	000044c8 	cmpgei	zero,zero,275
    4460:	000044c8 	cmpgei	zero,zero,275
    4464:	000044c8 	cmpgei	zero,zero,275
    4468:	000044c8 	cmpgei	zero,zero,275
    446c:	000044c8 	cmpgei	zero,zero,275
    4470:	00005214 	movui	zero,328
    4474:	00004b2c 	andhi	zero,zero,300
    4478:	0000518c 	andi	zero,zero,326
    447c:	0000518c 	andi	zero,zero,326
    4480:	0000518c 	andi	zero,zero,326
    4484:	00005178 	rdprs	zero,zero,325
    4488:	00004b2c 	andhi	zero,zero,300
    448c:	000044c8 	cmpgei	zero,zero,275
    4490:	000044c8 	cmpgei	zero,zero,275
    4494:	00005100 	call	510 <cam_track+0x4c>
    4498:	000044c8 	cmpgei	zero,zero,275
    449c:	000050d0 	cmplti	zero,zero,323
    44a0:	00004be0 	cmpeqi	zero,zero,303
    44a4:	00005130 	cmpltui	zero,zero,324
    44a8:	0000511c 	xori	zero,zero,324
    44ac:	000044c8 	cmpgei	zero,zero,275
    44b0:	000053ac 	andhi	zero,zero,334
    44b4:	000044c8 	cmpgei	zero,zero,275
    44b8:	00004c2c 	andhi	zero,zero,304
    44bc:	000044c8 	cmpgei	zero,zero,275
    44c0:	000044c8 	cmpgei	zero,zero,275
    44c4:	000052a4 	muli	zero,zero,330
    44c8:	d9014d17 	ldw	r4,1332(sp)
    44cc:	2000ce26 	beq	r4,zero,4808 <___vfprintf_internal_r+0x6d4>
    44d0:	01400044 	movi	r5,1
    44d4:	d9800f04 	addi	r6,sp,60
    44d8:	d9c14015 	stw	r7,1280(sp)
    44dc:	d9414515 	stw	r5,1300(sp)
    44e0:	d9814115 	stw	r6,1284(sp)
    44e4:	280f883a 	mov	r7,r5
    44e8:	d9000f05 	stb	r4,60(sp)
    44ec:	d8000405 	stb	zero,16(sp)
    44f0:	d8014615 	stw	zero,1304(sp)
    44f4:	d8c14c17 	ldw	r3,1328(sp)
    44f8:	1880008c 	andi	r2,r3,2
    44fc:	1005003a 	cmpeq	r2,r2,zero
    4500:	d8815015 	stw	r2,1344(sp)
    4504:	1000031e 	bne	r2,zero,4514 <___vfprintf_internal_r+0x3e0>
    4508:	d9014517 	ldw	r4,1300(sp)
    450c:	21000084 	addi	r4,r4,2
    4510:	d9014515 	stw	r4,1300(sp)
    4514:	d9414c17 	ldw	r5,1328(sp)
    4518:	2940210c 	andi	r5,r5,132
    451c:	d9414e15 	stw	r5,1336(sp)
    4520:	28002d1e 	bne	r5,zero,45d8 <___vfprintf_internal_r+0x4a4>
    4524:	d9814a17 	ldw	r6,1320(sp)
    4528:	d8814517 	ldw	r2,1300(sp)
    452c:	30a1c83a 	sub	r16,r6,r2
    4530:	0400290e 	bge	zero,r16,45d8 <___vfprintf_internal_r+0x4a4>
    4534:	00800404 	movi	r2,16
    4538:	1404580e 	bge	r2,r16,569c <___vfprintf_internal_r+0x1568>
    453c:	dc800e17 	ldw	r18,56(sp)
    4540:	dc400d17 	ldw	r17,52(sp)
    4544:	1027883a 	mov	r19,r2
    4548:	07000074 	movhi	fp,1
    454c:	e7136284 	addi	fp,fp,19850
    4550:	050001c4 	movi	r20,7
    4554:	00000306 	br	4564 <___vfprintf_internal_r+0x430>
    4558:	843ffc04 	addi	r16,r16,-16
    455c:	ad400204 	addi	r21,r21,8
    4560:	9c00130e 	bge	r19,r16,45b0 <___vfprintf_internal_r+0x47c>
    4564:	94800404 	addi	r18,r18,16
    4568:	8c400044 	addi	r17,r17,1
    456c:	af000015 	stw	fp,0(r21)
    4570:	acc00115 	stw	r19,4(r21)
    4574:	dc800e15 	stw	r18,56(sp)
    4578:	dc400d15 	stw	r17,52(sp)
    457c:	a47ff60e 	bge	r20,r17,4558 <___vfprintf_internal_r+0x424>
    4580:	d9014f17 	ldw	r4,1340(sp)
    4584:	b00b883a 	mov	r5,r22
    4588:	d9800c04 	addi	r6,sp,48
    458c:	d9c15115 	stw	r7,1348(sp)
    4590:	00040dc0 	call	40dc <__sprint_r>
    4594:	d9c15117 	ldw	r7,1348(sp)
    4598:	10009e1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    459c:	843ffc04 	addi	r16,r16,-16
    45a0:	dc800e17 	ldw	r18,56(sp)
    45a4:	dc400d17 	ldw	r17,52(sp)
    45a8:	dd401904 	addi	r21,sp,100
    45ac:	9c3fed16 	blt	r19,r16,4564 <___vfprintf_internal_r+0x430>
    45b0:	9425883a 	add	r18,r18,r16
    45b4:	8c400044 	addi	r17,r17,1
    45b8:	008001c4 	movi	r2,7
    45bc:	af000015 	stw	fp,0(r21)
    45c0:	ac000115 	stw	r16,4(r21)
    45c4:	dc800e15 	stw	r18,56(sp)
    45c8:	dc400d15 	stw	r17,52(sp)
    45cc:	1441f516 	blt	r2,r17,4da4 <___vfprintf_internal_r+0xc70>
    45d0:	ad400204 	addi	r21,r21,8
    45d4:	00000206 	br	45e0 <___vfprintf_internal_r+0x4ac>
    45d8:	dc800e17 	ldw	r18,56(sp)
    45dc:	dc400d17 	ldw	r17,52(sp)
    45e0:	d8800407 	ldb	r2,16(sp)
    45e4:	10000b26 	beq	r2,zero,4614 <___vfprintf_internal_r+0x4e0>
    45e8:	00800044 	movi	r2,1
    45ec:	94800044 	addi	r18,r18,1
    45f0:	8c400044 	addi	r17,r17,1
    45f4:	a8800115 	stw	r2,4(r21)
    45f8:	d8c00404 	addi	r3,sp,16
    45fc:	008001c4 	movi	r2,7
    4600:	a8c00015 	stw	r3,0(r21)
    4604:	dc800e15 	stw	r18,56(sp)
    4608:	dc400d15 	stw	r17,52(sp)
    460c:	1441da16 	blt	r2,r17,4d78 <___vfprintf_internal_r+0xc44>
    4610:	ad400204 	addi	r21,r21,8
    4614:	d9015017 	ldw	r4,1344(sp)
    4618:	20000b1e 	bne	r4,zero,4648 <___vfprintf_internal_r+0x514>
    461c:	d8800444 	addi	r2,sp,17
    4620:	94800084 	addi	r18,r18,2
    4624:	8c400044 	addi	r17,r17,1
    4628:	a8800015 	stw	r2,0(r21)
    462c:	00c00084 	movi	r3,2
    4630:	008001c4 	movi	r2,7
    4634:	a8c00115 	stw	r3,4(r21)
    4638:	dc800e15 	stw	r18,56(sp)
    463c:	dc400d15 	stw	r17,52(sp)
    4640:	1441c216 	blt	r2,r17,4d4c <___vfprintf_internal_r+0xc18>
    4644:	ad400204 	addi	r21,r21,8
    4648:	d9414e17 	ldw	r5,1336(sp)
    464c:	00802004 	movi	r2,128
    4650:	2880b126 	beq	r5,r2,4918 <___vfprintf_internal_r+0x7e4>
    4654:	d8c14617 	ldw	r3,1304(sp)
    4658:	19e1c83a 	sub	r16,r3,r7
    465c:	0400260e 	bge	zero,r16,46f8 <___vfprintf_internal_r+0x5c4>
    4660:	00800404 	movi	r2,16
    4664:	1403c90e 	bge	r2,r16,558c <___vfprintf_internal_r+0x1458>
    4668:	1027883a 	mov	r19,r2
    466c:	07000074 	movhi	fp,1
    4670:	e7135e84 	addi	fp,fp,19834
    4674:	050001c4 	movi	r20,7
    4678:	00000306 	br	4688 <___vfprintf_internal_r+0x554>
    467c:	843ffc04 	addi	r16,r16,-16
    4680:	ad400204 	addi	r21,r21,8
    4684:	9c00130e 	bge	r19,r16,46d4 <___vfprintf_internal_r+0x5a0>
    4688:	94800404 	addi	r18,r18,16
    468c:	8c400044 	addi	r17,r17,1
    4690:	af000015 	stw	fp,0(r21)
    4694:	acc00115 	stw	r19,4(r21)
    4698:	dc800e15 	stw	r18,56(sp)
    469c:	dc400d15 	stw	r17,52(sp)
    46a0:	a47ff60e 	bge	r20,r17,467c <___vfprintf_internal_r+0x548>
    46a4:	d9014f17 	ldw	r4,1340(sp)
    46a8:	b00b883a 	mov	r5,r22
    46ac:	d9800c04 	addi	r6,sp,48
    46b0:	d9c15115 	stw	r7,1348(sp)
    46b4:	00040dc0 	call	40dc <__sprint_r>
    46b8:	d9c15117 	ldw	r7,1348(sp)
    46bc:	1000551e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    46c0:	843ffc04 	addi	r16,r16,-16
    46c4:	dc800e17 	ldw	r18,56(sp)
    46c8:	dc400d17 	ldw	r17,52(sp)
    46cc:	dd401904 	addi	r21,sp,100
    46d0:	9c3fed16 	blt	r19,r16,4688 <___vfprintf_internal_r+0x554>
    46d4:	9425883a 	add	r18,r18,r16
    46d8:	8c400044 	addi	r17,r17,1
    46dc:	008001c4 	movi	r2,7
    46e0:	af000015 	stw	fp,0(r21)
    46e4:	ac000115 	stw	r16,4(r21)
    46e8:	dc800e15 	stw	r18,56(sp)
    46ec:	dc400d15 	stw	r17,52(sp)
    46f0:	14418216 	blt	r2,r17,4cfc <___vfprintf_internal_r+0xbc8>
    46f4:	ad400204 	addi	r21,r21,8
    46f8:	d9014c17 	ldw	r4,1328(sp)
    46fc:	2080400c 	andi	r2,r4,256
    4700:	10004a1e 	bne	r2,zero,482c <___vfprintf_internal_r+0x6f8>
    4704:	d9414117 	ldw	r5,1284(sp)
    4708:	91e5883a 	add	r18,r18,r7
    470c:	8c400044 	addi	r17,r17,1
    4710:	008001c4 	movi	r2,7
    4714:	a9400015 	stw	r5,0(r21)
    4718:	a9c00115 	stw	r7,4(r21)
    471c:	dc800e15 	stw	r18,56(sp)
    4720:	dc400d15 	stw	r17,52(sp)
    4724:	14416716 	blt	r2,r17,4cc4 <___vfprintf_internal_r+0xb90>
    4728:	a8c00204 	addi	r3,r21,8
    472c:	d9814c17 	ldw	r6,1328(sp)
    4730:	3080010c 	andi	r2,r6,4
    4734:	10002826 	beq	r2,zero,47d8 <___vfprintf_internal_r+0x6a4>
    4738:	d8814a17 	ldw	r2,1320(sp)
    473c:	d9014517 	ldw	r4,1300(sp)
    4740:	1121c83a 	sub	r16,r2,r4
    4744:	0400240e 	bge	zero,r16,47d8 <___vfprintf_internal_r+0x6a4>
    4748:	00800404 	movi	r2,16
    474c:	14044f0e 	bge	r2,r16,588c <___vfprintf_internal_r+0x1758>
    4750:	dc400d17 	ldw	r17,52(sp)
    4754:	1027883a 	mov	r19,r2
    4758:	07000074 	movhi	fp,1
    475c:	e7136284 	addi	fp,fp,19850
    4760:	050001c4 	movi	r20,7
    4764:	00000306 	br	4774 <___vfprintf_internal_r+0x640>
    4768:	843ffc04 	addi	r16,r16,-16
    476c:	18c00204 	addi	r3,r3,8
    4770:	9c00110e 	bge	r19,r16,47b8 <___vfprintf_internal_r+0x684>
    4774:	94800404 	addi	r18,r18,16
    4778:	8c400044 	addi	r17,r17,1
    477c:	1f000015 	stw	fp,0(r3)
    4780:	1cc00115 	stw	r19,4(r3)
    4784:	dc800e15 	stw	r18,56(sp)
    4788:	dc400d15 	stw	r17,52(sp)
    478c:	a47ff60e 	bge	r20,r17,4768 <___vfprintf_internal_r+0x634>
    4790:	d9014f17 	ldw	r4,1340(sp)
    4794:	b00b883a 	mov	r5,r22
    4798:	d9800c04 	addi	r6,sp,48
    479c:	00040dc0 	call	40dc <__sprint_r>
    47a0:	10001c1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    47a4:	843ffc04 	addi	r16,r16,-16
    47a8:	dc800e17 	ldw	r18,56(sp)
    47ac:	dc400d17 	ldw	r17,52(sp)
    47b0:	d8c01904 	addi	r3,sp,100
    47b4:	9c3fef16 	blt	r19,r16,4774 <___vfprintf_internal_r+0x640>
    47b8:	9425883a 	add	r18,r18,r16
    47bc:	8c400044 	addi	r17,r17,1
    47c0:	008001c4 	movi	r2,7
    47c4:	1f000015 	stw	fp,0(r3)
    47c8:	1c000115 	stw	r16,4(r3)
    47cc:	dc800e15 	stw	r18,56(sp)
    47d0:	dc400d15 	stw	r17,52(sp)
    47d4:	1440cb16 	blt	r2,r17,4b04 <___vfprintf_internal_r+0x9d0>
    47d8:	d8814a17 	ldw	r2,1320(sp)
    47dc:	d9414517 	ldw	r5,1300(sp)
    47e0:	1140010e 	bge	r2,r5,47e8 <___vfprintf_internal_r+0x6b4>
    47e4:	2805883a 	mov	r2,r5
    47e8:	d9814b17 	ldw	r6,1324(sp)
    47ec:	308d883a 	add	r6,r6,r2
    47f0:	d9814b15 	stw	r6,1324(sp)
    47f4:	90013b1e 	bne	r18,zero,4ce4 <___vfprintf_internal_r+0xbb0>
    47f8:	d9c14017 	ldw	r7,1280(sp)
    47fc:	dd401904 	addi	r21,sp,100
    4800:	d8000d15 	stw	zero,52(sp)
    4804:	003ea706 	br	42a4 <___vfprintf_internal_r+0x170>
    4808:	d8800e17 	ldw	r2,56(sp)
    480c:	10053f1e 	bne	r2,zero,5d0c <___vfprintf_internal_r+0x1bd8>
    4810:	d8000d15 	stw	zero,52(sp)
    4814:	b080030b 	ldhu	r2,12(r22)
    4818:	1080100c 	andi	r2,r2,64
    481c:	103e8726 	beq	r2,zero,423c <___vfprintf_internal_r+0x108>
    4820:	00bfffc4 	movi	r2,-1
    4824:	d8814b15 	stw	r2,1324(sp)
    4828:	003e8406 	br	423c <___vfprintf_internal_r+0x108>
    482c:	d9814d17 	ldw	r6,1332(sp)
    4830:	00801944 	movi	r2,101
    4834:	11806e16 	blt	r2,r6,49f0 <___vfprintf_internal_r+0x8bc>
    4838:	d9414717 	ldw	r5,1308(sp)
    483c:	00c00044 	movi	r3,1
    4840:	1943430e 	bge	r3,r5,5550 <___vfprintf_internal_r+0x141c>
    4844:	d8814117 	ldw	r2,1284(sp)
    4848:	94800044 	addi	r18,r18,1
    484c:	8c400044 	addi	r17,r17,1
    4850:	a8800015 	stw	r2,0(r21)
    4854:	008001c4 	movi	r2,7
    4858:	a8c00115 	stw	r3,4(r21)
    485c:	dc800e15 	stw	r18,56(sp)
    4860:	dc400d15 	stw	r17,52(sp)
    4864:	1441ca16 	blt	r2,r17,4f90 <___vfprintf_internal_r+0xe5c>
    4868:	a8c00204 	addi	r3,r21,8
    486c:	d9014917 	ldw	r4,1316(sp)
    4870:	00800044 	movi	r2,1
    4874:	94800044 	addi	r18,r18,1
    4878:	8c400044 	addi	r17,r17,1
    487c:	18800115 	stw	r2,4(r3)
    4880:	008001c4 	movi	r2,7
    4884:	19000015 	stw	r4,0(r3)
    4888:	dc800e15 	stw	r18,56(sp)
    488c:	dc400d15 	stw	r17,52(sp)
    4890:	1441b616 	blt	r2,r17,4f6c <___vfprintf_internal_r+0xe38>
    4894:	1cc00204 	addi	r19,r3,8
    4898:	d9014217 	ldw	r4,1288(sp)
    489c:	d9414317 	ldw	r5,1292(sp)
    48a0:	000d883a 	mov	r6,zero
    48a4:	000f883a 	mov	r7,zero
    48a8:	0010a480 	call	10a48 <__nedf2>
    48ac:	10017426 	beq	r2,zero,4e80 <___vfprintf_internal_r+0xd4c>
    48b0:	d9414717 	ldw	r5,1308(sp)
    48b4:	d9814117 	ldw	r6,1284(sp)
    48b8:	8c400044 	addi	r17,r17,1
    48bc:	2c85883a 	add	r2,r5,r18
    48c0:	14bfffc4 	addi	r18,r2,-1
    48c4:	28bfffc4 	addi	r2,r5,-1
    48c8:	30c00044 	addi	r3,r6,1
    48cc:	98800115 	stw	r2,4(r19)
    48d0:	008001c4 	movi	r2,7
    48d4:	98c00015 	stw	r3,0(r19)
    48d8:	dc800e15 	stw	r18,56(sp)
    48dc:	dc400d15 	stw	r17,52(sp)
    48e0:	14418e16 	blt	r2,r17,4f1c <___vfprintf_internal_r+0xde8>
    48e4:	9cc00204 	addi	r19,r19,8
    48e8:	d9414817 	ldw	r5,1312(sp)
    48ec:	d8800804 	addi	r2,sp,32
    48f0:	8c400044 	addi	r17,r17,1
    48f4:	9165883a 	add	r18,r18,r5
    48f8:	98800015 	stw	r2,0(r19)
    48fc:	008001c4 	movi	r2,7
    4900:	99400115 	stw	r5,4(r19)
    4904:	dc800e15 	stw	r18,56(sp)
    4908:	dc400d15 	stw	r17,52(sp)
    490c:	1440ed16 	blt	r2,r17,4cc4 <___vfprintf_internal_r+0xb90>
    4910:	98c00204 	addi	r3,r19,8
    4914:	003f8506 	br	472c <___vfprintf_internal_r+0x5f8>
    4918:	d9814a17 	ldw	r6,1320(sp)
    491c:	d8814517 	ldw	r2,1300(sp)
    4920:	30a1c83a 	sub	r16,r6,r2
    4924:	043f4b0e 	bge	zero,r16,4654 <___vfprintf_internal_r+0x520>
    4928:	00800404 	movi	r2,16
    492c:	1404340e 	bge	r2,r16,5a00 <___vfprintf_internal_r+0x18cc>
    4930:	1027883a 	mov	r19,r2
    4934:	07000074 	movhi	fp,1
    4938:	e7135e84 	addi	fp,fp,19834
    493c:	050001c4 	movi	r20,7
    4940:	00000306 	br	4950 <___vfprintf_internal_r+0x81c>
    4944:	843ffc04 	addi	r16,r16,-16
    4948:	ad400204 	addi	r21,r21,8
    494c:	9c00130e 	bge	r19,r16,499c <___vfprintf_internal_r+0x868>
    4950:	94800404 	addi	r18,r18,16
    4954:	8c400044 	addi	r17,r17,1
    4958:	af000015 	stw	fp,0(r21)
    495c:	acc00115 	stw	r19,4(r21)
    4960:	dc800e15 	stw	r18,56(sp)
    4964:	dc400d15 	stw	r17,52(sp)
    4968:	a47ff60e 	bge	r20,r17,4944 <___vfprintf_internal_r+0x810>
    496c:	d9014f17 	ldw	r4,1340(sp)
    4970:	b00b883a 	mov	r5,r22
    4974:	d9800c04 	addi	r6,sp,48
    4978:	d9c15115 	stw	r7,1348(sp)
    497c:	00040dc0 	call	40dc <__sprint_r>
    4980:	d9c15117 	ldw	r7,1348(sp)
    4984:	103fa31e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4988:	843ffc04 	addi	r16,r16,-16
    498c:	dc800e17 	ldw	r18,56(sp)
    4990:	dc400d17 	ldw	r17,52(sp)
    4994:	dd401904 	addi	r21,sp,100
    4998:	9c3fed16 	blt	r19,r16,4950 <___vfprintf_internal_r+0x81c>
    499c:	9425883a 	add	r18,r18,r16
    49a0:	8c400044 	addi	r17,r17,1
    49a4:	008001c4 	movi	r2,7
    49a8:	af000015 	stw	fp,0(r21)
    49ac:	ac000115 	stw	r16,4(r21)
    49b0:	dc800e15 	stw	r18,56(sp)
    49b4:	dc400d15 	stw	r17,52(sp)
    49b8:	14416116 	blt	r2,r17,4f40 <___vfprintf_internal_r+0xe0c>
    49bc:	ad400204 	addi	r21,r21,8
    49c0:	003f2406 	br	4654 <___vfprintf_internal_r+0x520>
    49c4:	d9014f17 	ldw	r4,1340(sp)
    49c8:	0002a880 	call	2a88 <__sinit>
    49cc:	d9c15117 	ldw	r7,1348(sp)
    49d0:	003def06 	br	4190 <___vfprintf_internal_r+0x5c>
    49d4:	d9014f17 	ldw	r4,1340(sp)
    49d8:	b00b883a 	mov	r5,r22
    49dc:	d9c15115 	stw	r7,1348(sp)
    49e0:	00077fc0 	call	77fc <__swsetup_r>
    49e4:	d9c15117 	ldw	r7,1348(sp)
    49e8:	103dee26 	beq	r2,zero,41a4 <___vfprintf_internal_r+0x70>
    49ec:	003f8c06 	br	4820 <___vfprintf_internal_r+0x6ec>
    49f0:	d9014217 	ldw	r4,1288(sp)
    49f4:	d9414317 	ldw	r5,1292(sp)
    49f8:	000d883a 	mov	r6,zero
    49fc:	000f883a 	mov	r7,zero
    4a00:	00109c00 	call	109c0 <__eqdf2>
    4a04:	1000f21e 	bne	r2,zero,4dd0 <___vfprintf_internal_r+0xc9c>
    4a08:	00800074 	movhi	r2,1
    4a0c:	10935e04 	addi	r2,r2,19832
    4a10:	94800044 	addi	r18,r18,1
    4a14:	8c400044 	addi	r17,r17,1
    4a18:	a8800015 	stw	r2,0(r21)
    4a1c:	00c00044 	movi	r3,1
    4a20:	008001c4 	movi	r2,7
    4a24:	a8c00115 	stw	r3,4(r21)
    4a28:	dc800e15 	stw	r18,56(sp)
    4a2c:	dc400d15 	stw	r17,52(sp)
    4a30:	1442fa16 	blt	r2,r17,561c <___vfprintf_internal_r+0x14e8>
    4a34:	a8c00204 	addi	r3,r21,8
    4a38:	d8800517 	ldw	r2,20(sp)
    4a3c:	d9014717 	ldw	r4,1308(sp)
    4a40:	11015c0e 	bge	r2,r4,4fb4 <___vfprintf_internal_r+0xe80>
    4a44:	dc400d17 	ldw	r17,52(sp)
    4a48:	d9814917 	ldw	r6,1316(sp)
    4a4c:	00800044 	movi	r2,1
    4a50:	94800044 	addi	r18,r18,1
    4a54:	8c400044 	addi	r17,r17,1
    4a58:	18800115 	stw	r2,4(r3)
    4a5c:	008001c4 	movi	r2,7
    4a60:	19800015 	stw	r6,0(r3)
    4a64:	dc800e15 	stw	r18,56(sp)
    4a68:	dc400d15 	stw	r17,52(sp)
    4a6c:	14431016 	blt	r2,r17,56b0 <___vfprintf_internal_r+0x157c>
    4a70:	18c00204 	addi	r3,r3,8
    4a74:	d8814717 	ldw	r2,1308(sp)
    4a78:	143fffc4 	addi	r16,r2,-1
    4a7c:	043f2b0e 	bge	zero,r16,472c <___vfprintf_internal_r+0x5f8>
    4a80:	00800404 	movi	r2,16
    4a84:	1402a20e 	bge	r2,r16,5510 <___vfprintf_internal_r+0x13dc>
    4a88:	dc400d17 	ldw	r17,52(sp)
    4a8c:	1027883a 	mov	r19,r2
    4a90:	07000074 	movhi	fp,1
    4a94:	e7135e84 	addi	fp,fp,19834
    4a98:	050001c4 	movi	r20,7
    4a9c:	00000306 	br	4aac <___vfprintf_internal_r+0x978>
    4aa0:	18c00204 	addi	r3,r3,8
    4aa4:	843ffc04 	addi	r16,r16,-16
    4aa8:	9c029c0e 	bge	r19,r16,551c <___vfprintf_internal_r+0x13e8>
    4aac:	94800404 	addi	r18,r18,16
    4ab0:	8c400044 	addi	r17,r17,1
    4ab4:	1f000015 	stw	fp,0(r3)
    4ab8:	1cc00115 	stw	r19,4(r3)
    4abc:	dc800e15 	stw	r18,56(sp)
    4ac0:	dc400d15 	stw	r17,52(sp)
    4ac4:	a47ff60e 	bge	r20,r17,4aa0 <___vfprintf_internal_r+0x96c>
    4ac8:	d9014f17 	ldw	r4,1340(sp)
    4acc:	b00b883a 	mov	r5,r22
    4ad0:	d9800c04 	addi	r6,sp,48
    4ad4:	00040dc0 	call	40dc <__sprint_r>
    4ad8:	103f4e1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4adc:	dc800e17 	ldw	r18,56(sp)
    4ae0:	dc400d17 	ldw	r17,52(sp)
    4ae4:	d8c01904 	addi	r3,sp,100
    4ae8:	003fee06 	br	4aa4 <___vfprintf_internal_r+0x970>
    4aec:	d8802c0b 	ldhu	r2,176(sp)
    4af0:	00ffffc4 	movi	r3,-1
    4af4:	d8c14b15 	stw	r3,1324(sp)
    4af8:	1080100c 	andi	r2,r2,64
    4afc:	103dcc1e 	bne	r2,zero,4230 <___vfprintf_internal_r+0xfc>
    4b00:	003dce06 	br	423c <___vfprintf_internal_r+0x108>
    4b04:	d9014f17 	ldw	r4,1340(sp)
    4b08:	b00b883a 	mov	r5,r22
    4b0c:	d9800c04 	addi	r6,sp,48
    4b10:	00040dc0 	call	40dc <__sprint_r>
    4b14:	103f3f1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4b18:	dc800e17 	ldw	r18,56(sp)
    4b1c:	003f2e06 	br	47d8 <___vfprintf_internal_r+0x6a4>
    4b20:	d9414c17 	ldw	r5,1328(sp)
    4b24:	29400414 	ori	r5,r5,16
    4b28:	d9414c15 	stw	r5,1328(sp)
    4b2c:	d9814c17 	ldw	r6,1328(sp)
    4b30:	3080080c 	andi	r2,r6,32
    4b34:	10014f1e 	bne	r2,zero,5074 <___vfprintf_internal_r+0xf40>
    4b38:	d8c14c17 	ldw	r3,1328(sp)
    4b3c:	1880040c 	andi	r2,r3,16
    4b40:	1002ea1e 	bne	r2,zero,56ec <___vfprintf_internal_r+0x15b8>
    4b44:	d9014c17 	ldw	r4,1328(sp)
    4b48:	2080100c 	andi	r2,r4,64
    4b4c:	1002e726 	beq	r2,zero,56ec <___vfprintf_internal_r+0x15b8>
    4b50:	3880000f 	ldh	r2,0(r7)
    4b54:	39c00104 	addi	r7,r7,4
    4b58:	d9c14015 	stw	r7,1280(sp)
    4b5c:	1023d7fa 	srai	r17,r2,31
    4b60:	1021883a 	mov	r16,r2
    4b64:	88037216 	blt	r17,zero,5930 <___vfprintf_internal_r+0x17fc>
    4b68:	01000044 	movi	r4,1
    4b6c:	98000416 	blt	r19,zero,4b80 <___vfprintf_internal_r+0xa4c>
    4b70:	d8c14c17 	ldw	r3,1328(sp)
    4b74:	00bfdfc4 	movi	r2,-129
    4b78:	1886703a 	and	r3,r3,r2
    4b7c:	d8c14c15 	stw	r3,1328(sp)
    4b80:	8444b03a 	or	r2,r16,r17
    4b84:	1002261e 	bne	r2,zero,5420 <___vfprintf_internal_r+0x12ec>
    4b88:	9802251e 	bne	r19,zero,5420 <___vfprintf_internal_r+0x12ec>
    4b8c:	20803fcc 	andi	r2,r4,255
    4b90:	10029b26 	beq	r2,zero,5600 <___vfprintf_internal_r+0x14cc>
    4b94:	d8c01904 	addi	r3,sp,100
    4b98:	dd000f04 	addi	r20,sp,60
    4b9c:	d8c14115 	stw	r3,1284(sp)
    4ba0:	d8c14117 	ldw	r3,1284(sp)
    4ba4:	dcc14515 	stw	r19,1300(sp)
    4ba8:	a0c5c83a 	sub	r2,r20,r3
    4bac:	11c00a04 	addi	r7,r2,40
    4bb0:	99c0010e 	bge	r19,r7,4bb8 <___vfprintf_internal_r+0xa84>
    4bb4:	d9c14515 	stw	r7,1300(sp)
    4bb8:	dcc14615 	stw	r19,1304(sp)
    4bbc:	d8800407 	ldb	r2,16(sp)
    4bc0:	103e4c26 	beq	r2,zero,44f4 <___vfprintf_internal_r+0x3c0>
    4bc4:	d8814517 	ldw	r2,1300(sp)
    4bc8:	10800044 	addi	r2,r2,1
    4bcc:	d8814515 	stw	r2,1300(sp)
    4bd0:	003e4806 	br	44f4 <___vfprintf_internal_r+0x3c0>
    4bd4:	d9814c17 	ldw	r6,1328(sp)
    4bd8:	31800414 	ori	r6,r6,16
    4bdc:	d9814c15 	stw	r6,1328(sp)
    4be0:	d8c14c17 	ldw	r3,1328(sp)
    4be4:	1880080c 	andi	r2,r3,32
    4be8:	1001271e 	bne	r2,zero,5088 <___vfprintf_internal_r+0xf54>
    4bec:	d9414c17 	ldw	r5,1328(sp)
    4bf0:	2880040c 	andi	r2,r5,16
    4bf4:	1002b61e 	bne	r2,zero,56d0 <___vfprintf_internal_r+0x159c>
    4bf8:	d9814c17 	ldw	r6,1328(sp)
    4bfc:	3080100c 	andi	r2,r6,64
    4c00:	1002b326 	beq	r2,zero,56d0 <___vfprintf_internal_r+0x159c>
    4c04:	3c00000b 	ldhu	r16,0(r7)
    4c08:	0009883a 	mov	r4,zero
    4c0c:	39c00104 	addi	r7,r7,4
    4c10:	0023883a 	mov	r17,zero
    4c14:	d9c14015 	stw	r7,1280(sp)
    4c18:	d8000405 	stb	zero,16(sp)
    4c1c:	003fd306 	br	4b6c <___vfprintf_internal_r+0xa38>
    4c20:	d9014c17 	ldw	r4,1328(sp)
    4c24:	21000414 	ori	r4,r4,16
    4c28:	d9014c15 	stw	r4,1328(sp)
    4c2c:	d9414c17 	ldw	r5,1328(sp)
    4c30:	2880080c 	andi	r2,r5,32
    4c34:	1001081e 	bne	r2,zero,5058 <___vfprintf_internal_r+0xf24>
    4c38:	d8c14c17 	ldw	r3,1328(sp)
    4c3c:	1880040c 	andi	r2,r3,16
    4c40:	1002b01e 	bne	r2,zero,5704 <___vfprintf_internal_r+0x15d0>
    4c44:	d9014c17 	ldw	r4,1328(sp)
    4c48:	2080100c 	andi	r2,r4,64
    4c4c:	1002ad26 	beq	r2,zero,5704 <___vfprintf_internal_r+0x15d0>
    4c50:	3c00000b 	ldhu	r16,0(r7)
    4c54:	01000044 	movi	r4,1
    4c58:	39c00104 	addi	r7,r7,4
    4c5c:	0023883a 	mov	r17,zero
    4c60:	d9c14015 	stw	r7,1280(sp)
    4c64:	d8000405 	stb	zero,16(sp)
    4c68:	003fc006 	br	4b6c <___vfprintf_internal_r+0xa38>
    4c6c:	d9014f17 	ldw	r4,1340(sp)
    4c70:	b00b883a 	mov	r5,r22
    4c74:	d9800c04 	addi	r6,sp,48
    4c78:	00040dc0 	call	40dc <__sprint_r>
    4c7c:	103ee51e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4c80:	dc800e17 	ldw	r18,56(sp)
    4c84:	d8c01904 	addi	r3,sp,100
    4c88:	d9814c17 	ldw	r6,1328(sp)
    4c8c:	3080004c 	andi	r2,r6,1
    4c90:	1005003a 	cmpeq	r2,r2,zero
    4c94:	103ea51e 	bne	r2,zero,472c <___vfprintf_internal_r+0x5f8>
    4c98:	00800044 	movi	r2,1
    4c9c:	dc400d17 	ldw	r17,52(sp)
    4ca0:	18800115 	stw	r2,4(r3)
    4ca4:	d8814917 	ldw	r2,1316(sp)
    4ca8:	94800044 	addi	r18,r18,1
    4cac:	8c400044 	addi	r17,r17,1
    4cb0:	18800015 	stw	r2,0(r3)
    4cb4:	008001c4 	movi	r2,7
    4cb8:	dc800e15 	stw	r18,56(sp)
    4cbc:	dc400d15 	stw	r17,52(sp)
    4cc0:	14421e0e 	bge	r2,r17,553c <___vfprintf_internal_r+0x1408>
    4cc4:	d9014f17 	ldw	r4,1340(sp)
    4cc8:	b00b883a 	mov	r5,r22
    4ccc:	d9800c04 	addi	r6,sp,48
    4cd0:	00040dc0 	call	40dc <__sprint_r>
    4cd4:	103ecf1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4cd8:	dc800e17 	ldw	r18,56(sp)
    4cdc:	d8c01904 	addi	r3,sp,100
    4ce0:	003e9206 	br	472c <___vfprintf_internal_r+0x5f8>
    4ce4:	d9014f17 	ldw	r4,1340(sp)
    4ce8:	b00b883a 	mov	r5,r22
    4cec:	d9800c04 	addi	r6,sp,48
    4cf0:	00040dc0 	call	40dc <__sprint_r>
    4cf4:	103ec026 	beq	r2,zero,47f8 <___vfprintf_internal_r+0x6c4>
    4cf8:	003ec606 	br	4814 <___vfprintf_internal_r+0x6e0>
    4cfc:	d9014f17 	ldw	r4,1340(sp)
    4d00:	b00b883a 	mov	r5,r22
    4d04:	d9800c04 	addi	r6,sp,48
    4d08:	d9c15115 	stw	r7,1348(sp)
    4d0c:	00040dc0 	call	40dc <__sprint_r>
    4d10:	d9c15117 	ldw	r7,1348(sp)
    4d14:	103ebf1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4d18:	dc800e17 	ldw	r18,56(sp)
    4d1c:	dc400d17 	ldw	r17,52(sp)
    4d20:	dd401904 	addi	r21,sp,100
    4d24:	003e7406 	br	46f8 <___vfprintf_internal_r+0x5c4>
    4d28:	d9014f17 	ldw	r4,1340(sp)
    4d2c:	b00b883a 	mov	r5,r22
    4d30:	d9800c04 	addi	r6,sp,48
    4d34:	d9c15115 	stw	r7,1348(sp)
    4d38:	00040dc0 	call	40dc <__sprint_r>
    4d3c:	d9c15117 	ldw	r7,1348(sp)
    4d40:	103eb41e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4d44:	dd401904 	addi	r21,sp,100
    4d48:	003d6d06 	br	4300 <___vfprintf_internal_r+0x1cc>
    4d4c:	d9014f17 	ldw	r4,1340(sp)
    4d50:	b00b883a 	mov	r5,r22
    4d54:	d9800c04 	addi	r6,sp,48
    4d58:	d9c15115 	stw	r7,1348(sp)
    4d5c:	00040dc0 	call	40dc <__sprint_r>
    4d60:	d9c15117 	ldw	r7,1348(sp)
    4d64:	103eab1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4d68:	dc800e17 	ldw	r18,56(sp)
    4d6c:	dc400d17 	ldw	r17,52(sp)
    4d70:	dd401904 	addi	r21,sp,100
    4d74:	003e3406 	br	4648 <___vfprintf_internal_r+0x514>
    4d78:	d9014f17 	ldw	r4,1340(sp)
    4d7c:	b00b883a 	mov	r5,r22
    4d80:	d9800c04 	addi	r6,sp,48
    4d84:	d9c15115 	stw	r7,1348(sp)
    4d88:	00040dc0 	call	40dc <__sprint_r>
    4d8c:	d9c15117 	ldw	r7,1348(sp)
    4d90:	103ea01e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4d94:	dc800e17 	ldw	r18,56(sp)
    4d98:	dc400d17 	ldw	r17,52(sp)
    4d9c:	dd401904 	addi	r21,sp,100
    4da0:	003e1c06 	br	4614 <___vfprintf_internal_r+0x4e0>
    4da4:	d9014f17 	ldw	r4,1340(sp)
    4da8:	b00b883a 	mov	r5,r22
    4dac:	d9800c04 	addi	r6,sp,48
    4db0:	d9c15115 	stw	r7,1348(sp)
    4db4:	00040dc0 	call	40dc <__sprint_r>
    4db8:	d9c15117 	ldw	r7,1348(sp)
    4dbc:	103e951e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4dc0:	dc800e17 	ldw	r18,56(sp)
    4dc4:	dc400d17 	ldw	r17,52(sp)
    4dc8:	dd401904 	addi	r21,sp,100
    4dcc:	003e0406 	br	45e0 <___vfprintf_internal_r+0x4ac>
    4dd0:	d9000517 	ldw	r4,20(sp)
    4dd4:	0102520e 	bge	zero,r4,5720 <___vfprintf_internal_r+0x15ec>
    4dd8:	d9814717 	ldw	r6,1308(sp)
    4ddc:	21807a16 	blt	r4,r6,4fc8 <___vfprintf_internal_r+0xe94>
    4de0:	d8814117 	ldw	r2,1284(sp)
    4de4:	91a5883a 	add	r18,r18,r6
    4de8:	8c400044 	addi	r17,r17,1
    4dec:	a8800015 	stw	r2,0(r21)
    4df0:	008001c4 	movi	r2,7
    4df4:	a9800115 	stw	r6,4(r21)
    4df8:	dc800e15 	stw	r18,56(sp)
    4dfc:	dc400d15 	stw	r17,52(sp)
    4e00:	1442f616 	blt	r2,r17,59dc <___vfprintf_internal_r+0x18a8>
    4e04:	a8c00204 	addi	r3,r21,8
    4e08:	d9414717 	ldw	r5,1308(sp)
    4e0c:	2161c83a 	sub	r16,r4,r5
    4e10:	043f9d0e 	bge	zero,r16,4c88 <___vfprintf_internal_r+0xb54>
    4e14:	00800404 	movi	r2,16
    4e18:	1402130e 	bge	r2,r16,5668 <___vfprintf_internal_r+0x1534>
    4e1c:	dc400d17 	ldw	r17,52(sp)
    4e20:	1027883a 	mov	r19,r2
    4e24:	07000074 	movhi	fp,1
    4e28:	e7135e84 	addi	fp,fp,19834
    4e2c:	050001c4 	movi	r20,7
    4e30:	00000306 	br	4e40 <___vfprintf_internal_r+0xd0c>
    4e34:	18c00204 	addi	r3,r3,8
    4e38:	843ffc04 	addi	r16,r16,-16
    4e3c:	9c020d0e 	bge	r19,r16,5674 <___vfprintf_internal_r+0x1540>
    4e40:	94800404 	addi	r18,r18,16
    4e44:	8c400044 	addi	r17,r17,1
    4e48:	1f000015 	stw	fp,0(r3)
    4e4c:	1cc00115 	stw	r19,4(r3)
    4e50:	dc800e15 	stw	r18,56(sp)
    4e54:	dc400d15 	stw	r17,52(sp)
    4e58:	a47ff60e 	bge	r20,r17,4e34 <___vfprintf_internal_r+0xd00>
    4e5c:	d9014f17 	ldw	r4,1340(sp)
    4e60:	b00b883a 	mov	r5,r22
    4e64:	d9800c04 	addi	r6,sp,48
    4e68:	00040dc0 	call	40dc <__sprint_r>
    4e6c:	103e691e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4e70:	dc800e17 	ldw	r18,56(sp)
    4e74:	dc400d17 	ldw	r17,52(sp)
    4e78:	d8c01904 	addi	r3,sp,100
    4e7c:	003fee06 	br	4e38 <___vfprintf_internal_r+0xd04>
    4e80:	d8814717 	ldw	r2,1308(sp)
    4e84:	143fffc4 	addi	r16,r2,-1
    4e88:	043e970e 	bge	zero,r16,48e8 <___vfprintf_internal_r+0x7b4>
    4e8c:	00800404 	movi	r2,16
    4e90:	1400180e 	bge	r2,r16,4ef4 <___vfprintf_internal_r+0xdc0>
    4e94:	1029883a 	mov	r20,r2
    4e98:	07000074 	movhi	fp,1
    4e9c:	e7135e84 	addi	fp,fp,19834
    4ea0:	054001c4 	movi	r21,7
    4ea4:	00000306 	br	4eb4 <___vfprintf_internal_r+0xd80>
    4ea8:	9cc00204 	addi	r19,r19,8
    4eac:	843ffc04 	addi	r16,r16,-16
    4eb0:	a400120e 	bge	r20,r16,4efc <___vfprintf_internal_r+0xdc8>
    4eb4:	94800404 	addi	r18,r18,16
    4eb8:	8c400044 	addi	r17,r17,1
    4ebc:	9f000015 	stw	fp,0(r19)
    4ec0:	9d000115 	stw	r20,4(r19)
    4ec4:	dc800e15 	stw	r18,56(sp)
    4ec8:	dc400d15 	stw	r17,52(sp)
    4ecc:	ac7ff60e 	bge	r21,r17,4ea8 <___vfprintf_internal_r+0xd74>
    4ed0:	d9014f17 	ldw	r4,1340(sp)
    4ed4:	b00b883a 	mov	r5,r22
    4ed8:	d9800c04 	addi	r6,sp,48
    4edc:	00040dc0 	call	40dc <__sprint_r>
    4ee0:	103e4c1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4ee4:	dc800e17 	ldw	r18,56(sp)
    4ee8:	dc400d17 	ldw	r17,52(sp)
    4eec:	dcc01904 	addi	r19,sp,100
    4ef0:	003fee06 	br	4eac <___vfprintf_internal_r+0xd78>
    4ef4:	07000074 	movhi	fp,1
    4ef8:	e7135e84 	addi	fp,fp,19834
    4efc:	9425883a 	add	r18,r18,r16
    4f00:	8c400044 	addi	r17,r17,1
    4f04:	008001c4 	movi	r2,7
    4f08:	9f000015 	stw	fp,0(r19)
    4f0c:	9c000115 	stw	r16,4(r19)
    4f10:	dc800e15 	stw	r18,56(sp)
    4f14:	dc400d15 	stw	r17,52(sp)
    4f18:	147e720e 	bge	r2,r17,48e4 <___vfprintf_internal_r+0x7b0>
    4f1c:	d9014f17 	ldw	r4,1340(sp)
    4f20:	b00b883a 	mov	r5,r22
    4f24:	d9800c04 	addi	r6,sp,48
    4f28:	00040dc0 	call	40dc <__sprint_r>
    4f2c:	103e391e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4f30:	dc800e17 	ldw	r18,56(sp)
    4f34:	dc400d17 	ldw	r17,52(sp)
    4f38:	dcc01904 	addi	r19,sp,100
    4f3c:	003e6a06 	br	48e8 <___vfprintf_internal_r+0x7b4>
    4f40:	d9014f17 	ldw	r4,1340(sp)
    4f44:	b00b883a 	mov	r5,r22
    4f48:	d9800c04 	addi	r6,sp,48
    4f4c:	d9c15115 	stw	r7,1348(sp)
    4f50:	00040dc0 	call	40dc <__sprint_r>
    4f54:	d9c15117 	ldw	r7,1348(sp)
    4f58:	103e2e1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4f5c:	dc800e17 	ldw	r18,56(sp)
    4f60:	dc400d17 	ldw	r17,52(sp)
    4f64:	dd401904 	addi	r21,sp,100
    4f68:	003dba06 	br	4654 <___vfprintf_internal_r+0x520>
    4f6c:	d9014f17 	ldw	r4,1340(sp)
    4f70:	b00b883a 	mov	r5,r22
    4f74:	d9800c04 	addi	r6,sp,48
    4f78:	00040dc0 	call	40dc <__sprint_r>
    4f7c:	103e251e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4f80:	dc800e17 	ldw	r18,56(sp)
    4f84:	dc400d17 	ldw	r17,52(sp)
    4f88:	dcc01904 	addi	r19,sp,100
    4f8c:	003e4206 	br	4898 <___vfprintf_internal_r+0x764>
    4f90:	d9014f17 	ldw	r4,1340(sp)
    4f94:	b00b883a 	mov	r5,r22
    4f98:	d9800c04 	addi	r6,sp,48
    4f9c:	00040dc0 	call	40dc <__sprint_r>
    4fa0:	103e1c1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    4fa4:	dc800e17 	ldw	r18,56(sp)
    4fa8:	dc400d17 	ldw	r17,52(sp)
    4fac:	d8c01904 	addi	r3,sp,100
    4fb0:	003e2e06 	br	486c <___vfprintf_internal_r+0x738>
    4fb4:	d9414c17 	ldw	r5,1328(sp)
    4fb8:	2880004c 	andi	r2,r5,1
    4fbc:	1005003a 	cmpeq	r2,r2,zero
    4fc0:	103dda1e 	bne	r2,zero,472c <___vfprintf_internal_r+0x5f8>
    4fc4:	003e9f06 	br	4a44 <___vfprintf_internal_r+0x910>
    4fc8:	d8c14117 	ldw	r3,1284(sp)
    4fcc:	9125883a 	add	r18,r18,r4
    4fd0:	8c400044 	addi	r17,r17,1
    4fd4:	008001c4 	movi	r2,7
    4fd8:	a8c00015 	stw	r3,0(r21)
    4fdc:	a9000115 	stw	r4,4(r21)
    4fe0:	dc800e15 	stw	r18,56(sp)
    4fe4:	dc400d15 	stw	r17,52(sp)
    4fe8:	14426616 	blt	r2,r17,5984 <___vfprintf_internal_r+0x1850>
    4fec:	a8c00204 	addi	r3,r21,8
    4ff0:	d9414917 	ldw	r5,1316(sp)
    4ff4:	00800044 	movi	r2,1
    4ff8:	94800044 	addi	r18,r18,1
    4ffc:	8c400044 	addi	r17,r17,1
    5000:	18800115 	stw	r2,4(r3)
    5004:	008001c4 	movi	r2,7
    5008:	19400015 	stw	r5,0(r3)
    500c:	dc800e15 	stw	r18,56(sp)
    5010:	dc400d15 	stw	r17,52(sp)
    5014:	2021883a 	mov	r16,r4
    5018:	14425016 	blt	r2,r17,595c <___vfprintf_internal_r+0x1828>
    501c:	19400204 	addi	r5,r3,8
    5020:	d9814717 	ldw	r6,1308(sp)
    5024:	8c400044 	addi	r17,r17,1
    5028:	dc400d15 	stw	r17,52(sp)
    502c:	3107c83a 	sub	r3,r6,r4
    5030:	d9014117 	ldw	r4,1284(sp)
    5034:	90e5883a 	add	r18,r18,r3
    5038:	28c00115 	stw	r3,4(r5)
    503c:	8105883a 	add	r2,r16,r4
    5040:	28800015 	stw	r2,0(r5)
    5044:	008001c4 	movi	r2,7
    5048:	dc800e15 	stw	r18,56(sp)
    504c:	147f1d16 	blt	r2,r17,4cc4 <___vfprintf_internal_r+0xb90>
    5050:	28c00204 	addi	r3,r5,8
    5054:	003db506 	br	472c <___vfprintf_internal_r+0x5f8>
    5058:	3c000017 	ldw	r16,0(r7)
    505c:	3c400117 	ldw	r17,4(r7)
    5060:	39800204 	addi	r6,r7,8
    5064:	01000044 	movi	r4,1
    5068:	d9814015 	stw	r6,1280(sp)
    506c:	d8000405 	stb	zero,16(sp)
    5070:	003ebe06 	br	4b6c <___vfprintf_internal_r+0xa38>
    5074:	3c000017 	ldw	r16,0(r7)
    5078:	3c400117 	ldw	r17,4(r7)
    507c:	38800204 	addi	r2,r7,8
    5080:	d8814015 	stw	r2,1280(sp)
    5084:	003eb706 	br	4b64 <___vfprintf_internal_r+0xa30>
    5088:	3c000017 	ldw	r16,0(r7)
    508c:	3c400117 	ldw	r17,4(r7)
    5090:	39000204 	addi	r4,r7,8
    5094:	d9014015 	stw	r4,1280(sp)
    5098:	0009883a 	mov	r4,zero
    509c:	d8000405 	stb	zero,16(sp)
    50a0:	003eb206 	br	4b6c <___vfprintf_internal_r+0xa38>
    50a4:	38c00017 	ldw	r3,0(r7)
    50a8:	39c00104 	addi	r7,r7,4
    50ac:	d8c14a15 	stw	r3,1320(sp)
    50b0:	1800d10e 	bge	r3,zero,53f8 <___vfprintf_internal_r+0x12c4>
    50b4:	00c7c83a 	sub	r3,zero,r3
    50b8:	d8c14a15 	stw	r3,1320(sp)
    50bc:	d9014c17 	ldw	r4,1328(sp)
    50c0:	b8c00007 	ldb	r3,0(r23)
    50c4:	21000114 	ori	r4,r4,4
    50c8:	d9014c15 	stw	r4,1328(sp)
    50cc:	003c9806 	br	4330 <___vfprintf_internal_r+0x1fc>
    50d0:	d9814c17 	ldw	r6,1328(sp)
    50d4:	3080080c 	andi	r2,r6,32
    50d8:	1001f026 	beq	r2,zero,589c <___vfprintf_internal_r+0x1768>
    50dc:	d9014b17 	ldw	r4,1324(sp)
    50e0:	38800017 	ldw	r2,0(r7)
    50e4:	39c00104 	addi	r7,r7,4
    50e8:	d9c14015 	stw	r7,1280(sp)
    50ec:	2007d7fa 	srai	r3,r4,31
    50f0:	d9c14017 	ldw	r7,1280(sp)
    50f4:	11000015 	stw	r4,0(r2)
    50f8:	10c00115 	stw	r3,4(r2)
    50fc:	003c6906 	br	42a4 <___vfprintf_internal_r+0x170>
    5100:	b8c00007 	ldb	r3,0(r23)
    5104:	00801b04 	movi	r2,108
    5108:	18824f26 	beq	r3,r2,5a48 <___vfprintf_internal_r+0x1914>
    510c:	d9414c17 	ldw	r5,1328(sp)
    5110:	29400414 	ori	r5,r5,16
    5114:	d9414c15 	stw	r5,1328(sp)
    5118:	003c8506 	br	4330 <___vfprintf_internal_r+0x1fc>
    511c:	d9814c17 	ldw	r6,1328(sp)
    5120:	b8c00007 	ldb	r3,0(r23)
    5124:	31800814 	ori	r6,r6,32
    5128:	d9814c15 	stw	r6,1328(sp)
    512c:	003c8006 	br	4330 <___vfprintf_internal_r+0x1fc>
    5130:	d8814c17 	ldw	r2,1328(sp)
    5134:	3c000017 	ldw	r16,0(r7)
    5138:	00c01e04 	movi	r3,120
    513c:	10800094 	ori	r2,r2,2
    5140:	d8814c15 	stw	r2,1328(sp)
    5144:	39c00104 	addi	r7,r7,4
    5148:	01400074 	movhi	r5,1
    514c:	29534704 	addi	r5,r5,19740
    5150:	00800c04 	movi	r2,48
    5154:	0023883a 	mov	r17,zero
    5158:	01000084 	movi	r4,2
    515c:	d9c14015 	stw	r7,1280(sp)
    5160:	d8c14d15 	stw	r3,1332(sp)
    5164:	d9414415 	stw	r5,1296(sp)
    5168:	d8800445 	stb	r2,17(sp)
    516c:	d8c00485 	stb	r3,18(sp)
    5170:	d8000405 	stb	zero,16(sp)
    5174:	003e7d06 	br	4b6c <___vfprintf_internal_r+0xa38>
    5178:	d8814c17 	ldw	r2,1328(sp)
    517c:	b8c00007 	ldb	r3,0(r23)
    5180:	10801014 	ori	r2,r2,64
    5184:	d8814c15 	stw	r2,1328(sp)
    5188:	003c6906 	br	4330 <___vfprintf_internal_r+0x1fc>
    518c:	d9414c17 	ldw	r5,1328(sp)
    5190:	2880020c 	andi	r2,r5,8
    5194:	1001df26 	beq	r2,zero,5914 <___vfprintf_internal_r+0x17e0>
    5198:	39800017 	ldw	r6,0(r7)
    519c:	38800204 	addi	r2,r7,8
    51a0:	d8814015 	stw	r2,1280(sp)
    51a4:	d9814215 	stw	r6,1288(sp)
    51a8:	39c00117 	ldw	r7,4(r7)
    51ac:	d9c14315 	stw	r7,1292(sp)
    51b0:	d9014217 	ldw	r4,1288(sp)
    51b4:	d9414317 	ldw	r5,1292(sp)
    51b8:	000bd080 	call	bd08 <__isinfd>
    51bc:	10021726 	beq	r2,zero,5a1c <___vfprintf_internal_r+0x18e8>
    51c0:	d9014217 	ldw	r4,1288(sp)
    51c4:	d9414317 	ldw	r5,1292(sp)
    51c8:	000d883a 	mov	r6,zero
    51cc:	000f883a 	mov	r7,zero
    51d0:	0010be00 	call	10be0 <__ltdf2>
    51d4:	1002ca16 	blt	r2,zero,5d00 <___vfprintf_internal_r+0x1bcc>
    51d8:	d9414d17 	ldw	r5,1332(sp)
    51dc:	008011c4 	movi	r2,71
    51e0:	11420a16 	blt	r2,r5,5a0c <___vfprintf_internal_r+0x18d8>
    51e4:	01800074 	movhi	r6,1
    51e8:	31934c04 	addi	r6,r6,19760
    51ec:	d9814115 	stw	r6,1284(sp)
    51f0:	d9014c17 	ldw	r4,1328(sp)
    51f4:	00c000c4 	movi	r3,3
    51f8:	00bfdfc4 	movi	r2,-129
    51fc:	2088703a 	and	r4,r4,r2
    5200:	180f883a 	mov	r7,r3
    5204:	d8c14515 	stw	r3,1300(sp)
    5208:	d9014c15 	stw	r4,1328(sp)
    520c:	d8014615 	stw	zero,1304(sp)
    5210:	003e6a06 	br	4bbc <___vfprintf_internal_r+0xa88>
    5214:	38800017 	ldw	r2,0(r7)
    5218:	00c00044 	movi	r3,1
    521c:	39c00104 	addi	r7,r7,4
    5220:	d9c14015 	stw	r7,1280(sp)
    5224:	d9000f04 	addi	r4,sp,60
    5228:	180f883a 	mov	r7,r3
    522c:	d8c14515 	stw	r3,1300(sp)
    5230:	d9014115 	stw	r4,1284(sp)
    5234:	d8800f05 	stb	r2,60(sp)
    5238:	d8000405 	stb	zero,16(sp)
    523c:	003cac06 	br	44f0 <___vfprintf_internal_r+0x3bc>
    5240:	01400074 	movhi	r5,1
    5244:	29535204 	addi	r5,r5,19784
    5248:	d9414415 	stw	r5,1296(sp)
    524c:	d9814c17 	ldw	r6,1328(sp)
    5250:	3080080c 	andi	r2,r6,32
    5254:	1000f926 	beq	r2,zero,563c <___vfprintf_internal_r+0x1508>
    5258:	3c000017 	ldw	r16,0(r7)
    525c:	3c400117 	ldw	r17,4(r7)
    5260:	38800204 	addi	r2,r7,8
    5264:	d8814015 	stw	r2,1280(sp)
    5268:	d9414c17 	ldw	r5,1328(sp)
    526c:	2880004c 	andi	r2,r5,1
    5270:	1005003a 	cmpeq	r2,r2,zero
    5274:	1000b31e 	bne	r2,zero,5544 <___vfprintf_internal_r+0x1410>
    5278:	8444b03a 	or	r2,r16,r17
    527c:	1000b126 	beq	r2,zero,5544 <___vfprintf_internal_r+0x1410>
    5280:	d9814d17 	ldw	r6,1332(sp)
    5284:	29400094 	ori	r5,r5,2
    5288:	00800c04 	movi	r2,48
    528c:	01000084 	movi	r4,2
    5290:	d9414c15 	stw	r5,1328(sp)
    5294:	d8800445 	stb	r2,17(sp)
    5298:	d9800485 	stb	r6,18(sp)
    529c:	d8000405 	stb	zero,16(sp)
    52a0:	003e3206 	br	4b6c <___vfprintf_internal_r+0xa38>
    52a4:	01800074 	movhi	r6,1
    52a8:	31934704 	addi	r6,r6,19740
    52ac:	d9814415 	stw	r6,1296(sp)
    52b0:	003fe606 	br	524c <___vfprintf_internal_r+0x1118>
    52b4:	00800ac4 	movi	r2,43
    52b8:	d8800405 	stb	r2,16(sp)
    52bc:	b8c00007 	ldb	r3,0(r23)
    52c0:	003c1b06 	br	4330 <___vfprintf_internal_r+0x1fc>
    52c4:	d8814c17 	ldw	r2,1328(sp)
    52c8:	b8c00007 	ldb	r3,0(r23)
    52cc:	10800054 	ori	r2,r2,1
    52d0:	d8814c15 	stw	r2,1328(sp)
    52d4:	003c1606 	br	4330 <___vfprintf_internal_r+0x1fc>
    52d8:	d8800407 	ldb	r2,16(sp)
    52dc:	1000461e 	bne	r2,zero,53f8 <___vfprintf_internal_r+0x12c4>
    52e0:	00800804 	movi	r2,32
    52e4:	d8800405 	stb	r2,16(sp)
    52e8:	b8c00007 	ldb	r3,0(r23)
    52ec:	003c1006 	br	4330 <___vfprintf_internal_r+0x1fc>
    52f0:	d9814c17 	ldw	r6,1328(sp)
    52f4:	b8c00007 	ldb	r3,0(r23)
    52f8:	31800214 	ori	r6,r6,8
    52fc:	d9814c15 	stw	r6,1328(sp)
    5300:	003c0b06 	br	4330 <___vfprintf_internal_r+0x1fc>
    5304:	0007883a 	mov	r3,zero
    5308:	01000244 	movi	r4,9
    530c:	188002a4 	muli	r2,r3,10
    5310:	b8c00007 	ldb	r3,0(r23)
    5314:	d9814d17 	ldw	r6,1332(sp)
    5318:	bdc00044 	addi	r23,r23,1
    531c:	d8c14d15 	stw	r3,1332(sp)
    5320:	d9414d17 	ldw	r5,1332(sp)
    5324:	3085883a 	add	r2,r6,r2
    5328:	10fff404 	addi	r3,r2,-48
    532c:	28bff404 	addi	r2,r5,-48
    5330:	20bff62e 	bgeu	r4,r2,530c <___vfprintf_internal_r+0x11d8>
    5334:	d8c14a15 	stw	r3,1320(sp)
    5338:	003bff06 	br	4338 <___vfprintf_internal_r+0x204>
    533c:	d9414c17 	ldw	r5,1328(sp)
    5340:	b8c00007 	ldb	r3,0(r23)
    5344:	29402014 	ori	r5,r5,128
    5348:	d9414c15 	stw	r5,1328(sp)
    534c:	003bf806 	br	4330 <___vfprintf_internal_r+0x1fc>
    5350:	b8c00007 	ldb	r3,0(r23)
    5354:	00800a84 	movi	r2,42
    5358:	bdc00044 	addi	r23,r23,1
    535c:	18831526 	beq	r3,r2,5fb4 <___vfprintf_internal_r+0x1e80>
    5360:	d8c14d15 	stw	r3,1332(sp)
    5364:	18bff404 	addi	r2,r3,-48
    5368:	00c00244 	movi	r3,9
    536c:	18827836 	bltu	r3,r2,5d50 <___vfprintf_internal_r+0x1c1c>
    5370:	000d883a 	mov	r6,zero
    5374:	308002a4 	muli	r2,r6,10
    5378:	b9800007 	ldb	r6,0(r23)
    537c:	d9414d17 	ldw	r5,1332(sp)
    5380:	bdc00044 	addi	r23,r23,1
    5384:	d9814d15 	stw	r6,1332(sp)
    5388:	d9014d17 	ldw	r4,1332(sp)
    538c:	1145883a 	add	r2,r2,r5
    5390:	11bff404 	addi	r6,r2,-48
    5394:	20bff404 	addi	r2,r4,-48
    5398:	18bff62e 	bgeu	r3,r2,5374 <___vfprintf_internal_r+0x1240>
    539c:	3027883a 	mov	r19,r6
    53a0:	303be50e 	bge	r6,zero,4338 <___vfprintf_internal_r+0x204>
    53a4:	04ffffc4 	movi	r19,-1
    53a8:	003be306 	br	4338 <___vfprintf_internal_r+0x204>
    53ac:	d8000405 	stb	zero,16(sp)
    53b0:	39800017 	ldw	r6,0(r7)
    53b4:	39c00104 	addi	r7,r7,4
    53b8:	d9c14015 	stw	r7,1280(sp)
    53bc:	d9814115 	stw	r6,1284(sp)
    53c0:	3001c926 	beq	r6,zero,5ae8 <___vfprintf_internal_r+0x19b4>
    53c4:	98000e16 	blt	r19,zero,5400 <___vfprintf_internal_r+0x12cc>
    53c8:	d9014117 	ldw	r4,1284(sp)
    53cc:	000b883a 	mov	r5,zero
    53d0:	980d883a 	mov	r6,r19
    53d4:	00035a00 	call	35a0 <memchr>
    53d8:	10025926 	beq	r2,zero,5d40 <___vfprintf_internal_r+0x1c0c>
    53dc:	d8c14117 	ldw	r3,1284(sp)
    53e0:	10cfc83a 	sub	r7,r2,r3
    53e4:	99c19e16 	blt	r19,r7,5a60 <___vfprintf_internal_r+0x192c>
    53e8:	d9c14515 	stw	r7,1300(sp)
    53ec:	38000916 	blt	r7,zero,5414 <___vfprintf_internal_r+0x12e0>
    53f0:	d8014615 	stw	zero,1304(sp)
    53f4:	003df106 	br	4bbc <___vfprintf_internal_r+0xa88>
    53f8:	b8c00007 	ldb	r3,0(r23)
    53fc:	003bcc06 	br	4330 <___vfprintf_internal_r+0x1fc>
    5400:	d9014117 	ldw	r4,1284(sp)
    5404:	00040680 	call	4068 <strlen>
    5408:	d8814515 	stw	r2,1300(sp)
    540c:	100f883a 	mov	r7,r2
    5410:	103ff70e 	bge	r2,zero,53f0 <___vfprintf_internal_r+0x12bc>
    5414:	d8014515 	stw	zero,1300(sp)
    5418:	d8014615 	stw	zero,1304(sp)
    541c:	003de706 	br	4bbc <___vfprintf_internal_r+0xa88>
    5420:	20c03fcc 	andi	r3,r4,255
    5424:	00800044 	movi	r2,1
    5428:	18802d26 	beq	r3,r2,54e0 <___vfprintf_internal_r+0x13ac>
    542c:	18800e36 	bltu	r3,r2,5468 <___vfprintf_internal_r+0x1334>
    5430:	00800084 	movi	r2,2
    5434:	1880fa26 	beq	r3,r2,5820 <___vfprintf_internal_r+0x16ec>
    5438:	01000074 	movhi	r4,1
    543c:	21135704 	addi	r4,r4,19804
    5440:	00040680 	call	4068 <strlen>
    5444:	100f883a 	mov	r7,r2
    5448:	dcc14515 	stw	r19,1300(sp)
    544c:	9880010e 	bge	r19,r2,5454 <___vfprintf_internal_r+0x1320>
    5450:	d8814515 	stw	r2,1300(sp)
    5454:	00800074 	movhi	r2,1
    5458:	10935704 	addi	r2,r2,19804
    545c:	dcc14615 	stw	r19,1304(sp)
    5460:	d8814115 	stw	r2,1284(sp)
    5464:	003dd506 	br	4bbc <___vfprintf_internal_r+0xa88>
    5468:	d9401904 	addi	r5,sp,100
    546c:	dd000f04 	addi	r20,sp,60
    5470:	d9414115 	stw	r5,1284(sp)
    5474:	880a977a 	slli	r5,r17,29
    5478:	d9814117 	ldw	r6,1284(sp)
    547c:	8004d0fa 	srli	r2,r16,3
    5480:	8806d0fa 	srli	r3,r17,3
    5484:	810001cc 	andi	r4,r16,7
    5488:	2884b03a 	or	r2,r5,r2
    548c:	31bfffc4 	addi	r6,r6,-1
    5490:	21000c04 	addi	r4,r4,48
    5494:	d9814115 	stw	r6,1284(sp)
    5498:	10cab03a 	or	r5,r2,r3
    549c:	31000005 	stb	r4,0(r6)
    54a0:	1021883a 	mov	r16,r2
    54a4:	1823883a 	mov	r17,r3
    54a8:	283ff21e 	bne	r5,zero,5474 <___vfprintf_internal_r+0x1340>
    54ac:	d8c14c17 	ldw	r3,1328(sp)
    54b0:	1880004c 	andi	r2,r3,1
    54b4:	1005003a 	cmpeq	r2,r2,zero
    54b8:	103db91e 	bne	r2,zero,4ba0 <___vfprintf_internal_r+0xa6c>
    54bc:	20803fcc 	andi	r2,r4,255
    54c0:	1080201c 	xori	r2,r2,128
    54c4:	10bfe004 	addi	r2,r2,-128
    54c8:	00c00c04 	movi	r3,48
    54cc:	10fdb426 	beq	r2,r3,4ba0 <___vfprintf_internal_r+0xa6c>
    54d0:	31bfffc4 	addi	r6,r6,-1
    54d4:	d9814115 	stw	r6,1284(sp)
    54d8:	30c00005 	stb	r3,0(r6)
    54dc:	003db006 	br	4ba0 <___vfprintf_internal_r+0xa6c>
    54e0:	88800068 	cmpgeui	r2,r17,1
    54e4:	10002c1e 	bne	r2,zero,5598 <___vfprintf_internal_r+0x1464>
    54e8:	8800021e 	bne	r17,zero,54f4 <___vfprintf_internal_r+0x13c0>
    54ec:	00800244 	movi	r2,9
    54f0:	14002936 	bltu	r2,r16,5598 <___vfprintf_internal_r+0x1464>
    54f4:	d90018c4 	addi	r4,sp,99
    54f8:	dd000f04 	addi	r20,sp,60
    54fc:	d9014115 	stw	r4,1284(sp)
    5500:	d9014117 	ldw	r4,1284(sp)
    5504:	80800c04 	addi	r2,r16,48
    5508:	20800005 	stb	r2,0(r4)
    550c:	003da406 	br	4ba0 <___vfprintf_internal_r+0xa6c>
    5510:	dc400d17 	ldw	r17,52(sp)
    5514:	07000074 	movhi	fp,1
    5518:	e7135e84 	addi	fp,fp,19834
    551c:	9425883a 	add	r18,r18,r16
    5520:	8c400044 	addi	r17,r17,1
    5524:	008001c4 	movi	r2,7
    5528:	1f000015 	stw	fp,0(r3)
    552c:	1c000115 	stw	r16,4(r3)
    5530:	dc800e15 	stw	r18,56(sp)
    5534:	dc400d15 	stw	r17,52(sp)
    5538:	147de216 	blt	r2,r17,4cc4 <___vfprintf_internal_r+0xb90>
    553c:	18c00204 	addi	r3,r3,8
    5540:	003c7a06 	br	472c <___vfprintf_internal_r+0x5f8>
    5544:	01000084 	movi	r4,2
    5548:	d8000405 	stb	zero,16(sp)
    554c:	003d8706 	br	4b6c <___vfprintf_internal_r+0xa38>
    5550:	d9814c17 	ldw	r6,1328(sp)
    5554:	30c4703a 	and	r2,r6,r3
    5558:	1005003a 	cmpeq	r2,r2,zero
    555c:	103cb926 	beq	r2,zero,4844 <___vfprintf_internal_r+0x710>
    5560:	d9014117 	ldw	r4,1284(sp)
    5564:	94800044 	addi	r18,r18,1
    5568:	8c400044 	addi	r17,r17,1
    556c:	008001c4 	movi	r2,7
    5570:	a9000015 	stw	r4,0(r21)
    5574:	a8c00115 	stw	r3,4(r21)
    5578:	dc800e15 	stw	r18,56(sp)
    557c:	dc400d15 	stw	r17,52(sp)
    5580:	147e6616 	blt	r2,r17,4f1c <___vfprintf_internal_r+0xde8>
    5584:	acc00204 	addi	r19,r21,8
    5588:	003cd706 	br	48e8 <___vfprintf_internal_r+0x7b4>
    558c:	07000074 	movhi	fp,1
    5590:	e7135e84 	addi	fp,fp,19834
    5594:	003c4f06 	br	46d4 <___vfprintf_internal_r+0x5a0>
    5598:	dd000f04 	addi	r20,sp,60
    559c:	dc801904 	addi	r18,sp,100
    55a0:	8009883a 	mov	r4,r16
    55a4:	880b883a 	mov	r5,r17
    55a8:	01800284 	movi	r6,10
    55ac:	000f883a 	mov	r7,zero
    55b0:	000f7880 	call	f788 <__umoddi3>
    55b4:	12000c04 	addi	r8,r2,48
    55b8:	94bfffc4 	addi	r18,r18,-1
    55bc:	8009883a 	mov	r4,r16
    55c0:	880b883a 	mov	r5,r17
    55c4:	01800284 	movi	r6,10
    55c8:	000f883a 	mov	r7,zero
    55cc:	92000005 	stb	r8,0(r18)
    55d0:	000f1ac0 	call	f1ac <__udivdi3>
    55d4:	1009883a 	mov	r4,r2
    55d8:	1021883a 	mov	r16,r2
    55dc:	18800068 	cmpgeui	r2,r3,1
    55e0:	1823883a 	mov	r17,r3
    55e4:	103fee1e 	bne	r2,zero,55a0 <___vfprintf_internal_r+0x146c>
    55e8:	1800021e 	bne	r3,zero,55f4 <___vfprintf_internal_r+0x14c0>
    55ec:	00800244 	movi	r2,9
    55f0:	113feb36 	bltu	r2,r4,55a0 <___vfprintf_internal_r+0x146c>
    55f4:	94bfffc4 	addi	r18,r18,-1
    55f8:	dc814115 	stw	r18,1284(sp)
    55fc:	003fc006 	br	5500 <___vfprintf_internal_r+0x13cc>
    5600:	d9014c17 	ldw	r4,1328(sp)
    5604:	2080004c 	andi	r2,r4,1
    5608:	10009a1e 	bne	r2,zero,5874 <___vfprintf_internal_r+0x1740>
    560c:	d9401904 	addi	r5,sp,100
    5610:	dd000f04 	addi	r20,sp,60
    5614:	d9414115 	stw	r5,1284(sp)
    5618:	003d6106 	br	4ba0 <___vfprintf_internal_r+0xa6c>
    561c:	d9014f17 	ldw	r4,1340(sp)
    5620:	b00b883a 	mov	r5,r22
    5624:	d9800c04 	addi	r6,sp,48
    5628:	00040dc0 	call	40dc <__sprint_r>
    562c:	103c791e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5630:	dc800e17 	ldw	r18,56(sp)
    5634:	d8c01904 	addi	r3,sp,100
    5638:	003cff06 	br	4a38 <___vfprintf_internal_r+0x904>
    563c:	d8c14c17 	ldw	r3,1328(sp)
    5640:	1880040c 	andi	r2,r3,16
    5644:	1000711e 	bne	r2,zero,580c <___vfprintf_internal_r+0x16d8>
    5648:	d9014c17 	ldw	r4,1328(sp)
    564c:	2080100c 	andi	r2,r4,64
    5650:	10006e26 	beq	r2,zero,580c <___vfprintf_internal_r+0x16d8>
    5654:	3c00000b 	ldhu	r16,0(r7)
    5658:	0023883a 	mov	r17,zero
    565c:	39c00104 	addi	r7,r7,4
    5660:	d9c14015 	stw	r7,1280(sp)
    5664:	003f0006 	br	5268 <___vfprintf_internal_r+0x1134>
    5668:	dc400d17 	ldw	r17,52(sp)
    566c:	07000074 	movhi	fp,1
    5670:	e7135e84 	addi	fp,fp,19834
    5674:	9425883a 	add	r18,r18,r16
    5678:	8c400044 	addi	r17,r17,1
    567c:	008001c4 	movi	r2,7
    5680:	1f000015 	stw	fp,0(r3)
    5684:	1c000115 	stw	r16,4(r3)
    5688:	dc800e15 	stw	r18,56(sp)
    568c:	dc400d15 	stw	r17,52(sp)
    5690:	147d7616 	blt	r2,r17,4c6c <___vfprintf_internal_r+0xb38>
    5694:	18c00204 	addi	r3,r3,8
    5698:	003d7b06 	br	4c88 <___vfprintf_internal_r+0xb54>
    569c:	dc800e17 	ldw	r18,56(sp)
    56a0:	dc400d17 	ldw	r17,52(sp)
    56a4:	07000074 	movhi	fp,1
    56a8:	e7136284 	addi	fp,fp,19850
    56ac:	003bc006 	br	45b0 <___vfprintf_internal_r+0x47c>
    56b0:	d9014f17 	ldw	r4,1340(sp)
    56b4:	b00b883a 	mov	r5,r22
    56b8:	d9800c04 	addi	r6,sp,48
    56bc:	00040dc0 	call	40dc <__sprint_r>
    56c0:	103c541e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    56c4:	dc800e17 	ldw	r18,56(sp)
    56c8:	d8c01904 	addi	r3,sp,100
    56cc:	003ce906 	br	4a74 <___vfprintf_internal_r+0x940>
    56d0:	3c000017 	ldw	r16,0(r7)
    56d4:	0009883a 	mov	r4,zero
    56d8:	39c00104 	addi	r7,r7,4
    56dc:	0023883a 	mov	r17,zero
    56e0:	d9c14015 	stw	r7,1280(sp)
    56e4:	d8000405 	stb	zero,16(sp)
    56e8:	003d2006 	br	4b6c <___vfprintf_internal_r+0xa38>
    56ec:	38800017 	ldw	r2,0(r7)
    56f0:	39c00104 	addi	r7,r7,4
    56f4:	d9c14015 	stw	r7,1280(sp)
    56f8:	1023d7fa 	srai	r17,r2,31
    56fc:	1021883a 	mov	r16,r2
    5700:	003d1806 	br	4b64 <___vfprintf_internal_r+0xa30>
    5704:	3c000017 	ldw	r16,0(r7)
    5708:	01000044 	movi	r4,1
    570c:	39c00104 	addi	r7,r7,4
    5710:	0023883a 	mov	r17,zero
    5714:	d9c14015 	stw	r7,1280(sp)
    5718:	d8000405 	stb	zero,16(sp)
    571c:	003d1306 	br	4b6c <___vfprintf_internal_r+0xa38>
    5720:	00800074 	movhi	r2,1
    5724:	10935e04 	addi	r2,r2,19832
    5728:	94800044 	addi	r18,r18,1
    572c:	8c400044 	addi	r17,r17,1
    5730:	a8800015 	stw	r2,0(r21)
    5734:	00c00044 	movi	r3,1
    5738:	008001c4 	movi	r2,7
    573c:	a8c00115 	stw	r3,4(r21)
    5740:	dc800e15 	stw	r18,56(sp)
    5744:	dc400d15 	stw	r17,52(sp)
    5748:	1440ca16 	blt	r2,r17,5a74 <___vfprintf_internal_r+0x1940>
    574c:	a8c00204 	addi	r3,r21,8
    5750:	2000061e 	bne	r4,zero,576c <___vfprintf_internal_r+0x1638>
    5754:	d9414717 	ldw	r5,1308(sp)
    5758:	2800041e 	bne	r5,zero,576c <___vfprintf_internal_r+0x1638>
    575c:	d9814c17 	ldw	r6,1328(sp)
    5760:	3080004c 	andi	r2,r6,1
    5764:	1005003a 	cmpeq	r2,r2,zero
    5768:	103bf01e 	bne	r2,zero,472c <___vfprintf_internal_r+0x5f8>
    576c:	00800044 	movi	r2,1
    5770:	dc400d17 	ldw	r17,52(sp)
    5774:	18800115 	stw	r2,4(r3)
    5778:	d8814917 	ldw	r2,1316(sp)
    577c:	94800044 	addi	r18,r18,1
    5780:	8c400044 	addi	r17,r17,1
    5784:	18800015 	stw	r2,0(r3)
    5788:	008001c4 	movi	r2,7
    578c:	dc800e15 	stw	r18,56(sp)
    5790:	dc400d15 	stw	r17,52(sp)
    5794:	1440ca16 	blt	r2,r17,5ac0 <___vfprintf_internal_r+0x198c>
    5798:	18c00204 	addi	r3,r3,8
    579c:	0121c83a 	sub	r16,zero,r4
    57a0:	0400500e 	bge	zero,r16,58e4 <___vfprintf_internal_r+0x17b0>
    57a4:	00800404 	movi	r2,16
    57a8:	1400800e 	bge	r2,r16,59ac <___vfprintf_internal_r+0x1878>
    57ac:	1027883a 	mov	r19,r2
    57b0:	07000074 	movhi	fp,1
    57b4:	e7135e84 	addi	fp,fp,19834
    57b8:	050001c4 	movi	r20,7
    57bc:	00000306 	br	57cc <___vfprintf_internal_r+0x1698>
    57c0:	18c00204 	addi	r3,r3,8
    57c4:	843ffc04 	addi	r16,r16,-16
    57c8:	9c007a0e 	bge	r19,r16,59b4 <___vfprintf_internal_r+0x1880>
    57cc:	94800404 	addi	r18,r18,16
    57d0:	8c400044 	addi	r17,r17,1
    57d4:	1f000015 	stw	fp,0(r3)
    57d8:	1cc00115 	stw	r19,4(r3)
    57dc:	dc800e15 	stw	r18,56(sp)
    57e0:	dc400d15 	stw	r17,52(sp)
    57e4:	a47ff60e 	bge	r20,r17,57c0 <___vfprintf_internal_r+0x168c>
    57e8:	d9014f17 	ldw	r4,1340(sp)
    57ec:	b00b883a 	mov	r5,r22
    57f0:	d9800c04 	addi	r6,sp,48
    57f4:	00040dc0 	call	40dc <__sprint_r>
    57f8:	103c061e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    57fc:	dc800e17 	ldw	r18,56(sp)
    5800:	dc400d17 	ldw	r17,52(sp)
    5804:	d8c01904 	addi	r3,sp,100
    5808:	003fee06 	br	57c4 <___vfprintf_internal_r+0x1690>
    580c:	3c000017 	ldw	r16,0(r7)
    5810:	0023883a 	mov	r17,zero
    5814:	39c00104 	addi	r7,r7,4
    5818:	d9c14015 	stw	r7,1280(sp)
    581c:	003e9206 	br	5268 <___vfprintf_internal_r+0x1134>
    5820:	d9401904 	addi	r5,sp,100
    5824:	dd000f04 	addi	r20,sp,60
    5828:	d9414115 	stw	r5,1284(sp)
    582c:	d9814417 	ldw	r6,1296(sp)
    5830:	880a973a 	slli	r5,r17,28
    5834:	8004d13a 	srli	r2,r16,4
    5838:	810003cc 	andi	r4,r16,15
    583c:	3109883a 	add	r4,r6,r4
    5840:	2884b03a 	or	r2,r5,r2
    5844:	21400003 	ldbu	r5,0(r4)
    5848:	d9014117 	ldw	r4,1284(sp)
    584c:	8806d13a 	srli	r3,r17,4
    5850:	1021883a 	mov	r16,r2
    5854:	213fffc4 	addi	r4,r4,-1
    5858:	d9014115 	stw	r4,1284(sp)
    585c:	d9814117 	ldw	r6,1284(sp)
    5860:	10c8b03a 	or	r4,r2,r3
    5864:	1823883a 	mov	r17,r3
    5868:	31400005 	stb	r5,0(r6)
    586c:	203fef1e 	bne	r4,zero,582c <___vfprintf_internal_r+0x16f8>
    5870:	003ccb06 	br	4ba0 <___vfprintf_internal_r+0xa6c>
    5874:	00800c04 	movi	r2,48
    5878:	d98018c4 	addi	r6,sp,99
    587c:	dd000f04 	addi	r20,sp,60
    5880:	d88018c5 	stb	r2,99(sp)
    5884:	d9814115 	stw	r6,1284(sp)
    5888:	003cc506 	br	4ba0 <___vfprintf_internal_r+0xa6c>
    588c:	dc400d17 	ldw	r17,52(sp)
    5890:	07000074 	movhi	fp,1
    5894:	e7136284 	addi	fp,fp,19850
    5898:	003bc706 	br	47b8 <___vfprintf_internal_r+0x684>
    589c:	d9414c17 	ldw	r5,1328(sp)
    58a0:	2880040c 	andi	r2,r5,16
    58a4:	10007c26 	beq	r2,zero,5a98 <___vfprintf_internal_r+0x1964>
    58a8:	38800017 	ldw	r2,0(r7)
    58ac:	39c00104 	addi	r7,r7,4
    58b0:	d9c14015 	stw	r7,1280(sp)
    58b4:	d9814b17 	ldw	r6,1324(sp)
    58b8:	d9c14017 	ldw	r7,1280(sp)
    58bc:	11800015 	stw	r6,0(r2)
    58c0:	003a7806 	br	42a4 <___vfprintf_internal_r+0x170>
    58c4:	d9014f17 	ldw	r4,1340(sp)
    58c8:	b00b883a 	mov	r5,r22
    58cc:	d9800c04 	addi	r6,sp,48
    58d0:	00040dc0 	call	40dc <__sprint_r>
    58d4:	103bcf1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    58d8:	dc800e17 	ldw	r18,56(sp)
    58dc:	dc400d17 	ldw	r17,52(sp)
    58e0:	d8c01904 	addi	r3,sp,100
    58e4:	d9014717 	ldw	r4,1308(sp)
    58e8:	d9414117 	ldw	r5,1284(sp)
    58ec:	8c400044 	addi	r17,r17,1
    58f0:	9125883a 	add	r18,r18,r4
    58f4:	008001c4 	movi	r2,7
    58f8:	19400015 	stw	r5,0(r3)
    58fc:	19000115 	stw	r4,4(r3)
    5900:	dc800e15 	stw	r18,56(sp)
    5904:	dc400d15 	stw	r17,52(sp)
    5908:	147cee16 	blt	r2,r17,4cc4 <___vfprintf_internal_r+0xb90>
    590c:	18c00204 	addi	r3,r3,8
    5910:	003b8606 	br	472c <___vfprintf_internal_r+0x5f8>
    5914:	38c00017 	ldw	r3,0(r7)
    5918:	39000204 	addi	r4,r7,8
    591c:	d9014015 	stw	r4,1280(sp)
    5920:	d8c14215 	stw	r3,1288(sp)
    5924:	39c00117 	ldw	r7,4(r7)
    5928:	d9c14315 	stw	r7,1292(sp)
    592c:	003e2006 	br	51b0 <___vfprintf_internal_r+0x107c>
    5930:	0005883a 	mov	r2,zero
    5934:	1409c83a 	sub	r4,r2,r16
    5938:	1105803a 	cmpltu	r2,r2,r4
    593c:	044bc83a 	sub	r5,zero,r17
    5940:	2885c83a 	sub	r2,r5,r2
    5944:	2021883a 	mov	r16,r4
    5948:	1023883a 	mov	r17,r2
    594c:	01000044 	movi	r4,1
    5950:	00800b44 	movi	r2,45
    5954:	d8800405 	stb	r2,16(sp)
    5958:	003c8406 	br	4b6c <___vfprintf_internal_r+0xa38>
    595c:	d9014f17 	ldw	r4,1340(sp)
    5960:	b00b883a 	mov	r5,r22
    5964:	d9800c04 	addi	r6,sp,48
    5968:	00040dc0 	call	40dc <__sprint_r>
    596c:	103ba91e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5970:	dc800e17 	ldw	r18,56(sp)
    5974:	dc400d17 	ldw	r17,52(sp)
    5978:	d9000517 	ldw	r4,20(sp)
    597c:	d9401904 	addi	r5,sp,100
    5980:	003da706 	br	5020 <___vfprintf_internal_r+0xeec>
    5984:	d9014f17 	ldw	r4,1340(sp)
    5988:	b00b883a 	mov	r5,r22
    598c:	d9800c04 	addi	r6,sp,48
    5990:	00040dc0 	call	40dc <__sprint_r>
    5994:	103b9f1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5998:	dc800e17 	ldw	r18,56(sp)
    599c:	dc400d17 	ldw	r17,52(sp)
    59a0:	d9000517 	ldw	r4,20(sp)
    59a4:	d8c01904 	addi	r3,sp,100
    59a8:	003d9106 	br	4ff0 <___vfprintf_internal_r+0xebc>
    59ac:	07000074 	movhi	fp,1
    59b0:	e7135e84 	addi	fp,fp,19834
    59b4:	9425883a 	add	r18,r18,r16
    59b8:	8c400044 	addi	r17,r17,1
    59bc:	008001c4 	movi	r2,7
    59c0:	1f000015 	stw	fp,0(r3)
    59c4:	1c000115 	stw	r16,4(r3)
    59c8:	dc800e15 	stw	r18,56(sp)
    59cc:	dc400d15 	stw	r17,52(sp)
    59d0:	147fbc16 	blt	r2,r17,58c4 <___vfprintf_internal_r+0x1790>
    59d4:	18c00204 	addi	r3,r3,8
    59d8:	003fc206 	br	58e4 <___vfprintf_internal_r+0x17b0>
    59dc:	d9014f17 	ldw	r4,1340(sp)
    59e0:	b00b883a 	mov	r5,r22
    59e4:	d9800c04 	addi	r6,sp,48
    59e8:	00040dc0 	call	40dc <__sprint_r>
    59ec:	103b891e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    59f0:	dc800e17 	ldw	r18,56(sp)
    59f4:	d9000517 	ldw	r4,20(sp)
    59f8:	d8c01904 	addi	r3,sp,100
    59fc:	003d0206 	br	4e08 <___vfprintf_internal_r+0xcd4>
    5a00:	07000074 	movhi	fp,1
    5a04:	e7135e84 	addi	fp,fp,19834
    5a08:	003be406 	br	499c <___vfprintf_internal_r+0x868>
    5a0c:	00800074 	movhi	r2,1
    5a10:	10934d04 	addi	r2,r2,19764
    5a14:	d8814115 	stw	r2,1284(sp)
    5a18:	003df506 	br	51f0 <___vfprintf_internal_r+0x10bc>
    5a1c:	d9014217 	ldw	r4,1288(sp)
    5a20:	d9414317 	ldw	r5,1292(sp)
    5a24:	000bd480 	call	bd48 <__isnand>
    5a28:	10003926 	beq	r2,zero,5b10 <___vfprintf_internal_r+0x19dc>
    5a2c:	d9414d17 	ldw	r5,1332(sp)
    5a30:	008011c4 	movi	r2,71
    5a34:	1140ce16 	blt	r2,r5,5d70 <___vfprintf_internal_r+0x1c3c>
    5a38:	01800074 	movhi	r6,1
    5a3c:	31934e04 	addi	r6,r6,19768
    5a40:	d9814115 	stw	r6,1284(sp)
    5a44:	003dea06 	br	51f0 <___vfprintf_internal_r+0x10bc>
    5a48:	d9014c17 	ldw	r4,1328(sp)
    5a4c:	bdc00044 	addi	r23,r23,1
    5a50:	b8c00007 	ldb	r3,0(r23)
    5a54:	21000814 	ori	r4,r4,32
    5a58:	d9014c15 	stw	r4,1328(sp)
    5a5c:	003a3406 	br	4330 <___vfprintf_internal_r+0x1fc>
    5a60:	dcc14515 	stw	r19,1300(sp)
    5a64:	98011016 	blt	r19,zero,5ea8 <___vfprintf_internal_r+0x1d74>
    5a68:	980f883a 	mov	r7,r19
    5a6c:	d8014615 	stw	zero,1304(sp)
    5a70:	003c5206 	br	4bbc <___vfprintf_internal_r+0xa88>
    5a74:	d9014f17 	ldw	r4,1340(sp)
    5a78:	b00b883a 	mov	r5,r22
    5a7c:	d9800c04 	addi	r6,sp,48
    5a80:	00040dc0 	call	40dc <__sprint_r>
    5a84:	103b631e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5a88:	dc800e17 	ldw	r18,56(sp)
    5a8c:	d9000517 	ldw	r4,20(sp)
    5a90:	d8c01904 	addi	r3,sp,100
    5a94:	003f2e06 	br	5750 <___vfprintf_internal_r+0x161c>
    5a98:	d8c14c17 	ldw	r3,1328(sp)
    5a9c:	1880100c 	andi	r2,r3,64
    5aa0:	1000a026 	beq	r2,zero,5d24 <___vfprintf_internal_r+0x1bf0>
    5aa4:	38800017 	ldw	r2,0(r7)
    5aa8:	39c00104 	addi	r7,r7,4
    5aac:	d9c14015 	stw	r7,1280(sp)
    5ab0:	d9014b17 	ldw	r4,1324(sp)
    5ab4:	d9c14017 	ldw	r7,1280(sp)
    5ab8:	1100000d 	sth	r4,0(r2)
    5abc:	0039f906 	br	42a4 <___vfprintf_internal_r+0x170>
    5ac0:	d9014f17 	ldw	r4,1340(sp)
    5ac4:	b00b883a 	mov	r5,r22
    5ac8:	d9800c04 	addi	r6,sp,48
    5acc:	00040dc0 	call	40dc <__sprint_r>
    5ad0:	103b501e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5ad4:	dc800e17 	ldw	r18,56(sp)
    5ad8:	dc400d17 	ldw	r17,52(sp)
    5adc:	d9000517 	ldw	r4,20(sp)
    5ae0:	d8c01904 	addi	r3,sp,100
    5ae4:	003f2d06 	br	579c <___vfprintf_internal_r+0x1668>
    5ae8:	00800184 	movi	r2,6
    5aec:	14c09a36 	bltu	r2,r19,5d58 <___vfprintf_internal_r+0x1c24>
    5af0:	dcc14515 	stw	r19,1300(sp)
    5af4:	9800010e 	bge	r19,zero,5afc <___vfprintf_internal_r+0x19c8>
    5af8:	d8014515 	stw	zero,1300(sp)
    5afc:	00800074 	movhi	r2,1
    5b00:	10935004 	addi	r2,r2,19776
    5b04:	980f883a 	mov	r7,r19
    5b08:	d8814115 	stw	r2,1284(sp)
    5b0c:	003a7806 	br	44f0 <___vfprintf_internal_r+0x3bc>
    5b10:	00bfffc4 	movi	r2,-1
    5b14:	9880e226 	beq	r19,r2,5ea0 <___vfprintf_internal_r+0x1d6c>
    5b18:	d9414d17 	ldw	r5,1332(sp)
    5b1c:	008019c4 	movi	r2,103
    5b20:	2880dc26 	beq	r5,r2,5e94 <___vfprintf_internal_r+0x1d60>
    5b24:	008011c4 	movi	r2,71
    5b28:	2880da26 	beq	r5,r2,5e94 <___vfprintf_internal_r+0x1d60>
    5b2c:	d9414c17 	ldw	r5,1328(sp)
    5b30:	d9014317 	ldw	r4,1292(sp)
    5b34:	d9814217 	ldw	r6,1288(sp)
    5b38:	29404014 	ori	r5,r5,256
    5b3c:	d9414c15 	stw	r5,1328(sp)
    5b40:	2000cc16 	blt	r4,zero,5e74 <___vfprintf_internal_r+0x1d40>
    5b44:	3021883a 	mov	r16,r6
    5b48:	2023883a 	mov	r17,r4
    5b4c:	0039883a 	mov	fp,zero
    5b50:	d9414d17 	ldw	r5,1332(sp)
    5b54:	00801984 	movi	r2,102
    5b58:	2880b726 	beq	r5,r2,5e38 <___vfprintf_internal_r+0x1d04>
    5b5c:	00801184 	movi	r2,70
    5b60:	2880b526 	beq	r5,r2,5e38 <___vfprintf_internal_r+0x1d04>
    5b64:	00801944 	movi	r2,101
    5b68:	2880c826 	beq	r5,r2,5e8c <___vfprintf_internal_r+0x1d58>
    5b6c:	00801144 	movi	r2,69
    5b70:	2880c626 	beq	r5,r2,5e8c <___vfprintf_internal_r+0x1d58>
    5b74:	9829883a 	mov	r20,r19
    5b78:	d9014f17 	ldw	r4,1340(sp)
    5b7c:	d8800504 	addi	r2,sp,20
    5b80:	880d883a 	mov	r6,r17
    5b84:	d8800115 	stw	r2,4(sp)
    5b88:	d8c00604 	addi	r3,sp,24
    5b8c:	d8800704 	addi	r2,sp,28
    5b90:	800b883a 	mov	r5,r16
    5b94:	01c00084 	movi	r7,2
    5b98:	d8c00215 	stw	r3,8(sp)
    5b9c:	d8800315 	stw	r2,12(sp)
    5ba0:	dd000015 	stw	r20,0(sp)
    5ba4:	0007bc00 	call	7bc0 <_dtoa_r>
    5ba8:	d9814d17 	ldw	r6,1332(sp)
    5bac:	d8814115 	stw	r2,1284(sp)
    5bb0:	008019c4 	movi	r2,103
    5bb4:	30809526 	beq	r6,r2,5e0c <___vfprintf_internal_r+0x1cd8>
    5bb8:	d8c14d17 	ldw	r3,1332(sp)
    5bbc:	008011c4 	movi	r2,71
    5bc0:	18809226 	beq	r3,r2,5e0c <___vfprintf_internal_r+0x1cd8>
    5bc4:	d9414117 	ldw	r5,1284(sp)
    5bc8:	d9814d17 	ldw	r6,1332(sp)
    5bcc:	00801984 	movi	r2,102
    5bd0:	2d25883a 	add	r18,r5,r20
    5bd4:	30808626 	beq	r6,r2,5df0 <___vfprintf_internal_r+0x1cbc>
    5bd8:	00801184 	movi	r2,70
    5bdc:	30808426 	beq	r6,r2,5df0 <___vfprintf_internal_r+0x1cbc>
    5be0:	000d883a 	mov	r6,zero
    5be4:	000f883a 	mov	r7,zero
    5be8:	880b883a 	mov	r5,r17
    5bec:	8009883a 	mov	r4,r16
    5bf0:	00109c00 	call	109c0 <__eqdf2>
    5bf4:	1000751e 	bne	r2,zero,5dcc <___vfprintf_internal_r+0x1c98>
    5bf8:	9005883a 	mov	r2,r18
    5bfc:	dc800715 	stw	r18,28(sp)
    5c00:	d9014117 	ldw	r4,1284(sp)
    5c04:	d9414d17 	ldw	r5,1332(sp)
    5c08:	00c019c4 	movi	r3,103
    5c0c:	1125c83a 	sub	r18,r2,r4
    5c10:	28c06826 	beq	r5,r3,5db4 <___vfprintf_internal_r+0x1c80>
    5c14:	008011c4 	movi	r2,71
    5c18:	28806626 	beq	r5,r2,5db4 <___vfprintf_internal_r+0x1c80>
    5c1c:	d9000517 	ldw	r4,20(sp)
    5c20:	d8c14d17 	ldw	r3,1332(sp)
    5c24:	00801944 	movi	r2,101
    5c28:	10c05516 	blt	r2,r3,5d80 <___vfprintf_internal_r+0x1c4c>
    5c2c:	213fffc4 	addi	r4,r4,-1
    5c30:	d9000515 	stw	r4,20(sp)
    5c34:	d8c00805 	stb	r3,32(sp)
    5c38:	2021883a 	mov	r16,r4
    5c3c:	2000c116 	blt	r4,zero,5f44 <___vfprintf_internal_r+0x1e10>
    5c40:	00800ac4 	movi	r2,43
    5c44:	d8800845 	stb	r2,33(sp)
    5c48:	00800244 	movi	r2,9
    5c4c:	1400af0e 	bge	r2,r16,5f0c <___vfprintf_internal_r+0x1dd8>
    5c50:	1027883a 	mov	r19,r2
    5c54:	dc400b84 	addi	r17,sp,46
    5c58:	8009883a 	mov	r4,r16
    5c5c:	01400284 	movi	r5,10
    5c60:	00028440 	call	2844 <__modsi3>
    5c64:	10800c04 	addi	r2,r2,48
    5c68:	8c7fffc4 	addi	r17,r17,-1
    5c6c:	8009883a 	mov	r4,r16
    5c70:	01400284 	movi	r5,10
    5c74:	88800005 	stb	r2,0(r17)
    5c78:	00027e40 	call	27e4 <__divsi3>
    5c7c:	1021883a 	mov	r16,r2
    5c80:	98bff516 	blt	r19,r2,5c58 <___vfprintf_internal_r+0x1b24>
    5c84:	10c00c04 	addi	r3,r2,48
    5c88:	d88009c4 	addi	r2,sp,39
    5c8c:	108001c4 	addi	r2,r2,7
    5c90:	897fffc4 	addi	r5,r17,-1
    5c94:	88ffffc5 	stb	r3,-1(r17)
    5c98:	2880a72e 	bgeu	r5,r2,5f38 <___vfprintf_internal_r+0x1e04>
    5c9c:	1009883a 	mov	r4,r2
    5ca0:	d9800804 	addi	r6,sp,32
    5ca4:	d8c00884 	addi	r3,sp,34
    5ca8:	28800003 	ldbu	r2,0(r5)
    5cac:	29400044 	addi	r5,r5,1
    5cb0:	18800005 	stb	r2,0(r3)
    5cb4:	18c00044 	addi	r3,r3,1
    5cb8:	293ffb36 	bltu	r5,r4,5ca8 <___vfprintf_internal_r+0x1b74>
    5cbc:	1987c83a 	sub	r3,r3,r6
    5cc0:	00800044 	movi	r2,1
    5cc4:	d8c14815 	stw	r3,1312(sp)
    5cc8:	90cf883a 	add	r7,r18,r3
    5ccc:	1480960e 	bge	r2,r18,5f28 <___vfprintf_internal_r+0x1df4>
    5cd0:	39c00044 	addi	r7,r7,1
    5cd4:	d9c14515 	stw	r7,1300(sp)
    5cd8:	38003416 	blt	r7,zero,5dac <___vfprintf_internal_r+0x1c78>
    5cdc:	e0803fcc 	andi	r2,fp,255
    5ce0:	1080201c 	xori	r2,r2,128
    5ce4:	10bfe004 	addi	r2,r2,-128
    5ce8:	10004e26 	beq	r2,zero,5e24 <___vfprintf_internal_r+0x1cf0>
    5cec:	00800b44 	movi	r2,45
    5cf0:	dc814715 	stw	r18,1308(sp)
    5cf4:	d8014615 	stw	zero,1304(sp)
    5cf8:	d8800405 	stb	r2,16(sp)
    5cfc:	003bb106 	br	4bc4 <___vfprintf_internal_r+0xa90>
    5d00:	00800b44 	movi	r2,45
    5d04:	d8800405 	stb	r2,16(sp)
    5d08:	003d3306 	br	51d8 <___vfprintf_internal_r+0x10a4>
    5d0c:	d9014f17 	ldw	r4,1340(sp)
    5d10:	b00b883a 	mov	r5,r22
    5d14:	d9800c04 	addi	r6,sp,48
    5d18:	00040dc0 	call	40dc <__sprint_r>
    5d1c:	103abd1e 	bne	r2,zero,4814 <___vfprintf_internal_r+0x6e0>
    5d20:	003abb06 	br	4810 <___vfprintf_internal_r+0x6dc>
    5d24:	38800017 	ldw	r2,0(r7)
    5d28:	39c00104 	addi	r7,r7,4
    5d2c:	d9c14015 	stw	r7,1280(sp)
    5d30:	d9414b17 	ldw	r5,1324(sp)
    5d34:	d9c14017 	ldw	r7,1280(sp)
    5d38:	11400015 	stw	r5,0(r2)
    5d3c:	00395906 	br	42a4 <___vfprintf_internal_r+0x170>
    5d40:	980f883a 	mov	r7,r19
    5d44:	dcc14515 	stw	r19,1300(sp)
    5d48:	d8014615 	stw	zero,1304(sp)
    5d4c:	003b9b06 	br	4bbc <___vfprintf_internal_r+0xa88>
    5d50:	0027883a 	mov	r19,zero
    5d54:	00397806 	br	4338 <___vfprintf_internal_r+0x204>
    5d58:	00c00074 	movhi	r3,1
    5d5c:	18d35004 	addi	r3,r3,19776
    5d60:	100f883a 	mov	r7,r2
    5d64:	d8814515 	stw	r2,1300(sp)
    5d68:	d8c14115 	stw	r3,1284(sp)
    5d6c:	0039e006 	br	44f0 <___vfprintf_internal_r+0x3bc>
    5d70:	00800074 	movhi	r2,1
    5d74:	10934f04 	addi	r2,r2,19772
    5d78:	d8814115 	stw	r2,1284(sp)
    5d7c:	003d1c06 	br	51f0 <___vfprintf_internal_r+0x10bc>
    5d80:	d9414d17 	ldw	r5,1332(sp)
    5d84:	00801984 	movi	r2,102
    5d88:	28804926 	beq	r5,r2,5eb0 <___vfprintf_internal_r+0x1d7c>
    5d8c:	200f883a 	mov	r7,r4
    5d90:	24805716 	blt	r4,r18,5ef0 <___vfprintf_internal_r+0x1dbc>
    5d94:	d9414c17 	ldw	r5,1328(sp)
    5d98:	2880004c 	andi	r2,r5,1
    5d9c:	10000126 	beq	r2,zero,5da4 <___vfprintf_internal_r+0x1c70>
    5da0:	21c00044 	addi	r7,r4,1
    5da4:	d9c14515 	stw	r7,1300(sp)
    5da8:	383fcc0e 	bge	r7,zero,5cdc <___vfprintf_internal_r+0x1ba8>
    5dac:	d8014515 	stw	zero,1300(sp)
    5db0:	003fca06 	br	5cdc <___vfprintf_internal_r+0x1ba8>
    5db4:	d9000517 	ldw	r4,20(sp)
    5db8:	00bfff04 	movi	r2,-4
    5dbc:	1100480e 	bge	r2,r4,5ee0 <___vfprintf_internal_r+0x1dac>
    5dc0:	99004716 	blt	r19,r4,5ee0 <___vfprintf_internal_r+0x1dac>
    5dc4:	d8c14d15 	stw	r3,1332(sp)
    5dc8:	003ff006 	br	5d8c <___vfprintf_internal_r+0x1c58>
    5dcc:	d8800717 	ldw	r2,28(sp)
    5dd0:	14bf8b2e 	bgeu	r2,r18,5c00 <___vfprintf_internal_r+0x1acc>
    5dd4:	9007883a 	mov	r3,r18
    5dd8:	01000c04 	movi	r4,48
    5ddc:	11000005 	stb	r4,0(r2)
    5de0:	10800044 	addi	r2,r2,1
    5de4:	d8800715 	stw	r2,28(sp)
    5de8:	18bffc1e 	bne	r3,r2,5ddc <___vfprintf_internal_r+0x1ca8>
    5dec:	003f8406 	br	5c00 <___vfprintf_internal_r+0x1acc>
    5df0:	d8814117 	ldw	r2,1284(sp)
    5df4:	10c00007 	ldb	r3,0(r2)
    5df8:	00800c04 	movi	r2,48
    5dfc:	18805b26 	beq	r3,r2,5f6c <___vfprintf_internal_r+0x1e38>
    5e00:	d9000517 	ldw	r4,20(sp)
    5e04:	9125883a 	add	r18,r18,r4
    5e08:	003f7506 	br	5be0 <___vfprintf_internal_r+0x1aac>
    5e0c:	d9014c17 	ldw	r4,1328(sp)
    5e10:	2080004c 	andi	r2,r4,1
    5e14:	1005003a 	cmpeq	r2,r2,zero
    5e18:	103f6a26 	beq	r2,zero,5bc4 <___vfprintf_internal_r+0x1a90>
    5e1c:	d8800717 	ldw	r2,28(sp)
    5e20:	003f7706 	br	5c00 <___vfprintf_internal_r+0x1acc>
    5e24:	d9c14515 	stw	r7,1300(sp)
    5e28:	38004d16 	blt	r7,zero,5f60 <___vfprintf_internal_r+0x1e2c>
    5e2c:	dc814715 	stw	r18,1308(sp)
    5e30:	d8014615 	stw	zero,1304(sp)
    5e34:	003b6106 	br	4bbc <___vfprintf_internal_r+0xa88>
    5e38:	d9014f17 	ldw	r4,1340(sp)
    5e3c:	d8800504 	addi	r2,sp,20
    5e40:	d8800115 	stw	r2,4(sp)
    5e44:	d8c00604 	addi	r3,sp,24
    5e48:	d8800704 	addi	r2,sp,28
    5e4c:	800b883a 	mov	r5,r16
    5e50:	880d883a 	mov	r6,r17
    5e54:	01c000c4 	movi	r7,3
    5e58:	d8c00215 	stw	r3,8(sp)
    5e5c:	d8800315 	stw	r2,12(sp)
    5e60:	dcc00015 	stw	r19,0(sp)
    5e64:	9829883a 	mov	r20,r19
    5e68:	0007bc00 	call	7bc0 <_dtoa_r>
    5e6c:	d8814115 	stw	r2,1284(sp)
    5e70:	003f5106 	br	5bb8 <___vfprintf_internal_r+0x1a84>
    5e74:	d8c14217 	ldw	r3,1288(sp)
    5e78:	d9014317 	ldw	r4,1292(sp)
    5e7c:	07000b44 	movi	fp,45
    5e80:	1821883a 	mov	r16,r3
    5e84:	2460003c 	xorhi	r17,r4,32768
    5e88:	003f3106 	br	5b50 <___vfprintf_internal_r+0x1a1c>
    5e8c:	9d000044 	addi	r20,r19,1
    5e90:	003f3906 	br	5b78 <___vfprintf_internal_r+0x1a44>
    5e94:	983f251e 	bne	r19,zero,5b2c <___vfprintf_internal_r+0x19f8>
    5e98:	04c00044 	movi	r19,1
    5e9c:	003f2306 	br	5b2c <___vfprintf_internal_r+0x19f8>
    5ea0:	04c00184 	movi	r19,6
    5ea4:	003f2106 	br	5b2c <___vfprintf_internal_r+0x19f8>
    5ea8:	d8014515 	stw	zero,1300(sp)
    5eac:	003eee06 	br	5a68 <___vfprintf_internal_r+0x1934>
    5eb0:	200f883a 	mov	r7,r4
    5eb4:	0100370e 	bge	zero,r4,5f94 <___vfprintf_internal_r+0x1e60>
    5eb8:	9800031e 	bne	r19,zero,5ec8 <___vfprintf_internal_r+0x1d94>
    5ebc:	d9814c17 	ldw	r6,1328(sp)
    5ec0:	3080004c 	andi	r2,r6,1
    5ec4:	103fb726 	beq	r2,zero,5da4 <___vfprintf_internal_r+0x1c70>
    5ec8:	20800044 	addi	r2,r4,1
    5ecc:	98a7883a 	add	r19,r19,r2
    5ed0:	dcc14515 	stw	r19,1300(sp)
    5ed4:	980f883a 	mov	r7,r19
    5ed8:	983f800e 	bge	r19,zero,5cdc <___vfprintf_internal_r+0x1ba8>
    5edc:	003fb306 	br	5dac <___vfprintf_internal_r+0x1c78>
    5ee0:	d9814d17 	ldw	r6,1332(sp)
    5ee4:	31bfff84 	addi	r6,r6,-2
    5ee8:	d9814d15 	stw	r6,1332(sp)
    5eec:	003f4c06 	br	5c20 <___vfprintf_internal_r+0x1aec>
    5ef0:	0100180e 	bge	zero,r4,5f54 <___vfprintf_internal_r+0x1e20>
    5ef4:	00800044 	movi	r2,1
    5ef8:	1485883a 	add	r2,r2,r18
    5efc:	d8814515 	stw	r2,1300(sp)
    5f00:	100f883a 	mov	r7,r2
    5f04:	103f750e 	bge	r2,zero,5cdc <___vfprintf_internal_r+0x1ba8>
    5f08:	003fa806 	br	5dac <___vfprintf_internal_r+0x1c78>
    5f0c:	80c00c04 	addi	r3,r16,48
    5f10:	00800c04 	movi	r2,48
    5f14:	d8c008c5 	stb	r3,35(sp)
    5f18:	d9800804 	addi	r6,sp,32
    5f1c:	d8c00904 	addi	r3,sp,36
    5f20:	d8800885 	stb	r2,34(sp)
    5f24:	003f6506 	br	5cbc <___vfprintf_internal_r+0x1b88>
    5f28:	d9014c17 	ldw	r4,1328(sp)
    5f2c:	2084703a 	and	r2,r4,r2
    5f30:	103f9c26 	beq	r2,zero,5da4 <___vfprintf_internal_r+0x1c70>
    5f34:	003f6606 	br	5cd0 <___vfprintf_internal_r+0x1b9c>
    5f38:	d9800804 	addi	r6,sp,32
    5f3c:	d8c00884 	addi	r3,sp,34
    5f40:	003f5e06 	br	5cbc <___vfprintf_internal_r+0x1b88>
    5f44:	00800b44 	movi	r2,45
    5f48:	0121c83a 	sub	r16,zero,r4
    5f4c:	d8800845 	stb	r2,33(sp)
    5f50:	003f3d06 	br	5c48 <___vfprintf_internal_r+0x1b14>
    5f54:	00800084 	movi	r2,2
    5f58:	1105c83a 	sub	r2,r2,r4
    5f5c:	003fe606 	br	5ef8 <___vfprintf_internal_r+0x1dc4>
    5f60:	d8014515 	stw	zero,1300(sp)
    5f64:	dc814715 	stw	r18,1308(sp)
    5f68:	003fb106 	br	5e30 <___vfprintf_internal_r+0x1cfc>
    5f6c:	000d883a 	mov	r6,zero
    5f70:	000f883a 	mov	r7,zero
    5f74:	8009883a 	mov	r4,r16
    5f78:	880b883a 	mov	r5,r17
    5f7c:	0010a480 	call	10a48 <__nedf2>
    5f80:	103f9f26 	beq	r2,zero,5e00 <___vfprintf_internal_r+0x1ccc>
    5f84:	00800044 	movi	r2,1
    5f88:	1509c83a 	sub	r4,r2,r20
    5f8c:	d9000515 	stw	r4,20(sp)
    5f90:	003f9b06 	br	5e00 <___vfprintf_internal_r+0x1ccc>
    5f94:	98000d1e 	bne	r19,zero,5fcc <___vfprintf_internal_r+0x1e98>
    5f98:	d8c14c17 	ldw	r3,1328(sp)
    5f9c:	1880004c 	andi	r2,r3,1
    5fa0:	10000a1e 	bne	r2,zero,5fcc <___vfprintf_internal_r+0x1e98>
    5fa4:	01000044 	movi	r4,1
    5fa8:	200f883a 	mov	r7,r4
    5fac:	d9014515 	stw	r4,1300(sp)
    5fb0:	003f4a06 	br	5cdc <___vfprintf_internal_r+0x1ba8>
    5fb4:	3cc00017 	ldw	r19,0(r7)
    5fb8:	39c00104 	addi	r7,r7,4
    5fbc:	983d0e0e 	bge	r19,zero,53f8 <___vfprintf_internal_r+0x12c4>
    5fc0:	b8c00007 	ldb	r3,0(r23)
    5fc4:	04ffffc4 	movi	r19,-1
    5fc8:	0038d906 	br	4330 <___vfprintf_internal_r+0x1fc>
    5fcc:	9cc00084 	addi	r19,r19,2
    5fd0:	dcc14515 	stw	r19,1300(sp)
    5fd4:	980f883a 	mov	r7,r19
    5fd8:	983f400e 	bge	r19,zero,5cdc <___vfprintf_internal_r+0x1ba8>
    5fdc:	003f7306 	br	5dac <___vfprintf_internal_r+0x1c78>

00005fe0 <__vfprintf_internal>:
    5fe0:	00800074 	movhi	r2,1
    5fe4:	109ae204 	addi	r2,r2,27528
    5fe8:	2013883a 	mov	r9,r4
    5fec:	11000017 	ldw	r4,0(r2)
    5ff0:	2805883a 	mov	r2,r5
    5ff4:	300f883a 	mov	r7,r6
    5ff8:	480b883a 	mov	r5,r9
    5ffc:	100d883a 	mov	r6,r2
    6000:	00041341 	jmpi	4134 <___vfprintf_internal_r>

00006004 <__svfscanf_r>:
    6004:	deff4e04 	addi	sp,sp,-712
    6008:	dd80ae15 	stw	r22,696(sp)
    600c:	dd00ac15 	stw	r20,688(sp)
    6010:	dc40a915 	stw	r17,676(sp)
    6014:	dc00a815 	stw	r16,672(sp)
    6018:	dfc0b115 	stw	ra,708(sp)
    601c:	df00b015 	stw	fp,704(sp)
    6020:	ddc0af15 	stw	r23,700(sp)
    6024:	dd40ad15 	stw	r21,692(sp)
    6028:	dcc0ab15 	stw	r19,684(sp)
    602c:	dc80aa15 	stw	r18,680(sp)
    6030:	202d883a 	mov	r22,r4
    6034:	2821883a 	mov	r16,r5
    6038:	d9c0a415 	stw	r7,656(sp)
    603c:	3029883a 	mov	r20,r6
    6040:	d800a215 	stw	zero,648(sp)
    6044:	0023883a 	mov	r17,zero
    6048:	d800a115 	stw	zero,644(sp)
    604c:	d800a015 	stw	zero,640(sp)
    6050:	a1000007 	ldb	r4,0(r20)
    6054:	d9000115 	stw	r4,4(sp)
    6058:	20001f26 	beq	r4,zero,60d8 <__svfscanf_r+0xd4>
    605c:	04800074 	movhi	r18,1
    6060:	949ae104 	addi	r18,r18,27524
    6064:	91800017 	ldw	r6,0(r18)
    6068:	a5000044 	addi	r20,r20,1
    606c:	3107883a 	add	r3,r6,r4
    6070:	18800003 	ldbu	r2,0(r3)
    6074:	1080020c 	andi	r2,r2,8
    6078:	10002426 	beq	r2,zero,610c <__svfscanf_r+0x108>
    607c:	80c00117 	ldw	r3,4(r16)
    6080:	00c00e0e 	bge	zero,r3,60bc <__svfscanf_r+0xb8>
    6084:	81400017 	ldw	r5,0(r16)
    6088:	90800017 	ldw	r2,0(r18)
    608c:	28c00003 	ldbu	r3,0(r5)
    6090:	1887883a 	add	r3,r3,r2
    6094:	19000003 	ldbu	r4,0(r3)
    6098:	2100020c 	andi	r4,r4,8
    609c:	203fec26 	beq	r4,zero,6050 <__svfscanf_r+0x4c>
    60a0:	80c00117 	ldw	r3,4(r16)
    60a4:	29800044 	addi	r6,r5,1
    60a8:	8c400044 	addi	r17,r17,1
    60ac:	18ffffc4 	addi	r3,r3,-1
    60b0:	81800015 	stw	r6,0(r16)
    60b4:	80c00115 	stw	r3,4(r16)
    60b8:	00fff216 	blt	zero,r3,6084 <__svfscanf_r+0x80>
    60bc:	b009883a 	mov	r4,r22
    60c0:	800b883a 	mov	r5,r16
    60c4:	000390c0 	call	390c <__srefill_r>
    60c8:	103fee26 	beq	r2,zero,6084 <__svfscanf_r+0x80>
    60cc:	a1000007 	ldb	r4,0(r20)
    60d0:	d9000115 	stw	r4,4(sp)
    60d4:	203fe11e 	bne	r4,zero,605c <__svfscanf_r+0x58>
    60d8:	d880a217 	ldw	r2,648(sp)
    60dc:	dfc0b117 	ldw	ra,708(sp)
    60e0:	df00b017 	ldw	fp,704(sp)
    60e4:	ddc0af17 	ldw	r23,700(sp)
    60e8:	dd80ae17 	ldw	r22,696(sp)
    60ec:	dd40ad17 	ldw	r21,692(sp)
    60f0:	dd00ac17 	ldw	r20,688(sp)
    60f4:	dcc0ab17 	ldw	r19,684(sp)
    60f8:	dc80aa17 	ldw	r18,680(sp)
    60fc:	dc40a917 	ldw	r17,676(sp)
    6100:	dc00a817 	ldw	r16,672(sp)
    6104:	dec0b204 	addi	sp,sp,712
    6108:	f800283a 	ret
    610c:	00800944 	movi	r2,37
    6110:	20801626 	beq	r4,r2,616c <__svfscanf_r+0x168>
    6114:	80800117 	ldw	r2,4(r16)
    6118:	00800b0e 	bge	zero,r2,6148 <__svfscanf_r+0x144>
    611c:	81000017 	ldw	r4,0(r16)
    6120:	a0ffffc7 	ldb	r3,-1(r20)
    6124:	20800003 	ldbu	r2,0(r4)
    6128:	10ffeb1e 	bne	r2,r3,60d8 <__svfscanf_r+0xd4>
    612c:	80c00117 	ldw	r3,4(r16)
    6130:	21800044 	addi	r6,r4,1
    6134:	8c400044 	addi	r17,r17,1
    6138:	18ffffc4 	addi	r3,r3,-1
    613c:	80c00115 	stw	r3,4(r16)
    6140:	81800015 	stw	r6,0(r16)
    6144:	003fc206 	br	6050 <__svfscanf_r+0x4c>
    6148:	b009883a 	mov	r4,r22
    614c:	800b883a 	mov	r5,r16
    6150:	000390c0 	call	390c <__srefill_r>
    6154:	103ff126 	beq	r2,zero,611c <__svfscanf_r+0x118>
    6158:	d900a217 	ldw	r4,648(sp)
    615c:	2004c91e 	bne	r4,zero,7484 <__svfscanf_r+0x1480>
    6160:	00bfffc4 	movi	r2,-1
    6164:	d880a215 	stw	r2,648(sp)
    6168:	003fdb06 	br	60d8 <__svfscanf_r+0xd4>
    616c:	d800a315 	stw	zero,652(sp)
    6170:	0027883a 	mov	r19,zero
    6174:	a0c00003 	ldbu	r3,0(r20)
    6178:	00801e04 	movi	r2,120
    617c:	a5000044 	addi	r20,r20,1
    6180:	19403fcc 	andi	r5,r3,255
    6184:	2940201c 	xori	r5,r5,128
    6188:	297fe004 	addi	r5,r5,-128
    618c:	10c08036 	bltu	r2,r3,6390 <__svfscanf_r+0x38c>
    6190:	18c5883a 	add	r2,r3,r3
    6194:	1085883a 	add	r2,r2,r2
    6198:	00c00034 	movhi	r3,0
    619c:	18d86b04 	addi	r3,r3,25004
    61a0:	10c5883a 	add	r2,r2,r3
    61a4:	11000017 	ldw	r4,0(r2)
    61a8:	2000683a 	jmp	r4
    61ac:	00006160 	cmpeqi	zero,zero,389
    61b0:	00006390 	cmplti	zero,zero,398
    61b4:	00006390 	cmplti	zero,zero,398
    61b8:	00006390 	cmplti	zero,zero,398
    61bc:	00006390 	cmplti	zero,zero,398
    61c0:	00006390 	cmplti	zero,zero,398
    61c4:	00006390 	cmplti	zero,zero,398
    61c8:	00006390 	cmplti	zero,zero,398
    61cc:	00006390 	cmplti	zero,zero,398
    61d0:	00006390 	cmplti	zero,zero,398
    61d4:	00006390 	cmplti	zero,zero,398
    61d8:	00006390 	cmplti	zero,zero,398
    61dc:	00006390 	cmplti	zero,zero,398
    61e0:	00006390 	cmplti	zero,zero,398
    61e4:	00006390 	cmplti	zero,zero,398
    61e8:	00006390 	cmplti	zero,zero,398
    61ec:	00006390 	cmplti	zero,zero,398
    61f0:	00006390 	cmplti	zero,zero,398
    61f4:	00006390 	cmplti	zero,zero,398
    61f8:	00006390 	cmplti	zero,zero,398
    61fc:	00006390 	cmplti	zero,zero,398
    6200:	00006390 	cmplti	zero,zero,398
    6204:	00006390 	cmplti	zero,zero,398
    6208:	00006390 	cmplti	zero,zero,398
    620c:	00006390 	cmplti	zero,zero,398
    6210:	00006390 	cmplti	zero,zero,398
    6214:	00006390 	cmplti	zero,zero,398
    6218:	00006390 	cmplti	zero,zero,398
    621c:	00006390 	cmplti	zero,zero,398
    6220:	00006390 	cmplti	zero,zero,398
    6224:	00006390 	cmplti	zero,zero,398
    6228:	00006390 	cmplti	zero,zero,398
    622c:	00006390 	cmplti	zero,zero,398
    6230:	00006390 	cmplti	zero,zero,398
    6234:	00006390 	cmplti	zero,zero,398
    6238:	00006390 	cmplti	zero,zero,398
    623c:	00006390 	cmplti	zero,zero,398
    6240:	00006114 	movui	zero,388
    6244:	00006390 	cmplti	zero,zero,398
    6248:	00006390 	cmplti	zero,zero,398
    624c:	00006390 	cmplti	zero,zero,398
    6250:	00006390 	cmplti	zero,zero,398
    6254:	000073b4 	movhi	zero,462
    6258:	00006390 	cmplti	zero,zero,398
    625c:	00006390 	cmplti	zero,zero,398
    6260:	00006390 	cmplti	zero,zero,398
    6264:	00006390 	cmplti	zero,zero,398
    6268:	00006390 	cmplti	zero,zero,398
    626c:	00006db0 	cmpltui	zero,zero,438
    6270:	00006db0 	cmpltui	zero,zero,438
    6274:	00006db0 	cmpltui	zero,zero,438
    6278:	00006db0 	cmpltui	zero,zero,438
    627c:	00006db0 	cmpltui	zero,zero,438
    6280:	00006db0 	cmpltui	zero,zero,438
    6284:	00006db0 	cmpltui	zero,zero,438
    6288:	00006db0 	cmpltui	zero,zero,438
    628c:	00006db0 	cmpltui	zero,zero,438
    6290:	00006db0 	cmpltui	zero,zero,438
    6294:	00006390 	cmplti	zero,zero,398
    6298:	00006390 	cmplti	zero,zero,398
    629c:	00006390 	cmplti	zero,zero,398
    62a0:	00006390 	cmplti	zero,zero,398
    62a4:	00006390 	cmplti	zero,zero,398
    62a8:	00006390 	cmplti	zero,zero,398
    62ac:	00006390 	cmplti	zero,zero,398
    62b0:	00006390 	cmplti	zero,zero,398
    62b4:	00006390 	cmplti	zero,zero,398
    62b8:	00006390 	cmplti	zero,zero,398
    62bc:	00007530 	cmpltui	zero,zero,468
    62c0:	00007528 	cmpgeui	zero,zero,468
    62c4:	00006390 	cmplti	zero,zero,398
    62c8:	00007528 	cmpgeui	zero,zero,468
    62cc:	00006390 	cmplti	zero,zero,398
    62d0:	00006390 	cmplti	zero,zero,398
    62d4:	00006390 	cmplti	zero,zero,398
    62d8:	00006390 	cmplti	zero,zero,398
    62dc:	000075c0 	call	75c <cam_track+0x298>
    62e0:	00006390 	cmplti	zero,zero,398
    62e4:	00006390 	cmplti	zero,zero,398
    62e8:	00007578 	rdprs	zero,zero,469
    62ec:	00006390 	cmplti	zero,zero,398
    62f0:	00006390 	cmplti	zero,zero,398
    62f4:	00006390 	cmplti	zero,zero,398
    62f8:	00006390 	cmplti	zero,zero,398
    62fc:	00006390 	cmplti	zero,zero,398
    6300:	00006390 	cmplti	zero,zero,398
    6304:	00006390 	cmplti	zero,zero,398
    6308:	00006390 	cmplti	zero,zero,398
    630c:	000073bc 	xorhi	zero,zero,462
    6310:	00006390 	cmplti	zero,zero,398
    6314:	00006390 	cmplti	zero,zero,398
    6318:	0000755c 	xori	zero,zero,469
    631c:	00006390 	cmplti	zero,zero,398
    6320:	00006390 	cmplti	zero,zero,398
    6324:	00006390 	cmplti	zero,zero,398
    6328:	00006390 	cmplti	zero,zero,398
    632c:	00006390 	cmplti	zero,zero,398
    6330:	00006390 	cmplti	zero,zero,398
    6334:	00006390 	cmplti	zero,zero,398
    6338:	00007550 	cmplti	zero,zero,469
    633c:	00007534 	movhi	zero,468
    6340:	00007528 	cmpgeui	zero,zero,468
    6344:	00007528 	cmpgeui	zero,zero,468
    6348:	00007528 	cmpgeui	zero,zero,468
    634c:	00007520 	cmpeqi	zero,zero,468
    6350:	00007614 	movui	zero,472
    6354:	00006390 	cmplti	zero,zero,398
    6358:	00006390 	cmplti	zero,zero,398
    635c:	00007600 	call	760 <cam_track+0x29c>
    6360:	00006390 	cmplti	zero,zero,398
    6364:	00007598 	cmpnei	zero,zero,470
    6368:	0000757c 	xorhi	zero,zero,469
    636c:	000075d0 	cmplti	zero,zero,471
    6370:	00006390 	cmplti	zero,zero,398
    6374:	00006390 	cmplti	zero,zero,398
    6378:	000075c8 	cmpgei	zero,zero,471
    637c:	00006390 	cmplti	zero,zero,398
    6380:	00006900 	call	690 <cam_track+0x1cc>
    6384:	00006390 	cmplti	zero,zero,398
    6388:	00006390 	cmplti	zero,zero,398
    638c:	000073bc 	xorhi	zero,zero,462
    6390:	2987883a 	add	r3,r5,r6
    6394:	18800003 	ldbu	r2,0(r3)
    6398:	1080004c 	andi	r2,r2,1
    639c:	1005003a 	cmpeq	r2,r2,zero
    63a0:	10002c26 	beq	r2,zero,6454 <__svfscanf_r+0x450>
    63a4:	01000074 	movhi	r4,1
    63a8:	21352b04 	addi	r4,r4,-11092
    63ac:	00800284 	movi	r2,10
    63b0:	d900a015 	stw	r4,640(sp)
    63b4:	054000c4 	movi	r21,3
    63b8:	d880a115 	stw	r2,644(sp)
    63bc:	80c00117 	ldw	r3,4(r16)
    63c0:	00c14a0e 	bge	zero,r3,68ec <__svfscanf_r+0x8e8>
    63c4:	9880100c 	andi	r2,r19,64
    63c8:	10001326 	beq	r2,zero,6418 <__svfscanf_r+0x414>
    63cc:	00800104 	movi	r2,4
    63d0:	157f1f36 	bltu	r2,r21,6050 <__svfscanf_r+0x4c>
    63d4:	ad45883a 	add	r2,r21,r21
    63d8:	1085883a 	add	r2,r2,r2
    63dc:	00c00034 	movhi	r3,0
    63e0:	18d8fc04 	addi	r3,r3,25584
    63e4:	10c5883a 	add	r2,r2,r3
    63e8:	11000017 	ldw	r4,0(r2)
    63ec:	2000683a 	jmp	r4
    63f0:	0000645c 	xori	zero,zero,401
    63f4:	00006568 	cmpgeui	zero,zero,405
    63f8:	000065dc 	xori	zero,zero,407
    63fc:	000068c8 	cmpgei	zero,zero,419
    6400:	00006714 	movui	zero,412
    6404:	b009883a 	mov	r4,r22
    6408:	800b883a 	mov	r5,r16
    640c:	000390c0 	call	390c <__srefill_r>
    6410:	103f511e 	bne	r2,zero,6158 <__svfscanf_r+0x154>
    6414:	8c400044 	addi	r17,r17,1
    6418:	81400017 	ldw	r5,0(r16)
    641c:	90800017 	ldw	r2,0(r18)
    6420:	28c00003 	ldbu	r3,0(r5)
    6424:	1887883a 	add	r3,r3,r2
    6428:	19000003 	ldbu	r4,0(r3)
    642c:	2100020c 	andi	r4,r4,8
    6430:	203fe626 	beq	r4,zero,63cc <__svfscanf_r+0x3c8>
    6434:	80c00117 	ldw	r3,4(r16)
    6438:	18ffffc4 	addi	r3,r3,-1
    643c:	80c00115 	stw	r3,4(r16)
    6440:	00fff00e 	bge	zero,r3,6404 <__svfscanf_r+0x400>
    6444:	29800044 	addi	r6,r5,1
    6448:	8c400044 	addi	r17,r17,1
    644c:	81800015 	stw	r6,0(r16)
    6450:	003ff106 	br	6418 <__svfscanf_r+0x414>
    6454:	9cc00054 	ori	r19,r19,1
    6458:	003fd206 	br	63a4 <__svfscanf_r+0x3a0>
    645c:	d8c0a317 	ldw	r3,652(sp)
    6460:	1800021e 	bne	r3,zero,646c <__svfscanf_r+0x468>
    6464:	01000044 	movi	r4,1
    6468:	d900a315 	stw	r4,652(sp)
    646c:	9880004c 	andi	r2,r19,1
    6470:	1005003a 	cmpeq	r2,r2,zero
    6474:	1003d91e 	bne	r2,zero,73dc <__svfscanf_r+0x13d8>
    6478:	9d40040c 	andi	r21,r19,16
    647c:	a839003a 	cmpeq	fp,r21,zero
    6480:	e0042526 	beq	fp,zero,7518 <__svfscanf_r+0x1514>
    6484:	d880a417 	ldw	r2,656(sp)
    6488:	14c00017 	ldw	r19,0(r2)
    648c:	10800104 	addi	r2,r2,4
    6490:	d880a415 	stw	r2,656(sp)
    6494:	d8c0a317 	ldw	r3,652(sp)
    6498:	18041a26 	beq	r3,zero,7504 <__svfscanf_r+0x1500>
    649c:	01000074 	movhi	r4,1
    64a0:	211ae604 	addi	r4,r4,27544
    64a4:	20800017 	ldw	r2,0(r4)
    64a8:	103f2b26 	beq	r2,zero,6158 <__svfscanf_r+0x154>
    64ac:	d8804404 	addi	r2,sp,272
    64b0:	0025883a 	mov	r18,zero
    64b4:	d880a615 	stw	r2,664(sp)
    64b8:	05ffffc4 	movi	r23,-1
    64bc:	80800017 	ldw	r2,0(r16)
    64c0:	80c00117 	ldw	r3,4(r16)
    64c4:	d900a617 	ldw	r4,664(sp)
    64c8:	12000003 	ldbu	r8,0(r2)
    64cc:	18ffffc4 	addi	r3,r3,-1
    64d0:	11800044 	addi	r6,r2,1
    64d4:	248f883a 	add	r7,r4,r18
    64d8:	80c00115 	stw	r3,4(r16)
    64dc:	81800015 	stw	r6,0(r16)
    64e0:	3a000005 	stb	r8,0(r7)
    64e4:	d9000204 	addi	r4,sp,8
    64e8:	000b883a 	mov	r5,zero
    64ec:	01800204 	movi	r6,8
    64f0:	00037240 	call	3724 <memset>
    64f4:	d980a617 	ldw	r6,664(sp)
    64f8:	94800044 	addi	r18,r18,1
    64fc:	d8800204 	addi	r2,sp,8
    6500:	b009883a 	mov	r4,r22
    6504:	980b883a 	mov	r5,r19
    6508:	900f883a 	mov	r7,r18
    650c:	d8800015 	stw	r2,0(sp)
    6510:	000a2dc0 	call	a2dc <_mbrtowc_r>
    6514:	1007883a 	mov	r3,r2
    6518:	15ff0f26 	beq	r2,r23,6158 <__svfscanf_r+0x154>
    651c:	1003f11e 	bne	r2,zero,74e4 <__svfscanf_r+0x14e0>
    6520:	a800011e 	bne	r21,zero,6528 <__svfscanf_r+0x524>
    6524:	98000015 	stw	zero,0(r19)
    6528:	d8c0a317 	ldw	r3,652(sp)
    652c:	8ca3883a 	add	r17,r17,r18
    6530:	18ffffc4 	addi	r3,r3,-1
    6534:	d8c0a315 	stw	r3,652(sp)
    6538:	e0000126 	beq	fp,zero,6540 <__svfscanf_r+0x53c>
    653c:	9cc00104 	addi	r19,r19,4
    6540:	0025883a 	mov	r18,zero
    6544:	80c00117 	ldw	r3,4(r16)
    6548:	00c3e90e 	bge	zero,r3,74f0 <__svfscanf_r+0x14ec>
    654c:	d900a317 	ldw	r4,652(sp)
    6550:	2003ec26 	beq	r4,zero,7504 <__svfscanf_r+0x1500>
    6554:	00c00074 	movhi	r3,1
    6558:	18dae604 	addi	r3,r3,27544
    655c:	18800017 	ldw	r2,0(r3)
    6560:	90bfd61e 	bne	r18,r2,64bc <__svfscanf_r+0x4b8>
    6564:	003efc06 	br	6158 <__svfscanf_r+0x154>
    6568:	d880a317 	ldw	r2,652(sp)
    656c:	1000021e 	bne	r2,zero,6578 <__svfscanf_r+0x574>
    6570:	00ffffc4 	movi	r3,-1
    6574:	d8c0a315 	stw	r3,652(sp)
    6578:	9880040c 	andi	r2,r19,16
    657c:	10036526 	beq	r2,zero,7314 <__svfscanf_r+0x1310>
    6580:	0027883a 	mov	r19,zero
    6584:	dd400404 	addi	r21,sp,16
    6588:	81000017 	ldw	r4,0(r16)
    658c:	20800003 	ldbu	r2,0(r4)
    6590:	a885883a 	add	r2,r21,r2
    6594:	10c00007 	ldb	r3,0(r2)
    6598:	1803be26 	beq	r3,zero,7494 <__svfscanf_r+0x1490>
    659c:	80c00117 	ldw	r3,4(r16)
    65a0:	21800044 	addi	r6,r4,1
    65a4:	d900a317 	ldw	r4,652(sp)
    65a8:	18ffffc4 	addi	r3,r3,-1
    65ac:	9cc00044 	addi	r19,r19,1
    65b0:	81800015 	stw	r6,0(r16)
    65b4:	80c00115 	stw	r3,4(r16)
    65b8:	24c3b626 	beq	r4,r19,7494 <__svfscanf_r+0x1490>
    65bc:	00fff216 	blt	zero,r3,6588 <__svfscanf_r+0x584>
    65c0:	b009883a 	mov	r4,r22
    65c4:	800b883a 	mov	r5,r16
    65c8:	000390c0 	call	390c <__srefill_r>
    65cc:	103fee26 	beq	r2,zero,6588 <__svfscanf_r+0x584>
    65d0:	983ee126 	beq	r19,zero,6158 <__svfscanf_r+0x154>
    65d4:	8ce3883a 	add	r17,r17,r19
    65d8:	003e9d06 	br	6050 <__svfscanf_r+0x4c>
    65dc:	d900a317 	ldw	r4,652(sp)
    65e0:	2000021e 	bne	r4,zero,65ec <__svfscanf_r+0x5e8>
    65e4:	00bfffc4 	movi	r2,-1
    65e8:	d880a315 	stw	r2,652(sp)
    65ec:	9880004c 	andi	r2,r19,1
    65f0:	1005003a 	cmpeq	r2,r2,zero
    65f4:	1001f41e 	bne	r2,zero,6dc8 <__svfscanf_r+0xdc4>
    65f8:	9dc0040c 	andi	r23,r19,16
    65fc:	b807003a 	cmpeq	r3,r23,zero
    6600:	d8c0a515 	stw	r3,660(sp)
    6604:	1803b21e 	bne	r3,zero,74d0 <__svfscanf_r+0x14cc>
    6608:	dd400104 	addi	r21,sp,4
    660c:	0027883a 	mov	r19,zero
    6610:	073fffc4 	movi	fp,-1
    6614:	81400017 	ldw	r5,0(r16)
    6618:	90800017 	ldw	r2,0(r18)
    661c:	29c00003 	ldbu	r7,0(r5)
    6620:	38c03fcc 	andi	r3,r7,255
    6624:	1887883a 	add	r3,r3,r2
    6628:	19000003 	ldbu	r4,0(r3)
    662c:	2100020c 	andi	r4,r4,8
    6630:	2000321e 	bne	r4,zero,66fc <__svfscanf_r+0x6f8>
    6634:	d8c0a317 	ldw	r3,652(sp)
    6638:	18003026 	beq	r3,zero,66fc <__svfscanf_r+0x6f8>
    663c:	00800074 	movhi	r2,1
    6640:	109ae604 	addi	r2,r2,27544
    6644:	10c00017 	ldw	r3,0(r2)
    6648:	98fec326 	beq	r19,r3,6158 <__svfscanf_r+0x154>
    664c:	d8c04404 	addi	r3,sp,272
    6650:	80800117 	ldw	r2,4(r16)
    6654:	d8c0a615 	stw	r3,664(sp)
    6658:	d900a617 	ldw	r4,664(sp)
    665c:	10ffffc4 	addi	r3,r2,-1
    6660:	29800044 	addi	r6,r5,1
    6664:	80c00115 	stw	r3,4(r16)
    6668:	24c5883a 	add	r2,r4,r19
    666c:	81800015 	stw	r6,0(r16)
    6670:	d9000204 	addi	r4,sp,8
    6674:	000b883a 	mov	r5,zero
    6678:	01800204 	movi	r6,8
    667c:	11c00005 	stb	r7,0(r2)
    6680:	00037240 	call	3724 <memset>
    6684:	d980a617 	ldw	r6,664(sp)
    6688:	9cc00044 	addi	r19,r19,1
    668c:	d8800204 	addi	r2,sp,8
    6690:	b009883a 	mov	r4,r22
    6694:	a80b883a 	mov	r5,r21
    6698:	980f883a 	mov	r7,r19
    669c:	d8800015 	stw	r2,0(sp)
    66a0:	000a2dc0 	call	a2dc <_mbrtowc_r>
    66a4:	1007883a 	mov	r3,r2
    66a8:	173eab26 	beq	r2,fp,6158 <__svfscanf_r+0x154>
    66ac:	1003851e 	bne	r2,zero,74c4 <__svfscanf_r+0x14c0>
    66b0:	a8000015 	stw	zero,0(r21)
    66b4:	a9000017 	ldw	r4,0(r21)
    66b8:	0009fe00 	call	9fe0 <iswspace>
    66bc:	1003781e 	bne	r2,zero,74a0 <__svfscanf_r+0x149c>
    66c0:	d900a317 	ldw	r4,652(sp)
    66c4:	d880a517 	ldw	r2,660(sp)
    66c8:	8ce3883a 	add	r17,r17,r19
    66cc:	213fffc4 	addi	r4,r4,-1
    66d0:	d900a315 	stw	r4,652(sp)
    66d4:	10000126 	beq	r2,zero,66dc <__svfscanf_r+0x6d8>
    66d8:	ad400104 	addi	r21,r21,4
    66dc:	0027883a 	mov	r19,zero
    66e0:	80c00117 	ldw	r3,4(r16)
    66e4:	00ffcb16 	blt	zero,r3,6614 <__svfscanf_r+0x610>
    66e8:	b009883a 	mov	r4,r22
    66ec:	800b883a 	mov	r5,r16
    66f0:	000390c0 	call	390c <__srefill_r>
    66f4:	103fc726 	beq	r2,zero,6614 <__svfscanf_r+0x610>
    66f8:	983e971e 	bne	r19,zero,6158 <__svfscanf_r+0x154>
    66fc:	b83e541e 	bne	r23,zero,6050 <__svfscanf_r+0x4c>
    6700:	d900a217 	ldw	r4,648(sp)
    6704:	a8000015 	stw	zero,0(r21)
    6708:	21000044 	addi	r4,r4,1
    670c:	d900a215 	stw	r4,648(sp)
    6710:	003e4f06 	br	6050 <__svfscanf_r+0x4c>
    6714:	d900a317 	ldw	r4,652(sp)
    6718:	00805704 	movi	r2,348
    671c:	20ffffc4 	addi	r3,r4,-1
    6720:	10c1ed2e 	bgeu	r2,r3,6ed8 <__svfscanf_r+0xed4>
    6724:	00805744 	movi	r2,349
    6728:	21bfa8c4 	addi	r6,r4,-349
    672c:	9d41e014 	ori	r21,r19,1920
    6730:	d880a315 	stw	r2,652(sp)
    6734:	d8c04404 	addi	r3,sp,272
    6738:	d8c0a615 	stw	r3,664(sp)
    673c:	182f883a 	mov	r23,r3
    6740:	d8009f15 	stw	zero,636(sp)
    6744:	d8009e15 	stw	zero,632(sp)
    6748:	d8009d15 	stw	zero,628(sp)
    674c:	d8009c15 	stw	zero,624(sp)
    6750:	0039883a 	mov	fp,zero
    6754:	0025883a 	mov	r18,zero
    6758:	80800017 	ldw	r2,0(r16)
    675c:	11400003 	ldbu	r5,0(r2)
    6760:	00801384 	movi	r2,78
    6764:	28fff544 	addi	r3,r5,-43
    6768:	18c03fcc 	andi	r3,r3,255
    676c:	10c07d36 	bltu	r2,r3,6964 <__svfscanf_r+0x960>
    6770:	18c5883a 	add	r2,r3,r3
    6774:	1085883a 	add	r2,r2,r2
    6778:	00c00034 	movhi	r3,0
    677c:	18d9e304 	addi	r3,r3,26508
    6780:	10c5883a 	add	r2,r2,r3
    6784:	11000017 	ldw	r4,0(r2)
    6788:	2000683a 	jmp	r4
    678c:	0000691c 	xori	zero,zero,420
    6790:	00006964 	muli	zero,zero,421
    6794:	0000691c 	xori	zero,zero,420
    6798:	00006ab0 	cmpltui	zero,zero,426
    679c:	00006964 	muli	zero,zero,421
    67a0:	00006ae8 	cmpgeui	zero,zero,427
    67a4:	00006b1c 	xori	zero,zero,428
    67a8:	00006b1c 	xori	zero,zero,428
    67ac:	00006b1c 	xori	zero,zero,428
    67b0:	00006b1c 	xori	zero,zero,428
    67b4:	00006b1c 	xori	zero,zero,428
    67b8:	00006b1c 	xori	zero,zero,428
    67bc:	00006b1c 	xori	zero,zero,428
    67c0:	00006b1c 	xori	zero,zero,428
    67c4:	00006b1c 	xori	zero,zero,428
    67c8:	00006964 	muli	zero,zero,421
    67cc:	00006964 	muli	zero,zero,421
    67d0:	00006964 	muli	zero,zero,421
    67d4:	00006964 	muli	zero,zero,421
    67d8:	00006964 	muli	zero,zero,421
    67dc:	00006964 	muli	zero,zero,421
    67e0:	00006964 	muli	zero,zero,421
    67e4:	00006b3c 	xorhi	zero,zero,428
    67e8:	00006964 	muli	zero,zero,421
    67ec:	00006964 	muli	zero,zero,421
    67f0:	00006964 	muli	zero,zero,421
    67f4:	00006b4c 	andi	zero,zero,429
    67f8:	00006be8 	cmpgeui	zero,zero,431
    67fc:	00006964 	muli	zero,zero,421
    6800:	00006964 	muli	zero,zero,421
    6804:	00006c04 	movi	zero,432
    6808:	00006964 	muli	zero,zero,421
    680c:	00006964 	muli	zero,zero,421
    6810:	00006964 	muli	zero,zero,421
    6814:	00006964 	muli	zero,zero,421
    6818:	00006c30 	cmpltui	zero,zero,432
    681c:	00006964 	muli	zero,zero,421
    6820:	00006964 	muli	zero,zero,421
    6824:	00006964 	muli	zero,zero,421
    6828:	00006964 	muli	zero,zero,421
    682c:	00006964 	muli	zero,zero,421
    6830:	00006c84 	movi	zero,434
    6834:	00006964 	muli	zero,zero,421
    6838:	00006964 	muli	zero,zero,421
    683c:	00006964 	muli	zero,zero,421
    6840:	00006964 	muli	zero,zero,421
    6844:	00006d94 	movui	zero,438
    6848:	00006964 	muli	zero,zero,421
    684c:	00006964 	muli	zero,zero,421
    6850:	00006964 	muli	zero,zero,421
    6854:	00006964 	muli	zero,zero,421
    6858:	00006964 	muli	zero,zero,421
    685c:	00006964 	muli	zero,zero,421
    6860:	00006964 	muli	zero,zero,421
    6864:	00006b3c 	xorhi	zero,zero,428
    6868:	00006964 	muli	zero,zero,421
    686c:	00006964 	muli	zero,zero,421
    6870:	00006964 	muli	zero,zero,421
    6874:	00006b4c 	andi	zero,zero,429
    6878:	00006be8 	cmpgeui	zero,zero,431
    687c:	00006964 	muli	zero,zero,421
    6880:	00006964 	muli	zero,zero,421
    6884:	00006c04 	movi	zero,432
    6888:	00006964 	muli	zero,zero,421
    688c:	00006964 	muli	zero,zero,421
    6890:	00006964 	muli	zero,zero,421
    6894:	00006964 	muli	zero,zero,421
    6898:	00006c30 	cmpltui	zero,zero,432
    689c:	00006964 	muli	zero,zero,421
    68a0:	00006964 	muli	zero,zero,421
    68a4:	00006964 	muli	zero,zero,421
    68a8:	00006964 	muli	zero,zero,421
    68ac:	00006964 	muli	zero,zero,421
    68b0:	00006c84 	movi	zero,434
    68b4:	00006964 	muli	zero,zero,421
    68b8:	00006964 	muli	zero,zero,421
    68bc:	00006964 	muli	zero,zero,421
    68c0:	00006964 	muli	zero,zero,421
    68c4:	00006d94 	movui	zero,438
    68c8:	d900a317 	ldw	r4,652(sp)
    68cc:	00805704 	movi	r2,348
    68d0:	20ffffc4 	addi	r3,r4,-1
    68d4:	10c18c2e 	bgeu	r2,r3,6f08 <__svfscanf_r+0xf04>
    68d8:	00805744 	movi	r2,349
    68dc:	257fa8c4 	addi	r21,r4,-349
    68e0:	9c836014 	ori	r18,r19,3456
    68e4:	d880a315 	stw	r2,652(sp)
    68e8:	0001a106 	br	6f70 <__svfscanf_r+0xf6c>
    68ec:	b009883a 	mov	r4,r22
    68f0:	800b883a 	mov	r5,r16
    68f4:	000390c0 	call	390c <__srefill_r>
    68f8:	103eb226 	beq	r2,zero,63c4 <__svfscanf_r+0x3c0>
    68fc:	003e1606 	br	6158 <__svfscanf_r+0x154>
    6900:	01000284 	movi	r4,10
    6904:	00800074 	movhi	r2,1
    6908:	10b68b04 	addi	r2,r2,-9684
    690c:	054000c4 	movi	r21,3
    6910:	d900a115 	stw	r4,644(sp)
    6914:	d880a015 	stw	r2,640(sp)
    6918:	003ea806 	br	63bc <__svfscanf_r+0x3b8>
    691c:	a880200c 	andi	r2,r21,128
    6920:	10001026 	beq	r2,zero,6964 <__svfscanf_r+0x960>
    6924:	00bfdfc4 	movi	r2,-129
    6928:	a8aa703a 	and	r21,r21,r2
    692c:	b9400005 	stb	r5,0(r23)
    6930:	bdc00044 	addi	r23,r23,1
    6934:	80c00117 	ldw	r3,4(r16)
    6938:	8c400044 	addi	r17,r17,1
    693c:	18bfffc4 	addi	r2,r3,-1
    6940:	80800115 	stw	r2,4(r16)
    6944:	0080610e 	bge	zero,r2,6acc <__svfscanf_r+0xac8>
    6948:	80800017 	ldw	r2,0(r16)
    694c:	10800044 	addi	r2,r2,1
    6950:	80800015 	stw	r2,0(r16)
    6954:	d880a317 	ldw	r2,652(sp)
    6958:	10bfffc4 	addi	r2,r2,-1
    695c:	d880a315 	stw	r2,652(sp)
    6960:	103f7d1e 	bne	r2,zero,6758 <__svfscanf_r+0x754>
    6964:	d8c09e17 	ldw	r3,632(sp)
    6968:	18000226 	beq	r3,zero,6974 <__svfscanf_r+0x970>
    696c:	00bfbfc4 	movi	r2,-257
    6970:	a8aa703a 	and	r21,r21,r2
    6974:	90ffffc4 	addi	r3,r18,-1
    6978:	00800044 	movi	r2,1
    697c:	10c0cd2e 	bgeu	r2,r3,6cb4 <__svfscanf_r+0xcb0>
    6980:	e1003fcc 	andi	r4,fp,255
    6984:	2100201c 	xori	r4,r4,128
    6988:	213fe004 	addi	r4,r4,-128
    698c:	20ffffc4 	addi	r3,r4,-1
    6990:	00800184 	movi	r2,6
    6994:	10c01736 	bltu	r2,r3,69f4 <__svfscanf_r+0x9f0>
    6998:	00c00084 	movi	r3,2
    699c:	1900880e 	bge	r3,r4,6bc0 <__svfscanf_r+0xbbc>
    69a0:	008000c4 	movi	r2,3
    69a4:	1100130e 	bge	r2,r4,69f4 <__svfscanf_r+0x9f0>
    69a8:	e4ffffc4 	addi	r19,fp,-1
    69ac:	b825883a 	mov	r18,r23
    69b0:	94bfffc4 	addi	r18,r18,-1
    69b4:	91400007 	ldb	r5,0(r18)
    69b8:	b009883a 	mov	r4,r22
    69bc:	800d883a 	mov	r6,r16
    69c0:	000e04c0 	call	e04c <_ungetc_r>
    69c4:	9cffffc4 	addi	r19,r19,-1
    69c8:	98c03fcc 	andi	r3,r19,255
    69cc:	18c0201c 	xori	r3,r3,128
    69d0:	18ffe004 	addi	r3,r3,-128
    69d4:	00800084 	movi	r2,2
    69d8:	18bff51e 	bne	r3,r2,69b0 <__svfscanf_r+0x9ac>
    69dc:	e0bfff04 	addi	r2,fp,-4
    69e0:	10803fcc 	andi	r2,r2,255
    69e4:	b887c83a 	sub	r3,r23,r2
    69e8:	8885c83a 	sub	r2,r17,r2
    69ec:	147fffc4 	addi	r17,r2,-1
    69f0:	1dffffc4 	addi	r23,r3,-1
    69f4:	a880400c 	andi	r2,r21,256
    69f8:	10001226 	beq	r2,zero,6a44 <__svfscanf_r+0xa40>
    69fc:	a881000c 	andi	r2,r21,1024
    6a00:	1000651e 	bne	r2,zero,6b98 <__svfscanf_r+0xb94>
    6a04:	bdffffc4 	addi	r23,r23,-1
    6a08:	b9400007 	ldb	r5,0(r23)
    6a0c:	00801944 	movi	r2,101
    6a10:	8c7fffc4 	addi	r17,r17,-1
    6a14:	28800826 	beq	r5,r2,6a38 <__svfscanf_r+0xa34>
    6a18:	00801144 	movi	r2,69
    6a1c:	28800626 	beq	r5,r2,6a38 <__svfscanf_r+0xa34>
    6a20:	bdffffc4 	addi	r23,r23,-1
    6a24:	b009883a 	mov	r4,r22
    6a28:	800d883a 	mov	r6,r16
    6a2c:	000e04c0 	call	e04c <_ungetc_r>
    6a30:	b9400007 	ldb	r5,0(r23)
    6a34:	8c7fffc4 	addi	r17,r17,-1
    6a38:	b009883a 	mov	r4,r22
    6a3c:	800d883a 	mov	r6,r16
    6a40:	000e04c0 	call	e04c <_ungetc_r>
    6a44:	a880040c 	andi	r2,r21,16
    6a48:	103d811e 	bne	r2,zero,6050 <__svfscanf_r+0x4c>
    6a4c:	a8c1800c 	andi	r3,r21,1536
    6a50:	00810004 	movi	r2,1024
    6a54:	b8000005 	stb	zero,0(r23)
    6a58:	1880bb26 	beq	r3,r2,6d48 <__svfscanf_r+0xd44>
    6a5c:	d8809d17 	ldw	r2,628(sp)
    6a60:	1000a61e 	bne	r2,zero,6cfc <__svfscanf_r+0xcf8>
    6a64:	d940a617 	ldw	r5,664(sp)
    6a68:	b009883a 	mov	r4,r22
    6a6c:	000d883a 	mov	r6,zero
    6a70:	000be880 	call	be88 <_strtod_r>
    6a74:	a900004c 	andi	r4,r21,1
    6a78:	2009003a 	cmpeq	r4,r4,zero
    6a7c:	1025883a 	mov	r18,r2
    6a80:	1827883a 	mov	r19,r3
    6a84:	2000951e 	bne	r4,zero,6cdc <__svfscanf_r+0xcd8>
    6a88:	d8c0a417 	ldw	r3,656(sp)
    6a8c:	18800017 	ldw	r2,0(r3)
    6a90:	1d400104 	addi	r21,r3,4
    6a94:	14c00115 	stw	r19,4(r2)
    6a98:	14800015 	stw	r18,0(r2)
    6a9c:	d8c0a217 	ldw	r3,648(sp)
    6aa0:	dd40a415 	stw	r21,656(sp)
    6aa4:	18c00044 	addi	r3,r3,1
    6aa8:	d8c0a215 	stw	r3,648(sp)
    6aac:	003d6806 	br	6050 <__svfscanf_r+0x4c>
    6ab0:	a880800c 	andi	r2,r21,512
    6ab4:	103fab26 	beq	r2,zero,6964 <__svfscanf_r+0x960>
    6ab8:	d9009e17 	ldw	r4,632(sp)
    6abc:	00bf5fc4 	movi	r2,-641
    6ac0:	a8aa703a 	and	r21,r21,r2
    6ac4:	d9009f15 	stw	r4,636(sp)
    6ac8:	003f9806 	br	692c <__svfscanf_r+0x928>
    6acc:	b009883a 	mov	r4,r22
    6ad0:	800b883a 	mov	r5,r16
    6ad4:	d980a715 	stw	r6,668(sp)
    6ad8:	000390c0 	call	390c <__srefill_r>
    6adc:	d980a717 	ldw	r6,668(sp)
    6ae0:	103f9c26 	beq	r2,zero,6954 <__svfscanf_r+0x950>
    6ae4:	003f9f06 	br	6964 <__svfscanf_r+0x960>
    6ae8:	a880400c 	andi	r2,r21,256
    6aec:	10000b26 	beq	r2,zero,6b1c <__svfscanf_r+0xb18>
    6af0:	00bfdfc4 	movi	r2,-129
    6af4:	a8aa703a 	and	r21,r21,r2
    6af8:	d8809e17 	ldw	r2,632(sp)
    6afc:	10800044 	addi	r2,r2,1
    6b00:	d8809e15 	stw	r2,632(sp)
    6b04:	303f8b26 	beq	r6,zero,6934 <__svfscanf_r+0x930>
    6b08:	d8c0a317 	ldw	r3,652(sp)
    6b0c:	31bfffc4 	addi	r6,r6,-1
    6b10:	18c00044 	addi	r3,r3,1
    6b14:	d8c0a315 	stw	r3,652(sp)
    6b18:	003f8606 	br	6934 <__svfscanf_r+0x930>
    6b1c:	e0803fcc 	andi	r2,fp,255
    6b20:	1080201c 	xori	r2,r2,128
    6b24:	10bfe004 	addi	r2,r2,-128
    6b28:	9085883a 	add	r2,r18,r2
    6b2c:	103f8d1e 	bne	r2,zero,6964 <__svfscanf_r+0x960>
    6b30:	00bf9fc4 	movi	r2,-385
    6b34:	a8aa703a 	and	r21,r21,r2
    6b38:	003f7c06 	br	692c <__svfscanf_r+0x928>
    6b3c:	00800044 	movi	r2,1
    6b40:	90bf881e 	bne	r18,r2,6964 <__svfscanf_r+0x960>
    6b44:	04800084 	movi	r18,2
    6b48:	003f7806 	br	692c <__svfscanf_r+0x928>
    6b4c:	a8c1400c 	andi	r3,r21,1280
    6b50:	00810004 	movi	r2,1024
    6b54:	18800426 	beq	r3,r2,6b68 <__svfscanf_r+0xb64>
    6b58:	a884703a 	and	r2,r21,r2
    6b5c:	103f8126 	beq	r2,zero,6964 <__svfscanf_r+0x960>
    6b60:	d8809e17 	ldw	r2,632(sp)
    6b64:	103f8326 	beq	r2,zero,6974 <__svfscanf_r+0x970>
    6b68:	a880800c 	andi	r2,r21,512
    6b6c:	1000051e 	bne	r2,zero,6b84 <__svfscanf_r+0xb80>
    6b70:	d8c09e17 	ldw	r3,632(sp)
    6b74:	d9009f17 	ldw	r4,636(sp)
    6b78:	ddc09c15 	stw	r23,624(sp)
    6b7c:	1907c83a 	sub	r3,r3,r4
    6b80:	d8c09d15 	stw	r3,628(sp)
    6b84:	00be7fc4 	movi	r2,-1537
    6b88:	a884703a 	and	r2,r21,r2
    6b8c:	15406014 	ori	r21,r2,384
    6b90:	d8009e15 	stw	zero,632(sp)
    6b94:	003f6506 	br	692c <__svfscanf_r+0x928>
    6b98:	d900a617 	ldw	r4,664(sp)
    6b9c:	25fd4e2e 	bgeu	r4,r23,60d8 <__svfscanf_r+0xd4>
    6ba0:	bdffffc4 	addi	r23,r23,-1
    6ba4:	b9400007 	ldb	r5,0(r23)
    6ba8:	b009883a 	mov	r4,r22
    6bac:	800d883a 	mov	r6,r16
    6bb0:	000e04c0 	call	e04c <_ungetc_r>
    6bb4:	d880a617 	ldw	r2,664(sp)
    6bb8:	15fff936 	bltu	r2,r23,6ba0 <__svfscanf_r+0xb9c>
    6bbc:	003d4606 	br	60d8 <__svfscanf_r+0xd4>
    6bc0:	d900a617 	ldw	r4,664(sp)
    6bc4:	25fd442e 	bgeu	r4,r23,60d8 <__svfscanf_r+0xd4>
    6bc8:	bdffffc4 	addi	r23,r23,-1
    6bcc:	b9400007 	ldb	r5,0(r23)
    6bd0:	b009883a 	mov	r4,r22
    6bd4:	800d883a 	mov	r6,r16
    6bd8:	000e04c0 	call	e04c <_ungetc_r>
    6bdc:	d8c0a617 	ldw	r3,664(sp)
    6be0:	1dfff936 	bltu	r3,r23,6bc8 <__svfscanf_r+0xbc4>
    6be4:	003d3c06 	br	60d8 <__svfscanf_r+0xd4>
    6be8:	e0c03fcc 	andi	r3,fp,255
    6bec:	18c0201c 	xori	r3,r3,128
    6bf0:	18ffe004 	addi	r3,r3,-128
    6bf4:	00800084 	movi	r2,2
    6bf8:	18bf5a1e 	bne	r3,r2,6964 <__svfscanf_r+0x960>
    6bfc:	070000c4 	movi	fp,3
    6c00:	003f4a06 	br	692c <__svfscanf_r+0x928>
    6c04:	e0c03fcc 	andi	r3,fp,255
    6c08:	18c0201c 	xori	r3,r3,128
    6c0c:	18ffe004 	addi	r3,r3,-128
    6c10:	1800231e 	bne	r3,zero,6ca0 <__svfscanf_r+0xc9c>
    6c14:	a8c1c00c 	andi	r3,r21,1792
    6c18:	0081c004 	movi	r2,1792
    6c1c:	18bf511e 	bne	r3,r2,6964 <__svfscanf_r+0x960>
    6c20:	00be1fc4 	movi	r2,-1921
    6c24:	a8aa703a 	and	r21,r21,r2
    6c28:	07000044 	movi	fp,1
    6c2c:	003f3f06 	br	692c <__svfscanf_r+0x928>
    6c30:	9000101e 	bne	r18,zero,6c74 <__svfscanf_r+0xc70>
    6c34:	a8c1c00c 	andi	r3,r21,1792
    6c38:	0081c004 	movi	r2,1792
    6c3c:	18800926 	beq	r3,r2,6c64 <__svfscanf_r+0xc60>
    6c40:	e0c03fcc 	andi	r3,fp,255
    6c44:	18c0201c 	xori	r3,r3,128
    6c48:	18ffe004 	addi	r3,r3,-128
    6c4c:	00800044 	movi	r2,1
    6c50:	18800226 	beq	r3,r2,6c5c <__svfscanf_r+0xc58>
    6c54:	00800104 	movi	r2,4
    6c58:	18bf421e 	bne	r3,r2,6964 <__svfscanf_r+0x960>
    6c5c:	e7000044 	addi	fp,fp,1
    6c60:	003f3206 	br	692c <__svfscanf_r+0x928>
    6c64:	00be1fc4 	movi	r2,-1921
    6c68:	a8aa703a 	and	r21,r21,r2
    6c6c:	04800044 	movi	r18,1
    6c70:	003f2e06 	br	692c <__svfscanf_r+0x928>
    6c74:	00800084 	movi	r2,2
    6c78:	90bff11e 	bne	r18,r2,6c40 <__svfscanf_r+0xc3c>
    6c7c:	048000c4 	movi	r18,3
    6c80:	003f2a06 	br	692c <__svfscanf_r+0x928>
    6c84:	e0c03fcc 	andi	r3,fp,255
    6c88:	18c0201c 	xori	r3,r3,128
    6c8c:	18ffe004 	addi	r3,r3,-128
    6c90:	00800184 	movi	r2,6
    6c94:	18bf331e 	bne	r3,r2,6964 <__svfscanf_r+0x960>
    6c98:	070001c4 	movi	fp,7
    6c9c:	003f2306 	br	692c <__svfscanf_r+0x928>
    6ca0:	008000c4 	movi	r2,3
    6ca4:	18bfed26 	beq	r3,r2,6c5c <__svfscanf_r+0xc58>
    6ca8:	00800144 	movi	r2,5
    6cac:	18bfeb26 	beq	r3,r2,6c5c <__svfscanf_r+0xc58>
    6cb0:	003f2c06 	br	6964 <__svfscanf_r+0x960>
    6cb4:	d900a617 	ldw	r4,664(sp)
    6cb8:	25fd072e 	bgeu	r4,r23,60d8 <__svfscanf_r+0xd4>
    6cbc:	bdffffc4 	addi	r23,r23,-1
    6cc0:	b9400007 	ldb	r5,0(r23)
    6cc4:	b009883a 	mov	r4,r22
    6cc8:	800d883a 	mov	r6,r16
    6ccc:	000e04c0 	call	e04c <_ungetc_r>
    6cd0:	d880a617 	ldw	r2,664(sp)
    6cd4:	15fff936 	bltu	r2,r23,6cbc <__svfscanf_r+0xcb8>
    6cd8:	003cff06 	br	60d8 <__svfscanf_r+0xd4>
    6cdc:	a880008c 	andi	r2,r21,2
    6ce0:	10002026 	beq	r2,zero,6d64 <__svfscanf_r+0xd60>
    6ce4:	d900a417 	ldw	r4,656(sp)
    6ce8:	20800017 	ldw	r2,0(r4)
    6cec:	25400104 	addi	r21,r4,4
    6cf0:	10c00115 	stw	r3,4(r2)
    6cf4:	14800015 	stw	r18,0(r2)
    6cf8:	003f6806 	br	6a9c <__svfscanf_r+0xa98>
    6cfc:	d8c09c17 	ldw	r3,624(sp)
    6d00:	b009883a 	mov	r4,r22
    6d04:	000d883a 	mov	r6,zero
    6d08:	19400044 	addi	r5,r3,1
    6d0c:	01c00284 	movi	r7,10
    6d10:	000d4ac0 	call	d4ac <_strtol_r>
    6d14:	d9009d17 	ldw	r4,628(sp)
    6d18:	110dc83a 	sub	r6,r2,r4
    6d1c:	d8c0a617 	ldw	r3,664(sp)
    6d20:	d9009c17 	ldw	r4,624(sp)
    6d24:	188054c4 	addi	r2,r3,339
    6d28:	20800236 	bltu	r4,r2,6d34 <__svfscanf_r+0xd30>
    6d2c:	18805484 	addi	r2,r3,338
    6d30:	d8809c15 	stw	r2,624(sp)
    6d34:	d9009c17 	ldw	r4,624(sp)
    6d38:	01400074 	movhi	r5,1
    6d3c:	29536704 	addi	r5,r5,19868
    6d40:	0003b5c0 	call	3b5c <sprintf>
    6d44:	003f4706 	br	6a64 <__svfscanf_r+0xa60>
    6d48:	d8c09e17 	ldw	r3,632(sp)
    6d4c:	d9009f17 	ldw	r4,636(sp)
    6d50:	1905c83a 	sub	r2,r3,r4
    6d54:	103f4326 	beq	r2,zero,6a64 <__svfscanf_r+0xa60>
    6d58:	008dc83a 	sub	r6,zero,r2
    6d5c:	ddc09c15 	stw	r23,624(sp)
    6d60:	003fee06 	br	6d1c <__svfscanf_r+0xd18>
    6d64:	d880a417 	ldw	r2,656(sp)
    6d68:	9009883a 	mov	r4,r18
    6d6c:	180b883a 	mov	r5,r3
    6d70:	15c00017 	ldw	r23,0(r2)
    6d74:	15400104 	addi	r21,r2,4
    6d78:	000bd480 	call	bd48 <__isnand>
    6d7c:	10021c1e 	bne	r2,zero,75f0 <__svfscanf_r+0x15ec>
    6d80:	980b883a 	mov	r5,r19
    6d84:	9009883a 	mov	r4,r18
    6d88:	0010ec00 	call	10ec0 <__truncdfsf2>
    6d8c:	b8800015 	stw	r2,0(r23)
    6d90:	003f4206 	br	6a9c <__svfscanf_r+0xa98>
    6d94:	e0c03fcc 	andi	r3,fp,255
    6d98:	18c0201c 	xori	r3,r3,128
    6d9c:	18ffe004 	addi	r3,r3,-128
    6da0:	008001c4 	movi	r2,7
    6da4:	18beef1e 	bne	r3,r2,6964 <__svfscanf_r+0x960>
    6da8:	07000204 	movi	fp,8
    6dac:	003edf06 	br	692c <__svfscanf_r+0x928>
    6db0:	d900a317 	ldw	r4,652(sp)
    6db4:	208002a4 	muli	r2,r4,10
    6db8:	1145883a 	add	r2,r2,r5
    6dbc:	10bff404 	addi	r2,r2,-48
    6dc0:	d880a315 	stw	r2,652(sp)
    6dc4:	003ceb06 	br	6174 <__svfscanf_r+0x170>
    6dc8:	9880040c 	andi	r2,r19,16
    6dcc:	10001426 	beq	r2,zero,6e20 <__svfscanf_r+0xe1c>
    6dd0:	0027883a 	mov	r19,zero
    6dd4:	00000906 	br	6dfc <__svfscanf_r+0xdf8>
    6dd8:	80c00117 	ldw	r3,4(r16)
    6ddc:	d880a317 	ldw	r2,652(sp)
    6de0:	29800044 	addi	r6,r5,1
    6de4:	18ffffc4 	addi	r3,r3,-1
    6de8:	9cc00044 	addi	r19,r19,1
    6dec:	81800015 	stw	r6,0(r16)
    6df0:	80c00115 	stw	r3,4(r16)
    6df4:	14fdf726 	beq	r2,r19,65d4 <__svfscanf_r+0x5d0>
    6df8:	00c02c0e 	bge	zero,r3,6eac <__svfscanf_r+0xea8>
    6dfc:	81400017 	ldw	r5,0(r16)
    6e00:	90800017 	ldw	r2,0(r18)
    6e04:	28c00003 	ldbu	r3,0(r5)
    6e08:	1887883a 	add	r3,r3,r2
    6e0c:	19000003 	ldbu	r4,0(r3)
    6e10:	2100020c 	andi	r4,r4,8
    6e14:	203ff026 	beq	r4,zero,6dd8 <__svfscanf_r+0xdd4>
    6e18:	8ce3883a 	add	r17,r17,r19
    6e1c:	003c8c06 	br	6050 <__svfscanf_r+0x4c>
    6e20:	d8c0a417 	ldw	r3,656(sp)
    6e24:	1d400017 	ldw	r21,0(r3)
    6e28:	a827883a 	mov	r19,r21
    6e2c:	00000e06 	br	6e68 <__svfscanf_r+0xe64>
    6e30:	80800117 	ldw	r2,4(r16)
    6e34:	d900a317 	ldw	r4,652(sp)
    6e38:	29800044 	addi	r6,r5,1
    6e3c:	10ffffc4 	addi	r3,r2,-1
    6e40:	213fffc4 	addi	r4,r4,-1
    6e44:	d900a315 	stw	r4,652(sp)
    6e48:	80c00115 	stw	r3,4(r16)
    6e4c:	28800003 	ldbu	r2,0(r5)
    6e50:	98800005 	stb	r2,0(r19)
    6e54:	81800015 	stw	r6,0(r16)
    6e58:	9cc00044 	addi	r19,r19,1
    6e5c:	20000926 	beq	r4,zero,6e84 <__svfscanf_r+0xe80>
    6e60:	80800117 	ldw	r2,4(r16)
    6e64:	0080170e 	bge	zero,r2,6ec4 <__svfscanf_r+0xec0>
    6e68:	81400017 	ldw	r5,0(r16)
    6e6c:	90800017 	ldw	r2,0(r18)
    6e70:	28c00003 	ldbu	r3,0(r5)
    6e74:	1887883a 	add	r3,r3,r2
    6e78:	19000003 	ldbu	r4,0(r3)
    6e7c:	2100020c 	andi	r4,r4,8
    6e80:	203feb26 	beq	r4,zero,6e30 <__svfscanf_r+0xe2c>
    6e84:	9d45c83a 	sub	r2,r19,r21
    6e88:	d8c0a217 	ldw	r3,648(sp)
    6e8c:	88a3883a 	add	r17,r17,r2
    6e90:	d880a417 	ldw	r2,656(sp)
    6e94:	18c00044 	addi	r3,r3,1
    6e98:	d8c0a215 	stw	r3,648(sp)
    6e9c:	10800104 	addi	r2,r2,4
    6ea0:	d880a415 	stw	r2,656(sp)
    6ea4:	98000005 	stb	zero,0(r19)
    6ea8:	003c6906 	br	6050 <__svfscanf_r+0x4c>
    6eac:	b009883a 	mov	r4,r22
    6eb0:	800b883a 	mov	r5,r16
    6eb4:	000390c0 	call	390c <__srefill_r>
    6eb8:	103fd026 	beq	r2,zero,6dfc <__svfscanf_r+0xdf8>
    6ebc:	8ce3883a 	add	r17,r17,r19
    6ec0:	003c6306 	br	6050 <__svfscanf_r+0x4c>
    6ec4:	b009883a 	mov	r4,r22
    6ec8:	800b883a 	mov	r5,r16
    6ecc:	000390c0 	call	390c <__srefill_r>
    6ed0:	103fe526 	beq	r2,zero,6e68 <__svfscanf_r+0xe64>
    6ed4:	003feb06 	br	6e84 <__svfscanf_r+0xe80>
    6ed8:	d900a317 	ldw	r4,652(sp)
    6edc:	9d41e014 	ori	r21,r19,1920
    6ee0:	2000821e 	bne	r4,zero,70ec <__svfscanf_r+0x10e8>
    6ee4:	d8c04404 	addi	r3,sp,272
    6ee8:	182f883a 	mov	r23,r3
    6eec:	0039883a 	mov	fp,zero
    6ef0:	d8c0a615 	stw	r3,664(sp)
    6ef4:	d8009c15 	stw	zero,624(sp)
    6ef8:	d8009d15 	stw	zero,628(sp)
    6efc:	d8009f15 	stw	zero,636(sp)
    6f00:	d8009e15 	stw	zero,632(sp)
    6f04:	003e9e06 	br	6980 <__svfscanf_r+0x97c>
    6f08:	d900a317 	ldw	r4,652(sp)
    6f0c:	9c836014 	ori	r18,r19,3456
    6f10:	2000161e 	bne	r4,zero,6f6c <__svfscanf_r+0xf68>
    6f14:	d8804404 	addi	r2,sp,272
    6f18:	d880a615 	stw	r2,664(sp)
    6f1c:	002f883a 	mov	r23,zero
    6f20:	1027883a 	mov	r19,r2
    6f24:	9080400c 	andi	r2,r18,256
    6f28:	10000926 	beq	r2,zero,6f50 <__svfscanf_r+0xf4c>
    6f2c:	d8c0a617 	ldw	r3,664(sp)
    6f30:	1cc0052e 	bgeu	r3,r19,6f48 <__svfscanf_r+0xf44>
    6f34:	9cffffc4 	addi	r19,r19,-1
    6f38:	99400007 	ldb	r5,0(r19)
    6f3c:	b009883a 	mov	r4,r22
    6f40:	800d883a 	mov	r6,r16
    6f44:	000e04c0 	call	e04c <_ungetc_r>
    6f48:	d900a617 	ldw	r4,664(sp)
    6f4c:	24fc6226 	beq	r4,r19,60d8 <__svfscanf_r+0xd4>
    6f50:	9080040c 	andi	r2,r18,16
    6f54:	10006726 	beq	r2,zero,70f4 <__svfscanf_r+0x10f0>
    6f58:	d8c0a617 	ldw	r3,664(sp)
    6f5c:	98c5c83a 	sub	r2,r19,r3
    6f60:	b885883a 	add	r2,r23,r2
    6f64:	88a3883a 	add	r17,r17,r2
    6f68:	003c3906 	br	6050 <__svfscanf_r+0x4c>
    6f6c:	002b883a 	mov	r21,zero
    6f70:	d8c04404 	addi	r3,sp,272
    6f74:	d8c0a615 	stw	r3,664(sp)
    6f78:	002f883a 	mov	r23,zero
    6f7c:	1827883a 	mov	r19,r3
    6f80:	81800017 	ldw	r6,0(r16)
    6f84:	00c01344 	movi	r3,77
    6f88:	31400003 	ldbu	r5,0(r6)
    6f8c:	28bff544 	addi	r2,r5,-43
    6f90:	10803fcc 	andi	r2,r2,255
    6f94:	18bfe336 	bltu	r3,r2,6f24 <__svfscanf_r+0xf20>
    6f98:	1085883a 	add	r2,r2,r2
    6f9c:	1085883a 	add	r2,r2,r2
    6fa0:	00c00034 	movhi	r3,0
    6fa4:	18dbed04 	addi	r3,r3,28596
    6fa8:	10c5883a 	add	r2,r2,r3
    6fac:	11000017 	ldw	r4,0(r2)
    6fb0:	2000683a 	jmp	r4
    6fb4:	00007148 	cmpgei	zero,zero,453
    6fb8:	00006f24 	muli	zero,zero,444
    6fbc:	00007148 	cmpgei	zero,zero,453
    6fc0:	00006f24 	muli	zero,zero,444
    6fc4:	00006f24 	muli	zero,zero,444
    6fc8:	0000718c 	andi	zero,zero,454
    6fcc:	00007288 	cmpgei	zero,zero,458
    6fd0:	00007288 	cmpgei	zero,zero,458
    6fd4:	00007288 	cmpgei	zero,zero,458
    6fd8:	00007288 	cmpgei	zero,zero,458
    6fdc:	00007288 	cmpgei	zero,zero,458
    6fe0:	00007288 	cmpgei	zero,zero,458
    6fe4:	00007288 	cmpgei	zero,zero,458
    6fe8:	000072b0 	cmpltui	zero,zero,458
    6fec:	000072b0 	cmpltui	zero,zero,458
    6ff0:	00006f24 	muli	zero,zero,444
    6ff4:	00006f24 	muli	zero,zero,444
    6ff8:	00006f24 	muli	zero,zero,444
    6ffc:	00006f24 	muli	zero,zero,444
    7000:	00006f24 	muli	zero,zero,444
    7004:	00006f24 	muli	zero,zero,444
    7008:	00006f24 	muli	zero,zero,444
    700c:	000072e0 	cmpeqi	zero,zero,459
    7010:	000072e0 	cmpeqi	zero,zero,459
    7014:	000072e0 	cmpeqi	zero,zero,459
    7018:	000072e0 	cmpeqi	zero,zero,459
    701c:	000072e0 	cmpeqi	zero,zero,459
    7020:	000072e0 	cmpeqi	zero,zero,459
    7024:	00006f24 	muli	zero,zero,444
    7028:	00006f24 	muli	zero,zero,444
    702c:	00006f24 	muli	zero,zero,444
    7030:	00006f24 	muli	zero,zero,444
    7034:	00006f24 	muli	zero,zero,444
    7038:	00006f24 	muli	zero,zero,444
    703c:	00006f24 	muli	zero,zero,444
    7040:	00006f24 	muli	zero,zero,444
    7044:	00006f24 	muli	zero,zero,444
    7048:	00006f24 	muli	zero,zero,444
    704c:	00006f24 	muli	zero,zero,444
    7050:	00006f24 	muli	zero,zero,444
    7054:	00006f24 	muli	zero,zero,444
    7058:	00006f24 	muli	zero,zero,444
    705c:	00006f24 	muli	zero,zero,444
    7060:	00006f24 	muli	zero,zero,444
    7064:	00006f24 	muli	zero,zero,444
    7068:	000072f0 	cmpltui	zero,zero,459
    706c:	00006f24 	muli	zero,zero,444
    7070:	00006f24 	muli	zero,zero,444
    7074:	00006f24 	muli	zero,zero,444
    7078:	00006f24 	muli	zero,zero,444
    707c:	00006f24 	muli	zero,zero,444
    7080:	00006f24 	muli	zero,zero,444
    7084:	00006f24 	muli	zero,zero,444
    7088:	00006f24 	muli	zero,zero,444
    708c:	000072e0 	cmpeqi	zero,zero,459
    7090:	000072e0 	cmpeqi	zero,zero,459
    7094:	000072e0 	cmpeqi	zero,zero,459
    7098:	000072e0 	cmpeqi	zero,zero,459
    709c:	000072e0 	cmpeqi	zero,zero,459
    70a0:	000072e0 	cmpeqi	zero,zero,459
    70a4:	00006f24 	muli	zero,zero,444
    70a8:	00006f24 	muli	zero,zero,444
    70ac:	00006f24 	muli	zero,zero,444
    70b0:	00006f24 	muli	zero,zero,444
    70b4:	00006f24 	muli	zero,zero,444
    70b8:	00006f24 	muli	zero,zero,444
    70bc:	00006f24 	muli	zero,zero,444
    70c0:	00006f24 	muli	zero,zero,444
    70c4:	00006f24 	muli	zero,zero,444
    70c8:	00006f24 	muli	zero,zero,444
    70cc:	00006f24 	muli	zero,zero,444
    70d0:	00006f24 	muli	zero,zero,444
    70d4:	00006f24 	muli	zero,zero,444
    70d8:	00006f24 	muli	zero,zero,444
    70dc:	00006f24 	muli	zero,zero,444
    70e0:	00006f24 	muli	zero,zero,444
    70e4:	00006f24 	muli	zero,zero,444
    70e8:	000072f0 	cmpltui	zero,zero,459
    70ec:	000d883a 	mov	r6,zero
    70f0:	003d9006 	br	6734 <__svfscanf_r+0x730>
    70f4:	98000005 	stb	zero,0(r19)
    70f8:	d8c0a017 	ldw	r3,640(sp)
    70fc:	d940a617 	ldw	r5,664(sp)
    7100:	d9c0a117 	ldw	r7,644(sp)
    7104:	b009883a 	mov	r4,r22
    7108:	000d883a 	mov	r6,zero
    710c:	183ee83a 	callr	r3
    7110:	1007883a 	mov	r3,r2
    7114:	9080080c 	andi	r2,r18,32
    7118:	10004d1e 	bne	r2,zero,7250 <__svfscanf_r+0x124c>
    711c:	9080010c 	andi	r2,r18,4
    7120:	10003426 	beq	r2,zero,71f4 <__svfscanf_r+0x11f0>
    7124:	d900a417 	ldw	r4,656(sp)
    7128:	20800017 	ldw	r2,0(r4)
    712c:	21000104 	addi	r4,r4,4
    7130:	d900a415 	stw	r4,656(sp)
    7134:	10c0000d 	sth	r3,0(r2)
    7138:	d880a217 	ldw	r2,648(sp)
    713c:	10800044 	addi	r2,r2,1
    7140:	d880a215 	stw	r2,648(sp)
    7144:	003f8406 	br	6f58 <__svfscanf_r+0xf54>
    7148:	9080200c 	andi	r2,r18,128
    714c:	103f7526 	beq	r2,zero,6f24 <__svfscanf_r+0xf20>
    7150:	00bfdfc4 	movi	r2,-129
    7154:	90a4703a 	and	r18,r18,r2
    7158:	99400005 	stb	r5,0(r19)
    715c:	9cc00044 	addi	r19,r19,1
    7160:	80c00117 	ldw	r3,4(r16)
    7164:	18ffffc4 	addi	r3,r3,-1
    7168:	80c00115 	stw	r3,4(r16)
    716c:	00c0130e 	bge	zero,r3,71bc <__svfscanf_r+0x11b8>
    7170:	31800044 	addi	r6,r6,1
    7174:	81800015 	stw	r6,0(r16)
    7178:	d880a317 	ldw	r2,652(sp)
    717c:	10bfffc4 	addi	r2,r2,-1
    7180:	d880a315 	stw	r2,652(sp)
    7184:	103f7e1e 	bne	r2,zero,6f80 <__svfscanf_r+0xf7c>
    7188:	003f6606 	br	6f24 <__svfscanf_r+0xf20>
    718c:	9082000c 	andi	r2,r18,2048
    7190:	103ff126 	beq	r2,zero,7158 <__svfscanf_r+0x1154>
    7194:	d8c0a117 	ldw	r3,644(sp)
    7198:	1800031e 	bne	r3,zero,71a8 <__svfscanf_r+0x11a4>
    719c:	01000204 	movi	r4,8
    71a0:	94808014 	ori	r18,r18,512
    71a4:	d900a115 	stw	r4,644(sp)
    71a8:	9081000c 	andi	r2,r18,1024
    71ac:	10000826 	beq	r2,zero,71d0 <__svfscanf_r+0x11cc>
    71b0:	00be9fc4 	movi	r2,-1409
    71b4:	90a4703a 	and	r18,r18,r2
    71b8:	003fe706 	br	7158 <__svfscanf_r+0x1154>
    71bc:	b009883a 	mov	r4,r22
    71c0:	800b883a 	mov	r5,r16
    71c4:	000390c0 	call	390c <__srefill_r>
    71c8:	103feb26 	beq	r2,zero,7178 <__svfscanf_r+0x1174>
    71cc:	003f5506 	br	6f24 <__svfscanf_r+0xf20>
    71d0:	a8000426 	beq	r21,zero,71e4 <__svfscanf_r+0x11e0>
    71d4:	d880a317 	ldw	r2,652(sp)
    71d8:	ad7fffc4 	addi	r21,r21,-1
    71dc:	10800044 	addi	r2,r2,1
    71e0:	d880a315 	stw	r2,652(sp)
    71e4:	00bf1fc4 	movi	r2,-897
    71e8:	90a4703a 	and	r18,r18,r2
    71ec:	bdc00044 	addi	r23,r23,1
    71f0:	003fdb06 	br	7160 <__svfscanf_r+0x115c>
    71f4:	9080004c 	andi	r2,r18,1
    71f8:	1005003a 	cmpeq	r2,r2,zero
    71fc:	10001426 	beq	r2,zero,7250 <__svfscanf_r+0x124c>
    7200:	9080008c 	andi	r2,r18,2
    7204:	10001226 	beq	r2,zero,7250 <__svfscanf_r+0x124c>
    7208:	d8c0a017 	ldw	r3,640(sp)
    720c:	00800074 	movhi	r2,1
    7210:	10b68b04 	addi	r2,r2,-9684
    7214:	18801426 	beq	r3,r2,7268 <__svfscanf_r+0x1264>
    7218:	d9c0a117 	ldw	r7,644(sp)
    721c:	d940a617 	ldw	r5,664(sp)
    7220:	000d883a 	mov	r6,zero
    7224:	b009883a 	mov	r4,r22
    7228:	000d7140 	call	d714 <_strtoll_r>
    722c:	100d883a 	mov	r6,r2
    7230:	180f883a 	mov	r7,r3
    7234:	d900a417 	ldw	r4,656(sp)
    7238:	20800017 	ldw	r2,0(r4)
    723c:	21000104 	addi	r4,r4,4
    7240:	d900a415 	stw	r4,656(sp)
    7244:	11c00115 	stw	r7,4(r2)
    7248:	11800015 	stw	r6,0(r2)
    724c:	003fba06 	br	7138 <__svfscanf_r+0x1134>
    7250:	d900a417 	ldw	r4,656(sp)
    7254:	20800017 	ldw	r2,0(r4)
    7258:	21000104 	addi	r4,r4,4
    725c:	d900a415 	stw	r4,656(sp)
    7260:	10c00015 	stw	r3,0(r2)
    7264:	003fb406 	br	7138 <__svfscanf_r+0x1134>
    7268:	d9c0a117 	ldw	r7,644(sp)
    726c:	d940a617 	ldw	r5,664(sp)
    7270:	000d883a 	mov	r6,zero
    7274:	b009883a 	mov	r4,r22
    7278:	000dc800 	call	dc80 <_strtoull_r>
    727c:	100d883a 	mov	r6,r2
    7280:	180f883a 	mov	r7,r3
    7284:	003feb06 	br	7234 <__svfscanf_r+0x1230>
    7288:	d8c0a117 	ldw	r3,644(sp)
    728c:	18c5883a 	add	r2,r3,r3
    7290:	00c00074 	movhi	r3,1
    7294:	18d36884 	addi	r3,r3,19874
    7298:	10c5883a 	add	r2,r2,r3
    729c:	1080000f 	ldh	r2,0(r2)
    72a0:	00fd1fc4 	movi	r3,-2945
    72a4:	90e4703a 	and	r18,r18,r3
    72a8:	d880a115 	stw	r2,644(sp)
    72ac:	003faa06 	br	7158 <__svfscanf_r+0x1154>
    72b0:	d900a117 	ldw	r4,644(sp)
    72b4:	00c00074 	movhi	r3,1
    72b8:	18d36884 	addi	r3,r3,19874
    72bc:	2105883a 	add	r2,r4,r4
    72c0:	10c5883a 	add	r2,r2,r3
    72c4:	1080000f 	ldh	r2,0(r2)
    72c8:	00c00204 	movi	r3,8
    72cc:	d880a115 	stw	r2,644(sp)
    72d0:	18bf140e 	bge	r3,r2,6f24 <__svfscanf_r+0xf20>
    72d4:	00bd1fc4 	movi	r2,-2945
    72d8:	90a4703a 	and	r18,r18,r2
    72dc:	003f9e06 	br	7158 <__svfscanf_r+0x1154>
    72e0:	d8c0a117 	ldw	r3,644(sp)
    72e4:	00800284 	movi	r2,10
    72e8:	10fffa16 	blt	r2,r3,72d4 <__svfscanf_r+0x12d0>
    72ec:	003f0d06 	br	6f24 <__svfscanf_r+0xf20>
    72f0:	90c1800c 	andi	r3,r18,1536
    72f4:	00808004 	movi	r2,512
    72f8:	18bf0a1e 	bne	r3,r2,6f24 <__svfscanf_r+0xf20>
    72fc:	00bf7fc4 	movi	r2,-513
    7300:	9084703a 	and	r2,r18,r2
    7304:	01000404 	movi	r4,16
    7308:	14814014 	ori	r18,r2,1280
    730c:	d900a115 	stw	r4,644(sp)
    7310:	003f9106 	br	7158 <__svfscanf_r+0x1154>
    7314:	d880a417 	ldw	r2,656(sp)
    7318:	dd400404 	addi	r21,sp,16
    731c:	14800017 	ldw	r18,0(r2)
    7320:	9027883a 	mov	r19,r18
    7324:	81000017 	ldw	r4,0(r16)
    7328:	20800003 	ldbu	r2,0(r4)
    732c:	a885883a 	add	r2,r21,r2
    7330:	10c00007 	ldb	r3,0(r2)
    7334:	18001426 	beq	r3,zero,7388 <__svfscanf_r+0x1384>
    7338:	d8c0a317 	ldw	r3,652(sp)
    733c:	80800117 	ldw	r2,4(r16)
    7340:	21800044 	addi	r6,r4,1
    7344:	18ffffc4 	addi	r3,r3,-1
    7348:	d8c0a315 	stw	r3,652(sp)
    734c:	10ffffc4 	addi	r3,r2,-1
    7350:	80c00115 	stw	r3,4(r16)
    7354:	20800003 	ldbu	r2,0(r4)
    7358:	90800005 	stb	r2,0(r18)
    735c:	d900a317 	ldw	r4,652(sp)
    7360:	81800015 	stw	r6,0(r16)
    7364:	94800044 	addi	r18,r18,1
    7368:	20000726 	beq	r4,zero,7388 <__svfscanf_r+0x1384>
    736c:	80800117 	ldw	r2,4(r16)
    7370:	00bfec16 	blt	zero,r2,7324 <__svfscanf_r+0x1320>
    7374:	b009883a 	mov	r4,r22
    7378:	800b883a 	mov	r5,r16
    737c:	000390c0 	call	390c <__srefill_r>
    7380:	103fe826 	beq	r2,zero,7324 <__svfscanf_r+0x1320>
    7384:	9cbb7426 	beq	r19,r18,6158 <__svfscanf_r+0x154>
    7388:	94e7c83a 	sub	r19,r18,r19
    738c:	983b5226 	beq	r19,zero,60d8 <__svfscanf_r+0xd4>
    7390:	90000005 	stb	zero,0(r18)
    7394:	d880a417 	ldw	r2,656(sp)
    7398:	d8c0a217 	ldw	r3,648(sp)
    739c:	8ce3883a 	add	r17,r17,r19
    73a0:	10800104 	addi	r2,r2,4
    73a4:	18c00044 	addi	r3,r3,1
    73a8:	d880a415 	stw	r2,656(sp)
    73ac:	d8c0a215 	stw	r3,648(sp)
    73b0:	003b2706 	br	6050 <__svfscanf_r+0x4c>
    73b4:	9cc00414 	ori	r19,r19,16
    73b8:	003b6e06 	br	6174 <__svfscanf_r+0x170>
    73bc:	00c00404 	movi	r3,16
    73c0:	01000074 	movhi	r4,1
    73c4:	21368b04 	addi	r4,r4,-9684
    73c8:	9cc08014 	ori	r19,r19,512
    73cc:	054000c4 	movi	r21,3
    73d0:	d8c0a115 	stw	r3,644(sp)
    73d4:	d900a015 	stw	r4,640(sp)
    73d8:	003bf806 	br	63bc <__svfscanf_r+0x3b8>
    73dc:	9880040c 	andi	r2,r19,16
    73e0:	10001926 	beq	r2,zero,7448 <__svfscanf_r+0x1444>
    73e4:	0027883a 	mov	r19,zero
    73e8:	00000b06 	br	7418 <__svfscanf_r+0x1414>
    73ec:	80800017 	ldw	r2,0(r16)
    73f0:	b009883a 	mov	r4,r22
    73f4:	800b883a 	mov	r5,r16
    73f8:	148d883a 	add	r6,r2,r18
    73fc:	81800015 	stw	r6,0(r16)
    7400:	9ca7883a 	add	r19,r19,r18
    7404:	000390c0 	call	390c <__srefill_r>
    7408:	103c711e 	bne	r2,zero,65d0 <__svfscanf_r+0x5cc>
    740c:	d900a317 	ldw	r4,652(sp)
    7410:	2489c83a 	sub	r4,r4,r18
    7414:	d900a315 	stw	r4,652(sp)
    7418:	84800117 	ldw	r18,4(r16)
    741c:	d8c0a317 	ldw	r3,652(sp)
    7420:	90fff216 	blt	r18,r3,73ec <__svfscanf_r+0x13e8>
    7424:	d900a317 	ldw	r4,652(sp)
    7428:	80800017 	ldw	r2,0(r16)
    742c:	9927883a 	add	r19,r19,r4
    7430:	9107c83a 	sub	r3,r18,r4
    7434:	110d883a 	add	r6,r2,r4
    7438:	8ce3883a 	add	r17,r17,r19
    743c:	80c00115 	stw	r3,4(r16)
    7440:	81800015 	stw	r6,0(r16)
    7444:	003b0206 	br	6050 <__svfscanf_r+0x4c>
    7448:	d880a417 	ldw	r2,656(sp)
    744c:	d980a317 	ldw	r6,652(sp)
    7450:	01400044 	movi	r5,1
    7454:	11000017 	ldw	r4,0(r2)
    7458:	800f883a 	mov	r7,r16
    745c:	00096c40 	call	96c4 <fread>
    7460:	103b3d26 	beq	r2,zero,6158 <__svfscanf_r+0x154>
    7464:	d8c0a417 	ldw	r3,656(sp)
    7468:	d900a217 	ldw	r4,648(sp)
    746c:	88a3883a 	add	r17,r17,r2
    7470:	18c00104 	addi	r3,r3,4
    7474:	21000044 	addi	r4,r4,1
    7478:	d8c0a415 	stw	r3,656(sp)
    747c:	d900a215 	stw	r4,648(sp)
    7480:	003af306 	br	6050 <__svfscanf_r+0x4c>
    7484:	8080030b 	ldhu	r2,12(r16)
    7488:	1080100c 	andi	r2,r2,64
    748c:	103b1226 	beq	r2,zero,60d8 <__svfscanf_r+0xd4>
    7490:	003b3306 	br	6160 <__svfscanf_r+0x15c>
    7494:	983b1026 	beq	r19,zero,60d8 <__svfscanf_r+0xd4>
    7498:	8ce3883a 	add	r17,r17,r19
    749c:	003aec06 	br	6050 <__svfscanf_r+0x4c>
    74a0:	983c9626 	beq	r19,zero,66fc <__svfscanf_r+0x6f8>
    74a4:	9cffffc4 	addi	r19,r19,-1
    74a8:	d8c04404 	addi	r3,sp,272
    74ac:	1cc5883a 	add	r2,r3,r19
    74b0:	11400003 	ldbu	r5,0(r2)
    74b4:	b009883a 	mov	r4,r22
    74b8:	800d883a 	mov	r6,r16
    74bc:	000e04c0 	call	e04c <_ungetc_r>
    74c0:	003ff706 	br	74a0 <__svfscanf_r+0x149c>
    74c4:	00bfff84 	movi	r2,-2
    74c8:	18bc7a1e 	bne	r3,r2,66b4 <__svfscanf_r+0x6b0>
    74cc:	003c8406 	br	66e0 <__svfscanf_r+0x6dc>
    74d0:	d900a417 	ldw	r4,656(sp)
    74d4:	25400017 	ldw	r21,0(r4)
    74d8:	21000104 	addi	r4,r4,4
    74dc:	d900a415 	stw	r4,656(sp)
    74e0:	003c4a06 	br	660c <__svfscanf_r+0x608>
    74e4:	00bfff84 	movi	r2,-2
    74e8:	18bc0f1e 	bne	r3,r2,6528 <__svfscanf_r+0x524>
    74ec:	003c1506 	br	6544 <__svfscanf_r+0x540>
    74f0:	b009883a 	mov	r4,r22
    74f4:	800b883a 	mov	r5,r16
    74f8:	000390c0 	call	390c <__srefill_r>
    74fc:	103c1326 	beq	r2,zero,654c <__svfscanf_r+0x548>
    7500:	903b151e 	bne	r18,zero,6158 <__svfscanf_r+0x154>
    7504:	a83ad21e 	bne	r21,zero,6050 <__svfscanf_r+0x4c>
    7508:	d880a217 	ldw	r2,648(sp)
    750c:	10800044 	addi	r2,r2,1
    7510:	d880a215 	stw	r2,648(sp)
    7514:	003ace06 	br	6050 <__svfscanf_r+0x4c>
    7518:	0027883a 	mov	r19,zero
    751c:	003bdd06 	br	6494 <__svfscanf_r+0x490>
    7520:	9cc00114 	ori	r19,r19,4
    7524:	003b1306 	br	6174 <__svfscanf_r+0x170>
    7528:	05400104 	movi	r21,4
    752c:	003ba306 	br	63bc <__svfscanf_r+0x3b8>
    7530:	9cc00054 	ori	r19,r19,1
    7534:	00800074 	movhi	r2,1
    7538:	10b52b04 	addi	r2,r2,-11092
    753c:	00c00284 	movi	r3,10
    7540:	054000c4 	movi	r21,3
    7544:	d880a015 	stw	r2,640(sp)
    7548:	d8c0a115 	stw	r3,644(sp)
    754c:	003b9b06 	br	63bc <__svfscanf_r+0x3b8>
    7550:	9cc01014 	ori	r19,r19,64
    7554:	002b883a 	mov	r21,zero
    7558:	003b9806 	br	63bc <__svfscanf_r+0x3b8>
    755c:	a00b883a 	mov	r5,r20
    7560:	d9000404 	addi	r4,sp,16
    7564:	000bd780 	call	bd78 <__sccl>
    7568:	1029883a 	mov	r20,r2
    756c:	9cc01014 	ori	r19,r19,64
    7570:	05400044 	movi	r21,1
    7574:	003b9106 	br	63bc <__svfscanf_r+0x3b8>
    7578:	9cc00054 	ori	r19,r19,1
    757c:	00800204 	movi	r2,8
    7580:	00c00074 	movhi	r3,1
    7584:	18f68b04 	addi	r3,r3,-9684
    7588:	054000c4 	movi	r21,3
    758c:	d880a115 	stw	r2,644(sp)
    7590:	d8c0a015 	stw	r3,640(sp)
    7594:	003b8906 	br	63bc <__svfscanf_r+0x3b8>
    7598:	9880040c 	andi	r2,r19,16
    759c:	103aac1e 	bne	r2,zero,6050 <__svfscanf_r+0x4c>
    75a0:	9880010c 	andi	r2,r19,4
    75a4:	10002426 	beq	r2,zero,7638 <__svfscanf_r+0x1634>
    75a8:	d900a417 	ldw	r4,656(sp)
    75ac:	20800017 	ldw	r2,0(r4)
    75b0:	21000104 	addi	r4,r4,4
    75b4:	d900a415 	stw	r4,656(sp)
    75b8:	1440000d 	sth	r17,0(r2)
    75bc:	003aa406 	br	6050 <__svfscanf_r+0x4c>
    75c0:	9cc00094 	ori	r19,r19,2
    75c4:	003aeb06 	br	6174 <__svfscanf_r+0x170>
    75c8:	05400084 	movi	r21,2
    75cc:	003b7b06 	br	63bc <__svfscanf_r+0x3b8>
    75d0:	00800404 	movi	r2,16
    75d4:	00c00074 	movhi	r3,1
    75d8:	18f68b04 	addi	r3,r3,-9684
    75dc:	9cc08814 	ori	r19,r19,544
    75e0:	054000c4 	movi	r21,3
    75e4:	d880a115 	stw	r2,644(sp)
    75e8:	d8c0a015 	stw	r3,640(sp)
    75ec:	003b7306 	br	63bc <__svfscanf_r+0x3b8>
    75f0:	0009883a 	mov	r4,zero
    75f4:	000be380 	call	be38 <nanf>
    75f8:	b8800015 	stw	r2,0(r23)
    75fc:	003d2706 	br	6a9c <__svfscanf_r+0xa98>
    7600:	a0c00007 	ldb	r3,0(r20)
    7604:	00801b04 	movi	r2,108
    7608:	18800826 	beq	r3,r2,762c <__svfscanf_r+0x1628>
    760c:	9cc00054 	ori	r19,r19,1
    7610:	003ad806 	br	6174 <__svfscanf_r+0x170>
    7614:	01000074 	movhi	r4,1
    7618:	21352b04 	addi	r4,r4,-11092
    761c:	054000c4 	movi	r21,3
    7620:	d900a015 	stw	r4,640(sp)
    7624:	d800a115 	stw	zero,644(sp)
    7628:	003b6406 	br	63bc <__svfscanf_r+0x3b8>
    762c:	a5000044 	addi	r20,r20,1
    7630:	9cc00094 	ori	r19,r19,2
    7634:	003acf06 	br	6174 <__svfscanf_r+0x170>
    7638:	9880004c 	andi	r2,r19,1
    763c:	1005003a 	cmpeq	r2,r2,zero
    7640:	10000a26 	beq	r2,zero,766c <__svfscanf_r+0x1668>
    7644:	9880008c 	andi	r2,r19,2
    7648:	10000826 	beq	r2,zero,766c <__svfscanf_r+0x1668>
    764c:	d900a417 	ldw	r4,656(sp)
    7650:	8807d7fa 	srai	r3,r17,31
    7654:	20800017 	ldw	r2,0(r4)
    7658:	21000104 	addi	r4,r4,4
    765c:	d900a415 	stw	r4,656(sp)
    7660:	14400015 	stw	r17,0(r2)
    7664:	10c00115 	stw	r3,4(r2)
    7668:	003a7906 	br	6050 <__svfscanf_r+0x4c>
    766c:	d8c0a417 	ldw	r3,656(sp)
    7670:	18800017 	ldw	r2,0(r3)
    7674:	18c00104 	addi	r3,r3,4
    7678:	d8c0a415 	stw	r3,656(sp)
    767c:	14400015 	stw	r17,0(r2)
    7680:	003a7306 	br	6050 <__svfscanf_r+0x4c>

00007684 <__svfscanf>:
    7684:	00800074 	movhi	r2,1
    7688:	109ae204 	addi	r2,r2,27528
    768c:	2013883a 	mov	r9,r4
    7690:	11000017 	ldw	r4,0(r2)
    7694:	2805883a 	mov	r2,r5
    7698:	300f883a 	mov	r7,r6
    769c:	480b883a 	mov	r5,r9
    76a0:	100d883a 	mov	r6,r2
    76a4:	00060041 	jmpi	6004 <__svfscanf_r>

000076a8 <_vfscanf_r>:
    76a8:	defffb04 	addi	sp,sp,-20
    76ac:	dcc00315 	stw	r19,12(sp)
    76b0:	dc800215 	stw	r18,8(sp)
    76b4:	dc400115 	stw	r17,4(sp)
    76b8:	dc000015 	stw	r16,0(sp)
    76bc:	dfc00415 	stw	ra,16(sp)
    76c0:	2021883a 	mov	r16,r4
    76c4:	2823883a 	mov	r17,r5
    76c8:	3025883a 	mov	r18,r6
    76cc:	3827883a 	mov	r19,r7
    76d0:	20000226 	beq	r4,zero,76dc <_vfscanf_r+0x34>
    76d4:	20800e17 	ldw	r2,56(r4)
    76d8:	10000b26 	beq	r2,zero,7708 <_vfscanf_r+0x60>
    76dc:	8009883a 	mov	r4,r16
    76e0:	880b883a 	mov	r5,r17
    76e4:	900d883a 	mov	r6,r18
    76e8:	980f883a 	mov	r7,r19
    76ec:	dfc00417 	ldw	ra,16(sp)
    76f0:	dcc00317 	ldw	r19,12(sp)
    76f4:	dc800217 	ldw	r18,8(sp)
    76f8:	dc400117 	ldw	r17,4(sp)
    76fc:	dc000017 	ldw	r16,0(sp)
    7700:	dec00504 	addi	sp,sp,20
    7704:	00060041 	jmpi	6004 <__svfscanf_r>
    7708:	0002a880 	call	2a88 <__sinit>
    770c:	003ff306 	br	76dc <_vfscanf_r+0x34>

00007710 <vfscanf>:
    7710:	defffb04 	addi	sp,sp,-20
    7714:	dcc00315 	stw	r19,12(sp)
    7718:	04c00074 	movhi	r19,1
    771c:	9cdae204 	addi	r19,r19,27528
    7720:	98c00017 	ldw	r3,0(r19)
    7724:	dc800215 	stw	r18,8(sp)
    7728:	dc400115 	stw	r17,4(sp)
    772c:	dc000015 	stw	r16,0(sp)
    7730:	dfc00415 	stw	ra,16(sp)
    7734:	2021883a 	mov	r16,r4
    7738:	2823883a 	mov	r17,r5
    773c:	3025883a 	mov	r18,r6
    7740:	18000326 	beq	r3,zero,7750 <vfscanf+0x40>
    7744:	18800e17 	ldw	r2,56(r3)
    7748:	1809883a 	mov	r4,r3
    774c:	10000b26 	beq	r2,zero,777c <vfscanf+0x6c>
    7750:	99000017 	ldw	r4,0(r19)
    7754:	800b883a 	mov	r5,r16
    7758:	880d883a 	mov	r6,r17
    775c:	900f883a 	mov	r7,r18
    7760:	dfc00417 	ldw	ra,16(sp)
    7764:	dcc00317 	ldw	r19,12(sp)
    7768:	dc800217 	ldw	r18,8(sp)
    776c:	dc400117 	ldw	r17,4(sp)
    7770:	dc000017 	ldw	r16,0(sp)
    7774:	dec00504 	addi	sp,sp,20
    7778:	00060041 	jmpi	6004 <__svfscanf_r>
    777c:	0002a880 	call	2a88 <__sinit>
    7780:	003ff306 	br	7750 <vfscanf+0x40>

00007784 <_write_r>:
    7784:	defffd04 	addi	sp,sp,-12
    7788:	dc000015 	stw	r16,0(sp)
    778c:	040000b4 	movhi	r16,2
    7790:	8421be04 	addi	r16,r16,-30984
    7794:	dc400115 	stw	r17,4(sp)
    7798:	80000015 	stw	zero,0(r16)
    779c:	2023883a 	mov	r17,r4
    77a0:	2809883a 	mov	r4,r5
    77a4:	300b883a 	mov	r5,r6
    77a8:	380d883a 	mov	r6,r7
    77ac:	dfc00215 	stw	ra,8(sp)
    77b0:	00122b80 	call	122b8 <write>
    77b4:	1007883a 	mov	r3,r2
    77b8:	00bfffc4 	movi	r2,-1
    77bc:	18800626 	beq	r3,r2,77d8 <_write_r+0x54>
    77c0:	1805883a 	mov	r2,r3
    77c4:	dfc00217 	ldw	ra,8(sp)
    77c8:	dc400117 	ldw	r17,4(sp)
    77cc:	dc000017 	ldw	r16,0(sp)
    77d0:	dec00304 	addi	sp,sp,12
    77d4:	f800283a 	ret
    77d8:	80800017 	ldw	r2,0(r16)
    77dc:	103ff826 	beq	r2,zero,77c0 <_write_r+0x3c>
    77e0:	88800015 	stw	r2,0(r17)
    77e4:	1805883a 	mov	r2,r3
    77e8:	dfc00217 	ldw	ra,8(sp)
    77ec:	dc400117 	ldw	r17,4(sp)
    77f0:	dc000017 	ldw	r16,0(sp)
    77f4:	dec00304 	addi	sp,sp,12
    77f8:	f800283a 	ret

000077fc <__swsetup_r>:
    77fc:	00800074 	movhi	r2,1
    7800:	109ae204 	addi	r2,r2,27528
    7804:	10c00017 	ldw	r3,0(r2)
    7808:	defffd04 	addi	sp,sp,-12
    780c:	dc400115 	stw	r17,4(sp)
    7810:	dc000015 	stw	r16,0(sp)
    7814:	dfc00215 	stw	ra,8(sp)
    7818:	2023883a 	mov	r17,r4
    781c:	2821883a 	mov	r16,r5
    7820:	18000226 	beq	r3,zero,782c <__swsetup_r+0x30>
    7824:	18800e17 	ldw	r2,56(r3)
    7828:	10001f26 	beq	r2,zero,78a8 <__swsetup_r+0xac>
    782c:	8100030b 	ldhu	r4,12(r16)
    7830:	2080020c 	andi	r2,r4,8
    7834:	10002826 	beq	r2,zero,78d8 <__swsetup_r+0xdc>
    7838:	81400417 	ldw	r5,16(r16)
    783c:	28001d26 	beq	r5,zero,78b4 <__swsetup_r+0xb8>
    7840:	2080004c 	andi	r2,r4,1
    7844:	1005003a 	cmpeq	r2,r2,zero
    7848:	10000b26 	beq	r2,zero,7878 <__swsetup_r+0x7c>
    784c:	2080008c 	andi	r2,r4,2
    7850:	10001226 	beq	r2,zero,789c <__swsetup_r+0xa0>
    7854:	0005883a 	mov	r2,zero
    7858:	80800215 	stw	r2,8(r16)
    785c:	28000b26 	beq	r5,zero,788c <__swsetup_r+0x90>
    7860:	0005883a 	mov	r2,zero
    7864:	dfc00217 	ldw	ra,8(sp)
    7868:	dc400117 	ldw	r17,4(sp)
    786c:	dc000017 	ldw	r16,0(sp)
    7870:	dec00304 	addi	sp,sp,12
    7874:	f800283a 	ret
    7878:	80800517 	ldw	r2,20(r16)
    787c:	80000215 	stw	zero,8(r16)
    7880:	0085c83a 	sub	r2,zero,r2
    7884:	80800615 	stw	r2,24(r16)
    7888:	283ff51e 	bne	r5,zero,7860 <__swsetup_r+0x64>
    788c:	2080200c 	andi	r2,r4,128
    7890:	103ff326 	beq	r2,zero,7860 <__swsetup_r+0x64>
    7894:	00bfffc4 	movi	r2,-1
    7898:	003ff206 	br	7864 <__swsetup_r+0x68>
    789c:	80800517 	ldw	r2,20(r16)
    78a0:	80800215 	stw	r2,8(r16)
    78a4:	003fed06 	br	785c <__swsetup_r+0x60>
    78a8:	1809883a 	mov	r4,r3
    78ac:	0002a880 	call	2a88 <__sinit>
    78b0:	003fde06 	br	782c <__swsetup_r+0x30>
    78b4:	20c0a00c 	andi	r3,r4,640
    78b8:	00808004 	movi	r2,512
    78bc:	18bfe026 	beq	r3,r2,7840 <__swsetup_r+0x44>
    78c0:	8809883a 	mov	r4,r17
    78c4:	800b883a 	mov	r5,r16
    78c8:	000a1480 	call	a148 <__smakebuf_r>
    78cc:	8100030b 	ldhu	r4,12(r16)
    78d0:	81400417 	ldw	r5,16(r16)
    78d4:	003fda06 	br	7840 <__swsetup_r+0x44>
    78d8:	2080040c 	andi	r2,r4,16
    78dc:	103fed26 	beq	r2,zero,7894 <__swsetup_r+0x98>
    78e0:	2080010c 	andi	r2,r4,4
    78e4:	10001226 	beq	r2,zero,7930 <__swsetup_r+0x134>
    78e8:	81400c17 	ldw	r5,48(r16)
    78ec:	28000526 	beq	r5,zero,7904 <__swsetup_r+0x108>
    78f0:	80801004 	addi	r2,r16,64
    78f4:	28800226 	beq	r5,r2,7900 <__swsetup_r+0x104>
    78f8:	8809883a 	mov	r4,r17
    78fc:	00098300 	call	9830 <_free_r>
    7900:	80000c15 	stw	zero,48(r16)
    7904:	8080030b 	ldhu	r2,12(r16)
    7908:	81400417 	ldw	r5,16(r16)
    790c:	80000115 	stw	zero,4(r16)
    7910:	10bff6cc 	andi	r2,r2,65499
    7914:	8080030d 	sth	r2,12(r16)
    7918:	81400015 	stw	r5,0(r16)
    791c:	8080030b 	ldhu	r2,12(r16)
    7920:	10800214 	ori	r2,r2,8
    7924:	113fffcc 	andi	r4,r2,65535
    7928:	8080030d 	sth	r2,12(r16)
    792c:	003fc306 	br	783c <__swsetup_r+0x40>
    7930:	81400417 	ldw	r5,16(r16)
    7934:	003ff906 	br	791c <__swsetup_r+0x120>

00007938 <_close_r>:
    7938:	defffd04 	addi	sp,sp,-12
    793c:	dc000015 	stw	r16,0(sp)
    7940:	040000b4 	movhi	r16,2
    7944:	8421be04 	addi	r16,r16,-30984
    7948:	dc400115 	stw	r17,4(sp)
    794c:	80000015 	stw	zero,0(r16)
    7950:	2023883a 	mov	r17,r4
    7954:	2809883a 	mov	r4,r5
    7958:	dfc00215 	stw	ra,8(sp)
    795c:	00119580 	call	11958 <close>
    7960:	1007883a 	mov	r3,r2
    7964:	00bfffc4 	movi	r2,-1
    7968:	18800626 	beq	r3,r2,7984 <_close_r+0x4c>
    796c:	1805883a 	mov	r2,r3
    7970:	dfc00217 	ldw	ra,8(sp)
    7974:	dc400117 	ldw	r17,4(sp)
    7978:	dc000017 	ldw	r16,0(sp)
    797c:	dec00304 	addi	sp,sp,12
    7980:	f800283a 	ret
    7984:	80800017 	ldw	r2,0(r16)
    7988:	103ff826 	beq	r2,zero,796c <_close_r+0x34>
    798c:	88800015 	stw	r2,0(r17)
    7990:	1805883a 	mov	r2,r3
    7994:	dfc00217 	ldw	ra,8(sp)
    7998:	dc400117 	ldw	r17,4(sp)
    799c:	dc000017 	ldw	r16,0(sp)
    79a0:	dec00304 	addi	sp,sp,12
    79a4:	f800283a 	ret

000079a8 <quorem>:
    79a8:	28c00417 	ldw	r3,16(r5)
    79ac:	20800417 	ldw	r2,16(r4)
    79b0:	defff604 	addi	sp,sp,-40
    79b4:	ddc00715 	stw	r23,28(sp)
    79b8:	dd400515 	stw	r21,20(sp)
    79bc:	dfc00915 	stw	ra,36(sp)
    79c0:	df000815 	stw	fp,32(sp)
    79c4:	dd800615 	stw	r22,24(sp)
    79c8:	dd000415 	stw	r20,16(sp)
    79cc:	dcc00315 	stw	r19,12(sp)
    79d0:	dc800215 	stw	r18,8(sp)
    79d4:	dc400115 	stw	r17,4(sp)
    79d8:	dc000015 	stw	r16,0(sp)
    79dc:	202f883a 	mov	r23,r4
    79e0:	282b883a 	mov	r21,r5
    79e4:	10c07416 	blt	r2,r3,7bb8 <quorem+0x210>
    79e8:	1c7fffc4 	addi	r17,r3,-1
    79ec:	8c45883a 	add	r2,r17,r17
    79f0:	1085883a 	add	r2,r2,r2
    79f4:	2c000504 	addi	r16,r5,20
    79f8:	24c00504 	addi	r19,r4,20
    79fc:	14ed883a 	add	r22,r2,r19
    7a00:	80a5883a 	add	r18,r16,r2
    7a04:	b7000017 	ldw	fp,0(r22)
    7a08:	91400017 	ldw	r5,0(r18)
    7a0c:	e009883a 	mov	r4,fp
    7a10:	29400044 	addi	r5,r5,1
    7a14:	00028a40 	call	28a4 <__udivsi3>
    7a18:	1029883a 	mov	r20,r2
    7a1c:	10003c1e 	bne	r2,zero,7b10 <quorem+0x168>
    7a20:	a80b883a 	mov	r5,r21
    7a24:	b809883a 	mov	r4,r23
    7a28:	000a6180 	call	a618 <__mcmp>
    7a2c:	10002b16 	blt	r2,zero,7adc <quorem+0x134>
    7a30:	a5000044 	addi	r20,r20,1
    7a34:	980f883a 	mov	r7,r19
    7a38:	0011883a 	mov	r8,zero
    7a3c:	0009883a 	mov	r4,zero
    7a40:	81400017 	ldw	r5,0(r16)
    7a44:	38c00017 	ldw	r3,0(r7)
    7a48:	84000104 	addi	r16,r16,4
    7a4c:	28bfffcc 	andi	r2,r5,65535
    7a50:	2085883a 	add	r2,r4,r2
    7a54:	11bfffcc 	andi	r6,r2,65535
    7a58:	193fffcc 	andi	r4,r3,65535
    7a5c:	1004d43a 	srli	r2,r2,16
    7a60:	280ad43a 	srli	r5,r5,16
    7a64:	2189c83a 	sub	r4,r4,r6
    7a68:	2209883a 	add	r4,r4,r8
    7a6c:	1806d43a 	srli	r3,r3,16
    7a70:	288b883a 	add	r5,r5,r2
    7a74:	200dd43a 	srai	r6,r4,16
    7a78:	28bfffcc 	andi	r2,r5,65535
    7a7c:	1887c83a 	sub	r3,r3,r2
    7a80:	1987883a 	add	r3,r3,r6
    7a84:	3900000d 	sth	r4,0(r7)
    7a88:	38c0008d 	sth	r3,2(r7)
    7a8c:	2808d43a 	srli	r4,r5,16
    7a90:	39c00104 	addi	r7,r7,4
    7a94:	1811d43a 	srai	r8,r3,16
    7a98:	943fe92e 	bgeu	r18,r16,7a40 <quorem+0x98>
    7a9c:	8c45883a 	add	r2,r17,r17
    7aa0:	1085883a 	add	r2,r2,r2
    7aa4:	9885883a 	add	r2,r19,r2
    7aa8:	10c00017 	ldw	r3,0(r2)
    7aac:	18000b1e 	bne	r3,zero,7adc <quorem+0x134>
    7ab0:	113fff04 	addi	r4,r2,-4
    7ab4:	9900082e 	bgeu	r19,r4,7ad8 <quorem+0x130>
    7ab8:	10bfff17 	ldw	r2,-4(r2)
    7abc:	10000326 	beq	r2,zero,7acc <quorem+0x124>
    7ac0:	00000506 	br	7ad8 <quorem+0x130>
    7ac4:	20800017 	ldw	r2,0(r4)
    7ac8:	1000031e 	bne	r2,zero,7ad8 <quorem+0x130>
    7acc:	213fff04 	addi	r4,r4,-4
    7ad0:	8c7fffc4 	addi	r17,r17,-1
    7ad4:	993ffb36 	bltu	r19,r4,7ac4 <quorem+0x11c>
    7ad8:	bc400415 	stw	r17,16(r23)
    7adc:	a005883a 	mov	r2,r20
    7ae0:	dfc00917 	ldw	ra,36(sp)
    7ae4:	df000817 	ldw	fp,32(sp)
    7ae8:	ddc00717 	ldw	r23,28(sp)
    7aec:	dd800617 	ldw	r22,24(sp)
    7af0:	dd400517 	ldw	r21,20(sp)
    7af4:	dd000417 	ldw	r20,16(sp)
    7af8:	dcc00317 	ldw	r19,12(sp)
    7afc:	dc800217 	ldw	r18,8(sp)
    7b00:	dc400117 	ldw	r17,4(sp)
    7b04:	dc000017 	ldw	r16,0(sp)
    7b08:	dec00a04 	addi	sp,sp,40
    7b0c:	f800283a 	ret
    7b10:	980f883a 	mov	r7,r19
    7b14:	8011883a 	mov	r8,r16
    7b18:	0013883a 	mov	r9,zero
    7b1c:	000d883a 	mov	r6,zero
    7b20:	40c00017 	ldw	r3,0(r8)
    7b24:	39000017 	ldw	r4,0(r7)
    7b28:	42000104 	addi	r8,r8,4
    7b2c:	18bfffcc 	andi	r2,r3,65535
    7b30:	a085383a 	mul	r2,r20,r2
    7b34:	1806d43a 	srli	r3,r3,16
    7b38:	217fffcc 	andi	r5,r4,65535
    7b3c:	3085883a 	add	r2,r6,r2
    7b40:	11bfffcc 	andi	r6,r2,65535
    7b44:	a0c7383a 	mul	r3,r20,r3
    7b48:	1004d43a 	srli	r2,r2,16
    7b4c:	298bc83a 	sub	r5,r5,r6
    7b50:	2a4b883a 	add	r5,r5,r9
    7b54:	2008d43a 	srli	r4,r4,16
    7b58:	1887883a 	add	r3,r3,r2
    7b5c:	280dd43a 	srai	r6,r5,16
    7b60:	18bfffcc 	andi	r2,r3,65535
    7b64:	2089c83a 	sub	r4,r4,r2
    7b68:	2189883a 	add	r4,r4,r6
    7b6c:	3900008d 	sth	r4,2(r7)
    7b70:	3940000d 	sth	r5,0(r7)
    7b74:	180cd43a 	srli	r6,r3,16
    7b78:	39c00104 	addi	r7,r7,4
    7b7c:	2013d43a 	srai	r9,r4,16
    7b80:	923fe72e 	bgeu	r18,r8,7b20 <quorem+0x178>
    7b84:	e03fa61e 	bne	fp,zero,7a20 <quorem+0x78>
    7b88:	b0ffff04 	addi	r3,r22,-4
    7b8c:	98c0082e 	bgeu	r19,r3,7bb0 <quorem+0x208>
    7b90:	b0bfff17 	ldw	r2,-4(r22)
    7b94:	10000326 	beq	r2,zero,7ba4 <quorem+0x1fc>
    7b98:	00000506 	br	7bb0 <quorem+0x208>
    7b9c:	18800017 	ldw	r2,0(r3)
    7ba0:	1000031e 	bne	r2,zero,7bb0 <quorem+0x208>
    7ba4:	18ffff04 	addi	r3,r3,-4
    7ba8:	8c7fffc4 	addi	r17,r17,-1
    7bac:	98fffb36 	bltu	r19,r3,7b9c <quorem+0x1f4>
    7bb0:	bc400415 	stw	r17,16(r23)
    7bb4:	003f9a06 	br	7a20 <quorem+0x78>
    7bb8:	0005883a 	mov	r2,zero
    7bbc:	003fc806 	br	7ae0 <quorem+0x138>

00007bc0 <_dtoa_r>:
    7bc0:	22001017 	ldw	r8,64(r4)
    7bc4:	deffda04 	addi	sp,sp,-152
    7bc8:	dd402115 	stw	r21,132(sp)
    7bcc:	dd002015 	stw	r20,128(sp)
    7bd0:	dc801e15 	stw	r18,120(sp)
    7bd4:	dc401d15 	stw	r17,116(sp)
    7bd8:	dfc02515 	stw	ra,148(sp)
    7bdc:	df002415 	stw	fp,144(sp)
    7be0:	ddc02315 	stw	r23,140(sp)
    7be4:	dd802215 	stw	r22,136(sp)
    7be8:	dcc01f15 	stw	r19,124(sp)
    7bec:	dc001c15 	stw	r16,112(sp)
    7bf0:	d9001615 	stw	r4,88(sp)
    7bf4:	3023883a 	mov	r17,r6
    7bf8:	2829883a 	mov	r20,r5
    7bfc:	d9c01715 	stw	r7,92(sp)
    7c00:	dc802817 	ldw	r18,160(sp)
    7c04:	302b883a 	mov	r21,r6
    7c08:	40000a26 	beq	r8,zero,7c34 <_dtoa_r+0x74>
    7c0c:	20801117 	ldw	r2,68(r4)
    7c10:	400b883a 	mov	r5,r8
    7c14:	40800115 	stw	r2,4(r8)
    7c18:	20c01117 	ldw	r3,68(r4)
    7c1c:	00800044 	movi	r2,1
    7c20:	10c4983a 	sll	r2,r2,r3
    7c24:	40800215 	stw	r2,8(r8)
    7c28:	000a4bc0 	call	a4bc <_Bfree>
    7c2c:	d8c01617 	ldw	r3,88(sp)
    7c30:	18001015 	stw	zero,64(r3)
    7c34:	8800a316 	blt	r17,zero,7ec4 <_dtoa_r+0x304>
    7c38:	90000015 	stw	zero,0(r18)
    7c3c:	a8dffc2c 	andhi	r3,r21,32752
    7c40:	009ffc34 	movhi	r2,32752
    7c44:	18809126 	beq	r3,r2,7e8c <_dtoa_r+0x2cc>
    7c48:	000d883a 	mov	r6,zero
    7c4c:	000f883a 	mov	r7,zero
    7c50:	a009883a 	mov	r4,r20
    7c54:	a80b883a 	mov	r5,r21
    7c58:	dd001215 	stw	r20,72(sp)
    7c5c:	dd401315 	stw	r21,76(sp)
    7c60:	0010a480 	call	10a48 <__nedf2>
    7c64:	1000171e 	bne	r2,zero,7cc4 <_dtoa_r+0x104>
    7c68:	d9802717 	ldw	r6,156(sp)
    7c6c:	00800044 	movi	r2,1
    7c70:	30800015 	stw	r2,0(r6)
    7c74:	d8802917 	ldw	r2,164(sp)
    7c78:	10029b26 	beq	r2,zero,86e8 <_dtoa_r+0xb28>
    7c7c:	d9002917 	ldw	r4,164(sp)
    7c80:	00800074 	movhi	r2,1
    7c84:	10935e44 	addi	r2,r2,19833
    7c88:	10ffffc4 	addi	r3,r2,-1
    7c8c:	20800015 	stw	r2,0(r4)
    7c90:	1805883a 	mov	r2,r3
    7c94:	dfc02517 	ldw	ra,148(sp)
    7c98:	df002417 	ldw	fp,144(sp)
    7c9c:	ddc02317 	ldw	r23,140(sp)
    7ca0:	dd802217 	ldw	r22,136(sp)
    7ca4:	dd402117 	ldw	r21,132(sp)
    7ca8:	dd002017 	ldw	r20,128(sp)
    7cac:	dcc01f17 	ldw	r19,124(sp)
    7cb0:	dc801e17 	ldw	r18,120(sp)
    7cb4:	dc401d17 	ldw	r17,116(sp)
    7cb8:	dc001c17 	ldw	r16,112(sp)
    7cbc:	dec02604 	addi	sp,sp,152
    7cc0:	f800283a 	ret
    7cc4:	d9001617 	ldw	r4,88(sp)
    7cc8:	d9401217 	ldw	r5,72(sp)
    7ccc:	d8800104 	addi	r2,sp,4
    7cd0:	a80d883a 	mov	r6,r21
    7cd4:	d9c00204 	addi	r7,sp,8
    7cd8:	d8800015 	stw	r2,0(sp)
    7cdc:	000aaf80 	call	aaf8 <__d2b>
    7ce0:	d8800715 	stw	r2,28(sp)
    7ce4:	a804d53a 	srli	r2,r21,20
    7ce8:	1101ffcc 	andi	r4,r2,2047
    7cec:	20008626 	beq	r4,zero,7f08 <_dtoa_r+0x348>
    7cf0:	d8c01217 	ldw	r3,72(sp)
    7cf4:	00800434 	movhi	r2,16
    7cf8:	10bfffc4 	addi	r2,r2,-1
    7cfc:	ddc00117 	ldw	r23,4(sp)
    7d00:	a884703a 	and	r2,r21,r2
    7d04:	1811883a 	mov	r8,r3
    7d08:	124ffc34 	orhi	r9,r2,16368
    7d0c:	25bf0044 	addi	r22,r4,-1023
    7d10:	d8000815 	stw	zero,32(sp)
    7d14:	0005883a 	mov	r2,zero
    7d18:	00cffe34 	movhi	r3,16376
    7d1c:	480b883a 	mov	r5,r9
    7d20:	4009883a 	mov	r4,r8
    7d24:	180f883a 	mov	r7,r3
    7d28:	100d883a 	mov	r6,r2
    7d2c:	00102b00 	call	102b0 <__subdf3>
    7d30:	0218dbf4 	movhi	r8,25455
    7d34:	4210d844 	addi	r8,r8,17249
    7d38:	024ff4f4 	movhi	r9,16339
    7d3c:	4a61e9c4 	addi	r9,r9,-30809
    7d40:	480f883a 	mov	r7,r9
    7d44:	400d883a 	mov	r6,r8
    7d48:	180b883a 	mov	r5,r3
    7d4c:	1009883a 	mov	r4,r2
    7d50:	00103a40 	call	103a4 <__muldf3>
    7d54:	0222d874 	movhi	r8,35681
    7d58:	42322cc4 	addi	r8,r8,-14157
    7d5c:	024ff1f4 	movhi	r9,16327
    7d60:	4a628a04 	addi	r9,r9,-30168
    7d64:	480f883a 	mov	r7,r9
    7d68:	400d883a 	mov	r6,r8
    7d6c:	180b883a 	mov	r5,r3
    7d70:	1009883a 	mov	r4,r2
    7d74:	00103300 	call	10330 <__adddf3>
    7d78:	b009883a 	mov	r4,r22
    7d7c:	1021883a 	mov	r16,r2
    7d80:	1823883a 	mov	r17,r3
    7d84:	0010cf00 	call	10cf0 <__floatsidf>
    7d88:	021427f4 	movhi	r8,20639
    7d8c:	421e7ec4 	addi	r8,r8,31227
    7d90:	024ff4f4 	movhi	r9,16339
    7d94:	4a5104c4 	addi	r9,r9,17427
    7d98:	480f883a 	mov	r7,r9
    7d9c:	400d883a 	mov	r6,r8
    7da0:	180b883a 	mov	r5,r3
    7da4:	1009883a 	mov	r4,r2
    7da8:	00103a40 	call	103a4 <__muldf3>
    7dac:	180f883a 	mov	r7,r3
    7db0:	880b883a 	mov	r5,r17
    7db4:	100d883a 	mov	r6,r2
    7db8:	8009883a 	mov	r4,r16
    7dbc:	00103300 	call	10330 <__adddf3>
    7dc0:	1009883a 	mov	r4,r2
    7dc4:	180b883a 	mov	r5,r3
    7dc8:	1021883a 	mov	r16,r2
    7dcc:	1823883a 	mov	r17,r3
    7dd0:	0010de80 	call	10de8 <__fixdfsi>
    7dd4:	000d883a 	mov	r6,zero
    7dd8:	000f883a 	mov	r7,zero
    7ddc:	8009883a 	mov	r4,r16
    7de0:	880b883a 	mov	r5,r17
    7de4:	d8800d15 	stw	r2,52(sp)
    7de8:	0010be00 	call	10be0 <__ltdf2>
    7dec:	10031716 	blt	r2,zero,8a4c <_dtoa_r+0xe8c>
    7df0:	d8c00d17 	ldw	r3,52(sp)
    7df4:	00800584 	movi	r2,22
    7df8:	10c1482e 	bgeu	r2,r3,831c <_dtoa_r+0x75c>
    7dfc:	01000044 	movi	r4,1
    7e00:	d9000c15 	stw	r4,48(sp)
    7e04:	bd85c83a 	sub	r2,r23,r22
    7e08:	11bfffc4 	addi	r6,r2,-1
    7e0c:	30030b16 	blt	r6,zero,8a3c <_dtoa_r+0xe7c>
    7e10:	d9800a15 	stw	r6,40(sp)
    7e14:	d8001115 	stw	zero,68(sp)
    7e18:	d8c00d17 	ldw	r3,52(sp)
    7e1c:	1802ff16 	blt	r3,zero,8a1c <_dtoa_r+0xe5c>
    7e20:	d9000a17 	ldw	r4,40(sp)
    7e24:	d8c00915 	stw	r3,36(sp)
    7e28:	d8001015 	stw	zero,64(sp)
    7e2c:	20c9883a 	add	r4,r4,r3
    7e30:	d9000a15 	stw	r4,40(sp)
    7e34:	d9001717 	ldw	r4,92(sp)
    7e38:	00800244 	movi	r2,9
    7e3c:	11004636 	bltu	r2,r4,7f58 <_dtoa_r+0x398>
    7e40:	00800144 	movi	r2,5
    7e44:	11020416 	blt	r2,r4,8658 <_dtoa_r+0xa98>
    7e48:	04400044 	movi	r17,1
    7e4c:	d8c01717 	ldw	r3,92(sp)
    7e50:	00800144 	movi	r2,5
    7e54:	10c1ed36 	bltu	r2,r3,860c <_dtoa_r+0xa4c>
    7e58:	18c5883a 	add	r2,r3,r3
    7e5c:	1085883a 	add	r2,r2,r2
    7e60:	00c00034 	movhi	r3,0
    7e64:	18df9d04 	addi	r3,r3,32372
    7e68:	10c5883a 	add	r2,r2,r3
    7e6c:	11000017 	ldw	r4,0(r2)
    7e70:	2000683a 	jmp	r4
    7e74:	00007f60 	cmpeqi	zero,zero,509
    7e78:	00007f60 	cmpeqi	zero,zero,509
    7e7c:	00008960 	cmpeqi	zero,zero,549
    7e80:	00008938 	rdprs	zero,zero,548
    7e84:	0000897c 	xorhi	zero,zero,549
    7e88:	00008988 	cmpgei	zero,zero,550
    7e8c:	d9002717 	ldw	r4,156(sp)
    7e90:	0089c3c4 	movi	r2,9999
    7e94:	20800015 	stw	r2,0(r4)
    7e98:	a0001026 	beq	r20,zero,7edc <_dtoa_r+0x31c>
    7e9c:	00c00074 	movhi	r3,1
    7ea0:	18d37404 	addi	r3,r3,19920
    7ea4:	d9802917 	ldw	r6,164(sp)
    7ea8:	303f7926 	beq	r6,zero,7c90 <_dtoa_r+0xd0>
    7eac:	188000c7 	ldb	r2,3(r3)
    7eb0:	190000c4 	addi	r4,r3,3
    7eb4:	1000101e 	bne	r2,zero,7ef8 <_dtoa_r+0x338>
    7eb8:	d8802917 	ldw	r2,164(sp)
    7ebc:	11000015 	stw	r4,0(r2)
    7ec0:	003f7306 	br	7c90 <_dtoa_r+0xd0>
    7ec4:	00a00034 	movhi	r2,32768
    7ec8:	10bfffc4 	addi	r2,r2,-1
    7ecc:	00c00044 	movi	r3,1
    7ed0:	88aa703a 	and	r21,r17,r2
    7ed4:	90c00015 	stw	r3,0(r18)
    7ed8:	003f5806 	br	7c3c <_dtoa_r+0x7c>
    7edc:	00800434 	movhi	r2,16
    7ee0:	10bfffc4 	addi	r2,r2,-1
    7ee4:	a884703a 	and	r2,r21,r2
    7ee8:	103fec1e 	bne	r2,zero,7e9c <_dtoa_r+0x2dc>
    7eec:	00c00074 	movhi	r3,1
    7ef0:	18d37104 	addi	r3,r3,19908
    7ef4:	003feb06 	br	7ea4 <_dtoa_r+0x2e4>
    7ef8:	d8802917 	ldw	r2,164(sp)
    7efc:	19000204 	addi	r4,r3,8
    7f00:	11000015 	stw	r4,0(r2)
    7f04:	003f6206 	br	7c90 <_dtoa_r+0xd0>
    7f08:	ddc00117 	ldw	r23,4(sp)
    7f0c:	d8800217 	ldw	r2,8(sp)
    7f10:	01000804 	movi	r4,32
    7f14:	b8c10c84 	addi	r3,r23,1074
    7f18:	18a3883a 	add	r17,r3,r2
    7f1c:	2441b80e 	bge	r4,r17,8600 <_dtoa_r+0xa40>
    7f20:	00c01004 	movi	r3,64
    7f24:	1c47c83a 	sub	r3,r3,r17
    7f28:	88bff804 	addi	r2,r17,-32
    7f2c:	a8c6983a 	sll	r3,r21,r3
    7f30:	a084d83a 	srl	r2,r20,r2
    7f34:	1888b03a 	or	r4,r3,r2
    7f38:	0010f340 	call	10f34 <__floatunsidf>
    7f3c:	1011883a 	mov	r8,r2
    7f40:	00bf8434 	movhi	r2,65040
    7f44:	01000044 	movi	r4,1
    7f48:	10d3883a 	add	r9,r2,r3
    7f4c:	8dbef344 	addi	r22,r17,-1075
    7f50:	d9000815 	stw	r4,32(sp)
    7f54:	003f6f06 	br	7d14 <_dtoa_r+0x154>
    7f58:	d8001715 	stw	zero,92(sp)
    7f5c:	04400044 	movi	r17,1
    7f60:	00bfffc4 	movi	r2,-1
    7f64:	00c00044 	movi	r3,1
    7f68:	d8800e15 	stw	r2,56(sp)
    7f6c:	d8002615 	stw	zero,152(sp)
    7f70:	d8800f15 	stw	r2,60(sp)
    7f74:	d8c00b15 	stw	r3,44(sp)
    7f78:	1021883a 	mov	r16,r2
    7f7c:	d8801617 	ldw	r2,88(sp)
    7f80:	10001115 	stw	zero,68(r2)
    7f84:	d8801617 	ldw	r2,88(sp)
    7f88:	11401117 	ldw	r5,68(r2)
    7f8c:	1009883a 	mov	r4,r2
    7f90:	000aa3c0 	call	aa3c <_Balloc>
    7f94:	d8c01617 	ldw	r3,88(sp)
    7f98:	d8800515 	stw	r2,20(sp)
    7f9c:	18801015 	stw	r2,64(r3)
    7fa0:	00800384 	movi	r2,14
    7fa4:	14006836 	bltu	r2,r16,8148 <_dtoa_r+0x588>
    7fa8:	8805003a 	cmpeq	r2,r17,zero
    7fac:	1000661e 	bne	r2,zero,8148 <_dtoa_r+0x588>
    7fb0:	d9000d17 	ldw	r4,52(sp)
    7fb4:	0102300e 	bge	zero,r4,8878 <_dtoa_r+0xcb8>
    7fb8:	208003cc 	andi	r2,r4,15
    7fbc:	100490fa 	slli	r2,r2,3
    7fc0:	2025d13a 	srai	r18,r4,4
    7fc4:	00c00074 	movhi	r3,1
    7fc8:	18d38504 	addi	r3,r3,19988
    7fcc:	10c5883a 	add	r2,r2,r3
    7fd0:	90c0040c 	andi	r3,r18,16
    7fd4:	14000017 	ldw	r16,0(r2)
    7fd8:	14400117 	ldw	r17,4(r2)
    7fdc:	18036a1e 	bne	r3,zero,8d88 <_dtoa_r+0x11c8>
    7fe0:	05800084 	movi	r22,2
    7fe4:	90001026 	beq	r18,zero,8028 <_dtoa_r+0x468>
    7fe8:	04c00074 	movhi	r19,1
    7fec:	9cd3b704 	addi	r19,r19,20188
    7ff0:	9080004c 	andi	r2,r18,1
    7ff4:	1005003a 	cmpeq	r2,r2,zero
    7ff8:	1000081e 	bne	r2,zero,801c <_dtoa_r+0x45c>
    7ffc:	99800017 	ldw	r6,0(r19)
    8000:	99c00117 	ldw	r7,4(r19)
    8004:	880b883a 	mov	r5,r17
    8008:	8009883a 	mov	r4,r16
    800c:	00103a40 	call	103a4 <__muldf3>
    8010:	1021883a 	mov	r16,r2
    8014:	b5800044 	addi	r22,r22,1
    8018:	1823883a 	mov	r17,r3
    801c:	9025d07a 	srai	r18,r18,1
    8020:	9cc00204 	addi	r19,r19,8
    8024:	903ff21e 	bne	r18,zero,7ff0 <_dtoa_r+0x430>
    8028:	a80b883a 	mov	r5,r21
    802c:	a009883a 	mov	r4,r20
    8030:	880f883a 	mov	r7,r17
    8034:	800d883a 	mov	r6,r16
    8038:	00107680 	call	10768 <__divdf3>
    803c:	1029883a 	mov	r20,r2
    8040:	182b883a 	mov	r21,r3
    8044:	d8c00c17 	ldw	r3,48(sp)
    8048:	1805003a 	cmpeq	r2,r3,zero
    804c:	1000081e 	bne	r2,zero,8070 <_dtoa_r+0x4b0>
    8050:	0005883a 	mov	r2,zero
    8054:	00cffc34 	movhi	r3,16368
    8058:	180f883a 	mov	r7,r3
    805c:	a009883a 	mov	r4,r20
    8060:	a80b883a 	mov	r5,r21
    8064:	100d883a 	mov	r6,r2
    8068:	0010be00 	call	10be0 <__ltdf2>
    806c:	1003fe16 	blt	r2,zero,9068 <_dtoa_r+0x14a8>
    8070:	b009883a 	mov	r4,r22
    8074:	0010cf00 	call	10cf0 <__floatsidf>
    8078:	180b883a 	mov	r5,r3
    807c:	1009883a 	mov	r4,r2
    8080:	a00d883a 	mov	r6,r20
    8084:	a80f883a 	mov	r7,r21
    8088:	00103a40 	call	103a4 <__muldf3>
    808c:	0011883a 	mov	r8,zero
    8090:	02500734 	movhi	r9,16412
    8094:	1009883a 	mov	r4,r2
    8098:	180b883a 	mov	r5,r3
    809c:	480f883a 	mov	r7,r9
    80a0:	400d883a 	mov	r6,r8
    80a4:	00103300 	call	10330 <__adddf3>
    80a8:	d9000f17 	ldw	r4,60(sp)
    80ac:	102d883a 	mov	r22,r2
    80b0:	00bf3034 	movhi	r2,64704
    80b4:	18b9883a 	add	fp,r3,r2
    80b8:	e02f883a 	mov	r23,fp
    80bc:	20028f1e 	bne	r4,zero,8afc <_dtoa_r+0xf3c>
    80c0:	0005883a 	mov	r2,zero
    80c4:	00d00534 	movhi	r3,16404
    80c8:	a009883a 	mov	r4,r20
    80cc:	a80b883a 	mov	r5,r21
    80d0:	180f883a 	mov	r7,r3
    80d4:	100d883a 	mov	r6,r2
    80d8:	00102b00 	call	102b0 <__subdf3>
    80dc:	1009883a 	mov	r4,r2
    80e0:	e00f883a 	mov	r7,fp
    80e4:	180b883a 	mov	r5,r3
    80e8:	b00d883a 	mov	r6,r22
    80ec:	1025883a 	mov	r18,r2
    80f0:	1827883a 	mov	r19,r3
    80f4:	0010ad00 	call	10ad0 <__gtdf2>
    80f8:	00834f16 	blt	zero,r2,8e38 <_dtoa_r+0x1278>
    80fc:	e0e0003c 	xorhi	r3,fp,32768
    8100:	9009883a 	mov	r4,r18
    8104:	980b883a 	mov	r5,r19
    8108:	180f883a 	mov	r7,r3
    810c:	b00d883a 	mov	r6,r22
    8110:	0010be00 	call	10be0 <__ltdf2>
    8114:	1000080e 	bge	r2,zero,8138 <_dtoa_r+0x578>
    8118:	0027883a 	mov	r19,zero
    811c:	0025883a 	mov	r18,zero
    8120:	d8802617 	ldw	r2,152(sp)
    8124:	df000517 	ldw	fp,20(sp)
    8128:	d8000615 	stw	zero,24(sp)
    812c:	0084303a 	nor	r2,zero,r2
    8130:	d8800d15 	stw	r2,52(sp)
    8134:	00019b06 	br	87a4 <_dtoa_r+0xbe4>
    8138:	d9801217 	ldw	r6,72(sp)
    813c:	d8801317 	ldw	r2,76(sp)
    8140:	3029883a 	mov	r20,r6
    8144:	102b883a 	mov	r21,r2
    8148:	d8c00217 	ldw	r3,8(sp)
    814c:	18008516 	blt	r3,zero,8364 <_dtoa_r+0x7a4>
    8150:	d9000d17 	ldw	r4,52(sp)
    8154:	00800384 	movi	r2,14
    8158:	11008216 	blt	r2,r4,8364 <_dtoa_r+0x7a4>
    815c:	200490fa 	slli	r2,r4,3
    8160:	d9802617 	ldw	r6,152(sp)
    8164:	00c00074 	movhi	r3,1
    8168:	18d38504 	addi	r3,r3,19988
    816c:	10c5883a 	add	r2,r2,r3
    8170:	14800017 	ldw	r18,0(r2)
    8174:	14c00117 	ldw	r19,4(r2)
    8178:	30031e16 	blt	r6,zero,8df4 <_dtoa_r+0x1234>
    817c:	d9000517 	ldw	r4,20(sp)
    8180:	d8c00f17 	ldw	r3,60(sp)
    8184:	a823883a 	mov	r17,r21
    8188:	a021883a 	mov	r16,r20
    818c:	192b883a 	add	r21,r3,r4
    8190:	2039883a 	mov	fp,r4
    8194:	00000f06 	br	81d4 <_dtoa_r+0x614>
    8198:	0005883a 	mov	r2,zero
    819c:	00d00934 	movhi	r3,16420
    81a0:	5009883a 	mov	r4,r10
    81a4:	580b883a 	mov	r5,r11
    81a8:	180f883a 	mov	r7,r3
    81ac:	100d883a 	mov	r6,r2
    81b0:	00103a40 	call	103a4 <__muldf3>
    81b4:	180b883a 	mov	r5,r3
    81b8:	000d883a 	mov	r6,zero
    81bc:	000f883a 	mov	r7,zero
    81c0:	1009883a 	mov	r4,r2
    81c4:	1021883a 	mov	r16,r2
    81c8:	1823883a 	mov	r17,r3
    81cc:	0010a480 	call	10a48 <__nedf2>
    81d0:	10004526 	beq	r2,zero,82e8 <_dtoa_r+0x728>
    81d4:	900d883a 	mov	r6,r18
    81d8:	980f883a 	mov	r7,r19
    81dc:	8009883a 	mov	r4,r16
    81e0:	880b883a 	mov	r5,r17
    81e4:	00107680 	call	10768 <__divdf3>
    81e8:	180b883a 	mov	r5,r3
    81ec:	1009883a 	mov	r4,r2
    81f0:	0010de80 	call	10de8 <__fixdfsi>
    81f4:	1009883a 	mov	r4,r2
    81f8:	1029883a 	mov	r20,r2
    81fc:	0010cf00 	call	10cf0 <__floatsidf>
    8200:	180f883a 	mov	r7,r3
    8204:	9009883a 	mov	r4,r18
    8208:	980b883a 	mov	r5,r19
    820c:	100d883a 	mov	r6,r2
    8210:	00103a40 	call	103a4 <__muldf3>
    8214:	180f883a 	mov	r7,r3
    8218:	880b883a 	mov	r5,r17
    821c:	8009883a 	mov	r4,r16
    8220:	100d883a 	mov	r6,r2
    8224:	00102b00 	call	102b0 <__subdf3>
    8228:	1015883a 	mov	r10,r2
    822c:	a0800c04 	addi	r2,r20,48
    8230:	e0800005 	stb	r2,0(fp)
    8234:	e7000044 	addi	fp,fp,1
    8238:	1817883a 	mov	r11,r3
    823c:	e57fd61e 	bne	fp,r21,8198 <_dtoa_r+0x5d8>
    8240:	500d883a 	mov	r6,r10
    8244:	180f883a 	mov	r7,r3
    8248:	5009883a 	mov	r4,r10
    824c:	180b883a 	mov	r5,r3
    8250:	00103300 	call	10330 <__adddf3>
    8254:	100d883a 	mov	r6,r2
    8258:	9009883a 	mov	r4,r18
    825c:	980b883a 	mov	r5,r19
    8260:	180f883a 	mov	r7,r3
    8264:	1021883a 	mov	r16,r2
    8268:	1823883a 	mov	r17,r3
    826c:	0010be00 	call	10be0 <__ltdf2>
    8270:	10000816 	blt	r2,zero,8294 <_dtoa_r+0x6d4>
    8274:	980b883a 	mov	r5,r19
    8278:	800d883a 	mov	r6,r16
    827c:	880f883a 	mov	r7,r17
    8280:	9009883a 	mov	r4,r18
    8284:	00109c00 	call	109c0 <__eqdf2>
    8288:	1000171e 	bne	r2,zero,82e8 <_dtoa_r+0x728>
    828c:	a080004c 	andi	r2,r20,1
    8290:	10001526 	beq	r2,zero,82e8 <_dtoa_r+0x728>
    8294:	d8800d17 	ldw	r2,52(sp)
    8298:	d8800415 	stw	r2,16(sp)
    829c:	e009883a 	mov	r4,fp
    82a0:	213fffc4 	addi	r4,r4,-1
    82a4:	20c00007 	ldb	r3,0(r4)
    82a8:	00800e44 	movi	r2,57
    82ac:	1880081e 	bne	r3,r2,82d0 <_dtoa_r+0x710>
    82b0:	d8800517 	ldw	r2,20(sp)
    82b4:	113ffa1e 	bne	r2,r4,82a0 <_dtoa_r+0x6e0>
    82b8:	d8c00417 	ldw	r3,16(sp)
    82bc:	d9800517 	ldw	r6,20(sp)
    82c0:	00800c04 	movi	r2,48
    82c4:	18c00044 	addi	r3,r3,1
    82c8:	d8c00415 	stw	r3,16(sp)
    82cc:	30800005 	stb	r2,0(r6)
    82d0:	20800003 	ldbu	r2,0(r4)
    82d4:	d8c00417 	ldw	r3,16(sp)
    82d8:	27000044 	addi	fp,r4,1
    82dc:	10800044 	addi	r2,r2,1
    82e0:	d8c00d15 	stw	r3,52(sp)
    82e4:	20800005 	stb	r2,0(r4)
    82e8:	d9001617 	ldw	r4,88(sp)
    82ec:	d9400717 	ldw	r5,28(sp)
    82f0:	000a4bc0 	call	a4bc <_Bfree>
    82f4:	e0000005 	stb	zero,0(fp)
    82f8:	d9800d17 	ldw	r6,52(sp)
    82fc:	d8c02717 	ldw	r3,156(sp)
    8300:	d9002917 	ldw	r4,164(sp)
    8304:	30800044 	addi	r2,r6,1
    8308:	18800015 	stw	r2,0(r3)
    830c:	20029c26 	beq	r4,zero,8d80 <_dtoa_r+0x11c0>
    8310:	d8c00517 	ldw	r3,20(sp)
    8314:	27000015 	stw	fp,0(r4)
    8318:	003e5d06 	br	7c90 <_dtoa_r+0xd0>
    831c:	d9800d17 	ldw	r6,52(sp)
    8320:	00c00074 	movhi	r3,1
    8324:	18d38504 	addi	r3,r3,19988
    8328:	d9001217 	ldw	r4,72(sp)
    832c:	300490fa 	slli	r2,r6,3
    8330:	d9401317 	ldw	r5,76(sp)
    8334:	10c5883a 	add	r2,r2,r3
    8338:	12000017 	ldw	r8,0(r2)
    833c:	12400117 	ldw	r9,4(r2)
    8340:	400d883a 	mov	r6,r8
    8344:	480f883a 	mov	r7,r9
    8348:	0010be00 	call	10be0 <__ltdf2>
    834c:	1000030e 	bge	r2,zero,835c <_dtoa_r+0x79c>
    8350:	d8800d17 	ldw	r2,52(sp)
    8354:	10bfffc4 	addi	r2,r2,-1
    8358:	d8800d15 	stw	r2,52(sp)
    835c:	d8000c15 	stw	zero,48(sp)
    8360:	003ea806 	br	7e04 <_dtoa_r+0x244>
    8364:	d9000b17 	ldw	r4,44(sp)
    8368:	202cc03a 	cmpne	r22,r4,zero
    836c:	b000c71e 	bne	r22,zero,868c <_dtoa_r+0xacc>
    8370:	dc001117 	ldw	r16,68(sp)
    8374:	dc801017 	ldw	r18,64(sp)
    8378:	0027883a 	mov	r19,zero
    837c:	04000b0e 	bge	zero,r16,83ac <_dtoa_r+0x7ec>
    8380:	d8c00a17 	ldw	r3,40(sp)
    8384:	00c0090e 	bge	zero,r3,83ac <_dtoa_r+0x7ec>
    8388:	8005883a 	mov	r2,r16
    838c:	1c011316 	blt	r3,r16,87dc <_dtoa_r+0xc1c>
    8390:	d9000a17 	ldw	r4,40(sp)
    8394:	d9801117 	ldw	r6,68(sp)
    8398:	80a1c83a 	sub	r16,r16,r2
    839c:	2089c83a 	sub	r4,r4,r2
    83a0:	308dc83a 	sub	r6,r6,r2
    83a4:	d9000a15 	stw	r4,40(sp)
    83a8:	d9801115 	stw	r6,68(sp)
    83ac:	d8801017 	ldw	r2,64(sp)
    83b0:	0080150e 	bge	zero,r2,8408 <_dtoa_r+0x848>
    83b4:	d8c00b17 	ldw	r3,44(sp)
    83b8:	1805003a 	cmpeq	r2,r3,zero
    83bc:	1001c91e 	bne	r2,zero,8ae4 <_dtoa_r+0xf24>
    83c0:	04800e0e 	bge	zero,r18,83fc <_dtoa_r+0x83c>
    83c4:	d9001617 	ldw	r4,88(sp)
    83c8:	980b883a 	mov	r5,r19
    83cc:	900d883a 	mov	r6,r18
    83d0:	000b2700 	call	b270 <__pow5mult>
    83d4:	d9001617 	ldw	r4,88(sp)
    83d8:	d9800717 	ldw	r6,28(sp)
    83dc:	100b883a 	mov	r5,r2
    83e0:	1027883a 	mov	r19,r2
    83e4:	000af4c0 	call	af4c <__multiply>
    83e8:	d9001617 	ldw	r4,88(sp)
    83ec:	d9400717 	ldw	r5,28(sp)
    83f0:	1023883a 	mov	r17,r2
    83f4:	000a4bc0 	call	a4bc <_Bfree>
    83f8:	dc400715 	stw	r17,28(sp)
    83fc:	d9001017 	ldw	r4,64(sp)
    8400:	248dc83a 	sub	r6,r4,r18
    8404:	30010e1e 	bne	r6,zero,8840 <_dtoa_r+0xc80>
    8408:	d9001617 	ldw	r4,88(sp)
    840c:	04400044 	movi	r17,1
    8410:	880b883a 	mov	r5,r17
    8414:	000b1340 	call	b134 <__i2b>
    8418:	d9800917 	ldw	r6,36(sp)
    841c:	1025883a 	mov	r18,r2
    8420:	0180040e 	bge	zero,r6,8434 <_dtoa_r+0x874>
    8424:	d9001617 	ldw	r4,88(sp)
    8428:	100b883a 	mov	r5,r2
    842c:	000b2700 	call	b270 <__pow5mult>
    8430:	1025883a 	mov	r18,r2
    8434:	d8801717 	ldw	r2,92(sp)
    8438:	8880f30e 	bge	r17,r2,8808 <_dtoa_r+0xc48>
    843c:	0023883a 	mov	r17,zero
    8440:	d9800917 	ldw	r6,36(sp)
    8444:	30019e1e 	bne	r6,zero,8ac0 <_dtoa_r+0xf00>
    8448:	00c00044 	movi	r3,1
    844c:	d9000a17 	ldw	r4,40(sp)
    8450:	20c5883a 	add	r2,r4,r3
    8454:	10c007cc 	andi	r3,r2,31
    8458:	1800841e 	bne	r3,zero,866c <_dtoa_r+0xaac>
    845c:	00800704 	movi	r2,28
    8460:	d9000a17 	ldw	r4,40(sp)
    8464:	d9801117 	ldw	r6,68(sp)
    8468:	80a1883a 	add	r16,r16,r2
    846c:	2089883a 	add	r4,r4,r2
    8470:	308d883a 	add	r6,r6,r2
    8474:	d9000a15 	stw	r4,40(sp)
    8478:	d9801115 	stw	r6,68(sp)
    847c:	d8801117 	ldw	r2,68(sp)
    8480:	0080050e 	bge	zero,r2,8498 <_dtoa_r+0x8d8>
    8484:	d9400717 	ldw	r5,28(sp)
    8488:	d9001617 	ldw	r4,88(sp)
    848c:	100d883a 	mov	r6,r2
    8490:	000ae000 	call	ae00 <__lshift>
    8494:	d8800715 	stw	r2,28(sp)
    8498:	d8c00a17 	ldw	r3,40(sp)
    849c:	00c0050e 	bge	zero,r3,84b4 <_dtoa_r+0x8f4>
    84a0:	d9001617 	ldw	r4,88(sp)
    84a4:	900b883a 	mov	r5,r18
    84a8:	180d883a 	mov	r6,r3
    84ac:	000ae000 	call	ae00 <__lshift>
    84b0:	1025883a 	mov	r18,r2
    84b4:	d9000c17 	ldw	r4,48(sp)
    84b8:	2005003a 	cmpeq	r2,r4,zero
    84bc:	10016f26 	beq	r2,zero,8a7c <_dtoa_r+0xebc>
    84c0:	d9000f17 	ldw	r4,60(sp)
    84c4:	0102170e 	bge	zero,r4,8d24 <_dtoa_r+0x1164>
    84c8:	d9800b17 	ldw	r6,44(sp)
    84cc:	3005003a 	cmpeq	r2,r6,zero
    84d0:	1000881e 	bne	r2,zero,86f4 <_dtoa_r+0xb34>
    84d4:	0400050e 	bge	zero,r16,84ec <_dtoa_r+0x92c>
    84d8:	d9001617 	ldw	r4,88(sp)
    84dc:	980b883a 	mov	r5,r19
    84e0:	800d883a 	mov	r6,r16
    84e4:	000ae000 	call	ae00 <__lshift>
    84e8:	1027883a 	mov	r19,r2
    84ec:	8804c03a 	cmpne	r2,r17,zero
    84f0:	1002541e 	bne	r2,zero,8e44 <_dtoa_r+0x1284>
    84f4:	980b883a 	mov	r5,r19
    84f8:	dd800517 	ldw	r22,20(sp)
    84fc:	dcc00615 	stw	r19,24(sp)
    8500:	a700004c 	andi	fp,r20,1
    8504:	2827883a 	mov	r19,r5
    8508:	d9000717 	ldw	r4,28(sp)
    850c:	900b883a 	mov	r5,r18
    8510:	00079a80 	call	79a8 <quorem>
    8514:	d9000717 	ldw	r4,28(sp)
    8518:	d9400617 	ldw	r5,24(sp)
    851c:	1023883a 	mov	r17,r2
    8520:	8dc00c04 	addi	r23,r17,48
    8524:	000a6180 	call	a618 <__mcmp>
    8528:	d9001617 	ldw	r4,88(sp)
    852c:	900b883a 	mov	r5,r18
    8530:	980d883a 	mov	r6,r19
    8534:	1029883a 	mov	r20,r2
    8538:	000ac740 	call	ac74 <__mdiff>
    853c:	102b883a 	mov	r21,r2
    8540:	10800317 	ldw	r2,12(r2)
    8544:	1001281e 	bne	r2,zero,89e8 <_dtoa_r+0xe28>
    8548:	d9000717 	ldw	r4,28(sp)
    854c:	a80b883a 	mov	r5,r21
    8550:	000a6180 	call	a618 <__mcmp>
    8554:	d9001617 	ldw	r4,88(sp)
    8558:	1021883a 	mov	r16,r2
    855c:	a80b883a 	mov	r5,r21
    8560:	000a4bc0 	call	a4bc <_Bfree>
    8564:	8000041e 	bne	r16,zero,8578 <_dtoa_r+0x9b8>
    8568:	d8801717 	ldw	r2,92(sp)
    856c:	1000021e 	bne	r2,zero,8578 <_dtoa_r+0x9b8>
    8570:	e004c03a 	cmpne	r2,fp,zero
    8574:	10011726 	beq	r2,zero,89d4 <_dtoa_r+0xe14>
    8578:	a0010616 	blt	r20,zero,8994 <_dtoa_r+0xdd4>
    857c:	a000041e 	bne	r20,zero,8590 <_dtoa_r+0x9d0>
    8580:	d8c01717 	ldw	r3,92(sp)
    8584:	1800021e 	bne	r3,zero,8590 <_dtoa_r+0x9d0>
    8588:	e004c03a 	cmpne	r2,fp,zero
    858c:	10010126 	beq	r2,zero,8994 <_dtoa_r+0xdd4>
    8590:	04023d16 	blt	zero,r16,8e88 <_dtoa_r+0x12c8>
    8594:	b5c00005 	stb	r23,0(r22)
    8598:	d9800517 	ldw	r6,20(sp)
    859c:	d9000f17 	ldw	r4,60(sp)
    85a0:	b5800044 	addi	r22,r22,1
    85a4:	3105883a 	add	r2,r6,r4
    85a8:	b0806526 	beq	r22,r2,8740 <_dtoa_r+0xb80>
    85ac:	d9400717 	ldw	r5,28(sp)
    85b0:	d9001617 	ldw	r4,88(sp)
    85b4:	01800284 	movi	r6,10
    85b8:	000f883a 	mov	r7,zero
    85bc:	000b1700 	call	b170 <__multadd>
    85c0:	d8800715 	stw	r2,28(sp)
    85c4:	d8800617 	ldw	r2,24(sp)
    85c8:	14c10c26 	beq	r2,r19,89fc <_dtoa_r+0xe3c>
    85cc:	d9400617 	ldw	r5,24(sp)
    85d0:	d9001617 	ldw	r4,88(sp)
    85d4:	01800284 	movi	r6,10
    85d8:	000f883a 	mov	r7,zero
    85dc:	000b1700 	call	b170 <__multadd>
    85e0:	d9001617 	ldw	r4,88(sp)
    85e4:	980b883a 	mov	r5,r19
    85e8:	01800284 	movi	r6,10
    85ec:	000f883a 	mov	r7,zero
    85f0:	d8800615 	stw	r2,24(sp)
    85f4:	000b1700 	call	b170 <__multadd>
    85f8:	1027883a 	mov	r19,r2
    85fc:	003fc206 	br	8508 <_dtoa_r+0x948>
    8600:	2445c83a 	sub	r2,r4,r17
    8604:	a088983a 	sll	r4,r20,r2
    8608:	003e4b06 	br	7f38 <_dtoa_r+0x378>
    860c:	01bfffc4 	movi	r6,-1
    8610:	00800044 	movi	r2,1
    8614:	d9800e15 	stw	r6,56(sp)
    8618:	d9800f15 	stw	r6,60(sp)
    861c:	d8800b15 	stw	r2,44(sp)
    8620:	d8c01617 	ldw	r3,88(sp)
    8624:	008005c4 	movi	r2,23
    8628:	18001115 	stw	zero,68(r3)
    862c:	1580082e 	bgeu	r2,r22,8650 <_dtoa_r+0xa90>
    8630:	00c00104 	movi	r3,4
    8634:	0009883a 	mov	r4,zero
    8638:	18c7883a 	add	r3,r3,r3
    863c:	18800504 	addi	r2,r3,20
    8640:	21000044 	addi	r4,r4,1
    8644:	b0bffc2e 	bgeu	r22,r2,8638 <_dtoa_r+0xa78>
    8648:	d9801617 	ldw	r6,88(sp)
    864c:	31001115 	stw	r4,68(r6)
    8650:	dc000f17 	ldw	r16,60(sp)
    8654:	003e4b06 	br	7f84 <_dtoa_r+0x3c4>
    8658:	d9801717 	ldw	r6,92(sp)
    865c:	0023883a 	mov	r17,zero
    8660:	31bfff04 	addi	r6,r6,-4
    8664:	d9801715 	stw	r6,92(sp)
    8668:	003df806 	br	7e4c <_dtoa_r+0x28c>
    866c:	00800804 	movi	r2,32
    8670:	10c9c83a 	sub	r4,r2,r3
    8674:	00c00104 	movi	r3,4
    8678:	19005a16 	blt	r3,r4,87e4 <_dtoa_r+0xc24>
    867c:	008000c4 	movi	r2,3
    8680:	113f7e16 	blt	r2,r4,847c <_dtoa_r+0x8bc>
    8684:	20800704 	addi	r2,r4,28
    8688:	003f7506 	br	8460 <_dtoa_r+0x8a0>
    868c:	d9801717 	ldw	r6,92(sp)
    8690:	00800044 	movi	r2,1
    8694:	1180a10e 	bge	r2,r6,891c <_dtoa_r+0xd5c>
    8698:	d9800f17 	ldw	r6,60(sp)
    869c:	d8c01017 	ldw	r3,64(sp)
    86a0:	30bfffc4 	addi	r2,r6,-1
    86a4:	1881c616 	blt	r3,r2,8dc0 <_dtoa_r+0x1200>
    86a8:	18a5c83a 	sub	r18,r3,r2
    86ac:	d8800f17 	ldw	r2,60(sp)
    86b0:	10026216 	blt	r2,zero,903c <_dtoa_r+0x147c>
    86b4:	dc001117 	ldw	r16,68(sp)
    86b8:	1007883a 	mov	r3,r2
    86bc:	d9800a17 	ldw	r6,40(sp)
    86c0:	d8801117 	ldw	r2,68(sp)
    86c4:	d9001617 	ldw	r4,88(sp)
    86c8:	30cd883a 	add	r6,r6,r3
    86cc:	10c5883a 	add	r2,r2,r3
    86d0:	01400044 	movi	r5,1
    86d4:	d9800a15 	stw	r6,40(sp)
    86d8:	d8801115 	stw	r2,68(sp)
    86dc:	000b1340 	call	b134 <__i2b>
    86e0:	1027883a 	mov	r19,r2
    86e4:	003f2506 	br	837c <_dtoa_r+0x7bc>
    86e8:	00c00074 	movhi	r3,1
    86ec:	18d35e04 	addi	r3,r3,19832
    86f0:	003d6706 	br	7c90 <_dtoa_r+0xd0>
    86f4:	dd800517 	ldw	r22,20(sp)
    86f8:	04000044 	movi	r16,1
    86fc:	00000706 	br	871c <_dtoa_r+0xb5c>
    8700:	d9400717 	ldw	r5,28(sp)
    8704:	d9001617 	ldw	r4,88(sp)
    8708:	01800284 	movi	r6,10
    870c:	000f883a 	mov	r7,zero
    8710:	000b1700 	call	b170 <__multadd>
    8714:	d8800715 	stw	r2,28(sp)
    8718:	84000044 	addi	r16,r16,1
    871c:	d9000717 	ldw	r4,28(sp)
    8720:	900b883a 	mov	r5,r18
    8724:	00079a80 	call	79a8 <quorem>
    8728:	15c00c04 	addi	r23,r2,48
    872c:	b5c00005 	stb	r23,0(r22)
    8730:	d8c00f17 	ldw	r3,60(sp)
    8734:	b5800044 	addi	r22,r22,1
    8738:	80fff116 	blt	r16,r3,8700 <_dtoa_r+0xb40>
    873c:	d8000615 	stw	zero,24(sp)
    8740:	d9400717 	ldw	r5,28(sp)
    8744:	d9001617 	ldw	r4,88(sp)
    8748:	01800044 	movi	r6,1
    874c:	000ae000 	call	ae00 <__lshift>
    8750:	1009883a 	mov	r4,r2
    8754:	900b883a 	mov	r5,r18
    8758:	d8800715 	stw	r2,28(sp)
    875c:	000a6180 	call	a618 <__mcmp>
    8760:	00803c0e 	bge	zero,r2,8854 <_dtoa_r+0xc94>
    8764:	b009883a 	mov	r4,r22
    8768:	213fffc4 	addi	r4,r4,-1
    876c:	21400003 	ldbu	r5,0(r4)
    8770:	00800e44 	movi	r2,57
    8774:	28c03fcc 	andi	r3,r5,255
    8778:	18c0201c 	xori	r3,r3,128
    877c:	18ffe004 	addi	r3,r3,-128
    8780:	1881981e 	bne	r3,r2,8de4 <_dtoa_r+0x1224>
    8784:	d9800517 	ldw	r6,20(sp)
    8788:	21bff71e 	bne	r4,r6,8768 <_dtoa_r+0xba8>
    878c:	d8800d17 	ldw	r2,52(sp)
    8790:	37000044 	addi	fp,r6,1
    8794:	10800044 	addi	r2,r2,1
    8798:	d8800d15 	stw	r2,52(sp)
    879c:	00800c44 	movi	r2,49
    87a0:	30800005 	stb	r2,0(r6)
    87a4:	d9001617 	ldw	r4,88(sp)
    87a8:	900b883a 	mov	r5,r18
    87ac:	000a4bc0 	call	a4bc <_Bfree>
    87b0:	983ecd26 	beq	r19,zero,82e8 <_dtoa_r+0x728>
    87b4:	d8c00617 	ldw	r3,24(sp)
    87b8:	18000426 	beq	r3,zero,87cc <_dtoa_r+0xc0c>
    87bc:	1cc00326 	beq	r3,r19,87cc <_dtoa_r+0xc0c>
    87c0:	d9001617 	ldw	r4,88(sp)
    87c4:	180b883a 	mov	r5,r3
    87c8:	000a4bc0 	call	a4bc <_Bfree>
    87cc:	d9001617 	ldw	r4,88(sp)
    87d0:	980b883a 	mov	r5,r19
    87d4:	000a4bc0 	call	a4bc <_Bfree>
    87d8:	003ec306 	br	82e8 <_dtoa_r+0x728>
    87dc:	1805883a 	mov	r2,r3
    87e0:	003eeb06 	br	8390 <_dtoa_r+0x7d0>
    87e4:	d9800a17 	ldw	r6,40(sp)
    87e8:	d8c01117 	ldw	r3,68(sp)
    87ec:	20bfff04 	addi	r2,r4,-4
    87f0:	308d883a 	add	r6,r6,r2
    87f4:	1887883a 	add	r3,r3,r2
    87f8:	80a1883a 	add	r16,r16,r2
    87fc:	d9800a15 	stw	r6,40(sp)
    8800:	d8c01115 	stw	r3,68(sp)
    8804:	003f1d06 	br	847c <_dtoa_r+0x8bc>
    8808:	a03f0c1e 	bne	r20,zero,843c <_dtoa_r+0x87c>
    880c:	00800434 	movhi	r2,16
    8810:	10bfffc4 	addi	r2,r2,-1
    8814:	a884703a 	and	r2,r21,r2
    8818:	103f081e 	bne	r2,zero,843c <_dtoa_r+0x87c>
    881c:	a89ffc2c 	andhi	r2,r21,32752
    8820:	103f0626 	beq	r2,zero,843c <_dtoa_r+0x87c>
    8824:	d8c01117 	ldw	r3,68(sp)
    8828:	d9000a17 	ldw	r4,40(sp)
    882c:	18c00044 	addi	r3,r3,1
    8830:	21000044 	addi	r4,r4,1
    8834:	d8c01115 	stw	r3,68(sp)
    8838:	d9000a15 	stw	r4,40(sp)
    883c:	003f0006 	br	8440 <_dtoa_r+0x880>
    8840:	d9400717 	ldw	r5,28(sp)
    8844:	d9001617 	ldw	r4,88(sp)
    8848:	000b2700 	call	b270 <__pow5mult>
    884c:	d8800715 	stw	r2,28(sp)
    8850:	003eed06 	br	8408 <_dtoa_r+0x848>
    8854:	1000021e 	bne	r2,zero,8860 <_dtoa_r+0xca0>
    8858:	b880004c 	andi	r2,r23,1
    885c:	103fc11e 	bne	r2,zero,8764 <_dtoa_r+0xba4>
    8860:	b5bfffc4 	addi	r22,r22,-1
    8864:	b0c00007 	ldb	r3,0(r22)
    8868:	00800c04 	movi	r2,48
    886c:	18bffc26 	beq	r3,r2,8860 <_dtoa_r+0xca0>
    8870:	b7000044 	addi	fp,r22,1
    8874:	003fcb06 	br	87a4 <_dtoa_r+0xbe4>
    8878:	d9800d17 	ldw	r6,52(sp)
    887c:	018fc83a 	sub	r7,zero,r6
    8880:	3801f726 	beq	r7,zero,9060 <_dtoa_r+0x14a0>
    8884:	398003cc 	andi	r6,r7,15
    8888:	300c90fa 	slli	r6,r6,3
    888c:	01400074 	movhi	r5,1
    8890:	29538504 	addi	r5,r5,19988
    8894:	d9001217 	ldw	r4,72(sp)
    8898:	314d883a 	add	r6,r6,r5
    889c:	30c00117 	ldw	r3,4(r6)
    88a0:	30800017 	ldw	r2,0(r6)
    88a4:	d9401317 	ldw	r5,76(sp)
    88a8:	3821d13a 	srai	r16,r7,4
    88ac:	100d883a 	mov	r6,r2
    88b0:	180f883a 	mov	r7,r3
    88b4:	00103a40 	call	103a4 <__muldf3>
    88b8:	1011883a 	mov	r8,r2
    88bc:	1813883a 	mov	r9,r3
    88c0:	1029883a 	mov	r20,r2
    88c4:	182b883a 	mov	r21,r3
    88c8:	8001e526 	beq	r16,zero,9060 <_dtoa_r+0x14a0>
    88cc:	05800084 	movi	r22,2
    88d0:	04400074 	movhi	r17,1
    88d4:	8c53b704 	addi	r17,r17,20188
    88d8:	8080004c 	andi	r2,r16,1
    88dc:	1005003a 	cmpeq	r2,r2,zero
    88e0:	1000081e 	bne	r2,zero,8904 <_dtoa_r+0xd44>
    88e4:	89800017 	ldw	r6,0(r17)
    88e8:	89c00117 	ldw	r7,4(r17)
    88ec:	480b883a 	mov	r5,r9
    88f0:	4009883a 	mov	r4,r8
    88f4:	00103a40 	call	103a4 <__muldf3>
    88f8:	1011883a 	mov	r8,r2
    88fc:	b5800044 	addi	r22,r22,1
    8900:	1813883a 	mov	r9,r3
    8904:	8021d07a 	srai	r16,r16,1
    8908:	8c400204 	addi	r17,r17,8
    890c:	803ff21e 	bne	r16,zero,88d8 <_dtoa_r+0xd18>
    8910:	4029883a 	mov	r20,r8
    8914:	482b883a 	mov	r21,r9
    8918:	003dca06 	br	8044 <_dtoa_r+0x484>
    891c:	d9000817 	ldw	r4,32(sp)
    8920:	2005003a 	cmpeq	r2,r4,zero
    8924:	1001f61e 	bne	r2,zero,9100 <_dtoa_r+0x1540>
    8928:	dc001117 	ldw	r16,68(sp)
    892c:	dc801017 	ldw	r18,64(sp)
    8930:	18c10cc4 	addi	r3,r3,1075
    8934:	003f6106 	br	86bc <_dtoa_r+0xafc>
    8938:	d8000b15 	stw	zero,44(sp)
    893c:	d9802617 	ldw	r6,152(sp)
    8940:	d8c00d17 	ldw	r3,52(sp)
    8944:	30800044 	addi	r2,r6,1
    8948:	18ad883a 	add	r22,r3,r2
    894c:	b13fffc4 	addi	r4,r22,-1
    8950:	d9000e15 	stw	r4,56(sp)
    8954:	0581f60e 	bge	zero,r22,9130 <_dtoa_r+0x1570>
    8958:	dd800f15 	stw	r22,60(sp)
    895c:	003f3006 	br	8620 <_dtoa_r+0xa60>
    8960:	d8000b15 	stw	zero,44(sp)
    8964:	d9002617 	ldw	r4,152(sp)
    8968:	0101eb0e 	bge	zero,r4,9118 <_dtoa_r+0x1558>
    896c:	202d883a 	mov	r22,r4
    8970:	d9000e15 	stw	r4,56(sp)
    8974:	d9000f15 	stw	r4,60(sp)
    8978:	003f2906 	br	8620 <_dtoa_r+0xa60>
    897c:	01800044 	movi	r6,1
    8980:	d9800b15 	stw	r6,44(sp)
    8984:	003ff706 	br	8964 <_dtoa_r+0xda4>
    8988:	01000044 	movi	r4,1
    898c:	d9000b15 	stw	r4,44(sp)
    8990:	003fea06 	br	893c <_dtoa_r+0xd7c>
    8994:	04000c0e 	bge	zero,r16,89c8 <_dtoa_r+0xe08>
    8998:	d9400717 	ldw	r5,28(sp)
    899c:	d9001617 	ldw	r4,88(sp)
    89a0:	01800044 	movi	r6,1
    89a4:	000ae000 	call	ae00 <__lshift>
    89a8:	1009883a 	mov	r4,r2
    89ac:	900b883a 	mov	r5,r18
    89b0:	d8800715 	stw	r2,28(sp)
    89b4:	000a6180 	call	a618 <__mcmp>
    89b8:	0081e00e 	bge	zero,r2,913c <_dtoa_r+0x157c>
    89bc:	bdc00044 	addi	r23,r23,1
    89c0:	00800e84 	movi	r2,58
    89c4:	b881a226 	beq	r23,r2,9050 <_dtoa_r+0x1490>
    89c8:	b7000044 	addi	fp,r22,1
    89cc:	b5c00005 	stb	r23,0(r22)
    89d0:	003f7406 	br	87a4 <_dtoa_r+0xbe4>
    89d4:	00800e44 	movi	r2,57
    89d8:	b8819d26 	beq	r23,r2,9050 <_dtoa_r+0x1490>
    89dc:	053ffa0e 	bge	zero,r20,89c8 <_dtoa_r+0xe08>
    89e0:	8dc00c44 	addi	r23,r17,49
    89e4:	003ff806 	br	89c8 <_dtoa_r+0xe08>
    89e8:	d9001617 	ldw	r4,88(sp)
    89ec:	a80b883a 	mov	r5,r21
    89f0:	04000044 	movi	r16,1
    89f4:	000a4bc0 	call	a4bc <_Bfree>
    89f8:	003edf06 	br	8578 <_dtoa_r+0x9b8>
    89fc:	d9001617 	ldw	r4,88(sp)
    8a00:	980b883a 	mov	r5,r19
    8a04:	01800284 	movi	r6,10
    8a08:	000f883a 	mov	r7,zero
    8a0c:	000b1700 	call	b170 <__multadd>
    8a10:	1027883a 	mov	r19,r2
    8a14:	d8800615 	stw	r2,24(sp)
    8a18:	003ebb06 	br	8508 <_dtoa_r+0x948>
    8a1c:	d9801117 	ldw	r6,68(sp)
    8a20:	d8800d17 	ldw	r2,52(sp)
    8a24:	d8000915 	stw	zero,36(sp)
    8a28:	308dc83a 	sub	r6,r6,r2
    8a2c:	0087c83a 	sub	r3,zero,r2
    8a30:	d9801115 	stw	r6,68(sp)
    8a34:	d8c01015 	stw	r3,64(sp)
    8a38:	003cfe06 	br	7e34 <_dtoa_r+0x274>
    8a3c:	018dc83a 	sub	r6,zero,r6
    8a40:	d9801115 	stw	r6,68(sp)
    8a44:	d8000a15 	stw	zero,40(sp)
    8a48:	003cf306 	br	7e18 <_dtoa_r+0x258>
    8a4c:	d9000d17 	ldw	r4,52(sp)
    8a50:	0010cf00 	call	10cf0 <__floatsidf>
    8a54:	880b883a 	mov	r5,r17
    8a58:	8009883a 	mov	r4,r16
    8a5c:	180f883a 	mov	r7,r3
    8a60:	100d883a 	mov	r6,r2
    8a64:	0010a480 	call	10a48 <__nedf2>
    8a68:	103ce126 	beq	r2,zero,7df0 <_dtoa_r+0x230>
    8a6c:	d9800d17 	ldw	r6,52(sp)
    8a70:	31bfffc4 	addi	r6,r6,-1
    8a74:	d9800d15 	stw	r6,52(sp)
    8a78:	003cdd06 	br	7df0 <_dtoa_r+0x230>
    8a7c:	d9000717 	ldw	r4,28(sp)
    8a80:	900b883a 	mov	r5,r18
    8a84:	000a6180 	call	a618 <__mcmp>
    8a88:	103e8d0e 	bge	r2,zero,84c0 <_dtoa_r+0x900>
    8a8c:	d9400717 	ldw	r5,28(sp)
    8a90:	d9001617 	ldw	r4,88(sp)
    8a94:	01800284 	movi	r6,10
    8a98:	000f883a 	mov	r7,zero
    8a9c:	000b1700 	call	b170 <__multadd>
    8aa0:	d9800d17 	ldw	r6,52(sp)
    8aa4:	d8800715 	stw	r2,28(sp)
    8aa8:	31bfffc4 	addi	r6,r6,-1
    8aac:	d9800d15 	stw	r6,52(sp)
    8ab0:	b001a71e 	bne	r22,zero,9150 <_dtoa_r+0x1590>
    8ab4:	d8800e17 	ldw	r2,56(sp)
    8ab8:	d8800f15 	stw	r2,60(sp)
    8abc:	003e8006 	br	84c0 <_dtoa_r+0x900>
    8ac0:	90800417 	ldw	r2,16(r18)
    8ac4:	1085883a 	add	r2,r2,r2
    8ac8:	1085883a 	add	r2,r2,r2
    8acc:	1485883a 	add	r2,r2,r18
    8ad0:	11000417 	ldw	r4,16(r2)
    8ad4:	000a4e40 	call	a4e4 <__hi0bits>
    8ad8:	00c00804 	movi	r3,32
    8adc:	1887c83a 	sub	r3,r3,r2
    8ae0:	003e5a06 	br	844c <_dtoa_r+0x88c>
    8ae4:	d9400717 	ldw	r5,28(sp)
    8ae8:	d9801017 	ldw	r6,64(sp)
    8aec:	d9001617 	ldw	r4,88(sp)
    8af0:	000b2700 	call	b270 <__pow5mult>
    8af4:	d8800715 	stw	r2,28(sp)
    8af8:	003e4306 	br	8408 <_dtoa_r+0x848>
    8afc:	d9800f17 	ldw	r6,60(sp)
    8b00:	d8800d17 	ldw	r2,52(sp)
    8b04:	d9800315 	stw	r6,12(sp)
    8b08:	d8800415 	stw	r2,16(sp)
    8b0c:	d8c00b17 	ldw	r3,44(sp)
    8b10:	1805003a 	cmpeq	r2,r3,zero
    8b14:	1000e21e 	bne	r2,zero,8ea0 <_dtoa_r+0x12e0>
    8b18:	d9000317 	ldw	r4,12(sp)
    8b1c:	0005883a 	mov	r2,zero
    8b20:	00cff834 	movhi	r3,16352
    8b24:	200c90fa 	slli	r6,r4,3
    8b28:	01000074 	movhi	r4,1
    8b2c:	21138504 	addi	r4,r4,19988
    8b30:	180b883a 	mov	r5,r3
    8b34:	310d883a 	add	r6,r6,r4
    8b38:	327fff17 	ldw	r9,-4(r6)
    8b3c:	323ffe17 	ldw	r8,-8(r6)
    8b40:	1009883a 	mov	r4,r2
    8b44:	480f883a 	mov	r7,r9
    8b48:	400d883a 	mov	r6,r8
    8b4c:	00107680 	call	10768 <__divdf3>
    8b50:	180b883a 	mov	r5,r3
    8b54:	b00d883a 	mov	r6,r22
    8b58:	b80f883a 	mov	r7,r23
    8b5c:	1009883a 	mov	r4,r2
    8b60:	00102b00 	call	102b0 <__subdf3>
    8b64:	a80b883a 	mov	r5,r21
    8b68:	a009883a 	mov	r4,r20
    8b6c:	d8c01915 	stw	r3,100(sp)
    8b70:	d8801815 	stw	r2,96(sp)
    8b74:	0010de80 	call	10de8 <__fixdfsi>
    8b78:	1009883a 	mov	r4,r2
    8b7c:	1027883a 	mov	r19,r2
    8b80:	0010cf00 	call	10cf0 <__floatsidf>
    8b84:	a80b883a 	mov	r5,r21
    8b88:	a009883a 	mov	r4,r20
    8b8c:	180f883a 	mov	r7,r3
    8b90:	100d883a 	mov	r6,r2
    8b94:	00102b00 	call	102b0 <__subdf3>
    8b98:	d9801817 	ldw	r6,96(sp)
    8b9c:	1823883a 	mov	r17,r3
    8ba0:	d8801415 	stw	r2,80(sp)
    8ba4:	302d883a 	mov	r22,r6
    8ba8:	d9800517 	ldw	r6,20(sp)
    8bac:	9cc00c04 	addi	r19,r19,48
    8bb0:	dc401515 	stw	r17,84(sp)
    8bb4:	d8c01917 	ldw	r3,100(sp)
    8bb8:	34c00005 	stb	r19,0(r6)
    8bbc:	d8800517 	ldw	r2,20(sp)
    8bc0:	d9401917 	ldw	r5,100(sp)
    8bc4:	d9801417 	ldw	r6,80(sp)
    8bc8:	b009883a 	mov	r4,r22
    8bcc:	880f883a 	mov	r7,r17
    8bd0:	182f883a 	mov	r23,r3
    8bd4:	17000044 	addi	fp,r2,1
    8bd8:	0010ad00 	call	10ad0 <__gtdf2>
    8bdc:	00804e16 	blt	zero,r2,8d18 <_dtoa_r+0x1158>
    8be0:	d9801417 	ldw	r6,80(sp)
    8be4:	0005883a 	mov	r2,zero
    8be8:	00cffc34 	movhi	r3,16368
    8bec:	180b883a 	mov	r5,r3
    8bf0:	880f883a 	mov	r7,r17
    8bf4:	1009883a 	mov	r4,r2
    8bf8:	00102b00 	call	102b0 <__subdf3>
    8bfc:	d9401917 	ldw	r5,100(sp)
    8c00:	180f883a 	mov	r7,r3
    8c04:	b009883a 	mov	r4,r22
    8c08:	100d883a 	mov	r6,r2
    8c0c:	0010ad00 	call	10ad0 <__gtdf2>
    8c10:	00bda216 	blt	zero,r2,829c <_dtoa_r+0x6dc>
    8c14:	d8c00317 	ldw	r3,12(sp)
    8c18:	00800044 	movi	r2,1
    8c1c:	10c01216 	blt	r2,r3,8c68 <_dtoa_r+0x10a8>
    8c20:	003d4506 	br	8138 <_dtoa_r+0x578>
    8c24:	d9801417 	ldw	r6,80(sp)
    8c28:	0005883a 	mov	r2,zero
    8c2c:	00cffc34 	movhi	r3,16368
    8c30:	180b883a 	mov	r5,r3
    8c34:	880f883a 	mov	r7,r17
    8c38:	1009883a 	mov	r4,r2
    8c3c:	00102b00 	call	102b0 <__subdf3>
    8c40:	d9c01b17 	ldw	r7,108(sp)
    8c44:	180b883a 	mov	r5,r3
    8c48:	1009883a 	mov	r4,r2
    8c4c:	b00d883a 	mov	r6,r22
    8c50:	0010be00 	call	10be0 <__ltdf2>
    8c54:	103d9116 	blt	r2,zero,829c <_dtoa_r+0x6dc>
    8c58:	d9800517 	ldw	r6,20(sp)
    8c5c:	d9000317 	ldw	r4,12(sp)
    8c60:	3105883a 	add	r2,r6,r4
    8c64:	e0bd3426 	beq	fp,r2,8138 <_dtoa_r+0x578>
    8c68:	04500934 	movhi	r17,16420
    8c6c:	0021883a 	mov	r16,zero
    8c70:	b80b883a 	mov	r5,r23
    8c74:	b009883a 	mov	r4,r22
    8c78:	800d883a 	mov	r6,r16
    8c7c:	880f883a 	mov	r7,r17
    8c80:	00103a40 	call	103a4 <__muldf3>
    8c84:	d9401517 	ldw	r5,84(sp)
    8c88:	d9001417 	ldw	r4,80(sp)
    8c8c:	880f883a 	mov	r7,r17
    8c90:	000d883a 	mov	r6,zero
    8c94:	d8801a15 	stw	r2,104(sp)
    8c98:	d8c01b15 	stw	r3,108(sp)
    8c9c:	00103a40 	call	103a4 <__muldf3>
    8ca0:	180b883a 	mov	r5,r3
    8ca4:	1009883a 	mov	r4,r2
    8ca8:	1823883a 	mov	r17,r3
    8cac:	1021883a 	mov	r16,r2
    8cb0:	0010de80 	call	10de8 <__fixdfsi>
    8cb4:	1009883a 	mov	r4,r2
    8cb8:	102b883a 	mov	r21,r2
    8cbc:	0010cf00 	call	10cf0 <__floatsidf>
    8cc0:	880b883a 	mov	r5,r17
    8cc4:	8009883a 	mov	r4,r16
    8cc8:	180f883a 	mov	r7,r3
    8ccc:	100d883a 	mov	r6,r2
    8cd0:	00102b00 	call	102b0 <__subdf3>
    8cd4:	1021883a 	mov	r16,r2
    8cd8:	d9001b17 	ldw	r4,108(sp)
    8cdc:	1823883a 	mov	r17,r3
    8ce0:	dc001415 	stw	r16,80(sp)
    8ce4:	ad400c04 	addi	r21,r21,48
    8ce8:	dc401515 	stw	r17,84(sp)
    8cec:	d8801a17 	ldw	r2,104(sp)
    8cf0:	e5400005 	stb	r21,0(fp)
    8cf4:	202f883a 	mov	r23,r4
    8cf8:	d9c01b17 	ldw	r7,108(sp)
    8cfc:	d9001417 	ldw	r4,80(sp)
    8d00:	880b883a 	mov	r5,r17
    8d04:	100d883a 	mov	r6,r2
    8d08:	102d883a 	mov	r22,r2
    8d0c:	e7000044 	addi	fp,fp,1
    8d10:	0010be00 	call	10be0 <__ltdf2>
    8d14:	103fc30e 	bge	r2,zero,8c24 <_dtoa_r+0x1064>
    8d18:	d9000417 	ldw	r4,16(sp)
    8d1c:	d9000d15 	stw	r4,52(sp)
    8d20:	003d7106 	br	82e8 <_dtoa_r+0x728>
    8d24:	d9801717 	ldw	r6,92(sp)
    8d28:	00800084 	movi	r2,2
    8d2c:	11bde60e 	bge	r2,r6,84c8 <_dtoa_r+0x908>
    8d30:	203cfb1e 	bne	r4,zero,8120 <_dtoa_r+0x560>
    8d34:	d9001617 	ldw	r4,88(sp)
    8d38:	900b883a 	mov	r5,r18
    8d3c:	01800144 	movi	r6,5
    8d40:	000f883a 	mov	r7,zero
    8d44:	000b1700 	call	b170 <__multadd>
    8d48:	d9000717 	ldw	r4,28(sp)
    8d4c:	100b883a 	mov	r5,r2
    8d50:	1025883a 	mov	r18,r2
    8d54:	000a6180 	call	a618 <__mcmp>
    8d58:	00bcf10e 	bge	zero,r2,8120 <_dtoa_r+0x560>
    8d5c:	d8c00d17 	ldw	r3,52(sp)
    8d60:	d9000517 	ldw	r4,20(sp)
    8d64:	d8000615 	stw	zero,24(sp)
    8d68:	18c00044 	addi	r3,r3,1
    8d6c:	d8c00d15 	stw	r3,52(sp)
    8d70:	00800c44 	movi	r2,49
    8d74:	27000044 	addi	fp,r4,1
    8d78:	20800005 	stb	r2,0(r4)
    8d7c:	003e8906 	br	87a4 <_dtoa_r+0xbe4>
    8d80:	d8c00517 	ldw	r3,20(sp)
    8d84:	003bc206 	br	7c90 <_dtoa_r+0xd0>
    8d88:	01800074 	movhi	r6,1
    8d8c:	3193b704 	addi	r6,r6,20188
    8d90:	30c00917 	ldw	r3,36(r6)
    8d94:	30800817 	ldw	r2,32(r6)
    8d98:	d9001217 	ldw	r4,72(sp)
    8d9c:	d9401317 	ldw	r5,76(sp)
    8da0:	180f883a 	mov	r7,r3
    8da4:	100d883a 	mov	r6,r2
    8da8:	00107680 	call	10768 <__divdf3>
    8dac:	948003cc 	andi	r18,r18,15
    8db0:	058000c4 	movi	r22,3
    8db4:	1029883a 	mov	r20,r2
    8db8:	182b883a 	mov	r21,r3
    8dbc:	003c8906 	br	7fe4 <_dtoa_r+0x424>
    8dc0:	d9001017 	ldw	r4,64(sp)
    8dc4:	d9800917 	ldw	r6,36(sp)
    8dc8:	0025883a 	mov	r18,zero
    8dcc:	1105c83a 	sub	r2,r2,r4
    8dd0:	2089883a 	add	r4,r4,r2
    8dd4:	308d883a 	add	r6,r6,r2
    8dd8:	d9001015 	stw	r4,64(sp)
    8ddc:	d9800915 	stw	r6,36(sp)
    8de0:	003e3206 	br	86ac <_dtoa_r+0xaec>
    8de4:	28800044 	addi	r2,r5,1
    8de8:	27000044 	addi	fp,r4,1
    8dec:	20800005 	stb	r2,0(r4)
    8df0:	003e6c06 	br	87a4 <_dtoa_r+0xbe4>
    8df4:	d8800f17 	ldw	r2,60(sp)
    8df8:	00bce016 	blt	zero,r2,817c <_dtoa_r+0x5bc>
    8dfc:	d9800f17 	ldw	r6,60(sp)
    8e00:	303cc51e 	bne	r6,zero,8118 <_dtoa_r+0x558>
    8e04:	0005883a 	mov	r2,zero
    8e08:	00d00534 	movhi	r3,16404
    8e0c:	980b883a 	mov	r5,r19
    8e10:	180f883a 	mov	r7,r3
    8e14:	9009883a 	mov	r4,r18
    8e18:	100d883a 	mov	r6,r2
    8e1c:	00103a40 	call	103a4 <__muldf3>
    8e20:	180b883a 	mov	r5,r3
    8e24:	a80f883a 	mov	r7,r21
    8e28:	1009883a 	mov	r4,r2
    8e2c:	a00d883a 	mov	r6,r20
    8e30:	0010b580 	call	10b58 <__gedf2>
    8e34:	103cb80e 	bge	r2,zero,8118 <_dtoa_r+0x558>
    8e38:	0027883a 	mov	r19,zero
    8e3c:	0025883a 	mov	r18,zero
    8e40:	003fc606 	br	8d5c <_dtoa_r+0x119c>
    8e44:	99400117 	ldw	r5,4(r19)
    8e48:	d9001617 	ldw	r4,88(sp)
    8e4c:	000aa3c0 	call	aa3c <_Balloc>
    8e50:	99800417 	ldw	r6,16(r19)
    8e54:	11000304 	addi	r4,r2,12
    8e58:	99400304 	addi	r5,r19,12
    8e5c:	318d883a 	add	r6,r6,r6
    8e60:	318d883a 	add	r6,r6,r6
    8e64:	31800204 	addi	r6,r6,8
    8e68:	1023883a 	mov	r17,r2
    8e6c:	00036840 	call	3684 <memcpy>
    8e70:	d9001617 	ldw	r4,88(sp)
    8e74:	880b883a 	mov	r5,r17
    8e78:	01800044 	movi	r6,1
    8e7c:	000ae000 	call	ae00 <__lshift>
    8e80:	100b883a 	mov	r5,r2
    8e84:	003d9c06 	br	84f8 <_dtoa_r+0x938>
    8e88:	00800e44 	movi	r2,57
    8e8c:	b8807026 	beq	r23,r2,9050 <_dtoa_r+0x1490>
    8e90:	b8800044 	addi	r2,r23,1
    8e94:	b7000044 	addi	fp,r22,1
    8e98:	b0800005 	stb	r2,0(r22)
    8e9c:	003e4106 	br	87a4 <_dtoa_r+0xbe4>
    8ea0:	d8800317 	ldw	r2,12(sp)
    8ea4:	01800074 	movhi	r6,1
    8ea8:	31938504 	addi	r6,r6,19988
    8eac:	b009883a 	mov	r4,r22
    8eb0:	100e90fa 	slli	r7,r2,3
    8eb4:	b80b883a 	mov	r5,r23
    8eb8:	398f883a 	add	r7,r7,r6
    8ebc:	38bffe17 	ldw	r2,-8(r7)
    8ec0:	d9800517 	ldw	r6,20(sp)
    8ec4:	38ffff17 	ldw	r3,-4(r7)
    8ec8:	37000044 	addi	fp,r6,1
    8ecc:	180f883a 	mov	r7,r3
    8ed0:	100d883a 	mov	r6,r2
    8ed4:	00103a40 	call	103a4 <__muldf3>
    8ed8:	a80b883a 	mov	r5,r21
    8edc:	a009883a 	mov	r4,r20
    8ee0:	182f883a 	mov	r23,r3
    8ee4:	102d883a 	mov	r22,r2
    8ee8:	0010de80 	call	10de8 <__fixdfsi>
    8eec:	1009883a 	mov	r4,r2
    8ef0:	1027883a 	mov	r19,r2
    8ef4:	0010cf00 	call	10cf0 <__floatsidf>
    8ef8:	a80b883a 	mov	r5,r21
    8efc:	a009883a 	mov	r4,r20
    8f00:	180f883a 	mov	r7,r3
    8f04:	100d883a 	mov	r6,r2
    8f08:	00102b00 	call	102b0 <__subdf3>
    8f0c:	180b883a 	mov	r5,r3
    8f10:	d8c00517 	ldw	r3,20(sp)
    8f14:	9cc00c04 	addi	r19,r19,48
    8f18:	1009883a 	mov	r4,r2
    8f1c:	1cc00005 	stb	r19,0(r3)
    8f20:	2021883a 	mov	r16,r4
    8f24:	d9000317 	ldw	r4,12(sp)
    8f28:	00800044 	movi	r2,1
    8f2c:	2823883a 	mov	r17,r5
    8f30:	20802226 	beq	r4,r2,8fbc <_dtoa_r+0x13fc>
    8f34:	1029883a 	mov	r20,r2
    8f38:	0005883a 	mov	r2,zero
    8f3c:	00d00934 	movhi	r3,16420
    8f40:	180f883a 	mov	r7,r3
    8f44:	100d883a 	mov	r6,r2
    8f48:	880b883a 	mov	r5,r17
    8f4c:	8009883a 	mov	r4,r16
    8f50:	00103a40 	call	103a4 <__muldf3>
    8f54:	180b883a 	mov	r5,r3
    8f58:	1009883a 	mov	r4,r2
    8f5c:	1823883a 	mov	r17,r3
    8f60:	1021883a 	mov	r16,r2
    8f64:	0010de80 	call	10de8 <__fixdfsi>
    8f68:	1009883a 	mov	r4,r2
    8f6c:	102b883a 	mov	r21,r2
    8f70:	0010cf00 	call	10cf0 <__floatsidf>
    8f74:	880b883a 	mov	r5,r17
    8f78:	8009883a 	mov	r4,r16
    8f7c:	180f883a 	mov	r7,r3
    8f80:	100d883a 	mov	r6,r2
    8f84:	00102b00 	call	102b0 <__subdf3>
    8f88:	180b883a 	mov	r5,r3
    8f8c:	d8c00517 	ldw	r3,20(sp)
    8f90:	1009883a 	mov	r4,r2
    8f94:	ad400c04 	addi	r21,r21,48
    8f98:	1d05883a 	add	r2,r3,r20
    8f9c:	15400005 	stb	r21,0(r2)
    8fa0:	2021883a 	mov	r16,r4
    8fa4:	d9000317 	ldw	r4,12(sp)
    8fa8:	a5000044 	addi	r20,r20,1
    8fac:	2823883a 	mov	r17,r5
    8fb0:	a13fe11e 	bne	r20,r4,8f38 <_dtoa_r+0x1378>
    8fb4:	e505883a 	add	r2,fp,r20
    8fb8:	173fffc4 	addi	fp,r2,-1
    8fbc:	0025883a 	mov	r18,zero
    8fc0:	04cff834 	movhi	r19,16352
    8fc4:	b009883a 	mov	r4,r22
    8fc8:	b80b883a 	mov	r5,r23
    8fcc:	900d883a 	mov	r6,r18
    8fd0:	980f883a 	mov	r7,r19
    8fd4:	00103300 	call	10330 <__adddf3>
    8fd8:	180b883a 	mov	r5,r3
    8fdc:	1009883a 	mov	r4,r2
    8fe0:	800d883a 	mov	r6,r16
    8fe4:	880f883a 	mov	r7,r17
    8fe8:	0010be00 	call	10be0 <__ltdf2>
    8fec:	103cab16 	blt	r2,zero,829c <_dtoa_r+0x6dc>
    8ff0:	0009883a 	mov	r4,zero
    8ff4:	980b883a 	mov	r5,r19
    8ff8:	b80f883a 	mov	r7,r23
    8ffc:	b00d883a 	mov	r6,r22
    9000:	00102b00 	call	102b0 <__subdf3>
    9004:	180b883a 	mov	r5,r3
    9008:	880f883a 	mov	r7,r17
    900c:	1009883a 	mov	r4,r2
    9010:	800d883a 	mov	r6,r16
    9014:	0010ad00 	call	10ad0 <__gtdf2>
    9018:	00bc470e 	bge	zero,r2,8138 <_dtoa_r+0x578>
    901c:	00c00c04 	movi	r3,48
    9020:	e73fffc4 	addi	fp,fp,-1
    9024:	e0800007 	ldb	r2,0(fp)
    9028:	10fffd26 	beq	r2,r3,9020 <_dtoa_r+0x1460>
    902c:	d9800417 	ldw	r6,16(sp)
    9030:	e7000044 	addi	fp,fp,1
    9034:	d9800d15 	stw	r6,52(sp)
    9038:	003cab06 	br	82e8 <_dtoa_r+0x728>
    903c:	d8c00f17 	ldw	r3,60(sp)
    9040:	d9001117 	ldw	r4,68(sp)
    9044:	20e1c83a 	sub	r16,r4,r3
    9048:	0007883a 	mov	r3,zero
    904c:	003d9b06 	br	86bc <_dtoa_r+0xafc>
    9050:	00800e44 	movi	r2,57
    9054:	b0800005 	stb	r2,0(r22)
    9058:	b5800044 	addi	r22,r22,1
    905c:	003dc106 	br	8764 <_dtoa_r+0xba4>
    9060:	05800084 	movi	r22,2
    9064:	003bf706 	br	8044 <_dtoa_r+0x484>
    9068:	d9000f17 	ldw	r4,60(sp)
    906c:	013c000e 	bge	zero,r4,8070 <_dtoa_r+0x4b0>
    9070:	d9800e17 	ldw	r6,56(sp)
    9074:	01bc300e 	bge	zero,r6,8138 <_dtoa_r+0x578>
    9078:	0005883a 	mov	r2,zero
    907c:	00d00934 	movhi	r3,16420
    9080:	a80b883a 	mov	r5,r21
    9084:	180f883a 	mov	r7,r3
    9088:	a009883a 	mov	r4,r20
    908c:	100d883a 	mov	r6,r2
    9090:	00103a40 	call	103a4 <__muldf3>
    9094:	b1000044 	addi	r4,r22,1
    9098:	1021883a 	mov	r16,r2
    909c:	1823883a 	mov	r17,r3
    90a0:	0010cf00 	call	10cf0 <__floatsidf>
    90a4:	880b883a 	mov	r5,r17
    90a8:	8009883a 	mov	r4,r16
    90ac:	180f883a 	mov	r7,r3
    90b0:	100d883a 	mov	r6,r2
    90b4:	00103a40 	call	103a4 <__muldf3>
    90b8:	0011883a 	mov	r8,zero
    90bc:	02500734 	movhi	r9,16412
    90c0:	180b883a 	mov	r5,r3
    90c4:	480f883a 	mov	r7,r9
    90c8:	1009883a 	mov	r4,r2
    90cc:	400d883a 	mov	r6,r8
    90d0:	00103300 	call	10330 <__adddf3>
    90d4:	102d883a 	mov	r22,r2
    90d8:	00bf3034 	movhi	r2,64704
    90dc:	10ef883a 	add	r23,r2,r3
    90e0:	d8800d17 	ldw	r2,52(sp)
    90e4:	d8c00e17 	ldw	r3,56(sp)
    90e8:	8029883a 	mov	r20,r16
    90ec:	10bfffc4 	addi	r2,r2,-1
    90f0:	882b883a 	mov	r21,r17
    90f4:	d8800415 	stw	r2,16(sp)
    90f8:	d8c00315 	stw	r3,12(sp)
    90fc:	003e8306 	br	8b0c <_dtoa_r+0xf4c>
    9100:	d8800117 	ldw	r2,4(sp)
    9104:	dc001117 	ldw	r16,68(sp)
    9108:	dc801017 	ldw	r18,64(sp)
    910c:	00c00d84 	movi	r3,54
    9110:	1887c83a 	sub	r3,r3,r2
    9114:	003d6906 	br	86bc <_dtoa_r+0xafc>
    9118:	01800044 	movi	r6,1
    911c:	3021883a 	mov	r16,r6
    9120:	d9800f15 	stw	r6,60(sp)
    9124:	d9802615 	stw	r6,152(sp)
    9128:	d9800e15 	stw	r6,56(sp)
    912c:	003b9306 	br	7f7c <_dtoa_r+0x3bc>
    9130:	b021883a 	mov	r16,r22
    9134:	dd800f15 	stw	r22,60(sp)
    9138:	003b9006 	br	7f7c <_dtoa_r+0x3bc>
    913c:	103e221e 	bne	r2,zero,89c8 <_dtoa_r+0xe08>
    9140:	b880004c 	andi	r2,r23,1
    9144:	1005003a 	cmpeq	r2,r2,zero
    9148:	103e1f1e 	bne	r2,zero,89c8 <_dtoa_r+0xe08>
    914c:	003e1b06 	br	89bc <_dtoa_r+0xdfc>
    9150:	d9001617 	ldw	r4,88(sp)
    9154:	980b883a 	mov	r5,r19
    9158:	01800284 	movi	r6,10
    915c:	000f883a 	mov	r7,zero
    9160:	000b1700 	call	b170 <__multadd>
    9164:	d8c00e17 	ldw	r3,56(sp)
    9168:	1027883a 	mov	r19,r2
    916c:	d8c00f15 	stw	r3,60(sp)
    9170:	003cd306 	br	84c0 <_dtoa_r+0x900>

00009174 <_fclose_r>:
    9174:	defffc04 	addi	sp,sp,-16
    9178:	dc400115 	stw	r17,4(sp)
    917c:	dc000015 	stw	r16,0(sp)
    9180:	dfc00315 	stw	ra,12(sp)
    9184:	dc800215 	stw	r18,8(sp)
    9188:	2821883a 	mov	r16,r5
    918c:	2023883a 	mov	r17,r4
    9190:	28002926 	beq	r5,zero,9238 <_fclose_r+0xc4>
    9194:	0002a780 	call	2a78 <__sfp_lock_acquire>
    9198:	88000226 	beq	r17,zero,91a4 <_fclose_r+0x30>
    919c:	88800e17 	ldw	r2,56(r17)
    91a0:	10002d26 	beq	r2,zero,9258 <_fclose_r+0xe4>
    91a4:	8080030f 	ldh	r2,12(r16)
    91a8:	10002226 	beq	r2,zero,9234 <_fclose_r+0xc0>
    91ac:	8809883a 	mov	r4,r17
    91b0:	800b883a 	mov	r5,r16
    91b4:	00092980 	call	9298 <_fflush_r>
    91b8:	1025883a 	mov	r18,r2
    91bc:	80800b17 	ldw	r2,44(r16)
    91c0:	10000426 	beq	r2,zero,91d4 <_fclose_r+0x60>
    91c4:	81400717 	ldw	r5,28(r16)
    91c8:	8809883a 	mov	r4,r17
    91cc:	103ee83a 	callr	r2
    91d0:	10002a16 	blt	r2,zero,927c <_fclose_r+0x108>
    91d4:	8080030b 	ldhu	r2,12(r16)
    91d8:	1080200c 	andi	r2,r2,128
    91dc:	1000231e 	bne	r2,zero,926c <_fclose_r+0xf8>
    91e0:	81400c17 	ldw	r5,48(r16)
    91e4:	28000526 	beq	r5,zero,91fc <_fclose_r+0x88>
    91e8:	80801004 	addi	r2,r16,64
    91ec:	28800226 	beq	r5,r2,91f8 <_fclose_r+0x84>
    91f0:	8809883a 	mov	r4,r17
    91f4:	00098300 	call	9830 <_free_r>
    91f8:	80000c15 	stw	zero,48(r16)
    91fc:	81401117 	ldw	r5,68(r16)
    9200:	28000326 	beq	r5,zero,9210 <_fclose_r+0x9c>
    9204:	8809883a 	mov	r4,r17
    9208:	00098300 	call	9830 <_free_r>
    920c:	80001115 	stw	zero,68(r16)
    9210:	8000030d 	sth	zero,12(r16)
    9214:	0002a7c0 	call	2a7c <__sfp_lock_release>
    9218:	9005883a 	mov	r2,r18
    921c:	dfc00317 	ldw	ra,12(sp)
    9220:	dc800217 	ldw	r18,8(sp)
    9224:	dc400117 	ldw	r17,4(sp)
    9228:	dc000017 	ldw	r16,0(sp)
    922c:	dec00404 	addi	sp,sp,16
    9230:	f800283a 	ret
    9234:	0002a7c0 	call	2a7c <__sfp_lock_release>
    9238:	0025883a 	mov	r18,zero
    923c:	9005883a 	mov	r2,r18
    9240:	dfc00317 	ldw	ra,12(sp)
    9244:	dc800217 	ldw	r18,8(sp)
    9248:	dc400117 	ldw	r17,4(sp)
    924c:	dc000017 	ldw	r16,0(sp)
    9250:	dec00404 	addi	sp,sp,16
    9254:	f800283a 	ret
    9258:	8809883a 	mov	r4,r17
    925c:	0002a880 	call	2a88 <__sinit>
    9260:	8080030f 	ldh	r2,12(r16)
    9264:	103fd11e 	bne	r2,zero,91ac <_fclose_r+0x38>
    9268:	003ff206 	br	9234 <_fclose_r+0xc0>
    926c:	81400417 	ldw	r5,16(r16)
    9270:	8809883a 	mov	r4,r17
    9274:	00098300 	call	9830 <_free_r>
    9278:	003fd906 	br	91e0 <_fclose_r+0x6c>
    927c:	04bfffc4 	movi	r18,-1
    9280:	003fd406 	br	91d4 <_fclose_r+0x60>

00009284 <fclose>:
    9284:	00800074 	movhi	r2,1
    9288:	109ae204 	addi	r2,r2,27528
    928c:	200b883a 	mov	r5,r4
    9290:	11000017 	ldw	r4,0(r2)
    9294:	00091741 	jmpi	9174 <_fclose_r>

00009298 <_fflush_r>:
    9298:	defffb04 	addi	sp,sp,-20
    929c:	dcc00315 	stw	r19,12(sp)
    92a0:	dc800215 	stw	r18,8(sp)
    92a4:	dfc00415 	stw	ra,16(sp)
    92a8:	dc400115 	stw	r17,4(sp)
    92ac:	dc000015 	stw	r16,0(sp)
    92b0:	2027883a 	mov	r19,r4
    92b4:	2825883a 	mov	r18,r5
    92b8:	20000226 	beq	r4,zero,92c4 <_fflush_r+0x2c>
    92bc:	20800e17 	ldw	r2,56(r4)
    92c0:	10005626 	beq	r2,zero,941c <_fflush_r+0x184>
    92c4:	9100030b 	ldhu	r4,12(r18)
    92c8:	20ffffcc 	andi	r3,r4,65535
    92cc:	18e0001c 	xori	r3,r3,32768
    92d0:	18e00004 	addi	r3,r3,-32768
    92d4:	1880020c 	andi	r2,r3,8
    92d8:	1000261e 	bne	r2,zero,9374 <_fflush_r+0xdc>
    92dc:	90c00117 	ldw	r3,4(r18)
    92e0:	20820014 	ori	r2,r4,2048
    92e4:	9080030d 	sth	r2,12(r18)
    92e8:	1009883a 	mov	r4,r2
    92ec:	00c0400e 	bge	zero,r3,93f0 <_fflush_r+0x158>
    92f0:	92000a17 	ldw	r8,40(r18)
    92f4:	40004026 	beq	r8,zero,93f8 <_fflush_r+0x160>
    92f8:	2084000c 	andi	r2,r4,4096
    92fc:	10005326 	beq	r2,zero,944c <_fflush_r+0x1b4>
    9300:	94001417 	ldw	r16,80(r18)
    9304:	9080030b 	ldhu	r2,12(r18)
    9308:	1080010c 	andi	r2,r2,4
    930c:	1000481e 	bne	r2,zero,9430 <_fflush_r+0x198>
    9310:	91400717 	ldw	r5,28(r18)
    9314:	9809883a 	mov	r4,r19
    9318:	800d883a 	mov	r6,r16
    931c:	000f883a 	mov	r7,zero
    9320:	403ee83a 	callr	r8
    9324:	8080261e 	bne	r16,r2,93c0 <_fflush_r+0x128>
    9328:	9080030b 	ldhu	r2,12(r18)
    932c:	91000417 	ldw	r4,16(r18)
    9330:	90000115 	stw	zero,4(r18)
    9334:	10bdffcc 	andi	r2,r2,63487
    9338:	10ffffcc 	andi	r3,r2,65535
    933c:	18c4000c 	andi	r3,r3,4096
    9340:	9080030d 	sth	r2,12(r18)
    9344:	91000015 	stw	r4,0(r18)
    9348:	18002b26 	beq	r3,zero,93f8 <_fflush_r+0x160>
    934c:	0007883a 	mov	r3,zero
    9350:	1805883a 	mov	r2,r3
    9354:	94001415 	stw	r16,80(r18)
    9358:	dfc00417 	ldw	ra,16(sp)
    935c:	dcc00317 	ldw	r19,12(sp)
    9360:	dc800217 	ldw	r18,8(sp)
    9364:	dc400117 	ldw	r17,4(sp)
    9368:	dc000017 	ldw	r16,0(sp)
    936c:	dec00504 	addi	sp,sp,20
    9370:	f800283a 	ret
    9374:	94400417 	ldw	r17,16(r18)
    9378:	88001f26 	beq	r17,zero,93f8 <_fflush_r+0x160>
    937c:	90800017 	ldw	r2,0(r18)
    9380:	18c000cc 	andi	r3,r3,3
    9384:	94400015 	stw	r17,0(r18)
    9388:	1461c83a 	sub	r16,r2,r17
    938c:	18002526 	beq	r3,zero,9424 <_fflush_r+0x18c>
    9390:	0005883a 	mov	r2,zero
    9394:	90800215 	stw	r2,8(r18)
    9398:	0400170e 	bge	zero,r16,93f8 <_fflush_r+0x160>
    939c:	90c00917 	ldw	r3,36(r18)
    93a0:	91400717 	ldw	r5,28(r18)
    93a4:	880d883a 	mov	r6,r17
    93a8:	800f883a 	mov	r7,r16
    93ac:	9809883a 	mov	r4,r19
    93b0:	183ee83a 	callr	r3
    93b4:	88a3883a 	add	r17,r17,r2
    93b8:	80a1c83a 	sub	r16,r16,r2
    93bc:	00bff616 	blt	zero,r2,9398 <_fflush_r+0x100>
    93c0:	9080030b 	ldhu	r2,12(r18)
    93c4:	00ffffc4 	movi	r3,-1
    93c8:	10801014 	ori	r2,r2,64
    93cc:	9080030d 	sth	r2,12(r18)
    93d0:	1805883a 	mov	r2,r3
    93d4:	dfc00417 	ldw	ra,16(sp)
    93d8:	dcc00317 	ldw	r19,12(sp)
    93dc:	dc800217 	ldw	r18,8(sp)
    93e0:	dc400117 	ldw	r17,4(sp)
    93e4:	dc000017 	ldw	r16,0(sp)
    93e8:	dec00504 	addi	sp,sp,20
    93ec:	f800283a 	ret
    93f0:	90800f17 	ldw	r2,60(r18)
    93f4:	00bfbe16 	blt	zero,r2,92f0 <_fflush_r+0x58>
    93f8:	0007883a 	mov	r3,zero
    93fc:	1805883a 	mov	r2,r3
    9400:	dfc00417 	ldw	ra,16(sp)
    9404:	dcc00317 	ldw	r19,12(sp)
    9408:	dc800217 	ldw	r18,8(sp)
    940c:	dc400117 	ldw	r17,4(sp)
    9410:	dc000017 	ldw	r16,0(sp)
    9414:	dec00504 	addi	sp,sp,20
    9418:	f800283a 	ret
    941c:	0002a880 	call	2a88 <__sinit>
    9420:	003fa806 	br	92c4 <_fflush_r+0x2c>
    9424:	90800517 	ldw	r2,20(r18)
    9428:	90800215 	stw	r2,8(r18)
    942c:	003fda06 	br	9398 <_fflush_r+0x100>
    9430:	90800117 	ldw	r2,4(r18)
    9434:	90c00c17 	ldw	r3,48(r18)
    9438:	80a1c83a 	sub	r16,r16,r2
    943c:	183fb426 	beq	r3,zero,9310 <_fflush_r+0x78>
    9440:	90800f17 	ldw	r2,60(r18)
    9444:	80a1c83a 	sub	r16,r16,r2
    9448:	003fb106 	br	9310 <_fflush_r+0x78>
    944c:	91400717 	ldw	r5,28(r18)
    9450:	9809883a 	mov	r4,r19
    9454:	000d883a 	mov	r6,zero
    9458:	01c00044 	movi	r7,1
    945c:	403ee83a 	callr	r8
    9460:	1021883a 	mov	r16,r2
    9464:	00bfffc4 	movi	r2,-1
    9468:	80800226 	beq	r16,r2,9474 <_fflush_r+0x1dc>
    946c:	92000a17 	ldw	r8,40(r18)
    9470:	003fa406 	br	9304 <_fflush_r+0x6c>
    9474:	98c00017 	ldw	r3,0(r19)
    9478:	00800744 	movi	r2,29
    947c:	18bfde26 	beq	r3,r2,93f8 <_fflush_r+0x160>
    9480:	9080030b 	ldhu	r2,12(r18)
    9484:	8007883a 	mov	r3,r16
    9488:	10801014 	ori	r2,r2,64
    948c:	9080030d 	sth	r2,12(r18)
    9490:	003fcf06 	br	93d0 <_fflush_r+0x138>

00009494 <fflush>:
    9494:	01400074 	movhi	r5,1
    9498:	2964a604 	addi	r5,r5,-28008
    949c:	2007883a 	mov	r3,r4
    94a0:	20000526 	beq	r4,zero,94b8 <fflush+0x24>
    94a4:	00800074 	movhi	r2,1
    94a8:	109ae204 	addi	r2,r2,27528
    94ac:	11000017 	ldw	r4,0(r2)
    94b0:	180b883a 	mov	r5,r3
    94b4:	00092981 	jmpi	9298 <_fflush_r>
    94b8:	00800074 	movhi	r2,1
    94bc:	109ae304 	addi	r2,r2,27532
    94c0:	11000017 	ldw	r4,0(r2)
    94c4:	0002ce01 	jmpi	2ce0 <_fwalk_reent>

000094c8 <_fread_r>:
    94c8:	defff504 	addi	sp,sp,-44
    94cc:	ddc00815 	stw	r23,32(sp)
    94d0:	39af383a 	mul	r23,r7,r6
    94d4:	df000915 	stw	fp,36(sp)
    94d8:	dd800715 	stw	r22,28(sp)
    94dc:	dcc00415 	stw	r19,16(sp)
    94e0:	dc000115 	stw	r16,4(sp)
    94e4:	dfc00a15 	stw	ra,40(sp)
    94e8:	dd400615 	stw	r21,24(sp)
    94ec:	dd000515 	stw	r20,20(sp)
    94f0:	dc800315 	stw	r18,12(sp)
    94f4:	dc400215 	stw	r17,8(sp)
    94f8:	d9800015 	stw	r6,0(sp)
    94fc:	3839883a 	mov	fp,r7
    9500:	2821883a 	mov	r16,r5
    9504:	202d883a 	mov	r22,r4
    9508:	dcc00b17 	ldw	r19,44(sp)
    950c:	b8005926 	beq	r23,zero,9674 <_fread_r+0x1ac>
    9510:	20000226 	beq	r4,zero,951c <_fread_r+0x54>
    9514:	20800e17 	ldw	r2,56(r4)
    9518:	10005826 	beq	r2,zero,967c <_fread_r+0x1b4>
    951c:	9c400117 	ldw	r17,4(r19)
    9520:	88005916 	blt	r17,zero,9688 <_fread_r+0x1c0>
    9524:	9880030b 	ldhu	r2,12(r19)
    9528:	8029883a 	mov	r20,r16
    952c:	1080008c 	andi	r2,r2,2
    9530:	1000221e 	bne	r2,zero,95bc <_fread_r+0xf4>
    9534:	b825883a 	mov	r18,r23
    9538:	00000106 	br	9540 <_fread_r+0x78>
    953c:	9c400117 	ldw	r17,4(r19)
    9540:	a009883a 	mov	r4,r20
    9544:	880d883a 	mov	r6,r17
    9548:	8c80542e 	bgeu	r17,r18,969c <_fread_r+0x1d4>
    954c:	99400017 	ldw	r5,0(r19)
    9550:	a469883a 	add	r20,r20,r17
    9554:	9465c83a 	sub	r18,r18,r17
    9558:	00036840 	call	3684 <memcpy>
    955c:	98800017 	ldw	r2,0(r19)
    9560:	b009883a 	mov	r4,r22
    9564:	980b883a 	mov	r5,r19
    9568:	1461883a 	add	r16,r2,r17
    956c:	9c000015 	stw	r16,0(r19)
    9570:	000390c0 	call	390c <__srefill_r>
    9574:	103ff126 	beq	r2,zero,953c <_fread_r+0x74>
    9578:	d9400017 	ldw	r5,0(sp)
    957c:	bc89c83a 	sub	r4,r23,r18
    9580:	00028a40 	call	28a4 <__udivsi3>
    9584:	1039883a 	mov	fp,r2
    9588:	e005883a 	mov	r2,fp
    958c:	dfc00a17 	ldw	ra,40(sp)
    9590:	df000917 	ldw	fp,36(sp)
    9594:	ddc00817 	ldw	r23,32(sp)
    9598:	dd800717 	ldw	r22,28(sp)
    959c:	dd400617 	ldw	r21,24(sp)
    95a0:	dd000517 	ldw	r20,20(sp)
    95a4:	dcc00417 	ldw	r19,16(sp)
    95a8:	dc800317 	ldw	r18,12(sp)
    95ac:	dc400217 	ldw	r17,8(sp)
    95b0:	dc000117 	ldw	r16,4(sp)
    95b4:	dec00b04 	addi	sp,sp,44
    95b8:	f800283a 	ret
    95bc:	b825883a 	mov	r18,r23
    95c0:	8dc03436 	bltu	r17,r23,9694 <_fread_r+0x1cc>
    95c4:	99400017 	ldw	r5,0(r19)
    95c8:	a009883a 	mov	r4,r20
    95cc:	900d883a 	mov	r6,r18
    95d0:	00036840 	call	3684 <memcpy>
    95d4:	9c000017 	ldw	r16,0(r19)
    95d8:	98800117 	ldw	r2,4(r19)
    95dc:	99400c17 	ldw	r5,48(r19)
    95e0:	84a1883a 	add	r16,r16,r18
    95e4:	14a3c83a 	sub	r17,r2,r18
    95e8:	a4ab883a 	add	r21,r20,r18
    95ec:	9c400115 	stw	r17,4(r19)
    95f0:	9c000015 	stw	r16,0(r19)
    95f4:	bca9c83a 	sub	r20,r23,r18
    95f8:	28000826 	beq	r5,zero,961c <_fread_r+0x154>
    95fc:	a03fe226 	beq	r20,zero,9588 <_fread_r+0xc0>
    9600:	98801004 	addi	r2,r19,64
    9604:	28800326 	beq	r5,r2,9614 <_fread_r+0x14c>
    9608:	b009883a 	mov	r4,r22
    960c:	00098300 	call	9830 <_free_r>
    9610:	9c000017 	ldw	r16,0(r19)
    9614:	98000c15 	stw	zero,48(r19)
    9618:	00000106 	br	9620 <_fread_r+0x158>
    961c:	a03fda26 	beq	r20,zero,9588 <_fread_r+0xc0>
    9620:	9c800417 	ldw	r18,16(r19)
    9624:	9c400517 	ldw	r17,20(r19)
    9628:	9d400015 	stw	r21,0(r19)
    962c:	9d400415 	stw	r21,16(r19)
    9630:	9d000515 	stw	r20,20(r19)
    9634:	b009883a 	mov	r4,r22
    9638:	980b883a 	mov	r5,r19
    963c:	000390c0 	call	390c <__srefill_r>
    9640:	98c00117 	ldw	r3,4(r19)
    9644:	9c800415 	stw	r18,16(r19)
    9648:	9c400515 	stw	r17,20(r19)
    964c:	a8eb883a 	add	r21,r21,r3
    9650:	9c000015 	stw	r16,0(r19)
    9654:	a0e9c83a 	sub	r20,r20,r3
    9658:	98000115 	stw	zero,4(r19)
    965c:	103fef26 	beq	r2,zero,961c <_fread_r+0x154>
    9660:	d9400017 	ldw	r5,0(sp)
    9664:	bd09c83a 	sub	r4,r23,r20
    9668:	00028a40 	call	28a4 <__udivsi3>
    966c:	1039883a 	mov	fp,r2
    9670:	003fc506 	br	9588 <_fread_r+0xc0>
    9674:	0039883a 	mov	fp,zero
    9678:	003fc306 	br	9588 <_fread_r+0xc0>
    967c:	0002a880 	call	2a88 <__sinit>
    9680:	9c400117 	ldw	r17,4(r19)
    9684:	883fa70e 	bge	r17,zero,9524 <_fread_r+0x5c>
    9688:	0023883a 	mov	r17,zero
    968c:	98000115 	stw	zero,4(r19)
    9690:	003fa406 	br	9524 <_fread_r+0x5c>
    9694:	8825883a 	mov	r18,r17
    9698:	003fca06 	br	95c4 <_fread_r+0xfc>
    969c:	99400017 	ldw	r5,0(r19)
    96a0:	900d883a 	mov	r6,r18
    96a4:	00036840 	call	3684 <memcpy>
    96a8:	98c00117 	ldw	r3,4(r19)
    96ac:	98800017 	ldw	r2,0(r19)
    96b0:	1c87c83a 	sub	r3,r3,r18
    96b4:	1485883a 	add	r2,r2,r18
    96b8:	98800015 	stw	r2,0(r19)
    96bc:	98c00115 	stw	r3,4(r19)
    96c0:	003fb106 	br	9588 <_fread_r+0xc0>

000096c4 <fread>:
    96c4:	00800074 	movhi	r2,1
    96c8:	109ae204 	addi	r2,r2,27528
    96cc:	2017883a 	mov	r11,r4
    96d0:	11000017 	ldw	r4,0(r2)
    96d4:	defffe04 	addi	sp,sp,-8
    96d8:	3013883a 	mov	r9,r6
    96dc:	2805883a 	mov	r2,r5
    96e0:	d9c00015 	stw	r7,0(sp)
    96e4:	580b883a 	mov	r5,r11
    96e8:	100d883a 	mov	r6,r2
    96ec:	480f883a 	mov	r7,r9
    96f0:	dfc00115 	stw	ra,4(sp)
    96f4:	00094c80 	call	94c8 <_fread_r>
    96f8:	dfc00117 	ldw	ra,4(sp)
    96fc:	dec00204 	addi	sp,sp,8
    9700:	f800283a 	ret

00009704 <_malloc_trim_r>:
    9704:	defffb04 	addi	sp,sp,-20
    9708:	dcc00315 	stw	r19,12(sp)
    970c:	04c00074 	movhi	r19,1
    9710:	9cd55004 	addi	r19,r19,21824
    9714:	dc800215 	stw	r18,8(sp)
    9718:	dc400115 	stw	r17,4(sp)
    971c:	dc000015 	stw	r16,0(sp)
    9720:	2823883a 	mov	r17,r5
    9724:	2025883a 	mov	r18,r4
    9728:	dfc00415 	stw	ra,16(sp)
    972c:	0011fdc0 	call	11fdc <__malloc_lock>
    9730:	98800217 	ldw	r2,8(r19)
    9734:	9009883a 	mov	r4,r18
    9738:	000b883a 	mov	r5,zero
    973c:	10c00117 	ldw	r3,4(r2)
    9740:	00bfff04 	movi	r2,-4
    9744:	18a0703a 	and	r16,r3,r2
    9748:	8463c83a 	sub	r17,r16,r17
    974c:	8c43fbc4 	addi	r17,r17,4079
    9750:	8822d33a 	srli	r17,r17,12
    9754:	0083ffc4 	movi	r2,4095
    9758:	8c7fffc4 	addi	r17,r17,-1
    975c:	8822933a 	slli	r17,r17,12
    9760:	1440060e 	bge	r2,r17,977c <_malloc_trim_r+0x78>
    9764:	0003aec0 	call	3aec <_sbrk_r>
    9768:	98c00217 	ldw	r3,8(r19)
    976c:	9009883a 	mov	r4,r18
    9770:	044bc83a 	sub	r5,zero,r17
    9774:	80c7883a 	add	r3,r16,r3
    9778:	10c00926 	beq	r2,r3,97a0 <_malloc_trim_r+0x9c>
    977c:	0011ffc0 	call	11ffc <__malloc_unlock>
    9780:	0005883a 	mov	r2,zero
    9784:	dfc00417 	ldw	ra,16(sp)
    9788:	dcc00317 	ldw	r19,12(sp)
    978c:	dc800217 	ldw	r18,8(sp)
    9790:	dc400117 	ldw	r17,4(sp)
    9794:	dc000017 	ldw	r16,0(sp)
    9798:	dec00504 	addi	sp,sp,20
    979c:	f800283a 	ret
    97a0:	9009883a 	mov	r4,r18
    97a4:	0003aec0 	call	3aec <_sbrk_r>
    97a8:	844dc83a 	sub	r6,r16,r17
    97ac:	00ffffc4 	movi	r3,-1
    97b0:	9009883a 	mov	r4,r18
    97b4:	000b883a 	mov	r5,zero
    97b8:	01c000b4 	movhi	r7,2
    97bc:	39e1f904 	addi	r7,r7,-30748
    97c0:	31800054 	ori	r6,r6,1
    97c4:	10c00926 	beq	r2,r3,97ec <_malloc_trim_r+0xe8>
    97c8:	38800017 	ldw	r2,0(r7)
    97cc:	98c00217 	ldw	r3,8(r19)
    97d0:	9009883a 	mov	r4,r18
    97d4:	1445c83a 	sub	r2,r2,r17
    97d8:	38800015 	stw	r2,0(r7)
    97dc:	19800115 	stw	r6,4(r3)
    97e0:	0011ffc0 	call	11ffc <__malloc_unlock>
    97e4:	00800044 	movi	r2,1
    97e8:	003fe606 	br	9784 <_malloc_trim_r+0x80>
    97ec:	0003aec0 	call	3aec <_sbrk_r>
    97f0:	99800217 	ldw	r6,8(r19)
    97f4:	100f883a 	mov	r7,r2
    97f8:	9009883a 	mov	r4,r18
    97fc:	1187c83a 	sub	r3,r2,r6
    9800:	008003c4 	movi	r2,15
    9804:	19400054 	ori	r5,r3,1
    9808:	10ffdc0e 	bge	r2,r3,977c <_malloc_trim_r+0x78>
    980c:	00800074 	movhi	r2,1
    9810:	109ae504 	addi	r2,r2,27540
    9814:	10c00017 	ldw	r3,0(r2)
    9818:	008000b4 	movhi	r2,2
    981c:	10a1f904 	addi	r2,r2,-30748
    9820:	31400115 	stw	r5,4(r6)
    9824:	38c7c83a 	sub	r3,r7,r3
    9828:	10c00015 	stw	r3,0(r2)
    982c:	003fd306 	br	977c <_malloc_trim_r+0x78>

00009830 <_free_r>:
    9830:	defffd04 	addi	sp,sp,-12
    9834:	dc400115 	stw	r17,4(sp)
    9838:	dc000015 	stw	r16,0(sp)
    983c:	dfc00215 	stw	ra,8(sp)
    9840:	2821883a 	mov	r16,r5
    9844:	2023883a 	mov	r17,r4
    9848:	28005a26 	beq	r5,zero,99b4 <_free_r+0x184>
    984c:	0011fdc0 	call	11fdc <__malloc_lock>
    9850:	823ffe04 	addi	r8,r16,-8
    9854:	41400117 	ldw	r5,4(r8)
    9858:	00bfff84 	movi	r2,-2
    985c:	02800074 	movhi	r10,1
    9860:	52955004 	addi	r10,r10,21824
    9864:	288e703a 	and	r7,r5,r2
    9868:	41cd883a 	add	r6,r8,r7
    986c:	30c00117 	ldw	r3,4(r6)
    9870:	51000217 	ldw	r4,8(r10)
    9874:	00bfff04 	movi	r2,-4
    9878:	1892703a 	and	r9,r3,r2
    987c:	5017883a 	mov	r11,r10
    9880:	31006726 	beq	r6,r4,9a20 <_free_r+0x1f0>
    9884:	2880004c 	andi	r2,r5,1
    9888:	1005003a 	cmpeq	r2,r2,zero
    988c:	32400115 	stw	r9,4(r6)
    9890:	10001a1e 	bne	r2,zero,98fc <_free_r+0xcc>
    9894:	000b883a 	mov	r5,zero
    9898:	3247883a 	add	r3,r6,r9
    989c:	18800117 	ldw	r2,4(r3)
    98a0:	1080004c 	andi	r2,r2,1
    98a4:	1000231e 	bne	r2,zero,9934 <_free_r+0x104>
    98a8:	280ac03a 	cmpne	r5,r5,zero
    98ac:	3a4f883a 	add	r7,r7,r9
    98b0:	2800451e 	bne	r5,zero,99c8 <_free_r+0x198>
    98b4:	31000217 	ldw	r4,8(r6)
    98b8:	00800074 	movhi	r2,1
    98bc:	10955204 	addi	r2,r2,21832
    98c0:	20807b26 	beq	r4,r2,9ab0 <_free_r+0x280>
    98c4:	30800317 	ldw	r2,12(r6)
    98c8:	3a07883a 	add	r3,r7,r8
    98cc:	19c00015 	stw	r7,0(r3)
    98d0:	11000215 	stw	r4,8(r2)
    98d4:	20800315 	stw	r2,12(r4)
    98d8:	38800054 	ori	r2,r7,1
    98dc:	40800115 	stw	r2,4(r8)
    98e0:	28001a26 	beq	r5,zero,994c <_free_r+0x11c>
    98e4:	8809883a 	mov	r4,r17
    98e8:	dfc00217 	ldw	ra,8(sp)
    98ec:	dc400117 	ldw	r17,4(sp)
    98f0:	dc000017 	ldw	r16,0(sp)
    98f4:	dec00304 	addi	sp,sp,12
    98f8:	0011ffc1 	jmpi	11ffc <__malloc_unlock>
    98fc:	80bffe17 	ldw	r2,-8(r16)
    9900:	50c00204 	addi	r3,r10,8
    9904:	4091c83a 	sub	r8,r8,r2
    9908:	41000217 	ldw	r4,8(r8)
    990c:	388f883a 	add	r7,r7,r2
    9910:	20c06126 	beq	r4,r3,9a98 <_free_r+0x268>
    9914:	40800317 	ldw	r2,12(r8)
    9918:	3247883a 	add	r3,r6,r9
    991c:	000b883a 	mov	r5,zero
    9920:	11000215 	stw	r4,8(r2)
    9924:	20800315 	stw	r2,12(r4)
    9928:	18800117 	ldw	r2,4(r3)
    992c:	1080004c 	andi	r2,r2,1
    9930:	103fdd26 	beq	r2,zero,98a8 <_free_r+0x78>
    9934:	38800054 	ori	r2,r7,1
    9938:	3a07883a 	add	r3,r7,r8
    993c:	280ac03a 	cmpne	r5,r5,zero
    9940:	40800115 	stw	r2,4(r8)
    9944:	19c00015 	stw	r7,0(r3)
    9948:	283fe61e 	bne	r5,zero,98e4 <_free_r+0xb4>
    994c:	00807fc4 	movi	r2,511
    9950:	11c01f2e 	bgeu	r2,r7,99d0 <_free_r+0x1a0>
    9954:	3806d27a 	srli	r3,r7,9
    9958:	1800481e 	bne	r3,zero,9a7c <_free_r+0x24c>
    995c:	3804d0fa 	srli	r2,r7,3
    9960:	100690fa 	slli	r3,r2,3
    9964:	1acd883a 	add	r6,r3,r11
    9968:	31400217 	ldw	r5,8(r6)
    996c:	31405926 	beq	r6,r5,9ad4 <_free_r+0x2a4>
    9970:	28800117 	ldw	r2,4(r5)
    9974:	00ffff04 	movi	r3,-4
    9978:	10c4703a 	and	r2,r2,r3
    997c:	3880022e 	bgeu	r7,r2,9988 <_free_r+0x158>
    9980:	29400217 	ldw	r5,8(r5)
    9984:	317ffa1e 	bne	r6,r5,9970 <_free_r+0x140>
    9988:	29800317 	ldw	r6,12(r5)
    998c:	41800315 	stw	r6,12(r8)
    9990:	41400215 	stw	r5,8(r8)
    9994:	8809883a 	mov	r4,r17
    9998:	2a000315 	stw	r8,12(r5)
    999c:	32000215 	stw	r8,8(r6)
    99a0:	dfc00217 	ldw	ra,8(sp)
    99a4:	dc400117 	ldw	r17,4(sp)
    99a8:	dc000017 	ldw	r16,0(sp)
    99ac:	dec00304 	addi	sp,sp,12
    99b0:	0011ffc1 	jmpi	11ffc <__malloc_unlock>
    99b4:	dfc00217 	ldw	ra,8(sp)
    99b8:	dc400117 	ldw	r17,4(sp)
    99bc:	dc000017 	ldw	r16,0(sp)
    99c0:	dec00304 	addi	sp,sp,12
    99c4:	f800283a 	ret
    99c8:	31000217 	ldw	r4,8(r6)
    99cc:	003fbd06 	br	98c4 <_free_r+0x94>
    99d0:	3806d0fa 	srli	r3,r7,3
    99d4:	00800044 	movi	r2,1
    99d8:	51400117 	ldw	r5,4(r10)
    99dc:	180890fa 	slli	r4,r3,3
    99e0:	1807d0ba 	srai	r3,r3,2
    99e4:	22c9883a 	add	r4,r4,r11
    99e8:	21800217 	ldw	r6,8(r4)
    99ec:	10c4983a 	sll	r2,r2,r3
    99f0:	41000315 	stw	r4,12(r8)
    99f4:	41800215 	stw	r6,8(r8)
    99f8:	288ab03a 	or	r5,r5,r2
    99fc:	22000215 	stw	r8,8(r4)
    9a00:	8809883a 	mov	r4,r17
    9a04:	51400115 	stw	r5,4(r10)
    9a08:	32000315 	stw	r8,12(r6)
    9a0c:	dfc00217 	ldw	ra,8(sp)
    9a10:	dc400117 	ldw	r17,4(sp)
    9a14:	dc000017 	ldw	r16,0(sp)
    9a18:	dec00304 	addi	sp,sp,12
    9a1c:	0011ffc1 	jmpi	11ffc <__malloc_unlock>
    9a20:	2880004c 	andi	r2,r5,1
    9a24:	3a4d883a 	add	r6,r7,r9
    9a28:	1000071e 	bne	r2,zero,9a48 <_free_r+0x218>
    9a2c:	80bffe17 	ldw	r2,-8(r16)
    9a30:	4091c83a 	sub	r8,r8,r2
    9a34:	41000317 	ldw	r4,12(r8)
    9a38:	40c00217 	ldw	r3,8(r8)
    9a3c:	308d883a 	add	r6,r6,r2
    9a40:	20c00215 	stw	r3,8(r4)
    9a44:	19000315 	stw	r4,12(r3)
    9a48:	00800074 	movhi	r2,1
    9a4c:	109ae404 	addi	r2,r2,27536
    9a50:	11000017 	ldw	r4,0(r2)
    9a54:	30c00054 	ori	r3,r6,1
    9a58:	52000215 	stw	r8,8(r10)
    9a5c:	40c00115 	stw	r3,4(r8)
    9a60:	313fa036 	bltu	r6,r4,98e4 <_free_r+0xb4>
    9a64:	008000b4 	movhi	r2,2
    9a68:	10a1bb04 	addi	r2,r2,-30996
    9a6c:	11400017 	ldw	r5,0(r2)
    9a70:	8809883a 	mov	r4,r17
    9a74:	00097040 	call	9704 <_malloc_trim_r>
    9a78:	003f9a06 	br	98e4 <_free_r+0xb4>
    9a7c:	00800104 	movi	r2,4
    9a80:	10c0072e 	bgeu	r2,r3,9aa0 <_free_r+0x270>
    9a84:	00800504 	movi	r2,20
    9a88:	10c01936 	bltu	r2,r3,9af0 <_free_r+0x2c0>
    9a8c:	188016c4 	addi	r2,r3,91
    9a90:	100690fa 	slli	r3,r2,3
    9a94:	003fb306 	br	9964 <_free_r+0x134>
    9a98:	01400044 	movi	r5,1
    9a9c:	003f7e06 	br	9898 <_free_r+0x68>
    9aa0:	3804d1ba 	srli	r2,r7,6
    9aa4:	10800e04 	addi	r2,r2,56
    9aa8:	100690fa 	slli	r3,r2,3
    9aac:	003fad06 	br	9964 <_free_r+0x134>
    9ab0:	22000315 	stw	r8,12(r4)
    9ab4:	22000215 	stw	r8,8(r4)
    9ab8:	3a05883a 	add	r2,r7,r8
    9abc:	38c00054 	ori	r3,r7,1
    9ac0:	11c00015 	stw	r7,0(r2)
    9ac4:	41000215 	stw	r4,8(r8)
    9ac8:	40c00115 	stw	r3,4(r8)
    9acc:	41000315 	stw	r4,12(r8)
    9ad0:	003f8406 	br	98e4 <_free_r+0xb4>
    9ad4:	1005d0ba 	srai	r2,r2,2
    9ad8:	00c00044 	movi	r3,1
    9adc:	51000117 	ldw	r4,4(r10)
    9ae0:	1886983a 	sll	r3,r3,r2
    9ae4:	20c8b03a 	or	r4,r4,r3
    9ae8:	51000115 	stw	r4,4(r10)
    9aec:	003fa706 	br	998c <_free_r+0x15c>
    9af0:	00801504 	movi	r2,84
    9af4:	10c00436 	bltu	r2,r3,9b08 <_free_r+0x2d8>
    9af8:	3804d33a 	srli	r2,r7,12
    9afc:	10801b84 	addi	r2,r2,110
    9b00:	100690fa 	slli	r3,r2,3
    9b04:	003f9706 	br	9964 <_free_r+0x134>
    9b08:	00805504 	movi	r2,340
    9b0c:	10c00436 	bltu	r2,r3,9b20 <_free_r+0x2f0>
    9b10:	3804d3fa 	srli	r2,r7,15
    9b14:	10801dc4 	addi	r2,r2,119
    9b18:	100690fa 	slli	r3,r2,3
    9b1c:	003f9106 	br	9964 <_free_r+0x134>
    9b20:	00815504 	movi	r2,1364
    9b24:	10c0032e 	bgeu	r2,r3,9b34 <_free_r+0x304>
    9b28:	00801f84 	movi	r2,126
    9b2c:	00c0fc04 	movi	r3,1008
    9b30:	003f8c06 	br	9964 <_free_r+0x134>
    9b34:	3804d4ba 	srli	r2,r7,18
    9b38:	10801f04 	addi	r2,r2,124
    9b3c:	100690fa 	slli	r3,r2,3
    9b40:	003f8806 	br	9964 <_free_r+0x134>

00009b44 <__sfvwrite_r>:
    9b44:	30800217 	ldw	r2,8(r6)
    9b48:	defff504 	addi	sp,sp,-44
    9b4c:	df000915 	stw	fp,36(sp)
    9b50:	dd800715 	stw	r22,28(sp)
    9b54:	dc800315 	stw	r18,12(sp)
    9b58:	dfc00a15 	stw	ra,40(sp)
    9b5c:	ddc00815 	stw	r23,32(sp)
    9b60:	dd400615 	stw	r21,24(sp)
    9b64:	dd000515 	stw	r20,20(sp)
    9b68:	dcc00415 	stw	r19,16(sp)
    9b6c:	dc400215 	stw	r17,8(sp)
    9b70:	dc000115 	stw	r16,4(sp)
    9b74:	302d883a 	mov	r22,r6
    9b78:	2039883a 	mov	fp,r4
    9b7c:	2825883a 	mov	r18,r5
    9b80:	10001c26 	beq	r2,zero,9bf4 <__sfvwrite_r+0xb0>
    9b84:	29c0030b 	ldhu	r7,12(r5)
    9b88:	3880020c 	andi	r2,r7,8
    9b8c:	10002726 	beq	r2,zero,9c2c <__sfvwrite_r+0xe8>
    9b90:	28800417 	ldw	r2,16(r5)
    9b94:	10002526 	beq	r2,zero,9c2c <__sfvwrite_r+0xe8>
    9b98:	3880008c 	andi	r2,r7,2
    9b9c:	b5400017 	ldw	r21,0(r22)
    9ba0:	10002826 	beq	r2,zero,9c44 <__sfvwrite_r+0x100>
    9ba4:	0021883a 	mov	r16,zero
    9ba8:	0023883a 	mov	r17,zero
    9bac:	880d883a 	mov	r6,r17
    9bb0:	e009883a 	mov	r4,fp
    9bb4:	00810004 	movi	r2,1024
    9bb8:	80006e26 	beq	r16,zero,9d74 <__sfvwrite_r+0x230>
    9bbc:	800f883a 	mov	r7,r16
    9bc0:	91400717 	ldw	r5,28(r18)
    9bc4:	1400012e 	bgeu	r2,r16,9bcc <__sfvwrite_r+0x88>
    9bc8:	100f883a 	mov	r7,r2
    9bcc:	90c00917 	ldw	r3,36(r18)
    9bd0:	183ee83a 	callr	r3
    9bd4:	1007883a 	mov	r3,r2
    9bd8:	80a1c83a 	sub	r16,r16,r2
    9bdc:	88a3883a 	add	r17,r17,r2
    9be0:	00806d0e 	bge	zero,r2,9d98 <__sfvwrite_r+0x254>
    9be4:	b0800217 	ldw	r2,8(r22)
    9be8:	10c5c83a 	sub	r2,r2,r3
    9bec:	b0800215 	stw	r2,8(r22)
    9bf0:	103fee1e 	bne	r2,zero,9bac <__sfvwrite_r+0x68>
    9bf4:	0009883a 	mov	r4,zero
    9bf8:	2005883a 	mov	r2,r4
    9bfc:	dfc00a17 	ldw	ra,40(sp)
    9c00:	df000917 	ldw	fp,36(sp)
    9c04:	ddc00817 	ldw	r23,32(sp)
    9c08:	dd800717 	ldw	r22,28(sp)
    9c0c:	dd400617 	ldw	r21,24(sp)
    9c10:	dd000517 	ldw	r20,20(sp)
    9c14:	dcc00417 	ldw	r19,16(sp)
    9c18:	dc800317 	ldw	r18,12(sp)
    9c1c:	dc400217 	ldw	r17,8(sp)
    9c20:	dc000117 	ldw	r16,4(sp)
    9c24:	dec00b04 	addi	sp,sp,44
    9c28:	f800283a 	ret
    9c2c:	00077fc0 	call	77fc <__swsetup_r>
    9c30:	1000e41e 	bne	r2,zero,9fc4 <__sfvwrite_r+0x480>
    9c34:	91c0030b 	ldhu	r7,12(r18)
    9c38:	b5400017 	ldw	r21,0(r22)
    9c3c:	3880008c 	andi	r2,r7,2
    9c40:	103fd81e 	bne	r2,zero,9ba4 <__sfvwrite_r+0x60>
    9c44:	3880004c 	andi	r2,r7,1
    9c48:	1005003a 	cmpeq	r2,r2,zero
    9c4c:	10005726 	beq	r2,zero,9dac <__sfvwrite_r+0x268>
    9c50:	0029883a 	mov	r20,zero
    9c54:	002f883a 	mov	r23,zero
    9c58:	a0004226 	beq	r20,zero,9d64 <__sfvwrite_r+0x220>
    9c5c:	3880800c 	andi	r2,r7,512
    9c60:	94000217 	ldw	r16,8(r18)
    9c64:	10008b26 	beq	r2,zero,9e94 <__sfvwrite_r+0x350>
    9c68:	800d883a 	mov	r6,r16
    9c6c:	a400a536 	bltu	r20,r16,9f04 <__sfvwrite_r+0x3c0>
    9c70:	3881200c 	andi	r2,r7,1152
    9c74:	10002726 	beq	r2,zero,9d14 <__sfvwrite_r+0x1d0>
    9c78:	90800517 	ldw	r2,20(r18)
    9c7c:	92000417 	ldw	r8,16(r18)
    9c80:	91400017 	ldw	r5,0(r18)
    9c84:	1087883a 	add	r3,r2,r2
    9c88:	1887883a 	add	r3,r3,r2
    9c8c:	1808d7fa 	srli	r4,r3,31
    9c90:	2a21c83a 	sub	r16,r5,r8
    9c94:	80800044 	addi	r2,r16,1
    9c98:	20c9883a 	add	r4,r4,r3
    9c9c:	2027d07a 	srai	r19,r4,1
    9ca0:	a085883a 	add	r2,r20,r2
    9ca4:	980d883a 	mov	r6,r19
    9ca8:	9880022e 	bgeu	r19,r2,9cb4 <__sfvwrite_r+0x170>
    9cac:	1027883a 	mov	r19,r2
    9cb0:	100d883a 	mov	r6,r2
    9cb4:	3881000c 	andi	r2,r7,1024
    9cb8:	1000b826 	beq	r2,zero,9f9c <__sfvwrite_r+0x458>
    9cbc:	300b883a 	mov	r5,r6
    9cc0:	e009883a 	mov	r4,fp
    9cc4:	0002e600 	call	2e60 <_malloc_r>
    9cc8:	10003126 	beq	r2,zero,9d90 <__sfvwrite_r+0x24c>
    9ccc:	91400417 	ldw	r5,16(r18)
    9cd0:	1009883a 	mov	r4,r2
    9cd4:	800d883a 	mov	r6,r16
    9cd8:	1023883a 	mov	r17,r2
    9cdc:	00036840 	call	3684 <memcpy>
    9ce0:	90c0030b 	ldhu	r3,12(r18)
    9ce4:	00beffc4 	movi	r2,-1025
    9ce8:	1886703a 	and	r3,r3,r2
    9cec:	18c02014 	ori	r3,r3,128
    9cf0:	90c0030d 	sth	r3,12(r18)
    9cf4:	9c07c83a 	sub	r3,r19,r16
    9cf8:	8c05883a 	add	r2,r17,r16
    9cfc:	a00d883a 	mov	r6,r20
    9d00:	a021883a 	mov	r16,r20
    9d04:	90800015 	stw	r2,0(r18)
    9d08:	90c00215 	stw	r3,8(r18)
    9d0c:	94400415 	stw	r17,16(r18)
    9d10:	94c00515 	stw	r19,20(r18)
    9d14:	91000017 	ldw	r4,0(r18)
    9d18:	b80b883a 	mov	r5,r23
    9d1c:	a023883a 	mov	r17,r20
    9d20:	000a3dc0 	call	a3dc <memmove>
    9d24:	90c00217 	ldw	r3,8(r18)
    9d28:	90800017 	ldw	r2,0(r18)
    9d2c:	a027883a 	mov	r19,r20
    9d30:	1c07c83a 	sub	r3,r3,r16
    9d34:	1405883a 	add	r2,r2,r16
    9d38:	90c00215 	stw	r3,8(r18)
    9d3c:	a021883a 	mov	r16,r20
    9d40:	90800015 	stw	r2,0(r18)
    9d44:	b0800217 	ldw	r2,8(r22)
    9d48:	1405c83a 	sub	r2,r2,r16
    9d4c:	b0800215 	stw	r2,8(r22)
    9d50:	103fa826 	beq	r2,zero,9bf4 <__sfvwrite_r+0xb0>
    9d54:	a469c83a 	sub	r20,r20,r17
    9d58:	91c0030b 	ldhu	r7,12(r18)
    9d5c:	bcef883a 	add	r23,r23,r19
    9d60:	a03fbe1e 	bne	r20,zero,9c5c <__sfvwrite_r+0x118>
    9d64:	adc00017 	ldw	r23,0(r21)
    9d68:	ad000117 	ldw	r20,4(r21)
    9d6c:	ad400204 	addi	r21,r21,8
    9d70:	003fb906 	br	9c58 <__sfvwrite_r+0x114>
    9d74:	ac400017 	ldw	r17,0(r21)
    9d78:	ac000117 	ldw	r16,4(r21)
    9d7c:	ad400204 	addi	r21,r21,8
    9d80:	003f8a06 	br	9bac <__sfvwrite_r+0x68>
    9d84:	91400417 	ldw	r5,16(r18)
    9d88:	e009883a 	mov	r4,fp
    9d8c:	00098300 	call	9830 <_free_r>
    9d90:	00800304 	movi	r2,12
    9d94:	e0800015 	stw	r2,0(fp)
    9d98:	9080030b 	ldhu	r2,12(r18)
    9d9c:	013fffc4 	movi	r4,-1
    9da0:	10801014 	ori	r2,r2,64
    9da4:	9080030d 	sth	r2,12(r18)
    9da8:	003f9306 	br	9bf8 <__sfvwrite_r+0xb4>
    9dac:	0027883a 	mov	r19,zero
    9db0:	002f883a 	mov	r23,zero
    9db4:	d8000015 	stw	zero,0(sp)
    9db8:	0029883a 	mov	r20,zero
    9dbc:	98001e26 	beq	r19,zero,9e38 <__sfvwrite_r+0x2f4>
    9dc0:	d8c00017 	ldw	r3,0(sp)
    9dc4:	1804c03a 	cmpne	r2,r3,zero
    9dc8:	10005e26 	beq	r2,zero,9f44 <__sfvwrite_r+0x400>
    9dcc:	9821883a 	mov	r16,r19
    9dd0:	a4c0012e 	bgeu	r20,r19,9dd8 <__sfvwrite_r+0x294>
    9dd4:	a021883a 	mov	r16,r20
    9dd8:	91000017 	ldw	r4,0(r18)
    9ddc:	90800417 	ldw	r2,16(r18)
    9de0:	91800217 	ldw	r6,8(r18)
    9de4:	91c00517 	ldw	r7,20(r18)
    9de8:	1100022e 	bgeu	r2,r4,9df4 <__sfvwrite_r+0x2b0>
    9dec:	31e3883a 	add	r17,r6,r7
    9df0:	8c001616 	blt	r17,r16,9e4c <__sfvwrite_r+0x308>
    9df4:	81c03816 	blt	r16,r7,9ed8 <__sfvwrite_r+0x394>
    9df8:	90c00917 	ldw	r3,36(r18)
    9dfc:	91400717 	ldw	r5,28(r18)
    9e00:	e009883a 	mov	r4,fp
    9e04:	b80d883a 	mov	r6,r23
    9e08:	183ee83a 	callr	r3
    9e0c:	1023883a 	mov	r17,r2
    9e10:	00bfe10e 	bge	zero,r2,9d98 <__sfvwrite_r+0x254>
    9e14:	a469c83a 	sub	r20,r20,r17
    9e18:	a0001826 	beq	r20,zero,9e7c <__sfvwrite_r+0x338>
    9e1c:	b0800217 	ldw	r2,8(r22)
    9e20:	1445c83a 	sub	r2,r2,r17
    9e24:	b0800215 	stw	r2,8(r22)
    9e28:	103f7226 	beq	r2,zero,9bf4 <__sfvwrite_r+0xb0>
    9e2c:	9c67c83a 	sub	r19,r19,r17
    9e30:	bc6f883a 	add	r23,r23,r17
    9e34:	983fe21e 	bne	r19,zero,9dc0 <__sfvwrite_r+0x27c>
    9e38:	adc00017 	ldw	r23,0(r21)
    9e3c:	acc00117 	ldw	r19,4(r21)
    9e40:	ad400204 	addi	r21,r21,8
    9e44:	d8000015 	stw	zero,0(sp)
    9e48:	003fdc06 	br	9dbc <__sfvwrite_r+0x278>
    9e4c:	b80b883a 	mov	r5,r23
    9e50:	880d883a 	mov	r6,r17
    9e54:	000a3dc0 	call	a3dc <memmove>
    9e58:	90c00017 	ldw	r3,0(r18)
    9e5c:	e009883a 	mov	r4,fp
    9e60:	900b883a 	mov	r5,r18
    9e64:	1c47883a 	add	r3,r3,r17
    9e68:	90c00015 	stw	r3,0(r18)
    9e6c:	00092980 	call	9298 <_fflush_r>
    9e70:	103fc91e 	bne	r2,zero,9d98 <__sfvwrite_r+0x254>
    9e74:	a469c83a 	sub	r20,r20,r17
    9e78:	a03fe81e 	bne	r20,zero,9e1c <__sfvwrite_r+0x2d8>
    9e7c:	e009883a 	mov	r4,fp
    9e80:	900b883a 	mov	r5,r18
    9e84:	00092980 	call	9298 <_fflush_r>
    9e88:	103fc31e 	bne	r2,zero,9d98 <__sfvwrite_r+0x254>
    9e8c:	d8000015 	stw	zero,0(sp)
    9e90:	003fe206 	br	9e1c <__sfvwrite_r+0x2d8>
    9e94:	91000017 	ldw	r4,0(r18)
    9e98:	90800417 	ldw	r2,16(r18)
    9e9c:	1100022e 	bgeu	r2,r4,9ea8 <__sfvwrite_r+0x364>
    9ea0:	8023883a 	mov	r17,r16
    9ea4:	85003136 	bltu	r16,r20,9f6c <__sfvwrite_r+0x428>
    9ea8:	91c00517 	ldw	r7,20(r18)
    9eac:	a1c01836 	bltu	r20,r7,9f10 <__sfvwrite_r+0x3cc>
    9eb0:	90c00917 	ldw	r3,36(r18)
    9eb4:	91400717 	ldw	r5,28(r18)
    9eb8:	e009883a 	mov	r4,fp
    9ebc:	b80d883a 	mov	r6,r23
    9ec0:	183ee83a 	callr	r3
    9ec4:	1021883a 	mov	r16,r2
    9ec8:	00bfb30e 	bge	zero,r2,9d98 <__sfvwrite_r+0x254>
    9ecc:	1023883a 	mov	r17,r2
    9ed0:	1027883a 	mov	r19,r2
    9ed4:	003f9b06 	br	9d44 <__sfvwrite_r+0x200>
    9ed8:	b80b883a 	mov	r5,r23
    9edc:	800d883a 	mov	r6,r16
    9ee0:	000a3dc0 	call	a3dc <memmove>
    9ee4:	90c00217 	ldw	r3,8(r18)
    9ee8:	90800017 	ldw	r2,0(r18)
    9eec:	8023883a 	mov	r17,r16
    9ef0:	1c07c83a 	sub	r3,r3,r16
    9ef4:	1405883a 	add	r2,r2,r16
    9ef8:	90c00215 	stw	r3,8(r18)
    9efc:	90800015 	stw	r2,0(r18)
    9f00:	003fc406 	br	9e14 <__sfvwrite_r+0x2d0>
    9f04:	a00d883a 	mov	r6,r20
    9f08:	a021883a 	mov	r16,r20
    9f0c:	003f8106 	br	9d14 <__sfvwrite_r+0x1d0>
    9f10:	b80b883a 	mov	r5,r23
    9f14:	a00d883a 	mov	r6,r20
    9f18:	000a3dc0 	call	a3dc <memmove>
    9f1c:	90c00217 	ldw	r3,8(r18)
    9f20:	90800017 	ldw	r2,0(r18)
    9f24:	a021883a 	mov	r16,r20
    9f28:	1d07c83a 	sub	r3,r3,r20
    9f2c:	1505883a 	add	r2,r2,r20
    9f30:	a023883a 	mov	r17,r20
    9f34:	a027883a 	mov	r19,r20
    9f38:	90c00215 	stw	r3,8(r18)
    9f3c:	90800015 	stw	r2,0(r18)
    9f40:	003f8006 	br	9d44 <__sfvwrite_r+0x200>
    9f44:	b809883a 	mov	r4,r23
    9f48:	01400284 	movi	r5,10
    9f4c:	980d883a 	mov	r6,r19
    9f50:	00035a00 	call	35a0 <memchr>
    9f54:	10001726 	beq	r2,zero,9fb4 <__sfvwrite_r+0x470>
    9f58:	15c5c83a 	sub	r2,r2,r23
    9f5c:	15000044 	addi	r20,r2,1
    9f60:	00800044 	movi	r2,1
    9f64:	d8800015 	stw	r2,0(sp)
    9f68:	003f9806 	br	9dcc <__sfvwrite_r+0x288>
    9f6c:	b80b883a 	mov	r5,r23
    9f70:	800d883a 	mov	r6,r16
    9f74:	000a3dc0 	call	a3dc <memmove>
    9f78:	90c00017 	ldw	r3,0(r18)
    9f7c:	e009883a 	mov	r4,fp
    9f80:	900b883a 	mov	r5,r18
    9f84:	1c07883a 	add	r3,r3,r16
    9f88:	90c00015 	stw	r3,0(r18)
    9f8c:	8027883a 	mov	r19,r16
    9f90:	00092980 	call	9298 <_fflush_r>
    9f94:	103f6b26 	beq	r2,zero,9d44 <__sfvwrite_r+0x200>
    9f98:	003f7f06 	br	9d98 <__sfvwrite_r+0x254>
    9f9c:	400b883a 	mov	r5,r8
    9fa0:	e009883a 	mov	r4,fp
    9fa4:	000b7140 	call	b714 <_realloc_r>
    9fa8:	103f7626 	beq	r2,zero,9d84 <__sfvwrite_r+0x240>
    9fac:	1023883a 	mov	r17,r2
    9fb0:	003f5006 	br	9cf4 <__sfvwrite_r+0x1b0>
    9fb4:	00c00044 	movi	r3,1
    9fb8:	9d000044 	addi	r20,r19,1
    9fbc:	d8c00015 	stw	r3,0(sp)
    9fc0:	003f8206 	br	9dcc <__sfvwrite_r+0x288>
    9fc4:	9080030b 	ldhu	r2,12(r18)
    9fc8:	00c00244 	movi	r3,9
    9fcc:	013fffc4 	movi	r4,-1
    9fd0:	10801014 	ori	r2,r2,64
    9fd4:	9080030d 	sth	r2,12(r18)
    9fd8:	e0c00015 	stw	r3,0(fp)
    9fdc:	003f0606 	br	9bf8 <__sfvwrite_r+0xb4>

00009fe0 <iswspace>:
    9fe0:	00803fc4 	movi	r2,255
    9fe4:	0007883a 	mov	r3,zero
    9fe8:	11000636 	bltu	r2,r4,a004 <iswspace+0x24>
    9fec:	00800074 	movhi	r2,1
    9ff0:	109ae104 	addi	r2,r2,27524
    9ff4:	10c00017 	ldw	r3,0(r2)
    9ff8:	1907883a 	add	r3,r3,r4
    9ffc:	18800003 	ldbu	r2,0(r3)
    a000:	10c0020c 	andi	r3,r2,8
    a004:	1805883a 	mov	r2,r3
    a008:	f800283a 	ret

0000a00c <__locale_charset>:
    a00c:	d0a00617 	ldw	r2,-32744(gp)
    a010:	f800283a 	ret

0000a014 <_localeconv_r>:
    a014:	00800074 	movhi	r2,1
    a018:	10937904 	addi	r2,r2,19940
    a01c:	f800283a 	ret

0000a020 <localeconv>:
    a020:	00800074 	movhi	r2,1
    a024:	109ae204 	addi	r2,r2,27528
    a028:	11000017 	ldw	r4,0(r2)
    a02c:	000a0141 	jmpi	a014 <_localeconv_r>

0000a030 <_setlocale_r>:
    a030:	defffc04 	addi	sp,sp,-16
    a034:	00c00074 	movhi	r3,1
    a038:	18d34504 	addi	r3,r3,19732
    a03c:	dc800215 	stw	r18,8(sp)
    a040:	dc400115 	stw	r17,4(sp)
    a044:	dc000015 	stw	r16,0(sp)
    a048:	2023883a 	mov	r17,r4
    a04c:	2825883a 	mov	r18,r5
    a050:	dfc00315 	stw	ra,12(sp)
    a054:	3021883a 	mov	r16,r6
    a058:	3009883a 	mov	r4,r6
    a05c:	180b883a 	mov	r5,r3
    a060:	30000926 	beq	r6,zero,a088 <_setlocale_r+0x58>
    a064:	0003f200 	call	3f20 <strcmp>
    a068:	8009883a 	mov	r4,r16
    a06c:	01400074 	movhi	r5,1
    a070:	29535604 	addi	r5,r5,19800
    a074:	10000b1e 	bne	r2,zero,a0a4 <_setlocale_r+0x74>
    a078:	8c000d15 	stw	r16,52(r17)
    a07c:	8c800c15 	stw	r18,48(r17)
    a080:	00c00074 	movhi	r3,1
    a084:	18d34504 	addi	r3,r3,19732
    a088:	1805883a 	mov	r2,r3
    a08c:	dfc00317 	ldw	ra,12(sp)
    a090:	dc800217 	ldw	r18,8(sp)
    a094:	dc400117 	ldw	r17,4(sp)
    a098:	dc000017 	ldw	r16,0(sp)
    a09c:	dec00404 	addi	sp,sp,16
    a0a0:	f800283a 	ret
    a0a4:	0003f200 	call	3f20 <strcmp>
    a0a8:	0007883a 	mov	r3,zero
    a0ac:	103ff226 	beq	r2,zero,a078 <_setlocale_r+0x48>
    a0b0:	003ff506 	br	a088 <_setlocale_r+0x58>

0000a0b4 <setlocale>:
    a0b4:	01800074 	movhi	r6,1
    a0b8:	319ae204 	addi	r6,r6,27528
    a0bc:	2007883a 	mov	r3,r4
    a0c0:	31000017 	ldw	r4,0(r6)
    a0c4:	280d883a 	mov	r6,r5
    a0c8:	180b883a 	mov	r5,r3
    a0cc:	000a0301 	jmpi	a030 <_setlocale_r>

0000a0d0 <_lseek_r>:
    a0d0:	defffd04 	addi	sp,sp,-12
    a0d4:	dc000015 	stw	r16,0(sp)
    a0d8:	040000b4 	movhi	r16,2
    a0dc:	8421be04 	addi	r16,r16,-30984
    a0e0:	dc400115 	stw	r17,4(sp)
    a0e4:	80000015 	stw	zero,0(r16)
    a0e8:	2023883a 	mov	r17,r4
    a0ec:	2809883a 	mov	r4,r5
    a0f0:	300b883a 	mov	r5,r6
    a0f4:	380d883a 	mov	r6,r7
    a0f8:	dfc00215 	stw	ra,8(sp)
    a0fc:	0011e200 	call	11e20 <lseek>
    a100:	1007883a 	mov	r3,r2
    a104:	00bfffc4 	movi	r2,-1
    a108:	18800626 	beq	r3,r2,a124 <_lseek_r+0x54>
    a10c:	1805883a 	mov	r2,r3
    a110:	dfc00217 	ldw	ra,8(sp)
    a114:	dc400117 	ldw	r17,4(sp)
    a118:	dc000017 	ldw	r16,0(sp)
    a11c:	dec00304 	addi	sp,sp,12
    a120:	f800283a 	ret
    a124:	80800017 	ldw	r2,0(r16)
    a128:	103ff826 	beq	r2,zero,a10c <_lseek_r+0x3c>
    a12c:	88800015 	stw	r2,0(r17)
    a130:	1805883a 	mov	r2,r3
    a134:	dfc00217 	ldw	ra,8(sp)
    a138:	dc400117 	ldw	r17,4(sp)
    a13c:	dc000017 	ldw	r16,0(sp)
    a140:	dec00304 	addi	sp,sp,12
    a144:	f800283a 	ret

0000a148 <__smakebuf_r>:
    a148:	2880030b 	ldhu	r2,12(r5)
    a14c:	deffed04 	addi	sp,sp,-76
    a150:	dc401015 	stw	r17,64(sp)
    a154:	1080008c 	andi	r2,r2,2
    a158:	dc000f15 	stw	r16,60(sp)
    a15c:	dfc01215 	stw	ra,72(sp)
    a160:	dc801115 	stw	r18,68(sp)
    a164:	2821883a 	mov	r16,r5
    a168:	2023883a 	mov	r17,r4
    a16c:	10000b26 	beq	r2,zero,a19c <__smakebuf_r+0x54>
    a170:	28c010c4 	addi	r3,r5,67
    a174:	00800044 	movi	r2,1
    a178:	28800515 	stw	r2,20(r5)
    a17c:	28c00415 	stw	r3,16(r5)
    a180:	28c00015 	stw	r3,0(r5)
    a184:	dfc01217 	ldw	ra,72(sp)
    a188:	dc801117 	ldw	r18,68(sp)
    a18c:	dc401017 	ldw	r17,64(sp)
    a190:	dc000f17 	ldw	r16,60(sp)
    a194:	dec01304 	addi	sp,sp,76
    a198:	f800283a 	ret
    a19c:	2940038f 	ldh	r5,14(r5)
    a1a0:	28002116 	blt	r5,zero,a228 <__smakebuf_r+0xe0>
    a1a4:	d80d883a 	mov	r6,sp
    a1a8:	000e4040 	call	e404 <_fstat_r>
    a1ac:	10001e16 	blt	r2,zero,a228 <__smakebuf_r+0xe0>
    a1b0:	d8800117 	ldw	r2,4(sp)
    a1b4:	00e00014 	movui	r3,32768
    a1b8:	113c000c 	andi	r4,r2,61440
    a1bc:	20c03126 	beq	r4,r3,a284 <__smakebuf_r+0x13c>
    a1c0:	8080030b 	ldhu	r2,12(r16)
    a1c4:	00c80004 	movi	r3,8192
    a1c8:	10820014 	ori	r2,r2,2048
    a1cc:	8080030d 	sth	r2,12(r16)
    a1d0:	20c01e26 	beq	r4,r3,a24c <__smakebuf_r+0x104>
    a1d4:	04810004 	movi	r18,1024
    a1d8:	8809883a 	mov	r4,r17
    a1dc:	900b883a 	mov	r5,r18
    a1e0:	0002e600 	call	2e60 <_malloc_r>
    a1e4:	1009883a 	mov	r4,r2
    a1e8:	10003126 	beq	r2,zero,a2b0 <__smakebuf_r+0x168>
    a1ec:	80c0030b 	ldhu	r3,12(r16)
    a1f0:	00800034 	movhi	r2,0
    a1f4:	108adb04 	addi	r2,r2,11116
    a1f8:	88800f15 	stw	r2,60(r17)
    a1fc:	18c02014 	ori	r3,r3,128
    a200:	84800515 	stw	r18,20(r16)
    a204:	80c0030d 	sth	r3,12(r16)
    a208:	81000415 	stw	r4,16(r16)
    a20c:	81000015 	stw	r4,0(r16)
    a210:	dfc01217 	ldw	ra,72(sp)
    a214:	dc801117 	ldw	r18,68(sp)
    a218:	dc401017 	ldw	r17,64(sp)
    a21c:	dc000f17 	ldw	r16,60(sp)
    a220:	dec01304 	addi	sp,sp,76
    a224:	f800283a 	ret
    a228:	80c0030b 	ldhu	r3,12(r16)
    a22c:	1880200c 	andi	r2,r3,128
    a230:	10000426 	beq	r2,zero,a244 <__smakebuf_r+0xfc>
    a234:	04801004 	movi	r18,64
    a238:	18820014 	ori	r2,r3,2048
    a23c:	8080030d 	sth	r2,12(r16)
    a240:	003fe506 	br	a1d8 <__smakebuf_r+0x90>
    a244:	04810004 	movi	r18,1024
    a248:	003ffb06 	br	a238 <__smakebuf_r+0xf0>
    a24c:	8140038f 	ldh	r5,14(r16)
    a250:	8809883a 	mov	r4,r17
    a254:	000f0000 	call	f000 <_isatty_r>
    a258:	103fde26 	beq	r2,zero,a1d4 <__smakebuf_r+0x8c>
    a25c:	8080030b 	ldhu	r2,12(r16)
    a260:	80c010c4 	addi	r3,r16,67
    a264:	04810004 	movi	r18,1024
    a268:	10800054 	ori	r2,r2,1
    a26c:	8080030d 	sth	r2,12(r16)
    a270:	00800044 	movi	r2,1
    a274:	80c00415 	stw	r3,16(r16)
    a278:	80800515 	stw	r2,20(r16)
    a27c:	80c00015 	stw	r3,0(r16)
    a280:	003fd506 	br	a1d8 <__smakebuf_r+0x90>
    a284:	80c00a17 	ldw	r3,40(r16)
    a288:	00800034 	movhi	r2,0
    a28c:	108f5304 	addi	r2,r2,15692
    a290:	18bfcb1e 	bne	r3,r2,a1c0 <__smakebuf_r+0x78>
    a294:	8080030b 	ldhu	r2,12(r16)
    a298:	00c10004 	movi	r3,1024
    a29c:	1825883a 	mov	r18,r3
    a2a0:	10c4b03a 	or	r2,r2,r3
    a2a4:	8080030d 	sth	r2,12(r16)
    a2a8:	80c01315 	stw	r3,76(r16)
    a2ac:	003fca06 	br	a1d8 <__smakebuf_r+0x90>
    a2b0:	8100030b 	ldhu	r4,12(r16)
    a2b4:	2080800c 	andi	r2,r4,512
    a2b8:	103fb21e 	bne	r2,zero,a184 <__smakebuf_r+0x3c>
    a2bc:	80c010c4 	addi	r3,r16,67
    a2c0:	21000094 	ori	r4,r4,2
    a2c4:	00800044 	movi	r2,1
    a2c8:	80800515 	stw	r2,20(r16)
    a2cc:	8100030d 	sth	r4,12(r16)
    a2d0:	80c00415 	stw	r3,16(r16)
    a2d4:	80c00015 	stw	r3,0(r16)
    a2d8:	003faa06 	br	a184 <__smakebuf_r+0x3c>

0000a2dc <_mbrtowc_r>:
    a2dc:	defffc04 	addi	sp,sp,-16
    a2e0:	dc400215 	stw	r17,8(sp)
    a2e4:	dc000115 	stw	r16,4(sp)
    a2e8:	dfc00315 	stw	ra,12(sp)
    a2ec:	dc000417 	ldw	r16,16(sp)
    a2f0:	2023883a 	mov	r17,r4
    a2f4:	30000f26 	beq	r6,zero,a334 <_mbrtowc_r+0x58>
    a2f8:	dc000015 	stw	r16,0(sp)
    a2fc:	000a39c0 	call	a39c <_mbtowc_r>
    a300:	1007883a 	mov	r3,r2
    a304:	00bfffc4 	movi	r2,-1
    a308:	1809883a 	mov	r4,r3
    a30c:	1880111e 	bne	r3,r2,a354 <_mbrtowc_r+0x78>
    a310:	80000015 	stw	zero,0(r16)
    a314:	00802284 	movi	r2,138
    a318:	88800015 	stw	r2,0(r17)
    a31c:	2005883a 	mov	r2,r4
    a320:	dfc00317 	ldw	ra,12(sp)
    a324:	dc400217 	ldw	r17,8(sp)
    a328:	dc000117 	ldw	r16,4(sp)
    a32c:	dec00404 	addi	sp,sp,16
    a330:	f800283a 	ret
    a334:	000b883a 	mov	r5,zero
    a338:	01800074 	movhi	r6,1
    a33c:	31935604 	addi	r6,r6,19800
    a340:	01c00044 	movi	r7,1
    a344:	dc000015 	stw	r16,0(sp)
    a348:	000a39c0 	call	a39c <_mbtowc_r>
    a34c:	1007883a 	mov	r3,r2
    a350:	003fec06 	br	a304 <_mbrtowc_r+0x28>
    a354:	1809883a 	mov	r4,r3
    a358:	003ff006 	br	a31c <_mbrtowc_r+0x40>

0000a35c <mbrtowc>:
    a35c:	00800074 	movhi	r2,1
    a360:	109ae204 	addi	r2,r2,27528
    a364:	2017883a 	mov	r11,r4
    a368:	11000017 	ldw	r4,0(r2)
    a36c:	defffe04 	addi	sp,sp,-8
    a370:	3013883a 	mov	r9,r6
    a374:	2805883a 	mov	r2,r5
    a378:	d9c00015 	stw	r7,0(sp)
    a37c:	580b883a 	mov	r5,r11
    a380:	100d883a 	mov	r6,r2
    a384:	480f883a 	mov	r7,r9
    a388:	dfc00115 	stw	ra,4(sp)
    a38c:	000a2dc0 	call	a2dc <_mbrtowc_r>
    a390:	dfc00117 	ldw	ra,4(sp)
    a394:	dec00204 	addi	sp,sp,8
    a398:	f800283a 	ret

0000a39c <_mbtowc_r>:
    a39c:	deffff04 	addi	sp,sp,-4
    a3a0:	0005883a 	mov	r2,zero
    a3a4:	28000326 	beq	r5,zero,a3b4 <_mbtowc_r+0x18>
    a3a8:	3000041e 	bne	r6,zero,a3bc <_mbtowc_r+0x20>
    a3ac:	dec00104 	addi	sp,sp,4
    a3b0:	f800283a 	ret
    a3b4:	d80b883a 	mov	r5,sp
    a3b8:	303ffc26 	beq	r6,zero,a3ac <_mbtowc_r+0x10>
    a3bc:	00bfff84 	movi	r2,-2
    a3c0:	383ffa26 	beq	r7,zero,a3ac <_mbtowc_r+0x10>
    a3c4:	30800003 	ldbu	r2,0(r6)
    a3c8:	28800015 	stw	r2,0(r5)
    a3cc:	30c00003 	ldbu	r3,0(r6)
    a3d0:	1804c03a 	cmpne	r2,r3,zero
    a3d4:	dec00104 	addi	sp,sp,4
    a3d8:	f800283a 	ret

0000a3dc <memmove>:
    a3dc:	2807883a 	mov	r3,r5
    a3e0:	2011883a 	mov	r8,r4
    a3e4:	29000c2e 	bgeu	r5,r4,a418 <memmove+0x3c>
    a3e8:	298f883a 	add	r7,r5,r6
    a3ec:	21c00a2e 	bgeu	r4,r7,a418 <memmove+0x3c>
    a3f0:	30000726 	beq	r6,zero,a410 <memmove+0x34>
    a3f4:	2187883a 	add	r3,r4,r6
    a3f8:	198dc83a 	sub	r6,r3,r6
    a3fc:	39ffffc4 	addi	r7,r7,-1
    a400:	38800003 	ldbu	r2,0(r7)
    a404:	18ffffc4 	addi	r3,r3,-1
    a408:	18800005 	stb	r2,0(r3)
    a40c:	19bffb1e 	bne	r3,r6,a3fc <memmove+0x20>
    a410:	2005883a 	mov	r2,r4
    a414:	f800283a 	ret
    a418:	01c003c4 	movi	r7,15
    a41c:	39800a36 	bltu	r7,r6,a448 <memmove+0x6c>
    a420:	303ffb26 	beq	r6,zero,a410 <memmove+0x34>
    a424:	400f883a 	mov	r7,r8
    a428:	320d883a 	add	r6,r6,r8
    a42c:	28800003 	ldbu	r2,0(r5)
    a430:	29400044 	addi	r5,r5,1
    a434:	38800005 	stb	r2,0(r7)
    a438:	39c00044 	addi	r7,r7,1
    a43c:	39bffb1e 	bne	r7,r6,a42c <memmove+0x50>
    a440:	2005883a 	mov	r2,r4
    a444:	f800283a 	ret
    a448:	1904b03a 	or	r2,r3,r4
    a44c:	108000cc 	andi	r2,r2,3
    a450:	103ff31e 	bne	r2,zero,a420 <memmove+0x44>
    a454:	3811883a 	mov	r8,r7
    a458:	180b883a 	mov	r5,r3
    a45c:	200f883a 	mov	r7,r4
    a460:	28c00017 	ldw	r3,0(r5)
    a464:	31bffc04 	addi	r6,r6,-16
    a468:	38c00015 	stw	r3,0(r7)
    a46c:	28800117 	ldw	r2,4(r5)
    a470:	38800115 	stw	r2,4(r7)
    a474:	28c00217 	ldw	r3,8(r5)
    a478:	38c00215 	stw	r3,8(r7)
    a47c:	28800317 	ldw	r2,12(r5)
    a480:	29400404 	addi	r5,r5,16
    a484:	38800315 	stw	r2,12(r7)
    a488:	39c00404 	addi	r7,r7,16
    a48c:	41bff436 	bltu	r8,r6,a460 <memmove+0x84>
    a490:	008000c4 	movi	r2,3
    a494:	1180072e 	bgeu	r2,r6,a4b4 <memmove+0xd8>
    a498:	1007883a 	mov	r3,r2
    a49c:	28800017 	ldw	r2,0(r5)
    a4a0:	31bfff04 	addi	r6,r6,-4
    a4a4:	29400104 	addi	r5,r5,4
    a4a8:	38800015 	stw	r2,0(r7)
    a4ac:	39c00104 	addi	r7,r7,4
    a4b0:	19bffa36 	bltu	r3,r6,a49c <memmove+0xc0>
    a4b4:	3811883a 	mov	r8,r7
    a4b8:	003fd906 	br	a420 <memmove+0x44>

0000a4bc <_Bfree>:
    a4bc:	28000826 	beq	r5,zero,a4e0 <_Bfree+0x24>
    a4c0:	28800117 	ldw	r2,4(r5)
    a4c4:	21001317 	ldw	r4,76(r4)
    a4c8:	1085883a 	add	r2,r2,r2
    a4cc:	1085883a 	add	r2,r2,r2
    a4d0:	1105883a 	add	r2,r2,r4
    a4d4:	10c00017 	ldw	r3,0(r2)
    a4d8:	28c00015 	stw	r3,0(r5)
    a4dc:	11400015 	stw	r5,0(r2)
    a4e0:	f800283a 	ret

0000a4e4 <__hi0bits>:
    a4e4:	20bfffec 	andhi	r2,r4,65535
    a4e8:	10001426 	beq	r2,zero,a53c <__hi0bits+0x58>
    a4ec:	0007883a 	mov	r3,zero
    a4f0:	20bfc02c 	andhi	r2,r4,65280
    a4f4:	1000021e 	bne	r2,zero,a500 <__hi0bits+0x1c>
    a4f8:	2008923a 	slli	r4,r4,8
    a4fc:	18c00204 	addi	r3,r3,8
    a500:	20bc002c 	andhi	r2,r4,61440
    a504:	1000021e 	bne	r2,zero,a510 <__hi0bits+0x2c>
    a508:	2008913a 	slli	r4,r4,4
    a50c:	18c00104 	addi	r3,r3,4
    a510:	20b0002c 	andhi	r2,r4,49152
    a514:	1000031e 	bne	r2,zero,a524 <__hi0bits+0x40>
    a518:	2105883a 	add	r2,r4,r4
    a51c:	18c00084 	addi	r3,r3,2
    a520:	1089883a 	add	r4,r2,r2
    a524:	20000316 	blt	r4,zero,a534 <__hi0bits+0x50>
    a528:	2090002c 	andhi	r2,r4,16384
    a52c:	10000626 	beq	r2,zero,a548 <__hi0bits+0x64>
    a530:	18c00044 	addi	r3,r3,1
    a534:	1805883a 	mov	r2,r3
    a538:	f800283a 	ret
    a53c:	2008943a 	slli	r4,r4,16
    a540:	00c00404 	movi	r3,16
    a544:	003fea06 	br	a4f0 <__hi0bits+0xc>
    a548:	00c00804 	movi	r3,32
    a54c:	1805883a 	mov	r2,r3
    a550:	f800283a 	ret

0000a554 <__lo0bits>:
    a554:	20c00017 	ldw	r3,0(r4)
    a558:	188001cc 	andi	r2,r3,7
    a55c:	10000a26 	beq	r2,zero,a588 <__lo0bits+0x34>
    a560:	1880004c 	andi	r2,r3,1
    a564:	1005003a 	cmpeq	r2,r2,zero
    a568:	10002126 	beq	r2,zero,a5f0 <__lo0bits+0x9c>
    a56c:	1880008c 	andi	r2,r3,2
    a570:	1000251e 	bne	r2,zero,a608 <__lo0bits+0xb4>
    a574:	1804d0ba 	srli	r2,r3,2
    a578:	01400084 	movi	r5,2
    a57c:	20800015 	stw	r2,0(r4)
    a580:	2805883a 	mov	r2,r5
    a584:	f800283a 	ret
    a588:	18bfffcc 	andi	r2,r3,65535
    a58c:	10001526 	beq	r2,zero,a5e4 <__lo0bits+0x90>
    a590:	000b883a 	mov	r5,zero
    a594:	18803fcc 	andi	r2,r3,255
    a598:	1000021e 	bne	r2,zero,a5a4 <__lo0bits+0x50>
    a59c:	1806d23a 	srli	r3,r3,8
    a5a0:	29400204 	addi	r5,r5,8
    a5a4:	188003cc 	andi	r2,r3,15
    a5a8:	1000021e 	bne	r2,zero,a5b4 <__lo0bits+0x60>
    a5ac:	1806d13a 	srli	r3,r3,4
    a5b0:	29400104 	addi	r5,r5,4
    a5b4:	188000cc 	andi	r2,r3,3
    a5b8:	1000021e 	bne	r2,zero,a5c4 <__lo0bits+0x70>
    a5bc:	1806d0ba 	srli	r3,r3,2
    a5c0:	29400084 	addi	r5,r5,2
    a5c4:	1880004c 	andi	r2,r3,1
    a5c8:	1000031e 	bne	r2,zero,a5d8 <__lo0bits+0x84>
    a5cc:	1806d07a 	srli	r3,r3,1
    a5d0:	18000a26 	beq	r3,zero,a5fc <__lo0bits+0xa8>
    a5d4:	29400044 	addi	r5,r5,1
    a5d8:	2805883a 	mov	r2,r5
    a5dc:	20c00015 	stw	r3,0(r4)
    a5e0:	f800283a 	ret
    a5e4:	1806d43a 	srli	r3,r3,16
    a5e8:	01400404 	movi	r5,16
    a5ec:	003fe906 	br	a594 <__lo0bits+0x40>
    a5f0:	000b883a 	mov	r5,zero
    a5f4:	2805883a 	mov	r2,r5
    a5f8:	f800283a 	ret
    a5fc:	01400804 	movi	r5,32
    a600:	2805883a 	mov	r2,r5
    a604:	f800283a 	ret
    a608:	1804d07a 	srli	r2,r3,1
    a60c:	01400044 	movi	r5,1
    a610:	20800015 	stw	r2,0(r4)
    a614:	003fda06 	br	a580 <__lo0bits+0x2c>

0000a618 <__mcmp>:
    a618:	20800417 	ldw	r2,16(r4)
    a61c:	28c00417 	ldw	r3,16(r5)
    a620:	10cfc83a 	sub	r7,r2,r3
    a624:	38000c1e 	bne	r7,zero,a658 <__mcmp+0x40>
    a628:	18c5883a 	add	r2,r3,r3
    a62c:	1085883a 	add	r2,r2,r2
    a630:	10c00504 	addi	r3,r2,20
    a634:	21000504 	addi	r4,r4,20
    a638:	28cb883a 	add	r5,r5,r3
    a63c:	2085883a 	add	r2,r4,r2
    a640:	10bfff04 	addi	r2,r2,-4
    a644:	297fff04 	addi	r5,r5,-4
    a648:	11800017 	ldw	r6,0(r2)
    a64c:	28c00017 	ldw	r3,0(r5)
    a650:	30c0031e 	bne	r6,r3,a660 <__mcmp+0x48>
    a654:	20bffa36 	bltu	r4,r2,a640 <__mcmp+0x28>
    a658:	3805883a 	mov	r2,r7
    a65c:	f800283a 	ret
    a660:	30c00336 	bltu	r6,r3,a670 <__mcmp+0x58>
    a664:	01c00044 	movi	r7,1
    a668:	3805883a 	mov	r2,r7
    a66c:	f800283a 	ret
    a670:	01ffffc4 	movi	r7,-1
    a674:	003ff806 	br	a658 <__mcmp+0x40>

0000a678 <__ulp>:
    a678:	295ffc2c 	andhi	r5,r5,32752
    a67c:	013f3034 	movhi	r4,64704
    a680:	290b883a 	add	r5,r5,r4
    a684:	0145c83a 	sub	r2,zero,r5
    a688:	1007d53a 	srai	r3,r2,20
    a68c:	000d883a 	mov	r6,zero
    a690:	0140040e 	bge	zero,r5,a6a4 <__ulp+0x2c>
    a694:	280f883a 	mov	r7,r5
    a698:	3807883a 	mov	r3,r7
    a69c:	3005883a 	mov	r2,r6
    a6a0:	f800283a 	ret
    a6a4:	008004c4 	movi	r2,19
    a6a8:	193ffb04 	addi	r4,r3,-20
    a6ac:	10c00c0e 	bge	r2,r3,a6e0 <__ulp+0x68>
    a6b0:	008007c4 	movi	r2,31
    a6b4:	1107c83a 	sub	r3,r2,r4
    a6b8:	00800784 	movi	r2,30
    a6bc:	01400044 	movi	r5,1
    a6c0:	11000216 	blt	r2,r4,a6cc <__ulp+0x54>
    a6c4:	00800044 	movi	r2,1
    a6c8:	10ca983a 	sll	r5,r2,r3
    a6cc:	000f883a 	mov	r7,zero
    a6d0:	280d883a 	mov	r6,r5
    a6d4:	3807883a 	mov	r3,r7
    a6d8:	3005883a 	mov	r2,r6
    a6dc:	f800283a 	ret
    a6e0:	00800234 	movhi	r2,8
    a6e4:	10cfd83a 	sra	r7,r2,r3
    a6e8:	000d883a 	mov	r6,zero
    a6ec:	3005883a 	mov	r2,r6
    a6f0:	3807883a 	mov	r3,r7
    a6f4:	f800283a 	ret

0000a6f8 <__b2d>:
    a6f8:	20800417 	ldw	r2,16(r4)
    a6fc:	defff904 	addi	sp,sp,-28
    a700:	dd000415 	stw	r20,16(sp)
    a704:	1085883a 	add	r2,r2,r2
    a708:	25000504 	addi	r20,r4,20
    a70c:	1085883a 	add	r2,r2,r2
    a710:	dc000015 	stw	r16,0(sp)
    a714:	a0a1883a 	add	r16,r20,r2
    a718:	dd400515 	stw	r21,20(sp)
    a71c:	857fff17 	ldw	r21,-4(r16)
    a720:	dc400115 	stw	r17,4(sp)
    a724:	dfc00615 	stw	ra,24(sp)
    a728:	a809883a 	mov	r4,r21
    a72c:	2823883a 	mov	r17,r5
    a730:	dcc00315 	stw	r19,12(sp)
    a734:	dc800215 	stw	r18,8(sp)
    a738:	000a4e40 	call	a4e4 <__hi0bits>
    a73c:	100b883a 	mov	r5,r2
    a740:	00800804 	movi	r2,32
    a744:	1145c83a 	sub	r2,r2,r5
    a748:	88800015 	stw	r2,0(r17)
    a74c:	00800284 	movi	r2,10
    a750:	80ffff04 	addi	r3,r16,-4
    a754:	11401416 	blt	r2,r5,a7a8 <__b2d+0xb0>
    a758:	008002c4 	movi	r2,11
    a75c:	1149c83a 	sub	r4,r2,r5
    a760:	a0c02736 	bltu	r20,r3,a800 <__b2d+0x108>
    a764:	000d883a 	mov	r6,zero
    a768:	28800544 	addi	r2,r5,21
    a76c:	a906d83a 	srl	r3,r21,r4
    a770:	a884983a 	sll	r2,r21,r2
    a774:	1ccffc34 	orhi	r19,r3,16368
    a778:	11a4b03a 	or	r18,r2,r6
    a77c:	9005883a 	mov	r2,r18
    a780:	9807883a 	mov	r3,r19
    a784:	dfc00617 	ldw	ra,24(sp)
    a788:	dd400517 	ldw	r21,20(sp)
    a78c:	dd000417 	ldw	r20,16(sp)
    a790:	dcc00317 	ldw	r19,12(sp)
    a794:	dc800217 	ldw	r18,8(sp)
    a798:	dc400117 	ldw	r17,4(sp)
    a79c:	dc000017 	ldw	r16,0(sp)
    a7a0:	dec00704 	addi	sp,sp,28
    a7a4:	f800283a 	ret
    a7a8:	a0c00e36 	bltu	r20,r3,a7e4 <__b2d+0xec>
    a7ac:	293ffd44 	addi	r4,r5,-11
    a7b0:	000d883a 	mov	r6,zero
    a7b4:	20000f26 	beq	r4,zero,a7f4 <__b2d+0xfc>
    a7b8:	00800804 	movi	r2,32
    a7bc:	110bc83a 	sub	r5,r2,r4
    a7c0:	a0c01236 	bltu	r20,r3,a80c <__b2d+0x114>
    a7c4:	000f883a 	mov	r7,zero
    a7c8:	a904983a 	sll	r2,r21,r4
    a7cc:	3146d83a 	srl	r3,r6,r5
    a7d0:	3108983a 	sll	r4,r6,r4
    a7d4:	108ffc34 	orhi	r2,r2,16368
    a7d8:	18a6b03a 	or	r19,r3,r2
    a7dc:	3924b03a 	or	r18,r7,r4
    a7e0:	003fe606 	br	a77c <__b2d+0x84>
    a7e4:	293ffd44 	addi	r4,r5,-11
    a7e8:	81bffe17 	ldw	r6,-8(r16)
    a7ec:	80fffe04 	addi	r3,r16,-8
    a7f0:	203ff11e 	bne	r4,zero,a7b8 <__b2d+0xc0>
    a7f4:	accffc34 	orhi	r19,r21,16368
    a7f8:	3025883a 	mov	r18,r6
    a7fc:	003fdf06 	br	a77c <__b2d+0x84>
    a800:	18bfff17 	ldw	r2,-4(r3)
    a804:	110cd83a 	srl	r6,r2,r4
    a808:	003fd706 	br	a768 <__b2d+0x70>
    a80c:	18bfff17 	ldw	r2,-4(r3)
    a810:	114ed83a 	srl	r7,r2,r5
    a814:	003fec06 	br	a7c8 <__b2d+0xd0>

0000a818 <__ratio>:
    a818:	defff904 	addi	sp,sp,-28
    a81c:	dc400215 	stw	r17,8(sp)
    a820:	2823883a 	mov	r17,r5
    a824:	d80b883a 	mov	r5,sp
    a828:	dfc00615 	stw	ra,24(sp)
    a82c:	dd000515 	stw	r20,20(sp)
    a830:	dcc00415 	stw	r19,16(sp)
    a834:	dc800315 	stw	r18,12(sp)
    a838:	2025883a 	mov	r18,r4
    a83c:	000a6f80 	call	a6f8 <__b2d>
    a840:	8809883a 	mov	r4,r17
    a844:	d9400104 	addi	r5,sp,4
    a848:	1027883a 	mov	r19,r2
    a84c:	1829883a 	mov	r20,r3
    a850:	000a6f80 	call	a6f8 <__b2d>
    a854:	89000417 	ldw	r4,16(r17)
    a858:	91c00417 	ldw	r7,16(r18)
    a85c:	d9800117 	ldw	r6,4(sp)
    a860:	180b883a 	mov	r5,r3
    a864:	390fc83a 	sub	r7,r7,r4
    a868:	1009883a 	mov	r4,r2
    a86c:	d8800017 	ldw	r2,0(sp)
    a870:	380e917a 	slli	r7,r7,5
    a874:	2011883a 	mov	r8,r4
    a878:	1185c83a 	sub	r2,r2,r6
    a87c:	11c5883a 	add	r2,r2,r7
    a880:	1006953a 	slli	r3,r2,20
    a884:	2813883a 	mov	r9,r5
    a888:	00800d0e 	bge	zero,r2,a8c0 <__ratio+0xa8>
    a88c:	1d29883a 	add	r20,r3,r20
    a890:	a00b883a 	mov	r5,r20
    a894:	480f883a 	mov	r7,r9
    a898:	9809883a 	mov	r4,r19
    a89c:	400d883a 	mov	r6,r8
    a8a0:	00107680 	call	10768 <__divdf3>
    a8a4:	dfc00617 	ldw	ra,24(sp)
    a8a8:	dd000517 	ldw	r20,20(sp)
    a8ac:	dcc00417 	ldw	r19,16(sp)
    a8b0:	dc800317 	ldw	r18,12(sp)
    a8b4:	dc400217 	ldw	r17,8(sp)
    a8b8:	dec00704 	addi	sp,sp,28
    a8bc:	f800283a 	ret
    a8c0:	28d3c83a 	sub	r9,r5,r3
    a8c4:	003ff206 	br	a890 <__ratio+0x78>

0000a8c8 <_mprec_log10>:
    a8c8:	defffe04 	addi	sp,sp,-8
    a8cc:	008005c4 	movi	r2,23
    a8d0:	dc000015 	stw	r16,0(sp)
    a8d4:	dfc00115 	stw	ra,4(sp)
    a8d8:	2021883a 	mov	r16,r4
    a8dc:	11000c16 	blt	r2,r4,a910 <_mprec_log10+0x48>
    a8e0:	200490fa 	slli	r2,r4,3
    a8e4:	00c00074 	movhi	r3,1
    a8e8:	18d38504 	addi	r3,r3,19988
    a8ec:	10c5883a 	add	r2,r2,r3
    a8f0:	12400117 	ldw	r9,4(r2)
    a8f4:	12000017 	ldw	r8,0(r2)
    a8f8:	4807883a 	mov	r3,r9
    a8fc:	4005883a 	mov	r2,r8
    a900:	dfc00117 	ldw	ra,4(sp)
    a904:	dc000017 	ldw	r16,0(sp)
    a908:	dec00204 	addi	sp,sp,8
    a90c:	f800283a 	ret
    a910:	0011883a 	mov	r8,zero
    a914:	024ffc34 	movhi	r9,16368
    a918:	0005883a 	mov	r2,zero
    a91c:	00d00934 	movhi	r3,16420
    a920:	480b883a 	mov	r5,r9
    a924:	4009883a 	mov	r4,r8
    a928:	180f883a 	mov	r7,r3
    a92c:	100d883a 	mov	r6,r2
    a930:	00103a40 	call	103a4 <__muldf3>
    a934:	843fffc4 	addi	r16,r16,-1
    a938:	1011883a 	mov	r8,r2
    a93c:	1813883a 	mov	r9,r3
    a940:	803ff51e 	bne	r16,zero,a918 <_mprec_log10+0x50>
    a944:	4005883a 	mov	r2,r8
    a948:	4807883a 	mov	r3,r9
    a94c:	dfc00117 	ldw	ra,4(sp)
    a950:	dc000017 	ldw	r16,0(sp)
    a954:	dec00204 	addi	sp,sp,8
    a958:	f800283a 	ret

0000a95c <__copybits>:
    a95c:	297fffc4 	addi	r5,r5,-1
    a960:	30800417 	ldw	r2,16(r6)
    a964:	280bd17a 	srai	r5,r5,5
    a968:	31800504 	addi	r6,r6,20
    a96c:	1085883a 	add	r2,r2,r2
    a970:	294b883a 	add	r5,r5,r5
    a974:	294b883a 	add	r5,r5,r5
    a978:	1085883a 	add	r2,r2,r2
    a97c:	290b883a 	add	r5,r5,r4
    a980:	3087883a 	add	r3,r6,r2
    a984:	29400104 	addi	r5,r5,4
    a988:	30c0052e 	bgeu	r6,r3,a9a0 <__copybits+0x44>
    a98c:	30800017 	ldw	r2,0(r6)
    a990:	31800104 	addi	r6,r6,4
    a994:	20800015 	stw	r2,0(r4)
    a998:	21000104 	addi	r4,r4,4
    a99c:	30fffb36 	bltu	r6,r3,a98c <__copybits+0x30>
    a9a0:	2140032e 	bgeu	r4,r5,a9b0 <__copybits+0x54>
    a9a4:	20000015 	stw	zero,0(r4)
    a9a8:	21000104 	addi	r4,r4,4
    a9ac:	217ffd36 	bltu	r4,r5,a9a4 <__copybits+0x48>
    a9b0:	f800283a 	ret

0000a9b4 <__any_on>:
    a9b4:	20800417 	ldw	r2,16(r4)
    a9b8:	2807d17a 	srai	r3,r5,5
    a9bc:	21000504 	addi	r4,r4,20
    a9c0:	10c00d0e 	bge	r2,r3,a9f8 <__any_on+0x44>
    a9c4:	1085883a 	add	r2,r2,r2
    a9c8:	1085883a 	add	r2,r2,r2
    a9cc:	208d883a 	add	r6,r4,r2
    a9d0:	2180182e 	bgeu	r4,r6,aa34 <__any_on+0x80>
    a9d4:	30bfff17 	ldw	r2,-4(r6)
    a9d8:	30ffff04 	addi	r3,r6,-4
    a9dc:	1000041e 	bne	r2,zero,a9f0 <__any_on+0x3c>
    a9e0:	20c0142e 	bgeu	r4,r3,aa34 <__any_on+0x80>
    a9e4:	18ffff04 	addi	r3,r3,-4
    a9e8:	18800017 	ldw	r2,0(r3)
    a9ec:	103ffc26 	beq	r2,zero,a9e0 <__any_on+0x2c>
    a9f0:	00800044 	movi	r2,1
    a9f4:	f800283a 	ret
    a9f8:	18800a0e 	bge	r3,r2,aa24 <__any_on+0x70>
    a9fc:	294007cc 	andi	r5,r5,31
    aa00:	28000826 	beq	r5,zero,aa24 <__any_on+0x70>
    aa04:	18c5883a 	add	r2,r3,r3
    aa08:	1085883a 	add	r2,r2,r2
    aa0c:	208d883a 	add	r6,r4,r2
    aa10:	30c00017 	ldw	r3,0(r6)
    aa14:	1944d83a 	srl	r2,r3,r5
    aa18:	1144983a 	sll	r2,r2,r5
    aa1c:	18bff41e 	bne	r3,r2,a9f0 <__any_on+0x3c>
    aa20:	003feb06 	br	a9d0 <__any_on+0x1c>
    aa24:	18c5883a 	add	r2,r3,r3
    aa28:	1085883a 	add	r2,r2,r2
    aa2c:	208d883a 	add	r6,r4,r2
    aa30:	003fe706 	br	a9d0 <__any_on+0x1c>
    aa34:	0005883a 	mov	r2,zero
    aa38:	f800283a 	ret

0000aa3c <_Balloc>:
    aa3c:	20c01317 	ldw	r3,76(r4)
    aa40:	defffb04 	addi	sp,sp,-20
    aa44:	dcc00315 	stw	r19,12(sp)
    aa48:	dc800215 	stw	r18,8(sp)
    aa4c:	dfc00415 	stw	ra,16(sp)
    aa50:	2825883a 	mov	r18,r5
    aa54:	dc400115 	stw	r17,4(sp)
    aa58:	dc000015 	stw	r16,0(sp)
    aa5c:	2027883a 	mov	r19,r4
    aa60:	01800404 	movi	r6,16
    aa64:	01400104 	movi	r5,4
    aa68:	18001726 	beq	r3,zero,aac8 <_Balloc+0x8c>
    aa6c:	01400044 	movi	r5,1
    aa70:	9485883a 	add	r2,r18,r18
    aa74:	2ca2983a 	sll	r17,r5,r18
    aa78:	1085883a 	add	r2,r2,r2
    aa7c:	10c7883a 	add	r3,r2,r3
    aa80:	1c000017 	ldw	r16,0(r3)
    aa84:	8c4d883a 	add	r6,r17,r17
    aa88:	318d883a 	add	r6,r6,r6
    aa8c:	9809883a 	mov	r4,r19
    aa90:	31800504 	addi	r6,r6,20
    aa94:	80001226 	beq	r16,zero,aae0 <_Balloc+0xa4>
    aa98:	80800017 	ldw	r2,0(r16)
    aa9c:	18800015 	stw	r2,0(r3)
    aaa0:	80000415 	stw	zero,16(r16)
    aaa4:	80000315 	stw	zero,12(r16)
    aaa8:	8005883a 	mov	r2,r16
    aaac:	dfc00417 	ldw	ra,16(sp)
    aab0:	dcc00317 	ldw	r19,12(sp)
    aab4:	dc800217 	ldw	r18,8(sp)
    aab8:	dc400117 	ldw	r17,4(sp)
    aabc:	dc000017 	ldw	r16,0(sp)
    aac0:	dec00504 	addi	sp,sp,20
    aac4:	f800283a 	ret
    aac8:	000e3500 	call	e350 <_calloc_r>
    aacc:	1007883a 	mov	r3,r2
    aad0:	0021883a 	mov	r16,zero
    aad4:	98801315 	stw	r2,76(r19)
    aad8:	103fe41e 	bne	r2,zero,aa6c <_Balloc+0x30>
    aadc:	003ff206 	br	aaa8 <_Balloc+0x6c>
    aae0:	000e3500 	call	e350 <_calloc_r>
    aae4:	103ff026 	beq	r2,zero,aaa8 <_Balloc+0x6c>
    aae8:	1021883a 	mov	r16,r2
    aaec:	14800115 	stw	r18,4(r2)
    aaf0:	14400215 	stw	r17,8(r2)
    aaf4:	003fea06 	br	aaa0 <_Balloc+0x64>

0000aaf8 <__d2b>:
    aaf8:	defff504 	addi	sp,sp,-44
    aafc:	dcc00515 	stw	r19,20(sp)
    ab00:	04c00044 	movi	r19,1
    ab04:	dc000215 	stw	r16,8(sp)
    ab08:	2821883a 	mov	r16,r5
    ab0c:	980b883a 	mov	r5,r19
    ab10:	ddc00915 	stw	r23,36(sp)
    ab14:	dd800815 	stw	r22,32(sp)
    ab18:	dd400715 	stw	r21,28(sp)
    ab1c:	dd000615 	stw	r20,24(sp)
    ab20:	dc800415 	stw	r18,16(sp)
    ab24:	dc400315 	stw	r17,12(sp)
    ab28:	dfc00a15 	stw	ra,40(sp)
    ab2c:	3023883a 	mov	r17,r6
    ab30:	382d883a 	mov	r22,r7
    ab34:	ddc00b17 	ldw	r23,44(sp)
    ab38:	000aa3c0 	call	aa3c <_Balloc>
    ab3c:	1025883a 	mov	r18,r2
    ab40:	00a00034 	movhi	r2,32768
    ab44:	10bfffc4 	addi	r2,r2,-1
    ab48:	8888703a 	and	r4,r17,r2
    ab4c:	202ad53a 	srli	r21,r4,20
    ab50:	00800434 	movhi	r2,16
    ab54:	10bfffc4 	addi	r2,r2,-1
    ab58:	8886703a 	and	r3,r17,r2
    ab5c:	a829003a 	cmpeq	r20,r21,zero
    ab60:	800b883a 	mov	r5,r16
    ab64:	d8c00115 	stw	r3,4(sp)
    ab68:	94000504 	addi	r16,r18,20
    ab6c:	a000021e 	bne	r20,zero,ab78 <__d2b+0x80>
    ab70:	18c00434 	orhi	r3,r3,16
    ab74:	d8c00115 	stw	r3,4(sp)
    ab78:	28002726 	beq	r5,zero,ac18 <__d2b+0x120>
    ab7c:	d809883a 	mov	r4,sp
    ab80:	d9400015 	stw	r5,0(sp)
    ab84:	000a5540 	call	a554 <__lo0bits>
    ab88:	100d883a 	mov	r6,r2
    ab8c:	10003526 	beq	r2,zero,ac64 <__d2b+0x16c>
    ab90:	d8c00117 	ldw	r3,4(sp)
    ab94:	00800804 	movi	r2,32
    ab98:	1185c83a 	sub	r2,r2,r6
    ab9c:	d9000017 	ldw	r4,0(sp)
    aba0:	1886983a 	sll	r3,r3,r2
    aba4:	1906b03a 	or	r3,r3,r4
    aba8:	90c00515 	stw	r3,20(r18)
    abac:	d8c00117 	ldw	r3,4(sp)
    abb0:	1986d83a 	srl	r3,r3,r6
    abb4:	d8c00115 	stw	r3,4(sp)
    abb8:	180b003a 	cmpeq	r5,r3,zero
    abbc:	00800084 	movi	r2,2
    abc0:	114bc83a 	sub	r5,r2,r5
    abc4:	80c00115 	stw	r3,4(r16)
    abc8:	91400415 	stw	r5,16(r18)
    abcc:	a0001a1e 	bne	r20,zero,ac38 <__d2b+0x140>
    abd0:	3545883a 	add	r2,r6,r21
    abd4:	10bef344 	addi	r2,r2,-1075
    abd8:	00c00d44 	movi	r3,53
    abdc:	b0800015 	stw	r2,0(r22)
    abe0:	1987c83a 	sub	r3,r3,r6
    abe4:	b8c00015 	stw	r3,0(r23)
    abe8:	9005883a 	mov	r2,r18
    abec:	dfc00a17 	ldw	ra,40(sp)
    abf0:	ddc00917 	ldw	r23,36(sp)
    abf4:	dd800817 	ldw	r22,32(sp)
    abf8:	dd400717 	ldw	r21,28(sp)
    abfc:	dd000617 	ldw	r20,24(sp)
    ac00:	dcc00517 	ldw	r19,20(sp)
    ac04:	dc800417 	ldw	r18,16(sp)
    ac08:	dc400317 	ldw	r17,12(sp)
    ac0c:	dc000217 	ldw	r16,8(sp)
    ac10:	dec00b04 	addi	sp,sp,44
    ac14:	f800283a 	ret
    ac18:	d9000104 	addi	r4,sp,4
    ac1c:	000a5540 	call	a554 <__lo0bits>
    ac20:	11800804 	addi	r6,r2,32
    ac24:	d8800117 	ldw	r2,4(sp)
    ac28:	94c00415 	stw	r19,16(r18)
    ac2c:	980b883a 	mov	r5,r19
    ac30:	90800515 	stw	r2,20(r18)
    ac34:	a03fe626 	beq	r20,zero,abd0 <__d2b+0xd8>
    ac38:	2945883a 	add	r2,r5,r5
    ac3c:	1085883a 	add	r2,r2,r2
    ac40:	1405883a 	add	r2,r2,r16
    ac44:	113fff17 	ldw	r4,-4(r2)
    ac48:	30fef384 	addi	r3,r6,-1074
    ac4c:	2820917a 	slli	r16,r5,5
    ac50:	b0c00015 	stw	r3,0(r22)
    ac54:	000a4e40 	call	a4e4 <__hi0bits>
    ac58:	80a1c83a 	sub	r16,r16,r2
    ac5c:	bc000015 	stw	r16,0(r23)
    ac60:	003fe106 	br	abe8 <__d2b+0xf0>
    ac64:	d8800017 	ldw	r2,0(sp)
    ac68:	90800515 	stw	r2,20(r18)
    ac6c:	d8c00117 	ldw	r3,4(sp)
    ac70:	003fd106 	br	abb8 <__d2b+0xc0>

0000ac74 <__mdiff>:
    ac74:	defffb04 	addi	sp,sp,-20
    ac78:	dc000015 	stw	r16,0(sp)
    ac7c:	2821883a 	mov	r16,r5
    ac80:	dc800215 	stw	r18,8(sp)
    ac84:	300b883a 	mov	r5,r6
    ac88:	2025883a 	mov	r18,r4
    ac8c:	8009883a 	mov	r4,r16
    ac90:	dc400115 	stw	r17,4(sp)
    ac94:	dfc00415 	stw	ra,16(sp)
    ac98:	dcc00315 	stw	r19,12(sp)
    ac9c:	3023883a 	mov	r17,r6
    aca0:	000a6180 	call	a618 <__mcmp>
    aca4:	10004226 	beq	r2,zero,adb0 <__mdiff+0x13c>
    aca8:	10005016 	blt	r2,zero,adec <__mdiff+0x178>
    acac:	0027883a 	mov	r19,zero
    acb0:	81400117 	ldw	r5,4(r16)
    acb4:	9009883a 	mov	r4,r18
    acb8:	000aa3c0 	call	aa3c <_Balloc>
    acbc:	1019883a 	mov	r12,r2
    acc0:	82800417 	ldw	r10,16(r16)
    acc4:	88800417 	ldw	r2,16(r17)
    acc8:	81800504 	addi	r6,r16,20
    accc:	5287883a 	add	r3,r10,r10
    acd0:	1085883a 	add	r2,r2,r2
    acd4:	18c7883a 	add	r3,r3,r3
    acd8:	1085883a 	add	r2,r2,r2
    acdc:	8a000504 	addi	r8,r17,20
    ace0:	64c00315 	stw	r19,12(r12)
    ace4:	30db883a 	add	r13,r6,r3
    ace8:	4097883a 	add	r11,r8,r2
    acec:	61c00504 	addi	r7,r12,20
    acf0:	0013883a 	mov	r9,zero
    acf4:	31000017 	ldw	r4,0(r6)
    acf8:	41400017 	ldw	r5,0(r8)
    acfc:	42000104 	addi	r8,r8,4
    ad00:	20bfffcc 	andi	r2,r4,65535
    ad04:	28ffffcc 	andi	r3,r5,65535
    ad08:	10c5c83a 	sub	r2,r2,r3
    ad0c:	1245883a 	add	r2,r2,r9
    ad10:	2008d43a 	srli	r4,r4,16
    ad14:	280ad43a 	srli	r5,r5,16
    ad18:	1007d43a 	srai	r3,r2,16
    ad1c:	3880000d 	sth	r2,0(r7)
    ad20:	2149c83a 	sub	r4,r4,r5
    ad24:	20c9883a 	add	r4,r4,r3
    ad28:	3900008d 	sth	r4,2(r7)
    ad2c:	31800104 	addi	r6,r6,4
    ad30:	39c00104 	addi	r7,r7,4
    ad34:	2013d43a 	srai	r9,r4,16
    ad38:	42ffee36 	bltu	r8,r11,acf4 <__mdiff+0x80>
    ad3c:	33400c2e 	bgeu	r6,r13,ad70 <__mdiff+0xfc>
    ad40:	30800017 	ldw	r2,0(r6)
    ad44:	31800104 	addi	r6,r6,4
    ad48:	10ffffcc 	andi	r3,r2,65535
    ad4c:	1a47883a 	add	r3,r3,r9
    ad50:	1004d43a 	srli	r2,r2,16
    ad54:	1809d43a 	srai	r4,r3,16
    ad58:	38c0000d 	sth	r3,0(r7)
    ad5c:	1105883a 	add	r2,r2,r4
    ad60:	3880008d 	sth	r2,2(r7)
    ad64:	1013d43a 	srai	r9,r2,16
    ad68:	39c00104 	addi	r7,r7,4
    ad6c:	337ff436 	bltu	r6,r13,ad40 <__mdiff+0xcc>
    ad70:	38bfff17 	ldw	r2,-4(r7)
    ad74:	38ffff04 	addi	r3,r7,-4
    ad78:	1000041e 	bne	r2,zero,ad8c <__mdiff+0x118>
    ad7c:	18ffff04 	addi	r3,r3,-4
    ad80:	18800017 	ldw	r2,0(r3)
    ad84:	52bfffc4 	addi	r10,r10,-1
    ad88:	103ffc26 	beq	r2,zero,ad7c <__mdiff+0x108>
    ad8c:	6005883a 	mov	r2,r12
    ad90:	62800415 	stw	r10,16(r12)
    ad94:	dfc00417 	ldw	ra,16(sp)
    ad98:	dcc00317 	ldw	r19,12(sp)
    ad9c:	dc800217 	ldw	r18,8(sp)
    ada0:	dc400117 	ldw	r17,4(sp)
    ada4:	dc000017 	ldw	r16,0(sp)
    ada8:	dec00504 	addi	sp,sp,20
    adac:	f800283a 	ret
    adb0:	9009883a 	mov	r4,r18
    adb4:	000b883a 	mov	r5,zero
    adb8:	000aa3c0 	call	aa3c <_Balloc>
    adbc:	1019883a 	mov	r12,r2
    adc0:	00800044 	movi	r2,1
    adc4:	60800415 	stw	r2,16(r12)
    adc8:	6005883a 	mov	r2,r12
    adcc:	60000515 	stw	zero,20(r12)
    add0:	dfc00417 	ldw	ra,16(sp)
    add4:	dcc00317 	ldw	r19,12(sp)
    add8:	dc800217 	ldw	r18,8(sp)
    addc:	dc400117 	ldw	r17,4(sp)
    ade0:	dc000017 	ldw	r16,0(sp)
    ade4:	dec00504 	addi	sp,sp,20
    ade8:	f800283a 	ret
    adec:	880d883a 	mov	r6,r17
    adf0:	04c00044 	movi	r19,1
    adf4:	8023883a 	mov	r17,r16
    adf8:	3021883a 	mov	r16,r6
    adfc:	003fac06 	br	acb0 <__mdiff+0x3c>

0000ae00 <__lshift>:
    ae00:	defff904 	addi	sp,sp,-28
    ae04:	28800417 	ldw	r2,16(r5)
    ae08:	dc000015 	stw	r16,0(sp)
    ae0c:	3021d17a 	srai	r16,r6,5
    ae10:	28c00217 	ldw	r3,8(r5)
    ae14:	10800044 	addi	r2,r2,1
    ae18:	dc400115 	stw	r17,4(sp)
    ae1c:	80a3883a 	add	r17,r16,r2
    ae20:	dd400515 	stw	r21,20(sp)
    ae24:	dd000415 	stw	r20,16(sp)
    ae28:	dc800215 	stw	r18,8(sp)
    ae2c:	dfc00615 	stw	ra,24(sp)
    ae30:	2825883a 	mov	r18,r5
    ae34:	dcc00315 	stw	r19,12(sp)
    ae38:	3029883a 	mov	r20,r6
    ae3c:	202b883a 	mov	r21,r4
    ae40:	29400117 	ldw	r5,4(r5)
    ae44:	1c40030e 	bge	r3,r17,ae54 <__lshift+0x54>
    ae48:	18c7883a 	add	r3,r3,r3
    ae4c:	29400044 	addi	r5,r5,1
    ae50:	1c7ffd16 	blt	r3,r17,ae48 <__lshift+0x48>
    ae54:	a809883a 	mov	r4,r21
    ae58:	000aa3c0 	call	aa3c <_Balloc>
    ae5c:	1027883a 	mov	r19,r2
    ae60:	11400504 	addi	r5,r2,20
    ae64:	0400090e 	bge	zero,r16,ae8c <__lshift+0x8c>
    ae68:	2805883a 	mov	r2,r5
    ae6c:	0007883a 	mov	r3,zero
    ae70:	18c00044 	addi	r3,r3,1
    ae74:	10000015 	stw	zero,0(r2)
    ae78:	10800104 	addi	r2,r2,4
    ae7c:	80fffc1e 	bne	r16,r3,ae70 <__lshift+0x70>
    ae80:	8405883a 	add	r2,r16,r16
    ae84:	1085883a 	add	r2,r2,r2
    ae88:	288b883a 	add	r5,r5,r2
    ae8c:	90800417 	ldw	r2,16(r18)
    ae90:	91000504 	addi	r4,r18,20
    ae94:	a18007cc 	andi	r6,r20,31
    ae98:	1085883a 	add	r2,r2,r2
    ae9c:	1085883a 	add	r2,r2,r2
    aea0:	208f883a 	add	r7,r4,r2
    aea4:	30001e26 	beq	r6,zero,af20 <__lshift+0x120>
    aea8:	00800804 	movi	r2,32
    aeac:	1191c83a 	sub	r8,r2,r6
    aeb0:	0007883a 	mov	r3,zero
    aeb4:	20800017 	ldw	r2,0(r4)
    aeb8:	1184983a 	sll	r2,r2,r6
    aebc:	1884b03a 	or	r2,r3,r2
    aec0:	28800015 	stw	r2,0(r5)
    aec4:	20c00017 	ldw	r3,0(r4)
    aec8:	21000104 	addi	r4,r4,4
    aecc:	29400104 	addi	r5,r5,4
    aed0:	1a06d83a 	srl	r3,r3,r8
    aed4:	21fff736 	bltu	r4,r7,aeb4 <__lshift+0xb4>
    aed8:	28c00015 	stw	r3,0(r5)
    aedc:	18000126 	beq	r3,zero,aee4 <__lshift+0xe4>
    aee0:	8c400044 	addi	r17,r17,1
    aee4:	88bfffc4 	addi	r2,r17,-1
    aee8:	98800415 	stw	r2,16(r19)
    aeec:	a809883a 	mov	r4,r21
    aef0:	900b883a 	mov	r5,r18
    aef4:	000a4bc0 	call	a4bc <_Bfree>
    aef8:	9805883a 	mov	r2,r19
    aefc:	dfc00617 	ldw	ra,24(sp)
    af00:	dd400517 	ldw	r21,20(sp)
    af04:	dd000417 	ldw	r20,16(sp)
    af08:	dcc00317 	ldw	r19,12(sp)
    af0c:	dc800217 	ldw	r18,8(sp)
    af10:	dc400117 	ldw	r17,4(sp)
    af14:	dc000017 	ldw	r16,0(sp)
    af18:	dec00704 	addi	sp,sp,28
    af1c:	f800283a 	ret
    af20:	20800017 	ldw	r2,0(r4)
    af24:	21000104 	addi	r4,r4,4
    af28:	28800015 	stw	r2,0(r5)
    af2c:	29400104 	addi	r5,r5,4
    af30:	21ffec2e 	bgeu	r4,r7,aee4 <__lshift+0xe4>
    af34:	20800017 	ldw	r2,0(r4)
    af38:	21000104 	addi	r4,r4,4
    af3c:	28800015 	stw	r2,0(r5)
    af40:	29400104 	addi	r5,r5,4
    af44:	21fff636 	bltu	r4,r7,af20 <__lshift+0x120>
    af48:	003fe606 	br	aee4 <__lshift+0xe4>

0000af4c <__multiply>:
    af4c:	defff904 	addi	sp,sp,-28
    af50:	dcc00315 	stw	r19,12(sp)
    af54:	dc800215 	stw	r18,8(sp)
    af58:	2cc00417 	ldw	r19,16(r5)
    af5c:	34800417 	ldw	r18,16(r6)
    af60:	dd000415 	stw	r20,16(sp)
    af64:	dc400115 	stw	r17,4(sp)
    af68:	dfc00615 	stw	ra,24(sp)
    af6c:	dd400515 	stw	r21,20(sp)
    af70:	dc000015 	stw	r16,0(sp)
    af74:	2823883a 	mov	r17,r5
    af78:	3029883a 	mov	r20,r6
    af7c:	9c80040e 	bge	r19,r18,af90 <__multiply+0x44>
    af80:	9027883a 	mov	r19,r18
    af84:	2c800417 	ldw	r18,16(r5)
    af88:	2829883a 	mov	r20,r5
    af8c:	3023883a 	mov	r17,r6
    af90:	88800217 	ldw	r2,8(r17)
    af94:	9ca1883a 	add	r16,r19,r18
    af98:	89400117 	ldw	r5,4(r17)
    af9c:	1400010e 	bge	r2,r16,afa4 <__multiply+0x58>
    afa0:	29400044 	addi	r5,r5,1
    afa4:	000aa3c0 	call	aa3c <_Balloc>
    afa8:	102b883a 	mov	r21,r2
    afac:	8405883a 	add	r2,r16,r16
    afb0:	1085883a 	add	r2,r2,r2
    afb4:	a9000504 	addi	r4,r21,20
    afb8:	209d883a 	add	r14,r4,r2
    afbc:	2380042e 	bgeu	r4,r14,afd0 <__multiply+0x84>
    afc0:	2005883a 	mov	r2,r4
    afc4:	10000015 	stw	zero,0(r2)
    afc8:	10800104 	addi	r2,r2,4
    afcc:	13bffd36 	bltu	r2,r14,afc4 <__multiply+0x78>
    afd0:	9485883a 	add	r2,r18,r18
    afd4:	9cc7883a 	add	r3,r19,r19
    afd8:	a1800504 	addi	r6,r20,20
    afdc:	1085883a 	add	r2,r2,r2
    afe0:	8b400504 	addi	r13,r17,20
    afe4:	18c7883a 	add	r3,r3,r3
    afe8:	309f883a 	add	r15,r6,r2
    afec:	68d7883a 	add	r11,r13,r3
    aff0:	33c03b2e 	bgeu	r6,r15,b0e0 <__multiply+0x194>
    aff4:	2019883a 	mov	r12,r4
    aff8:	30800017 	ldw	r2,0(r6)
    affc:	127fffcc 	andi	r9,r2,65535
    b000:	48001826 	beq	r9,zero,b064 <__multiply+0x118>
    b004:	6811883a 	mov	r8,r13
    b008:	600f883a 	mov	r7,r12
    b00c:	0015883a 	mov	r10,zero
    b010:	40c00017 	ldw	r3,0(r8)
    b014:	39400017 	ldw	r5,0(r7)
    b018:	42000104 	addi	r8,r8,4
    b01c:	193fffcc 	andi	r4,r3,65535
    b020:	4909383a 	mul	r4,r9,r4
    b024:	1806d43a 	srli	r3,r3,16
    b028:	28bfffcc 	andi	r2,r5,65535
    b02c:	5085883a 	add	r2,r10,r2
    b030:	2089883a 	add	r4,r4,r2
    b034:	48c7383a 	mul	r3,r9,r3
    b038:	280ad43a 	srli	r5,r5,16
    b03c:	2004d43a 	srli	r2,r4,16
    b040:	3900000d 	sth	r4,0(r7)
    b044:	1947883a 	add	r3,r3,r5
    b048:	10c5883a 	add	r2,r2,r3
    b04c:	3880008d 	sth	r2,2(r7)
    b050:	1014d43a 	srli	r10,r2,16
    b054:	39c00104 	addi	r7,r7,4
    b058:	42ffed36 	bltu	r8,r11,b010 <__multiply+0xc4>
    b05c:	3a800015 	stw	r10,0(r7)
    b060:	30800017 	ldw	r2,0(r6)
    b064:	1012d43a 	srli	r9,r2,16
    b068:	48001926 	beq	r9,zero,b0d0 <__multiply+0x184>
    b06c:	60800017 	ldw	r2,0(r12)
    b070:	6811883a 	mov	r8,r13
    b074:	600f883a 	mov	r7,r12
    b078:	0015883a 	mov	r10,zero
    b07c:	100b883a 	mov	r5,r2
    b080:	41000017 	ldw	r4,0(r8)
    b084:	2806d43a 	srli	r3,r5,16
    b088:	3880000d 	sth	r2,0(r7)
    b08c:	20bfffcc 	andi	r2,r4,65535
    b090:	4885383a 	mul	r2,r9,r2
    b094:	50c7883a 	add	r3,r10,r3
    b098:	2008d43a 	srli	r4,r4,16
    b09c:	10c5883a 	add	r2,r2,r3
    b0a0:	3880008d 	sth	r2,2(r7)
    b0a4:	39c00104 	addi	r7,r7,4
    b0a8:	39400017 	ldw	r5,0(r7)
    b0ac:	4909383a 	mul	r4,r9,r4
    b0b0:	1004d43a 	srli	r2,r2,16
    b0b4:	28ffffcc 	andi	r3,r5,65535
    b0b8:	20c9883a 	add	r4,r4,r3
    b0bc:	1105883a 	add	r2,r2,r4
    b0c0:	42000104 	addi	r8,r8,4
    b0c4:	1014d43a 	srli	r10,r2,16
    b0c8:	42ffed36 	bltu	r8,r11,b080 <__multiply+0x134>
    b0cc:	38800015 	stw	r2,0(r7)
    b0d0:	31800104 	addi	r6,r6,4
    b0d4:	33c0022e 	bgeu	r6,r15,b0e0 <__multiply+0x194>
    b0d8:	63000104 	addi	r12,r12,4
    b0dc:	003fc606 	br	aff8 <__multiply+0xac>
    b0e0:	0400090e 	bge	zero,r16,b108 <__multiply+0x1bc>
    b0e4:	70bfff17 	ldw	r2,-4(r14)
    b0e8:	70ffff04 	addi	r3,r14,-4
    b0ec:	10000326 	beq	r2,zero,b0fc <__multiply+0x1b0>
    b0f0:	00000506 	br	b108 <__multiply+0x1bc>
    b0f4:	18800017 	ldw	r2,0(r3)
    b0f8:	1000031e 	bne	r2,zero,b108 <__multiply+0x1bc>
    b0fc:	843fffc4 	addi	r16,r16,-1
    b100:	18ffff04 	addi	r3,r3,-4
    b104:	803ffb1e 	bne	r16,zero,b0f4 <__multiply+0x1a8>
    b108:	a805883a 	mov	r2,r21
    b10c:	ac000415 	stw	r16,16(r21)
    b110:	dfc00617 	ldw	ra,24(sp)
    b114:	dd400517 	ldw	r21,20(sp)
    b118:	dd000417 	ldw	r20,16(sp)
    b11c:	dcc00317 	ldw	r19,12(sp)
    b120:	dc800217 	ldw	r18,8(sp)
    b124:	dc400117 	ldw	r17,4(sp)
    b128:	dc000017 	ldw	r16,0(sp)
    b12c:	dec00704 	addi	sp,sp,28
    b130:	f800283a 	ret

0000b134 <__i2b>:
    b134:	defffd04 	addi	sp,sp,-12
    b138:	dc000015 	stw	r16,0(sp)
    b13c:	04000044 	movi	r16,1
    b140:	dc800115 	stw	r18,4(sp)
    b144:	2825883a 	mov	r18,r5
    b148:	800b883a 	mov	r5,r16
    b14c:	dfc00215 	stw	ra,8(sp)
    b150:	000aa3c0 	call	aa3c <_Balloc>
    b154:	14000415 	stw	r16,16(r2)
    b158:	14800515 	stw	r18,20(r2)
    b15c:	dfc00217 	ldw	ra,8(sp)
    b160:	dc800117 	ldw	r18,4(sp)
    b164:	dc000017 	ldw	r16,0(sp)
    b168:	dec00304 	addi	sp,sp,12
    b16c:	f800283a 	ret

0000b170 <__multadd>:
    b170:	defffa04 	addi	sp,sp,-24
    b174:	dc800215 	stw	r18,8(sp)
    b178:	2c800417 	ldw	r18,16(r5)
    b17c:	dd000415 	stw	r20,16(sp)
    b180:	dcc00315 	stw	r19,12(sp)
    b184:	dc000015 	stw	r16,0(sp)
    b188:	dfc00515 	stw	ra,20(sp)
    b18c:	3821883a 	mov	r16,r7
    b190:	dc400115 	stw	r17,4(sp)
    b194:	2827883a 	mov	r19,r5
    b198:	2029883a 	mov	r20,r4
    b19c:	2a000504 	addi	r8,r5,20
    b1a0:	000f883a 	mov	r7,zero
    b1a4:	40800017 	ldw	r2,0(r8)
    b1a8:	39c00044 	addi	r7,r7,1
    b1ac:	10ffffcc 	andi	r3,r2,65535
    b1b0:	1987383a 	mul	r3,r3,r6
    b1b4:	1004d43a 	srli	r2,r2,16
    b1b8:	1c07883a 	add	r3,r3,r16
    b1bc:	180ad43a 	srli	r5,r3,16
    b1c0:	1185383a 	mul	r2,r2,r6
    b1c4:	18ffffcc 	andi	r3,r3,65535
    b1c8:	1145883a 	add	r2,r2,r5
    b1cc:	1008943a 	slli	r4,r2,16
    b1d0:	1020d43a 	srli	r16,r2,16
    b1d4:	20c9883a 	add	r4,r4,r3
    b1d8:	41000015 	stw	r4,0(r8)
    b1dc:	42000104 	addi	r8,r8,4
    b1e0:	3cbff016 	blt	r7,r18,b1a4 <__multadd+0x34>
    b1e4:	80000826 	beq	r16,zero,b208 <__multadd+0x98>
    b1e8:	98800217 	ldw	r2,8(r19)
    b1ec:	90800f0e 	bge	r18,r2,b22c <__multadd+0xbc>
    b1f0:	9485883a 	add	r2,r18,r18
    b1f4:	1085883a 	add	r2,r2,r2
    b1f8:	14c5883a 	add	r2,r2,r19
    b1fc:	90c00044 	addi	r3,r18,1
    b200:	14000515 	stw	r16,20(r2)
    b204:	98c00415 	stw	r3,16(r19)
    b208:	9805883a 	mov	r2,r19
    b20c:	dfc00517 	ldw	ra,20(sp)
    b210:	dd000417 	ldw	r20,16(sp)
    b214:	dcc00317 	ldw	r19,12(sp)
    b218:	dc800217 	ldw	r18,8(sp)
    b21c:	dc400117 	ldw	r17,4(sp)
    b220:	dc000017 	ldw	r16,0(sp)
    b224:	dec00604 	addi	sp,sp,24
    b228:	f800283a 	ret
    b22c:	99400117 	ldw	r5,4(r19)
    b230:	a009883a 	mov	r4,r20
    b234:	29400044 	addi	r5,r5,1
    b238:	000aa3c0 	call	aa3c <_Balloc>
    b23c:	99800417 	ldw	r6,16(r19)
    b240:	99400304 	addi	r5,r19,12
    b244:	11000304 	addi	r4,r2,12
    b248:	318d883a 	add	r6,r6,r6
    b24c:	318d883a 	add	r6,r6,r6
    b250:	31800204 	addi	r6,r6,8
    b254:	1023883a 	mov	r17,r2
    b258:	00036840 	call	3684 <memcpy>
    b25c:	980b883a 	mov	r5,r19
    b260:	a009883a 	mov	r4,r20
    b264:	000a4bc0 	call	a4bc <_Bfree>
    b268:	8827883a 	mov	r19,r17
    b26c:	003fe006 	br	b1f0 <__multadd+0x80>

0000b270 <__pow5mult>:
    b270:	defffa04 	addi	sp,sp,-24
    b274:	308000cc 	andi	r2,r6,3
    b278:	dd000415 	stw	r20,16(sp)
    b27c:	dcc00315 	stw	r19,12(sp)
    b280:	dc000015 	stw	r16,0(sp)
    b284:	dfc00515 	stw	ra,20(sp)
    b288:	dc800215 	stw	r18,8(sp)
    b28c:	dc400115 	stw	r17,4(sp)
    b290:	3021883a 	mov	r16,r6
    b294:	2027883a 	mov	r19,r4
    b298:	2829883a 	mov	r20,r5
    b29c:	10002b1e 	bne	r2,zero,b34c <__pow5mult+0xdc>
    b2a0:	8025d0ba 	srai	r18,r16,2
    b2a4:	90001b26 	beq	r18,zero,b314 <__pow5mult+0xa4>
    b2a8:	9c001217 	ldw	r16,72(r19)
    b2ac:	8000081e 	bne	r16,zero,b2d0 <__pow5mult+0x60>
    b2b0:	00003006 	br	b374 <__pow5mult+0x104>
    b2b4:	800b883a 	mov	r5,r16
    b2b8:	800d883a 	mov	r6,r16
    b2bc:	9809883a 	mov	r4,r19
    b2c0:	90001426 	beq	r18,zero,b314 <__pow5mult+0xa4>
    b2c4:	80800017 	ldw	r2,0(r16)
    b2c8:	10001b26 	beq	r2,zero,b338 <__pow5mult+0xc8>
    b2cc:	1021883a 	mov	r16,r2
    b2d0:	9080004c 	andi	r2,r18,1
    b2d4:	1005003a 	cmpeq	r2,r2,zero
    b2d8:	9025d07a 	srai	r18,r18,1
    b2dc:	800d883a 	mov	r6,r16
    b2e0:	9809883a 	mov	r4,r19
    b2e4:	a00b883a 	mov	r5,r20
    b2e8:	103ff21e 	bne	r2,zero,b2b4 <__pow5mult+0x44>
    b2ec:	000af4c0 	call	af4c <__multiply>
    b2f0:	a00b883a 	mov	r5,r20
    b2f4:	9809883a 	mov	r4,r19
    b2f8:	1023883a 	mov	r17,r2
    b2fc:	000a4bc0 	call	a4bc <_Bfree>
    b300:	8829883a 	mov	r20,r17
    b304:	800b883a 	mov	r5,r16
    b308:	800d883a 	mov	r6,r16
    b30c:	9809883a 	mov	r4,r19
    b310:	903fec1e 	bne	r18,zero,b2c4 <__pow5mult+0x54>
    b314:	a005883a 	mov	r2,r20
    b318:	dfc00517 	ldw	ra,20(sp)
    b31c:	dd000417 	ldw	r20,16(sp)
    b320:	dcc00317 	ldw	r19,12(sp)
    b324:	dc800217 	ldw	r18,8(sp)
    b328:	dc400117 	ldw	r17,4(sp)
    b32c:	dc000017 	ldw	r16,0(sp)
    b330:	dec00604 	addi	sp,sp,24
    b334:	f800283a 	ret
    b338:	000af4c0 	call	af4c <__multiply>
    b33c:	80800015 	stw	r2,0(r16)
    b340:	1021883a 	mov	r16,r2
    b344:	10000015 	stw	zero,0(r2)
    b348:	003fe106 	br	b2d0 <__pow5mult+0x60>
    b34c:	1085883a 	add	r2,r2,r2
    b350:	00c00074 	movhi	r3,1
    b354:	18d3cb04 	addi	r3,r3,20268
    b358:	1085883a 	add	r2,r2,r2
    b35c:	10c5883a 	add	r2,r2,r3
    b360:	11bfff17 	ldw	r6,-4(r2)
    b364:	000f883a 	mov	r7,zero
    b368:	000b1700 	call	b170 <__multadd>
    b36c:	1029883a 	mov	r20,r2
    b370:	003fcb06 	br	b2a0 <__pow5mult+0x30>
    b374:	9809883a 	mov	r4,r19
    b378:	01409c44 	movi	r5,625
    b37c:	000b1340 	call	b134 <__i2b>
    b380:	98801215 	stw	r2,72(r19)
    b384:	1021883a 	mov	r16,r2
    b388:	10000015 	stw	zero,0(r2)
    b38c:	003fd006 	br	b2d0 <__pow5mult+0x60>

0000b390 <__s2b>:
    b390:	defff904 	addi	sp,sp,-28
    b394:	dcc00315 	stw	r19,12(sp)
    b398:	dc800215 	stw	r18,8(sp)
    b39c:	2827883a 	mov	r19,r5
    b3a0:	2025883a 	mov	r18,r4
    b3a4:	01400244 	movi	r5,9
    b3a8:	39000204 	addi	r4,r7,8
    b3ac:	dd000415 	stw	r20,16(sp)
    b3b0:	dc400115 	stw	r17,4(sp)
    b3b4:	dfc00615 	stw	ra,24(sp)
    b3b8:	dd400515 	stw	r21,20(sp)
    b3bc:	dc000015 	stw	r16,0(sp)
    b3c0:	3829883a 	mov	r20,r7
    b3c4:	3023883a 	mov	r17,r6
    b3c8:	00027e40 	call	27e4 <__divsi3>
    b3cc:	00c00044 	movi	r3,1
    b3d0:	1880350e 	bge	r3,r2,b4a8 <__s2b+0x118>
    b3d4:	000b883a 	mov	r5,zero
    b3d8:	18c7883a 	add	r3,r3,r3
    b3dc:	29400044 	addi	r5,r5,1
    b3e0:	18bffd16 	blt	r3,r2,b3d8 <__s2b+0x48>
    b3e4:	9009883a 	mov	r4,r18
    b3e8:	000aa3c0 	call	aa3c <_Balloc>
    b3ec:	1011883a 	mov	r8,r2
    b3f0:	d8800717 	ldw	r2,28(sp)
    b3f4:	00c00044 	movi	r3,1
    b3f8:	01800244 	movi	r6,9
    b3fc:	40800515 	stw	r2,20(r8)
    b400:	40c00415 	stw	r3,16(r8)
    b404:	3440260e 	bge	r6,r17,b4a0 <__s2b+0x110>
    b408:	3021883a 	mov	r16,r6
    b40c:	99ab883a 	add	r21,r19,r6
    b410:	9c05883a 	add	r2,r19,r16
    b414:	11c00007 	ldb	r7,0(r2)
    b418:	400b883a 	mov	r5,r8
    b41c:	9009883a 	mov	r4,r18
    b420:	39fff404 	addi	r7,r7,-48
    b424:	01800284 	movi	r6,10
    b428:	000b1700 	call	b170 <__multadd>
    b42c:	84000044 	addi	r16,r16,1
    b430:	1011883a 	mov	r8,r2
    b434:	8c3ff61e 	bne	r17,r16,b410 <__s2b+0x80>
    b438:	ac45883a 	add	r2,r21,r17
    b43c:	117ffe04 	addi	r5,r2,-8
    b440:	880d883a 	mov	r6,r17
    b444:	35000c0e 	bge	r6,r20,b478 <__s2b+0xe8>
    b448:	a185c83a 	sub	r2,r20,r6
    b44c:	2821883a 	mov	r16,r5
    b450:	28a3883a 	add	r17,r5,r2
    b454:	81c00007 	ldb	r7,0(r16)
    b458:	400b883a 	mov	r5,r8
    b45c:	9009883a 	mov	r4,r18
    b460:	39fff404 	addi	r7,r7,-48
    b464:	01800284 	movi	r6,10
    b468:	000b1700 	call	b170 <__multadd>
    b46c:	84000044 	addi	r16,r16,1
    b470:	1011883a 	mov	r8,r2
    b474:	847ff71e 	bne	r16,r17,b454 <__s2b+0xc4>
    b478:	4005883a 	mov	r2,r8
    b47c:	dfc00617 	ldw	ra,24(sp)
    b480:	dd400517 	ldw	r21,20(sp)
    b484:	dd000417 	ldw	r20,16(sp)
    b488:	dcc00317 	ldw	r19,12(sp)
    b48c:	dc800217 	ldw	r18,8(sp)
    b490:	dc400117 	ldw	r17,4(sp)
    b494:	dc000017 	ldw	r16,0(sp)
    b498:	dec00704 	addi	sp,sp,28
    b49c:	f800283a 	ret
    b4a0:	99400284 	addi	r5,r19,10
    b4a4:	003fe706 	br	b444 <__s2b+0xb4>
    b4a8:	000b883a 	mov	r5,zero
    b4ac:	003fcd06 	br	b3e4 <__s2b+0x54>

0000b4b0 <putc>:
    b4b0:	defffc04 	addi	sp,sp,-16
    b4b4:	dc800215 	stw	r18,8(sp)
    b4b8:	04800074 	movhi	r18,1
    b4bc:	949ae204 	addi	r18,r18,27528
    b4c0:	90c00017 	ldw	r3,0(r18)
    b4c4:	dc400115 	stw	r17,4(sp)
    b4c8:	dc000015 	stw	r16,0(sp)
    b4cc:	dfc00315 	stw	ra,12(sp)
    b4d0:	2023883a 	mov	r17,r4
    b4d4:	2821883a 	mov	r16,r5
    b4d8:	18000226 	beq	r3,zero,b4e4 <putc+0x34>
    b4dc:	18800e17 	ldw	r2,56(r3)
    b4e0:	10001126 	beq	r2,zero,b528 <putc+0x78>
    b4e4:	80800217 	ldw	r2,8(r16)
    b4e8:	10ffffc4 	addi	r3,r2,-1
    b4ec:	80c00215 	stw	r3,8(r16)
    b4f0:	18001316 	blt	r3,zero,b540 <putc+0x90>
    b4f4:	80800017 	ldw	r2,0(r16)
    b4f8:	14400005 	stb	r17,0(r2)
    b4fc:	80c00017 	ldw	r3,0(r16)
    b500:	18800044 	addi	r2,r3,1
    b504:	18c00003 	ldbu	r3,0(r3)
    b508:	80800015 	stw	r2,0(r16)
    b50c:	1805883a 	mov	r2,r3
    b510:	dfc00317 	ldw	ra,12(sp)
    b514:	dc800217 	ldw	r18,8(sp)
    b518:	dc400117 	ldw	r17,4(sp)
    b51c:	dc000017 	ldw	r16,0(sp)
    b520:	dec00404 	addi	sp,sp,16
    b524:	f800283a 	ret
    b528:	1809883a 	mov	r4,r3
    b52c:	0002a880 	call	2a88 <__sinit>
    b530:	80800217 	ldw	r2,8(r16)
    b534:	10ffffc4 	addi	r3,r2,-1
    b538:	80c00215 	stw	r3,8(r16)
    b53c:	183fed0e 	bge	r3,zero,b4f4 <putc+0x44>
    b540:	80800617 	ldw	r2,24(r16)
    b544:	18800f16 	blt	r3,r2,b584 <putc+0xd4>
    b548:	80800017 	ldw	r2,0(r16)
    b54c:	14400005 	stb	r17,0(r2)
    b550:	81000017 	ldw	r4,0(r16)
    b554:	00800284 	movi	r2,10
    b558:	20c00003 	ldbu	r3,0(r4)
    b55c:	18801226 	beq	r3,r2,b5a8 <putc+0xf8>
    b560:	20800044 	addi	r2,r4,1
    b564:	80800015 	stw	r2,0(r16)
    b568:	1805883a 	mov	r2,r3
    b56c:	dfc00317 	ldw	ra,12(sp)
    b570:	dc800217 	ldw	r18,8(sp)
    b574:	dc400117 	ldw	r17,4(sp)
    b578:	dc000017 	ldw	r16,0(sp)
    b57c:	dec00404 	addi	sp,sp,16
    b580:	f800283a 	ret
    b584:	91000017 	ldw	r4,0(r18)
    b588:	880b883a 	mov	r5,r17
    b58c:	800d883a 	mov	r6,r16
    b590:	dfc00317 	ldw	ra,12(sp)
    b594:	dc800217 	ldw	r18,8(sp)
    b598:	dc400117 	ldw	r17,4(sp)
    b59c:	dc000017 	ldw	r16,0(sp)
    b5a0:	dec00404 	addi	sp,sp,16
    b5a4:	000e2041 	jmpi	e204 <__swbuf_r>
    b5a8:	91000017 	ldw	r4,0(r18)
    b5ac:	180b883a 	mov	r5,r3
    b5b0:	003ff606 	br	b58c <putc+0xdc>

0000b5b4 <_putc_r>:
    b5b4:	defffc04 	addi	sp,sp,-16
    b5b8:	dc400215 	stw	r17,8(sp)
    b5bc:	dc000115 	stw	r16,4(sp)
    b5c0:	dfc00315 	stw	ra,12(sp)
    b5c4:	2021883a 	mov	r16,r4
    b5c8:	2823883a 	mov	r17,r5
    b5cc:	20000226 	beq	r4,zero,b5d8 <_putc_r+0x24>
    b5d0:	20800e17 	ldw	r2,56(r4)
    b5d4:	10001026 	beq	r2,zero,b618 <_putc_r+0x64>
    b5d8:	30800217 	ldw	r2,8(r6)
    b5dc:	10ffffc4 	addi	r3,r2,-1
    b5e0:	30c00215 	stw	r3,8(r6)
    b5e4:	18001316 	blt	r3,zero,b634 <_putc_r+0x80>
    b5e8:	30800017 	ldw	r2,0(r6)
    b5ec:	14400005 	stb	r17,0(r2)
    b5f0:	30c00017 	ldw	r3,0(r6)
    b5f4:	18800044 	addi	r2,r3,1
    b5f8:	18c00003 	ldbu	r3,0(r3)
    b5fc:	30800015 	stw	r2,0(r6)
    b600:	1805883a 	mov	r2,r3
    b604:	dfc00317 	ldw	ra,12(sp)
    b608:	dc400217 	ldw	r17,8(sp)
    b60c:	dc000117 	ldw	r16,4(sp)
    b610:	dec00404 	addi	sp,sp,16
    b614:	f800283a 	ret
    b618:	d9800015 	stw	r6,0(sp)
    b61c:	0002a880 	call	2a88 <__sinit>
    b620:	d9800017 	ldw	r6,0(sp)
    b624:	30800217 	ldw	r2,8(r6)
    b628:	10ffffc4 	addi	r3,r2,-1
    b62c:	30c00215 	stw	r3,8(r6)
    b630:	183fed0e 	bge	r3,zero,b5e8 <_putc_r+0x34>
    b634:	30800617 	ldw	r2,24(r6)
    b638:	18800e16 	blt	r3,r2,b674 <_putc_r+0xc0>
    b63c:	30800017 	ldw	r2,0(r6)
    b640:	14400005 	stb	r17,0(r2)
    b644:	31000017 	ldw	r4,0(r6)
    b648:	00800284 	movi	r2,10
    b64c:	20c00003 	ldbu	r3,0(r4)
    b650:	18800f26 	beq	r3,r2,b690 <_putc_r+0xdc>
    b654:	20800044 	addi	r2,r4,1
    b658:	30800015 	stw	r2,0(r6)
    b65c:	1805883a 	mov	r2,r3
    b660:	dfc00317 	ldw	ra,12(sp)
    b664:	dc400217 	ldw	r17,8(sp)
    b668:	dc000117 	ldw	r16,4(sp)
    b66c:	dec00404 	addi	sp,sp,16
    b670:	f800283a 	ret
    b674:	8009883a 	mov	r4,r16
    b678:	880b883a 	mov	r5,r17
    b67c:	dfc00317 	ldw	ra,12(sp)
    b680:	dc400217 	ldw	r17,8(sp)
    b684:	dc000117 	ldw	r16,4(sp)
    b688:	dec00404 	addi	sp,sp,16
    b68c:	000e2041 	jmpi	e204 <__swbuf_r>
    b690:	8009883a 	mov	r4,r16
    b694:	180b883a 	mov	r5,r3
    b698:	003ff806 	br	b67c <_putc_r+0xc8>

0000b69c <_read_r>:
    b69c:	defffd04 	addi	sp,sp,-12
    b6a0:	dc000015 	stw	r16,0(sp)
    b6a4:	040000b4 	movhi	r16,2
    b6a8:	8421be04 	addi	r16,r16,-30984
    b6ac:	dc400115 	stw	r17,4(sp)
    b6b0:	80000015 	stw	zero,0(r16)
    b6b4:	2023883a 	mov	r17,r4
    b6b8:	2809883a 	mov	r4,r5
    b6bc:	300b883a 	mov	r5,r6
    b6c0:	380d883a 	mov	r6,r7
    b6c4:	dfc00215 	stw	ra,8(sp)
    b6c8:	001201c0 	call	1201c <read>
    b6cc:	1007883a 	mov	r3,r2
    b6d0:	00bfffc4 	movi	r2,-1
    b6d4:	18800626 	beq	r3,r2,b6f0 <_read_r+0x54>
    b6d8:	1805883a 	mov	r2,r3
    b6dc:	dfc00217 	ldw	ra,8(sp)
    b6e0:	dc400117 	ldw	r17,4(sp)
    b6e4:	dc000017 	ldw	r16,0(sp)
    b6e8:	dec00304 	addi	sp,sp,12
    b6ec:	f800283a 	ret
    b6f0:	80800017 	ldw	r2,0(r16)
    b6f4:	103ff826 	beq	r2,zero,b6d8 <_read_r+0x3c>
    b6f8:	88800015 	stw	r2,0(r17)
    b6fc:	1805883a 	mov	r2,r3
    b700:	dfc00217 	ldw	ra,8(sp)
    b704:	dc400117 	ldw	r17,4(sp)
    b708:	dc000017 	ldw	r16,0(sp)
    b70c:	dec00304 	addi	sp,sp,12
    b710:	f800283a 	ret

0000b714 <_realloc_r>:
    b714:	defff404 	addi	sp,sp,-48
    b718:	dd800815 	stw	r22,32(sp)
    b71c:	dc800415 	stw	r18,16(sp)
    b720:	dc400315 	stw	r17,12(sp)
    b724:	dfc00b15 	stw	ra,44(sp)
    b728:	df000a15 	stw	fp,40(sp)
    b72c:	ddc00915 	stw	r23,36(sp)
    b730:	dd400715 	stw	r21,28(sp)
    b734:	dd000615 	stw	r20,24(sp)
    b738:	dcc00515 	stw	r19,20(sp)
    b73c:	dc000215 	stw	r16,8(sp)
    b740:	2825883a 	mov	r18,r5
    b744:	3023883a 	mov	r17,r6
    b748:	202d883a 	mov	r22,r4
    b74c:	2800c926 	beq	r5,zero,ba74 <_realloc_r+0x360>
    b750:	0011fdc0 	call	11fdc <__malloc_lock>
    b754:	943ffe04 	addi	r16,r18,-8
    b758:	88c002c4 	addi	r3,r17,11
    b75c:	00800584 	movi	r2,22
    b760:	82000117 	ldw	r8,4(r16)
    b764:	10c01b2e 	bgeu	r2,r3,b7d4 <_realloc_r+0xc0>
    b768:	00bffe04 	movi	r2,-8
    b76c:	188e703a 	and	r7,r3,r2
    b770:	3839883a 	mov	fp,r7
    b774:	38001a16 	blt	r7,zero,b7e0 <_realloc_r+0xcc>
    b778:	e4401936 	bltu	fp,r17,b7e0 <_realloc_r+0xcc>
    b77c:	013fff04 	movi	r4,-4
    b780:	4126703a 	and	r19,r8,r4
    b784:	99c02616 	blt	r19,r7,b820 <_realloc_r+0x10c>
    b788:	802b883a 	mov	r21,r16
    b78c:	9829883a 	mov	r20,r19
    b790:	84000204 	addi	r16,r16,8
    b794:	a80f883a 	mov	r7,r21
    b798:	a70dc83a 	sub	r6,r20,fp
    b79c:	008003c4 	movi	r2,15
    b7a0:	1180c136 	bltu	r2,r6,baa8 <_realloc_r+0x394>
    b7a4:	38800117 	ldw	r2,4(r7)
    b7a8:	a549883a 	add	r4,r20,r21
    b7ac:	1080004c 	andi	r2,r2,1
    b7b0:	a084b03a 	or	r2,r20,r2
    b7b4:	38800115 	stw	r2,4(r7)
    b7b8:	20c00117 	ldw	r3,4(r4)
    b7bc:	18c00054 	ori	r3,r3,1
    b7c0:	20c00115 	stw	r3,4(r4)
    b7c4:	b009883a 	mov	r4,r22
    b7c8:	0011ffc0 	call	11ffc <__malloc_unlock>
    b7cc:	8023883a 	mov	r17,r16
    b7d0:	00000606 	br	b7ec <_realloc_r+0xd8>
    b7d4:	01c00404 	movi	r7,16
    b7d8:	3839883a 	mov	fp,r7
    b7dc:	e47fe72e 	bgeu	fp,r17,b77c <_realloc_r+0x68>
    b7e0:	00800304 	movi	r2,12
    b7e4:	0023883a 	mov	r17,zero
    b7e8:	b0800015 	stw	r2,0(r22)
    b7ec:	8805883a 	mov	r2,r17
    b7f0:	dfc00b17 	ldw	ra,44(sp)
    b7f4:	df000a17 	ldw	fp,40(sp)
    b7f8:	ddc00917 	ldw	r23,36(sp)
    b7fc:	dd800817 	ldw	r22,32(sp)
    b800:	dd400717 	ldw	r21,28(sp)
    b804:	dd000617 	ldw	r20,24(sp)
    b808:	dcc00517 	ldw	r19,20(sp)
    b80c:	dc800417 	ldw	r18,16(sp)
    b810:	dc400317 	ldw	r17,12(sp)
    b814:	dc000217 	ldw	r16,8(sp)
    b818:	dec00c04 	addi	sp,sp,48
    b81c:	f800283a 	ret
    b820:	00800074 	movhi	r2,1
    b824:	10955004 	addi	r2,r2,21824
    b828:	12400217 	ldw	r9,8(r2)
    b82c:	84cd883a 	add	r6,r16,r19
    b830:	802b883a 	mov	r21,r16
    b834:	3240b926 	beq	r6,r9,bb1c <_realloc_r+0x408>
    b838:	31400117 	ldw	r5,4(r6)
    b83c:	00bfff84 	movi	r2,-2
    b840:	2884703a 	and	r2,r5,r2
    b844:	1185883a 	add	r2,r2,r6
    b848:	10c00117 	ldw	r3,4(r2)
    b84c:	18c0004c 	andi	r3,r3,1
    b850:	1807003a 	cmpeq	r3,r3,zero
    b854:	1800a326 	beq	r3,zero,bae4 <_realloc_r+0x3d0>
    b858:	2908703a 	and	r4,r5,r4
    b85c:	9929883a 	add	r20,r19,r4
    b860:	a1c0a30e 	bge	r20,r7,baf0 <_realloc_r+0x3dc>
    b864:	4080004c 	andi	r2,r8,1
    b868:	1000551e 	bne	r2,zero,b9c0 <_realloc_r+0x2ac>
    b86c:	80800017 	ldw	r2,0(r16)
    b870:	80afc83a 	sub	r23,r16,r2
    b874:	b8c00117 	ldw	r3,4(r23)
    b878:	00bfff04 	movi	r2,-4
    b87c:	1884703a 	and	r2,r3,r2
    b880:	30002e26 	beq	r6,zero,b93c <_realloc_r+0x228>
    b884:	3240b926 	beq	r6,r9,bb6c <_realloc_r+0x458>
    b888:	98a9883a 	add	r20,r19,r2
    b88c:	2509883a 	add	r4,r4,r20
    b890:	d9000015 	stw	r4,0(sp)
    b894:	21c02a16 	blt	r4,r7,b940 <_realloc_r+0x22c>
    b898:	30800317 	ldw	r2,12(r6)
    b89c:	30c00217 	ldw	r3,8(r6)
    b8a0:	01400904 	movi	r5,36
    b8a4:	99bfff04 	addi	r6,r19,-4
    b8a8:	18800315 	stw	r2,12(r3)
    b8ac:	10c00215 	stw	r3,8(r2)
    b8b0:	b9000317 	ldw	r4,12(r23)
    b8b4:	b8800217 	ldw	r2,8(r23)
    b8b8:	b82b883a 	mov	r21,r23
    b8bc:	bc000204 	addi	r16,r23,8
    b8c0:	20800215 	stw	r2,8(r4)
    b8c4:	11000315 	stw	r4,12(r2)
    b8c8:	2980e436 	bltu	r5,r6,bc5c <_realloc_r+0x548>
    b8cc:	008004c4 	movi	r2,19
    b8d0:	9009883a 	mov	r4,r18
    b8d4:	8011883a 	mov	r8,r16
    b8d8:	11800f2e 	bgeu	r2,r6,b918 <_realloc_r+0x204>
    b8dc:	90800017 	ldw	r2,0(r18)
    b8e0:	ba000404 	addi	r8,r23,16
    b8e4:	91000204 	addi	r4,r18,8
    b8e8:	b8800215 	stw	r2,8(r23)
    b8ec:	90c00117 	ldw	r3,4(r18)
    b8f0:	008006c4 	movi	r2,27
    b8f4:	b8c00315 	stw	r3,12(r23)
    b8f8:	1180072e 	bgeu	r2,r6,b918 <_realloc_r+0x204>
    b8fc:	90c00217 	ldw	r3,8(r18)
    b900:	ba000604 	addi	r8,r23,24
    b904:	91000404 	addi	r4,r18,16
    b908:	b8c00415 	stw	r3,16(r23)
    b90c:	90800317 	ldw	r2,12(r18)
    b910:	b8800515 	stw	r2,20(r23)
    b914:	3140e726 	beq	r6,r5,bcb4 <_realloc_r+0x5a0>
    b918:	20800017 	ldw	r2,0(r4)
    b91c:	dd000017 	ldw	r20,0(sp)
    b920:	b80f883a 	mov	r7,r23
    b924:	40800015 	stw	r2,0(r8)
    b928:	20c00117 	ldw	r3,4(r4)
    b92c:	40c00115 	stw	r3,4(r8)
    b930:	20800217 	ldw	r2,8(r4)
    b934:	40800215 	stw	r2,8(r8)
    b938:	003f9706 	br	b798 <_realloc_r+0x84>
    b93c:	98a9883a 	add	r20,r19,r2
    b940:	a1c01f16 	blt	r20,r7,b9c0 <_realloc_r+0x2ac>
    b944:	b8c00317 	ldw	r3,12(r23)
    b948:	b8800217 	ldw	r2,8(r23)
    b94c:	99bfff04 	addi	r6,r19,-4
    b950:	01400904 	movi	r5,36
    b954:	b82b883a 	mov	r21,r23
    b958:	18800215 	stw	r2,8(r3)
    b95c:	10c00315 	stw	r3,12(r2)
    b960:	bc000204 	addi	r16,r23,8
    b964:	2980c336 	bltu	r5,r6,bc74 <_realloc_r+0x560>
    b968:	008004c4 	movi	r2,19
    b96c:	9009883a 	mov	r4,r18
    b970:	8011883a 	mov	r8,r16
    b974:	11800f2e 	bgeu	r2,r6,b9b4 <_realloc_r+0x2a0>
    b978:	90800017 	ldw	r2,0(r18)
    b97c:	ba000404 	addi	r8,r23,16
    b980:	91000204 	addi	r4,r18,8
    b984:	b8800215 	stw	r2,8(r23)
    b988:	90c00117 	ldw	r3,4(r18)
    b98c:	008006c4 	movi	r2,27
    b990:	b8c00315 	stw	r3,12(r23)
    b994:	1180072e 	bgeu	r2,r6,b9b4 <_realloc_r+0x2a0>
    b998:	90c00217 	ldw	r3,8(r18)
    b99c:	ba000604 	addi	r8,r23,24
    b9a0:	91000404 	addi	r4,r18,16
    b9a4:	b8c00415 	stw	r3,16(r23)
    b9a8:	90800317 	ldw	r2,12(r18)
    b9ac:	b8800515 	stw	r2,20(r23)
    b9b0:	3140c726 	beq	r6,r5,bcd0 <_realloc_r+0x5bc>
    b9b4:	20800017 	ldw	r2,0(r4)
    b9b8:	b80f883a 	mov	r7,r23
    b9bc:	003fd906 	br	b924 <_realloc_r+0x210>
    b9c0:	880b883a 	mov	r5,r17
    b9c4:	b009883a 	mov	r4,r22
    b9c8:	0002e600 	call	2e60 <_malloc_r>
    b9cc:	1023883a 	mov	r17,r2
    b9d0:	10002526 	beq	r2,zero,ba68 <_realloc_r+0x354>
    b9d4:	80800117 	ldw	r2,4(r16)
    b9d8:	00ffff84 	movi	r3,-2
    b9dc:	893ffe04 	addi	r4,r17,-8
    b9e0:	10c4703a 	and	r2,r2,r3
    b9e4:	8085883a 	add	r2,r16,r2
    b9e8:	20809526 	beq	r4,r2,bc40 <_realloc_r+0x52c>
    b9ec:	99bfff04 	addi	r6,r19,-4
    b9f0:	01c00904 	movi	r7,36
    b9f4:	39804536 	bltu	r7,r6,bb0c <_realloc_r+0x3f8>
    b9f8:	008004c4 	movi	r2,19
    b9fc:	9009883a 	mov	r4,r18
    ba00:	880b883a 	mov	r5,r17
    ba04:	11800f2e 	bgeu	r2,r6,ba44 <_realloc_r+0x330>
    ba08:	90800017 	ldw	r2,0(r18)
    ba0c:	89400204 	addi	r5,r17,8
    ba10:	91000204 	addi	r4,r18,8
    ba14:	88800015 	stw	r2,0(r17)
    ba18:	90c00117 	ldw	r3,4(r18)
    ba1c:	008006c4 	movi	r2,27
    ba20:	88c00115 	stw	r3,4(r17)
    ba24:	1180072e 	bgeu	r2,r6,ba44 <_realloc_r+0x330>
    ba28:	90c00217 	ldw	r3,8(r18)
    ba2c:	89400404 	addi	r5,r17,16
    ba30:	91000404 	addi	r4,r18,16
    ba34:	88c00215 	stw	r3,8(r17)
    ba38:	90800317 	ldw	r2,12(r18)
    ba3c:	88800315 	stw	r2,12(r17)
    ba40:	31c09126 	beq	r6,r7,bc88 <_realloc_r+0x574>
    ba44:	20800017 	ldw	r2,0(r4)
    ba48:	28800015 	stw	r2,0(r5)
    ba4c:	20c00117 	ldw	r3,4(r4)
    ba50:	28c00115 	stw	r3,4(r5)
    ba54:	20800217 	ldw	r2,8(r4)
    ba58:	28800215 	stw	r2,8(r5)
    ba5c:	900b883a 	mov	r5,r18
    ba60:	b009883a 	mov	r4,r22
    ba64:	00098300 	call	9830 <_free_r>
    ba68:	b009883a 	mov	r4,r22
    ba6c:	0011ffc0 	call	11ffc <__malloc_unlock>
    ba70:	003f5e06 	br	b7ec <_realloc_r+0xd8>
    ba74:	300b883a 	mov	r5,r6
    ba78:	dfc00b17 	ldw	ra,44(sp)
    ba7c:	df000a17 	ldw	fp,40(sp)
    ba80:	ddc00917 	ldw	r23,36(sp)
    ba84:	dd800817 	ldw	r22,32(sp)
    ba88:	dd400717 	ldw	r21,28(sp)
    ba8c:	dd000617 	ldw	r20,24(sp)
    ba90:	dcc00517 	ldw	r19,20(sp)
    ba94:	dc800417 	ldw	r18,16(sp)
    ba98:	dc400317 	ldw	r17,12(sp)
    ba9c:	dc000217 	ldw	r16,8(sp)
    baa0:	dec00c04 	addi	sp,sp,48
    baa4:	0002e601 	jmpi	2e60 <_malloc_r>
    baa8:	38800117 	ldw	r2,4(r7)
    baac:	e54b883a 	add	r5,fp,r21
    bab0:	31000054 	ori	r4,r6,1
    bab4:	1080004c 	andi	r2,r2,1
    bab8:	1704b03a 	or	r2,r2,fp
    babc:	38800115 	stw	r2,4(r7)
    bac0:	29000115 	stw	r4,4(r5)
    bac4:	2987883a 	add	r3,r5,r6
    bac8:	18800117 	ldw	r2,4(r3)
    bacc:	29400204 	addi	r5,r5,8
    bad0:	b009883a 	mov	r4,r22
    bad4:	10800054 	ori	r2,r2,1
    bad8:	18800115 	stw	r2,4(r3)
    badc:	00098300 	call	9830 <_free_r>
    bae0:	003f3806 	br	b7c4 <_realloc_r+0xb0>
    bae4:	000d883a 	mov	r6,zero
    bae8:	0009883a 	mov	r4,zero
    baec:	003f5d06 	br	b864 <_realloc_r+0x150>
    baf0:	30c00217 	ldw	r3,8(r6)
    baf4:	30800317 	ldw	r2,12(r6)
    baf8:	800f883a 	mov	r7,r16
    bafc:	84000204 	addi	r16,r16,8
    bb00:	10c00215 	stw	r3,8(r2)
    bb04:	18800315 	stw	r2,12(r3)
    bb08:	003f2306 	br	b798 <_realloc_r+0x84>
    bb0c:	8809883a 	mov	r4,r17
    bb10:	900b883a 	mov	r5,r18
    bb14:	000a3dc0 	call	a3dc <memmove>
    bb18:	003fd006 	br	ba5c <_realloc_r+0x348>
    bb1c:	30800117 	ldw	r2,4(r6)
    bb20:	e0c00404 	addi	r3,fp,16
    bb24:	1108703a 	and	r4,r2,r4
    bb28:	9905883a 	add	r2,r19,r4
    bb2c:	10ff4d16 	blt	r2,r3,b864 <_realloc_r+0x150>
    bb30:	1705c83a 	sub	r2,r2,fp
    bb34:	870b883a 	add	r5,r16,fp
    bb38:	10800054 	ori	r2,r2,1
    bb3c:	28800115 	stw	r2,4(r5)
    bb40:	80c00117 	ldw	r3,4(r16)
    bb44:	00800074 	movhi	r2,1
    bb48:	10955004 	addi	r2,r2,21824
    bb4c:	b009883a 	mov	r4,r22
    bb50:	18c0004c 	andi	r3,r3,1
    bb54:	e0c6b03a 	or	r3,fp,r3
    bb58:	11400215 	stw	r5,8(r2)
    bb5c:	80c00115 	stw	r3,4(r16)
    bb60:	0011ffc0 	call	11ffc <__malloc_unlock>
    bb64:	84400204 	addi	r17,r16,8
    bb68:	003f2006 	br	b7ec <_realloc_r+0xd8>
    bb6c:	98a9883a 	add	r20,r19,r2
    bb70:	2509883a 	add	r4,r4,r20
    bb74:	e0800404 	addi	r2,fp,16
    bb78:	d9000115 	stw	r4,4(sp)
    bb7c:	20bf7016 	blt	r4,r2,b940 <_realloc_r+0x22c>
    bb80:	b8c00317 	ldw	r3,12(r23)
    bb84:	b8800217 	ldw	r2,8(r23)
    bb88:	99bfff04 	addi	r6,r19,-4
    bb8c:	01400904 	movi	r5,36
    bb90:	18800215 	stw	r2,8(r3)
    bb94:	10c00315 	stw	r3,12(r2)
    bb98:	bc400204 	addi	r17,r23,8
    bb9c:	29804136 	bltu	r5,r6,bca4 <_realloc_r+0x590>
    bba0:	008004c4 	movi	r2,19
    bba4:	9009883a 	mov	r4,r18
    bba8:	880f883a 	mov	r7,r17
    bbac:	11800f2e 	bgeu	r2,r6,bbec <_realloc_r+0x4d8>
    bbb0:	90800017 	ldw	r2,0(r18)
    bbb4:	b9c00404 	addi	r7,r23,16
    bbb8:	91000204 	addi	r4,r18,8
    bbbc:	b8800215 	stw	r2,8(r23)
    bbc0:	90c00117 	ldw	r3,4(r18)
    bbc4:	008006c4 	movi	r2,27
    bbc8:	b8c00315 	stw	r3,12(r23)
    bbcc:	1180072e 	bgeu	r2,r6,bbec <_realloc_r+0x4d8>
    bbd0:	90c00217 	ldw	r3,8(r18)
    bbd4:	b9c00604 	addi	r7,r23,24
    bbd8:	91000404 	addi	r4,r18,16
    bbdc:	b8c00415 	stw	r3,16(r23)
    bbe0:	90800317 	ldw	r2,12(r18)
    bbe4:	b8800515 	stw	r2,20(r23)
    bbe8:	31404026 	beq	r6,r5,bcec <_realloc_r+0x5d8>
    bbec:	20800017 	ldw	r2,0(r4)
    bbf0:	38800015 	stw	r2,0(r7)
    bbf4:	20c00117 	ldw	r3,4(r4)
    bbf8:	38c00115 	stw	r3,4(r7)
    bbfc:	20800217 	ldw	r2,8(r4)
    bc00:	38800215 	stw	r2,8(r7)
    bc04:	d8c00117 	ldw	r3,4(sp)
    bc08:	bf0b883a 	add	r5,r23,fp
    bc0c:	b009883a 	mov	r4,r22
    bc10:	1f05c83a 	sub	r2,r3,fp
    bc14:	10800054 	ori	r2,r2,1
    bc18:	28800115 	stw	r2,4(r5)
    bc1c:	b8c00117 	ldw	r3,4(r23)
    bc20:	00800074 	movhi	r2,1
    bc24:	10955004 	addi	r2,r2,21824
    bc28:	11400215 	stw	r5,8(r2)
    bc2c:	18c0004c 	andi	r3,r3,1
    bc30:	e0c6b03a 	or	r3,fp,r3
    bc34:	b8c00115 	stw	r3,4(r23)
    bc38:	0011ffc0 	call	11ffc <__malloc_unlock>
    bc3c:	003eeb06 	br	b7ec <_realloc_r+0xd8>
    bc40:	20800117 	ldw	r2,4(r4)
    bc44:	00ffff04 	movi	r3,-4
    bc48:	800f883a 	mov	r7,r16
    bc4c:	10c4703a 	and	r2,r2,r3
    bc50:	98a9883a 	add	r20,r19,r2
    bc54:	84000204 	addi	r16,r16,8
    bc58:	003ecf06 	br	b798 <_realloc_r+0x84>
    bc5c:	900b883a 	mov	r5,r18
    bc60:	8009883a 	mov	r4,r16
    bc64:	000a3dc0 	call	a3dc <memmove>
    bc68:	dd000017 	ldw	r20,0(sp)
    bc6c:	b80f883a 	mov	r7,r23
    bc70:	003ec906 	br	b798 <_realloc_r+0x84>
    bc74:	900b883a 	mov	r5,r18
    bc78:	8009883a 	mov	r4,r16
    bc7c:	000a3dc0 	call	a3dc <memmove>
    bc80:	b80f883a 	mov	r7,r23
    bc84:	003ec406 	br	b798 <_realloc_r+0x84>
    bc88:	90c00417 	ldw	r3,16(r18)
    bc8c:	89400604 	addi	r5,r17,24
    bc90:	91000604 	addi	r4,r18,24
    bc94:	88c00415 	stw	r3,16(r17)
    bc98:	90800517 	ldw	r2,20(r18)
    bc9c:	88800515 	stw	r2,20(r17)
    bca0:	003f6806 	br	ba44 <_realloc_r+0x330>
    bca4:	900b883a 	mov	r5,r18
    bca8:	8809883a 	mov	r4,r17
    bcac:	000a3dc0 	call	a3dc <memmove>
    bcb0:	003fd406 	br	bc04 <_realloc_r+0x4f0>
    bcb4:	90c00417 	ldw	r3,16(r18)
    bcb8:	91000604 	addi	r4,r18,24
    bcbc:	ba000804 	addi	r8,r23,32
    bcc0:	b8c00615 	stw	r3,24(r23)
    bcc4:	90800517 	ldw	r2,20(r18)
    bcc8:	b8800715 	stw	r2,28(r23)
    bccc:	003f1206 	br	b918 <_realloc_r+0x204>
    bcd0:	90c00417 	ldw	r3,16(r18)
    bcd4:	91000604 	addi	r4,r18,24
    bcd8:	ba000804 	addi	r8,r23,32
    bcdc:	b8c00615 	stw	r3,24(r23)
    bce0:	90800517 	ldw	r2,20(r18)
    bce4:	b8800715 	stw	r2,28(r23)
    bce8:	003f3206 	br	b9b4 <_realloc_r+0x2a0>
    bcec:	90c00417 	ldw	r3,16(r18)
    bcf0:	91000604 	addi	r4,r18,24
    bcf4:	b9c00804 	addi	r7,r23,32
    bcf8:	b8c00615 	stw	r3,24(r23)
    bcfc:	90800517 	ldw	r2,20(r18)
    bd00:	b8800715 	stw	r2,28(r23)
    bd04:	003fb906 	br	bbec <_realloc_r+0x4d8>

0000bd08 <__isinfd>:
    bd08:	200d883a 	mov	r6,r4
    bd0c:	0109c83a 	sub	r4,zero,r4
    bd10:	2188b03a 	or	r4,r4,r6
    bd14:	2008d7fa 	srli	r4,r4,31
    bd18:	00a00034 	movhi	r2,32768
    bd1c:	10bfffc4 	addi	r2,r2,-1
    bd20:	1144703a 	and	r2,r2,r5
    bd24:	2088b03a 	or	r4,r4,r2
    bd28:	009ffc34 	movhi	r2,32752
    bd2c:	1105c83a 	sub	r2,r2,r4
    bd30:	0087c83a 	sub	r3,zero,r2
    bd34:	10c4b03a 	or	r2,r2,r3
    bd38:	1004d7fa 	srli	r2,r2,31
    bd3c:	00c00044 	movi	r3,1
    bd40:	1885c83a 	sub	r2,r3,r2
    bd44:	f800283a 	ret

0000bd48 <__isnand>:
    bd48:	200d883a 	mov	r6,r4
    bd4c:	0109c83a 	sub	r4,zero,r4
    bd50:	2188b03a 	or	r4,r4,r6
    bd54:	2008d7fa 	srli	r4,r4,31
    bd58:	00a00034 	movhi	r2,32768
    bd5c:	10bfffc4 	addi	r2,r2,-1
    bd60:	1144703a 	and	r2,r2,r5
    bd64:	2088b03a 	or	r4,r4,r2
    bd68:	009ffc34 	movhi	r2,32752
    bd6c:	1105c83a 	sub	r2,r2,r4
    bd70:	1004d7fa 	srli	r2,r2,31
    bd74:	f800283a 	ret

0000bd78 <__sccl>:
    bd78:	28c00003 	ldbu	r3,0(r5)
    bd7c:	00801784 	movi	r2,94
    bd80:	2a000044 	addi	r8,r5,1
    bd84:	18802526 	beq	r3,r2,be1c <__sccl+0xa4>
    bd88:	180f883a 	mov	r7,r3
    bd8c:	0013883a 	mov	r9,zero
    bd90:	000d883a 	mov	r6,zero
    bd94:	0007883a 	mov	r3,zero
    bd98:	01404004 	movi	r5,256
    bd9c:	1905883a 	add	r2,r3,r4
    bda0:	18c00044 	addi	r3,r3,1
    bda4:	11800005 	stb	r6,0(r2)
    bda8:	197ffc1e 	bne	r3,r5,bd9c <__sccl+0x24>
    bdac:	38000c26 	beq	r7,zero,bde0 <__sccl+0x68>
    bdb0:	00800044 	movi	r2,1
    bdb4:	124dc83a 	sub	r6,r2,r9
    bdb8:	3905883a 	add	r2,r7,r4
    bdbc:	11800005 	stb	r6,0(r2)
    bdc0:	41400044 	addi	r5,r8,1
    bdc4:	02400b44 	movi	r9,45
    bdc8:	02801744 	movi	r10,93
    bdcc:	28bfffc3 	ldbu	r2,-1(r5)
    bdd0:	2811883a 	mov	r8,r5
    bdd4:	12400726 	beq	r2,r9,bdf4 <__sccl+0x7c>
    bdd8:	12800226 	beq	r2,r10,bde4 <__sccl+0x6c>
    bddc:	1000031e 	bne	r2,zero,bdec <__sccl+0x74>
    bde0:	423fffc4 	addi	r8,r8,-1
    bde4:	4005883a 	mov	r2,r8
    bde8:	f800283a 	ret
    bdec:	100f883a 	mov	r7,r2
    bdf0:	003ff106 	br	bdb8 <__sccl+0x40>
    bdf4:	28c00003 	ldbu	r3,0(r5)
    bdf8:	1a800d26 	beq	r3,r10,be30 <__sccl+0xb8>
    bdfc:	19c00c16 	blt	r3,r7,be30 <__sccl+0xb8>
    be00:	21c5883a 	add	r2,r4,r7
    be04:	39c00044 	addi	r7,r7,1
    be08:	11800045 	stb	r6,1(r2)
    be0c:	10800044 	addi	r2,r2,1
    be10:	38fffc16 	blt	r7,r3,be04 <__sccl+0x8c>
    be14:	29400084 	addi	r5,r5,2
    be18:	003fec06 	br	bdcc <__sccl+0x54>
    be1c:	29c00043 	ldbu	r7,1(r5)
    be20:	02400044 	movi	r9,1
    be24:	2a000084 	addi	r8,r5,2
    be28:	480d883a 	mov	r6,r9
    be2c:	003fd906 	br	bd94 <__sccl+0x1c>
    be30:	01c00b44 	movi	r7,45
    be34:	003fe006 	br	bdb8 <__sccl+0x40>

0000be38 <nanf>:
    be38:	009ff034 	movhi	r2,32704
    be3c:	f800283a 	ret

0000be40 <match>:
    be40:	21800017 	ldw	r6,0(r4)
    be44:	01c01004 	movi	r7,64
    be48:	02001684 	movi	r8,90
    be4c:	28800007 	ldb	r2,0(r5)
    be50:	29400044 	addi	r5,r5,1
    be54:	10000826 	beq	r2,zero,be78 <match+0x38>
    be58:	31800044 	addi	r6,r6,1
    be5c:	30c00007 	ldb	r3,0(r6)
    be60:	38c0020e 	bge	r7,r3,be6c <match+0x2c>
    be64:	40c00116 	blt	r8,r3,be6c <match+0x2c>
    be68:	18c00804 	addi	r3,r3,32
    be6c:	18bff726 	beq	r3,r2,be4c <match+0xc>
    be70:	0005883a 	mov	r2,zero
    be74:	f800283a 	ret
    be78:	30800044 	addi	r2,r6,1
    be7c:	20800015 	stw	r2,0(r4)
    be80:	00800044 	movi	r2,1
    be84:	f800283a 	ret

0000be88 <_strtod_r>:
    be88:	deffde04 	addi	sp,sp,-136
    be8c:	df002015 	stw	fp,128(sp)
    be90:	dd401d15 	stw	r21,116(sp)
    be94:	dc401915 	stw	r17,100(sp)
    be98:	dfc02115 	stw	ra,132(sp)
    be9c:	ddc01f15 	stw	r23,124(sp)
    bea0:	dd801e15 	stw	r22,120(sp)
    bea4:	dd001c15 	stw	r20,112(sp)
    bea8:	dcc01b15 	stw	r19,108(sp)
    beac:	dc801a15 	stw	r18,104(sp)
    beb0:	dc001815 	stw	r16,96(sp)
    beb4:	2823883a 	mov	r17,r5
    beb8:	202b883a 	mov	r21,r4
    bebc:	d9801515 	stw	r6,84(sp)
    bec0:	d8000915 	stw	zero,36(sp)
    bec4:	d8000a15 	stw	zero,40(sp)
    bec8:	d9400415 	stw	r5,16(sp)
    becc:	df000904 	addi	fp,sp,36
    bed0:	da000417 	ldw	r8,16(sp)
    bed4:	00800b44 	movi	r2,45
    bed8:	40c00003 	ldbu	r3,0(r8)
    bedc:	10c03536 	bltu	r2,r3,bfb4 <_strtod_r+0x12c>
    bee0:	18c5883a 	add	r2,r3,r3
    bee4:	1085883a 	add	r2,r2,r2
    bee8:	00c00074 	movhi	r3,1
    beec:	18efbf04 	addi	r3,r3,-16644
    bef0:	10c5883a 	add	r2,r2,r3
    bef4:	11000017 	ldw	r4,0(r2)
    bef8:	2000683a 	jmp	r4
    befc:	0000c0f0 	cmpltui	zero,zero,771
    bf00:	0000bfb4 	movhi	zero,766
    bf04:	0000bfb4 	movhi	zero,766
    bf08:	0000bfb4 	movhi	zero,766
    bf0c:	0000bfb4 	movhi	zero,766
    bf10:	0000bfb4 	movhi	zero,766
    bf14:	0000bfb4 	movhi	zero,766
    bf18:	0000bfb4 	movhi	zero,766
    bf1c:	0000bfb4 	movhi	zero,766
    bf20:	0000c408 	cmpgei	zero,zero,784
    bf24:	0000c408 	cmpgei	zero,zero,784
    bf28:	0000c408 	cmpgei	zero,zero,784
    bf2c:	0000c408 	cmpgei	zero,zero,784
    bf30:	0000c408 	cmpgei	zero,zero,784
    bf34:	0000bfb4 	movhi	zero,766
    bf38:	0000bfb4 	movhi	zero,766
    bf3c:	0000bfb4 	movhi	zero,766
    bf40:	0000bfb4 	movhi	zero,766
    bf44:	0000bfb4 	movhi	zero,766
    bf48:	0000bfb4 	movhi	zero,766
    bf4c:	0000bfb4 	movhi	zero,766
    bf50:	0000bfb4 	movhi	zero,766
    bf54:	0000bfb4 	movhi	zero,766
    bf58:	0000bfb4 	movhi	zero,766
    bf5c:	0000bfb4 	movhi	zero,766
    bf60:	0000bfb4 	movhi	zero,766
    bf64:	0000bfb4 	movhi	zero,766
    bf68:	0000bfb4 	movhi	zero,766
    bf6c:	0000bfb4 	movhi	zero,766
    bf70:	0000bfb4 	movhi	zero,766
    bf74:	0000bfb4 	movhi	zero,766
    bf78:	0000bfb4 	movhi	zero,766
    bf7c:	0000c408 	cmpgei	zero,zero,784
    bf80:	0000bfb4 	movhi	zero,766
    bf84:	0000bfb4 	movhi	zero,766
    bf88:	0000bfb4 	movhi	zero,766
    bf8c:	0000bfb4 	movhi	zero,766
    bf90:	0000bfb4 	movhi	zero,766
    bf94:	0000bfb4 	movhi	zero,766
    bf98:	0000bfb4 	movhi	zero,766
    bf9c:	0000bfb4 	movhi	zero,766
    bfa0:	0000bfb4 	movhi	zero,766
    bfa4:	0000bfb4 	movhi	zero,766
    bfa8:	0000c3e8 	cmpgeui	zero,zero,783
    bfac:	0000bfb4 	movhi	zero,766
    bfb0:	0000c414 	movui	zero,784
    bfb4:	d8001115 	stw	zero,68(sp)
    bfb8:	40c00007 	ldb	r3,0(r8)
    bfbc:	00800c04 	movi	r2,48
    bfc0:	1880d026 	beq	r3,r2,c304 <_strtod_r+0x47c>
    bfc4:	001f883a 	mov	r15,zero
    bfc8:	41000007 	ldb	r4,0(r8)
    bfcc:	00c00bc4 	movi	r3,47
    bfd0:	402d883a 	mov	r22,r8
    bfd4:	1903470e 	bge	r3,r4,ccf4 <_strtod_r+0xe6c>
    bfd8:	00800e44 	movi	r2,57
    bfdc:	11034516 	blt	r2,r4,ccf4 <_strtod_r+0xe6c>
    bfe0:	180f883a 	mov	r7,r3
    bfe4:	1013883a 	mov	r9,r2
    bfe8:	4007883a 	mov	r3,r8
    bfec:	000d883a 	mov	r6,zero
    bff0:	0029883a 	mov	r20,zero
    bff4:	0021883a 	mov	r16,zero
    bff8:	01400204 	movi	r5,8
    bffc:	028003c4 	movi	r10,15
    c000:	29803116 	blt	r5,r6,c0c8 <_strtod_r+0x240>
    c004:	a08002a4 	muli	r2,r20,10
    c008:	1105883a 	add	r2,r2,r4
    c00c:	153ff404 	addi	r20,r2,-48
    c010:	1a000044 	addi	r8,r3,1
    c014:	da000415 	stw	r8,16(sp)
    c018:	41000007 	ldb	r4,0(r8)
    c01c:	31800044 	addi	r6,r6,1
    c020:	4007883a 	mov	r3,r8
    c024:	3900010e 	bge	r7,r4,c02c <_strtod_r+0x1a4>
    c028:	493ff50e 	bge	r9,r4,c000 <_strtod_r+0x178>
    c02c:	00800b84 	movi	r2,46
    c030:	2080c126 	beq	r4,r2,c338 <_strtod_r+0x4b0>
    c034:	3027883a 	mov	r19,r6
    c038:	0025883a 	mov	r18,zero
    c03c:	0015883a 	mov	r10,zero
    c040:	000f883a 	mov	r7,zero
    c044:	00801944 	movi	r2,101
    c048:	20802426 	beq	r4,r2,c0dc <_strtod_r+0x254>
    c04c:	00801144 	movi	r2,69
    c050:	20802226 	beq	r4,r2,c0dc <_strtod_r+0x254>
    c054:	9816c03a 	cmpne	r11,r19,zero
    c058:	000b883a 	mov	r5,zero
    c05c:	5800631e 	bne	r11,zero,c1ec <_strtod_r+0x364>
    c060:	3800c126 	beq	r7,zero,c368 <_strtod_r+0x4e0>
    c064:	d8c01517 	ldw	r3,84(sp)
    c068:	18000226 	beq	r3,zero,c074 <_strtod_r+0x1ec>
    c06c:	d8800417 	ldw	r2,16(sp)
    c070:	18800015 	stw	r2,0(r3)
    c074:	d9001117 	ldw	r4,68(sp)
    c078:	2005003a 	cmpeq	r2,r4,zero
    c07c:	10001f1e 	bne	r2,zero,c0fc <_strtod_r+0x274>
    c080:	e0800017 	ldw	r2,0(fp)
    c084:	e0c00117 	ldw	r3,4(fp)
    c088:	1009883a 	mov	r4,r2
    c08c:	1960003c 	xorhi	r5,r3,32768
    c090:	2005883a 	mov	r2,r4
    c094:	2807883a 	mov	r3,r5
    c098:	dfc02117 	ldw	ra,132(sp)
    c09c:	df002017 	ldw	fp,128(sp)
    c0a0:	ddc01f17 	ldw	r23,124(sp)
    c0a4:	dd801e17 	ldw	r22,120(sp)
    c0a8:	dd401d17 	ldw	r21,116(sp)
    c0ac:	dd001c17 	ldw	r20,112(sp)
    c0b0:	dcc01b17 	ldw	r19,108(sp)
    c0b4:	dc801a17 	ldw	r18,104(sp)
    c0b8:	dc401917 	ldw	r17,100(sp)
    c0bc:	dc001817 	ldw	r16,96(sp)
    c0c0:	dec02204 	addi	sp,sp,136
    c0c4:	f800283a 	ret
    c0c8:	51bfd116 	blt	r10,r6,c010 <_strtod_r+0x188>
    c0cc:	808002a4 	muli	r2,r16,10
    c0d0:	1105883a 	add	r2,r2,r4
    c0d4:	143ff404 	addi	r16,r2,-48
    c0d8:	003fcd06 	br	c010 <_strtod_r+0x188>
    c0dc:	9816c03a 	cmpne	r11,r19,zero
    c0e0:	5800091e 	bne	r11,zero,c108 <_strtod_r+0x280>
    c0e4:	3800081e 	bne	r7,zero,c108 <_strtod_r+0x280>
    c0e8:	7805003a 	cmpeq	r2,r15,zero
    c0ec:	10000626 	beq	r2,zero,c108 <_strtod_r+0x280>
    c0f0:	d8001115 	stw	zero,68(sp)
    c0f4:	dc400415 	stw	r17,16(sp)
    c0f8:	003fda06 	br	c064 <_strtod_r+0x1dc>
    c0fc:	e1000017 	ldw	r4,0(fp)
    c100:	e1400117 	ldw	r5,4(fp)
    c104:	003fe206 	br	c090 <_strtod_r+0x208>
    c108:	dc400417 	ldw	r17,16(sp)
    c10c:	00800ac4 	movi	r2,43
    c110:	8a000044 	addi	r8,r17,1
    c114:	da000415 	stw	r8,16(sp)
    c118:	88c00047 	ldb	r3,1(r17)
    c11c:	4009883a 	mov	r4,r8
    c120:	1880bf26 	beq	r3,r2,c420 <_strtod_r+0x598>
    c124:	00800b44 	movi	r2,45
    c128:	18834526 	beq	r3,r2,ce40 <_strtod_r+0xfb8>
    c12c:	1809883a 	mov	r4,r3
    c130:	20fff404 	addi	r3,r4,-48
    c134:	00800244 	movi	r2,9
    c138:	001d883a 	mov	r14,zero
    c13c:	10c0bf36 	bltu	r2,r3,c43c <_strtod_r+0x5b4>
    c140:	00800c04 	movi	r2,48
    c144:	2080061e 	bne	r4,r2,c160 <_strtod_r+0x2d8>
    c148:	da000417 	ldw	r8,16(sp)
    c14c:	2005883a 	mov	r2,r4
    c150:	42000044 	addi	r8,r8,1
    c154:	da000415 	stw	r8,16(sp)
    c158:	41000007 	ldb	r4,0(r8)
    c15c:	20bffc26 	beq	r4,r2,c150 <_strtod_r+0x2c8>
    c160:	20fff3c4 	addi	r3,r4,-49
    c164:	00800204 	movi	r2,8
    c168:	10ffbb36 	bltu	r2,r3,c058 <_strtod_r+0x1d0>
    c16c:	da000417 	ldw	r8,16(sp)
    c170:	227ff404 	addi	r9,r4,-48
    c174:	03000bc4 	movi	r12,47
    c178:	4007883a 	mov	r3,r8
    c17c:	42000044 	addi	r8,r8,1
    c180:	da000415 	stw	r8,16(sp)
    c184:	41000007 	ldb	r4,0(r8)
    c188:	61000d0e 	bge	r12,r4,c1c0 <_strtod_r+0x338>
    c18c:	00800e44 	movi	r2,57
    c190:	11000b16 	blt	r2,r4,c1c0 <_strtod_r+0x338>
    c194:	601b883a 	mov	r13,r12
    c198:	1019883a 	mov	r12,r2
    c19c:	00000106 	br	c1a4 <_strtod_r+0x31c>
    c1a0:	61000716 	blt	r12,r4,c1c0 <_strtod_r+0x338>
    c1a4:	488002a4 	muli	r2,r9,10
    c1a8:	42000044 	addi	r8,r8,1
    c1ac:	da000415 	stw	r8,16(sp)
    c1b0:	2085883a 	add	r2,r4,r2
    c1b4:	41000007 	ldb	r4,0(r8)
    c1b8:	127ff404 	addi	r9,r2,-48
    c1bc:	693ff816 	blt	r13,r4,c1a0 <_strtod_r+0x318>
    c1c0:	40c7c83a 	sub	r3,r8,r3
    c1c4:	00800204 	movi	r2,8
    c1c8:	10c2e416 	blt	r2,r3,cd5c <_strtod_r+0xed4>
    c1cc:	009387c4 	movi	r2,19999
    c1d0:	480b883a 	mov	r5,r9
    c1d4:	1240010e 	bge	r2,r9,c1dc <_strtod_r+0x354>
    c1d8:	100b883a 	mov	r5,r2
    c1dc:	7005003a 	cmpeq	r2,r14,zero
    c1e0:	103f9e1e 	bne	r2,zero,c05c <_strtod_r+0x1d4>
    c1e4:	014bc83a 	sub	r5,zero,r5
    c1e8:	583f9d26 	beq	r11,zero,c060 <_strtod_r+0x1d8>
    c1ec:	2a8bc83a 	sub	r5,r5,r10
    c1f0:	d9400f15 	stw	r5,60(sp)
    c1f4:	30007a1e 	bne	r6,zero,c3e0 <_strtod_r+0x558>
    c1f8:	dcc01215 	stw	r19,72(sp)
    c1fc:	00800404 	movi	r2,16
    c200:	9825883a 	mov	r18,r19
    c204:	14c0010e 	bge	r2,r19,c20c <_strtod_r+0x384>
    c208:	1025883a 	mov	r18,r2
    c20c:	a009883a 	mov	r4,r20
    c210:	0010f340 	call	10f34 <__floatunsidf>
    c214:	100f883a 	mov	r7,r2
    c218:	e0800015 	stw	r2,0(fp)
    c21c:	00800244 	movi	r2,9
    c220:	e0c00115 	stw	r3,4(fp)
    c224:	1480160e 	bge	r2,r18,c280 <_strtod_r+0x3f8>
    c228:	900c90fa 	slli	r6,r18,3
    c22c:	01000074 	movhi	r4,1
    c230:	21138504 	addi	r4,r4,19988
    c234:	180b883a 	mov	r5,r3
    c238:	310d883a 	add	r6,r6,r4
    c23c:	30ffef17 	ldw	r3,-68(r6)
    c240:	30bfee17 	ldw	r2,-72(r6)
    c244:	3809883a 	mov	r4,r7
    c248:	180f883a 	mov	r7,r3
    c24c:	100d883a 	mov	r6,r2
    c250:	00103a40 	call	103a4 <__muldf3>
    c254:	8009883a 	mov	r4,r16
    c258:	1823883a 	mov	r17,r3
    c25c:	1021883a 	mov	r16,r2
    c260:	0010f340 	call	10f34 <__floatunsidf>
    c264:	880b883a 	mov	r5,r17
    c268:	180f883a 	mov	r7,r3
    c26c:	8009883a 	mov	r4,r16
    c270:	100d883a 	mov	r6,r2
    c274:	00103300 	call	10330 <__adddf3>
    c278:	e0c00115 	stw	r3,4(fp)
    c27c:	e0800015 	stw	r2,0(fp)
    c280:	010003c4 	movi	r4,15
    c284:	24c09816 	blt	r4,r19,c4e8 <_strtod_r+0x660>
    c288:	d9800f17 	ldw	r6,60(sp)
    c28c:	303f7526 	beq	r6,zero,c064 <_strtod_r+0x1dc>
    c290:	0183be0e 	bge	zero,r6,d18c <_strtod_r+0x1304>
    c294:	00800584 	movi	r2,22
    c298:	1182b20e 	bge	r2,r6,cd64 <_strtod_r+0xedc>
    c29c:	d8c00f17 	ldw	r3,60(sp)
    c2a0:	24e3c83a 	sub	r17,r4,r19
    c2a4:	88800584 	addi	r2,r17,22
    c2a8:	10c08f16 	blt	r2,r3,c4e8 <_strtod_r+0x660>
    c2ac:	880890fa 	slli	r4,r17,3
    c2b0:	04000074 	movhi	r16,1
    c2b4:	84138504 	addi	r16,r16,19988
    c2b8:	e0800017 	ldw	r2,0(fp)
    c2bc:	2409883a 	add	r4,r4,r16
    c2c0:	22000017 	ldw	r8,0(r4)
    c2c4:	22400117 	ldw	r9,4(r4)
    c2c8:	e0c00117 	ldw	r3,4(fp)
    c2cc:	1009883a 	mov	r4,r2
    c2d0:	480f883a 	mov	r7,r9
    c2d4:	180b883a 	mov	r5,r3
    c2d8:	400d883a 	mov	r6,r8
    c2dc:	00103a40 	call	103a4 <__muldf3>
    c2e0:	d9000f17 	ldw	r4,60(sp)
    c2e4:	180b883a 	mov	r5,r3
    c2e8:	2455c83a 	sub	r10,r4,r17
    c2ec:	501490fa 	slli	r10,r10,3
    c2f0:	1009883a 	mov	r4,r2
    c2f4:	5415883a 	add	r10,r10,r16
    c2f8:	52000017 	ldw	r8,0(r10)
    c2fc:	52400117 	ldw	r9,4(r10)
    c300:	0002a206 	br	cd8c <_strtod_r+0xf04>
    c304:	40c00047 	ldb	r3,1(r8)
    c308:	00801604 	movi	r2,88
    c30c:	18804e26 	beq	r3,r2,c448 <_strtod_r+0x5c0>
    c310:	00801e04 	movi	r2,120
    c314:	18804c26 	beq	r3,r2,c448 <_strtod_r+0x5c0>
    c318:	42000044 	addi	r8,r8,1
    c31c:	da000415 	stw	r8,16(sp)
    c320:	40c00007 	ldb	r3,0(r8)
    c324:	00800c04 	movi	r2,48
    c328:	18bffb26 	beq	r3,r2,c318 <_strtod_r+0x490>
    c32c:	183f4d26 	beq	r3,zero,c064 <_strtod_r+0x1dc>
    c330:	03c00044 	movi	r15,1
    c334:	003f2406 	br	bfc8 <_strtod_r+0x140>
    c338:	42000044 	addi	r8,r8,1
    c33c:	da000415 	stw	r8,16(sp)
    c340:	19000047 	ldb	r4,1(r3)
    c344:	3000b726 	beq	r6,zero,c624 <_strtod_r+0x79c>
    c348:	3027883a 	mov	r19,r6
    c34c:	0015883a 	mov	r10,zero
    c350:	000f883a 	mov	r7,zero
    c354:	227ff404 	addi	r9,r4,-48
    c358:	00800244 	movi	r2,9
    c35c:	1242592e 	bgeu	r2,r9,ccc4 <_strtod_r+0xe3c>
    c360:	04800044 	movi	r18,1
    c364:	003f3706 	br	c044 <_strtod_r+0x1bc>
    c368:	7804c03a 	cmpne	r2,r15,zero
    c36c:	103f3d1e 	bne	r2,zero,c064 <_strtod_r+0x1dc>
    c370:	9004c03a 	cmpne	r2,r18,zero
    c374:	103f5e1e 	bne	r2,zero,c0f0 <_strtod_r+0x268>
    c378:	00801384 	movi	r2,78
    c37c:	2083a226 	beq	r4,r2,d208 <_strtod_r+0x1380>
    c380:	11039d16 	blt	r2,r4,d1f8 <_strtod_r+0x1370>
    c384:	00801244 	movi	r2,73
    c388:	20bf591e 	bne	r4,r2,c0f0 <_strtod_r+0x268>
    c38c:	dc000404 	addi	r16,sp,16
    c390:	8009883a 	mov	r4,r16
    c394:	01400074 	movhi	r5,1
    c398:	2953ce04 	addi	r5,r5,20280
    c39c:	000be400 	call	be40 <match>
    c3a0:	103f5326 	beq	r2,zero,c0f0 <_strtod_r+0x268>
    c3a4:	d8800417 	ldw	r2,16(sp)
    c3a8:	8009883a 	mov	r4,r16
    c3ac:	01400074 	movhi	r5,1
    c3b0:	2953cf04 	addi	r5,r5,20284
    c3b4:	123fffc4 	addi	r8,r2,-1
    c3b8:	da000415 	stw	r8,16(sp)
    c3bc:	000be400 	call	be40 <match>
    c3c0:	1000031e 	bne	r2,zero,c3d0 <_strtod_r+0x548>
    c3c4:	d8800417 	ldw	r2,16(sp)
    c3c8:	12000044 	addi	r8,r2,1
    c3cc:	da000415 	stw	r8,16(sp)
    c3d0:	019ffc34 	movhi	r6,32752
    c3d4:	e1800115 	stw	r6,4(fp)
    c3d8:	e0000015 	stw	zero,0(fp)
    c3dc:	003f2106 	br	c064 <_strtod_r+0x1dc>
    c3e0:	d9801215 	stw	r6,72(sp)
    c3e4:	003f8506 	br	c1fc <_strtod_r+0x374>
    c3e8:	d8001115 	stw	zero,68(sp)
    c3ec:	42000044 	addi	r8,r8,1
    c3f0:	da000415 	stw	r8,16(sp)
    c3f4:	40800007 	ldb	r2,0(r8)
    c3f8:	103eef1e 	bne	r2,zero,bfb8 <_strtod_r+0x130>
    c3fc:	d8001115 	stw	zero,68(sp)
    c400:	dc400415 	stw	r17,16(sp)
    c404:	003f1706 	br	c064 <_strtod_r+0x1dc>
    c408:	42000044 	addi	r8,r8,1
    c40c:	da000415 	stw	r8,16(sp)
    c410:	003eaf06 	br	bed0 <_strtod_r+0x48>
    c414:	00800044 	movi	r2,1
    c418:	d8801115 	stw	r2,68(sp)
    c41c:	003ff306 	br	c3ec <_strtod_r+0x564>
    c420:	001d883a 	mov	r14,zero
    c424:	42000044 	addi	r8,r8,1
    c428:	da000415 	stw	r8,16(sp)
    c42c:	21000047 	ldb	r4,1(r4)
    c430:	00800244 	movi	r2,9
    c434:	20fff404 	addi	r3,r4,-48
    c438:	10ff412e 	bgeu	r2,r3,c140 <_strtod_r+0x2b8>
    c43c:	000b883a 	mov	r5,zero
    c440:	dc400415 	stw	r17,16(sp)
    c444:	003f0506 	br	c05c <_strtod_r+0x1d4>
    c448:	d8c01117 	ldw	r3,68(sp)
    c44c:	04800074 	movhi	r18,1
    c450:	94965a04 	addi	r18,r18,22888
    c454:	d8800504 	addi	r2,sp,20
    c458:	a809883a 	mov	r4,r21
    c45c:	d9400404 	addi	r5,sp,16
    c460:	900d883a 	mov	r6,r18
    c464:	d9c00604 	addi	r7,sp,24
    c468:	d8800015 	stw	r2,0(sp)
    c46c:	d8c00115 	stw	r3,4(sp)
    c470:	000e5b40 	call	e5b4 <__gethex>
    c474:	140001cc 	andi	r16,r2,7
    c478:	1027883a 	mov	r19,r2
    c47c:	803ef926 	beq	r16,zero,c064 <_strtod_r+0x1dc>
    c480:	05000184 	movi	r20,6
    c484:	853f1a26 	beq	r16,r20,c0f0 <_strtod_r+0x268>
    c488:	d9800517 	ldw	r6,20(sp)
    c48c:	30000626 	beq	r6,zero,c4a8 <_strtod_r+0x620>
    c490:	91400017 	ldw	r5,0(r18)
    c494:	d9000d04 	addi	r4,sp,52
    c498:	000a95c0 	call	a95c <__copybits>
    c49c:	d9400517 	ldw	r5,20(sp)
    c4a0:	a809883a 	mov	r4,r21
    c4a4:	000a4bc0 	call	a4bc <_Bfree>
    c4a8:	d9400617 	ldw	r5,24(sp)
    c4ac:	a4024136 	bltu	r20,r16,cdb4 <_strtod_r+0xf2c>
    c4b0:	8405883a 	add	r2,r16,r16
    c4b4:	1085883a 	add	r2,r2,r2
    c4b8:	00c00074 	movhi	r3,1
    c4bc:	18f13304 	addi	r3,r3,-15156
    c4c0:	10c5883a 	add	r2,r2,r3
    c4c4:	11000017 	ldw	r4,0(r2)
    c4c8:	2000683a 	jmp	r4
    c4cc:	0000cdf4 	movhi	zero,823
    c4d0:	0000ce00 	call	ce0 <_readCam+0x74>
    c4d4:	0000cda4 	muli	zero,zero,822
    c4d8:	0000cdcc 	andi	zero,zero,823
    c4dc:	0000cddc 	xori	zero,zero,823
    c4e0:	0000ce00 	call	ce0 <_readCam+0x74>
    c4e4:	0000cdf4 	movhi	zero,823
    c4e8:	d8c00f17 	ldw	r3,60(sp)
    c4ec:	9c85c83a 	sub	r2,r19,r18
    c4f0:	18a1883a 	add	r16,r3,r2
    c4f4:	0402d00e 	bge	zero,r16,d038 <_strtod_r+0x11b0>
    c4f8:	814003cc 	andi	r5,r16,15
    c4fc:	28000f26 	beq	r5,zero,c53c <_strtod_r+0x6b4>
    c500:	280a90fa 	slli	r5,r5,3
    c504:	01000074 	movhi	r4,1
    c508:	21138504 	addi	r4,r4,19988
    c50c:	e0800017 	ldw	r2,0(fp)
    c510:	290b883a 	add	r5,r5,r4
    c514:	2a000017 	ldw	r8,0(r5)
    c518:	e0c00117 	ldw	r3,4(fp)
    c51c:	2a400117 	ldw	r9,4(r5)
    c520:	1009883a 	mov	r4,r2
    c524:	180b883a 	mov	r5,r3
    c528:	480f883a 	mov	r7,r9
    c52c:	400d883a 	mov	r6,r8
    c530:	00103a40 	call	103a4 <__muldf3>
    c534:	e0c00115 	stw	r3,4(fp)
    c538:	e0800015 	stw	r2,0(fp)
    c53c:	00bffc04 	movi	r2,-16
    c540:	808c703a 	and	r6,r16,r2
    c544:	30005b26 	beq	r6,zero,c6b4 <_strtod_r+0x82c>
    c548:	00804d04 	movi	r2,308
    c54c:	1181fd16 	blt	r2,r6,cd44 <_strtod_r+0xebc>
    c550:	3021d13a 	srai	r16,r6,4
    c554:	00800044 	movi	r2,1
    c558:	1403610e 	bge	r2,r16,d2e0 <_strtod_r+0x1458>
    c55c:	102f883a 	mov	r23,r2
    c560:	0025883a 	mov	r18,zero
    c564:	04400074 	movhi	r17,1
    c568:	8c53b704 	addi	r17,r17,20188
    c56c:	8080004c 	andi	r2,r16,1
    c570:	1005003a 	cmpeq	r2,r2,zero
    c574:	1000091e 	bne	r2,zero,c59c <_strtod_r+0x714>
    c578:	e0800017 	ldw	r2,0(fp)
    c57c:	e0c00117 	ldw	r3,4(fp)
    c580:	89800017 	ldw	r6,0(r17)
    c584:	89c00117 	ldw	r7,4(r17)
    c588:	180b883a 	mov	r5,r3
    c58c:	1009883a 	mov	r4,r2
    c590:	00103a40 	call	103a4 <__muldf3>
    c594:	e0c00115 	stw	r3,4(fp)
    c598:	e0800015 	stw	r2,0(fp)
    c59c:	8021d07a 	srai	r16,r16,1
    c5a0:	94800044 	addi	r18,r18,1
    c5a4:	8c400204 	addi	r17,r17,8
    c5a8:	bc3ff016 	blt	r23,r16,c56c <_strtod_r+0x6e4>
    c5ac:	900e90fa 	slli	r7,r18,3
    c5b0:	01800074 	movhi	r6,1
    c5b4:	3193b704 	addi	r6,r6,20188
    c5b8:	e2000117 	ldw	r8,4(fp)
    c5bc:	398f883a 	add	r7,r7,r6
    c5c0:	38800017 	ldw	r2,0(r7)
    c5c4:	38c00117 	ldw	r3,4(r7)
    c5c8:	e1000017 	ldw	r4,0(fp)
    c5cc:	01bf2c34 	movhi	r6,64688
    c5d0:	418d883a 	add	r6,r8,r6
    c5d4:	300b883a 	mov	r5,r6
    c5d8:	180f883a 	mov	r7,r3
    c5dc:	100d883a 	mov	r6,r2
    c5e0:	00103a40 	call	103a4 <__muldf3>
    c5e4:	1009883a 	mov	r4,r2
    c5e8:	180b883a 	mov	r5,r3
    c5ec:	199ffc2c 	andhi	r6,r3,32752
    c5f0:	009f2834 	movhi	r2,31904
    c5f4:	e1000015 	stw	r4,0(fp)
    c5f8:	e1400115 	stw	r5,4(fp)
    c5fc:	1181d136 	bltu	r2,r6,cd44 <_strtod_r+0xebc>
    c600:	009f2434 	movhi	r2,31888
    c604:	1183202e 	bgeu	r2,r6,d288 <_strtod_r+0x1400>
    c608:	d8001415 	stw	zero,80(sp)
    c60c:	019ffc34 	movhi	r6,32752
    c610:	31bfffc4 	addi	r6,r6,-1
    c614:	01ffffc4 	movi	r7,-1
    c618:	e1800115 	stw	r6,4(fp)
    c61c:	e1c00015 	stw	r7,0(fp)
    c620:	00002506 	br	c6b8 <_strtod_r+0x830>
    c624:	00800c04 	movi	r2,48
    c628:	2083151e 	bne	r4,r2,d280 <_strtod_r+0x13f8>
    c62c:	2005883a 	mov	r2,r4
    c630:	000f883a 	mov	r7,zero
    c634:	42000044 	addi	r8,r8,1
    c638:	da000415 	stw	r8,16(sp)
    c63c:	41000007 	ldb	r4,0(r8)
    c640:	39c00044 	addi	r7,r7,1
    c644:	20bffb26 	beq	r4,r2,c634 <_strtod_r+0x7ac>
    c648:	20fff3c4 	addi	r3,r4,-49
    c64c:	00800204 	movi	r2,8
    c650:	10c1b836 	bltu	r2,r3,cd34 <_strtod_r+0xeac>
    c654:	dd800417 	ldw	r22,16(sp)
    c658:	3815883a 	mov	r10,r7
    c65c:	227ff404 	addi	r9,r4,-48
    c660:	b011883a 	mov	r8,r22
    c664:	0027883a 	mov	r19,zero
    c668:	01c00044 	movi	r7,1
    c66c:	4801fe26 	beq	r9,zero,ce68 <_strtod_r+0xfe0>
    c670:	00800044 	movi	r2,1
    c674:	51d5883a 	add	r10,r10,r7
    c678:	11c31f0e 	bge	r2,r7,d2f8 <_strtod_r+0x1470>
    c67c:	1009883a 	mov	r4,r2
    c680:	9807883a 	mov	r3,r19
    c684:	02c00204 	movi	r11,8
    c688:	03000404 	movi	r12,16
    c68c:	00000306 	br	c69c <_strtod_r+0x814>
    c690:	a50002a4 	muli	r20,r20,10
    c694:	21000044 	addi	r4,r4,1
    c698:	21c1eb26 	beq	r4,r7,ce48 <_strtod_r+0xfc0>
    c69c:	18c00044 	addi	r3,r3,1
    c6a0:	18bfffc4 	addi	r2,r3,-1
    c6a4:	58bffa0e 	bge	r11,r2,c690 <_strtod_r+0x808>
    c6a8:	60fffa16 	blt	r12,r3,c694 <_strtod_r+0x80c>
    c6ac:	840002a4 	muli	r16,r16,10
    c6b0:	003ff806 	br	c694 <_strtod_r+0x80c>
    c6b4:	d8001415 	stw	zero,80(sp)
    c6b8:	d9801217 	ldw	r6,72(sp)
    c6bc:	a809883a 	mov	r4,r21
    c6c0:	b00b883a 	mov	r5,r22
    c6c4:	980f883a 	mov	r7,r19
    c6c8:	dd000015 	stw	r20,0(sp)
    c6cc:	000b3900 	call	b390 <__s2b>
    c6d0:	d9800f17 	ldw	r6,60(sp)
    c6d4:	11000304 	addi	r4,r2,12
    c6d8:	d8801015 	stw	r2,64(sp)
    c6dc:	300c803a 	cmplt	r6,r6,zero
    c6e0:	d9001715 	stw	r4,92(sp)
    c6e4:	d9801615 	stw	r6,88(sp)
    c6e8:	d8801017 	ldw	r2,64(sp)
    c6ec:	a809883a 	mov	r4,r21
    c6f0:	11400117 	ldw	r5,4(r2)
    c6f4:	000aa3c0 	call	aa3c <_Balloc>
    c6f8:	d8c01017 	ldw	r3,64(sp)
    c6fc:	d9401717 	ldw	r5,92(sp)
    c700:	11000304 	addi	r4,r2,12
    c704:	19800417 	ldw	r6,16(r3)
    c708:	102f883a 	mov	r23,r2
    c70c:	318d883a 	add	r6,r6,r6
    c710:	318d883a 	add	r6,r6,r6
    c714:	31800204 	addi	r6,r6,8
    c718:	00036840 	call	3684 <memcpy>
    c71c:	e2000017 	ldw	r8,0(fp)
    c720:	e2400117 	ldw	r9,4(fp)
    c724:	d9800304 	addi	r6,sp,12
    c728:	400b883a 	mov	r5,r8
    c72c:	a809883a 	mov	r4,r21
    c730:	d9c00204 	addi	r7,sp,8
    c734:	d9800015 	stw	r6,0(sp)
    c738:	480d883a 	mov	r6,r9
    c73c:	000aaf80 	call	aaf8 <__d2b>
    c740:	a809883a 	mov	r4,r21
    c744:	01400044 	movi	r5,1
    c748:	d8800515 	stw	r2,20(sp)
    c74c:	000b1340 	call	b134 <__i2b>
    c750:	102d883a 	mov	r22,r2
    c754:	d8801617 	ldw	r2,88(sp)
    c758:	1001051e 	bne	r2,zero,cb70 <_strtod_r+0xce8>
    c75c:	dd000f17 	ldw	r20,60(sp)
    c760:	000f883a 	mov	r7,zero
    c764:	0013883a 	mov	r9,zero
    c768:	a011883a 	mov	r8,r20
    c76c:	d8800217 	ldw	r2,8(sp)
    c770:	1000fd16 	blt	r2,zero,cb68 <_strtod_r+0xce0>
    c774:	388f883a 	add	r7,r7,r2
    c778:	d9801417 	ldw	r6,80(sp)
    c77c:	d9400317 	ldw	r5,12(sp)
    c780:	00ff0084 	movi	r3,-1022
    c784:	1189c83a 	sub	r4,r2,r6
    c788:	2145883a 	add	r2,r4,r5
    c78c:	10bfffc4 	addi	r2,r2,-1
    c790:	10c09f0e 	bge	r2,r3,ca10 <_strtod_r+0xb88>
    c794:	21810cc4 	addi	r6,r4,1075
    c798:	d8c01417 	ldw	r3,80(sp)
    c79c:	4185883a 	add	r2,r8,r6
    c7a0:	39a1883a 	add	r16,r7,r6
    c7a4:	18a5883a 	add	r18,r3,r2
    c7a8:	3807883a 	mov	r3,r7
    c7ac:	81c0010e 	bge	r16,r7,c7b4 <_strtod_r+0x92c>
    c7b0:	8007883a 	mov	r3,r16
    c7b4:	9005883a 	mov	r2,r18
    c7b8:	1c80010e 	bge	r3,r18,c7c0 <_strtod_r+0x938>
    c7bc:	1805883a 	mov	r2,r3
    c7c0:	0080e70e 	bge	zero,r2,cb60 <_strtod_r+0xcd8>
    c7c4:	38a7c83a 	sub	r19,r7,r2
    c7c8:	80a1c83a 	sub	r16,r16,r2
    c7cc:	90a5c83a 	sub	r18,r18,r2
    c7d0:	02400e0e 	bge	zero,r9,c80c <_strtod_r+0x984>
    c7d4:	480d883a 	mov	r6,r9
    c7d8:	b00b883a 	mov	r5,r22
    c7dc:	a809883a 	mov	r4,r21
    c7e0:	000b2700 	call	b270 <__pow5mult>
    c7e4:	d9800517 	ldw	r6,20(sp)
    c7e8:	a809883a 	mov	r4,r21
    c7ec:	100b883a 	mov	r5,r2
    c7f0:	102d883a 	mov	r22,r2
    c7f4:	000af4c0 	call	af4c <__multiply>
    c7f8:	d9400517 	ldw	r5,20(sp)
    c7fc:	1023883a 	mov	r17,r2
    c800:	a809883a 	mov	r4,r21
    c804:	000a4bc0 	call	a4bc <_Bfree>
    c808:	dc400515 	stw	r17,20(sp)
    c80c:	0400050e 	bge	zero,r16,c824 <_strtod_r+0x99c>
    c810:	d9400517 	ldw	r5,20(sp)
    c814:	800d883a 	mov	r6,r16
    c818:	a809883a 	mov	r4,r21
    c81c:	000ae000 	call	ae00 <__lshift>
    c820:	d8800515 	stw	r2,20(sp)
    c824:	a000741e 	bne	r20,zero,c9f8 <_strtod_r+0xb70>
    c828:	0480050e 	bge	zero,r18,c840 <_strtod_r+0x9b8>
    c82c:	b80b883a 	mov	r5,r23
    c830:	900d883a 	mov	r6,r18
    c834:	a809883a 	mov	r4,r21
    c838:	000ae000 	call	ae00 <__lshift>
    c83c:	102f883a 	mov	r23,r2
    c840:	04c0050e 	bge	zero,r19,c858 <_strtod_r+0x9d0>
    c844:	b00b883a 	mov	r5,r22
    c848:	980d883a 	mov	r6,r19
    c84c:	a809883a 	mov	r4,r21
    c850:	000ae000 	call	ae00 <__lshift>
    c854:	102d883a 	mov	r22,r2
    c858:	d9400517 	ldw	r5,20(sp)
    c85c:	a809883a 	mov	r4,r21
    c860:	b80d883a 	mov	r6,r23
    c864:	000ac740 	call	ac74 <__mdiff>
    c868:	11000317 	ldw	r4,12(r2)
    c86c:	b00b883a 	mov	r5,r22
    c870:	10000315 	stw	zero,12(r2)
    c874:	d9001315 	stw	r4,76(sp)
    c878:	1009883a 	mov	r4,r2
    c87c:	1029883a 	mov	r20,r2
    c880:	000a6180 	call	a618 <__mcmp>
    c884:	10017c16 	blt	r2,zero,ce78 <_strtod_r+0xff0>
    c888:	1001af26 	beq	r2,zero,cf48 <_strtod_r+0x10c0>
    c88c:	a009883a 	mov	r4,r20
    c890:	b00b883a 	mov	r5,r22
    c894:	000a8180 	call	a818 <__ratio>
    c898:	0011883a 	mov	r8,zero
    c89c:	02500034 	movhi	r9,16384
    c8a0:	480f883a 	mov	r7,r9
    c8a4:	1009883a 	mov	r4,r2
    c8a8:	180b883a 	mov	r5,r3
    c8ac:	400d883a 	mov	r6,r8
    c8b0:	1021883a 	mov	r16,r2
    c8b4:	1823883a 	mov	r17,r3
    c8b8:	0010c680 	call	10c68 <__ledf2>
    c8bc:	00805716 	blt	zero,r2,ca1c <_strtod_r+0xb94>
    c8c0:	d9801317 	ldw	r6,76(sp)
    c8c4:	3025003a 	cmpeq	r18,r6,zero
    c8c8:	90008b1e 	bne	r18,zero,caf8 <_strtod_r+0xc70>
    c8cc:	008ffc34 	movhi	r2,16368
    c8d0:	0021883a 	mov	r16,zero
    c8d4:	1023883a 	mov	r17,r2
    c8d8:	d8000715 	stw	zero,28(sp)
    c8dc:	d8800815 	stw	r2,32(sp)
    c8e0:	e1c00117 	ldw	r7,4(fp)
    c8e4:	009ff834 	movhi	r2,32736
    c8e8:	3cdffc2c 	andhi	r19,r7,32752
    c8ec:	98805e26 	beq	r19,r2,ca68 <_strtod_r+0xbe0>
    c8f0:	d8801417 	ldw	r2,80(sp)
    c8f4:	10001b26 	beq	r2,zero,c964 <_strtod_r+0xadc>
    c8f8:	0081a834 	movhi	r2,1696
    c8fc:	14c01936 	bltu	r2,r19,c964 <_strtod_r+0xadc>
    c900:	00bff034 	movhi	r2,65472
    c904:	00d07834 	movhi	r3,16864
    c908:	18ffffc4 	addi	r3,r3,-1
    c90c:	180f883a 	mov	r7,r3
    c910:	8009883a 	mov	r4,r16
    c914:	880b883a 	mov	r5,r17
    c918:	100d883a 	mov	r6,r2
    c91c:	0010c680 	call	10c68 <__ledf2>
    c920:	00800b16 	blt	zero,r2,c950 <_strtod_r+0xac8>
    c924:	880b883a 	mov	r5,r17
    c928:	8009883a 	mov	r4,r16
    c92c:	000f1080 	call	f108 <__fixunsdfsi>
    c930:	1000df1e 	bne	r2,zero,ccb0 <_strtod_r+0xe28>
    c934:	0021883a 	mov	r16,zero
    c938:	044ffc34 	movhi	r17,16368
    c93c:	9000d91e 	bne	r18,zero,cca4 <_strtod_r+0xe1c>
    c940:	8005883a 	mov	r2,r16
    c944:	8807883a 	mov	r3,r17
    c948:	d8c00815 	stw	r3,32(sp)
    c94c:	d8800715 	stw	r2,28(sp)
    c950:	d8800817 	ldw	r2,32(sp)
    c954:	00c1ac34 	movhi	r3,1712
    c958:	14c5c83a 	sub	r2,r2,r19
    c95c:	10c5883a 	add	r2,r2,r3
    c960:	d8800815 	stw	r2,32(sp)
    c964:	e0800017 	ldw	r2,0(fp)
    c968:	e0c00117 	ldw	r3,4(fp)
    c96c:	1009883a 	mov	r4,r2
    c970:	180b883a 	mov	r5,r3
    c974:	000a6780 	call	a678 <__ulp>
    c978:	d9800717 	ldw	r6,28(sp)
    c97c:	d9c00817 	ldw	r7,32(sp)
    c980:	180b883a 	mov	r5,r3
    c984:	1009883a 	mov	r4,r2
    c988:	00103a40 	call	103a4 <__muldf3>
    c98c:	e2000017 	ldw	r8,0(fp)
    c990:	e2400117 	ldw	r9,4(fp)
    c994:	180b883a 	mov	r5,r3
    c998:	1009883a 	mov	r4,r2
    c99c:	480f883a 	mov	r7,r9
    c9a0:	400d883a 	mov	r6,r8
    c9a4:	00103300 	call	10330 <__adddf3>
    c9a8:	e0c00115 	stw	r3,4(fp)
    c9ac:	e0800015 	stw	r2,0(fp)
    c9b0:	d8c01417 	ldw	r3,80(sp)
    c9b4:	e4800117 	ldw	r18,4(fp)
    c9b8:	1800021e 	bne	r3,zero,c9c4 <_strtod_r+0xb3c>
    c9bc:	909ffc2c 	andhi	r2,r18,32752
    c9c0:	98807b26 	beq	r19,r2,cbb0 <_strtod_r+0xd28>
    c9c4:	d9400517 	ldw	r5,20(sp)
    c9c8:	a809883a 	mov	r4,r21
    c9cc:	000a4bc0 	call	a4bc <_Bfree>
    c9d0:	a809883a 	mov	r4,r21
    c9d4:	b80b883a 	mov	r5,r23
    c9d8:	000a4bc0 	call	a4bc <_Bfree>
    c9dc:	a809883a 	mov	r4,r21
    c9e0:	b00b883a 	mov	r5,r22
    c9e4:	000a4bc0 	call	a4bc <_Bfree>
    c9e8:	a809883a 	mov	r4,r21
    c9ec:	a00b883a 	mov	r5,r20
    c9f0:	000a4bc0 	call	a4bc <_Bfree>
    c9f4:	003f3c06 	br	c6e8 <_strtod_r+0x860>
    c9f8:	b80b883a 	mov	r5,r23
    c9fc:	a00d883a 	mov	r6,r20
    ca00:	a809883a 	mov	r4,r21
    ca04:	000b2700 	call	b270 <__pow5mult>
    ca08:	102f883a 	mov	r23,r2
    ca0c:	003f8606 	br	c828 <_strtod_r+0x9a0>
    ca10:	00800d84 	movi	r2,54
    ca14:	114dc83a 	sub	r6,r2,r5
    ca18:	003f5f06 	br	c798 <_strtod_r+0x910>
    ca1c:	0005883a 	mov	r2,zero
    ca20:	00cff834 	movhi	r3,16352
    ca24:	880b883a 	mov	r5,r17
    ca28:	8009883a 	mov	r4,r16
    ca2c:	100d883a 	mov	r6,r2
    ca30:	180f883a 	mov	r7,r3
    ca34:	00103a40 	call	103a4 <__muldf3>
    ca38:	d9801317 	ldw	r6,76(sp)
    ca3c:	1021883a 	mov	r16,r2
    ca40:	1823883a 	mov	r17,r3
    ca44:	3025003a 	cmpeq	r18,r6,zero
    ca48:	90000126 	beq	r18,zero,ca50 <_strtod_r+0xbc8>
    ca4c:	18e0003c 	xorhi	r3,r3,32768
    ca50:	d8800715 	stw	r2,28(sp)
    ca54:	d8c00815 	stw	r3,32(sp)
    ca58:	e1c00117 	ldw	r7,4(fp)
    ca5c:	009ff834 	movhi	r2,32736
    ca60:	3cdffc2c 	andhi	r19,r7,32752
    ca64:	98bfa21e 	bne	r19,r2,c8f0 <_strtod_r+0xa68>
    ca68:	e1000017 	ldw	r4,0(fp)
    ca6c:	01bf2c34 	movhi	r6,64688
    ca70:	398d883a 	add	r6,r7,r6
    ca74:	d9000b15 	stw	r4,44(sp)
    ca78:	d9c00c15 	stw	r7,48(sp)
    ca7c:	300b883a 	mov	r5,r6
    ca80:	e1800115 	stw	r6,4(fp)
    ca84:	000a6780 	call	a678 <__ulp>
    ca88:	d9800717 	ldw	r6,28(sp)
    ca8c:	d9c00817 	ldw	r7,32(sp)
    ca90:	180b883a 	mov	r5,r3
    ca94:	1009883a 	mov	r4,r2
    ca98:	00103a40 	call	103a4 <__muldf3>
    ca9c:	e2000017 	ldw	r8,0(fp)
    caa0:	e2400117 	ldw	r9,4(fp)
    caa4:	180b883a 	mov	r5,r3
    caa8:	1009883a 	mov	r4,r2
    caac:	480f883a 	mov	r7,r9
    cab0:	400d883a 	mov	r6,r8
    cab4:	00103300 	call	10330 <__adddf3>
    cab8:	1009883a 	mov	r4,r2
    cabc:	180b883a 	mov	r5,r3
    cac0:	009f2834 	movhi	r2,31904
    cac4:	10bfffc4 	addi	r2,r2,-1
    cac8:	18dffc2c 	andhi	r3,r3,32752
    cacc:	e1000015 	stw	r4,0(fp)
    cad0:	e1400115 	stw	r5,4(fp)
    cad4:	10c06f2e 	bgeu	r2,r3,cc94 <_strtod_r+0xe0c>
    cad8:	d8800c17 	ldw	r2,48(sp)
    cadc:	011ffc34 	movhi	r4,32752
    cae0:	213fffc4 	addi	r4,r4,-1
    cae4:	11007a26 	beq	r2,r4,ccd0 <_strtod_r+0xe48>
    cae8:	01ffffc4 	movi	r7,-1
    caec:	e1000115 	stw	r4,4(fp)
    caf0:	e1c00015 	stw	r7,0(fp)
    caf4:	003fb306 	br	c9c4 <_strtod_r+0xb3c>
    caf8:	e0c00017 	ldw	r3,0(fp)
    cafc:	1800221e 	bne	r3,zero,cb88 <_strtod_r+0xd00>
    cb00:	e0800117 	ldw	r2,4(fp)
    cb04:	00c00434 	movhi	r3,16
    cb08:	18ffffc4 	addi	r3,r3,-1
    cb0c:	10c4703a 	and	r2,r2,r3
    cb10:	1000211e 	bne	r2,zero,cb98 <_strtod_r+0xd10>
    cb14:	0005883a 	mov	r2,zero
    cb18:	00cffc34 	movhi	r3,16368
    cb1c:	180f883a 	mov	r7,r3
    cb20:	8009883a 	mov	r4,r16
    cb24:	880b883a 	mov	r5,r17
    cb28:	100d883a 	mov	r6,r2
    cb2c:	0010be00 	call	10be0 <__ltdf2>
    cb30:	10013c16 	blt	r2,zero,d024 <_strtod_r+0x119c>
    cb34:	0005883a 	mov	r2,zero
    cb38:	00cff834 	movhi	r3,16352
    cb3c:	880b883a 	mov	r5,r17
    cb40:	8009883a 	mov	r4,r16
    cb44:	180f883a 	mov	r7,r3
    cb48:	100d883a 	mov	r6,r2
    cb4c:	00103a40 	call	103a4 <__muldf3>
    cb50:	1823883a 	mov	r17,r3
    cb54:	1021883a 	mov	r16,r2
    cb58:	18e0003c 	xorhi	r3,r3,32768
    cb5c:	003fbc06 	br	ca50 <_strtod_r+0xbc8>
    cb60:	3827883a 	mov	r19,r7
    cb64:	003f1a06 	br	c7d0 <_strtod_r+0x948>
    cb68:	4091c83a 	sub	r8,r8,r2
    cb6c:	003f0206 	br	c778 <_strtod_r+0x8f0>
    cb70:	d8c00f17 	ldw	r3,60(sp)
    cb74:	0011883a 	mov	r8,zero
    cb78:	0029883a 	mov	r20,zero
    cb7c:	00d3c83a 	sub	r9,zero,r3
    cb80:	480f883a 	mov	r7,r9
    cb84:	003ef906 	br	c76c <_strtod_r+0x8e4>
    cb88:	00800044 	movi	r2,1
    cb8c:	1880021e 	bne	r3,r2,cb98 <_strtod_r+0xd10>
    cb90:	e0800117 	ldw	r2,4(fp)
    cb94:	1000a526 	beq	r2,zero,ce2c <_strtod_r+0xfa4>
    cb98:	00affc34 	movhi	r2,49136
    cb9c:	0021883a 	mov	r16,zero
    cba0:	044ffc34 	movhi	r17,16368
    cba4:	d8800815 	stw	r2,32(sp)
    cba8:	d8000715 	stw	zero,28(sp)
    cbac:	003f4c06 	br	c8e0 <_strtod_r+0xa58>
    cbb0:	880b883a 	mov	r5,r17
    cbb4:	8009883a 	mov	r4,r16
    cbb8:	0010de80 	call	10de8 <__fixdfsi>
    cbbc:	1009883a 	mov	r4,r2
    cbc0:	0010cf00 	call	10cf0 <__floatsidf>
    cbc4:	880b883a 	mov	r5,r17
    cbc8:	8009883a 	mov	r4,r16
    cbcc:	100d883a 	mov	r6,r2
    cbd0:	180f883a 	mov	r7,r3
    cbd4:	00102b00 	call	102b0 <__subdf3>
    cbd8:	d9001317 	ldw	r4,76(sp)
    cbdc:	100b883a 	mov	r5,r2
    cbe0:	180d883a 	mov	r6,r3
    cbe4:	1021883a 	mov	r16,r2
    cbe8:	1823883a 	mov	r17,r3
    cbec:	2000061e 	bne	r4,zero,cc08 <_strtod_r+0xd80>
    cbf0:	e0800017 	ldw	r2,0(fp)
    cbf4:	1000041e 	bne	r2,zero,cc08 <_strtod_r+0xd80>
    cbf8:	00c00434 	movhi	r3,16
    cbfc:	18ffffc4 	addi	r3,r3,-1
    cc00:	90c4703a 	and	r2,r18,r3
    cc04:	10004026 	beq	r2,zero,cd08 <_strtod_r+0xe80>
    cc08:	00a52834 	movhi	r2,38048
    cc0c:	108d6544 	addi	r2,r2,13717
    cc10:	00cff834 	movhi	r3,16352
    cc14:	18ffffc4 	addi	r3,r3,-1
    cc18:	180f883a 	mov	r7,r3
    cc1c:	8009883a 	mov	r4,r16
    cc20:	880b883a 	mov	r5,r17
    cc24:	100d883a 	mov	r6,r2
    cc28:	0010be00 	call	10be0 <__ltdf2>
    cc2c:	10000916 	blt	r2,zero,cc54 <_strtod_r+0xdcc>
    cc30:	008d6c34 	movhi	r2,13744
    cc34:	10b94d44 	addi	r2,r2,-6859
    cc38:	00cff834 	movhi	r3,16352
    cc3c:	880b883a 	mov	r5,r17
    cc40:	180f883a 	mov	r7,r3
    cc44:	8009883a 	mov	r4,r16
    cc48:	100d883a 	mov	r6,r2
    cc4c:	0010ad00 	call	10ad0 <__gtdf2>
    cc50:	00bf5c0e 	bge	zero,r2,c9c4 <_strtod_r+0xb3c>
    cc54:	d9400517 	ldw	r5,20(sp)
    cc58:	a809883a 	mov	r4,r21
    cc5c:	000a4bc0 	call	a4bc <_Bfree>
    cc60:	a809883a 	mov	r4,r21
    cc64:	b80b883a 	mov	r5,r23
    cc68:	000a4bc0 	call	a4bc <_Bfree>
    cc6c:	a809883a 	mov	r4,r21
    cc70:	b00b883a 	mov	r5,r22
    cc74:	000a4bc0 	call	a4bc <_Bfree>
    cc78:	d9401017 	ldw	r5,64(sp)
    cc7c:	a809883a 	mov	r4,r21
    cc80:	000a4bc0 	call	a4bc <_Bfree>
    cc84:	a809883a 	mov	r4,r21
    cc88:	a00b883a 	mov	r5,r20
    cc8c:	000a4bc0 	call	a4bc <_Bfree>
    cc90:	003cf406 	br	c064 <_strtod_r+0x1dc>
    cc94:	0080d434 	movhi	r2,848
    cc98:	288d883a 	add	r6,r5,r2
    cc9c:	e1800115 	stw	r6,4(fp)
    cca0:	003f4306 	br	c9b0 <_strtod_r+0xb28>
    cca4:	8005883a 	mov	r2,r16
    cca8:	88e0003c 	xorhi	r3,r17,32768
    ccac:	003f2606 	br	c948 <_strtod_r+0xac0>
    ccb0:	1009883a 	mov	r4,r2
    ccb4:	0010f340 	call	10f34 <__floatunsidf>
    ccb8:	1021883a 	mov	r16,r2
    ccbc:	1823883a 	mov	r17,r3
    ccc0:	003f1e06 	br	c93c <_strtod_r+0xab4>
    ccc4:	da000417 	ldw	r8,16(sp)
    ccc8:	39c00044 	addi	r7,r7,1
    cccc:	003e6706 	br	c66c <_strtod_r+0x7e4>
    ccd0:	d8c00b17 	ldw	r3,44(sp)
    ccd4:	00bfffc4 	movi	r2,-1
    ccd8:	18bf831e 	bne	r3,r2,cae8 <_strtod_r+0xc60>
    ccdc:	00c00884 	movi	r3,34
    cce0:	a8c00015 	stw	r3,0(r21)
    cce4:	009ffc34 	movhi	r2,32752
    cce8:	e0800115 	stw	r2,4(fp)
    ccec:	e0000015 	stw	zero,0(fp)
    ccf0:	003fd806 	br	cc54 <_strtod_r+0xdcc>
    ccf4:	4007883a 	mov	r3,r8
    ccf8:	000d883a 	mov	r6,zero
    ccfc:	0029883a 	mov	r20,zero
    cd00:	0021883a 	mov	r16,zero
    cd04:	003cc906 	br	c02c <_strtod_r+0x1a4>
    cd08:	00a52834 	movhi	r2,38048
    cd0c:	108d6544 	addi	r2,r2,13717
    cd10:	00cff434 	movhi	r3,16336
    cd14:	18ffffc4 	addi	r3,r3,-1
    cd18:	2809883a 	mov	r4,r5
    cd1c:	180f883a 	mov	r7,r3
    cd20:	300b883a 	mov	r5,r6
    cd24:	100d883a 	mov	r6,r2
    cd28:	0010be00 	call	10be0 <__ltdf2>
    cd2c:	103f250e 	bge	r2,zero,c9c4 <_strtod_r+0xb3c>
    cd30:	003fc806 	br	cc54 <_strtod_r+0xdcc>
    cd34:	0027883a 	mov	r19,zero
    cd38:	04800044 	movi	r18,1
    cd3c:	0015883a 	mov	r10,zero
    cd40:	003cc006 	br	c044 <_strtod_r+0x1bc>
    cd44:	00800884 	movi	r2,34
    cd48:	a8800015 	stw	r2,0(r21)
    cd4c:	019ffc34 	movhi	r6,32752
    cd50:	e1800115 	stw	r6,4(fp)
    cd54:	e0000015 	stw	zero,0(fp)
    cd58:	003cc206 	br	c064 <_strtod_r+0x1dc>
    cd5c:	015387c4 	movi	r5,19999
    cd60:	003d1e06 	br	c1dc <_strtod_r+0x354>
    cd64:	300a90fa 	slli	r5,r6,3
    cd68:	e0800017 	ldw	r2,0(fp)
    cd6c:	e0c00117 	ldw	r3,4(fp)
    cd70:	01000074 	movhi	r4,1
    cd74:	21138504 	addi	r4,r4,19988
    cd78:	290b883a 	add	r5,r5,r4
    cd7c:	2a000017 	ldw	r8,0(r5)
    cd80:	2a400117 	ldw	r9,4(r5)
    cd84:	1009883a 	mov	r4,r2
    cd88:	180b883a 	mov	r5,r3
    cd8c:	480f883a 	mov	r7,r9
    cd90:	400d883a 	mov	r6,r8
    cd94:	00103a40 	call	103a4 <__muldf3>
    cd98:	e0c00115 	stw	r3,4(fp)
    cd9c:	e0800015 	stw	r2,0(fp)
    cda0:	003cb006 	br	c064 <_strtod_r+0x1dc>
    cda4:	d8800d17 	ldw	r2,52(sp)
    cda8:	e0800015 	stw	r2,0(fp)
    cdac:	d8c00e17 	ldw	r3,56(sp)
    cdb0:	e0c00115 	stw	r3,4(fp)
    cdb4:	9880020c 	andi	r2,r19,8
    cdb8:	103caa26 	beq	r2,zero,c064 <_strtod_r+0x1dc>
    cdbc:	e0800117 	ldw	r2,4(fp)
    cdc0:	10a00034 	orhi	r2,r2,32768
    cdc4:	e0800115 	stw	r2,4(fp)
    cdc8:	003ca606 	br	c064 <_strtod_r+0x1dc>
    cdcc:	009ffc34 	movhi	r2,32752
    cdd0:	e0800115 	stw	r2,4(fp)
    cdd4:	e0000015 	stw	zero,0(fp)
    cdd8:	003ff606 	br	cdb4 <_strtod_r+0xf2c>
    cddc:	00a00034 	movhi	r2,32768
    cde0:	10bfffc4 	addi	r2,r2,-1
    cde4:	00ffffc4 	movi	r3,-1
    cde8:	e0800115 	stw	r2,4(fp)
    cdec:	e0c00015 	stw	r3,0(fp)
    cdf0:	003ff006 	br	cdb4 <_strtod_r+0xf2c>
    cdf4:	e0000115 	stw	zero,4(fp)
    cdf8:	e0000015 	stw	zero,0(fp)
    cdfc:	003fed06 	br	cdb4 <_strtod_r+0xf2c>
    ce00:	d8800e17 	ldw	r2,56(sp)
    ce04:	29010cc4 	addi	r4,r5,1075
    ce08:	00fffc34 	movhi	r3,65520
    ce0c:	18ffffc4 	addi	r3,r3,-1
    ce10:	2008953a 	slli	r4,r4,20
    ce14:	10c4703a 	and	r2,r2,r3
    ce18:	d8c00d17 	ldw	r3,52(sp)
    ce1c:	1104b03a 	or	r2,r2,r4
    ce20:	e0800115 	stw	r2,4(fp)
    ce24:	e0c00015 	stw	r3,0(fp)
    ce28:	003fe206 	br	cdb4 <_strtod_r+0xf2c>
    ce2c:	00800884 	movi	r2,34
    ce30:	a8800015 	stw	r2,0(r21)
    ce34:	e0000015 	stw	zero,0(fp)
    ce38:	e0000115 	stw	zero,4(fp)
    ce3c:	003f8506 	br	cc54 <_strtod_r+0xdcc>
    ce40:	03800044 	movi	r14,1
    ce44:	003d7706 	br	c424 <_strtod_r+0x59c>
    ce48:	99c5883a 	add	r2,r19,r7
    ce4c:	11ffffc4 	addi	r7,r2,-1
    ce50:	00800204 	movi	r2,8
    ce54:	3cc00044 	addi	r19,r7,1
    ce58:	11c0df16 	blt	r2,r7,d1d8 <_strtod_r+0x1350>
    ce5c:	a08002a4 	muli	r2,r20,10
    ce60:	000f883a 	mov	r7,zero
    ce64:	1269883a 	add	r20,r2,r9
    ce68:	42000044 	addi	r8,r8,1
    ce6c:	da000415 	stw	r8,16(sp)
    ce70:	41000007 	ldb	r4,0(r8)
    ce74:	003d3706 	br	c354 <_strtod_r+0x4cc>
    ce78:	d9801317 	ldw	r6,76(sp)
    ce7c:	3000511e 	bne	r6,zero,cfc4 <_strtod_r+0x113c>
    ce80:	e0800017 	ldw	r2,0(fp)
    ce84:	1000d81e 	bne	r2,zero,d1e8 <_strtod_r+0x1360>
    ce88:	e0c00117 	ldw	r3,4(fp)
    ce8c:	01000434 	movhi	r4,16
    ce90:	213fffc4 	addi	r4,r4,-1
    ce94:	1904703a 	and	r2,r3,r4
    ce98:	1000b01e 	bne	r2,zero,d15c <_strtod_r+0x12d4>
    ce9c:	18dffc2c 	andhi	r3,r3,32752
    cea0:	0081ac34 	movhi	r2,1712
    cea4:	10c1102e 	bgeu	r2,r3,d2e8 <_strtod_r+0x1460>
    cea8:	a0800517 	ldw	r2,20(r20)
    ceac:	1000031e 	bne	r2,zero,cebc <_strtod_r+0x1034>
    ceb0:	a0c00417 	ldw	r3,16(r20)
    ceb4:	00800044 	movi	r2,1
    ceb8:	10c0420e 	bge	r2,r3,cfc4 <_strtod_r+0x113c>
    cebc:	a00b883a 	mov	r5,r20
    cec0:	a809883a 	mov	r4,r21
    cec4:	01800044 	movi	r6,1
    cec8:	000ae000 	call	ae00 <__lshift>
    cecc:	1009883a 	mov	r4,r2
    ced0:	b00b883a 	mov	r5,r22
    ced4:	1029883a 	mov	r20,r2
    ced8:	000a6180 	call	a618 <__mcmp>
    cedc:	0080c20e 	bge	zero,r2,d1e8 <_strtod_r+0x1360>
    cee0:	e1800117 	ldw	r6,4(fp)
    cee4:	d9001417 	ldw	r4,80(sp)
    cee8:	2013003a 	cmpeq	r9,r4,zero
    ceec:	4800ef1e 	bne	r9,zero,d2ac <_strtod_r+0x1424>
    cef0:	30dffc2c 	andhi	r3,r6,32752
    cef4:	0081ac34 	movhi	r2,1712
    cef8:	10c0ec36 	bltu	r2,r3,d2ac <_strtod_r+0x1424>
    cefc:	0080dc34 	movhi	r2,880
    cf00:	10ffca2e 	bgeu	r2,r3,ce2c <_strtod_r+0xfa4>
    cf04:	e0800017 	ldw	r2,0(fp)
    cf08:	e0c00117 	ldw	r3,4(fp)
    cf0c:	020e5434 	movhi	r8,14672
    cf10:	000d883a 	mov	r6,zero
    cf14:	400f883a 	mov	r7,r8
    cf18:	180b883a 	mov	r5,r3
    cf1c:	1009883a 	mov	r4,r2
    cf20:	da000c15 	stw	r8,48(sp)
    cf24:	d8000b15 	stw	zero,44(sp)
    cf28:	00103a40 	call	103a4 <__muldf3>
    cf2c:	e0800015 	stw	r2,0(fp)
    cf30:	e0c00115 	stw	r3,4(fp)
    cf34:	183f471e 	bne	r3,zero,cc54 <_strtod_r+0xdcc>
    cf38:	103f461e 	bne	r2,zero,cc54 <_strtod_r+0xdcc>
    cf3c:	00800884 	movi	r2,34
    cf40:	a8800015 	stw	r2,0(r21)
    cf44:	003f4306 	br	cc54 <_strtod_r+0xdcc>
    cf48:	d8801317 	ldw	r2,76(sp)
    cf4c:	1025003a 	cmpeq	r18,r2,zero
    cf50:	9000861e 	bne	r18,zero,d16c <_strtod_r+0x12e4>
    cf54:	e1400117 	ldw	r5,4(fp)
    cf58:	00c00434 	movhi	r3,16
    cf5c:	18ffffc4 	addi	r3,r3,-1
    cf60:	28c4703a 	and	r2,r5,r3
    cf64:	10c01b26 	beq	r2,r3,cfd4 <_strtod_r+0x114c>
    cf68:	e1c00017 	ldw	r7,0(fp)
    cf6c:	3880004c 	andi	r2,r7,1
    cf70:	1005003a 	cmpeq	r2,r2,zero
    cf74:	1000791e 	bne	r2,zero,d15c <_strtod_r+0x12d4>
    cf78:	9000b126 	beq	r18,zero,d240 <_strtod_r+0x13b8>
    cf7c:	e4400117 	ldw	r17,4(fp)
    cf80:	3809883a 	mov	r4,r7
    cf84:	3821883a 	mov	r16,r7
    cf88:	880b883a 	mov	r5,r17
    cf8c:	000a6780 	call	a678 <__ulp>
    cf90:	180f883a 	mov	r7,r3
    cf94:	880b883a 	mov	r5,r17
    cf98:	8009883a 	mov	r4,r16
    cf9c:	100d883a 	mov	r6,r2
    cfa0:	00102b00 	call	102b0 <__subdf3>
    cfa4:	1009883a 	mov	r4,r2
    cfa8:	000d883a 	mov	r6,zero
    cfac:	000f883a 	mov	r7,zero
    cfb0:	180b883a 	mov	r5,r3
    cfb4:	e0800015 	stw	r2,0(fp)
    cfb8:	e0c00115 	stw	r3,4(fp)
    cfbc:	0010a480 	call	10a48 <__nedf2>
    cfc0:	103f9a26 	beq	r2,zero,ce2c <_strtod_r+0xfa4>
    cfc4:	d9001417 	ldw	r4,80(sp)
    cfc8:	2013003a 	cmpeq	r9,r4,zero
    cfcc:	483f211e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    cfd0:	003fcc06 	br	cf04 <_strtod_r+0x107c>
    cfd4:	d9001417 	ldw	r4,80(sp)
    cfd8:	e1c00017 	ldw	r7,0(fp)
    cfdc:	2013003a 	cmpeq	r9,r4,zero
    cfe0:	4800bd1e 	bne	r9,zero,d2d8 <_strtod_r+0x1450>
    cfe4:	28dffc2c 	andhi	r3,r5,32752
    cfe8:	0081a834 	movhi	r2,1696
    cfec:	10c0ba36 	bltu	r2,r3,d2d8 <_strtod_r+0x1450>
    cff0:	1804d53a 	srli	r2,r3,20
    cff4:	00c01ac4 	movi	r3,107
    cff8:	013fffc4 	movi	r4,-1
    cffc:	1887c83a 	sub	r3,r3,r2
    d000:	20c4983a 	sll	r2,r4,r3
    d004:	11ffd91e 	bne	r2,r7,cf6c <_strtod_r+0x10e4>
    d008:	28dffc2c 	andhi	r3,r5,32752
    d00c:	00800434 	movhi	r2,16
    d010:	188d883a 	add	r6,r3,r2
    d014:	e1800115 	stw	r6,4(fp)
    d018:	e0000015 	stw	zero,0(fp)
    d01c:	483f0d1e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d020:	003fb806 	br	cf04 <_strtod_r+0x107c>
    d024:	0021883a 	mov	r16,zero
    d028:	0005883a 	mov	r2,zero
    d02c:	044ff834 	movhi	r17,16352
    d030:	00eff834 	movhi	r3,49120
    d034:	003e8606 	br	ca50 <_strtod_r+0xbc8>
    d038:	803d9e26 	beq	r16,zero,c6b4 <_strtod_r+0x82c>
    d03c:	0421c83a 	sub	r16,zero,r16
    d040:	814003cc 	andi	r5,r16,15
    d044:	28000f26 	beq	r5,zero,d084 <_strtod_r+0x11fc>
    d048:	280a90fa 	slli	r5,r5,3
    d04c:	01000074 	movhi	r4,1
    d050:	21138504 	addi	r4,r4,19988
    d054:	e0800017 	ldw	r2,0(fp)
    d058:	290b883a 	add	r5,r5,r4
    d05c:	2a000017 	ldw	r8,0(r5)
    d060:	e0c00117 	ldw	r3,4(fp)
    d064:	2a400117 	ldw	r9,4(r5)
    d068:	1009883a 	mov	r4,r2
    d06c:	180b883a 	mov	r5,r3
    d070:	480f883a 	mov	r7,r9
    d074:	400d883a 	mov	r6,r8
    d078:	00107680 	call	10768 <__divdf3>
    d07c:	e0c00115 	stw	r3,4(fp)
    d080:	e0800015 	stw	r2,0(fp)
    d084:	8021d13a 	srai	r16,r16,4
    d088:	803d8a26 	beq	r16,zero,c6b4 <_strtod_r+0x82c>
    d08c:	008007c4 	movi	r2,31
    d090:	14002d16 	blt	r2,r16,d148 <_strtod_r+0x12c0>
    d094:	8080040c 	andi	r2,r16,16
    d098:	10009926 	beq	r2,zero,d300 <_strtod_r+0x1478>
    d09c:	00801a84 	movi	r2,106
    d0a0:	d8801415 	stw	r2,80(sp)
    d0a4:	0400110e 	bge	zero,r16,d0ec <_strtod_r+0x1264>
    d0a8:	04400074 	movhi	r17,1
    d0ac:	8c53d204 	addi	r17,r17,20296
    d0b0:	8080004c 	andi	r2,r16,1
    d0b4:	1005003a 	cmpeq	r2,r2,zero
    d0b8:	1000091e 	bne	r2,zero,d0e0 <_strtod_r+0x1258>
    d0bc:	e0800017 	ldw	r2,0(fp)
    d0c0:	e0c00117 	ldw	r3,4(fp)
    d0c4:	89800017 	ldw	r6,0(r17)
    d0c8:	89c00117 	ldw	r7,4(r17)
    d0cc:	180b883a 	mov	r5,r3
    d0d0:	1009883a 	mov	r4,r2
    d0d4:	00103a40 	call	103a4 <__muldf3>
    d0d8:	e0c00115 	stw	r3,4(fp)
    d0dc:	e0800015 	stw	r2,0(fp)
    d0e0:	8021d07a 	srai	r16,r16,1
    d0e4:	8c400204 	addi	r17,r17,8
    d0e8:	043ff116 	blt	zero,r16,d0b0 <_strtod_r+0x1228>
    d0ec:	d8c01417 	ldw	r3,80(sp)
    d0f0:	18000d26 	beq	r3,zero,d128 <_strtod_r+0x12a0>
    d0f4:	e1000117 	ldw	r4,4(fp)
    d0f8:	00c01ac4 	movi	r3,107
    d0fc:	209ffc2c 	andhi	r2,r4,32752
    d100:	1004d53a 	srli	r2,r2,20
    d104:	1887c83a 	sub	r3,r3,r2
    d108:	00c0070e 	bge	zero,r3,d128 <_strtod_r+0x12a0>
    d10c:	008007c4 	movi	r2,31
    d110:	10c0900e 	bge	r2,r3,d354 <_strtod_r+0x14cc>
    d114:	00800d04 	movi	r2,52
    d118:	e0000015 	stw	zero,0(fp)
    d11c:	10c0870e 	bge	r2,r3,d33c <_strtod_r+0x14b4>
    d120:	0180dc34 	movhi	r6,880
    d124:	e1800115 	stw	r6,4(fp)
    d128:	e0800017 	ldw	r2,0(fp)
    d12c:	e0c00117 	ldw	r3,4(fp)
    d130:	000d883a 	mov	r6,zero
    d134:	000f883a 	mov	r7,zero
    d138:	180b883a 	mov	r5,r3
    d13c:	1009883a 	mov	r4,r2
    d140:	0010a480 	call	10a48 <__nedf2>
    d144:	103d5c1e 	bne	r2,zero,c6b8 <_strtod_r+0x830>
    d148:	00800884 	movi	r2,34
    d14c:	a8800015 	stw	r2,0(r21)
    d150:	e0000015 	stw	zero,0(fp)
    d154:	e0000115 	stw	zero,4(fp)
    d158:	003bc206 	br	c064 <_strtod_r+0x1dc>
    d15c:	d8801417 	ldw	r2,80(sp)
    d160:	1013003a 	cmpeq	r9,r2,zero
    d164:	483ebb1e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d168:	003f6606 	br	cf04 <_strtod_r+0x107c>
    d16c:	e1800117 	ldw	r6,4(fp)
    d170:	00c00434 	movhi	r3,16
    d174:	18ffffc4 	addi	r3,r3,-1
    d178:	30c4703a 	and	r2,r6,r3
    d17c:	103f7a1e 	bne	r2,zero,cf68 <_strtod_r+0x10e0>
    d180:	e1c00017 	ldw	r7,0(fp)
    d184:	383f791e 	bne	r7,zero,cf6c <_strtod_r+0x10e4>
    d188:	003f5606 	br	cee4 <_strtod_r+0x105c>
    d18c:	d9800f17 	ldw	r6,60(sp)
    d190:	00bffa84 	movi	r2,-22
    d194:	30bcd416 	blt	r6,r2,c4e8 <_strtod_r+0x660>
    d198:	317ffe24 	muli	r5,r6,-8
    d19c:	01000074 	movhi	r4,1
    d1a0:	21138504 	addi	r4,r4,19988
    d1a4:	e0800017 	ldw	r2,0(fp)
    d1a8:	290b883a 	add	r5,r5,r4
    d1ac:	2a000017 	ldw	r8,0(r5)
    d1b0:	e0c00117 	ldw	r3,4(fp)
    d1b4:	2a400117 	ldw	r9,4(r5)
    d1b8:	1009883a 	mov	r4,r2
    d1bc:	180b883a 	mov	r5,r3
    d1c0:	480f883a 	mov	r7,r9
    d1c4:	400d883a 	mov	r6,r8
    d1c8:	00107680 	call	10768 <__divdf3>
    d1cc:	e0c00115 	stw	r3,4(fp)
    d1d0:	e0800015 	stw	r2,0(fp)
    d1d4:	003ba306 	br	c064 <_strtod_r+0x1dc>
    d1d8:	00800404 	movi	r2,16
    d1dc:	14c02f0e 	bge	r2,r19,d29c <_strtod_r+0x1414>
    d1e0:	000f883a 	mov	r7,zero
    d1e4:	003f2006 	br	ce68 <_strtod_r+0xfe0>
    d1e8:	d9801417 	ldw	r6,80(sp)
    d1ec:	3013003a 	cmpeq	r9,r6,zero
    d1f0:	483e981e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d1f4:	003f4306 	br	cf04 <_strtod_r+0x107c>
    d1f8:	00801a44 	movi	r2,105
    d1fc:	20bc6326 	beq	r4,r2,c38c <_strtod_r+0x504>
    d200:	00801b84 	movi	r2,110
    d204:	20bbba1e 	bne	r4,r2,c0f0 <_strtod_r+0x268>
    d208:	dc000404 	addi	r16,sp,16
    d20c:	8009883a 	mov	r4,r16
    d210:	01400074 	movhi	r5,1
    d214:	2953d104 	addi	r5,r5,20292
    d218:	000be400 	call	be40 <match>
    d21c:	103bb426 	beq	r2,zero,c0f0 <_strtod_r+0x268>
    d220:	d8800417 	ldw	r2,16(sp)
    d224:	00c00a04 	movi	r3,40
    d228:	11000007 	ldb	r4,0(r2)
    d22c:	20c03626 	beq	r4,r3,d308 <_strtod_r+0x1480>
    d230:	01bffe34 	movhi	r6,65528
    d234:	e1800115 	stw	r6,4(fp)
    d238:	e0000015 	stw	zero,0(fp)
    d23c:	003b8906 	br	c064 <_strtod_r+0x1dc>
    d240:	e4400117 	ldw	r17,4(fp)
    d244:	3809883a 	mov	r4,r7
    d248:	3821883a 	mov	r16,r7
    d24c:	880b883a 	mov	r5,r17
    d250:	000a6780 	call	a678 <__ulp>
    d254:	100d883a 	mov	r6,r2
    d258:	880b883a 	mov	r5,r17
    d25c:	180f883a 	mov	r7,r3
    d260:	8009883a 	mov	r4,r16
    d264:	00103300 	call	10330 <__adddf3>
    d268:	d9801417 	ldw	r6,80(sp)
    d26c:	e0c00115 	stw	r3,4(fp)
    d270:	e0800015 	stw	r2,0(fp)
    d274:	3013003a 	cmpeq	r9,r6,zero
    d278:	483e761e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d27c:	003f2106 	br	cf04 <_strtod_r+0x107c>
    d280:	000f883a 	mov	r7,zero
    d284:	003cf006 	br	c648 <_strtod_r+0x7c0>
    d288:	0080d434 	movhi	r2,848
    d28c:	188d883a 	add	r6,r3,r2
    d290:	d8001415 	stw	zero,80(sp)
    d294:	e1800115 	stw	r6,4(fp)
    d298:	003d0706 	br	c6b8 <_strtod_r+0x830>
    d29c:	808002a4 	muli	r2,r16,10
    d2a0:	000f883a 	mov	r7,zero
    d2a4:	1261883a 	add	r16,r2,r9
    d2a8:	003eef06 	br	ce68 <_strtod_r+0xfe0>
    d2ac:	309ffc2c 	andhi	r2,r6,32752
    d2b0:	00fffc34 	movhi	r3,65520
    d2b4:	10c5883a 	add	r2,r2,r3
    d2b8:	00c00434 	movhi	r3,16
    d2bc:	18ffffc4 	addi	r3,r3,-1
    d2c0:	10ccb03a 	or	r6,r2,r3
    d2c4:	01ffffc4 	movi	r7,-1
    d2c8:	e1800115 	stw	r6,4(fp)
    d2cc:	e1c00015 	stw	r7,0(fp)
    d2d0:	483e601e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d2d4:	003f0b06 	br	cf04 <_strtod_r+0x107c>
    d2d8:	00bfffc4 	movi	r2,-1
    d2dc:	003f4906 	br	d004 <_strtod_r+0x117c>
    d2e0:	0025883a 	mov	r18,zero
    d2e4:	003cb106 	br	c5ac <_strtod_r+0x724>
    d2e8:	d8c01417 	ldw	r3,80(sp)
    d2ec:	1813003a 	cmpeq	r9,r3,zero
    d2f0:	483e581e 	bne	r9,zero,cc54 <_strtod_r+0xdcc>
    d2f4:	003f0306 	br	cf04 <_strtod_r+0x107c>
    d2f8:	980f883a 	mov	r7,r19
    d2fc:	003ed406 	br	ce50 <_strtod_r+0xfc8>
    d300:	d8001415 	stw	zero,80(sp)
    d304:	003f6706 	br	d0a4 <_strtod_r+0x121c>
    d308:	8009883a 	mov	r4,r16
    d30c:	01400074 	movhi	r5,1
    d310:	29565504 	addi	r5,r5,22868
    d314:	d9800d04 	addi	r6,sp,52
    d318:	000edb80 	call	edb8 <__hexnan>
    d31c:	00c00144 	movi	r3,5
    d320:	10ffc31e 	bne	r2,r3,d230 <_strtod_r+0x13a8>
    d324:	d8800e17 	ldw	r2,56(sp)
    d328:	d9c00d17 	ldw	r7,52(sp)
    d32c:	119ffc34 	orhi	r6,r2,32752
    d330:	e1800115 	stw	r6,4(fp)
    d334:	e1c00015 	stw	r7,0(fp)
    d338:	003b4a06 	br	c064 <_strtod_r+0x1dc>
    d33c:	18fff804 	addi	r3,r3,-32
    d340:	00bfffc4 	movi	r2,-1
    d344:	10c4983a 	sll	r2,r2,r3
    d348:	208c703a 	and	r6,r4,r2
    d34c:	e1800115 	stw	r6,4(fp)
    d350:	003f7506 	br	d128 <_strtod_r+0x12a0>
    d354:	00bfffc4 	movi	r2,-1
    d358:	10c4983a 	sll	r2,r2,r3
    d35c:	e0c00017 	ldw	r3,0(fp)
    d360:	188e703a 	and	r7,r3,r2
    d364:	e1c00015 	stw	r7,0(fp)
    d368:	003f6f06 	br	d128 <_strtod_r+0x12a0>

0000d36c <strtof>:
    d36c:	defffa04 	addi	sp,sp,-24
    d370:	dd000415 	stw	r20,16(sp)
    d374:	05000074 	movhi	r20,1
    d378:	a51ae204 	addi	r20,r20,27528
    d37c:	2007883a 	mov	r3,r4
    d380:	a1000017 	ldw	r4,0(r20)
    d384:	280d883a 	mov	r6,r5
    d388:	180b883a 	mov	r5,r3
    d38c:	dfc00515 	stw	ra,20(sp)
    d390:	dcc00315 	stw	r19,12(sp)
    d394:	dc800215 	stw	r18,8(sp)
    d398:	dc400115 	stw	r17,4(sp)
    d39c:	dc000015 	stw	r16,0(sp)
    d3a0:	000be880 	call	be88 <_strtod_r>
    d3a4:	180b883a 	mov	r5,r3
    d3a8:	1009883a 	mov	r4,r2
    d3ac:	1823883a 	mov	r17,r3
    d3b0:	1021883a 	mov	r16,r2
    d3b4:	0010ec00 	call	10ec0 <__truncdfsf2>
    d3b8:	1009883a 	mov	r4,r2
    d3bc:	000b883a 	mov	r5,zero
    d3c0:	1025883a 	mov	r18,r2
    d3c4:	1027883a 	mov	r19,r2
    d3c8:	000fd380 	call	fd38 <__nesf2>
    d3cc:	000d883a 	mov	r6,zero
    d3d0:	000f883a 	mov	r7,zero
    d3d4:	8009883a 	mov	r4,r16
    d3d8:	880b883a 	mov	r5,r17
    d3dc:	10000e1e 	bne	r2,zero,d418 <strtof+0xac>
    d3e0:	0010a480 	call	10a48 <__nedf2>
    d3e4:	10000c26 	beq	r2,zero,d418 <strtof+0xac>
    d3e8:	a0c00017 	ldw	r3,0(r20)
    d3ec:	00800884 	movi	r2,34
    d3f0:	18800015 	stw	r2,0(r3)
    d3f4:	9805883a 	mov	r2,r19
    d3f8:	dfc00517 	ldw	ra,20(sp)
    d3fc:	dd000417 	ldw	r20,16(sp)
    d400:	dcc00317 	ldw	r19,12(sp)
    d404:	dc800217 	ldw	r18,8(sp)
    d408:	dc400117 	ldw	r17,4(sp)
    d40c:	dc000017 	ldw	r16,0(sp)
    d410:	dec00604 	addi	sp,sp,24
    d414:	f800283a 	ret
    d418:	9009883a 	mov	r4,r18
    d41c:	015fe034 	movhi	r5,32640
    d420:	297fffc4 	addi	r5,r5,-1
    d424:	000fdb00 	call	fdb0 <__gtsf2>
    d428:	00ffffc4 	movi	r3,-1
    d42c:	011ffc34 	movhi	r4,32752
    d430:	213fffc4 	addi	r4,r4,-1
    d434:	200f883a 	mov	r7,r4
    d438:	180d883a 	mov	r6,r3
    d43c:	8009883a 	mov	r4,r16
    d440:	880b883a 	mov	r5,r17
    d444:	00800f16 	blt	zero,r2,d484 <strtof+0x118>
    d448:	9009883a 	mov	r4,r18
    d44c:	017fe034 	movhi	r5,65408
    d450:	297fffc4 	addi	r5,r5,-1
    d454:	000fe280 	call	fe28 <__ltsf2>
    d458:	023fffc4 	movi	r8,-1
    d45c:	027ffc34 	movhi	r9,65520
    d460:	4a7fffc4 	addi	r9,r9,-1
    d464:	880b883a 	mov	r5,r17
    d468:	480f883a 	mov	r7,r9
    d46c:	8009883a 	mov	r4,r16
    d470:	400d883a 	mov	r6,r8
    d474:	103fdf0e 	bge	r2,zero,d3f4 <strtof+0x88>
    d478:	0010be00 	call	10be0 <__ltdf2>
    d47c:	103fda0e 	bge	r2,zero,d3e8 <strtof+0x7c>
    d480:	003fdc06 	br	d3f4 <strtof+0x88>
    d484:	0010ad00 	call	10ad0 <__gtdf2>
    d488:	00bfd70e 	bge	zero,r2,d3e8 <strtof+0x7c>
    d48c:	003fee06 	br	d448 <strtof+0xdc>

0000d490 <strtod>:
    d490:	01800074 	movhi	r6,1
    d494:	319ae204 	addi	r6,r6,27528
    d498:	2007883a 	mov	r3,r4
    d49c:	31000017 	ldw	r4,0(r6)
    d4a0:	280d883a 	mov	r6,r5
    d4a4:	180b883a 	mov	r5,r3
    d4a8:	000be881 	jmpi	be88 <_strtod_r>

0000d4ac <_strtol_r>:
    d4ac:	defff304 	addi	sp,sp,-52
    d4b0:	00800074 	movhi	r2,1
    d4b4:	109ae104 	addi	r2,r2,27524
    d4b8:	dcc00615 	stw	r19,24(sp)
    d4bc:	14c00017 	ldw	r19,0(r2)
    d4c0:	ddc00a15 	stw	r23,40(sp)
    d4c4:	dc000315 	stw	r16,12(sp)
    d4c8:	dfc00c15 	stw	ra,48(sp)
    d4cc:	df000b15 	stw	fp,44(sp)
    d4d0:	dd800915 	stw	r22,36(sp)
    d4d4:	dd400815 	stw	r21,32(sp)
    d4d8:	dd000715 	stw	r20,28(sp)
    d4dc:	dc800515 	stw	r18,20(sp)
    d4e0:	dc400415 	stw	r17,16(sp)
    d4e4:	282f883a 	mov	r23,r5
    d4e8:	d9000015 	stw	r4,0(sp)
    d4ec:	d9800115 	stw	r6,4(sp)
    d4f0:	2821883a 	mov	r16,r5
    d4f4:	84400007 	ldb	r17,0(r16)
    d4f8:	84000044 	addi	r16,r16,1
    d4fc:	9c47883a 	add	r3,r19,r17
    d500:	18800003 	ldbu	r2,0(r3)
    d504:	1080020c 	andi	r2,r2,8
    d508:	103ffa1e 	bne	r2,zero,d4f4 <_strtol_r+0x48>
    d50c:	00800b44 	movi	r2,45
    d510:	88805c26 	beq	r17,r2,d684 <_strtol_r+0x1d8>
    d514:	00800ac4 	movi	r2,43
    d518:	88805726 	beq	r17,r2,d678 <_strtol_r+0x1cc>
    d51c:	0039883a 	mov	fp,zero
    d520:	3807003a 	cmpeq	r3,r7,zero
    d524:	1800431e 	bne	r3,zero,d634 <_strtol_r+0x188>
    d528:	00800404 	movi	r2,16
    d52c:	38804126 	beq	r7,r2,d634 <_strtol_r+0x188>
    d530:	3829883a 	mov	r20,r7
    d534:	e02cc03a 	cmpne	r22,fp,zero
    d538:	b0004b1e 	bne	r22,zero,d668 <_strtol_r+0x1bc>
    d53c:	04a00034 	movhi	r18,32768
    d540:	94bfffc4 	addi	r18,r18,-1
    d544:	9009883a 	mov	r4,r18
    d548:	a00b883a 	mov	r5,r20
    d54c:	d9c00215 	stw	r7,8(sp)
    d550:	00028ac0 	call	28ac <__umodsi3>
    d554:	9009883a 	mov	r4,r18
    d558:	a00b883a 	mov	r5,r20
    d55c:	102b883a 	mov	r21,r2
    d560:	00028a40 	call	28a4 <__udivsi3>
    d564:	1011883a 	mov	r8,r2
    d568:	9c45883a 	add	r2,r19,r17
    d56c:	11000003 	ldbu	r4,0(r2)
    d570:	000b883a 	mov	r5,zero
    d574:	000d883a 	mov	r6,zero
    d578:	20c0010c 	andi	r3,r4,4
    d57c:	d9c00217 	ldw	r7,8(sp)
    d580:	18000e26 	beq	r3,zero,d5bc <_strtol_r+0x110>
    d584:	88fff404 	addi	r3,r17,-48
    d588:	19c0140e 	bge	r3,r7,d5dc <_strtol_r+0x130>
    d58c:	30003116 	blt	r6,zero,d654 <_strtol_r+0x1a8>
    d590:	41403036 	bltu	r8,r5,d654 <_strtol_r+0x1a8>
    d594:	2a002e26 	beq	r5,r8,d650 <_strtol_r+0x1a4>
    d598:	2d05383a 	mul	r2,r5,r20
    d59c:	01800044 	movi	r6,1
    d5a0:	10cb883a 	add	r5,r2,r3
    d5a4:	84400007 	ldb	r17,0(r16)
    d5a8:	84000044 	addi	r16,r16,1
    d5ac:	9c45883a 	add	r2,r19,r17
    d5b0:	11000003 	ldbu	r4,0(r2)
    d5b4:	20c0010c 	andi	r3,r4,4
    d5b8:	183ff21e 	bne	r3,zero,d584 <_strtol_r+0xd8>
    d5bc:	208000cc 	andi	r2,r4,3
    d5c0:	10000626 	beq	r2,zero,d5dc <_strtol_r+0x130>
    d5c4:	2080004c 	andi	r2,r4,1
    d5c8:	1005003a 	cmpeq	r2,r2,zero
    d5cc:	1000231e 	bne	r2,zero,d65c <_strtol_r+0x1b0>
    d5d0:	00800dc4 	movi	r2,55
    d5d4:	8887c83a 	sub	r3,r17,r2
    d5d8:	19ffec16 	blt	r3,r7,d58c <_strtol_r+0xe0>
    d5dc:	30002d16 	blt	r6,zero,d694 <_strtol_r+0x1e8>
    d5e0:	b000231e 	bne	r22,zero,d670 <_strtol_r+0x1c4>
    d5e4:	2807883a 	mov	r3,r5
    d5e8:	d8800117 	ldw	r2,4(sp)
    d5ec:	10000426 	beq	r2,zero,d600 <_strtol_r+0x154>
    d5f0:	30000126 	beq	r6,zero,d5f8 <_strtol_r+0x14c>
    d5f4:	85ffffc4 	addi	r23,r16,-1
    d5f8:	d9000117 	ldw	r4,4(sp)
    d5fc:	25c00015 	stw	r23,0(r4)
    d600:	1805883a 	mov	r2,r3
    d604:	dfc00c17 	ldw	ra,48(sp)
    d608:	df000b17 	ldw	fp,44(sp)
    d60c:	ddc00a17 	ldw	r23,40(sp)
    d610:	dd800917 	ldw	r22,36(sp)
    d614:	dd400817 	ldw	r21,32(sp)
    d618:	dd000717 	ldw	r20,28(sp)
    d61c:	dcc00617 	ldw	r19,24(sp)
    d620:	dc800517 	ldw	r18,20(sp)
    d624:	dc400417 	ldw	r17,16(sp)
    d628:	dc000317 	ldw	r16,12(sp)
    d62c:	dec00d04 	addi	sp,sp,52
    d630:	f800283a 	ret
    d634:	00800c04 	movi	r2,48
    d638:	88801d26 	beq	r17,r2,d6b0 <_strtol_r+0x204>
    d63c:	183fbc26 	beq	r3,zero,d530 <_strtol_r+0x84>
    d640:	00800c04 	movi	r2,48
    d644:	88802726 	beq	r17,r2,d6e4 <_strtol_r+0x238>
    d648:	01c00284 	movi	r7,10
    d64c:	003fb806 	br	d530 <_strtol_r+0x84>
    d650:	a8ffd10e 	bge	r21,r3,d598 <_strtol_r+0xec>
    d654:	01bfffc4 	movi	r6,-1
    d658:	003fd206 	br	d5a4 <_strtol_r+0xf8>
    d65c:	008015c4 	movi	r2,87
    d660:	8887c83a 	sub	r3,r17,r2
    d664:	003fdc06 	br	d5d8 <_strtol_r+0x12c>
    d668:	04a00034 	movhi	r18,32768
    d66c:	003fb506 	br	d544 <_strtol_r+0x98>
    d670:	0147c83a 	sub	r3,zero,r5
    d674:	003fdc06 	br	d5e8 <_strtol_r+0x13c>
    d678:	84400007 	ldb	r17,0(r16)
    d67c:	84000044 	addi	r16,r16,1
    d680:	003fa606 	br	d51c <_strtol_r+0x70>
    d684:	84400007 	ldb	r17,0(r16)
    d688:	07000044 	movi	fp,1
    d68c:	84000044 	addi	r16,r16,1
    d690:	003fa306 	br	d520 <_strtol_r+0x74>
    d694:	e005003a 	cmpeq	r2,fp,zero
    d698:	10000f1e 	bne	r2,zero,d6d8 <_strtol_r+0x22c>
    d69c:	00e00034 	movhi	r3,32768
    d6a0:	d9000017 	ldw	r4,0(sp)
    d6a4:	00800884 	movi	r2,34
    d6a8:	20800015 	stw	r2,0(r4)
    d6ac:	003fce06 	br	d5e8 <_strtol_r+0x13c>
    d6b0:	81000007 	ldb	r4,0(r16)
    d6b4:	00801e04 	movi	r2,120
    d6b8:	20800226 	beq	r4,r2,d6c4 <_strtol_r+0x218>
    d6bc:	00801604 	movi	r2,88
    d6c0:	20bfde1e 	bne	r4,r2,d63c <_strtol_r+0x190>
    d6c4:	84400047 	ldb	r17,1(r16)
    d6c8:	01c00404 	movi	r7,16
    d6cc:	84000084 	addi	r16,r16,2
    d6d0:	3829883a 	mov	r20,r7
    d6d4:	003f9706 	br	d534 <_strtol_r+0x88>
    d6d8:	00e00034 	movhi	r3,32768
    d6dc:	18ffffc4 	addi	r3,r3,-1
    d6e0:	003fef06 	br	d6a0 <_strtol_r+0x1f4>
    d6e4:	01c00204 	movi	r7,8
    d6e8:	3829883a 	mov	r20,r7
    d6ec:	003f9106 	br	d534 <_strtol_r+0x88>

0000d6f0 <strtol>:
    d6f0:	00800074 	movhi	r2,1
    d6f4:	109ae204 	addi	r2,r2,27528
    d6f8:	2013883a 	mov	r9,r4
    d6fc:	11000017 	ldw	r4,0(r2)
    d700:	2805883a 	mov	r2,r5
    d704:	300f883a 	mov	r7,r6
    d708:	480b883a 	mov	r5,r9
    d70c:	100d883a 	mov	r6,r2
    d710:	000d4ac1 	jmpi	d4ac <_strtol_r>

0000d714 <_strtoll_r>:
    d714:	defff004 	addi	sp,sp,-64
    d718:	00800074 	movhi	r2,1
    d71c:	109ae104 	addi	r2,r2,27524
    d720:	df000e15 	stw	fp,56(sp)
    d724:	17000017 	ldw	fp,0(r2)
    d728:	ddc00d15 	stw	r23,52(sp)
    d72c:	dd000a15 	stw	r20,40(sp)
    d730:	dfc00f15 	stw	ra,60(sp)
    d734:	dd800c15 	stw	r22,48(sp)
    d738:	dd400b15 	stw	r21,44(sp)
    d73c:	dcc00915 	stw	r19,36(sp)
    d740:	dc800815 	stw	r18,32(sp)
    d744:	dc400715 	stw	r17,28(sp)
    d748:	dc000615 	stw	r16,24(sp)
    d74c:	d9400315 	stw	r5,12(sp)
    d750:	d9000215 	stw	r4,8(sp)
    d754:	d9800415 	stw	r6,16(sp)
    d758:	382f883a 	mov	r23,r7
    d75c:	2829883a 	mov	r20,r5
    d760:	a4c00007 	ldb	r19,0(r20)
    d764:	a5000044 	addi	r20,r20,1
    d768:	e4c7883a 	add	r3,fp,r19
    d76c:	18800003 	ldbu	r2,0(r3)
    d770:	1080020c 	andi	r2,r2,8
    d774:	103ffa1e 	bne	r2,zero,d760 <_strtoll_r+0x4c>
    d778:	00800b44 	movi	r2,45
    d77c:	98808826 	beq	r19,r2,d9a0 <_strtoll_r+0x28c>
    d780:	00800ac4 	movi	r2,43
    d784:	98808326 	beq	r19,r2,d994 <_strtoll_r+0x280>
    d788:	d8000115 	stw	zero,4(sp)
    d78c:	b807003a 	cmpeq	r3,r23,zero
    d790:	18005f1e 	bne	r3,zero,d910 <_strtoll_r+0x1fc>
    d794:	00800404 	movi	r2,16
    d798:	b8805d26 	beq	r23,r2,d910 <_strtoll_r+0x1fc>
    d79c:	b82dd7fa 	srai	r22,r23,31
    d7a0:	b82b883a 	mov	r21,r23
    d7a4:	d8c00117 	ldw	r3,4(sp)
    d7a8:	1806c03a 	cmpne	r3,r3,zero
    d7ac:	d8c00515 	stw	r3,20(sp)
    d7b0:	1800631e 	bne	r3,zero,d940 <_strtoll_r+0x22c>
    d7b4:	043fffc4 	movi	r16,-1
    d7b8:	04600034 	movhi	r17,32768
    d7bc:	8c7fffc4 	addi	r17,r17,-1
    d7c0:	880b883a 	mov	r5,r17
    d7c4:	8009883a 	mov	r4,r16
    d7c8:	a80d883a 	mov	r6,r21
    d7cc:	b00f883a 	mov	r7,r22
    d7d0:	000f7880 	call	f788 <__umoddi3>
    d7d4:	880b883a 	mov	r5,r17
    d7d8:	8009883a 	mov	r4,r16
    d7dc:	b00f883a 	mov	r7,r22
    d7e0:	a80d883a 	mov	r6,r21
    d7e4:	d8800015 	stw	r2,0(sp)
    d7e8:	000f1ac0 	call	f1ac <__udivdi3>
    d7ec:	1023883a 	mov	r17,r2
    d7f0:	e4c5883a 	add	r2,fp,r19
    d7f4:	11000003 	ldbu	r4,0(r2)
    d7f8:	1825883a 	mov	r18,r3
    d7fc:	0015883a 	mov	r10,zero
    d800:	20c0010c 	andi	r3,r4,4
    d804:	0017883a 	mov	r11,zero
    d808:	000f883a 	mov	r7,zero
    d80c:	18001a26 	beq	r3,zero,d878 <_strtoll_r+0x164>
    d810:	9c3ff404 	addi	r16,r19,-48
    d814:	85c0200e 	bge	r16,r23,d898 <_strtoll_r+0x184>
    d818:	38003b16 	blt	r7,zero,d908 <_strtoll_r+0x1f4>
    d81c:	92c03a36 	bltu	r18,r11,d908 <_strtoll_r+0x1f4>
    d820:	5c803826 	beq	r11,r18,d904 <_strtoll_r+0x1f0>
    d824:	54404c26 	beq	r10,r17,d958 <_strtoll_r+0x244>
    d828:	580b883a 	mov	r5,r11
    d82c:	5009883a 	mov	r4,r10
    d830:	a80d883a 	mov	r6,r21
    d834:	b00f883a 	mov	r7,r22
    d838:	000f0700 	call	f070 <__muldi3>
    d83c:	8013d7fa 	srai	r9,r16,31
    d840:	100d883a 	mov	r6,r2
    d844:	1405883a 	add	r2,r2,r16
    d848:	118d803a 	cmpltu	r6,r2,r6
    d84c:	1a47883a 	add	r3,r3,r9
    d850:	30cd883a 	add	r6,r6,r3
    d854:	1015883a 	mov	r10,r2
    d858:	3017883a 	mov	r11,r6
    d85c:	01c00044 	movi	r7,1
    d860:	a4c00007 	ldb	r19,0(r20)
    d864:	a5000044 	addi	r20,r20,1
    d868:	e4c5883a 	add	r2,fp,r19
    d86c:	11000003 	ldbu	r4,0(r2)
    d870:	20c0010c 	andi	r3,r4,4
    d874:	183fe61e 	bne	r3,zero,d810 <_strtoll_r+0xfc>
    d878:	208000cc 	andi	r2,r4,3
    d87c:	10000626 	beq	r2,zero,d898 <_strtoll_r+0x184>
    d880:	2080004c 	andi	r2,r4,1
    d884:	1005003a 	cmpeq	r2,r2,zero
    d888:	1000301e 	bne	r2,zero,d94c <_strtoll_r+0x238>
    d88c:	02000dc4 	movi	r8,55
    d890:	9a21c83a 	sub	r16,r19,r8
    d894:	85ffe016 	blt	r16,r23,d818 <_strtoll_r+0x104>
    d898:	38004616 	blt	r7,zero,d9b4 <_strtoll_r+0x2a0>
    d89c:	d8800517 	ldw	r2,20(sp)
    d8a0:	1000341e 	bne	r2,zero,d974 <_strtoll_r+0x260>
    d8a4:	500b883a 	mov	r5,r10
    d8a8:	580d883a 	mov	r6,r11
    d8ac:	d8c00417 	ldw	r3,16(sp)
    d8b0:	18000626 	beq	r3,zero,d8cc <_strtoll_r+0x1b8>
    d8b4:	38000226 	beq	r7,zero,d8c0 <_strtoll_r+0x1ac>
    d8b8:	a53fffc4 	addi	r20,r20,-1
    d8bc:	dd000315 	stw	r20,12(sp)
    d8c0:	d8c00317 	ldw	r3,12(sp)
    d8c4:	d8800417 	ldw	r2,16(sp)
    d8c8:	10c00015 	stw	r3,0(r2)
    d8cc:	2805883a 	mov	r2,r5
    d8d0:	3007883a 	mov	r3,r6
    d8d4:	dfc00f17 	ldw	ra,60(sp)
    d8d8:	df000e17 	ldw	fp,56(sp)
    d8dc:	ddc00d17 	ldw	r23,52(sp)
    d8e0:	dd800c17 	ldw	r22,48(sp)
    d8e4:	dd400b17 	ldw	r21,44(sp)
    d8e8:	dd000a17 	ldw	r20,40(sp)
    d8ec:	dcc00917 	ldw	r19,36(sp)
    d8f0:	dc800817 	ldw	r18,32(sp)
    d8f4:	dc400717 	ldw	r17,28(sp)
    d8f8:	dc000617 	ldw	r16,24(sp)
    d8fc:	dec01004 	addi	sp,sp,64
    d900:	f800283a 	ret
    d904:	8abfc72e 	bgeu	r17,r10,d824 <_strtoll_r+0x110>
    d908:	01ffffc4 	movi	r7,-1
    d90c:	003fd406 	br	d860 <_strtoll_r+0x14c>
    d910:	00800c04 	movi	r2,48
    d914:	98803226 	beq	r19,r2,d9e0 <_strtoll_r+0x2cc>
    d918:	183fa026 	beq	r3,zero,d79c <_strtoll_r+0x88>
    d91c:	00800c04 	movi	r2,48
    d920:	98803e26 	beq	r19,r2,da1c <_strtoll_r+0x308>
    d924:	d8c00117 	ldw	r3,4(sp)
    d928:	05c00284 	movi	r23,10
    d92c:	b82b883a 	mov	r21,r23
    d930:	1806c03a 	cmpne	r3,r3,zero
    d934:	002d883a 	mov	r22,zero
    d938:	d8c00515 	stw	r3,20(sp)
    d93c:	183f9d26 	beq	r3,zero,d7b4 <_strtoll_r+0xa0>
    d940:	0021883a 	mov	r16,zero
    d944:	04600034 	movhi	r17,32768
    d948:	003f9d06 	br	d7c0 <_strtoll_r+0xac>
    d94c:	020015c4 	movi	r8,87
    d950:	9a21c83a 	sub	r16,r19,r8
    d954:	003fcf06 	br	d894 <_strtoll_r+0x180>
    d958:	5cbfb31e 	bne	r11,r18,d828 <_strtoll_r+0x114>
    d95c:	d8800017 	ldw	r2,0(sp)
    d960:	143fb10e 	bge	r2,r16,d828 <_strtoll_r+0x114>
    d964:	8815883a 	mov	r10,r17
    d968:	9017883a 	mov	r11,r18
    d96c:	01ffffc4 	movi	r7,-1
    d970:	003fbb06 	br	d860 <_strtoll_r+0x14c>
    d974:	0009883a 	mov	r4,zero
    d978:	2285c83a 	sub	r2,r4,r10
    d97c:	2089803a 	cmpltu	r4,r4,r2
    d980:	02c7c83a 	sub	r3,zero,r11
    d984:	1909c83a 	sub	r4,r3,r4
    d988:	100b883a 	mov	r5,r2
    d98c:	200d883a 	mov	r6,r4
    d990:	003fc606 	br	d8ac <_strtoll_r+0x198>
    d994:	a4c00007 	ldb	r19,0(r20)
    d998:	a5000044 	addi	r20,r20,1
    d99c:	003f7a06 	br	d788 <_strtoll_r+0x74>
    d9a0:	a4c00007 	ldb	r19,0(r20)
    d9a4:	00800044 	movi	r2,1
    d9a8:	a5000044 	addi	r20,r20,1
    d9ac:	d8800115 	stw	r2,4(sp)
    d9b0:	003f7606 	br	d78c <_strtoll_r+0x78>
    d9b4:	d8c00117 	ldw	r3,4(sp)
    d9b8:	1805003a 	cmpeq	r2,r3,zero
    d9bc:	1000131e 	bne	r2,zero,da0c <_strtoll_r+0x2f8>
    d9c0:	0005883a 	mov	r2,zero
    d9c4:	00e00034 	movhi	r3,32768
    d9c8:	100b883a 	mov	r5,r2
    d9cc:	180d883a 	mov	r6,r3
    d9d0:	d8c00217 	ldw	r3,8(sp)
    d9d4:	00800884 	movi	r2,34
    d9d8:	18800015 	stw	r2,0(r3)
    d9dc:	003fb306 	br	d8ac <_strtoll_r+0x198>
    d9e0:	a1000007 	ldb	r4,0(r20)
    d9e4:	00801e04 	movi	r2,120
    d9e8:	20800226 	beq	r4,r2,d9f4 <_strtoll_r+0x2e0>
    d9ec:	00801604 	movi	r2,88
    d9f0:	20bfc91e 	bne	r4,r2,d918 <_strtoll_r+0x204>
    d9f4:	a4c00047 	ldb	r19,1(r20)
    d9f8:	05c00404 	movi	r23,16
    d9fc:	b82b883a 	mov	r21,r23
    da00:	a5000084 	addi	r20,r20,2
    da04:	002d883a 	mov	r22,zero
    da08:	003f6606 	br	d7a4 <_strtoll_r+0x90>
    da0c:	017fffc4 	movi	r5,-1
    da10:	01a00034 	movhi	r6,32768
    da14:	31bfffc4 	addi	r6,r6,-1
    da18:	003fed06 	br	d9d0 <_strtoll_r+0x2bc>
    da1c:	05c00204 	movi	r23,8
    da20:	b82b883a 	mov	r21,r23
    da24:	002d883a 	mov	r22,zero
    da28:	003f5e06 	br	d7a4 <_strtoll_r+0x90>

0000da2c <_strtoul_r>:
    da2c:	defff604 	addi	sp,sp,-40
    da30:	00800074 	movhi	r2,1
    da34:	109ae104 	addi	r2,r2,27524
    da38:	dd000415 	stw	r20,16(sp)
    da3c:	15000017 	ldw	r20,0(r2)
    da40:	ddc00715 	stw	r23,28(sp)
    da44:	dd800615 	stw	r22,24(sp)
    da48:	dd400515 	stw	r21,20(sp)
    da4c:	dc800215 	stw	r18,8(sp)
    da50:	dc000015 	stw	r16,0(sp)
    da54:	dfc00915 	stw	ra,36(sp)
    da58:	df000815 	stw	fp,32(sp)
    da5c:	dcc00315 	stw	r19,12(sp)
    da60:	dc400115 	stw	r17,4(sp)
    da64:	282b883a 	mov	r21,r5
    da68:	202f883a 	mov	r23,r4
    da6c:	302d883a 	mov	r22,r6
    da70:	3825883a 	mov	r18,r7
    da74:	2821883a 	mov	r16,r5
    da78:	84400007 	ldb	r17,0(r16)
    da7c:	84000044 	addi	r16,r16,1
    da80:	a447883a 	add	r3,r20,r17
    da84:	18800003 	ldbu	r2,0(r3)
    da88:	1080020c 	andi	r2,r2,8
    da8c:	103ffa1e 	bne	r2,zero,da78 <_strtoul_r+0x4c>
    da90:	00800b44 	movi	r2,45
    da94:	88805626 	beq	r17,r2,dbf0 <_strtoul_r+0x1c4>
    da98:	00800ac4 	movi	r2,43
    da9c:	88805126 	beq	r17,r2,dbe4 <_strtoul_r+0x1b8>
    daa0:	0039883a 	mov	fp,zero
    daa4:	9007003a 	cmpeq	r3,r18,zero
    daa8:	18003b1e 	bne	r3,zero,db98 <_strtoul_r+0x16c>
    daac:	00800404 	movi	r2,16
    dab0:	90803926 	beq	r18,r2,db98 <_strtoul_r+0x16c>
    dab4:	013fffc4 	movi	r4,-1
    dab8:	900b883a 	mov	r5,r18
    dabc:	00028a40 	call	28a4 <__udivsi3>
    dac0:	013fffc4 	movi	r4,-1
    dac4:	900b883a 	mov	r5,r18
    dac8:	1027883a 	mov	r19,r2
    dacc:	00028ac0 	call	28ac <__umodsi3>
    dad0:	1011883a 	mov	r8,r2
    dad4:	900f883a 	mov	r7,r18
    dad8:	a445883a 	add	r2,r20,r17
    dadc:	11000003 	ldbu	r4,0(r2)
    dae0:	000b883a 	mov	r5,zero
    dae4:	000d883a 	mov	r6,zero
    dae8:	20c0010c 	andi	r3,r4,4
    daec:	18000e26 	beq	r3,zero,db28 <_strtoul_r+0xfc>
    daf0:	88fff404 	addi	r3,r17,-48
    daf4:	1c80140e 	bge	r3,r18,db48 <_strtoul_r+0x11c>
    daf8:	30003316 	blt	r6,zero,dbc8 <_strtoul_r+0x19c>
    dafc:	99403236 	bltu	r19,r5,dbc8 <_strtoul_r+0x19c>
    db00:	2cc03026 	beq	r5,r19,dbc4 <_strtoul_r+0x198>
    db04:	29c5383a 	mul	r2,r5,r7
    db08:	01800044 	movi	r6,1
    db0c:	10cb883a 	add	r5,r2,r3
    db10:	84400007 	ldb	r17,0(r16)
    db14:	84000044 	addi	r16,r16,1
    db18:	a445883a 	add	r2,r20,r17
    db1c:	11000003 	ldbu	r4,0(r2)
    db20:	20c0010c 	andi	r3,r4,4
    db24:	183ff21e 	bne	r3,zero,daf0 <_strtoul_r+0xc4>
    db28:	208000cc 	andi	r2,r4,3
    db2c:	10000626 	beq	r2,zero,db48 <_strtoul_r+0x11c>
    db30:	2080004c 	andi	r2,r4,1
    db34:	1005003a 	cmpeq	r2,r2,zero
    db38:	1000251e 	bne	r2,zero,dbd0 <_strtoul_r+0x1a4>
    db3c:	00800dc4 	movi	r2,55
    db40:	8887c83a 	sub	r3,r17,r2
    db44:	1cbfec16 	blt	r3,r18,daf8 <_strtoul_r+0xcc>
    db48:	3000400e 	bge	r6,zero,dc4c <_strtoul_r+0x220>
    db4c:	00800884 	movi	r2,34
    db50:	017fffc4 	movi	r5,-1
    db54:	b8800015 	stw	r2,0(r23)
    db58:	b0000226 	beq	r22,zero,db64 <_strtoul_r+0x138>
    db5c:	30001f1e 	bne	r6,zero,dbdc <_strtoul_r+0x1b0>
    db60:	b5400015 	stw	r21,0(r22)
    db64:	2805883a 	mov	r2,r5
    db68:	dfc00917 	ldw	ra,36(sp)
    db6c:	df000817 	ldw	fp,32(sp)
    db70:	ddc00717 	ldw	r23,28(sp)
    db74:	dd800617 	ldw	r22,24(sp)
    db78:	dd400517 	ldw	r21,20(sp)
    db7c:	dd000417 	ldw	r20,16(sp)
    db80:	dcc00317 	ldw	r19,12(sp)
    db84:	dc800217 	ldw	r18,8(sp)
    db88:	dc400117 	ldw	r17,4(sp)
    db8c:	dc000017 	ldw	r16,0(sp)
    db90:	dec00a04 	addi	sp,sp,40
    db94:	f800283a 	ret
    db98:	00800c04 	movi	r2,48
    db9c:	88801826 	beq	r17,r2,dc00 <_strtoul_r+0x1d4>
    dba0:	183fc426 	beq	r3,zero,dab4 <_strtoul_r+0x88>
    dba4:	00800c04 	movi	r2,48
    dba8:	88802226 	beq	r17,r2,dc34 <_strtoul_r+0x208>
    dbac:	04800284 	movi	r18,10
    dbb0:	900f883a 	mov	r7,r18
    dbb4:	04c666b4 	movhi	r19,6554
    dbb8:	9ce66644 	addi	r19,r19,-26215
    dbbc:	02000144 	movi	r8,5
    dbc0:	003fc506 	br	dad8 <_strtoul_r+0xac>
    dbc4:	40ffcf0e 	bge	r8,r3,db04 <_strtoul_r+0xd8>
    dbc8:	01bfffc4 	movi	r6,-1
    dbcc:	003fd006 	br	db10 <_strtoul_r+0xe4>
    dbd0:	008015c4 	movi	r2,87
    dbd4:	8887c83a 	sub	r3,r17,r2
    dbd8:	003fda06 	br	db44 <_strtoul_r+0x118>
    dbdc:	857fffc4 	addi	r21,r16,-1
    dbe0:	003fdf06 	br	db60 <_strtoul_r+0x134>
    dbe4:	84400007 	ldb	r17,0(r16)
    dbe8:	84000044 	addi	r16,r16,1
    dbec:	003fac06 	br	daa0 <_strtoul_r+0x74>
    dbf0:	84400007 	ldb	r17,0(r16)
    dbf4:	07000044 	movi	fp,1
    dbf8:	84000044 	addi	r16,r16,1
    dbfc:	003fa906 	br	daa4 <_strtoul_r+0x78>
    dc00:	81000007 	ldb	r4,0(r16)
    dc04:	00801e04 	movi	r2,120
    dc08:	20800226 	beq	r4,r2,dc14 <_strtoul_r+0x1e8>
    dc0c:	00801604 	movi	r2,88
    dc10:	20bfe31e 	bne	r4,r2,dba0 <_strtoul_r+0x174>
    dc14:	84400047 	ldb	r17,1(r16)
    dc18:	04800404 	movi	r18,16
    dc1c:	84000084 	addi	r16,r16,2
    dc20:	900f883a 	mov	r7,r18
    dc24:	04c40034 	movhi	r19,4096
    dc28:	9cffffc4 	addi	r19,r19,-1
    dc2c:	020003c4 	movi	r8,15
    dc30:	003fa906 	br	dad8 <_strtoul_r+0xac>
    dc34:	04800204 	movi	r18,8
    dc38:	900f883a 	mov	r7,r18
    dc3c:	04c80034 	movhi	r19,8192
    dc40:	9cffffc4 	addi	r19,r19,-1
    dc44:	020001c4 	movi	r8,7
    dc48:	003fa306 	br	dad8 <_strtoul_r+0xac>
    dc4c:	e005003a 	cmpeq	r2,fp,zero
    dc50:	103fc11e 	bne	r2,zero,db58 <_strtoul_r+0x12c>
    dc54:	014bc83a 	sub	r5,zero,r5
    dc58:	003fbf06 	br	db58 <_strtoul_r+0x12c>

0000dc5c <strtoul>:
    dc5c:	00800074 	movhi	r2,1
    dc60:	109ae204 	addi	r2,r2,27528
    dc64:	2013883a 	mov	r9,r4
    dc68:	11000017 	ldw	r4,0(r2)
    dc6c:	2805883a 	mov	r2,r5
    dc70:	300f883a 	mov	r7,r6
    dc74:	480b883a 	mov	r5,r9
    dc78:	100d883a 	mov	r6,r2
    dc7c:	000da2c1 	jmpi	da2c <_strtoul_r>

0000dc80 <_strtoull_r>:
    dc80:	defff104 	addi	sp,sp,-60
    dc84:	00800074 	movhi	r2,1
    dc88:	109ae104 	addi	r2,r2,27524
    dc8c:	df000d15 	stw	fp,52(sp)
    dc90:	17000017 	ldw	fp,0(r2)
    dc94:	ddc00c15 	stw	r23,48(sp)
    dc98:	dcc00815 	stw	r19,32(sp)
    dc9c:	dfc00e15 	stw	ra,56(sp)
    dca0:	dd800b15 	stw	r22,44(sp)
    dca4:	dd400a15 	stw	r21,40(sp)
    dca8:	dd000915 	stw	r20,36(sp)
    dcac:	dc800715 	stw	r18,28(sp)
    dcb0:	dc400615 	stw	r17,24(sp)
    dcb4:	dc000515 	stw	r16,20(sp)
    dcb8:	d9400215 	stw	r5,8(sp)
    dcbc:	d9000115 	stw	r4,4(sp)
    dcc0:	d9800315 	stw	r6,12(sp)
    dcc4:	382f883a 	mov	r23,r7
    dcc8:	2827883a 	mov	r19,r5
    dccc:	9d000007 	ldb	r20,0(r19)
    dcd0:	9cc00044 	addi	r19,r19,1
    dcd4:	e507883a 	add	r3,fp,r20
    dcd8:	18800003 	ldbu	r2,0(r3)
    dcdc:	1080020c 	andi	r2,r2,8
    dce0:	103ffa1e 	bne	r2,zero,dccc <_strtoull_r+0x4c>
    dce4:	00800b44 	movi	r2,45
    dce8:	a0807a26 	beq	r20,r2,ded4 <_strtoull_r+0x254>
    dcec:	00800ac4 	movi	r2,43
    dcf0:	a0807526 	beq	r20,r2,dec8 <_strtoull_r+0x248>
    dcf4:	d8000015 	stw	zero,0(sp)
    dcf8:	b807003a 	cmpeq	r3,r23,zero
    dcfc:	18005a1e 	bne	r3,zero,de68 <_strtoull_r+0x1e8>
    dd00:	00800404 	movi	r2,16
    dd04:	b8805826 	beq	r23,r2,de68 <_strtoull_r+0x1e8>
    dd08:	b82dd7fa 	srai	r22,r23,31
    dd0c:	043fffc4 	movi	r16,-1
    dd10:	8009883a 	mov	r4,r16
    dd14:	800b883a 	mov	r5,r16
    dd18:	b80d883a 	mov	r6,r23
    dd1c:	b00f883a 	mov	r7,r22
    dd20:	000f1ac0 	call	f1ac <__udivdi3>
    dd24:	8009883a 	mov	r4,r16
    dd28:	800b883a 	mov	r5,r16
    dd2c:	b80d883a 	mov	r6,r23
    dd30:	b00f883a 	mov	r7,r22
    dd34:	1023883a 	mov	r17,r2
    dd38:	1825883a 	mov	r18,r3
    dd3c:	000f7880 	call	f788 <__umoddi3>
    dd40:	b82b883a 	mov	r21,r23
    dd44:	1019883a 	mov	r12,r2
    dd48:	e505883a 	add	r2,fp,r20
    dd4c:	11000003 	ldbu	r4,0(r2)
    dd50:	0015883a 	mov	r10,zero
    dd54:	0017883a 	mov	r11,zero
    dd58:	20c0010c 	andi	r3,r4,4
    dd5c:	000d883a 	mov	r6,zero
    dd60:	18001c26 	beq	r3,zero,ddd4 <_strtoull_r+0x154>
    dd64:	a43ff404 	addi	r16,r20,-48
    dd68:	85c0220e 	bge	r16,r23,ddf4 <_strtoull_r+0x174>
    dd6c:	30003c16 	blt	r6,zero,de60 <_strtoull_r+0x1e0>
    dd70:	92c03b36 	bltu	r18,r11,de60 <_strtoull_r+0x1e0>
    dd74:	5c803926 	beq	r11,r18,de5c <_strtoull_r+0x1dc>
    dd78:	54404c26 	beq	r10,r17,deac <_strtoull_r+0x22c>
    dd7c:	580b883a 	mov	r5,r11
    dd80:	5009883a 	mov	r4,r10
    dd84:	a80d883a 	mov	r6,r21
    dd88:	b00f883a 	mov	r7,r22
    dd8c:	db000415 	stw	r12,16(sp)
    dd90:	000f0700 	call	f070 <__muldi3>
    dd94:	8013d7fa 	srai	r9,r16,31
    dd98:	100d883a 	mov	r6,r2
    dd9c:	1405883a 	add	r2,r2,r16
    dda0:	118d803a 	cmpltu	r6,r2,r6
    dda4:	1a47883a 	add	r3,r3,r9
    dda8:	db000417 	ldw	r12,16(sp)
    ddac:	30cd883a 	add	r6,r6,r3
    ddb0:	3017883a 	mov	r11,r6
    ddb4:	1015883a 	mov	r10,r2
    ddb8:	01800044 	movi	r6,1
    ddbc:	9d000007 	ldb	r20,0(r19)
    ddc0:	9cc00044 	addi	r19,r19,1
    ddc4:	e505883a 	add	r2,fp,r20
    ddc8:	11000003 	ldbu	r4,0(r2)
    ddcc:	20c0010c 	andi	r3,r4,4
    ddd0:	183fe41e 	bne	r3,zero,dd64 <_strtoull_r+0xe4>
    ddd4:	208000cc 	andi	r2,r4,3
    ddd8:	10000626 	beq	r2,zero,ddf4 <_strtoull_r+0x174>
    dddc:	2080004c 	andi	r2,r4,1
    dde0:	1005003a 	cmpeq	r2,r2,zero
    dde4:	10002e1e 	bne	r2,zero,dea0 <_strtoull_r+0x220>
    dde8:	02000dc4 	movi	r8,55
    ddec:	a221c83a 	sub	r16,r20,r8
    ddf0:	85ffde16 	blt	r16,r23,dd6c <_strtoull_r+0xec>
    ddf4:	3000530e 	bge	r6,zero,df44 <_strtoull_r+0x2c4>
    ddf8:	d8c00117 	ldw	r3,4(sp)
    ddfc:	02bfffc4 	movi	r10,-1
    de00:	00800884 	movi	r2,34
    de04:	5017883a 	mov	r11,r10
    de08:	18800015 	stw	r2,0(r3)
    de0c:	d8800317 	ldw	r2,12(sp)
    de10:	10000426 	beq	r2,zero,de24 <_strtoull_r+0x1a4>
    de14:	3000291e 	bne	r6,zero,debc <_strtoull_r+0x23c>
    de18:	d8800217 	ldw	r2,8(sp)
    de1c:	d8c00317 	ldw	r3,12(sp)
    de20:	18800015 	stw	r2,0(r3)
    de24:	5005883a 	mov	r2,r10
    de28:	5807883a 	mov	r3,r11
    de2c:	dfc00e17 	ldw	ra,56(sp)
    de30:	df000d17 	ldw	fp,52(sp)
    de34:	ddc00c17 	ldw	r23,48(sp)
    de38:	dd800b17 	ldw	r22,44(sp)
    de3c:	dd400a17 	ldw	r21,40(sp)
    de40:	dd000917 	ldw	r20,36(sp)
    de44:	dcc00817 	ldw	r19,32(sp)
    de48:	dc800717 	ldw	r18,28(sp)
    de4c:	dc400617 	ldw	r17,24(sp)
    de50:	dc000517 	ldw	r16,20(sp)
    de54:	dec00f04 	addi	sp,sp,60
    de58:	f800283a 	ret
    de5c:	8abfc62e 	bgeu	r17,r10,dd78 <_strtoull_r+0xf8>
    de60:	01bfffc4 	movi	r6,-1
    de64:	003fd506 	br	ddbc <_strtoull_r+0x13c>
    de68:	00800c04 	movi	r2,48
    de6c:	a0801e26 	beq	r20,r2,dee8 <_strtoull_r+0x268>
    de70:	183fa526 	beq	r3,zero,dd08 <_strtoull_r+0x88>
    de74:	00800c04 	movi	r2,48
    de78:	a0802a26 	beq	r20,r2,df24 <_strtoull_r+0x2a4>
    de7c:	05c00284 	movi	r23,10
    de80:	b82b883a 	mov	r21,r23
    de84:	046666b4 	movhi	r17,39322
    de88:	8c666644 	addi	r17,r17,-26215
    de8c:	002d883a 	mov	r22,zero
    de90:	048666b4 	movhi	r18,6554
    de94:	94a66644 	addi	r18,r18,-26215
    de98:	03000144 	movi	r12,5
    de9c:	003faa06 	br	dd48 <_strtoull_r+0xc8>
    dea0:	020015c4 	movi	r8,87
    dea4:	a221c83a 	sub	r16,r20,r8
    dea8:	003fd106 	br	ddf0 <_strtoull_r+0x170>
    deac:	5cbfb31e 	bne	r11,r18,dd7c <_strtoull_r+0xfc>
    deb0:	643fb20e 	bge	r12,r16,dd7c <_strtoull_r+0xfc>
    deb4:	01bfffc4 	movi	r6,-1
    deb8:	003fc006 	br	ddbc <_strtoull_r+0x13c>
    debc:	9cffffc4 	addi	r19,r19,-1
    dec0:	dcc00215 	stw	r19,8(sp)
    dec4:	003fd406 	br	de18 <_strtoull_r+0x198>
    dec8:	9d000007 	ldb	r20,0(r19)
    decc:	9cc00044 	addi	r19,r19,1
    ded0:	003f8806 	br	dcf4 <_strtoull_r+0x74>
    ded4:	9d000007 	ldb	r20,0(r19)
    ded8:	00800044 	movi	r2,1
    dedc:	9cc00044 	addi	r19,r19,1
    dee0:	d8800015 	stw	r2,0(sp)
    dee4:	003f8406 	br	dcf8 <_strtoull_r+0x78>
    dee8:	99000007 	ldb	r4,0(r19)
    deec:	00801e04 	movi	r2,120
    def0:	20800226 	beq	r4,r2,defc <_strtoull_r+0x27c>
    def4:	00801604 	movi	r2,88
    def8:	20bfdd1e 	bne	r4,r2,de70 <_strtoull_r+0x1f0>
    defc:	9d000047 	ldb	r20,1(r19)
    df00:	05c00404 	movi	r23,16
    df04:	b82b883a 	mov	r21,r23
    df08:	047fffc4 	movi	r17,-1
    df0c:	9cc00084 	addi	r19,r19,2
    df10:	002d883a 	mov	r22,zero
    df14:	04840034 	movhi	r18,4096
    df18:	94bfffc4 	addi	r18,r18,-1
    df1c:	030003c4 	movi	r12,15
    df20:	003f8906 	br	dd48 <_strtoull_r+0xc8>
    df24:	05c00204 	movi	r23,8
    df28:	b82b883a 	mov	r21,r23
    df2c:	047fffc4 	movi	r17,-1
    df30:	002d883a 	mov	r22,zero
    df34:	04880034 	movhi	r18,8192
    df38:	94bfffc4 	addi	r18,r18,-1
    df3c:	030001c4 	movi	r12,7
    df40:	003f8106 	br	dd48 <_strtoull_r+0xc8>
    df44:	d8c00017 	ldw	r3,0(sp)
    df48:	1805003a 	cmpeq	r2,r3,zero
    df4c:	103faf1e 	bne	r2,zero,de0c <_strtoull_r+0x18c>
    df50:	0009883a 	mov	r4,zero
    df54:	2285c83a 	sub	r2,r4,r10
    df58:	02c7c83a 	sub	r3,zero,r11
    df5c:	2089803a 	cmpltu	r4,r4,r2
    df60:	1909c83a 	sub	r4,r3,r4
    df64:	1015883a 	mov	r10,r2
    df68:	2017883a 	mov	r11,r4
    df6c:	003fa706 	br	de0c <_strtoull_r+0x18c>

0000df70 <__submore>:
    df70:	defffa04 	addi	sp,sp,-24
    df74:	28c00c17 	ldw	r3,48(r5)
    df78:	dc800215 	stw	r18,8(sp)
    df7c:	2825883a 	mov	r18,r5
    df80:	dc000015 	stw	r16,0(sp)
    df84:	90801004 	addi	r2,r18,64
    df88:	04010004 	movi	r16,1024
    df8c:	dfc00515 	stw	ra,20(sp)
    df90:	dd000415 	stw	r20,16(sp)
    df94:	dcc00315 	stw	r19,12(sp)
    df98:	dc400115 	stw	r17,4(sp)
    df9c:	800b883a 	mov	r5,r16
    dfa0:	18801b26 	beq	r3,r2,e010 <__submore+0xa0>
    dfa4:	94400d17 	ldw	r17,52(r18)
    dfa8:	180b883a 	mov	r5,r3
    dfac:	8c69883a 	add	r20,r17,r17
    dfb0:	a00d883a 	mov	r6,r20
    dfb4:	000b7140 	call	b714 <_realloc_r>
    dfb8:	1467883a 	add	r19,r2,r17
    dfbc:	1021883a 	mov	r16,r2
    dfc0:	880d883a 	mov	r6,r17
    dfc4:	9809883a 	mov	r4,r19
    dfc8:	100b883a 	mov	r5,r2
    dfcc:	10000e26 	beq	r2,zero,e008 <__submore+0x98>
    dfd0:	00036840 	call	3684 <memcpy>
    dfd4:	000d883a 	mov	r6,zero
    dfd8:	95000d15 	stw	r20,52(r18)
    dfdc:	94c00015 	stw	r19,0(r18)
    dfe0:	94000c15 	stw	r16,48(r18)
    dfe4:	3005883a 	mov	r2,r6
    dfe8:	dfc00517 	ldw	ra,20(sp)
    dfec:	dd000417 	ldw	r20,16(sp)
    dff0:	dcc00317 	ldw	r19,12(sp)
    dff4:	dc800217 	ldw	r18,8(sp)
    dff8:	dc400117 	ldw	r17,4(sp)
    dffc:	dc000017 	ldw	r16,0(sp)
    e000:	dec00604 	addi	sp,sp,24
    e004:	f800283a 	ret
    e008:	01bfffc4 	movi	r6,-1
    e00c:	003ff506 	br	dfe4 <__submore+0x74>
    e010:	0002e600 	call	2e60 <_malloc_r>
    e014:	1009883a 	mov	r4,r2
    e018:	1140ff44 	addi	r5,r2,1021
    e01c:	000d883a 	mov	r6,zero
    e020:	103ff926 	beq	r2,zero,e008 <__submore+0x98>
    e024:	90801083 	ldbu	r2,66(r18)
    e028:	94000d15 	stw	r16,52(r18)
    e02c:	91000c15 	stw	r4,48(r18)
    e030:	28800085 	stb	r2,2(r5)
    e034:	90c01043 	ldbu	r3,65(r18)
    e038:	28c00045 	stb	r3,1(r5)
    e03c:	90801003 	ldbu	r2,64(r18)
    e040:	2080ff45 	stb	r2,1021(r4)
    e044:	91400015 	stw	r5,0(r18)
    e048:	003fe606 	br	dfe4 <__submore+0x74>

0000e04c <_ungetc_r>:
    e04c:	defffc04 	addi	sp,sp,-16
    e050:	00bfffc4 	movi	r2,-1
    e054:	dc400215 	stw	r17,8(sp)
    e058:	dc000115 	stw	r16,4(sp)
    e05c:	dfc00315 	stw	ra,12(sp)
    e060:	2821883a 	mov	r16,r5
    e064:	2023883a 	mov	r17,r4
    e068:	28801826 	beq	r5,r2,e0cc <_ungetc_r+0x80>
    e06c:	20000226 	beq	r4,zero,e078 <_ungetc_r+0x2c>
    e070:	20800e17 	ldw	r2,56(r4)
    e074:	10001b26 	beq	r2,zero,e0e4 <_ungetc_r+0x98>
    e078:	3100030b 	ldhu	r4,12(r6)
    e07c:	00bff7c4 	movi	r2,-33
    e080:	2084703a 	and	r2,r4,r2
    e084:	117fffcc 	andi	r5,r2,65535
    e088:	28c0010c 	andi	r3,r5,4
    e08c:	1009883a 	mov	r4,r2
    e090:	3080030d 	sth	r2,12(r6)
    e094:	18003526 	beq	r3,zero,e16c <_ungetc_r+0x120>
    e098:	30800c17 	ldw	r2,48(r6)
    e09c:	84003fcc 	andi	r16,r16,255
    e0a0:	10001426 	beq	r2,zero,e0f4 <_ungetc_r+0xa8>
    e0a4:	30c00117 	ldw	r3,4(r6)
    e0a8:	30800d17 	ldw	r2,52(r6)
    e0ac:	1880380e 	bge	r3,r2,e190 <_ungetc_r+0x144>
    e0b0:	30c00017 	ldw	r3,0(r6)
    e0b4:	19ffffc4 	addi	r7,r3,-1
    e0b8:	31c00015 	stw	r7,0(r6)
    e0bc:	1c3fffc5 	stb	r16,-1(r3)
    e0c0:	30800117 	ldw	r2,4(r6)
    e0c4:	10800044 	addi	r2,r2,1
    e0c8:	30800115 	stw	r2,4(r6)
    e0cc:	8005883a 	mov	r2,r16
    e0d0:	dfc00317 	ldw	ra,12(sp)
    e0d4:	dc400217 	ldw	r17,8(sp)
    e0d8:	dc000117 	ldw	r16,4(sp)
    e0dc:	dec00404 	addi	sp,sp,16
    e0e0:	f800283a 	ret
    e0e4:	d9800015 	stw	r6,0(sp)
    e0e8:	0002a880 	call	2a88 <__sinit>
    e0ec:	d9800017 	ldw	r6,0(sp)
    e0f0:	003fe106 	br	e078 <_ungetc_r+0x2c>
    e0f4:	30800417 	ldw	r2,16(r6)
    e0f8:	10002326 	beq	r2,zero,e188 <_ungetc_r+0x13c>
    e0fc:	31c00017 	ldw	r7,0(r6)
    e100:	11c0022e 	bgeu	r2,r7,e10c <_ungetc_r+0xc0>
    e104:	38bfffc3 	ldbu	r2,-1(r7)
    e108:	80801226 	beq	r16,r2,e154 <_ungetc_r+0x108>
    e10c:	30c00117 	ldw	r3,4(r6)
    e110:	00800044 	movi	r2,1
    e114:	30800115 	stw	r2,4(r6)
    e118:	008000c4 	movi	r2,3
    e11c:	31001004 	addi	r4,r6,64
    e120:	31401084 	addi	r5,r6,66
    e124:	30800d15 	stw	r2,52(r6)
    e128:	8005883a 	mov	r2,r16
    e12c:	30c00f15 	stw	r3,60(r6)
    e130:	31c00e15 	stw	r7,56(r6)
    e134:	31000c15 	stw	r4,48(r6)
    e138:	31400015 	stw	r5,0(r6)
    e13c:	34001085 	stb	r16,66(r6)
    e140:	dfc00317 	ldw	ra,12(sp)
    e144:	dc400217 	ldw	r17,8(sp)
    e148:	dc000117 	ldw	r16,4(sp)
    e14c:	dec00404 	addi	sp,sp,16
    e150:	f800283a 	ret
    e154:	30800117 	ldw	r2,4(r6)
    e158:	39ffffc4 	addi	r7,r7,-1
    e15c:	31c00015 	stw	r7,0(r6)
    e160:	10800044 	addi	r2,r2,1
    e164:	30800115 	stw	r2,4(r6)
    e168:	003fd806 	br	e0cc <_ungetc_r+0x80>
    e16c:	2880040c 	andi	r2,r5,16
    e170:	10000d26 	beq	r2,zero,e1a8 <_ungetc_r+0x15c>
    e174:	2880020c 	andi	r2,r5,8
    e178:	10000d1e 	bne	r2,zero,e1b0 <_ungetc_r+0x164>
    e17c:	20800114 	ori	r2,r4,4
    e180:	3080030d 	sth	r2,12(r6)
    e184:	003fc406 	br	e098 <_ungetc_r+0x4c>
    e188:	31c00017 	ldw	r7,0(r6)
    e18c:	003fdf06 	br	e10c <_ungetc_r+0xc0>
    e190:	300b883a 	mov	r5,r6
    e194:	8809883a 	mov	r4,r17
    e198:	d9800015 	stw	r6,0(sp)
    e19c:	000df700 	call	df70 <__submore>
    e1a0:	d9800017 	ldw	r6,0(sp)
    e1a4:	103fc226 	beq	r2,zero,e0b0 <_ungetc_r+0x64>
    e1a8:	043fffc4 	movi	r16,-1
    e1ac:	003fc706 	br	e0cc <_ungetc_r+0x80>
    e1b0:	300b883a 	mov	r5,r6
    e1b4:	8809883a 	mov	r4,r17
    e1b8:	d9800015 	stw	r6,0(sp)
    e1bc:	00092980 	call	9298 <_fflush_r>
    e1c0:	d9800017 	ldw	r6,0(sp)
    e1c4:	103ff81e 	bne	r2,zero,e1a8 <_ungetc_r+0x15c>
    e1c8:	3100030b 	ldhu	r4,12(r6)
    e1cc:	00bffdc4 	movi	r2,-9
    e1d0:	30000215 	stw	zero,8(r6)
    e1d4:	2084703a 	and	r2,r4,r2
    e1d8:	1009883a 	mov	r4,r2
    e1dc:	3080030d 	sth	r2,12(r6)
    e1e0:	30000615 	stw	zero,24(r6)
    e1e4:	003fe506 	br	e17c <_ungetc_r+0x130>

0000e1e8 <ungetc>:
    e1e8:	01800074 	movhi	r6,1
    e1ec:	319ae204 	addi	r6,r6,27528
    e1f0:	2007883a 	mov	r3,r4
    e1f4:	31000017 	ldw	r4,0(r6)
    e1f8:	280d883a 	mov	r6,r5
    e1fc:	180b883a 	mov	r5,r3
    e200:	000e04c1 	jmpi	e04c <_ungetc_r>

0000e204 <__swbuf_r>:
    e204:	defffc04 	addi	sp,sp,-16
    e208:	dc400215 	stw	r17,8(sp)
    e20c:	dc000115 	stw	r16,4(sp)
    e210:	dfc00315 	stw	ra,12(sp)
    e214:	2023883a 	mov	r17,r4
    e218:	2821883a 	mov	r16,r5
    e21c:	20000226 	beq	r4,zero,e228 <__swbuf_r+0x24>
    e220:	20800e17 	ldw	r2,56(r4)
    e224:	10002f26 	beq	r2,zero,e2e4 <__swbuf_r+0xe0>
    e228:	3080030b 	ldhu	r2,12(r6)
    e22c:	30c00617 	ldw	r3,24(r6)
    e230:	1080020c 	andi	r2,r2,8
    e234:	30c00215 	stw	r3,8(r6)
    e238:	10002226 	beq	r2,zero,e2c4 <__swbuf_r+0xc0>
    e23c:	30c00417 	ldw	r3,16(r6)
    e240:	18002026 	beq	r3,zero,e2c4 <__swbuf_r+0xc0>
    e244:	31000017 	ldw	r4,0(r6)
    e248:	30800517 	ldw	r2,20(r6)
    e24c:	20c7c83a 	sub	r3,r4,r3
    e250:	18802f0e 	bge	r3,r2,e310 <__swbuf_r+0x10c>
    e254:	19400044 	addi	r5,r3,1
    e258:	30800217 	ldw	r2,8(r6)
    e25c:	84003fcc 	andi	r16,r16,255
    e260:	20c00044 	addi	r3,r4,1
    e264:	10bfffc4 	addi	r2,r2,-1
    e268:	30800215 	stw	r2,8(r6)
    e26c:	24000005 	stb	r16,0(r4)
    e270:	30800517 	ldw	r2,20(r6)
    e274:	30c00015 	stw	r3,0(r6)
    e278:	11400c26 	beq	r2,r5,e2ac <__swbuf_r+0xa8>
    e27c:	3080030b 	ldhu	r2,12(r6)
    e280:	1080004c 	andi	r2,r2,1
    e284:	1005003a 	cmpeq	r2,r2,zero
    e288:	10000626 	beq	r2,zero,e2a4 <__swbuf_r+0xa0>
    e28c:	8005883a 	mov	r2,r16
    e290:	dfc00317 	ldw	ra,12(sp)
    e294:	dc400217 	ldw	r17,8(sp)
    e298:	dc000117 	ldw	r16,4(sp)
    e29c:	dec00404 	addi	sp,sp,16
    e2a0:	f800283a 	ret
    e2a4:	00800284 	movi	r2,10
    e2a8:	80bff81e 	bne	r16,r2,e28c <__swbuf_r+0x88>
    e2ac:	8809883a 	mov	r4,r17
    e2b0:	300b883a 	mov	r5,r6
    e2b4:	00092980 	call	9298 <_fflush_r>
    e2b8:	103ff426 	beq	r2,zero,e28c <__swbuf_r+0x88>
    e2bc:	043fffc4 	movi	r16,-1
    e2c0:	003ff206 	br	e28c <__swbuf_r+0x88>
    e2c4:	300b883a 	mov	r5,r6
    e2c8:	8809883a 	mov	r4,r17
    e2cc:	d9800015 	stw	r6,0(sp)
    e2d0:	00077fc0 	call	77fc <__swsetup_r>
    e2d4:	d9800017 	ldw	r6,0(sp)
    e2d8:	1000061e 	bne	r2,zero,e2f4 <__swbuf_r+0xf0>
    e2dc:	30c00417 	ldw	r3,16(r6)
    e2e0:	003fd806 	br	e244 <__swbuf_r+0x40>
    e2e4:	d9800015 	stw	r6,0(sp)
    e2e8:	0002a880 	call	2a88 <__sinit>
    e2ec:	d9800017 	ldw	r6,0(sp)
    e2f0:	003fcd06 	br	e228 <__swbuf_r+0x24>
    e2f4:	3080030b 	ldhu	r2,12(r6)
    e2f8:	00c00244 	movi	r3,9
    e2fc:	043fffc4 	movi	r16,-1
    e300:	10801014 	ori	r2,r2,64
    e304:	3080030d 	sth	r2,12(r6)
    e308:	88c00015 	stw	r3,0(r17)
    e30c:	003fdf06 	br	e28c <__swbuf_r+0x88>
    e310:	300b883a 	mov	r5,r6
    e314:	8809883a 	mov	r4,r17
    e318:	d9800015 	stw	r6,0(sp)
    e31c:	00092980 	call	9298 <_fflush_r>
    e320:	d9800017 	ldw	r6,0(sp)
    e324:	103fe51e 	bne	r2,zero,e2bc <__swbuf_r+0xb8>
    e328:	31000017 	ldw	r4,0(r6)
    e32c:	01400044 	movi	r5,1
    e330:	003fc906 	br	e258 <__swbuf_r+0x54>

0000e334 <__swbuf>:
    e334:	01800074 	movhi	r6,1
    e338:	319ae204 	addi	r6,r6,27528
    e33c:	2007883a 	mov	r3,r4
    e340:	31000017 	ldw	r4,0(r6)
    e344:	280d883a 	mov	r6,r5
    e348:	180b883a 	mov	r5,r3
    e34c:	000e2041 	jmpi	e204 <__swbuf_r>

0000e350 <_calloc_r>:
    e350:	298b383a 	mul	r5,r5,r6
    e354:	defffe04 	addi	sp,sp,-8
    e358:	dc000015 	stw	r16,0(sp)
    e35c:	dfc00115 	stw	ra,4(sp)
    e360:	0002e600 	call	2e60 <_malloc_r>
    e364:	1021883a 	mov	r16,r2
    e368:	01c00904 	movi	r7,36
    e36c:	10000d26 	beq	r2,zero,e3a4 <_calloc_r+0x54>
    e370:	10ffff17 	ldw	r3,-4(r2)
    e374:	1009883a 	mov	r4,r2
    e378:	00bfff04 	movi	r2,-4
    e37c:	1886703a 	and	r3,r3,r2
    e380:	1887883a 	add	r3,r3,r2
    e384:	180d883a 	mov	r6,r3
    e388:	000b883a 	mov	r5,zero
    e38c:	38c01736 	bltu	r7,r3,e3ec <_calloc_r+0x9c>
    e390:	008004c4 	movi	r2,19
    e394:	10c00836 	bltu	r2,r3,e3b8 <_calloc_r+0x68>
    e398:	20000215 	stw	zero,8(r4)
    e39c:	20000015 	stw	zero,0(r4)
    e3a0:	20000115 	stw	zero,4(r4)
    e3a4:	8005883a 	mov	r2,r16
    e3a8:	dfc00117 	ldw	ra,4(sp)
    e3ac:	dc000017 	ldw	r16,0(sp)
    e3b0:	dec00204 	addi	sp,sp,8
    e3b4:	f800283a 	ret
    e3b8:	008006c4 	movi	r2,27
    e3bc:	80000015 	stw	zero,0(r16)
    e3c0:	80000115 	stw	zero,4(r16)
    e3c4:	81000204 	addi	r4,r16,8
    e3c8:	10fff32e 	bgeu	r2,r3,e398 <_calloc_r+0x48>
    e3cc:	80000215 	stw	zero,8(r16)
    e3d0:	80000315 	stw	zero,12(r16)
    e3d4:	81000404 	addi	r4,r16,16
    e3d8:	19ffef1e 	bne	r3,r7,e398 <_calloc_r+0x48>
    e3dc:	81000604 	addi	r4,r16,24
    e3e0:	80000415 	stw	zero,16(r16)
    e3e4:	80000515 	stw	zero,20(r16)
    e3e8:	003feb06 	br	e398 <_calloc_r+0x48>
    e3ec:	00037240 	call	3724 <memset>
    e3f0:	8005883a 	mov	r2,r16
    e3f4:	dfc00117 	ldw	ra,4(sp)
    e3f8:	dc000017 	ldw	r16,0(sp)
    e3fc:	dec00204 	addi	sp,sp,8
    e400:	f800283a 	ret

0000e404 <_fstat_r>:
    e404:	defffd04 	addi	sp,sp,-12
    e408:	dc000015 	stw	r16,0(sp)
    e40c:	040000b4 	movhi	r16,2
    e410:	8421be04 	addi	r16,r16,-30984
    e414:	dc400115 	stw	r17,4(sp)
    e418:	80000015 	stw	zero,0(r16)
    e41c:	2023883a 	mov	r17,r4
    e420:	2809883a 	mov	r4,r5
    e424:	300b883a 	mov	r5,r6
    e428:	dfc00215 	stw	ra,8(sp)
    e42c:	0011ae00 	call	11ae0 <fstat>
    e430:	1007883a 	mov	r3,r2
    e434:	00bfffc4 	movi	r2,-1
    e438:	18800626 	beq	r3,r2,e454 <_fstat_r+0x50>
    e43c:	1805883a 	mov	r2,r3
    e440:	dfc00217 	ldw	ra,8(sp)
    e444:	dc400117 	ldw	r17,4(sp)
    e448:	dc000017 	ldw	r16,0(sp)
    e44c:	dec00304 	addi	sp,sp,12
    e450:	f800283a 	ret
    e454:	80800017 	ldw	r2,0(r16)
    e458:	103ff826 	beq	r2,zero,e43c <_fstat_r+0x38>
    e45c:	88800015 	stw	r2,0(r17)
    e460:	1805883a 	mov	r2,r3
    e464:	dfc00217 	ldw	ra,8(sp)
    e468:	dc400117 	ldw	r17,4(sp)
    e46c:	dc000017 	ldw	r16,0(sp)
    e470:	dec00304 	addi	sp,sp,12
    e474:	f800283a 	ret

0000e478 <htinit>:
    e478:	28800003 	ldbu	r2,0(r5)
    e47c:	10000626 	beq	r2,zero,e498 <htinit+0x20>
    e480:	1105883a 	add	r2,r2,r4
    e484:	11800005 	stb	r6,0(r2)
    e488:	28800043 	ldbu	r2,1(r5)
    e48c:	31800044 	addi	r6,r6,1
    e490:	29400044 	addi	r5,r5,1
    e494:	103ffa1e 	bne	r2,zero,e480 <htinit+0x8>
    e498:	f800283a 	ret

0000e49c <__hexdig_init>:
    e49c:	defffd04 	addi	sp,sp,-12
    e4a0:	dc400015 	stw	r17,0(sp)
    e4a4:	044000b4 	movhi	r17,2
    e4a8:	8c620304 	addi	r17,r17,-30708
    e4ac:	dcc00115 	stw	r19,4(sp)
    e4b0:	8809883a 	mov	r4,r17
    e4b4:	04c00684 	movi	r19,26
    e4b8:	01400074 	movhi	r5,1
    e4bc:	2953dc04 	addi	r5,r5,20336
    e4c0:	01800404 	movi	r6,16
    e4c4:	dfc00215 	stw	ra,8(sp)
    e4c8:	000e4780 	call	e478 <htinit>
    e4cc:	980d883a 	mov	r6,r19
    e4d0:	8809883a 	mov	r4,r17
    e4d4:	01400074 	movhi	r5,1
    e4d8:	2953df04 	addi	r5,r5,20348
    e4dc:	000e4780 	call	e478 <htinit>
    e4e0:	8809883a 	mov	r4,r17
    e4e4:	980d883a 	mov	r6,r19
    e4e8:	01400074 	movhi	r5,1
    e4ec:	2953e104 	addi	r5,r5,20356
    e4f0:	dfc00217 	ldw	ra,8(sp)
    e4f4:	dcc00117 	ldw	r19,4(sp)
    e4f8:	dc400017 	ldw	r17,0(sp)
    e4fc:	dec00304 	addi	sp,sp,12
    e500:	000e4781 	jmpi	e478 <htinit>

0000e504 <rshift>:
    e504:	2807d17a 	srai	r3,r5,5
    e508:	20800417 	ldw	r2,16(r4)
    e50c:	22400504 	addi	r9,r4,20
    e510:	480f883a 	mov	r7,r9
    e514:	1880190e 	bge	r3,r2,e57c <rshift+0x78>
    e518:	1085883a 	add	r2,r2,r2
    e51c:	18c7883a 	add	r3,r3,r3
    e520:	1085883a 	add	r2,r2,r2
    e524:	18c7883a 	add	r3,r3,r3
    e528:	294007cc 	andi	r5,r5,31
    e52c:	4891883a 	add	r8,r9,r2
    e530:	48cd883a 	add	r6,r9,r3
    e534:	28001726 	beq	r5,zero,e594 <rshift+0x90>
    e538:	30c00017 	ldw	r3,0(r6)
    e53c:	00800804 	movi	r2,32
    e540:	31800104 	addi	r6,r6,4
    e544:	1155c83a 	sub	r10,r2,r5
    e548:	1946d83a 	srl	r3,r3,r5
    e54c:	3200092e 	bgeu	r6,r8,e574 <rshift+0x70>
    e550:	30800017 	ldw	r2,0(r6)
    e554:	1284983a 	sll	r2,r2,r10
    e558:	10c4b03a 	or	r2,r2,r3
    e55c:	38800015 	stw	r2,0(r7)
    e560:	30c00017 	ldw	r3,0(r6)
    e564:	31800104 	addi	r6,r6,4
    e568:	39c00104 	addi	r7,r7,4
    e56c:	1946d83a 	srl	r3,r3,r5
    e570:	323ff736 	bltu	r6,r8,e550 <rshift+0x4c>
    e574:	38c00015 	stw	r3,0(r7)
    e578:	18000c1e 	bne	r3,zero,e5ac <rshift+0xa8>
    e57c:	3a45c83a 	sub	r2,r7,r9
    e580:	1005d0ba 	srai	r2,r2,2
    e584:	20800415 	stw	r2,16(r4)
    e588:	1000011e 	bne	r2,zero,e590 <rshift+0x8c>
    e58c:	20000515 	stw	zero,20(r4)
    e590:	f800283a 	ret
    e594:	323ff92e 	bgeu	r6,r8,e57c <rshift+0x78>
    e598:	30800017 	ldw	r2,0(r6)
    e59c:	31800104 	addi	r6,r6,4
    e5a0:	38800015 	stw	r2,0(r7)
    e5a4:	39c00104 	addi	r7,r7,4
    e5a8:	003ffa06 	br	e594 <rshift+0x90>
    e5ac:	39c00104 	addi	r7,r7,4
    e5b0:	003ff206 	br	e57c <rshift+0x78>

0000e5b4 <__gethex>:
    e5b4:	defff304 	addi	sp,sp,-52
    e5b8:	dd400815 	stw	r21,32(sp)
    e5bc:	dd000715 	stw	r20,28(sp)
    e5c0:	dcc00615 	stw	r19,24(sp)
    e5c4:	dc400415 	stw	r17,16(sp)
    e5c8:	dfc00c15 	stw	ra,48(sp)
    e5cc:	df000b15 	stw	fp,44(sp)
    e5d0:	ddc00a15 	stw	r23,40(sp)
    e5d4:	dd800915 	stw	r22,36(sp)
    e5d8:	dc800515 	stw	r18,20(sp)
    e5dc:	dc000315 	stw	r16,12(sp)
    e5e0:	044000b4 	movhi	r17,2
    e5e4:	8c620304 	addi	r17,r17,-30708
    e5e8:	88800c03 	ldbu	r2,48(r17)
    e5ec:	202b883a 	mov	r21,r4
    e5f0:	2827883a 	mov	r19,r5
    e5f4:	3029883a 	mov	r20,r6
    e5f8:	d9c00115 	stw	r7,4(sp)
    e5fc:	10006e26 	beq	r2,zero,e7b8 <__gethex+0x204>
    e600:	99800017 	ldw	r6,0(r19)
    e604:	00800c04 	movi	r2,48
    e608:	31000083 	ldbu	r4,2(r6)
    e60c:	30c00084 	addi	r3,r6,2
    e610:	20806f1e 	bne	r4,r2,e7d0 <__gethex+0x21c>
    e614:	200b883a 	mov	r5,r4
    e618:	3007883a 	mov	r3,r6
    e61c:	188000c3 	ldbu	r2,3(r3)
    e620:	18c00044 	addi	r3,r3,1
    e624:	1009883a 	mov	r4,r2
    e628:	117ffc26 	beq	r2,r5,e61c <__gethex+0x68>
    e62c:	1997c83a 	sub	r11,r3,r6
    e630:	19400084 	addi	r5,r3,2
    e634:	2445883a 	add	r2,r4,r17
    e638:	10c00003 	ldbu	r3,0(r2)
    e63c:	18002d26 	beq	r3,zero,e6f4 <__gethex+0x140>
    e640:	29000003 	ldbu	r4,0(r5)
    e644:	2825883a 	mov	r18,r5
    e648:	000d883a 	mov	r6,zero
    e64c:	0013883a 	mov	r9,zero
    e650:	21003fcc 	andi	r4,r4,255
    e654:	2445883a 	add	r2,r4,r17
    e658:	10c00003 	ldbu	r3,0(r2)
    e65c:	18000526 	beq	r3,zero,e674 <__gethex+0xc0>
    e660:	29400044 	addi	r5,r5,1
    e664:	29000003 	ldbu	r4,0(r5)
    e668:	2445883a 	add	r2,r4,r17
    e66c:	10c00003 	ldbu	r3,0(r2)
    e670:	183ffb1e 	bne	r3,zero,e660 <__gethex+0xac>
    e674:	00800b84 	movi	r2,46
    e678:	20805826 	beq	r4,r2,e7dc <__gethex+0x228>
    e67c:	30007a26 	beq	r6,zero,e868 <__gethex+0x2b4>
    e680:	2985c83a 	sub	r2,r5,r6
    e684:	1085883a 	add	r2,r2,r2
    e688:	1085883a 	add	r2,r2,r2
    e68c:	00adc83a 	sub	r22,zero,r2
    e690:	2821883a 	mov	r16,r5
    e694:	80c00003 	ldbu	r3,0(r16)
    e698:	00801404 	movi	r2,80
    e69c:	18801e26 	beq	r3,r2,e718 <__gethex+0x164>
    e6a0:	00801c04 	movi	r2,112
    e6a4:	18801c26 	beq	r3,r2,e718 <__gethex+0x164>
    e6a8:	800d883a 	mov	r6,r16
    e6ac:	4805003a 	cmpeq	r2,r9,zero
    e6b0:	99800015 	stw	r6,0(r19)
    e6b4:	1000861e 	bne	r2,zero,e8d0 <__gethex+0x31c>
    e6b8:	58003d26 	beq	r11,zero,e7b0 <__gethex+0x1fc>
    e6bc:	0025883a 	mov	r18,zero
    e6c0:	9005883a 	mov	r2,r18
    e6c4:	dfc00c17 	ldw	ra,48(sp)
    e6c8:	df000b17 	ldw	fp,44(sp)
    e6cc:	ddc00a17 	ldw	r23,40(sp)
    e6d0:	dd800917 	ldw	r22,36(sp)
    e6d4:	dd400817 	ldw	r21,32(sp)
    e6d8:	dd000717 	ldw	r20,28(sp)
    e6dc:	dcc00617 	ldw	r19,24(sp)
    e6e0:	dc800517 	ldw	r18,20(sp)
    e6e4:	dc400417 	ldw	r17,16(sp)
    e6e8:	dc000317 	ldw	r16,12(sp)
    e6ec:	dec00d04 	addi	sp,sp,52
    e6f0:	f800283a 	ret
    e6f4:	00800b84 	movi	r2,46
    e6f8:	20804a26 	beq	r4,r2,e824 <__gethex+0x270>
    e6fc:	2821883a 	mov	r16,r5
    e700:	80c00003 	ldbu	r3,0(r16)
    e704:	00801404 	movi	r2,80
    e708:	2825883a 	mov	r18,r5
    e70c:	02400044 	movi	r9,1
    e710:	002d883a 	mov	r22,zero
    e714:	18bfe21e 	bne	r3,r2,e6a0 <__gethex+0xec>
    e718:	80c00043 	ldbu	r3,1(r16)
    e71c:	00800ac4 	movi	r2,43
    e720:	81000044 	addi	r4,r16,1
    e724:	18804a26 	beq	r3,r2,e850 <__gethex+0x29c>
    e728:	00800b44 	movi	r2,45
    e72c:	18804c26 	beq	r3,r2,e860 <__gethex+0x2ac>
    e730:	0015883a 	mov	r10,zero
    e734:	1c45883a 	add	r2,r3,r17
    e738:	10800003 	ldbu	r2,0(r2)
    e73c:	103fda26 	beq	r2,zero,e6a8 <__gethex+0xf4>
    e740:	02000644 	movi	r8,25
    e744:	40bfd816 	blt	r8,r2,e6a8 <__gethex+0xf4>
    e748:	20c00043 	ldbu	r3,1(r4)
    e74c:	11fffc04 	addi	r7,r2,-16
    e750:	008000b4 	movhi	r2,2
    e754:	10a20304 	addi	r2,r2,-30708
    e758:	1887883a 	add	r3,r3,r2
    e75c:	18800003 	ldbu	r2,0(r3)
    e760:	21800044 	addi	r6,r4,1
    e764:	10000d26 	beq	r2,zero,e79c <__gethex+0x1e8>
    e768:	100b883a 	mov	r5,r2
    e76c:	4080020e 	bge	r8,r2,e778 <__gethex+0x1c4>
    e770:	00000a06 	br	e79c <__gethex+0x1e8>
    e774:	41000916 	blt	r8,r4,e79c <__gethex+0x1e8>
    e778:	31800044 	addi	r6,r6,1
    e77c:	30800003 	ldbu	r2,0(r6)
    e780:	38c002a4 	muli	r3,r7,10
    e784:	1445883a 	add	r2,r2,r17
    e788:	11000003 	ldbu	r4,0(r2)
    e78c:	1947883a 	add	r3,r3,r5
    e790:	19fffc04 	addi	r7,r3,-16
    e794:	200b883a 	mov	r5,r4
    e798:	203ff61e 	bne	r4,zero,e774 <__gethex+0x1c0>
    e79c:	5005003a 	cmpeq	r2,r10,zero
    e7a0:	1000011e 	bne	r2,zero,e7a8 <__gethex+0x1f4>
    e7a4:	01cfc83a 	sub	r7,zero,r7
    e7a8:	b1ed883a 	add	r22,r22,r7
    e7ac:	003fbf06 	br	e6ac <__gethex+0xf8>
    e7b0:	04800184 	movi	r18,6
    e7b4:	003fc206 	br	e6c0 <__gethex+0x10c>
    e7b8:	000e49c0 	call	e49c <__hexdig_init>
    e7bc:	99800017 	ldw	r6,0(r19)
    e7c0:	00800c04 	movi	r2,48
    e7c4:	31000083 	ldbu	r4,2(r6)
    e7c8:	30c00084 	addi	r3,r6,2
    e7cc:	20bf9126 	beq	r4,r2,e614 <__gethex+0x60>
    e7d0:	180b883a 	mov	r5,r3
    e7d4:	0017883a 	mov	r11,zero
    e7d8:	003f9606 	br	e634 <__gethex+0x80>
    e7dc:	303fa81e 	bne	r6,zero,e680 <__gethex+0xcc>
    e7e0:	29400044 	addi	r5,r5,1
    e7e4:	28800003 	ldbu	r2,0(r5)
    e7e8:	1445883a 	add	r2,r2,r17
    e7ec:	10c00003 	ldbu	r3,0(r2)
    e7f0:	1800ad26 	beq	r3,zero,eaa8 <__gethex+0x4f4>
    e7f4:	2809883a 	mov	r4,r5
    e7f8:	21000044 	addi	r4,r4,1
    e7fc:	20800003 	ldbu	r2,0(r4)
    e800:	1445883a 	add	r2,r2,r17
    e804:	10c00003 	ldbu	r3,0(r2)
    e808:	183ffb1e 	bne	r3,zero,e7f8 <__gethex+0x244>
    e80c:	2145c83a 	sub	r2,r4,r5
    e810:	1085883a 	add	r2,r2,r2
    e814:	1085883a 	add	r2,r2,r2
    e818:	00adc83a 	sub	r22,zero,r2
    e81c:	200b883a 	mov	r5,r4
    e820:	003f9b06 	br	e690 <__gethex+0xdc>
    e824:	29000043 	ldbu	r4,1(r5)
    e828:	008000b4 	movhi	r2,2
    e82c:	10a20304 	addi	r2,r2,-30708
    e830:	2c000044 	addi	r16,r5,1
    e834:	2085883a 	add	r2,r4,r2
    e838:	10c00003 	ldbu	r3,0(r2)
    e83c:	18000d1e 	bne	r3,zero,e874 <__gethex+0x2c0>
    e840:	2825883a 	mov	r18,r5
    e844:	02400044 	movi	r9,1
    e848:	002d883a 	mov	r22,zero
    e84c:	003f9106 	br	e694 <__gethex+0xe0>
    e850:	0015883a 	mov	r10,zero
    e854:	21000044 	addi	r4,r4,1
    e858:	20c00003 	ldbu	r3,0(r4)
    e85c:	003fb506 	br	e734 <__gethex+0x180>
    e860:	02800044 	movi	r10,1
    e864:	003ffb06 	br	e854 <__gethex+0x2a0>
    e868:	2821883a 	mov	r16,r5
    e86c:	002d883a 	mov	r22,zero
    e870:	003f8806 	br	e694 <__gethex+0xe0>
    e874:	00800c04 	movi	r2,48
    e878:	20800e1e 	bne	r4,r2,e8b4 <__gethex+0x300>
    e87c:	2007883a 	mov	r3,r4
    e880:	800b883a 	mov	r5,r16
    e884:	29400044 	addi	r5,r5,1
    e888:	29000003 	ldbu	r4,0(r5)
    e88c:	20803fcc 	andi	r2,r4,255
    e890:	10fffc26 	beq	r2,r3,e884 <__gethex+0x2d0>
    e894:	1445883a 	add	r2,r2,r17
    e898:	10c00003 	ldbu	r3,0(r2)
    e89c:	1800071e 	bne	r3,zero,e8bc <__gethex+0x308>
    e8a0:	02c00044 	movi	r11,1
    e8a4:	800d883a 	mov	r6,r16
    e8a8:	2825883a 	mov	r18,r5
    e8ac:	5813883a 	mov	r9,r11
    e8b0:	003f6706 	br	e650 <__gethex+0x9c>
    e8b4:	81000003 	ldbu	r4,0(r16)
    e8b8:	800b883a 	mov	r5,r16
    e8bc:	800d883a 	mov	r6,r16
    e8c0:	2825883a 	mov	r18,r5
    e8c4:	02c00044 	movi	r11,1
    e8c8:	0013883a 	mov	r9,zero
    e8cc:	003f6006 	br	e650 <__gethex+0x9c>
    e8d0:	8485c83a 	sub	r2,r16,r18
    e8d4:	10bfffc4 	addi	r2,r2,-1
    e8d8:	00c001c4 	movi	r3,7
    e8dc:	1880700e 	bge	r3,r2,eaa0 <__gethex+0x4ec>
    e8e0:	000b883a 	mov	r5,zero
    e8e4:	1005d07a 	srai	r2,r2,1
    e8e8:	29400044 	addi	r5,r5,1
    e8ec:	18bffd16 	blt	r3,r2,e8e4 <__gethex+0x330>
    e8f0:	a809883a 	mov	r4,r21
    e8f4:	000aa3c0 	call	aa3c <_Balloc>
    e8f8:	1027883a 	mov	r19,r2
    e8fc:	10800504 	addi	r2,r2,20
    e900:	d8800215 	stw	r2,8(sp)
    e904:	9400522e 	bgeu	r18,r16,ea50 <__gethex+0x49c>
    e908:	da000217 	ldw	r8,8(sp)
    e90c:	800b883a 	mov	r5,r16
    e910:	000f883a 	mov	r7,zero
    e914:	0009883a 	mov	r4,zero
    e918:	02400b84 	movi	r9,46
    e91c:	02800804 	movi	r10,32
    e920:	297fffc4 	addi	r5,r5,-1
    e924:	28c00003 	ldbu	r3,0(r5)
    e928:	1a400826 	beq	r3,r9,e94c <__gethex+0x398>
    e92c:	380d883a 	mov	r6,r7
    e930:	3a802726 	beq	r7,r10,e9d0 <__gethex+0x41c>
    e934:	39c00104 	addi	r7,r7,4
    e938:	1c47883a 	add	r3,r3,r17
    e93c:	18800003 	ldbu	r2,0(r3)
    e940:	108003cc 	andi	r2,r2,15
    e944:	1184983a 	sll	r2,r2,r6
    e948:	2088b03a 	or	r4,r4,r2
    e94c:	917ff436 	bltu	r18,r5,e920 <__gethex+0x36c>
    e950:	d8c00217 	ldw	r3,8(sp)
    e954:	40800104 	addi	r2,r8,4
    e958:	41000015 	stw	r4,0(r8)
    e95c:	10c5c83a 	sub	r2,r2,r3
    e960:	1021d0ba 	srai	r16,r2,2
    e964:	9c000415 	stw	r16,16(r19)
    e968:	000a4e40 	call	a4e4 <__hi0bits>
    e96c:	8006917a 	slli	r3,r16,5
    e970:	a5c00017 	ldw	r23,0(r20)
    e974:	1885c83a 	sub	r2,r3,r2
    e978:	b8801c16 	blt	r23,r2,e9ec <__gethex+0x438>
    e97c:	15c00a16 	blt	r2,r23,e9a8 <__gethex+0x3f4>
    e980:	0039883a 	mov	fp,zero
    e984:	a0800217 	ldw	r2,8(r20)
    e988:	1580340e 	bge	r2,r22,ea5c <__gethex+0x4a8>
    e98c:	a809883a 	mov	r4,r21
    e990:	980b883a 	mov	r5,r19
    e994:	000a4bc0 	call	a4bc <_Bfree>
    e998:	d8c00d17 	ldw	r3,52(sp)
    e99c:	048028c4 	movi	r18,163
    e9a0:	18000015 	stw	zero,0(r3)
    e9a4:	003f4606 	br	e6c0 <__gethex+0x10c>
    e9a8:	b8a1c83a 	sub	r16,r23,r2
    e9ac:	980b883a 	mov	r5,r19
    e9b0:	a809883a 	mov	r4,r21
    e9b4:	800d883a 	mov	r6,r16
    e9b8:	000ae000 	call	ae00 <__lshift>
    e9bc:	1027883a 	mov	r19,r2
    e9c0:	b42dc83a 	sub	r22,r22,r16
    e9c4:	10800504 	addi	r2,r2,20
    e9c8:	d8800215 	stw	r2,8(sp)
    e9cc:	003fec06 	br	e980 <__gethex+0x3cc>
    e9d0:	41000015 	stw	r4,0(r8)
    e9d4:	28c00003 	ldbu	r3,0(r5)
    e9d8:	01c00104 	movi	r7,4
    e9dc:	000d883a 	mov	r6,zero
    e9e0:	41d1883a 	add	r8,r8,r7
    e9e4:	0009883a 	mov	r4,zero
    e9e8:	003fd306 	br	e938 <__gethex+0x384>
    e9ec:	15e1c83a 	sub	r16,r2,r23
    e9f0:	9809883a 	mov	r4,r19
    e9f4:	800b883a 	mov	r5,r16
    e9f8:	000a9b40 	call	a9b4 <__any_on>
    e9fc:	1000061e 	bne	r2,zero,ea18 <__gethex+0x464>
    ea00:	0039883a 	mov	fp,zero
    ea04:	9809883a 	mov	r4,r19
    ea08:	800b883a 	mov	r5,r16
    ea0c:	000e5040 	call	e504 <rshift>
    ea10:	b42d883a 	add	r22,r22,r16
    ea14:	003fdb06 	br	e984 <__gethex+0x3d0>
    ea18:	817fffc4 	addi	r5,r16,-1
    ea1c:	2805d17a 	srai	r2,r5,5
    ea20:	d8c00217 	ldw	r3,8(sp)
    ea24:	290007cc 	andi	r4,r5,31
    ea28:	1085883a 	add	r2,r2,r2
    ea2c:	1085883a 	add	r2,r2,r2
    ea30:	01800044 	movi	r6,1
    ea34:	10c5883a 	add	r2,r2,r3
    ea38:	3108983a 	sll	r4,r6,r4
    ea3c:	10c00017 	ldw	r3,0(r2)
    ea40:	20c8703a 	and	r4,r4,r3
    ea44:	20001a1e 	bne	r4,zero,eab0 <__gethex+0x4fc>
    ea48:	3039883a 	mov	fp,r6
    ea4c:	003fed06 	br	ea04 <__gethex+0x450>
    ea50:	1011883a 	mov	r8,r2
    ea54:	0009883a 	mov	r4,zero
    ea58:	003fbd06 	br	e950 <__gethex+0x39c>
    ea5c:	a1000117 	ldw	r4,4(r20)
    ea60:	b1001a16 	blt	r22,r4,eacc <__gethex+0x518>
    ea64:	04800044 	movi	r18,1
    ea68:	e0000826 	beq	fp,zero,ea8c <__gethex+0x4d8>
    ea6c:	a1000317 	ldw	r4,12(r20)
    ea70:	00800084 	movi	r2,2
    ea74:	20809426 	beq	r4,r2,ecc8 <__gethex+0x714>
    ea78:	008000c4 	movi	r2,3
    ea7c:	20805826 	beq	r4,r2,ebe0 <__gethex+0x62c>
    ea80:	00800044 	movi	r2,1
    ea84:	20803f26 	beq	r4,r2,eb84 <__gethex+0x5d0>
    ea88:	94800414 	ori	r18,r18,16
    ea8c:	d8800d17 	ldw	r2,52(sp)
    ea90:	d8c00117 	ldw	r3,4(sp)
    ea94:	14c00015 	stw	r19,0(r2)
    ea98:	1d800015 	stw	r22,0(r3)
    ea9c:	003f0806 	br	e6c0 <__gethex+0x10c>
    eaa0:	000b883a 	mov	r5,zero
    eaa4:	003f9206 	br	e8f0 <__gethex+0x33c>
    eaa8:	002d883a 	mov	r22,zero
    eaac:	003ef806 	br	e690 <__gethex+0xdc>
    eab0:	3140160e 	bge	r6,r5,eb0c <__gethex+0x558>
    eab4:	9809883a 	mov	r4,r19
    eab8:	817fff84 	addi	r5,r16,-2
    eabc:	000a9b40 	call	a9b4 <__any_on>
    eac0:	10001226 	beq	r2,zero,eb0c <__gethex+0x558>
    eac4:	070000c4 	movi	fp,3
    eac8:	003fce06 	br	ea04 <__gethex+0x450>
    eacc:	25a3c83a 	sub	r17,r4,r22
    ead0:	8dc01016 	blt	r17,r23,eb14 <__gethex+0x560>
    ead4:	a0c00317 	ldw	r3,12(r20)
    ead8:	00800084 	movi	r2,2
    eadc:	18809326 	beq	r3,r2,ed2c <__gethex+0x778>
    eae0:	008000c4 	movi	r2,3
    eae4:	18808e26 	beq	r3,r2,ed20 <__gethex+0x76c>
    eae8:	00800044 	movi	r2,1
    eaec:	18807b26 	beq	r3,r2,ecdc <__gethex+0x728>
    eaf0:	a809883a 	mov	r4,r21
    eaf4:	980b883a 	mov	r5,r19
    eaf8:	000a4bc0 	call	a4bc <_Bfree>
    eafc:	d8c00d17 	ldw	r3,52(sp)
    eb00:	04801404 	movi	r18,80
    eb04:	18000015 	stw	zero,0(r3)
    eb08:	003eed06 	br	e6c0 <__gethex+0x10c>
    eb0c:	07000084 	movi	fp,2
    eb10:	003fbc06 	br	ea04 <__gethex+0x450>
    eb14:	8c3fffc4 	addi	r16,r17,-1
    eb18:	e0001426 	beq	fp,zero,eb6c <__gethex+0x5b8>
    eb1c:	07000044 	movi	fp,1
    eb20:	8005d17a 	srai	r2,r16,5
    eb24:	d8c00217 	ldw	r3,8(sp)
    eb28:	814007cc 	andi	r5,r16,31
    eb2c:	1085883a 	add	r2,r2,r2
    eb30:	1085883a 	add	r2,r2,r2
    eb34:	10c5883a 	add	r2,r2,r3
    eb38:	00c00044 	movi	r3,1
    eb3c:	1946983a 	sll	r3,r3,r5
    eb40:	11000017 	ldw	r4,0(r2)
    eb44:	1906703a 	and	r3,r3,r4
    eb48:	18000126 	beq	r3,zero,eb50 <__gethex+0x59c>
    eb4c:	e7000094 	ori	fp,fp,2
    eb50:	880b883a 	mov	r5,r17
    eb54:	9809883a 	mov	r4,r19
    eb58:	000e5040 	call	e504 <rshift>
    eb5c:	a5800117 	ldw	r22,4(r20)
    eb60:	bc6fc83a 	sub	r23,r23,r17
    eb64:	04800084 	movi	r18,2
    eb68:	003fbf06 	br	ea68 <__gethex+0x4b4>
    eb6c:	043fec0e 	bge	zero,r16,eb20 <__gethex+0x56c>
    eb70:	9809883a 	mov	r4,r19
    eb74:	800b883a 	mov	r5,r16
    eb78:	000a9b40 	call	a9b4 <__any_on>
    eb7c:	1039883a 	mov	fp,r2
    eb80:	003fe706 	br	eb20 <__gethex+0x56c>
    eb84:	e080008c 	andi	r2,fp,2
    eb88:	103fbf26 	beq	r2,zero,ea88 <__gethex+0x4d4>
    eb8c:	d8c00217 	ldw	r3,8(sp)
    eb90:	18800017 	ldw	r2,0(r3)
    eb94:	e084b03a 	or	r2,fp,r2
    eb98:	1104703a 	and	r2,r2,r4
    eb9c:	103fba26 	beq	r2,zero,ea88 <__gethex+0x4d4>
    eba0:	9c000417 	ldw	r16,16(r19)
    eba4:	d8c00217 	ldw	r3,8(sp)
    eba8:	017fffc4 	movi	r5,-1
    ebac:	8405883a 	add	r2,r16,r16
    ebb0:	10b9883a 	add	fp,r2,r2
    ebb4:	1f09883a 	add	r4,r3,fp
    ebb8:	dc000015 	stw	r16,0(sp)
    ebbc:	00000306 	br	ebcc <__gethex+0x618>
    ebc0:	18000015 	stw	zero,0(r3)
    ebc4:	18c00104 	addi	r3,r3,4
    ebc8:	1900082e 	bgeu	r3,r4,ebec <__gethex+0x638>
    ebcc:	18800017 	ldw	r2,0(r3)
    ebd0:	117ffb26 	beq	r2,r5,ebc0 <__gethex+0x60c>
    ebd4:	10800044 	addi	r2,r2,1
    ebd8:	18800015 	stw	r2,0(r3)
    ebdc:	00001f06 	br	ec5c <__gethex+0x6a8>
    ebe0:	d8800e17 	ldw	r2,56(sp)
    ebe4:	103fa826 	beq	r2,zero,ea88 <__gethex+0x4d4>
    ebe8:	003fed06 	br	eba0 <__gethex+0x5ec>
    ebec:	98800217 	ldw	r2,8(r19)
    ebf0:	80801316 	blt	r16,r2,ec40 <__gethex+0x68c>
    ebf4:	99400117 	ldw	r5,4(r19)
    ebf8:	a809883a 	mov	r4,r21
    ebfc:	29400044 	addi	r5,r5,1
    ec00:	000aa3c0 	call	aa3c <_Balloc>
    ec04:	99800417 	ldw	r6,16(r19)
    ec08:	99400304 	addi	r5,r19,12
    ec0c:	11000304 	addi	r4,r2,12
    ec10:	318d883a 	add	r6,r6,r6
    ec14:	318d883a 	add	r6,r6,r6
    ec18:	31800204 	addi	r6,r6,8
    ec1c:	1023883a 	mov	r17,r2
    ec20:	00036840 	call	3684 <memcpy>
    ec24:	980b883a 	mov	r5,r19
    ec28:	a809883a 	mov	r4,r21
    ec2c:	000a4bc0 	call	a4bc <_Bfree>
    ec30:	8c000417 	ldw	r16,16(r17)
    ec34:	88800504 	addi	r2,r17,20
    ec38:	8827883a 	mov	r19,r17
    ec3c:	d8800215 	stw	r2,8(sp)
    ec40:	8405883a 	add	r2,r16,r16
    ec44:	1085883a 	add	r2,r2,r2
    ec48:	14c5883a 	add	r2,r2,r19
    ec4c:	84000044 	addi	r16,r16,1
    ec50:	00c00044 	movi	r3,1
    ec54:	10c00515 	stw	r3,20(r2)
    ec58:	9c000415 	stw	r16,16(r19)
    ec5c:	00800084 	movi	r2,2
    ec60:	90801426 	beq	r18,r2,ecb4 <__gethex+0x700>
    ec64:	d8800017 	ldw	r2,0(sp)
    ec68:	14000b16 	blt	r2,r16,ec98 <__gethex+0x6e4>
    ec6c:	bc0007cc 	andi	r16,r23,31
    ec70:	8000021e 	bne	r16,zero,ec7c <__gethex+0x6c8>
    ec74:	94800814 	ori	r18,r18,32
    ec78:	003f8406 	br	ea8c <__gethex+0x4d8>
    ec7c:	d8c00217 	ldw	r3,8(sp)
    ec80:	1f05883a 	add	r2,r3,fp
    ec84:	113fff17 	ldw	r4,-4(r2)
    ec88:	000a4e40 	call	a4e4 <__hi0bits>
    ec8c:	00c00804 	movi	r3,32
    ec90:	1c07c83a 	sub	r3,r3,r16
    ec94:	10fff70e 	bge	r2,r3,ec74 <__gethex+0x6c0>
    ec98:	9809883a 	mov	r4,r19
    ec9c:	01400044 	movi	r5,1
    eca0:	000e5040 	call	e504 <rshift>
    eca4:	a0800217 	ldw	r2,8(r20)
    eca8:	b5800044 	addi	r22,r22,1
    ecac:	15bf3716 	blt	r2,r22,e98c <__gethex+0x3d8>
    ecb0:	003ff006 	br	ec74 <__gethex+0x6c0>
    ecb4:	a0800017 	ldw	r2,0(r20)
    ecb8:	10bfffc4 	addi	r2,r2,-1
    ecbc:	b8801e26 	beq	r23,r2,ed38 <__gethex+0x784>
    ecc0:	04800884 	movi	r18,34
    ecc4:	003f7106 	br	ea8c <__gethex+0x4d8>
    ecc8:	d8c00e17 	ldw	r3,56(sp)
    eccc:	00800044 	movi	r2,1
    ecd0:	10c5c83a 	sub	r2,r2,r3
    ecd4:	103f6c26 	beq	r2,zero,ea88 <__gethex+0x4d4>
    ecd8:	003fb106 	br	eba0 <__gethex+0x5ec>
    ecdc:	bc7f841e 	bne	r23,r17,eaf0 <__gethex+0x53c>
    ece0:	1dc0050e 	bge	r3,r23,ecf8 <__gethex+0x744>
    ece4:	b8cbc83a 	sub	r5,r23,r3
    ece8:	9809883a 	mov	r4,r19
    ecec:	000a9b40 	call	a9b4 <__any_on>
    ecf0:	103f7f26 	beq	r2,zero,eaf0 <__gethex+0x53c>
    ecf4:	a1000117 	ldw	r4,4(r20)
    ecf8:	d8800117 	ldw	r2,4(sp)
    ecfc:	d8c00217 	ldw	r3,8(sp)
    ed00:	04000044 	movi	r16,1
    ed04:	11000015 	stw	r4,0(r2)
    ed08:	d8800d17 	ldw	r2,52(sp)
    ed0c:	04801884 	movi	r18,98
    ed10:	1c000015 	stw	r16,0(r3)
    ed14:	14c00015 	stw	r19,0(r2)
    ed18:	9c000415 	stw	r16,16(r19)
    ed1c:	003e6806 	br	e6c0 <__gethex+0x10c>
    ed20:	d8c00e17 	ldw	r3,56(sp)
    ed24:	183f7226 	beq	r3,zero,eaf0 <__gethex+0x53c>
    ed28:	003ff306 	br	ecf8 <__gethex+0x744>
    ed2c:	d8800e17 	ldw	r2,56(sp)
    ed30:	103ff126 	beq	r2,zero,ecf8 <__gethex+0x744>
    ed34:	003f6e06 	br	eaf0 <__gethex+0x53c>
    ed38:	b805d17a 	srai	r2,r23,5
    ed3c:	d8c00217 	ldw	r3,8(sp)
    ed40:	b94007cc 	andi	r5,r23,31
    ed44:	1085883a 	add	r2,r2,r2
    ed48:	1085883a 	add	r2,r2,r2
    ed4c:	10c5883a 	add	r2,r2,r3
    ed50:	00c00044 	movi	r3,1
    ed54:	1946983a 	sll	r3,r3,r5
    ed58:	11000017 	ldw	r4,0(r2)
    ed5c:	1906703a 	and	r3,r3,r4
    ed60:	183fd726 	beq	r3,zero,ecc0 <__gethex+0x70c>
    ed64:	04800844 	movi	r18,33
    ed68:	003f4806 	br	ea8c <__gethex+0x4d8>

0000ed6c <L_shift>:
    ed6c:	00800204 	movi	r2,8
    ed70:	1185c83a 	sub	r2,r2,r6
    ed74:	1085883a 	add	r2,r2,r2
    ed78:	21c00017 	ldw	r7,0(r4)
    ed7c:	1093883a 	add	r9,r2,r2
    ed80:	00800804 	movi	r2,32
    ed84:	200d883a 	mov	r6,r4
    ed88:	1251c83a 	sub	r8,r2,r9
    ed8c:	31800104 	addi	r6,r6,4
    ed90:	3805883a 	mov	r2,r7
    ed94:	31c00017 	ldw	r7,0(r6)
    ed98:	3a08983a 	sll	r4,r7,r8
    ed9c:	3a46d83a 	srl	r3,r7,r9
    eda0:	1104b03a 	or	r2,r2,r4
    eda4:	180f883a 	mov	r7,r3
    eda8:	30bfff15 	stw	r2,-4(r6)
    edac:	30c00015 	stw	r3,0(r6)
    edb0:	317ff636 	bltu	r6,r5,ed8c <L_shift+0x20>
    edb4:	f800283a 	ret

0000edb8 <__hexnan>:
    edb8:	defff404 	addi	sp,sp,-48
    edbc:	dd800815 	stw	r22,32(sp)
    edc0:	058000b4 	movhi	r22,2
    edc4:	b5a20304 	addi	r22,r22,-30708
    edc8:	b0800c03 	ldbu	r2,48(r22)
    edcc:	dcc00515 	stw	r19,20(sp)
    edd0:	dc000215 	stw	r16,8(sp)
    edd4:	dfc00b15 	stw	ra,44(sp)
    edd8:	df000a15 	stw	fp,40(sp)
    eddc:	ddc00915 	stw	r23,36(sp)
    ede0:	dd400715 	stw	r21,28(sp)
    ede4:	dd000615 	stw	r20,24(sp)
    ede8:	dc800415 	stw	r18,16(sp)
    edec:	dc400315 	stw	r17,12(sp)
    edf0:	d9000115 	stw	r4,4(sp)
    edf4:	2821883a 	mov	r16,r5
    edf8:	3027883a 	mov	r19,r6
    edfc:	10007426 	beq	r2,zero,efd0 <__hexnan+0x218>
    ee00:	80c00017 	ldw	r3,0(r16)
    ee04:	1805d17a 	srai	r2,r3,5
    ee08:	18c007cc 	andi	r3,r3,31
    ee0c:	1839003a 	cmpeq	fp,r3,zero
    ee10:	1085883a 	add	r2,r2,r2
    ee14:	1085883a 	add	r2,r2,r2
    ee18:	d8c00015 	stw	r3,0(sp)
    ee1c:	14c5883a 	add	r2,r2,r19
    ee20:	e000011e 	bne	fp,zero,ee28 <__hexnan+0x70>
    ee24:	10800104 	addi	r2,r2,4
    ee28:	d8c00117 	ldw	r3,4(sp)
    ee2c:	153fff04 	addi	r20,r2,-4
    ee30:	a021883a 	mov	r16,r20
    ee34:	1c400017 	ldw	r17,0(r3)
    ee38:	a02b883a 	mov	r21,r20
    ee3c:	0025883a 	mov	r18,zero
    ee40:	002f883a 	mov	r23,zero
    ee44:	000d883a 	mov	r6,zero
    ee48:	103fff15 	stw	zero,-4(r2)
    ee4c:	8c400044 	addi	r17,r17,1
    ee50:	89000003 	ldbu	r4,0(r17)
    ee54:	20000e26 	beq	r4,zero,ee90 <__hexnan+0xd8>
    ee58:	2585883a 	add	r2,r4,r22
    ee5c:	10c00003 	ldbu	r3,0(r2)
    ee60:	18002e1e 	bne	r3,zero,ef1c <__hexnan+0x164>
    ee64:	00800804 	movi	r2,32
    ee68:	11005536 	bltu	r2,r4,efc0 <__hexnan+0x208>
    ee6c:	bcbff70e 	bge	r23,r18,ee4c <__hexnan+0x94>
    ee70:	8540022e 	bgeu	r16,r21,ee7c <__hexnan+0xc4>
    ee74:	008001c4 	movi	r2,7
    ee78:	11803c0e 	bge	r2,r6,ef6c <__hexnan+0x1b4>
    ee7c:	9c003536 	bltu	r19,r16,ef54 <__hexnan+0x19c>
    ee80:	8c400044 	addi	r17,r17,1
    ee84:	89000003 	ldbu	r4,0(r17)
    ee88:	01800204 	movi	r6,8
    ee8c:	203ff21e 	bne	r4,zero,ee58 <__hexnan+0xa0>
    ee90:	90004d26 	beq	r18,zero,efc8 <__hexnan+0x210>
    ee94:	85404336 	bltu	r16,r21,efa4 <__hexnan+0x1ec>
    ee98:	9c00382e 	bgeu	r19,r16,ef7c <__hexnan+0x1c4>
    ee9c:	9807883a 	mov	r3,r19
    eea0:	80800017 	ldw	r2,0(r16)
    eea4:	84000104 	addi	r16,r16,4
    eea8:	18800015 	stw	r2,0(r3)
    eeac:	18c00104 	addi	r3,r3,4
    eeb0:	a43ffb2e 	bgeu	r20,r16,eea0 <__hexnan+0xe8>
    eeb4:	18000015 	stw	zero,0(r3)
    eeb8:	18c00104 	addi	r3,r3,4
    eebc:	a0fffd2e 	bgeu	r20,r3,eeb4 <__hexnan+0xfc>
    eec0:	a0800017 	ldw	r2,0(r20)
    eec4:	1000071e 	bne	r2,zero,eee4 <__hexnan+0x12c>
    eec8:	9d004326 	beq	r19,r20,efd8 <__hexnan+0x220>
    eecc:	a007883a 	mov	r3,r20
    eed0:	00000106 	br	eed8 <__hexnan+0x120>
    eed4:	98c04026 	beq	r19,r3,efd8 <__hexnan+0x220>
    eed8:	18ffff04 	addi	r3,r3,-4
    eedc:	18800017 	ldw	r2,0(r3)
    eee0:	103ffc26 	beq	r2,zero,eed4 <__hexnan+0x11c>
    eee4:	00c00144 	movi	r3,5
    eee8:	1805883a 	mov	r2,r3
    eeec:	dfc00b17 	ldw	ra,44(sp)
    eef0:	df000a17 	ldw	fp,40(sp)
    eef4:	ddc00917 	ldw	r23,36(sp)
    eef8:	dd800817 	ldw	r22,32(sp)
    eefc:	dd400717 	ldw	r21,28(sp)
    ef00:	dd000617 	ldw	r20,24(sp)
    ef04:	dcc00517 	ldw	r19,20(sp)
    ef08:	dc800417 	ldw	r18,16(sp)
    ef0c:	dc400317 	ldw	r17,12(sp)
    ef10:	dc000217 	ldw	r16,8(sp)
    ef14:	dec00c04 	addi	sp,sp,48
    ef18:	f800283a 	ret
    ef1c:	31800044 	addi	r6,r6,1
    ef20:	00800204 	movi	r2,8
    ef24:	94800044 	addi	r18,r18,1
    ef28:	1180040e 	bge	r2,r6,ef3c <__hexnan+0x184>
    ef2c:	9c3fc72e 	bgeu	r19,r16,ee4c <__hexnan+0x94>
    ef30:	843fff04 	addi	r16,r16,-4
    ef34:	80000015 	stw	zero,0(r16)
    ef38:	01800044 	movi	r6,1
    ef3c:	80800017 	ldw	r2,0(r16)
    ef40:	18c003cc 	andi	r3,r3,15
    ef44:	1004913a 	slli	r2,r2,4
    ef48:	10c4b03a 	or	r2,r2,r3
    ef4c:	80800015 	stw	r2,0(r16)
    ef50:	003fbe06 	br	ee4c <__hexnan+0x94>
    ef54:	843fff04 	addi	r16,r16,-4
    ef58:	802b883a 	mov	r21,r16
    ef5c:	902f883a 	mov	r23,r18
    ef60:	000d883a 	mov	r6,zero
    ef64:	80000015 	stw	zero,0(r16)
    ef68:	003fb806 	br	ee4c <__hexnan+0x94>
    ef6c:	8009883a 	mov	r4,r16
    ef70:	a80b883a 	mov	r5,r21
    ef74:	000ed6c0 	call	ed6c <L_shift>
    ef78:	003fc006 	br	ee7c <__hexnan+0xc4>
    ef7c:	e03fd01e 	bne	fp,zero,eec0 <__hexnan+0x108>
    ef80:	d8c00017 	ldw	r3,0(sp)
    ef84:	00800804 	movi	r2,32
    ef88:	10c5c83a 	sub	r2,r2,r3
    ef8c:	00ffffc4 	movi	r3,-1
    ef90:	1886d83a 	srl	r3,r3,r2
    ef94:	a0800017 	ldw	r2,0(r20)
    ef98:	10c4703a 	and	r2,r2,r3
    ef9c:	a0800015 	stw	r2,0(r20)
    efa0:	003fc806 	br	eec4 <__hexnan+0x10c>
    efa4:	008001c4 	movi	r2,7
    efa8:	11bfbb16 	blt	r2,r6,ee98 <__hexnan+0xe0>
    efac:	a80b883a 	mov	r5,r21
    efb0:	8009883a 	mov	r4,r16
    efb4:	000ed6c0 	call	ed6c <L_shift>
    efb8:	9c3ff02e 	bgeu	r19,r16,ef7c <__hexnan+0x1c4>
    efbc:	003fb706 	br	ee9c <__hexnan+0xe4>
    efc0:	00800a44 	movi	r2,41
    efc4:	20800826 	beq	r4,r2,efe8 <__hexnan+0x230>
    efc8:	00c00104 	movi	r3,4
    efcc:	003fc606 	br	eee8 <__hexnan+0x130>
    efd0:	000e49c0 	call	e49c <__hexdig_init>
    efd4:	003f8a06 	br	ee00 <__hexnan+0x48>
    efd8:	00800044 	movi	r2,1
    efdc:	00c00144 	movi	r3,5
    efe0:	98800015 	stw	r2,0(r19)
    efe4:	003fc006 	br	eee8 <__hexnan+0x130>
    efe8:	903ff726 	beq	r18,zero,efc8 <__hexnan+0x210>
    efec:	d8c00117 	ldw	r3,4(sp)
    eff0:	88800044 	addi	r2,r17,1
    eff4:	18800015 	stw	r2,0(r3)
    eff8:	857fa72e 	bgeu	r16,r21,ee98 <__hexnan+0xe0>
    effc:	003fe906 	br	efa4 <__hexnan+0x1ec>

0000f000 <_isatty_r>:
    f000:	defffd04 	addi	sp,sp,-12
    f004:	dc000015 	stw	r16,0(sp)
    f008:	040000b4 	movhi	r16,2
    f00c:	8421be04 	addi	r16,r16,-30984
    f010:	dc400115 	stw	r17,4(sp)
    f014:	80000015 	stw	zero,0(r16)
    f018:	2023883a 	mov	r17,r4
    f01c:	2809883a 	mov	r4,r5
    f020:	dfc00215 	stw	ra,8(sp)
    f024:	0011c140 	call	11c14 <isatty>
    f028:	1007883a 	mov	r3,r2
    f02c:	00bfffc4 	movi	r2,-1
    f030:	18800626 	beq	r3,r2,f04c <_isatty_r+0x4c>
    f034:	1805883a 	mov	r2,r3
    f038:	dfc00217 	ldw	ra,8(sp)
    f03c:	dc400117 	ldw	r17,4(sp)
    f040:	dc000017 	ldw	r16,0(sp)
    f044:	dec00304 	addi	sp,sp,12
    f048:	f800283a 	ret
    f04c:	80800017 	ldw	r2,0(r16)
    f050:	103ff826 	beq	r2,zero,f034 <_isatty_r+0x34>
    f054:	88800015 	stw	r2,0(r17)
    f058:	1805883a 	mov	r2,r3
    f05c:	dfc00217 	ldw	ra,8(sp)
    f060:	dc400117 	ldw	r17,4(sp)
    f064:	dc000017 	ldw	r16,0(sp)
    f068:	dec00304 	addi	sp,sp,12
    f06c:	f800283a 	ret

0000f070 <__muldi3>:
    f070:	2011883a 	mov	r8,r4
    f074:	427fffcc 	andi	r9,r8,65535
    f078:	4018d43a 	srli	r12,r8,16
    f07c:	32bfffcc 	andi	r10,r6,65535
    f080:	3016d43a 	srli	r11,r6,16
    f084:	4a85383a 	mul	r2,r9,r10
    f088:	6295383a 	mul	r10,r12,r10
    f08c:	4ad3383a 	mul	r9,r9,r11
    f090:	113fffcc 	andi	r4,r2,65535
    f094:	1004d43a 	srli	r2,r2,16
    f098:	4a93883a 	add	r9,r9,r10
    f09c:	3807883a 	mov	r3,r7
    f0a0:	1245883a 	add	r2,r2,r9
    f0a4:	280f883a 	mov	r7,r5
    f0a8:	180b883a 	mov	r5,r3
    f0ac:	1006943a 	slli	r3,r2,16
    f0b0:	defffd04 	addi	sp,sp,-12
    f0b4:	dc800215 	stw	r18,8(sp)
    f0b8:	1907883a 	add	r3,r3,r4
    f0bc:	dc400115 	stw	r17,4(sp)
    f0c0:	dc000015 	stw	r16,0(sp)
    f0c4:	4165383a 	mul	r18,r8,r5
    f0c8:	31e3383a 	mul	r17,r6,r7
    f0cc:	1012d43a 	srli	r9,r2,16
    f0d0:	62d9383a 	mul	r12,r12,r11
    f0d4:	181f883a 	mov	r15,r3
    f0d8:	1280022e 	bgeu	r2,r10,f0e4 <__muldi3+0x74>
    f0dc:	00800074 	movhi	r2,1
    f0e0:	6099883a 	add	r12,r12,r2
    f0e4:	624d883a 	add	r6,r12,r9
    f0e8:	9187883a 	add	r3,r18,r6
    f0ec:	88c7883a 	add	r3,r17,r3
    f0f0:	7805883a 	mov	r2,r15
    f0f4:	dc800217 	ldw	r18,8(sp)
    f0f8:	dc400117 	ldw	r17,4(sp)
    f0fc:	dc000017 	ldw	r16,0(sp)
    f100:	dec00304 	addi	sp,sp,12
    f104:	f800283a 	ret

0000f108 <__fixunsdfsi>:
    f108:	defffb04 	addi	sp,sp,-20
    f10c:	dc400115 	stw	r17,4(sp)
    f110:	dc000015 	stw	r16,0(sp)
    f114:	04507834 	movhi	r17,16864
    f118:	0021883a 	mov	r16,zero
    f11c:	800d883a 	mov	r6,r16
    f120:	880f883a 	mov	r7,r17
    f124:	dcc00315 	stw	r19,12(sp)
    f128:	dc800215 	stw	r18,8(sp)
    f12c:	2827883a 	mov	r19,r5
    f130:	2025883a 	mov	r18,r4
    f134:	dfc00415 	stw	ra,16(sp)
    f138:	0010b580 	call	10b58 <__gedf2>
    f13c:	000d883a 	mov	r6,zero
    f140:	880f883a 	mov	r7,r17
    f144:	980b883a 	mov	r5,r19
    f148:	9009883a 	mov	r4,r18
    f14c:	10000d16 	blt	r2,zero,f184 <__fixunsdfsi+0x7c>
    f150:	00102b00 	call	102b0 <__subdf3>
    f154:	180b883a 	mov	r5,r3
    f158:	1009883a 	mov	r4,r2
    f15c:	0010de80 	call	10de8 <__fixdfsi>
    f160:	00e00034 	movhi	r3,32768
    f164:	10c5883a 	add	r2,r2,r3
    f168:	dfc00417 	ldw	ra,16(sp)
    f16c:	dcc00317 	ldw	r19,12(sp)
    f170:	dc800217 	ldw	r18,8(sp)
    f174:	dc400117 	ldw	r17,4(sp)
    f178:	dc000017 	ldw	r16,0(sp)
    f17c:	dec00504 	addi	sp,sp,20
    f180:	f800283a 	ret
    f184:	980b883a 	mov	r5,r19
    f188:	9009883a 	mov	r4,r18
    f18c:	0010de80 	call	10de8 <__fixdfsi>
    f190:	dfc00417 	ldw	ra,16(sp)
    f194:	dcc00317 	ldw	r19,12(sp)
    f198:	dc800217 	ldw	r18,8(sp)
    f19c:	dc400117 	ldw	r17,4(sp)
    f1a0:	dc000017 	ldw	r16,0(sp)
    f1a4:	dec00504 	addi	sp,sp,20
    f1a8:	f800283a 	ret

0000f1ac <__udivdi3>:
    f1ac:	defff004 	addi	sp,sp,-64
    f1b0:	2005883a 	mov	r2,r4
    f1b4:	3011883a 	mov	r8,r6
    f1b8:	df000e15 	stw	fp,56(sp)
    f1bc:	dd000a15 	stw	r20,40(sp)
    f1c0:	dc000615 	stw	r16,24(sp)
    f1c4:	dfc00f15 	stw	ra,60(sp)
    f1c8:	ddc00d15 	stw	r23,52(sp)
    f1cc:	dd800c15 	stw	r22,48(sp)
    f1d0:	dd400b15 	stw	r21,44(sp)
    f1d4:	dcc00915 	stw	r19,36(sp)
    f1d8:	dc800815 	stw	r18,32(sp)
    f1dc:	dc400715 	stw	r17,28(sp)
    f1e0:	4021883a 	mov	r16,r8
    f1e4:	1039883a 	mov	fp,r2
    f1e8:	2829883a 	mov	r20,r5
    f1ec:	38003b1e 	bne	r7,zero,f2dc <__udivdi3+0x130>
    f1f0:	2a005c36 	bltu	r5,r8,f364 <__udivdi3+0x1b8>
    f1f4:	4000a626 	beq	r8,zero,f490 <__udivdi3+0x2e4>
    f1f8:	00bfffd4 	movui	r2,65535
    f1fc:	14009e36 	bltu	r2,r16,f478 <__udivdi3+0x2cc>
    f200:	00803fc4 	movi	r2,255
    f204:	14013d36 	bltu	r2,r16,f6fc <__udivdi3+0x550>
    f208:	000b883a 	mov	r5,zero
    f20c:	0005883a 	mov	r2,zero
    f210:	8084d83a 	srl	r2,r16,r2
    f214:	01000074 	movhi	r4,1
    f218:	2113e804 	addi	r4,r4,20384
    f21c:	01800804 	movi	r6,32
    f220:	1105883a 	add	r2,r2,r4
    f224:	10c00003 	ldbu	r3,0(r2)
    f228:	28c7883a 	add	r3,r5,r3
    f22c:	30edc83a 	sub	r22,r6,r3
    f230:	b000ee1e 	bne	r22,zero,f5ec <__udivdi3+0x440>
    f234:	802ad43a 	srli	r21,r16,16
    f238:	00800044 	movi	r2,1
    f23c:	a423c83a 	sub	r17,r20,r16
    f240:	85ffffcc 	andi	r23,r16,65535
    f244:	d8800315 	stw	r2,12(sp)
    f248:	8809883a 	mov	r4,r17
    f24c:	a80b883a 	mov	r5,r21
    f250:	00028a40 	call	28a4 <__udivsi3>
    f254:	8809883a 	mov	r4,r17
    f258:	a80b883a 	mov	r5,r21
    f25c:	102d883a 	mov	r22,r2
    f260:	00028ac0 	call	28ac <__umodsi3>
    f264:	1004943a 	slli	r2,r2,16
    f268:	e006d43a 	srli	r3,fp,16
    f26c:	bda3383a 	mul	r17,r23,r22
    f270:	10c4b03a 	or	r2,r2,r3
    f274:	1440042e 	bgeu	r2,r17,f288 <__udivdi3+0xdc>
    f278:	1405883a 	add	r2,r2,r16
    f27c:	b5bfffc4 	addi	r22,r22,-1
    f280:	14000136 	bltu	r2,r16,f288 <__udivdi3+0xdc>
    f284:	14413d36 	bltu	r2,r17,f77c <__udivdi3+0x5d0>
    f288:	1463c83a 	sub	r17,r2,r17
    f28c:	8809883a 	mov	r4,r17
    f290:	a80b883a 	mov	r5,r21
    f294:	00028a40 	call	28a4 <__udivsi3>
    f298:	8809883a 	mov	r4,r17
    f29c:	a80b883a 	mov	r5,r21
    f2a0:	1029883a 	mov	r20,r2
    f2a4:	00028ac0 	call	28ac <__umodsi3>
    f2a8:	1004943a 	slli	r2,r2,16
    f2ac:	bd09383a 	mul	r4,r23,r20
    f2b0:	e0ffffcc 	andi	r3,fp,65535
    f2b4:	10c4b03a 	or	r2,r2,r3
    f2b8:	1100042e 	bgeu	r2,r4,f2cc <__udivdi3+0x120>
    f2bc:	8085883a 	add	r2,r16,r2
    f2c0:	a53fffc4 	addi	r20,r20,-1
    f2c4:	14000136 	bltu	r2,r16,f2cc <__udivdi3+0x120>
    f2c8:	11012036 	bltu	r2,r4,f74c <__udivdi3+0x5a0>
    f2cc:	b004943a 	slli	r2,r22,16
    f2d0:	d9000317 	ldw	r4,12(sp)
    f2d4:	a084b03a 	or	r2,r20,r2
    f2d8:	00001506 	br	f330 <__udivdi3+0x184>
    f2dc:	380d883a 	mov	r6,r7
    f2e0:	29c06236 	bltu	r5,r7,f46c <__udivdi3+0x2c0>
    f2e4:	00bfffd4 	movui	r2,65535
    f2e8:	11c05a36 	bltu	r2,r7,f454 <__udivdi3+0x2a8>
    f2ec:	00803fc4 	movi	r2,255
    f2f0:	11c0fc36 	bltu	r2,r7,f6e4 <__udivdi3+0x538>
    f2f4:	000b883a 	mov	r5,zero
    f2f8:	0005883a 	mov	r2,zero
    f2fc:	3084d83a 	srl	r2,r6,r2
    f300:	01000074 	movhi	r4,1
    f304:	2113e804 	addi	r4,r4,20384
    f308:	01c00804 	movi	r7,32
    f30c:	1105883a 	add	r2,r2,r4
    f310:	10c00003 	ldbu	r3,0(r2)
    f314:	28c7883a 	add	r3,r5,r3
    f318:	38efc83a 	sub	r23,r7,r3
    f31c:	b800691e 	bne	r23,zero,f4c4 <__udivdi3+0x318>
    f320:	35000136 	bltu	r6,r20,f328 <__udivdi3+0x17c>
    f324:	e4005136 	bltu	fp,r16,f46c <__udivdi3+0x2c0>
    f328:	00800044 	movi	r2,1
    f32c:	0009883a 	mov	r4,zero
    f330:	2007883a 	mov	r3,r4
    f334:	dfc00f17 	ldw	ra,60(sp)
    f338:	df000e17 	ldw	fp,56(sp)
    f33c:	ddc00d17 	ldw	r23,52(sp)
    f340:	dd800c17 	ldw	r22,48(sp)
    f344:	dd400b17 	ldw	r21,44(sp)
    f348:	dd000a17 	ldw	r20,40(sp)
    f34c:	dcc00917 	ldw	r19,36(sp)
    f350:	dc800817 	ldw	r18,32(sp)
    f354:	dc400717 	ldw	r17,28(sp)
    f358:	dc000617 	ldw	r16,24(sp)
    f35c:	dec01004 	addi	sp,sp,64
    f360:	f800283a 	ret
    f364:	00bfffd4 	movui	r2,65535
    f368:	12005036 	bltu	r2,r8,f4ac <__udivdi3+0x300>
    f36c:	00803fc4 	movi	r2,255
    f370:	1200e836 	bltu	r2,r8,f714 <__udivdi3+0x568>
    f374:	000b883a 	mov	r5,zero
    f378:	0005883a 	mov	r2,zero
    f37c:	8084d83a 	srl	r2,r16,r2
    f380:	01000074 	movhi	r4,1
    f384:	2113e804 	addi	r4,r4,20384
    f388:	01800804 	movi	r6,32
    f38c:	1105883a 	add	r2,r2,r4
    f390:	10c00003 	ldbu	r3,0(r2)
    f394:	28c7883a 	add	r3,r5,r3
    f398:	30cbc83a 	sub	r5,r6,r3
    f39c:	28000626 	beq	r5,zero,f3b8 <__udivdi3+0x20c>
    f3a0:	3145c83a 	sub	r2,r6,r5
    f3a4:	e084d83a 	srl	r2,fp,r2
    f3a8:	a146983a 	sll	r3,r20,r5
    f3ac:	e178983a 	sll	fp,fp,r5
    f3b0:	8160983a 	sll	r16,r16,r5
    f3b4:	18a8b03a 	or	r20,r3,r2
    f3b8:	802ad43a 	srli	r21,r16,16
    f3bc:	a009883a 	mov	r4,r20
    f3c0:	85ffffcc 	andi	r23,r16,65535
    f3c4:	a80b883a 	mov	r5,r21
    f3c8:	00028a40 	call	28a4 <__udivsi3>
    f3cc:	a009883a 	mov	r4,r20
    f3d0:	a80b883a 	mov	r5,r21
    f3d4:	102d883a 	mov	r22,r2
    f3d8:	00028ac0 	call	28ac <__umodsi3>
    f3dc:	1004943a 	slli	r2,r2,16
    f3e0:	e006d43a 	srli	r3,fp,16
    f3e4:	bda3383a 	mul	r17,r23,r22
    f3e8:	10c4b03a 	or	r2,r2,r3
    f3ec:	1440042e 	bgeu	r2,r17,f400 <__udivdi3+0x254>
    f3f0:	1405883a 	add	r2,r2,r16
    f3f4:	b5bfffc4 	addi	r22,r22,-1
    f3f8:	14000136 	bltu	r2,r16,f400 <__udivdi3+0x254>
    f3fc:	1440d536 	bltu	r2,r17,f754 <__udivdi3+0x5a8>
    f400:	1463c83a 	sub	r17,r2,r17
    f404:	8809883a 	mov	r4,r17
    f408:	a80b883a 	mov	r5,r21
    f40c:	00028a40 	call	28a4 <__udivsi3>
    f410:	8809883a 	mov	r4,r17
    f414:	a80b883a 	mov	r5,r21
    f418:	1029883a 	mov	r20,r2
    f41c:	00028ac0 	call	28ac <__umodsi3>
    f420:	1004943a 	slli	r2,r2,16
    f424:	bd09383a 	mul	r4,r23,r20
    f428:	e0ffffcc 	andi	r3,fp,65535
    f42c:	10c4b03a 	or	r2,r2,r3
    f430:	1100042e 	bgeu	r2,r4,f444 <__udivdi3+0x298>
    f434:	8085883a 	add	r2,r16,r2
    f438:	a53fffc4 	addi	r20,r20,-1
    f43c:	14000136 	bltu	r2,r16,f444 <__udivdi3+0x298>
    f440:	1100c736 	bltu	r2,r4,f760 <__udivdi3+0x5b4>
    f444:	b004943a 	slli	r2,r22,16
    f448:	0009883a 	mov	r4,zero
    f44c:	a084b03a 	or	r2,r20,r2
    f450:	003fb706 	br	f330 <__udivdi3+0x184>
    f454:	00804034 	movhi	r2,256
    f458:	10bfffc4 	addi	r2,r2,-1
    f45c:	11c0a436 	bltu	r2,r7,f6f0 <__udivdi3+0x544>
    f460:	01400404 	movi	r5,16
    f464:	2805883a 	mov	r2,r5
    f468:	003fa406 	br	f2fc <__udivdi3+0x150>
    f46c:	0005883a 	mov	r2,zero
    f470:	0009883a 	mov	r4,zero
    f474:	003fae06 	br	f330 <__udivdi3+0x184>
    f478:	00804034 	movhi	r2,256
    f47c:	10bfffc4 	addi	r2,r2,-1
    f480:	1400a136 	bltu	r2,r16,f708 <__udivdi3+0x55c>
    f484:	01400404 	movi	r5,16
    f488:	2805883a 	mov	r2,r5
    f48c:	003f6006 	br	f210 <__udivdi3+0x64>
    f490:	01000044 	movi	r4,1
    f494:	000b883a 	mov	r5,zero
    f498:	00028a40 	call	28a4 <__udivsi3>
    f49c:	1021883a 	mov	r16,r2
    f4a0:	00bfffd4 	movui	r2,65535
    f4a4:	143ff436 	bltu	r2,r16,f478 <__udivdi3+0x2cc>
    f4a8:	003f5506 	br	f200 <__udivdi3+0x54>
    f4ac:	00804034 	movhi	r2,256
    f4b0:	10bfffc4 	addi	r2,r2,-1
    f4b4:	12009a36 	bltu	r2,r8,f720 <__udivdi3+0x574>
    f4b8:	01400404 	movi	r5,16
    f4bc:	2805883a 	mov	r2,r5
    f4c0:	003fae06 	br	f37c <__udivdi3+0x1d0>
    f4c4:	3dc5c83a 	sub	r2,r7,r23
    f4c8:	35c8983a 	sll	r4,r6,r23
    f4cc:	8086d83a 	srl	r3,r16,r2
    f4d0:	a0a2d83a 	srl	r17,r20,r2
    f4d4:	e084d83a 	srl	r2,fp,r2
    f4d8:	20eab03a 	or	r21,r4,r3
    f4dc:	a82cd43a 	srli	r22,r21,16
    f4e0:	a5c6983a 	sll	r3,r20,r23
    f4e4:	8809883a 	mov	r4,r17
    f4e8:	b00b883a 	mov	r5,r22
    f4ec:	1886b03a 	or	r3,r3,r2
    f4f0:	d8c00215 	stw	r3,8(sp)
    f4f4:	00028a40 	call	28a4 <__udivsi3>
    f4f8:	8809883a 	mov	r4,r17
    f4fc:	b00b883a 	mov	r5,r22
    f500:	1029883a 	mov	r20,r2
    f504:	00028ac0 	call	28ac <__umodsi3>
    f508:	a8ffffcc 	andi	r3,r21,65535
    f50c:	d8c00515 	stw	r3,20(sp)
    f510:	d9000217 	ldw	r4,8(sp)
    f514:	d9400517 	ldw	r5,20(sp)
    f518:	1004943a 	slli	r2,r2,16
    f51c:	2006d43a 	srli	r3,r4,16
    f520:	85e0983a 	sll	r16,r16,r23
    f524:	2d23383a 	mul	r17,r5,r20
    f528:	10c4b03a 	or	r2,r2,r3
    f52c:	dc000015 	stw	r16,0(sp)
    f530:	1440032e 	bgeu	r2,r17,f540 <__udivdi3+0x394>
    f534:	1545883a 	add	r2,r2,r21
    f538:	a53fffc4 	addi	r20,r20,-1
    f53c:	15407f2e 	bgeu	r2,r21,f73c <__udivdi3+0x590>
    f540:	1463c83a 	sub	r17,r2,r17
    f544:	8809883a 	mov	r4,r17
    f548:	b00b883a 	mov	r5,r22
    f54c:	00028a40 	call	28a4 <__udivsi3>
    f550:	8809883a 	mov	r4,r17
    f554:	b00b883a 	mov	r5,r22
    f558:	1021883a 	mov	r16,r2
    f55c:	00028ac0 	call	28ac <__umodsi3>
    f560:	d8c00517 	ldw	r3,20(sp)
    f564:	d9000217 	ldw	r4,8(sp)
    f568:	1004943a 	slli	r2,r2,16
    f56c:	1c0f383a 	mul	r7,r3,r16
    f570:	20ffffcc 	andi	r3,r4,65535
    f574:	10e2b03a 	or	r17,r2,r3
    f578:	89c0032e 	bgeu	r17,r7,f588 <__udivdi3+0x3dc>
    f57c:	8d63883a 	add	r17,r17,r21
    f580:	843fffc4 	addi	r16,r16,-1
    f584:	8d40692e 	bgeu	r17,r21,f72c <__udivdi3+0x580>
    f588:	a008943a 	slli	r4,r20,16
    f58c:	d9400017 	ldw	r5,0(sp)
    f590:	89e3c83a 	sub	r17,r17,r7
    f594:	8110b03a 	or	r8,r16,r4
    f598:	280cd43a 	srli	r6,r5,16
    f59c:	28ffffcc 	andi	r3,r5,65535
    f5a0:	40bfffcc 	andi	r2,r8,65535
    f5a4:	400ad43a 	srli	r5,r8,16
    f5a8:	10d3383a 	mul	r9,r2,r3
    f5ac:	1185383a 	mul	r2,r2,r6
    f5b0:	28c7383a 	mul	r3,r5,r3
    f5b4:	4808d43a 	srli	r4,r9,16
    f5b8:	298b383a 	mul	r5,r5,r6
    f5bc:	10c5883a 	add	r2,r2,r3
    f5c0:	2089883a 	add	r4,r4,r2
    f5c4:	20c0022e 	bgeu	r4,r3,f5d0 <__udivdi3+0x424>
    f5c8:	00800074 	movhi	r2,1
    f5cc:	288b883a 	add	r5,r5,r2
    f5d0:	2004d43a 	srli	r2,r4,16
    f5d4:	288b883a 	add	r5,r5,r2
    f5d8:	89403f36 	bltu	r17,r5,f6d8 <__udivdi3+0x52c>
    f5dc:	89403926 	beq	r17,r5,f6c4 <__udivdi3+0x518>
    f5e0:	4005883a 	mov	r2,r8
    f5e4:	0009883a 	mov	r4,zero
    f5e8:	003f5106 	br	f330 <__udivdi3+0x184>
    f5ec:	85a0983a 	sll	r16,r16,r22
    f5f0:	3585c83a 	sub	r2,r6,r22
    f5f4:	a0a2d83a 	srl	r17,r20,r2
    f5f8:	802ad43a 	srli	r21,r16,16
    f5fc:	e084d83a 	srl	r2,fp,r2
    f600:	a586983a 	sll	r3,r20,r22
    f604:	8809883a 	mov	r4,r17
    f608:	a80b883a 	mov	r5,r21
    f60c:	1886b03a 	or	r3,r3,r2
    f610:	d8c00115 	stw	r3,4(sp)
    f614:	00028a40 	call	28a4 <__udivsi3>
    f618:	8809883a 	mov	r4,r17
    f61c:	a80b883a 	mov	r5,r21
    f620:	d8800415 	stw	r2,16(sp)
    f624:	00028ac0 	call	28ac <__umodsi3>
    f628:	d9000117 	ldw	r4,4(sp)
    f62c:	d9400417 	ldw	r5,16(sp)
    f630:	1004943a 	slli	r2,r2,16
    f634:	85ffffcc 	andi	r23,r16,65535
    f638:	2006d43a 	srli	r3,r4,16
    f63c:	b963383a 	mul	r17,r23,r5
    f640:	10c4b03a 	or	r2,r2,r3
    f644:	1440042e 	bgeu	r2,r17,f658 <__udivdi3+0x4ac>
    f648:	297fffc4 	addi	r5,r5,-1
    f64c:	1405883a 	add	r2,r2,r16
    f650:	d9400415 	stw	r5,16(sp)
    f654:	1400442e 	bgeu	r2,r16,f768 <__udivdi3+0x5bc>
    f658:	1463c83a 	sub	r17,r2,r17
    f65c:	8809883a 	mov	r4,r17
    f660:	a80b883a 	mov	r5,r21
    f664:	00028a40 	call	28a4 <__udivsi3>
    f668:	8809883a 	mov	r4,r17
    f66c:	a80b883a 	mov	r5,r21
    f670:	1029883a 	mov	r20,r2
    f674:	00028ac0 	call	28ac <__umodsi3>
    f678:	d9400117 	ldw	r5,4(sp)
    f67c:	1004943a 	slli	r2,r2,16
    f680:	bd09383a 	mul	r4,r23,r20
    f684:	28ffffcc 	andi	r3,r5,65535
    f688:	10c6b03a 	or	r3,r2,r3
    f68c:	1900062e 	bgeu	r3,r4,f6a8 <__udivdi3+0x4fc>
    f690:	1c07883a 	add	r3,r3,r16
    f694:	a53fffc4 	addi	r20,r20,-1
    f698:	1c000336 	bltu	r3,r16,f6a8 <__udivdi3+0x4fc>
    f69c:	1900022e 	bgeu	r3,r4,f6a8 <__udivdi3+0x4fc>
    f6a0:	a53fffc4 	addi	r20,r20,-1
    f6a4:	1c07883a 	add	r3,r3,r16
    f6a8:	d9400417 	ldw	r5,16(sp)
    f6ac:	e5b8983a 	sll	fp,fp,r22
    f6b0:	1923c83a 	sub	r17,r3,r4
    f6b4:	2804943a 	slli	r2,r5,16
    f6b8:	a0a8b03a 	or	r20,r20,r2
    f6bc:	dd000315 	stw	r20,12(sp)
    f6c0:	003ee106 	br	f248 <__udivdi3+0x9c>
    f6c4:	2004943a 	slli	r2,r4,16
    f6c8:	e5c8983a 	sll	r4,fp,r23
    f6cc:	48ffffcc 	andi	r3,r9,65535
    f6d0:	10c5883a 	add	r2,r2,r3
    f6d4:	20bfc22e 	bgeu	r4,r2,f5e0 <__udivdi3+0x434>
    f6d8:	40bfffc4 	addi	r2,r8,-1
    f6dc:	0009883a 	mov	r4,zero
    f6e0:	003f1306 	br	f330 <__udivdi3+0x184>
    f6e4:	01400204 	movi	r5,8
    f6e8:	2805883a 	mov	r2,r5
    f6ec:	003f0306 	br	f2fc <__udivdi3+0x150>
    f6f0:	01400604 	movi	r5,24
    f6f4:	2805883a 	mov	r2,r5
    f6f8:	003f0006 	br	f2fc <__udivdi3+0x150>
    f6fc:	01400204 	movi	r5,8
    f700:	2805883a 	mov	r2,r5
    f704:	003ec206 	br	f210 <__udivdi3+0x64>
    f708:	01400604 	movi	r5,24
    f70c:	2805883a 	mov	r2,r5
    f710:	003ebf06 	br	f210 <__udivdi3+0x64>
    f714:	01400204 	movi	r5,8
    f718:	2805883a 	mov	r2,r5
    f71c:	003f1706 	br	f37c <__udivdi3+0x1d0>
    f720:	01400604 	movi	r5,24
    f724:	2805883a 	mov	r2,r5
    f728:	003f1406 	br	f37c <__udivdi3+0x1d0>
    f72c:	89ff962e 	bgeu	r17,r7,f588 <__udivdi3+0x3dc>
    f730:	8d63883a 	add	r17,r17,r21
    f734:	843fffc4 	addi	r16,r16,-1
    f738:	003f9306 	br	f588 <__udivdi3+0x3dc>
    f73c:	147f802e 	bgeu	r2,r17,f540 <__udivdi3+0x394>
    f740:	a53fffc4 	addi	r20,r20,-1
    f744:	1545883a 	add	r2,r2,r21
    f748:	003f7d06 	br	f540 <__udivdi3+0x394>
    f74c:	a53fffc4 	addi	r20,r20,-1
    f750:	003ede06 	br	f2cc <__udivdi3+0x120>
    f754:	b5bfffc4 	addi	r22,r22,-1
    f758:	1405883a 	add	r2,r2,r16
    f75c:	003f2806 	br	f400 <__udivdi3+0x254>
    f760:	a53fffc4 	addi	r20,r20,-1
    f764:	003f3706 	br	f444 <__udivdi3+0x298>
    f768:	147fbb2e 	bgeu	r2,r17,f658 <__udivdi3+0x4ac>
    f76c:	297fffc4 	addi	r5,r5,-1
    f770:	1405883a 	add	r2,r2,r16
    f774:	d9400415 	stw	r5,16(sp)
    f778:	003fb706 	br	f658 <__udivdi3+0x4ac>
    f77c:	b5bfffc4 	addi	r22,r22,-1
    f780:	1405883a 	add	r2,r2,r16
    f784:	003ec006 	br	f288 <__udivdi3+0xdc>

0000f788 <__umoddi3>:
    f788:	defff104 	addi	sp,sp,-60
    f78c:	dd800b15 	stw	r22,44(sp)
    f790:	dd000915 	stw	r20,36(sp)
    f794:	dc000515 	stw	r16,20(sp)
    f798:	dfc00e15 	stw	ra,56(sp)
    f79c:	df000d15 	stw	fp,52(sp)
    f7a0:	ddc00c15 	stw	r23,48(sp)
    f7a4:	dd400a15 	stw	r21,40(sp)
    f7a8:	dcc00815 	stw	r19,32(sp)
    f7ac:	dc800715 	stw	r18,28(sp)
    f7b0:	dc400615 	stw	r17,24(sp)
    f7b4:	3021883a 	mov	r16,r6
    f7b8:	202d883a 	mov	r22,r4
    f7bc:	2829883a 	mov	r20,r5
    f7c0:	38002b1e 	bne	r7,zero,f870 <__umoddi3+0xe8>
    f7c4:	29805036 	bltu	r5,r6,f908 <__umoddi3+0x180>
    f7c8:	30008a26 	beq	r6,zero,f9f4 <__umoddi3+0x26c>
    f7cc:	00bfffd4 	movui	r2,65535
    f7d0:	14008236 	bltu	r2,r16,f9dc <__umoddi3+0x254>
    f7d4:	00803fc4 	movi	r2,255
    f7d8:	14013636 	bltu	r2,r16,fcb4 <__umoddi3+0x52c>
    f7dc:	000b883a 	mov	r5,zero
    f7e0:	0005883a 	mov	r2,zero
    f7e4:	8084d83a 	srl	r2,r16,r2
    f7e8:	01000074 	movhi	r4,1
    f7ec:	2113e804 	addi	r4,r4,20384
    f7f0:	01800804 	movi	r6,32
    f7f4:	1105883a 	add	r2,r2,r4
    f7f8:	10c00003 	ldbu	r3,0(r2)
    f7fc:	28c7883a 	add	r3,r5,r3
    f800:	30efc83a 	sub	r23,r6,r3
    f804:	b800941e 	bne	r23,zero,fa58 <__umoddi3+0x2d0>
    f808:	802ad43a 	srli	r21,r16,16
    f80c:	a423c83a 	sub	r17,r20,r16
    f810:	0039883a 	mov	fp,zero
    f814:	853fffcc 	andi	r20,r16,65535
    f818:	8809883a 	mov	r4,r17
    f81c:	a80b883a 	mov	r5,r21
    f820:	00028a40 	call	28a4 <__udivsi3>
    f824:	8809883a 	mov	r4,r17
    f828:	a80b883a 	mov	r5,r21
    f82c:	a0a3383a 	mul	r17,r20,r2
    f830:	00028ac0 	call	28ac <__umodsi3>
    f834:	1004943a 	slli	r2,r2,16
    f838:	b006d43a 	srli	r3,r22,16
    f83c:	10c4b03a 	or	r2,r2,r3
    f840:	1440032e 	bgeu	r2,r17,f850 <__umoddi3+0xc8>
    f844:	1405883a 	add	r2,r2,r16
    f848:	14000136 	bltu	r2,r16,f850 <__umoddi3+0xc8>
    f84c:	14413536 	bltu	r2,r17,fd24 <__umoddi3+0x59c>
    f850:	1463c83a 	sub	r17,r2,r17
    f854:	8809883a 	mov	r4,r17
    f858:	a80b883a 	mov	r5,r21
    f85c:	00028a40 	call	28a4 <__udivsi3>
    f860:	8809883a 	mov	r4,r17
    f864:	a0a3383a 	mul	r17,r20,r2
    f868:	a80b883a 	mov	r5,r21
    f86c:	00004d06 	br	f9a4 <__umoddi3+0x21c>
    f870:	380d883a 	mov	r6,r7
    f874:	29c0102e 	bgeu	r5,r7,f8b8 <__umoddi3+0x130>
    f878:	2011883a 	mov	r8,r4
    f87c:	2813883a 	mov	r9,r5
    f880:	4005883a 	mov	r2,r8
    f884:	4807883a 	mov	r3,r9
    f888:	dfc00e17 	ldw	ra,56(sp)
    f88c:	df000d17 	ldw	fp,52(sp)
    f890:	ddc00c17 	ldw	r23,48(sp)
    f894:	dd800b17 	ldw	r22,44(sp)
    f898:	dd400a17 	ldw	r21,40(sp)
    f89c:	dd000917 	ldw	r20,36(sp)
    f8a0:	dcc00817 	ldw	r19,32(sp)
    f8a4:	dc800717 	ldw	r18,28(sp)
    f8a8:	dc400617 	ldw	r17,24(sp)
    f8ac:	dc000517 	ldw	r16,20(sp)
    f8b0:	dec00f04 	addi	sp,sp,60
    f8b4:	f800283a 	ret
    f8b8:	00bfffd4 	movui	r2,65535
    f8bc:	11c05a36 	bltu	r2,r7,fa28 <__umoddi3+0x2a0>
    f8c0:	00803fc4 	movi	r2,255
    f8c4:	11c0fe36 	bltu	r2,r7,fcc0 <__umoddi3+0x538>
    f8c8:	000b883a 	mov	r5,zero
    f8cc:	0005883a 	mov	r2,zero
    f8d0:	3084d83a 	srl	r2,r6,r2
    f8d4:	01000074 	movhi	r4,1
    f8d8:	2113e804 	addi	r4,r4,20384
    f8dc:	01c00804 	movi	r7,32
    f8e0:	1105883a 	add	r2,r2,r4
    f8e4:	10c00003 	ldbu	r3,0(r2)
    f8e8:	28c7883a 	add	r3,r5,r3
    f8ec:	38ebc83a 	sub	r21,r7,r3
    f8f0:	a800851e 	bne	r21,zero,fb08 <__umoddi3+0x380>
    f8f4:	35005236 	bltu	r6,r20,fa40 <__umoddi3+0x2b8>
    f8f8:	b400512e 	bgeu	r22,r16,fa40 <__umoddi3+0x2b8>
    f8fc:	b011883a 	mov	r8,r22
    f900:	a013883a 	mov	r9,r20
    f904:	003fde06 	br	f880 <__umoddi3+0xf8>
    f908:	00bfffd4 	movui	r2,65535
    f90c:	11804036 	bltu	r2,r6,fa10 <__umoddi3+0x288>
    f910:	00803fc4 	movi	r2,255
    f914:	1180ed36 	bltu	r2,r6,fccc <__umoddi3+0x544>
    f918:	000b883a 	mov	r5,zero
    f91c:	0005883a 	mov	r2,zero
    f920:	8084d83a 	srl	r2,r16,r2
    f924:	01000074 	movhi	r4,1
    f928:	2113e804 	addi	r4,r4,20384
    f92c:	01800804 	movi	r6,32
    f930:	1105883a 	add	r2,r2,r4
    f934:	10c00003 	ldbu	r3,0(r2)
    f938:	28c7883a 	add	r3,r5,r3
    f93c:	30c7c83a 	sub	r3,r6,r3
    f940:	1800bf1e 	bne	r3,zero,fc40 <__umoddi3+0x4b8>
    f944:	0039883a 	mov	fp,zero
    f948:	802ad43a 	srli	r21,r16,16
    f94c:	a009883a 	mov	r4,r20
    f950:	85ffffcc 	andi	r23,r16,65535
    f954:	a80b883a 	mov	r5,r21
    f958:	00028a40 	call	28a4 <__udivsi3>
    f95c:	a009883a 	mov	r4,r20
    f960:	a80b883a 	mov	r5,r21
    f964:	b8a3383a 	mul	r17,r23,r2
    f968:	00028ac0 	call	28ac <__umodsi3>
    f96c:	1004943a 	slli	r2,r2,16
    f970:	b006d43a 	srli	r3,r22,16
    f974:	10c4b03a 	or	r2,r2,r3
    f978:	1440032e 	bgeu	r2,r17,f988 <__umoddi3+0x200>
    f97c:	1405883a 	add	r2,r2,r16
    f980:	14000136 	bltu	r2,r16,f988 <__umoddi3+0x200>
    f984:	1440e536 	bltu	r2,r17,fd1c <__umoddi3+0x594>
    f988:	1463c83a 	sub	r17,r2,r17
    f98c:	8809883a 	mov	r4,r17
    f990:	a80b883a 	mov	r5,r21
    f994:	00028a40 	call	28a4 <__udivsi3>
    f998:	8809883a 	mov	r4,r17
    f99c:	b8a3383a 	mul	r17,r23,r2
    f9a0:	a80b883a 	mov	r5,r21
    f9a4:	00028ac0 	call	28ac <__umodsi3>
    f9a8:	1004943a 	slli	r2,r2,16
    f9ac:	b0ffffcc 	andi	r3,r22,65535
    f9b0:	10c4b03a 	or	r2,r2,r3
    f9b4:	1440042e 	bgeu	r2,r17,f9c8 <__umoddi3+0x240>
    f9b8:	1405883a 	add	r2,r2,r16
    f9bc:	14000236 	bltu	r2,r16,f9c8 <__umoddi3+0x240>
    f9c0:	1440012e 	bgeu	r2,r17,f9c8 <__umoddi3+0x240>
    f9c4:	1405883a 	add	r2,r2,r16
    f9c8:	1445c83a 	sub	r2,r2,r17
    f9cc:	1724d83a 	srl	r18,r2,fp
    f9d0:	0013883a 	mov	r9,zero
    f9d4:	9011883a 	mov	r8,r18
    f9d8:	003fa906 	br	f880 <__umoddi3+0xf8>
    f9dc:	00804034 	movhi	r2,256
    f9e0:	10bfffc4 	addi	r2,r2,-1
    f9e4:	1400b036 	bltu	r2,r16,fca8 <__umoddi3+0x520>
    f9e8:	01400404 	movi	r5,16
    f9ec:	2805883a 	mov	r2,r5
    f9f0:	003f7c06 	br	f7e4 <__umoddi3+0x5c>
    f9f4:	01000044 	movi	r4,1
    f9f8:	000b883a 	mov	r5,zero
    f9fc:	00028a40 	call	28a4 <__udivsi3>
    fa00:	1021883a 	mov	r16,r2
    fa04:	00bfffd4 	movui	r2,65535
    fa08:	143ff436 	bltu	r2,r16,f9dc <__umoddi3+0x254>
    fa0c:	003f7106 	br	f7d4 <__umoddi3+0x4c>
    fa10:	00804034 	movhi	r2,256
    fa14:	10bfffc4 	addi	r2,r2,-1
    fa18:	1180af36 	bltu	r2,r6,fcd8 <__umoddi3+0x550>
    fa1c:	01400404 	movi	r5,16
    fa20:	2805883a 	mov	r2,r5
    fa24:	003fbe06 	br	f920 <__umoddi3+0x198>
    fa28:	00804034 	movhi	r2,256
    fa2c:	10bfffc4 	addi	r2,r2,-1
    fa30:	11c0ac36 	bltu	r2,r7,fce4 <__umoddi3+0x55c>
    fa34:	01400404 	movi	r5,16
    fa38:	2805883a 	mov	r2,r5
    fa3c:	003fa406 	br	f8d0 <__umoddi3+0x148>
    fa40:	b409c83a 	sub	r4,r22,r16
    fa44:	b105803a 	cmpltu	r2,r22,r4
    fa48:	a187c83a 	sub	r3,r20,r6
    fa4c:	18a9c83a 	sub	r20,r3,r2
    fa50:	202d883a 	mov	r22,r4
    fa54:	003fa906 	br	f8fc <__umoddi3+0x174>
    fa58:	85e0983a 	sll	r16,r16,r23
    fa5c:	35c5c83a 	sub	r2,r6,r23
    fa60:	a0a2d83a 	srl	r17,r20,r2
    fa64:	802ad43a 	srli	r21,r16,16
    fa68:	b084d83a 	srl	r2,r22,r2
    fa6c:	a5c6983a 	sll	r3,r20,r23
    fa70:	8809883a 	mov	r4,r17
    fa74:	a80b883a 	mov	r5,r21
    fa78:	1886b03a 	or	r3,r3,r2
    fa7c:	d8c00115 	stw	r3,4(sp)
    fa80:	853fffcc 	andi	r20,r16,65535
    fa84:	00028a40 	call	28a4 <__udivsi3>
    fa88:	8809883a 	mov	r4,r17
    fa8c:	a80b883a 	mov	r5,r21
    fa90:	a0a3383a 	mul	r17,r20,r2
    fa94:	00028ac0 	call	28ac <__umodsi3>
    fa98:	d9000117 	ldw	r4,4(sp)
    fa9c:	1004943a 	slli	r2,r2,16
    faa0:	b839883a 	mov	fp,r23
    faa4:	2006d43a 	srli	r3,r4,16
    faa8:	10c4b03a 	or	r2,r2,r3
    faac:	1440022e 	bgeu	r2,r17,fab8 <__umoddi3+0x330>
    fab0:	1405883a 	add	r2,r2,r16
    fab4:	1400962e 	bgeu	r2,r16,fd10 <__umoddi3+0x588>
    fab8:	1463c83a 	sub	r17,r2,r17
    fabc:	8809883a 	mov	r4,r17
    fac0:	a80b883a 	mov	r5,r21
    fac4:	00028a40 	call	28a4 <__udivsi3>
    fac8:	8809883a 	mov	r4,r17
    facc:	a80b883a 	mov	r5,r21
    fad0:	a0a3383a 	mul	r17,r20,r2
    fad4:	00028ac0 	call	28ac <__umodsi3>
    fad8:	d9400117 	ldw	r5,4(sp)
    fadc:	1004943a 	slli	r2,r2,16
    fae0:	28ffffcc 	andi	r3,r5,65535
    fae4:	10c4b03a 	or	r2,r2,r3
    fae8:	1440042e 	bgeu	r2,r17,fafc <__umoddi3+0x374>
    faec:	1405883a 	add	r2,r2,r16
    faf0:	14000236 	bltu	r2,r16,fafc <__umoddi3+0x374>
    faf4:	1440012e 	bgeu	r2,r17,fafc <__umoddi3+0x374>
    faf8:	1405883a 	add	r2,r2,r16
    fafc:	b5ec983a 	sll	r22,r22,r23
    fb00:	1463c83a 	sub	r17,r2,r17
    fb04:	003f4406 	br	f818 <__umoddi3+0x90>
    fb08:	3d4fc83a 	sub	r7,r7,r21
    fb0c:	3546983a 	sll	r3,r6,r21
    fb10:	81c4d83a 	srl	r2,r16,r7
    fb14:	a1e2d83a 	srl	r17,r20,r7
    fb18:	a54c983a 	sll	r6,r20,r21
    fb1c:	18aeb03a 	or	r23,r3,r2
    fb20:	b828d43a 	srli	r20,r23,16
    fb24:	b1c4d83a 	srl	r2,r22,r7
    fb28:	8809883a 	mov	r4,r17
    fb2c:	a00b883a 	mov	r5,r20
    fb30:	308cb03a 	or	r6,r6,r2
    fb34:	d9c00315 	stw	r7,12(sp)
    fb38:	d9800215 	stw	r6,8(sp)
    fb3c:	00028a40 	call	28a4 <__udivsi3>
    fb40:	8809883a 	mov	r4,r17
    fb44:	a00b883a 	mov	r5,r20
    fb48:	1039883a 	mov	fp,r2
    fb4c:	00028ac0 	call	28ac <__umodsi3>
    fb50:	b8ffffcc 	andi	r3,r23,65535
    fb54:	d8c00415 	stw	r3,16(sp)
    fb58:	d9000217 	ldw	r4,8(sp)
    fb5c:	d9400417 	ldw	r5,16(sp)
    fb60:	1004943a 	slli	r2,r2,16
    fb64:	2006d43a 	srli	r3,r4,16
    fb68:	8560983a 	sll	r16,r16,r21
    fb6c:	2f23383a 	mul	r17,r5,fp
    fb70:	10c4b03a 	or	r2,r2,r3
    fb74:	dc000015 	stw	r16,0(sp)
    fb78:	b56c983a 	sll	r22,r22,r21
    fb7c:	1440032e 	bgeu	r2,r17,fb8c <__umoddi3+0x404>
    fb80:	15c5883a 	add	r2,r2,r23
    fb84:	e73fffc4 	addi	fp,fp,-1
    fb88:	15c05d2e 	bgeu	r2,r23,fd00 <__umoddi3+0x578>
    fb8c:	1463c83a 	sub	r17,r2,r17
    fb90:	8809883a 	mov	r4,r17
    fb94:	a00b883a 	mov	r5,r20
    fb98:	00028a40 	call	28a4 <__udivsi3>
    fb9c:	8809883a 	mov	r4,r17
    fba0:	a00b883a 	mov	r5,r20
    fba4:	1021883a 	mov	r16,r2
    fba8:	00028ac0 	call	28ac <__umodsi3>
    fbac:	d8c00417 	ldw	r3,16(sp)
    fbb0:	d9000217 	ldw	r4,8(sp)
    fbb4:	1004943a 	slli	r2,r2,16
    fbb8:	1c23383a 	mul	r17,r3,r16
    fbbc:	20ffffcc 	andi	r3,r4,65535
    fbc0:	10ceb03a 	or	r7,r2,r3
    fbc4:	3c40032e 	bgeu	r7,r17,fbd4 <__umoddi3+0x44c>
    fbc8:	3dcf883a 	add	r7,r7,r23
    fbcc:	843fffc4 	addi	r16,r16,-1
    fbd0:	3dc0472e 	bgeu	r7,r23,fcf0 <__umoddi3+0x568>
    fbd4:	e004943a 	slli	r2,fp,16
    fbd8:	d9400017 	ldw	r5,0(sp)
    fbdc:	3c4fc83a 	sub	r7,r7,r17
    fbe0:	8084b03a 	or	r2,r16,r2
    fbe4:	28ffffcc 	andi	r3,r5,65535
    fbe8:	280cd43a 	srli	r6,r5,16
    fbec:	100ad43a 	srli	r5,r2,16
    fbf0:	10bfffcc 	andi	r2,r2,65535
    fbf4:	10d1383a 	mul	r8,r2,r3
    fbf8:	28c7383a 	mul	r3,r5,r3
    fbfc:	1185383a 	mul	r2,r2,r6
    fc00:	4008d43a 	srli	r4,r8,16
    fc04:	298b383a 	mul	r5,r5,r6
    fc08:	10c5883a 	add	r2,r2,r3
    fc0c:	2089883a 	add	r4,r4,r2
    fc10:	20c0022e 	bgeu	r4,r3,fc1c <__umoddi3+0x494>
    fc14:	00800074 	movhi	r2,1
    fc18:	288b883a 	add	r5,r5,r2
    fc1c:	2004d43a 	srli	r2,r4,16
    fc20:	2008943a 	slli	r4,r4,16
    fc24:	40ffffcc 	andi	r3,r8,65535
    fc28:	288b883a 	add	r5,r5,r2
    fc2c:	20c9883a 	add	r4,r4,r3
    fc30:	39400b36 	bltu	r7,r5,fc60 <__umoddi3+0x4d8>
    fc34:	39403d26 	beq	r7,r5,fd2c <__umoddi3+0x5a4>
    fc38:	394bc83a 	sub	r5,r7,r5
    fc3c:	00000f06 	br	fc7c <__umoddi3+0x4f4>
    fc40:	30c5c83a 	sub	r2,r6,r3
    fc44:	1839883a 	mov	fp,r3
    fc48:	b084d83a 	srl	r2,r22,r2
    fc4c:	a0c6983a 	sll	r3,r20,r3
    fc50:	8720983a 	sll	r16,r16,fp
    fc54:	b72c983a 	sll	r22,r22,fp
    fc58:	18a8b03a 	or	r20,r3,r2
    fc5c:	003f3a06 	br	f948 <__umoddi3+0x1c0>
    fc60:	d8c00017 	ldw	r3,0(sp)
    fc64:	20c5c83a 	sub	r2,r4,r3
    fc68:	2089803a 	cmpltu	r4,r4,r2
    fc6c:	2dc7c83a 	sub	r3,r5,r23
    fc70:	1907c83a 	sub	r3,r3,r4
    fc74:	38cbc83a 	sub	r5,r7,r3
    fc78:	1009883a 	mov	r4,r2
    fc7c:	b105c83a 	sub	r2,r22,r4
    fc80:	b087803a 	cmpltu	r3,r22,r2
    fc84:	28c7c83a 	sub	r3,r5,r3
    fc88:	d9400317 	ldw	r5,12(sp)
    fc8c:	1544d83a 	srl	r2,r2,r21
    fc90:	1948983a 	sll	r4,r3,r5
    fc94:	1d46d83a 	srl	r3,r3,r21
    fc98:	20a4b03a 	or	r18,r4,r2
    fc9c:	9011883a 	mov	r8,r18
    fca0:	1813883a 	mov	r9,r3
    fca4:	003ef606 	br	f880 <__umoddi3+0xf8>
    fca8:	01400604 	movi	r5,24
    fcac:	2805883a 	mov	r2,r5
    fcb0:	003ecc06 	br	f7e4 <__umoddi3+0x5c>
    fcb4:	01400204 	movi	r5,8
    fcb8:	2805883a 	mov	r2,r5
    fcbc:	003ec906 	br	f7e4 <__umoddi3+0x5c>
    fcc0:	01400204 	movi	r5,8
    fcc4:	2805883a 	mov	r2,r5
    fcc8:	003f0106 	br	f8d0 <__umoddi3+0x148>
    fccc:	01400204 	movi	r5,8
    fcd0:	2805883a 	mov	r2,r5
    fcd4:	003f1206 	br	f920 <__umoddi3+0x198>
    fcd8:	01400604 	movi	r5,24
    fcdc:	2805883a 	mov	r2,r5
    fce0:	003f0f06 	br	f920 <__umoddi3+0x198>
    fce4:	01400604 	movi	r5,24
    fce8:	2805883a 	mov	r2,r5
    fcec:	003ef806 	br	f8d0 <__umoddi3+0x148>
    fcf0:	3c7fb82e 	bgeu	r7,r17,fbd4 <__umoddi3+0x44c>
    fcf4:	843fffc4 	addi	r16,r16,-1
    fcf8:	3dcf883a 	add	r7,r7,r23
    fcfc:	003fb506 	br	fbd4 <__umoddi3+0x44c>
    fd00:	147fa22e 	bgeu	r2,r17,fb8c <__umoddi3+0x404>
    fd04:	e73fffc4 	addi	fp,fp,-1
    fd08:	15c5883a 	add	r2,r2,r23
    fd0c:	003f9f06 	br	fb8c <__umoddi3+0x404>
    fd10:	147f692e 	bgeu	r2,r17,fab8 <__umoddi3+0x330>
    fd14:	1405883a 	add	r2,r2,r16
    fd18:	003f6706 	br	fab8 <__umoddi3+0x330>
    fd1c:	1405883a 	add	r2,r2,r16
    fd20:	003f1906 	br	f988 <__umoddi3+0x200>
    fd24:	1405883a 	add	r2,r2,r16
    fd28:	003ec906 	br	f850 <__umoddi3+0xc8>
    fd2c:	b13fcc36 	bltu	r22,r4,fc60 <__umoddi3+0x4d8>
    fd30:	000b883a 	mov	r5,zero
    fd34:	003fd106 	br	fc7c <__umoddi3+0x4f4>

0000fd38 <__nesf2>:
    fd38:	defff304 	addi	sp,sp,-52
    fd3c:	dc400b15 	stw	r17,44(sp)
    fd40:	dc400204 	addi	r17,sp,8
    fd44:	dc000a15 	stw	r16,40(sp)
    fd48:	d9000015 	stw	r4,0(sp)
    fd4c:	d9400115 	stw	r5,4(sp)
    fd50:	d809883a 	mov	r4,sp
    fd54:	880b883a 	mov	r5,r17
    fd58:	dc000604 	addi	r16,sp,24
    fd5c:	dfc00c15 	stw	ra,48(sp)
    fd60:	00111480 	call	11148 <__unpack_f>
    fd64:	d9000104 	addi	r4,sp,4
    fd68:	800b883a 	mov	r5,r16
    fd6c:	00111480 	call	11148 <__unpack_f>
    fd70:	d8800217 	ldw	r2,8(sp)
    fd74:	00c00044 	movi	r3,1
    fd78:	180d883a 	mov	r6,r3
    fd7c:	1880062e 	bgeu	r3,r2,fd98 <__nesf2+0x60>
    fd80:	d8800617 	ldw	r2,24(sp)
    fd84:	8809883a 	mov	r4,r17
    fd88:	800b883a 	mov	r5,r16
    fd8c:	1880022e 	bgeu	r3,r2,fd98 <__nesf2+0x60>
    fd90:	00112100 	call	11210 <__fpcmp_parts_f>
    fd94:	100d883a 	mov	r6,r2
    fd98:	3005883a 	mov	r2,r6
    fd9c:	dfc00c17 	ldw	ra,48(sp)
    fda0:	dc400b17 	ldw	r17,44(sp)
    fda4:	dc000a17 	ldw	r16,40(sp)
    fda8:	dec00d04 	addi	sp,sp,52
    fdac:	f800283a 	ret

0000fdb0 <__gtsf2>:
    fdb0:	defff304 	addi	sp,sp,-52
    fdb4:	dc400b15 	stw	r17,44(sp)
    fdb8:	dc400204 	addi	r17,sp,8
    fdbc:	dc000a15 	stw	r16,40(sp)
    fdc0:	d9000015 	stw	r4,0(sp)
    fdc4:	d9400115 	stw	r5,4(sp)
    fdc8:	d809883a 	mov	r4,sp
    fdcc:	880b883a 	mov	r5,r17
    fdd0:	dc000604 	addi	r16,sp,24
    fdd4:	dfc00c15 	stw	ra,48(sp)
    fdd8:	00111480 	call	11148 <__unpack_f>
    fddc:	d9000104 	addi	r4,sp,4
    fde0:	800b883a 	mov	r5,r16
    fde4:	00111480 	call	11148 <__unpack_f>
    fde8:	d8800217 	ldw	r2,8(sp)
    fdec:	00c00044 	movi	r3,1
    fdf0:	01bfffc4 	movi	r6,-1
    fdf4:	1880062e 	bgeu	r3,r2,fe10 <__gtsf2+0x60>
    fdf8:	d8800617 	ldw	r2,24(sp)
    fdfc:	8809883a 	mov	r4,r17
    fe00:	800b883a 	mov	r5,r16
    fe04:	1880022e 	bgeu	r3,r2,fe10 <__gtsf2+0x60>
    fe08:	00112100 	call	11210 <__fpcmp_parts_f>
    fe0c:	100d883a 	mov	r6,r2
    fe10:	3005883a 	mov	r2,r6
    fe14:	dfc00c17 	ldw	ra,48(sp)
    fe18:	dc400b17 	ldw	r17,44(sp)
    fe1c:	dc000a17 	ldw	r16,40(sp)
    fe20:	dec00d04 	addi	sp,sp,52
    fe24:	f800283a 	ret

0000fe28 <__ltsf2>:
    fe28:	defff304 	addi	sp,sp,-52
    fe2c:	dc400b15 	stw	r17,44(sp)
    fe30:	dc400204 	addi	r17,sp,8
    fe34:	dc000a15 	stw	r16,40(sp)
    fe38:	d9000015 	stw	r4,0(sp)
    fe3c:	d9400115 	stw	r5,4(sp)
    fe40:	d809883a 	mov	r4,sp
    fe44:	880b883a 	mov	r5,r17
    fe48:	dc000604 	addi	r16,sp,24
    fe4c:	dfc00c15 	stw	ra,48(sp)
    fe50:	00111480 	call	11148 <__unpack_f>
    fe54:	d9000104 	addi	r4,sp,4
    fe58:	800b883a 	mov	r5,r16
    fe5c:	00111480 	call	11148 <__unpack_f>
    fe60:	d8800217 	ldw	r2,8(sp)
    fe64:	00c00044 	movi	r3,1
    fe68:	180d883a 	mov	r6,r3
    fe6c:	1880062e 	bgeu	r3,r2,fe88 <__ltsf2+0x60>
    fe70:	d8800617 	ldw	r2,24(sp)
    fe74:	8809883a 	mov	r4,r17
    fe78:	800b883a 	mov	r5,r16
    fe7c:	1880022e 	bgeu	r3,r2,fe88 <__ltsf2+0x60>
    fe80:	00112100 	call	11210 <__fpcmp_parts_f>
    fe84:	100d883a 	mov	r6,r2
    fe88:	3005883a 	mov	r2,r6
    fe8c:	dfc00c17 	ldw	ra,48(sp)
    fe90:	dc400b17 	ldw	r17,44(sp)
    fe94:	dc000a17 	ldw	r16,40(sp)
    fe98:	dec00d04 	addi	sp,sp,52
    fe9c:	f800283a 	ret

0000fea0 <_fpadd_parts>:
    fea0:	defff804 	addi	sp,sp,-32
    fea4:	dcc00315 	stw	r19,12(sp)
    fea8:	2027883a 	mov	r19,r4
    feac:	21000017 	ldw	r4,0(r4)
    feb0:	00c00044 	movi	r3,1
    feb4:	dd400515 	stw	r21,20(sp)
    feb8:	dd000415 	stw	r20,16(sp)
    febc:	ddc00715 	stw	r23,28(sp)
    fec0:	dd800615 	stw	r22,24(sp)
    fec4:	dc800215 	stw	r18,8(sp)
    fec8:	dc400115 	stw	r17,4(sp)
    fecc:	dc000015 	stw	r16,0(sp)
    fed0:	282b883a 	mov	r21,r5
    fed4:	3029883a 	mov	r20,r6
    fed8:	1900632e 	bgeu	r3,r4,10068 <_fpadd_parts+0x1c8>
    fedc:	28800017 	ldw	r2,0(r5)
    fee0:	1880812e 	bgeu	r3,r2,100e8 <_fpadd_parts+0x248>
    fee4:	00c00104 	movi	r3,4
    fee8:	20c0dc26 	beq	r4,r3,1025c <_fpadd_parts+0x3bc>
    feec:	10c07e26 	beq	r2,r3,100e8 <_fpadd_parts+0x248>
    fef0:	00c00084 	movi	r3,2
    fef4:	10c06726 	beq	r2,r3,10094 <_fpadd_parts+0x1f4>
    fef8:	20c07b26 	beq	r4,r3,100e8 <_fpadd_parts+0x248>
    fefc:	9dc00217 	ldw	r23,8(r19)
    ff00:	28c00217 	ldw	r3,8(r5)
    ff04:	9c400317 	ldw	r17,12(r19)
    ff08:	2bc00317 	ldw	r15,12(r5)
    ff0c:	b8cdc83a 	sub	r6,r23,r3
    ff10:	9c800417 	ldw	r18,16(r19)
    ff14:	2c000417 	ldw	r16,16(r5)
    ff18:	3009883a 	mov	r4,r6
    ff1c:	30009716 	blt	r6,zero,1017c <_fpadd_parts+0x2dc>
    ff20:	00800fc4 	movi	r2,63
    ff24:	11806b16 	blt	r2,r6,100d4 <_fpadd_parts+0x234>
    ff28:	0100a40e 	bge	zero,r4,101bc <_fpadd_parts+0x31c>
    ff2c:	35bff804 	addi	r22,r6,-32
    ff30:	b000bc16 	blt	r22,zero,10224 <_fpadd_parts+0x384>
    ff34:	8596d83a 	srl	r11,r16,r22
    ff38:	0019883a 	mov	r12,zero
    ff3c:	0013883a 	mov	r9,zero
    ff40:	01000044 	movi	r4,1
    ff44:	0015883a 	mov	r10,zero
    ff48:	b000be16 	blt	r22,zero,10244 <_fpadd_parts+0x3a4>
    ff4c:	2590983a 	sll	r8,r4,r22
    ff50:	000f883a 	mov	r7,zero
    ff54:	00bfffc4 	movi	r2,-1
    ff58:	3889883a 	add	r4,r7,r2
    ff5c:	408b883a 	add	r5,r8,r2
    ff60:	21cd803a 	cmpltu	r6,r4,r7
    ff64:	314b883a 	add	r5,r6,r5
    ff68:	7904703a 	and	r2,r15,r4
    ff6c:	8146703a 	and	r3,r16,r5
    ff70:	10c4b03a 	or	r2,r2,r3
    ff74:	10000226 	beq	r2,zero,ff80 <_fpadd_parts+0xe0>
    ff78:	02400044 	movi	r9,1
    ff7c:	0015883a 	mov	r10,zero
    ff80:	5a5eb03a 	or	r15,r11,r9
    ff84:	62a0b03a 	or	r16,r12,r10
    ff88:	99400117 	ldw	r5,4(r19)
    ff8c:	a8800117 	ldw	r2,4(r21)
    ff90:	28806e26 	beq	r5,r2,1014c <_fpadd_parts+0x2ac>
    ff94:	28006626 	beq	r5,zero,10130 <_fpadd_parts+0x290>
    ff98:	7c45c83a 	sub	r2,r15,r17
    ff9c:	7889803a 	cmpltu	r4,r15,r2
    ffa0:	8487c83a 	sub	r3,r16,r18
    ffa4:	1909c83a 	sub	r4,r3,r4
    ffa8:	100d883a 	mov	r6,r2
    ffac:	200f883a 	mov	r7,r4
    ffb0:	38007716 	blt	r7,zero,10190 <_fpadd_parts+0x2f0>
    ffb4:	a5c00215 	stw	r23,8(r20)
    ffb8:	a1c00415 	stw	r7,16(r20)
    ffbc:	a0000115 	stw	zero,4(r20)
    ffc0:	a1800315 	stw	r6,12(r20)
    ffc4:	a2000317 	ldw	r8,12(r20)
    ffc8:	a2400417 	ldw	r9,16(r20)
    ffcc:	00bfffc4 	movi	r2,-1
    ffd0:	408b883a 	add	r5,r8,r2
    ffd4:	2a09803a 	cmpltu	r4,r5,r8
    ffd8:	488d883a 	add	r6,r9,r2
    ffdc:	01c40034 	movhi	r7,4096
    ffe0:	39ffffc4 	addi	r7,r7,-1
    ffe4:	218d883a 	add	r6,r4,r6
    ffe8:	39801736 	bltu	r7,r6,10048 <_fpadd_parts+0x1a8>
    ffec:	31c06526 	beq	r6,r7,10184 <_fpadd_parts+0x2e4>
    fff0:	a3000217 	ldw	r12,8(r20)
    fff4:	4209883a 	add	r4,r8,r8
    fff8:	00bfffc4 	movi	r2,-1
    fffc:	220f803a 	cmpltu	r7,r4,r8
   10000:	4a4b883a 	add	r5,r9,r9
   10004:	394f883a 	add	r7,r7,r5
   10008:	2095883a 	add	r10,r4,r2
   1000c:	3897883a 	add	r11,r7,r2
   10010:	510d803a 	cmpltu	r6,r10,r4
   10014:	6099883a 	add	r12,r12,r2
   10018:	32d7883a 	add	r11,r6,r11
   1001c:	00840034 	movhi	r2,4096
   10020:	10bfffc4 	addi	r2,r2,-1
   10024:	2011883a 	mov	r8,r4
   10028:	3813883a 	mov	r9,r7
   1002c:	a1000315 	stw	r4,12(r20)
   10030:	a1c00415 	stw	r7,16(r20)
   10034:	a3000215 	stw	r12,8(r20)
   10038:	12c00336 	bltu	r2,r11,10048 <_fpadd_parts+0x1a8>
   1003c:	58bfed1e 	bne	r11,r2,fff4 <_fpadd_parts+0x154>
   10040:	00bfff84 	movi	r2,-2
   10044:	12bfeb2e 	bgeu	r2,r10,fff4 <_fpadd_parts+0x154>
   10048:	a2800417 	ldw	r10,16(r20)
   1004c:	008000c4 	movi	r2,3
   10050:	00c80034 	movhi	r3,8192
   10054:	18ffffc4 	addi	r3,r3,-1
   10058:	a2400317 	ldw	r9,12(r20)
   1005c:	a0800015 	stw	r2,0(r20)
   10060:	1a802336 	bltu	r3,r10,100f0 <_fpadd_parts+0x250>
   10064:	a027883a 	mov	r19,r20
   10068:	9805883a 	mov	r2,r19
   1006c:	ddc00717 	ldw	r23,28(sp)
   10070:	dd800617 	ldw	r22,24(sp)
   10074:	dd400517 	ldw	r21,20(sp)
   10078:	dd000417 	ldw	r20,16(sp)
   1007c:	dcc00317 	ldw	r19,12(sp)
   10080:	dc800217 	ldw	r18,8(sp)
   10084:	dc400117 	ldw	r17,4(sp)
   10088:	dc000017 	ldw	r16,0(sp)
   1008c:	dec00804 	addi	sp,sp,32
   10090:	f800283a 	ret
   10094:	20fff41e 	bne	r4,r3,10068 <_fpadd_parts+0x1c8>
   10098:	31000015 	stw	r4,0(r6)
   1009c:	98800117 	ldw	r2,4(r19)
   100a0:	30800115 	stw	r2,4(r6)
   100a4:	98c00217 	ldw	r3,8(r19)
   100a8:	30c00215 	stw	r3,8(r6)
   100ac:	98800317 	ldw	r2,12(r19)
   100b0:	30800315 	stw	r2,12(r6)
   100b4:	98c00417 	ldw	r3,16(r19)
   100b8:	30c00415 	stw	r3,16(r6)
   100bc:	98800117 	ldw	r2,4(r19)
   100c0:	28c00117 	ldw	r3,4(r5)
   100c4:	3027883a 	mov	r19,r6
   100c8:	10c4703a 	and	r2,r2,r3
   100cc:	30800115 	stw	r2,4(r6)
   100d0:	003fe506 	br	10068 <_fpadd_parts+0x1c8>
   100d4:	1dc02616 	blt	r3,r23,10170 <_fpadd_parts+0x2d0>
   100d8:	0023883a 	mov	r17,zero
   100dc:	182f883a 	mov	r23,r3
   100e0:	0025883a 	mov	r18,zero
   100e4:	003fa806 	br	ff88 <_fpadd_parts+0xe8>
   100e8:	a827883a 	mov	r19,r21
   100ec:	003fde06 	br	10068 <_fpadd_parts+0x1c8>
   100f0:	01800044 	movi	r6,1
   100f4:	500497fa 	slli	r2,r10,31
   100f8:	4808d07a 	srli	r4,r9,1
   100fc:	518ad83a 	srl	r5,r10,r6
   10100:	a2000217 	ldw	r8,8(r20)
   10104:	1108b03a 	or	r4,r2,r4
   10108:	0007883a 	mov	r3,zero
   1010c:	4984703a 	and	r2,r9,r6
   10110:	208cb03a 	or	r6,r4,r2
   10114:	28ceb03a 	or	r7,r5,r3
   10118:	42000044 	addi	r8,r8,1
   1011c:	a027883a 	mov	r19,r20
   10120:	a1c00415 	stw	r7,16(r20)
   10124:	a2000215 	stw	r8,8(r20)
   10128:	a1800315 	stw	r6,12(r20)
   1012c:	003fce06 	br	10068 <_fpadd_parts+0x1c8>
   10130:	8bc5c83a 	sub	r2,r17,r15
   10134:	8889803a 	cmpltu	r4,r17,r2
   10138:	9407c83a 	sub	r3,r18,r16
   1013c:	1909c83a 	sub	r4,r3,r4
   10140:	100d883a 	mov	r6,r2
   10144:	200f883a 	mov	r7,r4
   10148:	003f9906 	br	ffb0 <_fpadd_parts+0x110>
   1014c:	7c45883a 	add	r2,r15,r17
   10150:	13c9803a 	cmpltu	r4,r2,r15
   10154:	8487883a 	add	r3,r16,r18
   10158:	20c9883a 	add	r4,r4,r3
   1015c:	a1400115 	stw	r5,4(r20)
   10160:	a5c00215 	stw	r23,8(r20)
   10164:	a0800315 	stw	r2,12(r20)
   10168:	a1000415 	stw	r4,16(r20)
   1016c:	003fb606 	br	10048 <_fpadd_parts+0x1a8>
   10170:	001f883a 	mov	r15,zero
   10174:	0021883a 	mov	r16,zero
   10178:	003f8306 	br	ff88 <_fpadd_parts+0xe8>
   1017c:	018dc83a 	sub	r6,zero,r6
   10180:	003f6706 	br	ff20 <_fpadd_parts+0x80>
   10184:	00bfff84 	movi	r2,-2
   10188:	117faf36 	bltu	r2,r5,10048 <_fpadd_parts+0x1a8>
   1018c:	003f9806 	br	fff0 <_fpadd_parts+0x150>
   10190:	0005883a 	mov	r2,zero
   10194:	1189c83a 	sub	r4,r2,r6
   10198:	1105803a 	cmpltu	r2,r2,r4
   1019c:	01cbc83a 	sub	r5,zero,r7
   101a0:	2885c83a 	sub	r2,r5,r2
   101a4:	01800044 	movi	r6,1
   101a8:	a1800115 	stw	r6,4(r20)
   101ac:	a5c00215 	stw	r23,8(r20)
   101b0:	a1000315 	stw	r4,12(r20)
   101b4:	a0800415 	stw	r2,16(r20)
   101b8:	003f8206 	br	ffc4 <_fpadd_parts+0x124>
   101bc:	203f7226 	beq	r4,zero,ff88 <_fpadd_parts+0xe8>
   101c0:	35bff804 	addi	r22,r6,-32
   101c4:	b9af883a 	add	r23,r23,r6
   101c8:	b0003116 	blt	r22,zero,10290 <_fpadd_parts+0x3f0>
   101cc:	959ad83a 	srl	r13,r18,r22
   101d0:	001d883a 	mov	r14,zero
   101d4:	000f883a 	mov	r7,zero
   101d8:	01000044 	movi	r4,1
   101dc:	0011883a 	mov	r8,zero
   101e0:	b0002516 	blt	r22,zero,10278 <_fpadd_parts+0x3d8>
   101e4:	2594983a 	sll	r10,r4,r22
   101e8:	0013883a 	mov	r9,zero
   101ec:	00bfffc4 	movi	r2,-1
   101f0:	4889883a 	add	r4,r9,r2
   101f4:	508b883a 	add	r5,r10,r2
   101f8:	224d803a 	cmpltu	r6,r4,r9
   101fc:	314b883a 	add	r5,r6,r5
   10200:	8904703a 	and	r2,r17,r4
   10204:	9146703a 	and	r3,r18,r5
   10208:	10c4b03a 	or	r2,r2,r3
   1020c:	10000226 	beq	r2,zero,10218 <_fpadd_parts+0x378>
   10210:	01c00044 	movi	r7,1
   10214:	0011883a 	mov	r8,zero
   10218:	69e2b03a 	or	r17,r13,r7
   1021c:	7224b03a 	or	r18,r14,r8
   10220:	003f5906 	br	ff88 <_fpadd_parts+0xe8>
   10224:	8407883a 	add	r3,r16,r16
   10228:	008007c4 	movi	r2,31
   1022c:	1185c83a 	sub	r2,r2,r6
   10230:	1886983a 	sll	r3,r3,r2
   10234:	7996d83a 	srl	r11,r15,r6
   10238:	8198d83a 	srl	r12,r16,r6
   1023c:	1ad6b03a 	or	r11,r3,r11
   10240:	003f3e06 	br	ff3c <_fpadd_parts+0x9c>
   10244:	2006d07a 	srli	r3,r4,1
   10248:	008007c4 	movi	r2,31
   1024c:	1185c83a 	sub	r2,r2,r6
   10250:	1890d83a 	srl	r8,r3,r2
   10254:	218e983a 	sll	r7,r4,r6
   10258:	003f3e06 	br	ff54 <_fpadd_parts+0xb4>
   1025c:	113f821e 	bne	r2,r4,10068 <_fpadd_parts+0x1c8>
   10260:	28c00117 	ldw	r3,4(r5)
   10264:	98800117 	ldw	r2,4(r19)
   10268:	10ff7f26 	beq	r2,r3,10068 <_fpadd_parts+0x1c8>
   1026c:	04c00074 	movhi	r19,1
   10270:	9cd3e304 	addi	r19,r19,20364
   10274:	003f7c06 	br	10068 <_fpadd_parts+0x1c8>
   10278:	2006d07a 	srli	r3,r4,1
   1027c:	008007c4 	movi	r2,31
   10280:	1185c83a 	sub	r2,r2,r6
   10284:	1894d83a 	srl	r10,r3,r2
   10288:	2192983a 	sll	r9,r4,r6
   1028c:	003fd706 	br	101ec <_fpadd_parts+0x34c>
   10290:	9487883a 	add	r3,r18,r18
   10294:	008007c4 	movi	r2,31
   10298:	1185c83a 	sub	r2,r2,r6
   1029c:	1886983a 	sll	r3,r3,r2
   102a0:	899ad83a 	srl	r13,r17,r6
   102a4:	919cd83a 	srl	r14,r18,r6
   102a8:	1b5ab03a 	or	r13,r3,r13
   102ac:	003fc906 	br	101d4 <_fpadd_parts+0x334>

000102b0 <__subdf3>:
   102b0:	deffea04 	addi	sp,sp,-88
   102b4:	dcc01415 	stw	r19,80(sp)
   102b8:	dcc00404 	addi	r19,sp,16
   102bc:	2011883a 	mov	r8,r4
   102c0:	2813883a 	mov	r9,r5
   102c4:	dc401315 	stw	r17,76(sp)
   102c8:	d809883a 	mov	r4,sp
   102cc:	980b883a 	mov	r5,r19
   102d0:	dc400904 	addi	r17,sp,36
   102d4:	dfc01515 	stw	ra,84(sp)
   102d8:	da400115 	stw	r9,4(sp)
   102dc:	d9c00315 	stw	r7,12(sp)
   102e0:	da000015 	stw	r8,0(sp)
   102e4:	d9800215 	stw	r6,8(sp)
   102e8:	00115f80 	call	115f8 <__unpack_d>
   102ec:	d9000204 	addi	r4,sp,8
   102f0:	880b883a 	mov	r5,r17
   102f4:	00115f80 	call	115f8 <__unpack_d>
   102f8:	d8800a17 	ldw	r2,40(sp)
   102fc:	880b883a 	mov	r5,r17
   10300:	9809883a 	mov	r4,r19
   10304:	d9800e04 	addi	r6,sp,56
   10308:	1080005c 	xori	r2,r2,1
   1030c:	d8800a15 	stw	r2,40(sp)
   10310:	000fea00 	call	fea0 <_fpadd_parts>
   10314:	1009883a 	mov	r4,r2
   10318:	00112e40 	call	112e4 <__pack_d>
   1031c:	dfc01517 	ldw	ra,84(sp)
   10320:	dcc01417 	ldw	r19,80(sp)
   10324:	dc401317 	ldw	r17,76(sp)
   10328:	dec01604 	addi	sp,sp,88
   1032c:	f800283a 	ret

00010330 <__adddf3>:
   10330:	deffea04 	addi	sp,sp,-88
   10334:	dcc01415 	stw	r19,80(sp)
   10338:	dcc00404 	addi	r19,sp,16
   1033c:	2011883a 	mov	r8,r4
   10340:	2813883a 	mov	r9,r5
   10344:	dc401315 	stw	r17,76(sp)
   10348:	d809883a 	mov	r4,sp
   1034c:	980b883a 	mov	r5,r19
   10350:	dc400904 	addi	r17,sp,36
   10354:	dfc01515 	stw	ra,84(sp)
   10358:	da400115 	stw	r9,4(sp)
   1035c:	d9c00315 	stw	r7,12(sp)
   10360:	da000015 	stw	r8,0(sp)
   10364:	d9800215 	stw	r6,8(sp)
   10368:	00115f80 	call	115f8 <__unpack_d>
   1036c:	d9000204 	addi	r4,sp,8
   10370:	880b883a 	mov	r5,r17
   10374:	00115f80 	call	115f8 <__unpack_d>
   10378:	d9800e04 	addi	r6,sp,56
   1037c:	9809883a 	mov	r4,r19
   10380:	880b883a 	mov	r5,r17
   10384:	000fea00 	call	fea0 <_fpadd_parts>
   10388:	1009883a 	mov	r4,r2
   1038c:	00112e40 	call	112e4 <__pack_d>
   10390:	dfc01517 	ldw	ra,84(sp)
   10394:	dcc01417 	ldw	r19,80(sp)
   10398:	dc401317 	ldw	r17,76(sp)
   1039c:	dec01604 	addi	sp,sp,88
   103a0:	f800283a 	ret

000103a4 <__muldf3>:
   103a4:	deffe004 	addi	sp,sp,-128
   103a8:	dc401815 	stw	r17,96(sp)
   103ac:	dc400404 	addi	r17,sp,16
   103b0:	2011883a 	mov	r8,r4
   103b4:	2813883a 	mov	r9,r5
   103b8:	dc001715 	stw	r16,92(sp)
   103bc:	d809883a 	mov	r4,sp
   103c0:	880b883a 	mov	r5,r17
   103c4:	dc000904 	addi	r16,sp,36
   103c8:	dfc01f15 	stw	ra,124(sp)
   103cc:	da400115 	stw	r9,4(sp)
   103d0:	d9c00315 	stw	r7,12(sp)
   103d4:	da000015 	stw	r8,0(sp)
   103d8:	d9800215 	stw	r6,8(sp)
   103dc:	ddc01e15 	stw	r23,120(sp)
   103e0:	dd801d15 	stw	r22,116(sp)
   103e4:	dd401c15 	stw	r21,112(sp)
   103e8:	dd001b15 	stw	r20,108(sp)
   103ec:	dcc01a15 	stw	r19,104(sp)
   103f0:	dc801915 	stw	r18,100(sp)
   103f4:	00115f80 	call	115f8 <__unpack_d>
   103f8:	d9000204 	addi	r4,sp,8
   103fc:	800b883a 	mov	r5,r16
   10400:	00115f80 	call	115f8 <__unpack_d>
   10404:	d9000417 	ldw	r4,16(sp)
   10408:	00800044 	movi	r2,1
   1040c:	1100102e 	bgeu	r2,r4,10450 <__muldf3+0xac>
   10410:	d8c00917 	ldw	r3,36(sp)
   10414:	10c0062e 	bgeu	r2,r3,10430 <__muldf3+0x8c>
   10418:	00800104 	movi	r2,4
   1041c:	20800a26 	beq	r4,r2,10448 <__muldf3+0xa4>
   10420:	1880cc26 	beq	r3,r2,10754 <__muldf3+0x3b0>
   10424:	00800084 	movi	r2,2
   10428:	20800926 	beq	r4,r2,10450 <__muldf3+0xac>
   1042c:	1880191e 	bne	r3,r2,10494 <__muldf3+0xf0>
   10430:	d8c00a17 	ldw	r3,40(sp)
   10434:	d8800517 	ldw	r2,20(sp)
   10438:	8009883a 	mov	r4,r16
   1043c:	10c4c03a 	cmpne	r2,r2,r3
   10440:	d8800a15 	stw	r2,40(sp)
   10444:	00000706 	br	10464 <__muldf3+0xc0>
   10448:	00800084 	movi	r2,2
   1044c:	1880c326 	beq	r3,r2,1075c <__muldf3+0x3b8>
   10450:	d8800517 	ldw	r2,20(sp)
   10454:	d8c00a17 	ldw	r3,40(sp)
   10458:	8809883a 	mov	r4,r17
   1045c:	10c4c03a 	cmpne	r2,r2,r3
   10460:	d8800515 	stw	r2,20(sp)
   10464:	00112e40 	call	112e4 <__pack_d>
   10468:	dfc01f17 	ldw	ra,124(sp)
   1046c:	ddc01e17 	ldw	r23,120(sp)
   10470:	dd801d17 	ldw	r22,116(sp)
   10474:	dd401c17 	ldw	r21,112(sp)
   10478:	dd001b17 	ldw	r20,108(sp)
   1047c:	dcc01a17 	ldw	r19,104(sp)
   10480:	dc801917 	ldw	r18,100(sp)
   10484:	dc401817 	ldw	r17,96(sp)
   10488:	dc001717 	ldw	r16,92(sp)
   1048c:	dec02004 	addi	sp,sp,128
   10490:	f800283a 	ret
   10494:	dd800717 	ldw	r22,28(sp)
   10498:	dc800c17 	ldw	r18,48(sp)
   1049c:	002b883a 	mov	r21,zero
   104a0:	0023883a 	mov	r17,zero
   104a4:	a80b883a 	mov	r5,r21
   104a8:	b00d883a 	mov	r6,r22
   104ac:	880f883a 	mov	r7,r17
   104b0:	ddc00817 	ldw	r23,32(sp)
   104b4:	dcc00d17 	ldw	r19,52(sp)
   104b8:	9009883a 	mov	r4,r18
   104bc:	000f0700 	call	f070 <__muldi3>
   104c0:	001b883a 	mov	r13,zero
   104c4:	680f883a 	mov	r7,r13
   104c8:	b009883a 	mov	r4,r22
   104cc:	000b883a 	mov	r5,zero
   104d0:	980d883a 	mov	r6,r19
   104d4:	b82d883a 	mov	r22,r23
   104d8:	002f883a 	mov	r23,zero
   104dc:	db401615 	stw	r13,88(sp)
   104e0:	d8801315 	stw	r2,76(sp)
   104e4:	d8c01415 	stw	r3,80(sp)
   104e8:	dcc01515 	stw	r19,84(sp)
   104ec:	000f0700 	call	f070 <__muldi3>
   104f0:	b00d883a 	mov	r6,r22
   104f4:	000b883a 	mov	r5,zero
   104f8:	9009883a 	mov	r4,r18
   104fc:	b80f883a 	mov	r7,r23
   10500:	1021883a 	mov	r16,r2
   10504:	1823883a 	mov	r17,r3
   10508:	000f0700 	call	f070 <__muldi3>
   1050c:	8085883a 	add	r2,r16,r2
   10510:	140d803a 	cmpltu	r6,r2,r16
   10514:	88c7883a 	add	r3,r17,r3
   10518:	30cd883a 	add	r6,r6,r3
   1051c:	1029883a 	mov	r20,r2
   10520:	302b883a 	mov	r21,r6
   10524:	da801317 	ldw	r10,76(sp)
   10528:	dac01417 	ldw	r11,80(sp)
   1052c:	db001517 	ldw	r12,84(sp)
   10530:	db401617 	ldw	r13,88(sp)
   10534:	3440612e 	bgeu	r6,r17,106bc <__muldf3+0x318>
   10538:	0009883a 	mov	r4,zero
   1053c:	5105883a 	add	r2,r10,r4
   10540:	128d803a 	cmpltu	r6,r2,r10
   10544:	5d07883a 	add	r3,r11,r20
   10548:	30cd883a 	add	r6,r6,r3
   1054c:	0021883a 	mov	r16,zero
   10550:	04400044 	movi	r17,1
   10554:	1025883a 	mov	r18,r2
   10558:	3027883a 	mov	r19,r6
   1055c:	32c06236 	bltu	r6,r11,106e8 <__muldf3+0x344>
   10560:	59807a26 	beq	r11,r6,1074c <__muldf3+0x3a8>
   10564:	680b883a 	mov	r5,r13
   10568:	b80f883a 	mov	r7,r23
   1056c:	6009883a 	mov	r4,r12
   10570:	b00d883a 	mov	r6,r22
   10574:	000f0700 	call	f070 <__muldi3>
   10578:	1009883a 	mov	r4,r2
   1057c:	000f883a 	mov	r7,zero
   10580:	1545883a 	add	r2,r2,r21
   10584:	1111803a 	cmpltu	r8,r2,r4
   10588:	19c7883a 	add	r3,r3,r7
   1058c:	40c7883a 	add	r3,r8,r3
   10590:	88cb883a 	add	r5,r17,r3
   10594:	d8c00617 	ldw	r3,24(sp)
   10598:	8089883a 	add	r4,r16,r2
   1059c:	d8800b17 	ldw	r2,44(sp)
   105a0:	18c00104 	addi	r3,r3,4
   105a4:	240d803a 	cmpltu	r6,r4,r16
   105a8:	10c7883a 	add	r3,r2,r3
   105ac:	2013883a 	mov	r9,r4
   105b0:	d8800a17 	ldw	r2,40(sp)
   105b4:	d9000517 	ldw	r4,20(sp)
   105b8:	314d883a 	add	r6,r6,r5
   105bc:	3015883a 	mov	r10,r6
   105c0:	2088c03a 	cmpne	r4,r4,r2
   105c4:	00880034 	movhi	r2,8192
   105c8:	10bfffc4 	addi	r2,r2,-1
   105cc:	d9000f15 	stw	r4,60(sp)
   105d0:	d8c01015 	stw	r3,64(sp)
   105d4:	1180162e 	bgeu	r2,r6,10630 <__muldf3+0x28c>
   105d8:	1811883a 	mov	r8,r3
   105dc:	101f883a 	mov	r15,r2
   105e0:	980497fa 	slli	r2,r19,31
   105e4:	9016d07a 	srli	r11,r18,1
   105e8:	500697fa 	slli	r3,r10,31
   105ec:	480cd07a 	srli	r6,r9,1
   105f0:	500ed07a 	srli	r7,r10,1
   105f4:	12d6b03a 	or	r11,r2,r11
   105f8:	00800044 	movi	r2,1
   105fc:	198cb03a 	or	r6,r3,r6
   10600:	4888703a 	and	r4,r9,r2
   10604:	9818d07a 	srli	r12,r19,1
   10608:	001b883a 	mov	r13,zero
   1060c:	03a00034 	movhi	r14,32768
   10610:	3013883a 	mov	r9,r6
   10614:	3815883a 	mov	r10,r7
   10618:	4091883a 	add	r8,r8,r2
   1061c:	20000226 	beq	r4,zero,10628 <__muldf3+0x284>
   10620:	5b64b03a 	or	r18,r11,r13
   10624:	63a6b03a 	or	r19,r12,r14
   10628:	7abfed36 	bltu	r15,r10,105e0 <__muldf3+0x23c>
   1062c:	da001015 	stw	r8,64(sp)
   10630:	00840034 	movhi	r2,4096
   10634:	10bfffc4 	addi	r2,r2,-1
   10638:	12801436 	bltu	r2,r10,1068c <__muldf3+0x2e8>
   1063c:	da001017 	ldw	r8,64(sp)
   10640:	101f883a 	mov	r15,r2
   10644:	4a45883a 	add	r2,r9,r9
   10648:	124d803a 	cmpltu	r6,r2,r9
   1064c:	5287883a 	add	r3,r10,r10
   10650:	9497883a 	add	r11,r18,r18
   10654:	5c8f803a 	cmpltu	r7,r11,r18
   10658:	9cd9883a 	add	r12,r19,r19
   1065c:	01000044 	movi	r4,1
   10660:	30cd883a 	add	r6,r6,r3
   10664:	3b0f883a 	add	r7,r7,r12
   10668:	423fffc4 	addi	r8,r8,-1
   1066c:	1013883a 	mov	r9,r2
   10670:	3015883a 	mov	r10,r6
   10674:	111ab03a 	or	r13,r2,r4
   10678:	98003016 	blt	r19,zero,1073c <__muldf3+0x398>
   1067c:	5825883a 	mov	r18,r11
   10680:	3827883a 	mov	r19,r7
   10684:	7abfef2e 	bgeu	r15,r10,10644 <__muldf3+0x2a0>
   10688:	da001015 	stw	r8,64(sp)
   1068c:	00803fc4 	movi	r2,255
   10690:	488e703a 	and	r7,r9,r2
   10694:	00802004 	movi	r2,128
   10698:	0007883a 	mov	r3,zero
   1069c:	0011883a 	mov	r8,zero
   106a0:	38801826 	beq	r7,r2,10704 <__muldf3+0x360>
   106a4:	008000c4 	movi	r2,3
   106a8:	d9000e04 	addi	r4,sp,56
   106ac:	da801215 	stw	r10,72(sp)
   106b0:	d8800e15 	stw	r2,56(sp)
   106b4:	da401115 	stw	r9,68(sp)
   106b8:	003f6a06 	br	10464 <__muldf3+0xc0>
   106bc:	89802126 	beq	r17,r6,10744 <__muldf3+0x3a0>
   106c0:	0009883a 	mov	r4,zero
   106c4:	5105883a 	add	r2,r10,r4
   106c8:	128d803a 	cmpltu	r6,r2,r10
   106cc:	5d07883a 	add	r3,r11,r20
   106d0:	30cd883a 	add	r6,r6,r3
   106d4:	0021883a 	mov	r16,zero
   106d8:	0023883a 	mov	r17,zero
   106dc:	1025883a 	mov	r18,r2
   106e0:	3027883a 	mov	r19,r6
   106e4:	32ff9e2e 	bgeu	r6,r11,10560 <__muldf3+0x1bc>
   106e8:	00800044 	movi	r2,1
   106ec:	8089883a 	add	r4,r16,r2
   106f0:	240d803a 	cmpltu	r6,r4,r16
   106f4:	344d883a 	add	r6,r6,r17
   106f8:	2021883a 	mov	r16,r4
   106fc:	3023883a 	mov	r17,r6
   10700:	003f9806 	br	10564 <__muldf3+0x1c0>
   10704:	403fe71e 	bne	r8,zero,106a4 <__muldf3+0x300>
   10708:	01004004 	movi	r4,256
   1070c:	4904703a 	and	r2,r9,r4
   10710:	10c4b03a 	or	r2,r2,r3
   10714:	103fe31e 	bne	r2,zero,106a4 <__muldf3+0x300>
   10718:	94c4b03a 	or	r2,r18,r19
   1071c:	103fe126 	beq	r2,zero,106a4 <__muldf3+0x300>
   10720:	49c5883a 	add	r2,r9,r7
   10724:	1251803a 	cmpltu	r8,r2,r9
   10728:	4291883a 	add	r8,r8,r10
   1072c:	013fc004 	movi	r4,-256
   10730:	1112703a 	and	r9,r2,r4
   10734:	4015883a 	mov	r10,r8
   10738:	003fda06 	br	106a4 <__muldf3+0x300>
   1073c:	6813883a 	mov	r9,r13
   10740:	003fce06 	br	1067c <__muldf3+0x2d8>
   10744:	143f7c36 	bltu	r2,r16,10538 <__muldf3+0x194>
   10748:	003fdd06 	br	106c0 <__muldf3+0x31c>
   1074c:	12bf852e 	bgeu	r2,r10,10564 <__muldf3+0x1c0>
   10750:	003fe506 	br	106e8 <__muldf3+0x344>
   10754:	00800084 	movi	r2,2
   10758:	20bf351e 	bne	r4,r2,10430 <__muldf3+0x8c>
   1075c:	01000074 	movhi	r4,1
   10760:	2113e304 	addi	r4,r4,20364
   10764:	003f3f06 	br	10464 <__muldf3+0xc0>

00010768 <__divdf3>:
   10768:	deffed04 	addi	sp,sp,-76
   1076c:	dcc01115 	stw	r19,68(sp)
   10770:	dcc00404 	addi	r19,sp,16
   10774:	2011883a 	mov	r8,r4
   10778:	2813883a 	mov	r9,r5
   1077c:	dc000e15 	stw	r16,56(sp)
   10780:	d809883a 	mov	r4,sp
   10784:	980b883a 	mov	r5,r19
   10788:	dc000904 	addi	r16,sp,36
   1078c:	dfc01215 	stw	ra,72(sp)
   10790:	da400115 	stw	r9,4(sp)
   10794:	d9c00315 	stw	r7,12(sp)
   10798:	da000015 	stw	r8,0(sp)
   1079c:	d9800215 	stw	r6,8(sp)
   107a0:	dc801015 	stw	r18,64(sp)
   107a4:	dc400f15 	stw	r17,60(sp)
   107a8:	00115f80 	call	115f8 <__unpack_d>
   107ac:	d9000204 	addi	r4,sp,8
   107b0:	800b883a 	mov	r5,r16
   107b4:	00115f80 	call	115f8 <__unpack_d>
   107b8:	d9000417 	ldw	r4,16(sp)
   107bc:	00800044 	movi	r2,1
   107c0:	11000b2e 	bgeu	r2,r4,107f0 <__divdf3+0x88>
   107c4:	d9400917 	ldw	r5,36(sp)
   107c8:	1140762e 	bgeu	r2,r5,109a4 <__divdf3+0x23c>
   107cc:	d8800517 	ldw	r2,20(sp)
   107d0:	d8c00a17 	ldw	r3,40(sp)
   107d4:	01800104 	movi	r6,4
   107d8:	10c4f03a 	xor	r2,r2,r3
   107dc:	d8800515 	stw	r2,20(sp)
   107e0:	21800226 	beq	r4,r6,107ec <__divdf3+0x84>
   107e4:	00800084 	movi	r2,2
   107e8:	2080141e 	bne	r4,r2,1083c <__divdf3+0xd4>
   107ec:	29000926 	beq	r5,r4,10814 <__divdf3+0xac>
   107f0:	9809883a 	mov	r4,r19
   107f4:	00112e40 	call	112e4 <__pack_d>
   107f8:	dfc01217 	ldw	ra,72(sp)
   107fc:	dcc01117 	ldw	r19,68(sp)
   10800:	dc801017 	ldw	r18,64(sp)
   10804:	dc400f17 	ldw	r17,60(sp)
   10808:	dc000e17 	ldw	r16,56(sp)
   1080c:	dec01304 	addi	sp,sp,76
   10810:	f800283a 	ret
   10814:	01000074 	movhi	r4,1
   10818:	2113e304 	addi	r4,r4,20364
   1081c:	00112e40 	call	112e4 <__pack_d>
   10820:	dfc01217 	ldw	ra,72(sp)
   10824:	dcc01117 	ldw	r19,68(sp)
   10828:	dc801017 	ldw	r18,64(sp)
   1082c:	dc400f17 	ldw	r17,60(sp)
   10830:	dc000e17 	ldw	r16,56(sp)
   10834:	dec01304 	addi	sp,sp,76
   10838:	f800283a 	ret
   1083c:	29805b26 	beq	r5,r6,109ac <__divdf3+0x244>
   10840:	28802d26 	beq	r5,r2,108f8 <__divdf3+0x190>
   10844:	d8c00617 	ldw	r3,24(sp)
   10848:	d8800b17 	ldw	r2,44(sp)
   1084c:	d9c00817 	ldw	r7,32(sp)
   10850:	dc400d17 	ldw	r17,52(sp)
   10854:	188bc83a 	sub	r5,r3,r2
   10858:	d9800717 	ldw	r6,28(sp)
   1085c:	dc000c17 	ldw	r16,48(sp)
   10860:	d9400615 	stw	r5,24(sp)
   10864:	3c403836 	bltu	r7,r17,10948 <__divdf3+0x1e0>
   10868:	89c03626 	beq	r17,r7,10944 <__divdf3+0x1dc>
   1086c:	0015883a 	mov	r10,zero
   10870:	001d883a 	mov	r14,zero
   10874:	02c40034 	movhi	r11,4096
   10878:	001f883a 	mov	r15,zero
   1087c:	003f883a 	mov	ra,zero
   10880:	04800f44 	movi	r18,61
   10884:	00000f06 	br	108c4 <__divdf3+0x15c>
   10888:	601d883a 	mov	r14,r12
   1088c:	681f883a 	mov	r15,r13
   10890:	400d883a 	mov	r6,r8
   10894:	100f883a 	mov	r7,r2
   10898:	3191883a 	add	r8,r6,r6
   1089c:	5808d07a 	srli	r4,r11,1
   108a0:	4185803a 	cmpltu	r2,r8,r6
   108a4:	39d3883a 	add	r9,r7,r7
   108a8:	28c6b03a 	or	r3,r5,r3
   108ac:	1245883a 	add	r2,r2,r9
   108b0:	1815883a 	mov	r10,r3
   108b4:	2017883a 	mov	r11,r4
   108b8:	400d883a 	mov	r6,r8
   108bc:	100f883a 	mov	r7,r2
   108c0:	fc801726 	beq	ra,r18,10920 <__divdf3+0x1b8>
   108c4:	580a97fa 	slli	r5,r11,31
   108c8:	5006d07a 	srli	r3,r10,1
   108cc:	ffc00044 	addi	ra,ra,1
   108d0:	3c7ff136 	bltu	r7,r17,10898 <__divdf3+0x130>
   108d4:	3411c83a 	sub	r8,r6,r16
   108d8:	3205803a 	cmpltu	r2,r6,r8
   108dc:	3c53c83a 	sub	r9,r7,r17
   108e0:	7298b03a 	or	r12,r14,r10
   108e4:	7adab03a 	or	r13,r15,r11
   108e8:	4885c83a 	sub	r2,r9,r2
   108ec:	89ffe61e 	bne	r17,r7,10888 <__divdf3+0x120>
   108f0:	343fe936 	bltu	r6,r16,10898 <__divdf3+0x130>
   108f4:	003fe406 	br	10888 <__divdf3+0x120>
   108f8:	9809883a 	mov	r4,r19
   108fc:	d9800415 	stw	r6,16(sp)
   10900:	00112e40 	call	112e4 <__pack_d>
   10904:	dfc01217 	ldw	ra,72(sp)
   10908:	dcc01117 	ldw	r19,68(sp)
   1090c:	dc801017 	ldw	r18,64(sp)
   10910:	dc400f17 	ldw	r17,60(sp)
   10914:	dc000e17 	ldw	r16,56(sp)
   10918:	dec01304 	addi	sp,sp,76
   1091c:	f800283a 	ret
   10920:	00803fc4 	movi	r2,255
   10924:	7090703a 	and	r8,r14,r2
   10928:	00802004 	movi	r2,128
   1092c:	0007883a 	mov	r3,zero
   10930:	0013883a 	mov	r9,zero
   10934:	40800d26 	beq	r8,r2,1096c <__divdf3+0x204>
   10938:	dbc00815 	stw	r15,32(sp)
   1093c:	db800715 	stw	r14,28(sp)
   10940:	003fab06 	br	107f0 <__divdf3+0x88>
   10944:	343fc92e 	bgeu	r6,r16,1086c <__divdf3+0x104>
   10948:	3185883a 	add	r2,r6,r6
   1094c:	1189803a 	cmpltu	r4,r2,r6
   10950:	39c7883a 	add	r3,r7,r7
   10954:	20c9883a 	add	r4,r4,r3
   10958:	297fffc4 	addi	r5,r5,-1
   1095c:	100d883a 	mov	r6,r2
   10960:	200f883a 	mov	r7,r4
   10964:	d9400615 	stw	r5,24(sp)
   10968:	003fc006 	br	1086c <__divdf3+0x104>
   1096c:	483ff21e 	bne	r9,zero,10938 <__divdf3+0x1d0>
   10970:	01004004 	movi	r4,256
   10974:	7104703a 	and	r2,r14,r4
   10978:	10c4b03a 	or	r2,r2,r3
   1097c:	103fee1e 	bne	r2,zero,10938 <__divdf3+0x1d0>
   10980:	31c4b03a 	or	r2,r6,r7
   10984:	103fec26 	beq	r2,zero,10938 <__divdf3+0x1d0>
   10988:	7205883a 	add	r2,r14,r8
   1098c:	1391803a 	cmpltu	r8,r2,r14
   10990:	43d1883a 	add	r8,r8,r15
   10994:	013fc004 	movi	r4,-256
   10998:	111c703a 	and	r14,r2,r4
   1099c:	401f883a 	mov	r15,r8
   109a0:	003fe506 	br	10938 <__divdf3+0x1d0>
   109a4:	8009883a 	mov	r4,r16
   109a8:	003f9206 	br	107f4 <__divdf3+0x8c>
   109ac:	9809883a 	mov	r4,r19
   109b0:	d8000715 	stw	zero,28(sp)
   109b4:	d8000815 	stw	zero,32(sp)
   109b8:	d8000615 	stw	zero,24(sp)
   109bc:	003f8d06 	br	107f4 <__divdf3+0x8c>

000109c0 <__eqdf2>:
   109c0:	deffef04 	addi	sp,sp,-68
   109c4:	dc400f15 	stw	r17,60(sp)
   109c8:	dc400404 	addi	r17,sp,16
   109cc:	2005883a 	mov	r2,r4
   109d0:	2807883a 	mov	r3,r5
   109d4:	dc000e15 	stw	r16,56(sp)
   109d8:	d809883a 	mov	r4,sp
   109dc:	880b883a 	mov	r5,r17
   109e0:	dc000904 	addi	r16,sp,36
   109e4:	d8c00115 	stw	r3,4(sp)
   109e8:	d8800015 	stw	r2,0(sp)
   109ec:	d9800215 	stw	r6,8(sp)
   109f0:	dfc01015 	stw	ra,64(sp)
   109f4:	d9c00315 	stw	r7,12(sp)
   109f8:	00115f80 	call	115f8 <__unpack_d>
   109fc:	d9000204 	addi	r4,sp,8
   10a00:	800b883a 	mov	r5,r16
   10a04:	00115f80 	call	115f8 <__unpack_d>
   10a08:	d8800417 	ldw	r2,16(sp)
   10a0c:	00c00044 	movi	r3,1
   10a10:	180d883a 	mov	r6,r3
   10a14:	1880062e 	bgeu	r3,r2,10a30 <__eqdf2+0x70>
   10a18:	d8800917 	ldw	r2,36(sp)
   10a1c:	8809883a 	mov	r4,r17
   10a20:	800b883a 	mov	r5,r16
   10a24:	1880022e 	bgeu	r3,r2,10a30 <__eqdf2+0x70>
   10a28:	00117300 	call	11730 <__fpcmp_parts_d>
   10a2c:	100d883a 	mov	r6,r2
   10a30:	3005883a 	mov	r2,r6
   10a34:	dfc01017 	ldw	ra,64(sp)
   10a38:	dc400f17 	ldw	r17,60(sp)
   10a3c:	dc000e17 	ldw	r16,56(sp)
   10a40:	dec01104 	addi	sp,sp,68
   10a44:	f800283a 	ret

00010a48 <__nedf2>:
   10a48:	deffef04 	addi	sp,sp,-68
   10a4c:	dc400f15 	stw	r17,60(sp)
   10a50:	dc400404 	addi	r17,sp,16
   10a54:	2005883a 	mov	r2,r4
   10a58:	2807883a 	mov	r3,r5
   10a5c:	dc000e15 	stw	r16,56(sp)
   10a60:	d809883a 	mov	r4,sp
   10a64:	880b883a 	mov	r5,r17
   10a68:	dc000904 	addi	r16,sp,36
   10a6c:	d8c00115 	stw	r3,4(sp)
   10a70:	d8800015 	stw	r2,0(sp)
   10a74:	d9800215 	stw	r6,8(sp)
   10a78:	dfc01015 	stw	ra,64(sp)
   10a7c:	d9c00315 	stw	r7,12(sp)
   10a80:	00115f80 	call	115f8 <__unpack_d>
   10a84:	d9000204 	addi	r4,sp,8
   10a88:	800b883a 	mov	r5,r16
   10a8c:	00115f80 	call	115f8 <__unpack_d>
   10a90:	d8800417 	ldw	r2,16(sp)
   10a94:	00c00044 	movi	r3,1
   10a98:	180d883a 	mov	r6,r3
   10a9c:	1880062e 	bgeu	r3,r2,10ab8 <__nedf2+0x70>
   10aa0:	d8800917 	ldw	r2,36(sp)
   10aa4:	8809883a 	mov	r4,r17
   10aa8:	800b883a 	mov	r5,r16
   10aac:	1880022e 	bgeu	r3,r2,10ab8 <__nedf2+0x70>
   10ab0:	00117300 	call	11730 <__fpcmp_parts_d>
   10ab4:	100d883a 	mov	r6,r2
   10ab8:	3005883a 	mov	r2,r6
   10abc:	dfc01017 	ldw	ra,64(sp)
   10ac0:	dc400f17 	ldw	r17,60(sp)
   10ac4:	dc000e17 	ldw	r16,56(sp)
   10ac8:	dec01104 	addi	sp,sp,68
   10acc:	f800283a 	ret

00010ad0 <__gtdf2>:
   10ad0:	deffef04 	addi	sp,sp,-68
   10ad4:	dc400f15 	stw	r17,60(sp)
   10ad8:	dc400404 	addi	r17,sp,16
   10adc:	2005883a 	mov	r2,r4
   10ae0:	2807883a 	mov	r3,r5
   10ae4:	dc000e15 	stw	r16,56(sp)
   10ae8:	d809883a 	mov	r4,sp
   10aec:	880b883a 	mov	r5,r17
   10af0:	dc000904 	addi	r16,sp,36
   10af4:	d8c00115 	stw	r3,4(sp)
   10af8:	d8800015 	stw	r2,0(sp)
   10afc:	d9800215 	stw	r6,8(sp)
   10b00:	dfc01015 	stw	ra,64(sp)
   10b04:	d9c00315 	stw	r7,12(sp)
   10b08:	00115f80 	call	115f8 <__unpack_d>
   10b0c:	d9000204 	addi	r4,sp,8
   10b10:	800b883a 	mov	r5,r16
   10b14:	00115f80 	call	115f8 <__unpack_d>
   10b18:	d8800417 	ldw	r2,16(sp)
   10b1c:	00c00044 	movi	r3,1
   10b20:	01bfffc4 	movi	r6,-1
   10b24:	1880062e 	bgeu	r3,r2,10b40 <__gtdf2+0x70>
   10b28:	d8800917 	ldw	r2,36(sp)
   10b2c:	8809883a 	mov	r4,r17
   10b30:	800b883a 	mov	r5,r16
   10b34:	1880022e 	bgeu	r3,r2,10b40 <__gtdf2+0x70>
   10b38:	00117300 	call	11730 <__fpcmp_parts_d>
   10b3c:	100d883a 	mov	r6,r2
   10b40:	3005883a 	mov	r2,r6
   10b44:	dfc01017 	ldw	ra,64(sp)
   10b48:	dc400f17 	ldw	r17,60(sp)
   10b4c:	dc000e17 	ldw	r16,56(sp)
   10b50:	dec01104 	addi	sp,sp,68
   10b54:	f800283a 	ret

00010b58 <__gedf2>:
   10b58:	deffef04 	addi	sp,sp,-68
   10b5c:	dc400f15 	stw	r17,60(sp)
   10b60:	dc400404 	addi	r17,sp,16
   10b64:	2005883a 	mov	r2,r4
   10b68:	2807883a 	mov	r3,r5
   10b6c:	dc000e15 	stw	r16,56(sp)
   10b70:	d809883a 	mov	r4,sp
   10b74:	880b883a 	mov	r5,r17
   10b78:	dc000904 	addi	r16,sp,36
   10b7c:	d8c00115 	stw	r3,4(sp)
   10b80:	d8800015 	stw	r2,0(sp)
   10b84:	d9800215 	stw	r6,8(sp)
   10b88:	dfc01015 	stw	ra,64(sp)
   10b8c:	d9c00315 	stw	r7,12(sp)
   10b90:	00115f80 	call	115f8 <__unpack_d>
   10b94:	d9000204 	addi	r4,sp,8
   10b98:	800b883a 	mov	r5,r16
   10b9c:	00115f80 	call	115f8 <__unpack_d>
   10ba0:	d8800417 	ldw	r2,16(sp)
   10ba4:	00c00044 	movi	r3,1
   10ba8:	01bfffc4 	movi	r6,-1
   10bac:	1880062e 	bgeu	r3,r2,10bc8 <__gedf2+0x70>
   10bb0:	d8800917 	ldw	r2,36(sp)
   10bb4:	8809883a 	mov	r4,r17
   10bb8:	800b883a 	mov	r5,r16
   10bbc:	1880022e 	bgeu	r3,r2,10bc8 <__gedf2+0x70>
   10bc0:	00117300 	call	11730 <__fpcmp_parts_d>
   10bc4:	100d883a 	mov	r6,r2
   10bc8:	3005883a 	mov	r2,r6
   10bcc:	dfc01017 	ldw	ra,64(sp)
   10bd0:	dc400f17 	ldw	r17,60(sp)
   10bd4:	dc000e17 	ldw	r16,56(sp)
   10bd8:	dec01104 	addi	sp,sp,68
   10bdc:	f800283a 	ret

00010be0 <__ltdf2>:
   10be0:	deffef04 	addi	sp,sp,-68
   10be4:	dc400f15 	stw	r17,60(sp)
   10be8:	dc400404 	addi	r17,sp,16
   10bec:	2005883a 	mov	r2,r4
   10bf0:	2807883a 	mov	r3,r5
   10bf4:	dc000e15 	stw	r16,56(sp)
   10bf8:	d809883a 	mov	r4,sp
   10bfc:	880b883a 	mov	r5,r17
   10c00:	dc000904 	addi	r16,sp,36
   10c04:	d8c00115 	stw	r3,4(sp)
   10c08:	d8800015 	stw	r2,0(sp)
   10c0c:	d9800215 	stw	r6,8(sp)
   10c10:	dfc01015 	stw	ra,64(sp)
   10c14:	d9c00315 	stw	r7,12(sp)
   10c18:	00115f80 	call	115f8 <__unpack_d>
   10c1c:	d9000204 	addi	r4,sp,8
   10c20:	800b883a 	mov	r5,r16
   10c24:	00115f80 	call	115f8 <__unpack_d>
   10c28:	d8800417 	ldw	r2,16(sp)
   10c2c:	00c00044 	movi	r3,1
   10c30:	180d883a 	mov	r6,r3
   10c34:	1880062e 	bgeu	r3,r2,10c50 <__ltdf2+0x70>
   10c38:	d8800917 	ldw	r2,36(sp)
   10c3c:	8809883a 	mov	r4,r17
   10c40:	800b883a 	mov	r5,r16
   10c44:	1880022e 	bgeu	r3,r2,10c50 <__ltdf2+0x70>
   10c48:	00117300 	call	11730 <__fpcmp_parts_d>
   10c4c:	100d883a 	mov	r6,r2
   10c50:	3005883a 	mov	r2,r6
   10c54:	dfc01017 	ldw	ra,64(sp)
   10c58:	dc400f17 	ldw	r17,60(sp)
   10c5c:	dc000e17 	ldw	r16,56(sp)
   10c60:	dec01104 	addi	sp,sp,68
   10c64:	f800283a 	ret

00010c68 <__ledf2>:
   10c68:	deffef04 	addi	sp,sp,-68
   10c6c:	dc400f15 	stw	r17,60(sp)
   10c70:	dc400404 	addi	r17,sp,16
   10c74:	2005883a 	mov	r2,r4
   10c78:	2807883a 	mov	r3,r5
   10c7c:	dc000e15 	stw	r16,56(sp)
   10c80:	d809883a 	mov	r4,sp
   10c84:	880b883a 	mov	r5,r17
   10c88:	dc000904 	addi	r16,sp,36
   10c8c:	d8c00115 	stw	r3,4(sp)
   10c90:	d8800015 	stw	r2,0(sp)
   10c94:	d9800215 	stw	r6,8(sp)
   10c98:	dfc01015 	stw	ra,64(sp)
   10c9c:	d9c00315 	stw	r7,12(sp)
   10ca0:	00115f80 	call	115f8 <__unpack_d>
   10ca4:	d9000204 	addi	r4,sp,8
   10ca8:	800b883a 	mov	r5,r16
   10cac:	00115f80 	call	115f8 <__unpack_d>
   10cb0:	d8800417 	ldw	r2,16(sp)
   10cb4:	00c00044 	movi	r3,1
   10cb8:	180d883a 	mov	r6,r3
   10cbc:	1880062e 	bgeu	r3,r2,10cd8 <__ledf2+0x70>
   10cc0:	d8800917 	ldw	r2,36(sp)
   10cc4:	8809883a 	mov	r4,r17
   10cc8:	800b883a 	mov	r5,r16
   10ccc:	1880022e 	bgeu	r3,r2,10cd8 <__ledf2+0x70>
   10cd0:	00117300 	call	11730 <__fpcmp_parts_d>
   10cd4:	100d883a 	mov	r6,r2
   10cd8:	3005883a 	mov	r2,r6
   10cdc:	dfc01017 	ldw	ra,64(sp)
   10ce0:	dc400f17 	ldw	r17,60(sp)
   10ce4:	dc000e17 	ldw	r16,56(sp)
   10ce8:	dec01104 	addi	sp,sp,68
   10cec:	f800283a 	ret

00010cf0 <__floatsidf>:
   10cf0:	2006d7fa 	srli	r3,r4,31
   10cf4:	defff604 	addi	sp,sp,-40
   10cf8:	008000c4 	movi	r2,3
   10cfc:	dfc00915 	stw	ra,36(sp)
   10d00:	dcc00815 	stw	r19,32(sp)
   10d04:	dc800715 	stw	r18,28(sp)
   10d08:	dc400615 	stw	r17,24(sp)
   10d0c:	dc000515 	stw	r16,20(sp)
   10d10:	d8800015 	stw	r2,0(sp)
   10d14:	d8c00115 	stw	r3,4(sp)
   10d18:	20000f1e 	bne	r4,zero,10d58 <__floatsidf+0x68>
   10d1c:	00800084 	movi	r2,2
   10d20:	d8800015 	stw	r2,0(sp)
   10d24:	d809883a 	mov	r4,sp
   10d28:	00112e40 	call	112e4 <__pack_d>
   10d2c:	1009883a 	mov	r4,r2
   10d30:	180b883a 	mov	r5,r3
   10d34:	2005883a 	mov	r2,r4
   10d38:	2807883a 	mov	r3,r5
   10d3c:	dfc00917 	ldw	ra,36(sp)
   10d40:	dcc00817 	ldw	r19,32(sp)
   10d44:	dc800717 	ldw	r18,28(sp)
   10d48:	dc400617 	ldw	r17,24(sp)
   10d4c:	dc000517 	ldw	r16,20(sp)
   10d50:	dec00a04 	addi	sp,sp,40
   10d54:	f800283a 	ret
   10d58:	00800f04 	movi	r2,60
   10d5c:	1807003a 	cmpeq	r3,r3,zero
   10d60:	d8800215 	stw	r2,8(sp)
   10d64:	18001126 	beq	r3,zero,10dac <__floatsidf+0xbc>
   10d68:	0027883a 	mov	r19,zero
   10d6c:	2025883a 	mov	r18,r4
   10d70:	d9000315 	stw	r4,12(sp)
   10d74:	dcc00415 	stw	r19,16(sp)
   10d78:	00110c80 	call	110c8 <__clzsi2>
   10d7c:	11000744 	addi	r4,r2,29
   10d80:	013fe80e 	bge	zero,r4,10d24 <__floatsidf+0x34>
   10d84:	10bfff44 	addi	r2,r2,-3
   10d88:	10000c16 	blt	r2,zero,10dbc <__floatsidf+0xcc>
   10d8c:	90a2983a 	sll	r17,r18,r2
   10d90:	0021883a 	mov	r16,zero
   10d94:	d8800217 	ldw	r2,8(sp)
   10d98:	dc400415 	stw	r17,16(sp)
   10d9c:	dc000315 	stw	r16,12(sp)
   10da0:	1105c83a 	sub	r2,r2,r4
   10da4:	d8800215 	stw	r2,8(sp)
   10da8:	003fde06 	br	10d24 <__floatsidf+0x34>
   10dac:	00a00034 	movhi	r2,32768
   10db0:	20800a26 	beq	r4,r2,10ddc <__floatsidf+0xec>
   10db4:	0109c83a 	sub	r4,zero,r4
   10db8:	003feb06 	br	10d68 <__floatsidf+0x78>
   10dbc:	9006d07a 	srli	r3,r18,1
   10dc0:	008007c4 	movi	r2,31
   10dc4:	1105c83a 	sub	r2,r2,r4
   10dc8:	1886d83a 	srl	r3,r3,r2
   10dcc:	9922983a 	sll	r17,r19,r4
   10dd0:	9120983a 	sll	r16,r18,r4
   10dd4:	1c62b03a 	or	r17,r3,r17
   10dd8:	003fee06 	br	10d94 <__floatsidf+0xa4>
   10ddc:	0009883a 	mov	r4,zero
   10de0:	01707834 	movhi	r5,49632
   10de4:	003fd306 	br	10d34 <__floatsidf+0x44>

00010de8 <__fixdfsi>:
   10de8:	defff804 	addi	sp,sp,-32
   10dec:	2005883a 	mov	r2,r4
   10df0:	2807883a 	mov	r3,r5
   10df4:	d809883a 	mov	r4,sp
   10df8:	d9400204 	addi	r5,sp,8
   10dfc:	d8c00115 	stw	r3,4(sp)
   10e00:	d8800015 	stw	r2,0(sp)
   10e04:	dfc00715 	stw	ra,28(sp)
   10e08:	00115f80 	call	115f8 <__unpack_d>
   10e0c:	d8c00217 	ldw	r3,8(sp)
   10e10:	00800084 	movi	r2,2
   10e14:	1880051e 	bne	r3,r2,10e2c <__fixdfsi+0x44>
   10e18:	0007883a 	mov	r3,zero
   10e1c:	1805883a 	mov	r2,r3
   10e20:	dfc00717 	ldw	ra,28(sp)
   10e24:	dec00804 	addi	sp,sp,32
   10e28:	f800283a 	ret
   10e2c:	00800044 	movi	r2,1
   10e30:	10fff92e 	bgeu	r2,r3,10e18 <__fixdfsi+0x30>
   10e34:	00800104 	movi	r2,4
   10e38:	18800426 	beq	r3,r2,10e4c <__fixdfsi+0x64>
   10e3c:	d8c00417 	ldw	r3,16(sp)
   10e40:	183ff516 	blt	r3,zero,10e18 <__fixdfsi+0x30>
   10e44:	00800784 	movi	r2,30
   10e48:	10c0080e 	bge	r2,r3,10e6c <__fixdfsi+0x84>
   10e4c:	d8800317 	ldw	r2,12(sp)
   10e50:	1000121e 	bne	r2,zero,10e9c <__fixdfsi+0xb4>
   10e54:	00e00034 	movhi	r3,32768
   10e58:	18ffffc4 	addi	r3,r3,-1
   10e5c:	1805883a 	mov	r2,r3
   10e60:	dfc00717 	ldw	ra,28(sp)
   10e64:	dec00804 	addi	sp,sp,32
   10e68:	f800283a 	ret
   10e6c:	00800f04 	movi	r2,60
   10e70:	10d1c83a 	sub	r8,r2,r3
   10e74:	40bff804 	addi	r2,r8,-32
   10e78:	d9800517 	ldw	r6,20(sp)
   10e7c:	d9c00617 	ldw	r7,24(sp)
   10e80:	10000816 	blt	r2,zero,10ea4 <__fixdfsi+0xbc>
   10e84:	3888d83a 	srl	r4,r7,r2
   10e88:	d8800317 	ldw	r2,12(sp)
   10e8c:	2007883a 	mov	r3,r4
   10e90:	103fe226 	beq	r2,zero,10e1c <__fixdfsi+0x34>
   10e94:	0107c83a 	sub	r3,zero,r4
   10e98:	003fe006 	br	10e1c <__fixdfsi+0x34>
   10e9c:	00e00034 	movhi	r3,32768
   10ea0:	003fde06 	br	10e1c <__fixdfsi+0x34>
   10ea4:	39c7883a 	add	r3,r7,r7
   10ea8:	008007c4 	movi	r2,31
   10eac:	1205c83a 	sub	r2,r2,r8
   10eb0:	1886983a 	sll	r3,r3,r2
   10eb4:	3208d83a 	srl	r4,r6,r8
   10eb8:	1908b03a 	or	r4,r3,r4
   10ebc:	003ff206 	br	10e88 <__fixdfsi+0xa0>

00010ec0 <__truncdfsf2>:
   10ec0:	defff804 	addi	sp,sp,-32
   10ec4:	2005883a 	mov	r2,r4
   10ec8:	2807883a 	mov	r3,r5
   10ecc:	d809883a 	mov	r4,sp
   10ed0:	d9400204 	addi	r5,sp,8
   10ed4:	d8c00115 	stw	r3,4(sp)
   10ed8:	d8800015 	stw	r2,0(sp)
   10edc:	dfc00715 	stw	ra,28(sp)
   10ee0:	00115f80 	call	115f8 <__unpack_d>
   10ee4:	d9c00517 	ldw	r7,20(sp)
   10ee8:	da000617 	ldw	r8,24(sp)
   10eec:	02d00034 	movhi	r11,16384
   10ef0:	5affffc4 	addi	r11,r11,-1
   10ef4:	3812d7ba 	srli	r9,r7,30
   10ef8:	401a90ba 	slli	r13,r8,2
   10efc:	3ac4703a 	and	r2,r7,r11
   10f00:	0007883a 	mov	r3,zero
   10f04:	6a52b03a 	or	r9,r13,r9
   10f08:	10c4b03a 	or	r2,r2,r3
   10f0c:	d9000217 	ldw	r4,8(sp)
   10f10:	d9400317 	ldw	r5,12(sp)
   10f14:	d9800417 	ldw	r6,16(sp)
   10f18:	480f883a 	mov	r7,r9
   10f1c:	10000126 	beq	r2,zero,10f24 <__truncdfsf2+0x64>
   10f20:	49c00054 	ori	r7,r9,1
   10f24:	00112b80 	call	112b8 <__make_fp>
   10f28:	dfc00717 	ldw	ra,28(sp)
   10f2c:	dec00804 	addi	sp,sp,32
   10f30:	f800283a 	ret

00010f34 <__floatunsidf>:
   10f34:	defff204 	addi	sp,sp,-56
   10f38:	dfc00d15 	stw	ra,52(sp)
   10f3c:	ddc00c15 	stw	r23,48(sp)
   10f40:	dd800b15 	stw	r22,44(sp)
   10f44:	dd400a15 	stw	r21,40(sp)
   10f48:	dd000915 	stw	r20,36(sp)
   10f4c:	dcc00815 	stw	r19,32(sp)
   10f50:	dc800715 	stw	r18,28(sp)
   10f54:	dc400615 	stw	r17,24(sp)
   10f58:	dc000515 	stw	r16,20(sp)
   10f5c:	d8000115 	stw	zero,4(sp)
   10f60:	20000f1e 	bne	r4,zero,10fa0 <__floatunsidf+0x6c>
   10f64:	00800084 	movi	r2,2
   10f68:	d8800015 	stw	r2,0(sp)
   10f6c:	d809883a 	mov	r4,sp
   10f70:	00112e40 	call	112e4 <__pack_d>
   10f74:	dfc00d17 	ldw	ra,52(sp)
   10f78:	ddc00c17 	ldw	r23,48(sp)
   10f7c:	dd800b17 	ldw	r22,44(sp)
   10f80:	dd400a17 	ldw	r21,40(sp)
   10f84:	dd000917 	ldw	r20,36(sp)
   10f88:	dcc00817 	ldw	r19,32(sp)
   10f8c:	dc800717 	ldw	r18,28(sp)
   10f90:	dc400617 	ldw	r17,24(sp)
   10f94:	dc000517 	ldw	r16,20(sp)
   10f98:	dec00e04 	addi	sp,sp,56
   10f9c:	f800283a 	ret
   10fa0:	008000c4 	movi	r2,3
   10fa4:	00c00f04 	movi	r3,60
   10fa8:	002f883a 	mov	r23,zero
   10fac:	202d883a 	mov	r22,r4
   10fb0:	d8800015 	stw	r2,0(sp)
   10fb4:	d8c00215 	stw	r3,8(sp)
   10fb8:	d9000315 	stw	r4,12(sp)
   10fbc:	ddc00415 	stw	r23,16(sp)
   10fc0:	00110c80 	call	110c8 <__clzsi2>
   10fc4:	12400744 	addi	r9,r2,29
   10fc8:	48000b16 	blt	r9,zero,10ff8 <__floatunsidf+0xc4>
   10fcc:	483fe726 	beq	r9,zero,10f6c <__floatunsidf+0x38>
   10fd0:	10bfff44 	addi	r2,r2,-3
   10fd4:	10002e16 	blt	r2,zero,11090 <__floatunsidf+0x15c>
   10fd8:	b0a2983a 	sll	r17,r22,r2
   10fdc:	0021883a 	mov	r16,zero
   10fe0:	d8800217 	ldw	r2,8(sp)
   10fe4:	dc400415 	stw	r17,16(sp)
   10fe8:	dc000315 	stw	r16,12(sp)
   10fec:	1245c83a 	sub	r2,r2,r9
   10ff0:	d8800215 	stw	r2,8(sp)
   10ff4:	003fdd06 	br	10f6c <__floatunsidf+0x38>
   10ff8:	0255c83a 	sub	r10,zero,r9
   10ffc:	51bff804 	addi	r6,r10,-32
   11000:	30001b16 	blt	r6,zero,11070 <__floatunsidf+0x13c>
   11004:	b9a8d83a 	srl	r20,r23,r6
   11008:	002b883a 	mov	r21,zero
   1100c:	000f883a 	mov	r7,zero
   11010:	01000044 	movi	r4,1
   11014:	0011883a 	mov	r8,zero
   11018:	30002516 	blt	r6,zero,110b0 <__floatunsidf+0x17c>
   1101c:	21a6983a 	sll	r19,r4,r6
   11020:	0025883a 	mov	r18,zero
   11024:	00bfffc4 	movi	r2,-1
   11028:	9089883a 	add	r4,r18,r2
   1102c:	988b883a 	add	r5,r19,r2
   11030:	248d803a 	cmpltu	r6,r4,r18
   11034:	314b883a 	add	r5,r6,r5
   11038:	b104703a 	and	r2,r22,r4
   1103c:	b946703a 	and	r3,r23,r5
   11040:	10c4b03a 	or	r2,r2,r3
   11044:	10000226 	beq	r2,zero,11050 <__floatunsidf+0x11c>
   11048:	01c00044 	movi	r7,1
   1104c:	0011883a 	mov	r8,zero
   11050:	d9000217 	ldw	r4,8(sp)
   11054:	a1c4b03a 	or	r2,r20,r7
   11058:	aa06b03a 	or	r3,r21,r8
   1105c:	2249c83a 	sub	r4,r4,r9
   11060:	d8c00415 	stw	r3,16(sp)
   11064:	d9000215 	stw	r4,8(sp)
   11068:	d8800315 	stw	r2,12(sp)
   1106c:	003fbf06 	br	10f6c <__floatunsidf+0x38>
   11070:	bdc7883a 	add	r3,r23,r23
   11074:	008007c4 	movi	r2,31
   11078:	1285c83a 	sub	r2,r2,r10
   1107c:	1886983a 	sll	r3,r3,r2
   11080:	b2a8d83a 	srl	r20,r22,r10
   11084:	baaad83a 	srl	r21,r23,r10
   11088:	1d28b03a 	or	r20,r3,r20
   1108c:	003fdf06 	br	1100c <__floatunsidf+0xd8>
   11090:	b006d07a 	srli	r3,r22,1
   11094:	008007c4 	movi	r2,31
   11098:	1245c83a 	sub	r2,r2,r9
   1109c:	1886d83a 	srl	r3,r3,r2
   110a0:	ba62983a 	sll	r17,r23,r9
   110a4:	b260983a 	sll	r16,r22,r9
   110a8:	1c62b03a 	or	r17,r3,r17
   110ac:	003fcc06 	br	10fe0 <__floatunsidf+0xac>
   110b0:	2006d07a 	srli	r3,r4,1
   110b4:	008007c4 	movi	r2,31
   110b8:	1285c83a 	sub	r2,r2,r10
   110bc:	18a6d83a 	srl	r19,r3,r2
   110c0:	22a4983a 	sll	r18,r4,r10
   110c4:	003fd706 	br	11024 <__floatunsidf+0xf0>

000110c8 <__clzsi2>:
   110c8:	00bfffd4 	movui	r2,65535
   110cc:	11000e36 	bltu	r2,r4,11108 <__clzsi2+0x40>
   110d0:	00803fc4 	movi	r2,255
   110d4:	01400204 	movi	r5,8
   110d8:	0007883a 	mov	r3,zero
   110dc:	11001036 	bltu	r2,r4,11120 <__clzsi2+0x58>
   110e0:	000b883a 	mov	r5,zero
   110e4:	20c6d83a 	srl	r3,r4,r3
   110e8:	00800074 	movhi	r2,1
   110ec:	1093e804 	addi	r2,r2,20384
   110f0:	1887883a 	add	r3,r3,r2
   110f4:	18800003 	ldbu	r2,0(r3)
   110f8:	00c00804 	movi	r3,32
   110fc:	2885883a 	add	r2,r5,r2
   11100:	1885c83a 	sub	r2,r3,r2
   11104:	f800283a 	ret
   11108:	01400404 	movi	r5,16
   1110c:	00804034 	movhi	r2,256
   11110:	10bfffc4 	addi	r2,r2,-1
   11114:	2807883a 	mov	r3,r5
   11118:	113ff22e 	bgeu	r2,r4,110e4 <__clzsi2+0x1c>
   1111c:	01400604 	movi	r5,24
   11120:	2807883a 	mov	r3,r5
   11124:	20c6d83a 	srl	r3,r4,r3
   11128:	00800074 	movhi	r2,1
   1112c:	1093e804 	addi	r2,r2,20384
   11130:	1887883a 	add	r3,r3,r2
   11134:	18800003 	ldbu	r2,0(r3)
   11138:	00c00804 	movi	r3,32
   1113c:	2885883a 	add	r2,r5,r2
   11140:	1885c83a 	sub	r2,r3,r2
   11144:	f800283a 	ret

00011148 <__unpack_f>:
   11148:	21800017 	ldw	r6,0(r4)
   1114c:	00c02034 	movhi	r3,128
   11150:	18ffffc4 	addi	r3,r3,-1
   11154:	3004d5fa 	srli	r2,r6,23
   11158:	3008d7fa 	srli	r4,r6,31
   1115c:	30ce703a 	and	r7,r6,r3
   11160:	10c03fcc 	andi	r3,r2,255
   11164:	29000115 	stw	r4,4(r5)
   11168:	1800131e 	bne	r3,zero,111b8 <__unpack_f+0x70>
   1116c:	38000f26 	beq	r7,zero,111ac <__unpack_f+0x64>
   11170:	380691fa 	slli	r3,r7,7
   11174:	01bfe084 	movi	r6,-126
   11178:	008000c4 	movi	r2,3
   1117c:	01100034 	movhi	r4,16384
   11180:	213fffc4 	addi	r4,r4,-1
   11184:	28800015 	stw	r2,0(r5)
   11188:	29800215 	stw	r6,8(r5)
   1118c:	20c00536 	bltu	r4,r3,111a4 <__unpack_f+0x5c>
   11190:	3005883a 	mov	r2,r6
   11194:	18c7883a 	add	r3,r3,r3
   11198:	10bfffc4 	addi	r2,r2,-1
   1119c:	20fffd2e 	bgeu	r4,r3,11194 <__unpack_f+0x4c>
   111a0:	28800215 	stw	r2,8(r5)
   111a4:	28c00315 	stw	r3,12(r5)
   111a8:	f800283a 	ret
   111ac:	00800084 	movi	r2,2
   111b0:	28800015 	stw	r2,0(r5)
   111b4:	f800283a 	ret
   111b8:	00803fc4 	movi	r2,255
   111bc:	18800826 	beq	r3,r2,111e0 <__unpack_f+0x98>
   111c0:	380491fa 	slli	r2,r7,7
   111c4:	18ffe044 	addi	r3,r3,-127
   111c8:	28c00215 	stw	r3,8(r5)
   111cc:	10900034 	orhi	r2,r2,16384
   111d0:	28800315 	stw	r2,12(r5)
   111d4:	008000c4 	movi	r2,3
   111d8:	28800015 	stw	r2,0(r5)
   111dc:	f800283a 	ret
   111e0:	3800031e 	bne	r7,zero,111f0 <__unpack_f+0xa8>
   111e4:	00800104 	movi	r2,4
   111e8:	28800015 	stw	r2,0(r5)
   111ec:	f800283a 	ret
   111f0:	3080042c 	andhi	r2,r6,16
   111f4:	10000426 	beq	r2,zero,11208 <__unpack_f+0xc0>
   111f8:	00800044 	movi	r2,1
   111fc:	28800015 	stw	r2,0(r5)
   11200:	29c00315 	stw	r7,12(r5)
   11204:	f800283a 	ret
   11208:	28000015 	stw	zero,0(r5)
   1120c:	003ffc06 	br	11200 <__unpack_f+0xb8>

00011210 <__fpcmp_parts_f>:
   11210:	21800017 	ldw	r6,0(r4)
   11214:	00c00044 	movi	r3,1
   11218:	19800a2e 	bgeu	r3,r6,11244 <__fpcmp_parts_f+0x34>
   1121c:	28800017 	ldw	r2,0(r5)
   11220:	1880082e 	bgeu	r3,r2,11244 <__fpcmp_parts_f+0x34>
   11224:	00c00104 	movi	r3,4
   11228:	30c01e26 	beq	r6,r3,112a4 <__fpcmp_parts_f+0x94>
   1122c:	10c01a26 	beq	r2,r3,11298 <__fpcmp_parts_f+0x88>
   11230:	00c00084 	movi	r3,2
   11234:	30c00526 	beq	r6,r3,1124c <__fpcmp_parts_f+0x3c>
   11238:	10c0071e 	bne	r2,r3,11258 <__fpcmp_parts_f+0x48>
   1123c:	20800117 	ldw	r2,4(r4)
   11240:	1000091e 	bne	r2,zero,11268 <__fpcmp_parts_f+0x58>
   11244:	00800044 	movi	r2,1
   11248:	f800283a 	ret
   1124c:	10c0121e 	bne	r2,r3,11298 <__fpcmp_parts_f+0x88>
   11250:	0005883a 	mov	r2,zero
   11254:	f800283a 	ret
   11258:	20c00117 	ldw	r3,4(r4)
   1125c:	28800117 	ldw	r2,4(r5)
   11260:	18800326 	beq	r3,r2,11270 <__fpcmp_parts_f+0x60>
   11264:	183ff726 	beq	r3,zero,11244 <__fpcmp_parts_f+0x34>
   11268:	00bfffc4 	movi	r2,-1
   1126c:	f800283a 	ret
   11270:	21800217 	ldw	r6,8(r4)
   11274:	28800217 	ldw	r2,8(r5)
   11278:	11bffa16 	blt	r2,r6,11264 <__fpcmp_parts_f+0x54>
   1127c:	30800416 	blt	r6,r2,11290 <__fpcmp_parts_f+0x80>
   11280:	21000317 	ldw	r4,12(r4)
   11284:	29400317 	ldw	r5,12(r5)
   11288:	293ff636 	bltu	r5,r4,11264 <__fpcmp_parts_f+0x54>
   1128c:	217ff02e 	bgeu	r4,r5,11250 <__fpcmp_parts_f+0x40>
   11290:	183fec1e 	bne	r3,zero,11244 <__fpcmp_parts_f+0x34>
   11294:	003ff406 	br	11268 <__fpcmp_parts_f+0x58>
   11298:	28800117 	ldw	r2,4(r5)
   1129c:	103fe91e 	bne	r2,zero,11244 <__fpcmp_parts_f+0x34>
   112a0:	003ff106 	br	11268 <__fpcmp_parts_f+0x58>
   112a4:	11bfe51e 	bne	r2,r6,1123c <__fpcmp_parts_f+0x2c>
   112a8:	28c00117 	ldw	r3,4(r5)
   112ac:	20800117 	ldw	r2,4(r4)
   112b0:	1885c83a 	sub	r2,r3,r2
   112b4:	f800283a 	ret

000112b8 <__make_fp>:
   112b8:	defffb04 	addi	sp,sp,-20
   112bc:	d9000015 	stw	r4,0(sp)
   112c0:	d809883a 	mov	r4,sp
   112c4:	dfc00415 	stw	ra,16(sp)
   112c8:	d9400115 	stw	r5,4(sp)
   112cc:	d9800215 	stw	r6,8(sp)
   112d0:	d9c00315 	stw	r7,12(sp)
   112d4:	00117f80 	call	117f8 <__pack_f>
   112d8:	dfc00417 	ldw	ra,16(sp)
   112dc:	dec00504 	addi	sp,sp,20
   112e0:	f800283a 	ret

000112e4 <__pack_d>:
   112e4:	20c00017 	ldw	r3,0(r4)
   112e8:	defffd04 	addi	sp,sp,-12
   112ec:	dc000015 	stw	r16,0(sp)
   112f0:	dc800215 	stw	r18,8(sp)
   112f4:	dc400115 	stw	r17,4(sp)
   112f8:	00800044 	movi	r2,1
   112fc:	22000317 	ldw	r8,12(r4)
   11300:	001f883a 	mov	r15,zero
   11304:	22400417 	ldw	r9,16(r4)
   11308:	24000117 	ldw	r16,4(r4)
   1130c:	10c0552e 	bgeu	r2,r3,11464 <__pack_d+0x180>
   11310:	00800104 	movi	r2,4
   11314:	18804f26 	beq	r3,r2,11454 <__pack_d+0x170>
   11318:	00800084 	movi	r2,2
   1131c:	18800226 	beq	r3,r2,11328 <__pack_d+0x44>
   11320:	4244b03a 	or	r2,r8,r9
   11324:	10001a1e 	bne	r2,zero,11390 <__pack_d+0xac>
   11328:	000d883a 	mov	r6,zero
   1132c:	000f883a 	mov	r7,zero
   11330:	0011883a 	mov	r8,zero
   11334:	00800434 	movhi	r2,16
   11338:	10bfffc4 	addi	r2,r2,-1
   1133c:	301d883a 	mov	r14,r6
   11340:	3884703a 	and	r2,r7,r2
   11344:	400a953a 	slli	r5,r8,20
   11348:	79bffc2c 	andhi	r6,r15,65520
   1134c:	308cb03a 	or	r6,r6,r2
   11350:	00e00434 	movhi	r3,32784
   11354:	18ffffc4 	addi	r3,r3,-1
   11358:	800497fa 	slli	r2,r16,31
   1135c:	30c6703a 	and	r3,r6,r3
   11360:	1946b03a 	or	r3,r3,r5
   11364:	01600034 	movhi	r5,32768
   11368:	297fffc4 	addi	r5,r5,-1
   1136c:	194a703a 	and	r5,r3,r5
   11370:	288ab03a 	or	r5,r5,r2
   11374:	2807883a 	mov	r3,r5
   11378:	7005883a 	mov	r2,r14
   1137c:	dc800217 	ldw	r18,8(sp)
   11380:	dc400117 	ldw	r17,4(sp)
   11384:	dc000017 	ldw	r16,0(sp)
   11388:	dec00304 	addi	sp,sp,12
   1138c:	f800283a 	ret
   11390:	21000217 	ldw	r4,8(r4)
   11394:	00bf0084 	movi	r2,-1022
   11398:	20803f16 	blt	r4,r2,11498 <__pack_d+0x1b4>
   1139c:	0080ffc4 	movi	r2,1023
   113a0:	11002c16 	blt	r2,r4,11454 <__pack_d+0x170>
   113a4:	00803fc4 	movi	r2,255
   113a8:	408c703a 	and	r6,r8,r2
   113ac:	00802004 	movi	r2,128
   113b0:	0007883a 	mov	r3,zero
   113b4:	000f883a 	mov	r7,zero
   113b8:	2280ffc4 	addi	r10,r4,1023
   113bc:	30801e26 	beq	r6,r2,11438 <__pack_d+0x154>
   113c0:	00801fc4 	movi	r2,127
   113c4:	4089883a 	add	r4,r8,r2
   113c8:	220d803a 	cmpltu	r6,r4,r8
   113cc:	324d883a 	add	r6,r6,r9
   113d0:	2011883a 	mov	r8,r4
   113d4:	3013883a 	mov	r9,r6
   113d8:	00880034 	movhi	r2,8192
   113dc:	10bfffc4 	addi	r2,r2,-1
   113e0:	12400d36 	bltu	r2,r9,11418 <__pack_d+0x134>
   113e4:	4804963a 	slli	r2,r9,24
   113e8:	400cd23a 	srli	r6,r8,8
   113ec:	480ed23a 	srli	r7,r9,8
   113f0:	013fffc4 	movi	r4,-1
   113f4:	118cb03a 	or	r6,r2,r6
   113f8:	01400434 	movhi	r5,16
   113fc:	297fffc4 	addi	r5,r5,-1
   11400:	3104703a 	and	r2,r6,r4
   11404:	3946703a 	and	r3,r7,r5
   11408:	5201ffcc 	andi	r8,r10,2047
   1140c:	100d883a 	mov	r6,r2
   11410:	180f883a 	mov	r7,r3
   11414:	003fc706 	br	11334 <__pack_d+0x50>
   11418:	480897fa 	slli	r4,r9,31
   1141c:	4004d07a 	srli	r2,r8,1
   11420:	4806d07a 	srli	r3,r9,1
   11424:	52800044 	addi	r10,r10,1
   11428:	2084b03a 	or	r2,r4,r2
   1142c:	1011883a 	mov	r8,r2
   11430:	1813883a 	mov	r9,r3
   11434:	003feb06 	br	113e4 <__pack_d+0x100>
   11438:	383fe11e 	bne	r7,zero,113c0 <__pack_d+0xdc>
   1143c:	01004004 	movi	r4,256
   11440:	4104703a 	and	r2,r8,r4
   11444:	10c4b03a 	or	r2,r2,r3
   11448:	103fe326 	beq	r2,zero,113d8 <__pack_d+0xf4>
   1144c:	3005883a 	mov	r2,r6
   11450:	003fdc06 	br	113c4 <__pack_d+0xe0>
   11454:	000d883a 	mov	r6,zero
   11458:	000f883a 	mov	r7,zero
   1145c:	0201ffc4 	movi	r8,2047
   11460:	003fb406 	br	11334 <__pack_d+0x50>
   11464:	0005883a 	mov	r2,zero
   11468:	00c00234 	movhi	r3,8
   1146c:	408cb03a 	or	r6,r8,r2
   11470:	48ceb03a 	or	r7,r9,r3
   11474:	013fffc4 	movi	r4,-1
   11478:	01400434 	movhi	r5,16
   1147c:	297fffc4 	addi	r5,r5,-1
   11480:	3104703a 	and	r2,r6,r4
   11484:	3946703a 	and	r3,r7,r5
   11488:	100d883a 	mov	r6,r2
   1148c:	180f883a 	mov	r7,r3
   11490:	0201ffc4 	movi	r8,2047
   11494:	003fa706 	br	11334 <__pack_d+0x50>
   11498:	1109c83a 	sub	r4,r2,r4
   1149c:	00800e04 	movi	r2,56
   114a0:	11004316 	blt	r2,r4,115b0 <__pack_d+0x2cc>
   114a4:	21fff804 	addi	r7,r4,-32
   114a8:	38004516 	blt	r7,zero,115c0 <__pack_d+0x2dc>
   114ac:	49d8d83a 	srl	r12,r9,r7
   114b0:	001b883a 	mov	r13,zero
   114b4:	0023883a 	mov	r17,zero
   114b8:	01400044 	movi	r5,1
   114bc:	0025883a 	mov	r18,zero
   114c0:	38004716 	blt	r7,zero,115e0 <__pack_d+0x2fc>
   114c4:	29d6983a 	sll	r11,r5,r7
   114c8:	0015883a 	mov	r10,zero
   114cc:	00bfffc4 	movi	r2,-1
   114d0:	5089883a 	add	r4,r10,r2
   114d4:	588b883a 	add	r5,r11,r2
   114d8:	228d803a 	cmpltu	r6,r4,r10
   114dc:	314b883a 	add	r5,r6,r5
   114e0:	4104703a 	and	r2,r8,r4
   114e4:	4946703a 	and	r3,r9,r5
   114e8:	10c4b03a 	or	r2,r2,r3
   114ec:	10000226 	beq	r2,zero,114f8 <__pack_d+0x214>
   114f0:	04400044 	movi	r17,1
   114f4:	0025883a 	mov	r18,zero
   114f8:	00803fc4 	movi	r2,255
   114fc:	644eb03a 	or	r7,r12,r17
   11500:	3892703a 	and	r9,r7,r2
   11504:	00802004 	movi	r2,128
   11508:	6c90b03a 	or	r8,r13,r18
   1150c:	0015883a 	mov	r10,zero
   11510:	48801626 	beq	r9,r2,1156c <__pack_d+0x288>
   11514:	01001fc4 	movi	r4,127
   11518:	3905883a 	add	r2,r7,r4
   1151c:	11cd803a 	cmpltu	r6,r2,r7
   11520:	320d883a 	add	r6,r6,r8
   11524:	100f883a 	mov	r7,r2
   11528:	00840034 	movhi	r2,4096
   1152c:	10bfffc4 	addi	r2,r2,-1
   11530:	3011883a 	mov	r8,r6
   11534:	0007883a 	mov	r3,zero
   11538:	11801b36 	bltu	r2,r6,115a8 <__pack_d+0x2c4>
   1153c:	4004963a 	slli	r2,r8,24
   11540:	3808d23a 	srli	r4,r7,8
   11544:	400ad23a 	srli	r5,r8,8
   11548:	1813883a 	mov	r9,r3
   1154c:	1108b03a 	or	r4,r2,r4
   11550:	00bfffc4 	movi	r2,-1
   11554:	00c00434 	movhi	r3,16
   11558:	18ffffc4 	addi	r3,r3,-1
   1155c:	208c703a 	and	r6,r4,r2
   11560:	28ce703a 	and	r7,r5,r3
   11564:	4a01ffcc 	andi	r8,r9,2047
   11568:	003f7206 	br	11334 <__pack_d+0x50>
   1156c:	503fe91e 	bne	r10,zero,11514 <__pack_d+0x230>
   11570:	01004004 	movi	r4,256
   11574:	3904703a 	and	r2,r7,r4
   11578:	0007883a 	mov	r3,zero
   1157c:	10c4b03a 	or	r2,r2,r3
   11580:	10000626 	beq	r2,zero,1159c <__pack_d+0x2b8>
   11584:	3a45883a 	add	r2,r7,r9
   11588:	11cd803a 	cmpltu	r6,r2,r7
   1158c:	320d883a 	add	r6,r6,r8
   11590:	100f883a 	mov	r7,r2
   11594:	3011883a 	mov	r8,r6
   11598:	0007883a 	mov	r3,zero
   1159c:	00840034 	movhi	r2,4096
   115a0:	10bfffc4 	addi	r2,r2,-1
   115a4:	123fe52e 	bgeu	r2,r8,1153c <__pack_d+0x258>
   115a8:	00c00044 	movi	r3,1
   115ac:	003fe306 	br	1153c <__pack_d+0x258>
   115b0:	0009883a 	mov	r4,zero
   115b4:	0013883a 	mov	r9,zero
   115b8:	000b883a 	mov	r5,zero
   115bc:	003fe406 	br	11550 <__pack_d+0x26c>
   115c0:	4a47883a 	add	r3,r9,r9
   115c4:	008007c4 	movi	r2,31
   115c8:	1105c83a 	sub	r2,r2,r4
   115cc:	1886983a 	sll	r3,r3,r2
   115d0:	4118d83a 	srl	r12,r8,r4
   115d4:	491ad83a 	srl	r13,r9,r4
   115d8:	1b18b03a 	or	r12,r3,r12
   115dc:	003fb506 	br	114b4 <__pack_d+0x1d0>
   115e0:	2806d07a 	srli	r3,r5,1
   115e4:	008007c4 	movi	r2,31
   115e8:	1105c83a 	sub	r2,r2,r4
   115ec:	1896d83a 	srl	r11,r3,r2
   115f0:	2914983a 	sll	r10,r5,r4
   115f4:	003fb506 	br	114cc <__pack_d+0x1e8>

000115f8 <__unpack_d>:
   115f8:	20c00117 	ldw	r3,4(r4)
   115fc:	22400017 	ldw	r9,0(r4)
   11600:	00800434 	movhi	r2,16
   11604:	10bfffc4 	addi	r2,r2,-1
   11608:	1808d53a 	srli	r4,r3,20
   1160c:	180cd7fa 	srli	r6,r3,31
   11610:	1894703a 	and	r10,r3,r2
   11614:	2201ffcc 	andi	r8,r4,2047
   11618:	281b883a 	mov	r13,r5
   1161c:	4817883a 	mov	r11,r9
   11620:	29800115 	stw	r6,4(r5)
   11624:	5019883a 	mov	r12,r10
   11628:	40001e1e 	bne	r8,zero,116a4 <__unpack_d+0xac>
   1162c:	4a84b03a 	or	r2,r9,r10
   11630:	10001926 	beq	r2,zero,11698 <__unpack_d+0xa0>
   11634:	4804d63a 	srli	r2,r9,24
   11638:	500c923a 	slli	r6,r10,8
   1163c:	013f0084 	movi	r4,-1022
   11640:	00c40034 	movhi	r3,4096
   11644:	18ffffc4 	addi	r3,r3,-1
   11648:	118cb03a 	or	r6,r2,r6
   1164c:	008000c4 	movi	r2,3
   11650:	480a923a 	slli	r5,r9,8
   11654:	68800015 	stw	r2,0(r13)
   11658:	69000215 	stw	r4,8(r13)
   1165c:	19800b36 	bltu	r3,r6,1168c <__unpack_d+0x94>
   11660:	200f883a 	mov	r7,r4
   11664:	1811883a 	mov	r8,r3
   11668:	2945883a 	add	r2,r5,r5
   1166c:	1149803a 	cmpltu	r4,r2,r5
   11670:	3187883a 	add	r3,r6,r6
   11674:	20c9883a 	add	r4,r4,r3
   11678:	100b883a 	mov	r5,r2
   1167c:	200d883a 	mov	r6,r4
   11680:	39ffffc4 	addi	r7,r7,-1
   11684:	413ff82e 	bgeu	r8,r4,11668 <__unpack_d+0x70>
   11688:	69c00215 	stw	r7,8(r13)
   1168c:	69800415 	stw	r6,16(r13)
   11690:	69400315 	stw	r5,12(r13)
   11694:	f800283a 	ret
   11698:	00800084 	movi	r2,2
   1169c:	28800015 	stw	r2,0(r5)
   116a0:	f800283a 	ret
   116a4:	0081ffc4 	movi	r2,2047
   116a8:	40800f26 	beq	r8,r2,116e8 <__unpack_d+0xf0>
   116ac:	480cd63a 	srli	r6,r9,24
   116b0:	5006923a 	slli	r3,r10,8
   116b4:	4804923a 	slli	r2,r9,8
   116b8:	0009883a 	mov	r4,zero
   116bc:	30c6b03a 	or	r3,r6,r3
   116c0:	01440034 	movhi	r5,4096
   116c4:	110cb03a 	or	r6,r2,r4
   116c8:	423f0044 	addi	r8,r8,-1023
   116cc:	194eb03a 	or	r7,r3,r5
   116d0:	008000c4 	movi	r2,3
   116d4:	69c00415 	stw	r7,16(r13)
   116d8:	6a000215 	stw	r8,8(r13)
   116dc:	68800015 	stw	r2,0(r13)
   116e0:	69800315 	stw	r6,12(r13)
   116e4:	f800283a 	ret
   116e8:	4a84b03a 	or	r2,r9,r10
   116ec:	1000031e 	bne	r2,zero,116fc <__unpack_d+0x104>
   116f0:	00800104 	movi	r2,4
   116f4:	28800015 	stw	r2,0(r5)
   116f8:	f800283a 	ret
   116fc:	0009883a 	mov	r4,zero
   11700:	01400234 	movhi	r5,8
   11704:	4904703a 	and	r2,r9,r4
   11708:	5146703a 	and	r3,r10,r5
   1170c:	10c4b03a 	or	r2,r2,r3
   11710:	10000526 	beq	r2,zero,11728 <__unpack_d+0x130>
   11714:	00800044 	movi	r2,1
   11718:	68800015 	stw	r2,0(r13)
   1171c:	6b000415 	stw	r12,16(r13)
   11720:	6ac00315 	stw	r11,12(r13)
   11724:	f800283a 	ret
   11728:	68000015 	stw	zero,0(r13)
   1172c:	003ffb06 	br	1171c <__unpack_d+0x124>

00011730 <__fpcmp_parts_d>:
   11730:	21800017 	ldw	r6,0(r4)
   11734:	00c00044 	movi	r3,1
   11738:	19800a2e 	bgeu	r3,r6,11764 <__fpcmp_parts_d+0x34>
   1173c:	28800017 	ldw	r2,0(r5)
   11740:	1880082e 	bgeu	r3,r2,11764 <__fpcmp_parts_d+0x34>
   11744:	00c00104 	movi	r3,4
   11748:	30c02626 	beq	r6,r3,117e4 <__fpcmp_parts_d+0xb4>
   1174c:	10c02226 	beq	r2,r3,117d8 <__fpcmp_parts_d+0xa8>
   11750:	00c00084 	movi	r3,2
   11754:	30c00526 	beq	r6,r3,1176c <__fpcmp_parts_d+0x3c>
   11758:	10c0071e 	bne	r2,r3,11778 <__fpcmp_parts_d+0x48>
   1175c:	20800117 	ldw	r2,4(r4)
   11760:	1000091e 	bne	r2,zero,11788 <__fpcmp_parts_d+0x58>
   11764:	00800044 	movi	r2,1
   11768:	f800283a 	ret
   1176c:	10c01a1e 	bne	r2,r3,117d8 <__fpcmp_parts_d+0xa8>
   11770:	0005883a 	mov	r2,zero
   11774:	f800283a 	ret
   11778:	22000117 	ldw	r8,4(r4)
   1177c:	28800117 	ldw	r2,4(r5)
   11780:	40800326 	beq	r8,r2,11790 <__fpcmp_parts_d+0x60>
   11784:	403ff726 	beq	r8,zero,11764 <__fpcmp_parts_d+0x34>
   11788:	00bfffc4 	movi	r2,-1
   1178c:	f800283a 	ret
   11790:	20c00217 	ldw	r3,8(r4)
   11794:	28800217 	ldw	r2,8(r5)
   11798:	10fffa16 	blt	r2,r3,11784 <__fpcmp_parts_d+0x54>
   1179c:	18800916 	blt	r3,r2,117c4 <__fpcmp_parts_d+0x94>
   117a0:	21c00417 	ldw	r7,16(r4)
   117a4:	28c00417 	ldw	r3,16(r5)
   117a8:	21800317 	ldw	r6,12(r4)
   117ac:	28800317 	ldw	r2,12(r5)
   117b0:	19fff436 	bltu	r3,r7,11784 <__fpcmp_parts_d+0x54>
   117b4:	38c00526 	beq	r7,r3,117cc <__fpcmp_parts_d+0x9c>
   117b8:	38c00236 	bltu	r7,r3,117c4 <__fpcmp_parts_d+0x94>
   117bc:	19ffec1e 	bne	r3,r7,11770 <__fpcmp_parts_d+0x40>
   117c0:	30bfeb2e 	bgeu	r6,r2,11770 <__fpcmp_parts_d+0x40>
   117c4:	403fe71e 	bne	r8,zero,11764 <__fpcmp_parts_d+0x34>
   117c8:	003fef06 	br	11788 <__fpcmp_parts_d+0x58>
   117cc:	11bffa2e 	bgeu	r2,r6,117b8 <__fpcmp_parts_d+0x88>
   117d0:	403fe426 	beq	r8,zero,11764 <__fpcmp_parts_d+0x34>
   117d4:	003fec06 	br	11788 <__fpcmp_parts_d+0x58>
   117d8:	28800117 	ldw	r2,4(r5)
   117dc:	103fe11e 	bne	r2,zero,11764 <__fpcmp_parts_d+0x34>
   117e0:	003fe906 	br	11788 <__fpcmp_parts_d+0x58>
   117e4:	11bfdd1e 	bne	r2,r6,1175c <__fpcmp_parts_d+0x2c>
   117e8:	28c00117 	ldw	r3,4(r5)
   117ec:	20800117 	ldw	r2,4(r4)
   117f0:	1885c83a 	sub	r2,r3,r2
   117f4:	f800283a 	ret

000117f8 <__pack_f>:
   117f8:	20c00017 	ldw	r3,0(r4)
   117fc:	01c00044 	movi	r7,1
   11800:	21800317 	ldw	r6,12(r4)
   11804:	21400117 	ldw	r5,4(r4)
   11808:	38c02d2e 	bgeu	r7,r3,118c0 <__pack_f+0xc8>
   1180c:	00800104 	movi	r2,4
   11810:	18802826 	beq	r3,r2,118b4 <__pack_f+0xbc>
   11814:	00800084 	movi	r2,2
   11818:	18800126 	beq	r3,r2,11820 <__pack_f+0x28>
   1181c:	3000101e 	bne	r6,zero,11860 <__pack_f+0x68>
   11820:	000d883a 	mov	r6,zero
   11824:	0007883a 	mov	r3,zero
   11828:	19003fcc 	andi	r4,r3,255
   1182c:	200895fa 	slli	r4,r4,23
   11830:	00c02034 	movhi	r3,128
   11834:	18ffffc4 	addi	r3,r3,-1
   11838:	30c6703a 	and	r3,r6,r3
   1183c:	10a0002c 	andhi	r2,r2,32768
   11840:	10c4b03a 	or	r2,r2,r3
   11844:	280a97fa 	slli	r5,r5,31
   11848:	1104b03a 	or	r2,r2,r4
   1184c:	00e00034 	movhi	r3,32768
   11850:	18ffffc4 	addi	r3,r3,-1
   11854:	10c4703a 	and	r2,r2,r3
   11858:	1144b03a 	or	r2,r2,r5
   1185c:	f800283a 	ret
   11860:	21000217 	ldw	r4,8(r4)
   11864:	00bfe084 	movi	r2,-126
   11868:	20801b16 	blt	r4,r2,118d8 <__pack_f+0xe0>
   1186c:	00801fc4 	movi	r2,127
   11870:	11001016 	blt	r2,r4,118b4 <__pack_f+0xbc>
   11874:	308e703a 	and	r7,r6,r2
   11878:	2087883a 	add	r3,r4,r2
   1187c:	00801004 	movi	r2,64
   11880:	38800526 	beq	r7,r2,11898 <__pack_f+0xa0>
   11884:	31800fc4 	addi	r6,r6,63
   11888:	30000716 	blt	r6,zero,118a8 <__pack_f+0xb0>
   1188c:	300490ba 	slli	r2,r6,2
   11890:	100cd27a 	srli	r6,r2,9
   11894:	003fe406 	br	11828 <__pack_f+0x30>
   11898:	3080200c 	andi	r2,r6,128
   1189c:	103ffa26 	beq	r2,zero,11888 <__pack_f+0x90>
   118a0:	31cd883a 	add	r6,r6,r7
   118a4:	003ff806 	br	11888 <__pack_f+0x90>
   118a8:	300cd07a 	srli	r6,r6,1
   118ac:	18c00044 	addi	r3,r3,1
   118b0:	003ff606 	br	1188c <__pack_f+0x94>
   118b4:	000d883a 	mov	r6,zero
   118b8:	00ffffc4 	movi	r3,-1
   118bc:	003fda06 	br	11828 <__pack_f+0x30>
   118c0:	31800434 	orhi	r6,r6,16
   118c4:	00802034 	movhi	r2,128
   118c8:	10bfffc4 	addi	r2,r2,-1
   118cc:	308c703a 	and	r6,r6,r2
   118d0:	00ffffc4 	movi	r3,-1
   118d4:	003fd406 	br	11828 <__pack_f+0x30>
   118d8:	1109c83a 	sub	r4,r2,r4
   118dc:	00800644 	movi	r2,25
   118e0:	11001216 	blt	r2,r4,1192c <__pack_f+0x134>
   118e4:	3904983a 	sll	r2,r7,r4
   118e8:	3106d83a 	srl	r3,r6,r4
   118ec:	10bfffc4 	addi	r2,r2,-1
   118f0:	3084703a 	and	r2,r6,r2
   118f4:	1004c03a 	cmpne	r2,r2,zero
   118f8:	1886b03a 	or	r3,r3,r2
   118fc:	19001fcc 	andi	r4,r3,127
   11900:	00801004 	movi	r2,64
   11904:	20800c26 	beq	r4,r2,11938 <__pack_f+0x140>
   11908:	18c00fc4 	addi	r3,r3,63
   1190c:	00900034 	movhi	r2,16384
   11910:	10bfffc4 	addi	r2,r2,-1
   11914:	180cd1fa 	srli	r6,r3,7
   11918:	10c7803a 	cmpltu	r3,r2,r3
   1191c:	00802034 	movhi	r2,128
   11920:	10bfffc4 	addi	r2,r2,-1
   11924:	308c703a 	and	r6,r6,r2
   11928:	003fbf06 	br	11828 <__pack_f+0x30>
   1192c:	0007883a 	mov	r3,zero
   11930:	000d883a 	mov	r6,zero
   11934:	003ff906 	br	1191c <__pack_f+0x124>
   11938:	1880200c 	andi	r2,r3,128
   1193c:	10000126 	beq	r2,zero,11944 <__pack_f+0x14c>
   11940:	1907883a 	add	r3,r3,r4
   11944:	180cd1fa 	srli	r6,r3,7
   11948:	00900034 	movhi	r2,16384
   1194c:	10bfffc4 	addi	r2,r2,-1
   11950:	10c7803a 	cmpltu	r3,r2,r3
   11954:	003ff106 	br	1191c <__pack_f+0x124>

00011958 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   11958:	defff804 	addi	sp,sp,-32
   1195c:	dfc00715 	stw	ra,28(sp)
   11960:	df000615 	stw	fp,24(sp)
   11964:	df000604 	addi	fp,sp,24
   11968:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   1196c:	e0bffc17 	ldw	r2,-16(fp)
   11970:	1004803a 	cmplt	r2,r2,zero
   11974:	1000081e 	bne	r2,zero,11998 <close+0x40>
   11978:	e0bffc17 	ldw	r2,-16(fp)
   1197c:	10800324 	muli	r2,r2,12
   11980:	1007883a 	mov	r3,r2
   11984:	00800074 	movhi	r2,1
   11988:	10966904 	addi	r2,r2,22948
   1198c:	1887883a 	add	r3,r3,r2
   11990:	e0ffff15 	stw	r3,-4(fp)
   11994:	00000106 	br	1199c <close+0x44>
   11998:	e03fff15 	stw	zero,-4(fp)
   1199c:	e0bfff17 	ldw	r2,-4(fp)
   119a0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
   119a4:	e0bffb17 	ldw	r2,-20(fp)
   119a8:	1005003a 	cmpeq	r2,r2,zero
   119ac:	10001d1e 	bne	r2,zero,11a24 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   119b0:	e0bffb17 	ldw	r2,-20(fp)
   119b4:	10800017 	ldw	r2,0(r2)
   119b8:	10800417 	ldw	r2,16(r2)
   119bc:	1005003a 	cmpeq	r2,r2,zero
   119c0:	1000071e 	bne	r2,zero,119e0 <close+0x88>
   119c4:	e0bffb17 	ldw	r2,-20(fp)
   119c8:	10800017 	ldw	r2,0(r2)
   119cc:	10800417 	ldw	r2,16(r2)
   119d0:	e13ffb17 	ldw	r4,-20(fp)
   119d4:	103ee83a 	callr	r2
   119d8:	e0bffe15 	stw	r2,-8(fp)
   119dc:	00000106 	br	119e4 <close+0x8c>
   119e0:	e03ffe15 	stw	zero,-8(fp)
   119e4:	e0bffe17 	ldw	r2,-8(fp)
   119e8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   119ec:	e13ffc17 	ldw	r4,-16(fp)
   119f0:	001219c0 	call	1219c <alt_release_fd>
    if (rval < 0)
   119f4:	e0bffa17 	ldw	r2,-24(fp)
   119f8:	1004403a 	cmpge	r2,r2,zero
   119fc:	1000071e 	bne	r2,zero,11a1c <close+0xc4>
    {
      ALT_ERRNO = -rval;
   11a00:	0011a540 	call	11a54 <alt_get_errno>
   11a04:	e0fffa17 	ldw	r3,-24(fp)
   11a08:	00c7c83a 	sub	r3,zero,r3
   11a0c:	10c00015 	stw	r3,0(r2)
      return -1;
   11a10:	00bfffc4 	movi	r2,-1
   11a14:	e0bffd15 	stw	r2,-12(fp)
   11a18:	00000806 	br	11a3c <close+0xe4>
    }
    return 0;
   11a1c:	e03ffd15 	stw	zero,-12(fp)
   11a20:	00000606 	br	11a3c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11a24:	0011a540 	call	11a54 <alt_get_errno>
   11a28:	1007883a 	mov	r3,r2
   11a2c:	00801444 	movi	r2,81
   11a30:	18800015 	stw	r2,0(r3)
    return -1;
   11a34:	00bfffc4 	movi	r2,-1
   11a38:	e0bffd15 	stw	r2,-12(fp)
   11a3c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
   11a40:	e037883a 	mov	sp,fp
   11a44:	dfc00117 	ldw	ra,4(sp)
   11a48:	df000017 	ldw	fp,0(sp)
   11a4c:	dec00204 	addi	sp,sp,8
   11a50:	f800283a 	ret

00011a54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11a54:	defffd04 	addi	sp,sp,-12
   11a58:	dfc00215 	stw	ra,8(sp)
   11a5c:	df000115 	stw	fp,4(sp)
   11a60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11a64:	00800074 	movhi	r2,1
   11a68:	109aed04 	addi	r2,r2,27572
   11a6c:	10800017 	ldw	r2,0(r2)
   11a70:	1005003a 	cmpeq	r2,r2,zero
   11a74:	1000061e 	bne	r2,zero,11a90 <alt_get_errno+0x3c>
   11a78:	00800074 	movhi	r2,1
   11a7c:	109aed04 	addi	r2,r2,27572
   11a80:	10800017 	ldw	r2,0(r2)
   11a84:	103ee83a 	callr	r2
   11a88:	e0bfff15 	stw	r2,-4(fp)
   11a8c:	00000306 	br	11a9c <alt_get_errno+0x48>
   11a90:	008000b4 	movhi	r2,2
   11a94:	10a1be04 	addi	r2,r2,-30984
   11a98:	e0bfff15 	stw	r2,-4(fp)
   11a9c:	e0bfff17 	ldw	r2,-4(fp)
}
   11aa0:	e037883a 	mov	sp,fp
   11aa4:	dfc00117 	ldw	ra,4(sp)
   11aa8:	df000017 	ldw	fp,0(sp)
   11aac:	dec00204 	addi	sp,sp,8
   11ab0:	f800283a 	ret

00011ab4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   11ab4:	defffc04 	addi	sp,sp,-16
   11ab8:	df000315 	stw	fp,12(sp)
   11abc:	df000304 	addi	fp,sp,12
   11ac0:	e13ffd15 	stw	r4,-12(fp)
   11ac4:	e17ffe15 	stw	r5,-8(fp)
   11ac8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   11acc:	e0bfff17 	ldw	r2,-4(fp)
}
   11ad0:	e037883a 	mov	sp,fp
   11ad4:	df000017 	ldw	fp,0(sp)
   11ad8:	dec00104 	addi	sp,sp,4
   11adc:	f800283a 	ret

00011ae0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   11ae0:	defff904 	addi	sp,sp,-28
   11ae4:	dfc00615 	stw	ra,24(sp)
   11ae8:	df000515 	stw	fp,20(sp)
   11aec:	df000504 	addi	fp,sp,20
   11af0:	e13ffc15 	stw	r4,-16(fp)
   11af4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11af8:	e0bffc17 	ldw	r2,-16(fp)
   11afc:	1004803a 	cmplt	r2,r2,zero
   11b00:	1000081e 	bne	r2,zero,11b24 <fstat+0x44>
   11b04:	e0bffc17 	ldw	r2,-16(fp)
   11b08:	10800324 	muli	r2,r2,12
   11b0c:	1007883a 	mov	r3,r2
   11b10:	00800074 	movhi	r2,1
   11b14:	10966904 	addi	r2,r2,22948
   11b18:	1887883a 	add	r3,r3,r2
   11b1c:	e0ffff15 	stw	r3,-4(fp)
   11b20:	00000106 	br	11b28 <fstat+0x48>
   11b24:	e03fff15 	stw	zero,-4(fp)
   11b28:	e0bfff17 	ldw	r2,-4(fp)
   11b2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   11b30:	e0bffb17 	ldw	r2,-20(fp)
   11b34:	1005003a 	cmpeq	r2,r2,zero
   11b38:	1000121e 	bne	r2,zero,11b84 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   11b3c:	e0bffb17 	ldw	r2,-20(fp)
   11b40:	10800017 	ldw	r2,0(r2)
   11b44:	10800817 	ldw	r2,32(r2)
   11b48:	1005003a 	cmpeq	r2,r2,zero
   11b4c:	1000081e 	bne	r2,zero,11b70 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
   11b50:	e0bffb17 	ldw	r2,-20(fp)
   11b54:	10800017 	ldw	r2,0(r2)
   11b58:	10800817 	ldw	r2,32(r2)
   11b5c:	e13ffb17 	ldw	r4,-20(fp)
   11b60:	e17ffd17 	ldw	r5,-12(fp)
   11b64:	103ee83a 	callr	r2
   11b68:	e0bffe15 	stw	r2,-8(fp)
   11b6c:	00000b06 	br	11b9c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   11b70:	e0fffd17 	ldw	r3,-12(fp)
   11b74:	00880004 	movi	r2,8192
   11b78:	18800115 	stw	r2,4(r3)
      return 0;
   11b7c:	e03ffe15 	stw	zero,-8(fp)
   11b80:	00000606 	br	11b9c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11b84:	0011bb40 	call	11bb4 <alt_get_errno>
   11b88:	1007883a 	mov	r3,r2
   11b8c:	00801444 	movi	r2,81
   11b90:	18800015 	stw	r2,0(r3)
    return -1;
   11b94:	00bfffc4 	movi	r2,-1
   11b98:	e0bffe15 	stw	r2,-8(fp)
   11b9c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11ba0:	e037883a 	mov	sp,fp
   11ba4:	dfc00117 	ldw	ra,4(sp)
   11ba8:	df000017 	ldw	fp,0(sp)
   11bac:	dec00204 	addi	sp,sp,8
   11bb0:	f800283a 	ret

00011bb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11bb4:	defffd04 	addi	sp,sp,-12
   11bb8:	dfc00215 	stw	ra,8(sp)
   11bbc:	df000115 	stw	fp,4(sp)
   11bc0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11bc4:	00800074 	movhi	r2,1
   11bc8:	109aed04 	addi	r2,r2,27572
   11bcc:	10800017 	ldw	r2,0(r2)
   11bd0:	1005003a 	cmpeq	r2,r2,zero
   11bd4:	1000061e 	bne	r2,zero,11bf0 <alt_get_errno+0x3c>
   11bd8:	00800074 	movhi	r2,1
   11bdc:	109aed04 	addi	r2,r2,27572
   11be0:	10800017 	ldw	r2,0(r2)
   11be4:	103ee83a 	callr	r2
   11be8:	e0bfff15 	stw	r2,-4(fp)
   11bec:	00000306 	br	11bfc <alt_get_errno+0x48>
   11bf0:	008000b4 	movhi	r2,2
   11bf4:	10a1be04 	addi	r2,r2,-30984
   11bf8:	e0bfff15 	stw	r2,-4(fp)
   11bfc:	e0bfff17 	ldw	r2,-4(fp)
}
   11c00:	e037883a 	mov	sp,fp
   11c04:	dfc00117 	ldw	ra,4(sp)
   11c08:	df000017 	ldw	fp,0(sp)
   11c0c:	dec00204 	addi	sp,sp,8
   11c10:	f800283a 	ret

00011c14 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   11c14:	deffeb04 	addi	sp,sp,-84
   11c18:	dfc01415 	stw	ra,80(sp)
   11c1c:	df001315 	stw	fp,76(sp)
   11c20:	df001304 	addi	fp,sp,76
   11c24:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11c28:	e0bffd17 	ldw	r2,-12(fp)
   11c2c:	1004803a 	cmplt	r2,r2,zero
   11c30:	1000081e 	bne	r2,zero,11c54 <isatty+0x40>
   11c34:	e0bffd17 	ldw	r2,-12(fp)
   11c38:	10800324 	muli	r2,r2,12
   11c3c:	1007883a 	mov	r3,r2
   11c40:	00800074 	movhi	r2,1
   11c44:	10966904 	addi	r2,r2,22948
   11c48:	1887883a 	add	r3,r3,r2
   11c4c:	e0ffff15 	stw	r3,-4(fp)
   11c50:	00000106 	br	11c58 <isatty+0x44>
   11c54:	e03fff15 	stw	zero,-4(fp)
   11c58:	e0bfff17 	ldw	r2,-4(fp)
   11c5c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
   11c60:	e0bfed17 	ldw	r2,-76(fp)
   11c64:	1005003a 	cmpeq	r2,r2,zero
   11c68:	10000f1e 	bne	r2,zero,11ca8 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   11c6c:	e0bfed17 	ldw	r2,-76(fp)
   11c70:	10800017 	ldw	r2,0(r2)
   11c74:	10800817 	ldw	r2,32(r2)
   11c78:	1004c03a 	cmpne	r2,r2,zero
   11c7c:	1000031e 	bne	r2,zero,11c8c <isatty+0x78>
    {
      return 1;
   11c80:	00800044 	movi	r2,1
   11c84:	e0bffe15 	stw	r2,-8(fp)
   11c88:	00000c06 	br	11cbc <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   11c8c:	e17fee04 	addi	r5,fp,-72
   11c90:	e13ffd17 	ldw	r4,-12(fp)
   11c94:	0011ae00 	call	11ae0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   11c98:	e0bfef17 	ldw	r2,-68(fp)
   11c9c:	10880020 	cmpeqi	r2,r2,8192
   11ca0:	e0bffe15 	stw	r2,-8(fp)
   11ca4:	00000506 	br	11cbc <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   11ca8:	0011cd40 	call	11cd4 <alt_get_errno>
   11cac:	1007883a 	mov	r3,r2
   11cb0:	00801444 	movi	r2,81
   11cb4:	18800015 	stw	r2,0(r3)
    return 0;
   11cb8:	e03ffe15 	stw	zero,-8(fp)
   11cbc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
   11cc0:	e037883a 	mov	sp,fp
   11cc4:	dfc00117 	ldw	ra,4(sp)
   11cc8:	df000017 	ldw	fp,0(sp)
   11ccc:	dec00204 	addi	sp,sp,8
   11cd0:	f800283a 	ret

00011cd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11cd4:	defffd04 	addi	sp,sp,-12
   11cd8:	dfc00215 	stw	ra,8(sp)
   11cdc:	df000115 	stw	fp,4(sp)
   11ce0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11ce4:	00800074 	movhi	r2,1
   11ce8:	109aed04 	addi	r2,r2,27572
   11cec:	10800017 	ldw	r2,0(r2)
   11cf0:	1005003a 	cmpeq	r2,r2,zero
   11cf4:	1000061e 	bne	r2,zero,11d10 <alt_get_errno+0x3c>
   11cf8:	00800074 	movhi	r2,1
   11cfc:	109aed04 	addi	r2,r2,27572
   11d00:	10800017 	ldw	r2,0(r2)
   11d04:	103ee83a 	callr	r2
   11d08:	e0bfff15 	stw	r2,-4(fp)
   11d0c:	00000306 	br	11d1c <alt_get_errno+0x48>
   11d10:	008000b4 	movhi	r2,2
   11d14:	10a1be04 	addi	r2,r2,-30984
   11d18:	e0bfff15 	stw	r2,-4(fp)
   11d1c:	e0bfff17 	ldw	r2,-4(fp)
}
   11d20:	e037883a 	mov	sp,fp
   11d24:	dfc00117 	ldw	ra,4(sp)
   11d28:	df000017 	ldw	fp,0(sp)
   11d2c:	dec00204 	addi	sp,sp,8
   11d30:	f800283a 	ret

00011d34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   11d34:	defffe04 	addi	sp,sp,-8
   11d38:	dfc00115 	stw	ra,4(sp)
   11d3c:	df000015 	stw	fp,0(sp)
   11d40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   11d44:	01000074 	movhi	r4,1
   11d48:	211af204 	addi	r4,r4,27592
   11d4c:	01400074 	movhi	r5,1
   11d50:	29543504 	addi	r5,r5,20692
   11d54:	01800074 	movhi	r6,1
   11d58:	319af204 	addi	r6,r6,27592
   11d5c:	0011db40 	call	11db4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   11d60:	01000034 	movhi	r4,0
   11d64:	21000804 	addi	r4,r4,32
   11d68:	01400034 	movhi	r5,0
   11d6c:	29400804 	addi	r5,r5,32
   11d70:	01800034 	movhi	r6,0
   11d74:	31806d04 	addi	r6,r6,436
   11d78:	0011db40 	call	11db4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   11d7c:	01000074 	movhi	r4,1
   11d80:	2110fa04 	addi	r4,r4,17384
   11d84:	01400074 	movhi	r5,1
   11d88:	2950fa04 	addi	r5,r5,17384
   11d8c:	01800074 	movhi	r6,1
   11d90:	31943504 	addi	r6,r6,20692
   11d94:	0011db40 	call	11db4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   11d98:	00132000 	call	13200 <alt_dcache_flush_all>
  alt_icache_flush_all();
   11d9c:	00134200 	call	13420 <alt_icache_flush_all>
}
   11da0:	e037883a 	mov	sp,fp
   11da4:	dfc00117 	ldw	ra,4(sp)
   11da8:	df000017 	ldw	fp,0(sp)
   11dac:	dec00204 	addi	sp,sp,8
   11db0:	f800283a 	ret

00011db4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   11db4:	defffc04 	addi	sp,sp,-16
   11db8:	df000315 	stw	fp,12(sp)
   11dbc:	df000304 	addi	fp,sp,12
   11dc0:	e13ffd15 	stw	r4,-12(fp)
   11dc4:	e17ffe15 	stw	r5,-8(fp)
   11dc8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   11dcc:	e0fffe17 	ldw	r3,-8(fp)
   11dd0:	e0bffd17 	ldw	r2,-12(fp)
   11dd4:	18800e26 	beq	r3,r2,11e10 <alt_load_section+0x5c>
  {
    while( to != end )
   11dd8:	00000a06 	br	11e04 <alt_load_section+0x50>
    {
      *to++ = *from++;
   11ddc:	e0bffd17 	ldw	r2,-12(fp)
   11de0:	10c00017 	ldw	r3,0(r2)
   11de4:	e0bffe17 	ldw	r2,-8(fp)
   11de8:	10c00015 	stw	r3,0(r2)
   11dec:	e0bffe17 	ldw	r2,-8(fp)
   11df0:	10800104 	addi	r2,r2,4
   11df4:	e0bffe15 	stw	r2,-8(fp)
   11df8:	e0bffd17 	ldw	r2,-12(fp)
   11dfc:	10800104 	addi	r2,r2,4
   11e00:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   11e04:	e0fffe17 	ldw	r3,-8(fp)
   11e08:	e0bfff17 	ldw	r2,-4(fp)
   11e0c:	18bff31e 	bne	r3,r2,11ddc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   11e10:	e037883a 	mov	sp,fp
   11e14:	df000017 	ldw	fp,0(sp)
   11e18:	dec00104 	addi	sp,sp,4
   11e1c:	f800283a 	ret

00011e20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   11e20:	defff804 	addi	sp,sp,-32
   11e24:	dfc00715 	stw	ra,28(sp)
   11e28:	df000615 	stw	fp,24(sp)
   11e2c:	df000604 	addi	fp,sp,24
   11e30:	e13ffc15 	stw	r4,-16(fp)
   11e34:	e17ffd15 	stw	r5,-12(fp)
   11e38:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   11e3c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   11e40:	e0bffc17 	ldw	r2,-16(fp)
   11e44:	1004803a 	cmplt	r2,r2,zero
   11e48:	1000081e 	bne	r2,zero,11e6c <lseek+0x4c>
   11e4c:	e0bffc17 	ldw	r2,-16(fp)
   11e50:	10800324 	muli	r2,r2,12
   11e54:	1007883a 	mov	r3,r2
   11e58:	00800074 	movhi	r2,1
   11e5c:	10966904 	addi	r2,r2,22948
   11e60:	1887883a 	add	r3,r3,r2
   11e64:	e0ffff15 	stw	r3,-4(fp)
   11e68:	00000106 	br	11e70 <lseek+0x50>
   11e6c:	e03fff15 	stw	zero,-4(fp)
   11e70:	e0bfff17 	ldw	r2,-4(fp)
   11e74:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
   11e78:	e0bffb17 	ldw	r2,-20(fp)
   11e7c:	1005003a 	cmpeq	r2,r2,zero
   11e80:	1000111e 	bne	r2,zero,11ec8 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   11e84:	e0bffb17 	ldw	r2,-20(fp)
   11e88:	10800017 	ldw	r2,0(r2)
   11e8c:	10800717 	ldw	r2,28(r2)
   11e90:	1005003a 	cmpeq	r2,r2,zero
   11e94:	1000091e 	bne	r2,zero,11ebc <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   11e98:	e0bffb17 	ldw	r2,-20(fp)
   11e9c:	10800017 	ldw	r2,0(r2)
   11ea0:	10800717 	ldw	r2,28(r2)
   11ea4:	e13ffb17 	ldw	r4,-20(fp)
   11ea8:	e17ffd17 	ldw	r5,-12(fp)
   11eac:	e1bffe17 	ldw	r6,-8(fp)
   11eb0:	103ee83a 	callr	r2
   11eb4:	e0bffa15 	stw	r2,-24(fp)
   11eb8:	00000506 	br	11ed0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   11ebc:	00bfde84 	movi	r2,-134
   11ec0:	e0bffa15 	stw	r2,-24(fp)
   11ec4:	00000206 	br	11ed0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
   11ec8:	00bfebc4 	movi	r2,-81
   11ecc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
   11ed0:	e0bffa17 	ldw	r2,-24(fp)
   11ed4:	1004403a 	cmpge	r2,r2,zero
   11ed8:	1000071e 	bne	r2,zero,11ef8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
   11edc:	0011f100 	call	11f10 <alt_get_errno>
   11ee0:	1007883a 	mov	r3,r2
   11ee4:	e0bffa17 	ldw	r2,-24(fp)
   11ee8:	0085c83a 	sub	r2,zero,r2
   11eec:	18800015 	stw	r2,0(r3)
    rc = -1;
   11ef0:	00bfffc4 	movi	r2,-1
   11ef4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
   11ef8:	e0bffa17 	ldw	r2,-24(fp)
}
   11efc:	e037883a 	mov	sp,fp
   11f00:	dfc00117 	ldw	ra,4(sp)
   11f04:	df000017 	ldw	fp,0(sp)
   11f08:	dec00204 	addi	sp,sp,8
   11f0c:	f800283a 	ret

00011f10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   11f10:	defffd04 	addi	sp,sp,-12
   11f14:	dfc00215 	stw	ra,8(sp)
   11f18:	df000115 	stw	fp,4(sp)
   11f1c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   11f20:	00800074 	movhi	r2,1
   11f24:	109aed04 	addi	r2,r2,27572
   11f28:	10800017 	ldw	r2,0(r2)
   11f2c:	1005003a 	cmpeq	r2,r2,zero
   11f30:	1000061e 	bne	r2,zero,11f4c <alt_get_errno+0x3c>
   11f34:	00800074 	movhi	r2,1
   11f38:	109aed04 	addi	r2,r2,27572
   11f3c:	10800017 	ldw	r2,0(r2)
   11f40:	103ee83a 	callr	r2
   11f44:	e0bfff15 	stw	r2,-4(fp)
   11f48:	00000306 	br	11f58 <alt_get_errno+0x48>
   11f4c:	008000b4 	movhi	r2,2
   11f50:	10a1be04 	addi	r2,r2,-30984
   11f54:	e0bfff15 	stw	r2,-4(fp)
   11f58:	e0bfff17 	ldw	r2,-4(fp)
}
   11f5c:	e037883a 	mov	sp,fp
   11f60:	dfc00117 	ldw	ra,4(sp)
   11f64:	df000017 	ldw	fp,0(sp)
   11f68:	dec00204 	addi	sp,sp,8
   11f6c:	f800283a 	ret

00011f70 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   11f70:	defffd04 	addi	sp,sp,-12
   11f74:	dfc00215 	stw	ra,8(sp)
   11f78:	df000115 	stw	fp,4(sp)
   11f7c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   11f80:	0009883a 	mov	r4,zero
   11f84:	00124380 	call	12438 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   11f88:	001246c0 	call	1246c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   11f8c:	01000074 	movhi	r4,1
   11f90:	21142b04 	addi	r4,r4,20652
   11f94:	01400074 	movhi	r5,1
   11f98:	29542b04 	addi	r5,r5,20652
   11f9c:	01800074 	movhi	r6,1
   11fa0:	31942b04 	addi	r6,r6,20652
   11fa4:	00137e00 	call	137e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   11fa8:	00133580 	call	13358 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   11fac:	01000074 	movhi	r4,1
   11fb0:	210cef04 	addi	r4,r4,13244
   11fb4:	0013fdc0 	call	13fdc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   11fb8:	d126e117 	ldw	r4,-25724(gp)
   11fbc:	d166e217 	ldw	r5,-25720(gp)
   11fc0:	d1a6e317 	ldw	r6,-25716(gp)
   11fc4:	00027300 	call	2730 <main>
   11fc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   11fcc:	01000044 	movi	r4,1
   11fd0:	00119580 	call	11958 <close>
  exit (result);
   11fd4:	e13fff17 	ldw	r4,-4(fp)
   11fd8:	0013ff00 	call	13ff0 <exit>

00011fdc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   11fdc:	defffe04 	addi	sp,sp,-8
   11fe0:	df000115 	stw	fp,4(sp)
   11fe4:	df000104 	addi	fp,sp,4
   11fe8:	e13fff15 	stw	r4,-4(fp)
}
   11fec:	e037883a 	mov	sp,fp
   11ff0:	df000017 	ldw	fp,0(sp)
   11ff4:	dec00104 	addi	sp,sp,4
   11ff8:	f800283a 	ret

00011ffc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   11ffc:	defffe04 	addi	sp,sp,-8
   12000:	df000115 	stw	fp,4(sp)
   12004:	df000104 	addi	fp,sp,4
   12008:	e13fff15 	stw	r4,-4(fp)
}
   1200c:	e037883a 	mov	sp,fp
   12010:	df000017 	ldw	fp,0(sp)
   12014:	dec00104 	addi	sp,sp,4
   12018:	f800283a 	ret

0001201c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   1201c:	defff704 	addi	sp,sp,-36
   12020:	dfc00815 	stw	ra,32(sp)
   12024:	df000715 	stw	fp,28(sp)
   12028:	df000704 	addi	fp,sp,28
   1202c:	e13ffb15 	stw	r4,-20(fp)
   12030:	e17ffc15 	stw	r5,-16(fp)
   12034:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   12038:	e0bffb17 	ldw	r2,-20(fp)
   1203c:	1004803a 	cmplt	r2,r2,zero
   12040:	1000081e 	bne	r2,zero,12064 <read+0x48>
   12044:	e0bffb17 	ldw	r2,-20(fp)
   12048:	10800324 	muli	r2,r2,12
   1204c:	1007883a 	mov	r3,r2
   12050:	00800074 	movhi	r2,1
   12054:	10966904 	addi	r2,r2,22948
   12058:	1887883a 	add	r3,r3,r2
   1205c:	e0ffff15 	stw	r3,-4(fp)
   12060:	00000106 	br	12068 <read+0x4c>
   12064:	e03fff15 	stw	zero,-4(fp)
   12068:	e0bfff17 	ldw	r2,-4(fp)
   1206c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   12070:	e0bffa17 	ldw	r2,-24(fp)
   12074:	1005003a 	cmpeq	r2,r2,zero
   12078:	1000241e 	bne	r2,zero,1210c <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1207c:	e0bffa17 	ldw	r2,-24(fp)
   12080:	10800217 	ldw	r2,8(r2)
   12084:	108000cc 	andi	r2,r2,3
   12088:	10800060 	cmpeqi	r2,r2,1
   1208c:	10001a1e 	bne	r2,zero,120f8 <read+0xdc>
   12090:	e0bffa17 	ldw	r2,-24(fp)
   12094:	10800017 	ldw	r2,0(r2)
   12098:	10800517 	ldw	r2,20(r2)
   1209c:	1005003a 	cmpeq	r2,r2,zero
   120a0:	1000151e 	bne	r2,zero,120f8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   120a4:	e0bffa17 	ldw	r2,-24(fp)
   120a8:	10800017 	ldw	r2,0(r2)
   120ac:	10800517 	ldw	r2,20(r2)
   120b0:	e17ffc17 	ldw	r5,-16(fp)
   120b4:	e1bffd17 	ldw	r6,-12(fp)
   120b8:	e13ffa17 	ldw	r4,-24(fp)
   120bc:	103ee83a 	callr	r2
   120c0:	e0bff915 	stw	r2,-28(fp)
   120c4:	e0bff917 	ldw	r2,-28(fp)
   120c8:	1004403a 	cmpge	r2,r2,zero
   120cc:	1000071e 	bne	r2,zero,120ec <read+0xd0>
        {
          ALT_ERRNO = -rval;
   120d0:	001213c0 	call	1213c <alt_get_errno>
   120d4:	e0fff917 	ldw	r3,-28(fp)
   120d8:	00c7c83a 	sub	r3,zero,r3
   120dc:	10c00015 	stw	r3,0(r2)
          return -1;
   120e0:	00bfffc4 	movi	r2,-1
   120e4:	e0bffe15 	stw	r2,-8(fp)
   120e8:	00000e06 	br	12124 <read+0x108>
        }
        return rval;
   120ec:	e0bff917 	ldw	r2,-28(fp)
   120f0:	e0bffe15 	stw	r2,-8(fp)
   120f4:	00000b06 	br	12124 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
   120f8:	001213c0 	call	1213c <alt_get_errno>
   120fc:	1007883a 	mov	r3,r2
   12100:	00800344 	movi	r2,13
   12104:	18800015 	stw	r2,0(r3)
   12108:	00000406 	br	1211c <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   1210c:	001213c0 	call	1213c <alt_get_errno>
   12110:	1007883a 	mov	r3,r2
   12114:	00801444 	movi	r2,81
   12118:	18800015 	stw	r2,0(r3)
  }
  return -1;
   1211c:	00bfffc4 	movi	r2,-1
   12120:	e0bffe15 	stw	r2,-8(fp)
   12124:	e0bffe17 	ldw	r2,-8(fp)
}
   12128:	e037883a 	mov	sp,fp
   1212c:	dfc00117 	ldw	ra,4(sp)
   12130:	df000017 	ldw	fp,0(sp)
   12134:	dec00204 	addi	sp,sp,8
   12138:	f800283a 	ret

0001213c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1213c:	defffd04 	addi	sp,sp,-12
   12140:	dfc00215 	stw	ra,8(sp)
   12144:	df000115 	stw	fp,4(sp)
   12148:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   1214c:	00800074 	movhi	r2,1
   12150:	109aed04 	addi	r2,r2,27572
   12154:	10800017 	ldw	r2,0(r2)
   12158:	1005003a 	cmpeq	r2,r2,zero
   1215c:	1000061e 	bne	r2,zero,12178 <alt_get_errno+0x3c>
   12160:	00800074 	movhi	r2,1
   12164:	109aed04 	addi	r2,r2,27572
   12168:	10800017 	ldw	r2,0(r2)
   1216c:	103ee83a 	callr	r2
   12170:	e0bfff15 	stw	r2,-4(fp)
   12174:	00000306 	br	12184 <alt_get_errno+0x48>
   12178:	008000b4 	movhi	r2,2
   1217c:	10a1be04 	addi	r2,r2,-30984
   12180:	e0bfff15 	stw	r2,-4(fp)
   12184:	e0bfff17 	ldw	r2,-4(fp)
}
   12188:	e037883a 	mov	sp,fp
   1218c:	dfc00117 	ldw	ra,4(sp)
   12190:	df000017 	ldw	fp,0(sp)
   12194:	dec00204 	addi	sp,sp,8
   12198:	f800283a 	ret

0001219c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   1219c:	defffe04 	addi	sp,sp,-8
   121a0:	df000115 	stw	fp,4(sp)
   121a4:	df000104 	addi	fp,sp,4
   121a8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   121ac:	e0bfff17 	ldw	r2,-4(fp)
   121b0:	108000d0 	cmplti	r2,r2,3
   121b4:	10000d1e 	bne	r2,zero,121ec <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   121b8:	e0bfff17 	ldw	r2,-4(fp)
   121bc:	00c00074 	movhi	r3,1
   121c0:	18d66904 	addi	r3,r3,22948
   121c4:	10800324 	muli	r2,r2,12
   121c8:	10c5883a 	add	r2,r2,r3
   121cc:	10800204 	addi	r2,r2,8
   121d0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   121d4:	e0bfff17 	ldw	r2,-4(fp)
   121d8:	00c00074 	movhi	r3,1
   121dc:	18d66904 	addi	r3,r3,22948
   121e0:	10800324 	muli	r2,r2,12
   121e4:	10c5883a 	add	r2,r2,r3
   121e8:	10000015 	stw	zero,0(r2)
  }
}
   121ec:	e037883a 	mov	sp,fp
   121f0:	df000017 	ldw	fp,0(sp)
   121f4:	dec00104 	addi	sp,sp,4
   121f8:	f800283a 	ret

000121fc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   121fc:	defff804 	addi	sp,sp,-32
   12200:	df000715 	stw	fp,28(sp)
   12204:	df000704 	addi	fp,sp,28
   12208:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   1220c:	0005303a 	rdctl	r2,status
   12210:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12214:	e0fffb17 	ldw	r3,-20(fp)
   12218:	00bfff84 	movi	r2,-2
   1221c:	1884703a 	and	r2,r3,r2
   12220:	1001703a 	wrctl	status,r2
  
  return context;
   12224:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   12228:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   1222c:	d0a00d17 	ldw	r2,-32716(gp)
   12230:	10c000c4 	addi	r3,r2,3
   12234:	00bfff04 	movi	r2,-4
   12238:	1884703a 	and	r2,r3,r2
   1223c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   12240:	d0e00d17 	ldw	r3,-32716(gp)
   12244:	e0bffe17 	ldw	r2,-8(fp)
   12248:	1887883a 	add	r3,r3,r2
   1224c:	00802034 	movhi	r2,128
   12250:	10800004 	addi	r2,r2,0
   12254:	10c0072e 	bgeu	r2,r3,12274 <sbrk+0x78>
   12258:	e0bffd17 	ldw	r2,-12(fp)
   1225c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12260:	e0bffa17 	ldw	r2,-24(fp)
   12264:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   12268:	00bfffc4 	movi	r2,-1
   1226c:	e0bfff15 	stw	r2,-4(fp)
   12270:	00000c06 	br	122a4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   12274:	d0a00d17 	ldw	r2,-32716(gp)
   12278:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
   1227c:	d0e00d17 	ldw	r3,-32716(gp)
   12280:	e0bffe17 	ldw	r2,-8(fp)
   12284:	1885883a 	add	r2,r3,r2
   12288:	d0a00d15 	stw	r2,-32716(gp)
   1228c:	e0bffd17 	ldw	r2,-12(fp)
   12290:	e0bff915 	stw	r2,-28(fp)
   12294:	e0bff917 	ldw	r2,-28(fp)
   12298:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   1229c:	e0bffc17 	ldw	r2,-16(fp)
   122a0:	e0bfff15 	stw	r2,-4(fp)
   122a4:	e0bfff17 	ldw	r2,-4(fp)
} 
   122a8:	e037883a 	mov	sp,fp
   122ac:	df000017 	ldw	fp,0(sp)
   122b0:	dec00104 	addi	sp,sp,4
   122b4:	f800283a 	ret

000122b8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   122b8:	defff704 	addi	sp,sp,-36
   122bc:	dfc00815 	stw	ra,32(sp)
   122c0:	df000715 	stw	fp,28(sp)
   122c4:	df000704 	addi	fp,sp,28
   122c8:	e13ffb15 	stw	r4,-20(fp)
   122cc:	e17ffc15 	stw	r5,-16(fp)
   122d0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   122d4:	e0bffb17 	ldw	r2,-20(fp)
   122d8:	1004803a 	cmplt	r2,r2,zero
   122dc:	1000081e 	bne	r2,zero,12300 <write+0x48>
   122e0:	e0bffb17 	ldw	r2,-20(fp)
   122e4:	10800324 	muli	r2,r2,12
   122e8:	1007883a 	mov	r3,r2
   122ec:	00800074 	movhi	r2,1
   122f0:	10966904 	addi	r2,r2,22948
   122f4:	1887883a 	add	r3,r3,r2
   122f8:	e0ffff15 	stw	r3,-4(fp)
   122fc:	00000106 	br	12304 <write+0x4c>
   12300:	e03fff15 	stw	zero,-4(fp)
   12304:	e0bfff17 	ldw	r2,-4(fp)
   12308:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
   1230c:	e0bffa17 	ldw	r2,-24(fp)
   12310:	1005003a 	cmpeq	r2,r2,zero
   12314:	1000241e 	bne	r2,zero,123a8 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   12318:	e0bffa17 	ldw	r2,-24(fp)
   1231c:	10800217 	ldw	r2,8(r2)
   12320:	108000cc 	andi	r2,r2,3
   12324:	1005003a 	cmpeq	r2,r2,zero
   12328:	10001a1e 	bne	r2,zero,12394 <write+0xdc>
   1232c:	e0bffa17 	ldw	r2,-24(fp)
   12330:	10800017 	ldw	r2,0(r2)
   12334:	10800617 	ldw	r2,24(r2)
   12338:	1005003a 	cmpeq	r2,r2,zero
   1233c:	1000151e 	bne	r2,zero,12394 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   12340:	e0bffa17 	ldw	r2,-24(fp)
   12344:	10800017 	ldw	r2,0(r2)
   12348:	10800617 	ldw	r2,24(r2)
   1234c:	e17ffc17 	ldw	r5,-16(fp)
   12350:	e1bffd17 	ldw	r6,-12(fp)
   12354:	e13ffa17 	ldw	r4,-24(fp)
   12358:	103ee83a 	callr	r2
   1235c:	e0bff915 	stw	r2,-28(fp)
   12360:	e0bff917 	ldw	r2,-28(fp)
   12364:	1004403a 	cmpge	r2,r2,zero
   12368:	1000071e 	bne	r2,zero,12388 <write+0xd0>
      {
        ALT_ERRNO = -rval;
   1236c:	00123d80 	call	123d8 <alt_get_errno>
   12370:	e0fff917 	ldw	r3,-28(fp)
   12374:	00c7c83a 	sub	r3,zero,r3
   12378:	10c00015 	stw	r3,0(r2)
        return -1;
   1237c:	00bfffc4 	movi	r2,-1
   12380:	e0bffe15 	stw	r2,-8(fp)
   12384:	00000e06 	br	123c0 <write+0x108>
      }
      return rval;
   12388:	e0bff917 	ldw	r2,-28(fp)
   1238c:	e0bffe15 	stw	r2,-8(fp)
   12390:	00000b06 	br	123c0 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
   12394:	00123d80 	call	123d8 <alt_get_errno>
   12398:	1007883a 	mov	r3,r2
   1239c:	00800344 	movi	r2,13
   123a0:	18800015 	stw	r2,0(r3)
   123a4:	00000406 	br	123b8 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   123a8:	00123d80 	call	123d8 <alt_get_errno>
   123ac:	1007883a 	mov	r3,r2
   123b0:	00801444 	movi	r2,81
   123b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   123b8:	00bfffc4 	movi	r2,-1
   123bc:	e0bffe15 	stw	r2,-8(fp)
   123c0:	e0bffe17 	ldw	r2,-8(fp)
}
   123c4:	e037883a 	mov	sp,fp
   123c8:	dfc00117 	ldw	ra,4(sp)
   123cc:	df000017 	ldw	fp,0(sp)
   123d0:	dec00204 	addi	sp,sp,8
   123d4:	f800283a 	ret

000123d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   123d8:	defffd04 	addi	sp,sp,-12
   123dc:	dfc00215 	stw	ra,8(sp)
   123e0:	df000115 	stw	fp,4(sp)
   123e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   123e8:	00800074 	movhi	r2,1
   123ec:	109aed04 	addi	r2,r2,27572
   123f0:	10800017 	ldw	r2,0(r2)
   123f4:	1005003a 	cmpeq	r2,r2,zero
   123f8:	1000061e 	bne	r2,zero,12414 <alt_get_errno+0x3c>
   123fc:	00800074 	movhi	r2,1
   12400:	109aed04 	addi	r2,r2,27572
   12404:	10800017 	ldw	r2,0(r2)
   12408:	103ee83a 	callr	r2
   1240c:	e0bfff15 	stw	r2,-4(fp)
   12410:	00000306 	br	12420 <alt_get_errno+0x48>
   12414:	008000b4 	movhi	r2,2
   12418:	10a1be04 	addi	r2,r2,-30984
   1241c:	e0bfff15 	stw	r2,-4(fp)
   12420:	e0bfff17 	ldw	r2,-4(fp)
}
   12424:	e037883a 	mov	sp,fp
   12428:	dfc00117 	ldw	ra,4(sp)
   1242c:	df000017 	ldw	fp,0(sp)
   12430:	dec00204 	addi	sp,sp,8
   12434:	f800283a 	ret

00012438 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   12438:	defffd04 	addi	sp,sp,-12
   1243c:	dfc00215 	stw	ra,8(sp)
   12440:	df000115 	stw	fp,4(sp)
   12444:	df000104 	addi	fp,sp,4
   12448:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
   1244c:	0013cc00 	call	13cc0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   12450:	00800044 	movi	r2,1
   12454:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   12458:	e037883a 	mov	sp,fp
   1245c:	dfc00117 	ldw	ra,4(sp)
   12460:	df000017 	ldw	fp,0(sp)
   12464:	dec00204 	addi	sp,sp,8
   12468:	f800283a 	ret

0001246c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   1246c:	defffe04 	addi	sp,sp,-8
   12470:	dfc00115 	stw	ra,4(sp)
   12474:	df000015 	stw	fp,0(sp)
   12478:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   1247c:	01002034 	movhi	r4,128
   12480:	21081004 	addi	r4,r4,8256
   12484:	000b883a 	mov	r5,zero
   12488:	000d883a 	mov	r6,zero
   1248c:	01c0fa04 	movi	r7,1000
   12490:	001301c0 	call	1301c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   12494:	01000074 	movhi	r4,1
   12498:	2116d304 	addi	r4,r4,23372
   1249c:	000b883a 	mov	r5,zero
   124a0:	01800204 	movi	r6,8
   124a4:	00126480 	call	12648 <altera_avalon_jtag_uart_init>
   124a8:	01000074 	movhi	r4,1
   124ac:	2116c904 	addi	r4,r4,23332
   124b0:	00124c80 	call	124c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   124b4:	e037883a 	mov	sp,fp
   124b8:	dfc00117 	ldw	ra,4(sp)
   124bc:	df000017 	ldw	fp,0(sp)
   124c0:	dec00204 	addi	sp,sp,8
   124c4:	f800283a 	ret

000124c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   124c8:	defffd04 	addi	sp,sp,-12
   124cc:	dfc00215 	stw	ra,8(sp)
   124d0:	df000115 	stw	fp,4(sp)
   124d4:	df000104 	addi	fp,sp,4
   124d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   124dc:	e13fff17 	ldw	r4,-4(fp)
   124e0:	01400074 	movhi	r5,1
   124e4:	295aea04 	addi	r5,r5,27560
   124e8:	00132440 	call	13244 <alt_dev_llist_insert>
}
   124ec:	e037883a 	mov	sp,fp
   124f0:	dfc00117 	ldw	ra,4(sp)
   124f4:	df000017 	ldw	fp,0(sp)
   124f8:	dec00204 	addi	sp,sp,8
   124fc:	f800283a 	ret

00012500 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   12500:	defffa04 	addi	sp,sp,-24
   12504:	dfc00515 	stw	ra,20(sp)
   12508:	df000415 	stw	fp,16(sp)
   1250c:	df000404 	addi	fp,sp,16
   12510:	e13ffd15 	stw	r4,-12(fp)
   12514:	e17ffe15 	stw	r5,-8(fp)
   12518:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   1251c:	e0bffd17 	ldw	r2,-12(fp)
   12520:	10800017 	ldw	r2,0(r2)
   12524:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   12528:	e0bffc17 	ldw	r2,-16(fp)
   1252c:	11000a04 	addi	r4,r2,40
   12530:	e0bffd17 	ldw	r2,-12(fp)
   12534:	11c00217 	ldw	r7,8(r2)
   12538:	e17ffe17 	ldw	r5,-8(fp)
   1253c:	e1bfff17 	ldw	r6,-4(fp)
   12540:	0012b480 	call	12b48 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   12544:	e037883a 	mov	sp,fp
   12548:	dfc00117 	ldw	ra,4(sp)
   1254c:	df000017 	ldw	fp,0(sp)
   12550:	dec00204 	addi	sp,sp,8
   12554:	f800283a 	ret

00012558 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   12558:	defffa04 	addi	sp,sp,-24
   1255c:	dfc00515 	stw	ra,20(sp)
   12560:	df000415 	stw	fp,16(sp)
   12564:	df000404 	addi	fp,sp,16
   12568:	e13ffd15 	stw	r4,-12(fp)
   1256c:	e17ffe15 	stw	r5,-8(fp)
   12570:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   12574:	e0bffd17 	ldw	r2,-12(fp)
   12578:	10800017 	ldw	r2,0(r2)
   1257c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   12580:	e0bffc17 	ldw	r2,-16(fp)
   12584:	11000a04 	addi	r4,r2,40
   12588:	e0bffd17 	ldw	r2,-12(fp)
   1258c:	11c00217 	ldw	r7,8(r2)
   12590:	e17ffe17 	ldw	r5,-8(fp)
   12594:	e1bfff17 	ldw	r6,-4(fp)
   12598:	0012d6c0 	call	12d6c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   1259c:	e037883a 	mov	sp,fp
   125a0:	dfc00117 	ldw	ra,4(sp)
   125a4:	df000017 	ldw	fp,0(sp)
   125a8:	dec00204 	addi	sp,sp,8
   125ac:	f800283a 	ret

000125b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   125b0:	defffc04 	addi	sp,sp,-16
   125b4:	dfc00315 	stw	ra,12(sp)
   125b8:	df000215 	stw	fp,8(sp)
   125bc:	df000204 	addi	fp,sp,8
   125c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   125c4:	e0bfff17 	ldw	r2,-4(fp)
   125c8:	10800017 	ldw	r2,0(r2)
   125cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   125d0:	e0bffe17 	ldw	r2,-8(fp)
   125d4:	11000a04 	addi	r4,r2,40
   125d8:	e0bfff17 	ldw	r2,-4(fp)
   125dc:	11400217 	ldw	r5,8(r2)
   125e0:	00129e00 	call	129e0 <altera_avalon_jtag_uart_close>
}
   125e4:	e037883a 	mov	sp,fp
   125e8:	dfc00117 	ldw	ra,4(sp)
   125ec:	df000017 	ldw	fp,0(sp)
   125f0:	dec00204 	addi	sp,sp,8
   125f4:	f800283a 	ret

000125f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   125f8:	defffa04 	addi	sp,sp,-24
   125fc:	dfc00515 	stw	ra,20(sp)
   12600:	df000415 	stw	fp,16(sp)
   12604:	df000404 	addi	fp,sp,16
   12608:	e13ffd15 	stw	r4,-12(fp)
   1260c:	e17ffe15 	stw	r5,-8(fp)
   12610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   12614:	e0bffd17 	ldw	r2,-12(fp)
   12618:	10800017 	ldw	r2,0(r2)
   1261c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   12620:	e0bffc17 	ldw	r2,-16(fp)
   12624:	11000a04 	addi	r4,r2,40
   12628:	e17ffe17 	ldw	r5,-8(fp)
   1262c:	e1bfff17 	ldw	r6,-4(fp)
   12630:	0012a540 	call	12a54 <altera_avalon_jtag_uart_ioctl>
}
   12634:	e037883a 	mov	sp,fp
   12638:	dfc00117 	ldw	ra,4(sp)
   1263c:	df000017 	ldw	fp,0(sp)
   12640:	dec00204 	addi	sp,sp,8
   12644:	f800283a 	ret

00012648 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   12648:	defffa04 	addi	sp,sp,-24
   1264c:	dfc00515 	stw	ra,20(sp)
   12650:	df000415 	stw	fp,16(sp)
   12654:	df000404 	addi	fp,sp,16
   12658:	e13ffd15 	stw	r4,-12(fp)
   1265c:	e17ffe15 	stw	r5,-8(fp)
   12660:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12664:	e0fffd17 	ldw	r3,-12(fp)
   12668:	00800044 	movi	r2,1
   1266c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   12670:	e0bffd17 	ldw	r2,-12(fp)
   12674:	10800017 	ldw	r2,0(r2)
   12678:	11000104 	addi	r4,r2,4
   1267c:	e0bffd17 	ldw	r2,-12(fp)
   12680:	10800817 	ldw	r2,32(r2)
   12684:	1007883a 	mov	r3,r2
   12688:	2005883a 	mov	r2,r4
   1268c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   12690:	e13ffe17 	ldw	r4,-8(fp)
   12694:	e17fff17 	ldw	r5,-4(fp)
   12698:	d8000015 	stw	zero,0(sp)
   1269c:	01800074 	movhi	r6,1
   126a0:	3189c204 	addi	r6,r6,9992
   126a4:	e1fffd17 	ldw	r7,-12(fp)
   126a8:	00134500 	call	13450 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   126ac:	e0bffd17 	ldw	r2,-12(fp)
   126b0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   126b4:	e0bffd17 	ldw	r2,-12(fp)
   126b8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   126bc:	008000b4 	movhi	r2,2
   126c0:	10a1c604 	addi	r2,r2,-30952
   126c4:	10800017 	ldw	r2,0(r2)
   126c8:	100b883a 	mov	r5,r2
   126cc:	01800074 	movhi	r6,1
   126d0:	318a4c04 	addi	r6,r6,10544
   126d4:	e1fffd17 	ldw	r7,-12(fp)
   126d8:	00130ac0 	call	130ac <alt_alarm_start>
   126dc:	1004403a 	cmpge	r2,r2,zero
   126e0:	1000041e 	bne	r2,zero,126f4 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   126e4:	e0fffd17 	ldw	r3,-12(fp)
   126e8:	00a00034 	movhi	r2,32768
   126ec:	10bfffc4 	addi	r2,r2,-1
   126f0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   126f4:	e037883a 	mov	sp,fp
   126f8:	dfc00117 	ldw	ra,4(sp)
   126fc:	df000017 	ldw	fp,0(sp)
   12700:	dec00204 	addi	sp,sp,8
   12704:	f800283a 	ret

00012708 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   12708:	defff804 	addi	sp,sp,-32
   1270c:	df000715 	stw	fp,28(sp)
   12710:	df000704 	addi	fp,sp,28
   12714:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   12718:	e0bfff17 	ldw	r2,-4(fp)
   1271c:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
   12720:	e0bffe17 	ldw	r2,-8(fp)
   12724:	10800017 	ldw	r2,0(r2)
   12728:	e0bffd15 	stw	r2,-12(fp)
   1272c:	00000006 	br	12730 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12730:	e0bffd17 	ldw	r2,-12(fp)
   12734:	10800104 	addi	r2,r2,4
   12738:	10800037 	ldwio	r2,0(r2)
   1273c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   12740:	e0bffc17 	ldw	r2,-16(fp)
   12744:	1080c00c 	andi	r2,r2,768
   12748:	1005003a 	cmpeq	r2,r2,zero
   1274c:	1000741e 	bne	r2,zero,12920 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   12750:	e0bffc17 	ldw	r2,-16(fp)
   12754:	1080400c 	andi	r2,r2,256
   12758:	1005003a 	cmpeq	r2,r2,zero
   1275c:	1000351e 	bne	r2,zero,12834 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   12760:	00800074 	movhi	r2,1
   12764:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12768:	e0bffe17 	ldw	r2,-8(fp)
   1276c:	10800a17 	ldw	r2,40(r2)
   12770:	10800044 	addi	r2,r2,1
   12774:	1081ffcc 	andi	r2,r2,2047
   12778:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   1277c:	e0bffe17 	ldw	r2,-8(fp)
   12780:	10c00b17 	ldw	r3,44(r2)
   12784:	e0bffa17 	ldw	r2,-24(fp)
   12788:	18801626 	beq	r3,r2,127e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   1278c:	e0bffd17 	ldw	r2,-12(fp)
   12790:	10800037 	ldwio	r2,0(r2)
   12794:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   12798:	e0bffb17 	ldw	r2,-20(fp)
   1279c:	10a0000c 	andi	r2,r2,32768
   127a0:	1005003a 	cmpeq	r2,r2,zero
   127a4:	10000f1e 	bne	r2,zero,127e4 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   127a8:	e0bffe17 	ldw	r2,-8(fp)
   127ac:	10c00a17 	ldw	r3,40(r2)
   127b0:	e0bffb17 	ldw	r2,-20(fp)
   127b4:	1009883a 	mov	r4,r2
   127b8:	e0bffe17 	ldw	r2,-8(fp)
   127bc:	1885883a 	add	r2,r3,r2
   127c0:	10800e04 	addi	r2,r2,56
   127c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   127c8:	e0bffe17 	ldw	r2,-8(fp)
   127cc:	10800a17 	ldw	r2,40(r2)
   127d0:	10800044 	addi	r2,r2,1
   127d4:	10c1ffcc 	andi	r3,r2,2047
   127d8:	e0bffe17 	ldw	r2,-8(fp)
   127dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   127e0:	003fe106 	br	12768 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   127e4:	e0bffb17 	ldw	r2,-20(fp)
   127e8:	10bfffec 	andhi	r2,r2,65535
   127ec:	1005003a 	cmpeq	r2,r2,zero
   127f0:	1000101e 	bne	r2,zero,12834 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   127f4:	e0bffe17 	ldw	r2,-8(fp)
   127f8:	10c00817 	ldw	r3,32(r2)
   127fc:	00bfff84 	movi	r2,-2
   12800:	1886703a 	and	r3,r3,r2
   12804:	e0bffe17 	ldw	r2,-8(fp)
   12808:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   1280c:	e0bffd17 	ldw	r2,-12(fp)
   12810:	11000104 	addi	r4,r2,4
   12814:	e0bffe17 	ldw	r2,-8(fp)
   12818:	10800817 	ldw	r2,32(r2)
   1281c:	1007883a 	mov	r3,r2
   12820:	2005883a 	mov	r2,r4
   12824:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12828:	e0bffd17 	ldw	r2,-12(fp)
   1282c:	10800104 	addi	r2,r2,4
   12830:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   12834:	e0bffc17 	ldw	r2,-16(fp)
   12838:	1080800c 	andi	r2,r2,512
   1283c:	1005003a 	cmpeq	r2,r2,zero
   12840:	103fbb1e 	bne	r2,zero,12730 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   12844:	e0bffc17 	ldw	r2,-16(fp)
   12848:	10bfffec 	andhi	r2,r2,65535
   1284c:	1004d43a 	srli	r2,r2,16
   12850:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   12854:	00001506 	br	128ac <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   12858:	e13ffd17 	ldw	r4,-12(fp)
   1285c:	e0bffe17 	ldw	r2,-8(fp)
   12860:	10c00d17 	ldw	r3,52(r2)
   12864:	e0bffe17 	ldw	r2,-8(fp)
   12868:	1885883a 	add	r2,r3,r2
   1286c:	10820e04 	addi	r2,r2,2104
   12870:	10800003 	ldbu	r2,0(r2)
   12874:	10c03fcc 	andi	r3,r2,255
   12878:	18c0201c 	xori	r3,r3,128
   1287c:	18ffe004 	addi	r3,r3,-128
   12880:	2005883a 	mov	r2,r4
   12884:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12888:	e0bffe17 	ldw	r2,-8(fp)
   1288c:	10800d17 	ldw	r2,52(r2)
   12890:	10800044 	addi	r2,r2,1
   12894:	10c1ffcc 	andi	r3,r2,2047
   12898:	e0bffe17 	ldw	r2,-8(fp)
   1289c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   128a0:	e0bff917 	ldw	r2,-28(fp)
   128a4:	10bfffc4 	addi	r2,r2,-1
   128a8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   128ac:	e0bff917 	ldw	r2,-28(fp)
   128b0:	1005003a 	cmpeq	r2,r2,zero
   128b4:	1000051e 	bne	r2,zero,128cc <altera_avalon_jtag_uart_irq+0x1c4>
   128b8:	e0bffe17 	ldw	r2,-8(fp)
   128bc:	10c00d17 	ldw	r3,52(r2)
   128c0:	e0bffe17 	ldw	r2,-8(fp)
   128c4:	10800c17 	ldw	r2,48(r2)
   128c8:	18bfe31e 	bne	r3,r2,12858 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   128cc:	e0bff917 	ldw	r2,-28(fp)
   128d0:	1005003a 	cmpeq	r2,r2,zero
   128d4:	103f961e 	bne	r2,zero,12730 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   128d8:	e0bffe17 	ldw	r2,-8(fp)
   128dc:	10c00817 	ldw	r3,32(r2)
   128e0:	00bfff44 	movi	r2,-3
   128e4:	1886703a 	and	r3,r3,r2
   128e8:	e0bffe17 	ldw	r2,-8(fp)
   128ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   128f0:	e0bffe17 	ldw	r2,-8(fp)
   128f4:	10800017 	ldw	r2,0(r2)
   128f8:	11000104 	addi	r4,r2,4
   128fc:	e0bffe17 	ldw	r2,-8(fp)
   12900:	10800817 	ldw	r2,32(r2)
   12904:	1007883a 	mov	r3,r2
   12908:	2005883a 	mov	r2,r4
   1290c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   12910:	e0bffd17 	ldw	r2,-12(fp)
   12914:	10800104 	addi	r2,r2,4
   12918:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   1291c:	003f8406 	br	12730 <altera_avalon_jtag_uart_irq+0x28>
}
   12920:	e037883a 	mov	sp,fp
   12924:	df000017 	ldw	fp,0(sp)
   12928:	dec00104 	addi	sp,sp,4
   1292c:	f800283a 	ret

00012930 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   12930:	defffc04 	addi	sp,sp,-16
   12934:	df000315 	stw	fp,12(sp)
   12938:	df000304 	addi	fp,sp,12
   1293c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   12940:	e0bfff17 	ldw	r2,-4(fp)
   12944:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   12948:	e0bffe17 	ldw	r2,-8(fp)
   1294c:	10800017 	ldw	r2,0(r2)
   12950:	10800104 	addi	r2,r2,4
   12954:	10800037 	ldwio	r2,0(r2)
   12958:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1295c:	e0bffd17 	ldw	r2,-12(fp)
   12960:	1081000c 	andi	r2,r2,1024
   12964:	1005003a 	cmpeq	r2,r2,zero
   12968:	10000c1e 	bne	r2,zero,1299c <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   1296c:	e0bffe17 	ldw	r2,-8(fp)
   12970:	10800017 	ldw	r2,0(r2)
   12974:	11000104 	addi	r4,r2,4
   12978:	e0bffe17 	ldw	r2,-8(fp)
   1297c:	10800817 	ldw	r2,32(r2)
   12980:	10810014 	ori	r2,r2,1024
   12984:	1007883a 	mov	r3,r2
   12988:	2005883a 	mov	r2,r4
   1298c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   12990:	e0bffe17 	ldw	r2,-8(fp)
   12994:	10000915 	stw	zero,36(r2)
   12998:	00000a06 	br	129c4 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   1299c:	e0bffe17 	ldw	r2,-8(fp)
   129a0:	10c00917 	ldw	r3,36(r2)
   129a4:	00a00034 	movhi	r2,32768
   129a8:	10bfff04 	addi	r2,r2,-4
   129ac:	10c00536 	bltu	r2,r3,129c4 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
   129b0:	e0bffe17 	ldw	r2,-8(fp)
   129b4:	10800917 	ldw	r2,36(r2)
   129b8:	10c00044 	addi	r3,r2,1
   129bc:	e0bffe17 	ldw	r2,-8(fp)
   129c0:	10c00915 	stw	r3,36(r2)
   129c4:	008000b4 	movhi	r2,2
   129c8:	10a1c604 	addi	r2,r2,-30952
   129cc:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   129d0:	e037883a 	mov	sp,fp
   129d4:	df000017 	ldw	fp,0(sp)
   129d8:	dec00104 	addi	sp,sp,4
   129dc:	f800283a 	ret

000129e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   129e0:	defffc04 	addi	sp,sp,-16
   129e4:	df000315 	stw	fp,12(sp)
   129e8:	df000304 	addi	fp,sp,12
   129ec:	e13ffd15 	stw	r4,-12(fp)
   129f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   129f4:	00000706 	br	12a14 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
   129f8:	e0bffe17 	ldw	r2,-8(fp)
   129fc:	1090000c 	andi	r2,r2,16384
   12a00:	1005003a 	cmpeq	r2,r2,zero
   12a04:	1000031e 	bne	r2,zero,12a14 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
   12a08:	00bffd44 	movi	r2,-11
   12a0c:	e0bfff15 	stw	r2,-4(fp)
   12a10:	00000b06 	br	12a40 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   12a14:	e0bffd17 	ldw	r2,-12(fp)
   12a18:	10c00d17 	ldw	r3,52(r2)
   12a1c:	e0bffd17 	ldw	r2,-12(fp)
   12a20:	10800c17 	ldw	r2,48(r2)
   12a24:	18800526 	beq	r3,r2,12a3c <altera_avalon_jtag_uart_close+0x5c>
   12a28:	e0bffd17 	ldw	r2,-12(fp)
   12a2c:	10c00917 	ldw	r3,36(r2)
   12a30:	e0bffd17 	ldw	r2,-12(fp)
   12a34:	10800117 	ldw	r2,4(r2)
   12a38:	18bfef36 	bltu	r3,r2,129f8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   12a3c:	e03fff15 	stw	zero,-4(fp)
   12a40:	e0bfff17 	ldw	r2,-4(fp)
}
   12a44:	e037883a 	mov	sp,fp
   12a48:	df000017 	ldw	fp,0(sp)
   12a4c:	dec00104 	addi	sp,sp,4
   12a50:	f800283a 	ret

00012a54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   12a54:	defff804 	addi	sp,sp,-32
   12a58:	df000715 	stw	fp,28(sp)
   12a5c:	df000704 	addi	fp,sp,28
   12a60:	e13ffb15 	stw	r4,-20(fp)
   12a64:	e17ffc15 	stw	r5,-16(fp)
   12a68:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
   12a6c:	00bff9c4 	movi	r2,-25
   12a70:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
   12a74:	e0bffc17 	ldw	r2,-16(fp)
   12a78:	e0bfff15 	stw	r2,-4(fp)
   12a7c:	e0ffff17 	ldw	r3,-4(fp)
   12a80:	189a8060 	cmpeqi	r2,r3,27137
   12a84:	1000041e 	bne	r2,zero,12a98 <altera_avalon_jtag_uart_ioctl+0x44>
   12a88:	e0ffff17 	ldw	r3,-4(fp)
   12a8c:	189a80a0 	cmpeqi	r2,r3,27138
   12a90:	10001b1e 	bne	r2,zero,12b00 <altera_avalon_jtag_uart_ioctl+0xac>
   12a94:	00002706 	br	12b34 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   12a98:	e0bffb17 	ldw	r2,-20(fp)
   12a9c:	10c00117 	ldw	r3,4(r2)
   12aa0:	00a00034 	movhi	r2,32768
   12aa4:	10bfffc4 	addi	r2,r2,-1
   12aa8:	18802226 	beq	r3,r2,12b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
   12aac:	e0bffd17 	ldw	r2,-12(fp)
   12ab0:	10800017 	ldw	r2,0(r2)
   12ab4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   12ab8:	e0bff917 	ldw	r2,-28(fp)
   12abc:	10800090 	cmplti	r2,r2,2
   12ac0:	1000071e 	bne	r2,zero,12ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
   12ac4:	e0fff917 	ldw	r3,-28(fp)
   12ac8:	00a00034 	movhi	r2,32768
   12acc:	10bfffc4 	addi	r2,r2,-1
   12ad0:	18800326 	beq	r3,r2,12ae0 <altera_avalon_jtag_uart_ioctl+0x8c>
   12ad4:	e0bff917 	ldw	r2,-28(fp)
   12ad8:	e0bffe15 	stw	r2,-8(fp)
   12adc:	00000306 	br	12aec <altera_avalon_jtag_uart_ioctl+0x98>
   12ae0:	00e00034 	movhi	r3,32768
   12ae4:	18ffff84 	addi	r3,r3,-2
   12ae8:	e0fffe15 	stw	r3,-8(fp)
   12aec:	e0bffb17 	ldw	r2,-20(fp)
   12af0:	e0fffe17 	ldw	r3,-8(fp)
   12af4:	10c00115 	stw	r3,4(r2)
      rc = 0;
   12af8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
   12afc:	00000d06 	br	12b34 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   12b00:	e0bffb17 	ldw	r2,-20(fp)
   12b04:	10c00117 	ldw	r3,4(r2)
   12b08:	00a00034 	movhi	r2,32768
   12b0c:	10bfffc4 	addi	r2,r2,-1
   12b10:	18800826 	beq	r3,r2,12b34 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   12b14:	e13ffd17 	ldw	r4,-12(fp)
   12b18:	e0bffb17 	ldw	r2,-20(fp)
   12b1c:	10c00917 	ldw	r3,36(r2)
   12b20:	e0bffb17 	ldw	r2,-20(fp)
   12b24:	10800117 	ldw	r2,4(r2)
   12b28:	1885803a 	cmpltu	r2,r3,r2
   12b2c:	20800015 	stw	r2,0(r4)
      rc = 0;
   12b30:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
   12b34:	e0bffa17 	ldw	r2,-24(fp)
}
   12b38:	e037883a 	mov	sp,fp
   12b3c:	df000017 	ldw	fp,0(sp)
   12b40:	dec00104 	addi	sp,sp,4
   12b44:	f800283a 	ret

00012b48 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   12b48:	defff204 	addi	sp,sp,-56
   12b4c:	dfc00d15 	stw	ra,52(sp)
   12b50:	df000c15 	stw	fp,48(sp)
   12b54:	df000c04 	addi	fp,sp,48
   12b58:	e13ffb15 	stw	r4,-20(fp)
   12b5c:	e17ffc15 	stw	r5,-16(fp)
   12b60:	e1bffd15 	stw	r6,-12(fp)
   12b64:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
   12b68:	e0bffc17 	ldw	r2,-16(fp)
   12b6c:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12b70:	00004806 	br	12c94 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   12b74:	e0bffb17 	ldw	r2,-20(fp)
   12b78:	10800a17 	ldw	r2,40(r2)
   12b7c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   12b80:	e0bffb17 	ldw	r2,-20(fp)
   12b84:	10800b17 	ldw	r2,44(r2)
   12b88:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
   12b8c:	e0fff717 	ldw	r3,-36(fp)
   12b90:	e0bff617 	ldw	r2,-40(fp)
   12b94:	18800536 	bltu	r3,r2,12bac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   12b98:	e0bff717 	ldw	r2,-36(fp)
   12b9c:	e0fff617 	ldw	r3,-40(fp)
   12ba0:	10c5c83a 	sub	r2,r2,r3
   12ba4:	e0bff815 	stw	r2,-32(fp)
   12ba8:	00000406 	br	12bbc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   12bac:	00820004 	movi	r2,2048
   12bb0:	e0fff617 	ldw	r3,-40(fp)
   12bb4:	10c5c83a 	sub	r2,r2,r3
   12bb8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   12bbc:	e0bff817 	ldw	r2,-32(fp)
   12bc0:	1005003a 	cmpeq	r2,r2,zero
   12bc4:	10001f1e 	bne	r2,zero,12c44 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
   12bc8:	e0fffd17 	ldw	r3,-12(fp)
   12bcc:	e0bff817 	ldw	r2,-32(fp)
   12bd0:	1880022e 	bgeu	r3,r2,12bdc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   12bd4:	e0bffd17 	ldw	r2,-12(fp)
   12bd8:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   12bdc:	e0bffb17 	ldw	r2,-20(fp)
   12be0:	10c00e04 	addi	r3,r2,56
   12be4:	e0bff617 	ldw	r2,-40(fp)
   12be8:	1887883a 	add	r3,r3,r2
   12bec:	e0bffa17 	ldw	r2,-24(fp)
   12bf0:	1009883a 	mov	r4,r2
   12bf4:	180b883a 	mov	r5,r3
   12bf8:	e1bff817 	ldw	r6,-32(fp)
   12bfc:	00036840 	call	3684 <memcpy>
      ptr   += n;
   12c00:	e0fff817 	ldw	r3,-32(fp)
   12c04:	e0bffa17 	ldw	r2,-24(fp)
   12c08:	10c5883a 	add	r2,r2,r3
   12c0c:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
   12c10:	e0fffd17 	ldw	r3,-12(fp)
   12c14:	e0bff817 	ldw	r2,-32(fp)
   12c18:	1885c83a 	sub	r2,r3,r2
   12c1c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12c20:	e0fff617 	ldw	r3,-40(fp)
   12c24:	e0bff817 	ldw	r2,-32(fp)
   12c28:	1885883a 	add	r2,r3,r2
   12c2c:	10c1ffcc 	andi	r3,r2,2047
   12c30:	e0bffb17 	ldw	r2,-20(fp)
   12c34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   12c38:	e0bffd17 	ldw	r2,-12(fp)
   12c3c:	10800048 	cmpgei	r2,r2,1
   12c40:	103fcc1e 	bne	r2,zero,12b74 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   12c44:	e0fffa17 	ldw	r3,-24(fp)
   12c48:	e0bffc17 	ldw	r2,-16(fp)
   12c4c:	1880141e 	bne	r3,r2,12ca0 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   12c50:	e0bffe17 	ldw	r2,-8(fp)
   12c54:	1090000c 	andi	r2,r2,16384
   12c58:	1004c03a 	cmpne	r2,r2,zero
   12c5c:	1000101e 	bne	r2,zero,12ca0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   12c60:	e0bffb17 	ldw	r2,-20(fp)
   12c64:	10c00a17 	ldw	r3,40(r2)
   12c68:	e0bff717 	ldw	r2,-36(fp)
   12c6c:	1880051e 	bne	r3,r2,12c84 <altera_avalon_jtag_uart_read+0x13c>
   12c70:	e0bffb17 	ldw	r2,-20(fp)
   12c74:	10c00917 	ldw	r3,36(r2)
   12c78:	e0bffb17 	ldw	r2,-20(fp)
   12c7c:	10800117 	ldw	r2,4(r2)
   12c80:	18bff736 	bltu	r3,r2,12c60 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   12c84:	e0bffb17 	ldw	r2,-20(fp)
   12c88:	10c00a17 	ldw	r3,40(r2)
   12c8c:	e0bff717 	ldw	r2,-36(fp)
   12c90:	18800326 	beq	r3,r2,12ca0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   12c94:	e0bffd17 	ldw	r2,-12(fp)
   12c98:	10800048 	cmpgei	r2,r2,1
   12c9c:	103fb51e 	bne	r2,zero,12b74 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   12ca0:	e0fffa17 	ldw	r3,-24(fp)
   12ca4:	e0bffc17 	ldw	r2,-16(fp)
   12ca8:	18801926 	beq	r3,r2,12d10 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12cac:	0005303a 	rdctl	r2,status
   12cb0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12cb4:	e0fff517 	ldw	r3,-44(fp)
   12cb8:	00bfff84 	movi	r2,-2
   12cbc:	1884703a 	and	r2,r3,r2
   12cc0:	1001703a 	wrctl	status,r2
  
  return context;
   12cc4:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   12cc8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   12ccc:	e0bffb17 	ldw	r2,-20(fp)
   12cd0:	10800817 	ldw	r2,32(r2)
   12cd4:	10c00054 	ori	r3,r2,1
   12cd8:	e0bffb17 	ldw	r2,-20(fp)
   12cdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12ce0:	e0bffb17 	ldw	r2,-20(fp)
   12ce4:	10800017 	ldw	r2,0(r2)
   12ce8:	11000104 	addi	r4,r2,4
   12cec:	e0bffb17 	ldw	r2,-20(fp)
   12cf0:	10800817 	ldw	r2,32(r2)
   12cf4:	1007883a 	mov	r3,r2
   12cf8:	2005883a 	mov	r2,r4
   12cfc:	10c00035 	stwio	r3,0(r2)
   12d00:	e0bff917 	ldw	r2,-28(fp)
   12d04:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12d08:	e0bff417 	ldw	r2,-48(fp)
   12d0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   12d10:	e0fffa17 	ldw	r3,-24(fp)
   12d14:	e0bffc17 	ldw	r2,-16(fp)
   12d18:	18800526 	beq	r3,r2,12d30 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
   12d1c:	e0fffa17 	ldw	r3,-24(fp)
   12d20:	e0bffc17 	ldw	r2,-16(fp)
   12d24:	1887c83a 	sub	r3,r3,r2
   12d28:	e0ffff15 	stw	r3,-4(fp)
   12d2c:	00000906 	br	12d54 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   12d30:	e0bffe17 	ldw	r2,-8(fp)
   12d34:	1090000c 	andi	r2,r2,16384
   12d38:	1005003a 	cmpeq	r2,r2,zero
   12d3c:	1000031e 	bne	r2,zero,12d4c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   12d40:	00bffd44 	movi	r2,-11
   12d44:	e0bfff15 	stw	r2,-4(fp)
   12d48:	00000206 	br	12d54 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   12d4c:	00bffec4 	movi	r2,-5
   12d50:	e0bfff15 	stw	r2,-4(fp)
   12d54:	e0bfff17 	ldw	r2,-4(fp)
}
   12d58:	e037883a 	mov	sp,fp
   12d5c:	dfc00117 	ldw	ra,4(sp)
   12d60:	df000017 	ldw	fp,0(sp)
   12d64:	dec00204 	addi	sp,sp,8
   12d68:	f800283a 	ret

00012d6c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   12d6c:	defff204 	addi	sp,sp,-56
   12d70:	dfc00d15 	stw	ra,52(sp)
   12d74:	df000c15 	stw	fp,48(sp)
   12d78:	df000c04 	addi	fp,sp,48
   12d7c:	e13ffb15 	stw	r4,-20(fp)
   12d80:	e17ffc15 	stw	r5,-16(fp)
   12d84:	e1bffd15 	stw	r6,-12(fp)
   12d88:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   12d8c:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   12d90:	e0bffc17 	ldw	r2,-16(fp)
   12d94:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12d98:	00003a06 	br	12e84 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   12d9c:	e0bffb17 	ldw	r2,-20(fp)
   12da0:	10800c17 	ldw	r2,48(r2)
   12da4:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
   12da8:	e0bffb17 	ldw	r2,-20(fp)
   12dac:	10800d17 	ldw	r2,52(r2)
   12db0:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
   12db4:	e0fffa17 	ldw	r3,-24(fp)
   12db8:	e0bff917 	ldw	r2,-28(fp)
   12dbc:	1880062e 	bgeu	r3,r2,12dd8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   12dc0:	e0fff917 	ldw	r3,-28(fp)
   12dc4:	e0bffa17 	ldw	r2,-24(fp)
   12dc8:	1885c83a 	sub	r2,r3,r2
   12dcc:	10bfffc4 	addi	r2,r2,-1
   12dd0:	e0bff815 	stw	r2,-32(fp)
   12dd4:	00000c06 	br	12e08 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   12dd8:	e0bff917 	ldw	r2,-28(fp)
   12ddc:	1005003a 	cmpeq	r2,r2,zero
   12de0:	1000051e 	bne	r2,zero,12df8 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   12de4:	00820004 	movi	r2,2048
   12de8:	e0fffa17 	ldw	r3,-24(fp)
   12dec:	10c5c83a 	sub	r2,r2,r3
   12df0:	e0bff815 	stw	r2,-32(fp)
   12df4:	00000406 	br	12e08 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   12df8:	0081ffc4 	movi	r2,2047
   12dfc:	e0fffa17 	ldw	r3,-24(fp)
   12e00:	10c5c83a 	sub	r2,r2,r3
   12e04:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
   12e08:	e0bff817 	ldw	r2,-32(fp)
   12e0c:	1005003a 	cmpeq	r2,r2,zero
   12e10:	10001f1e 	bne	r2,zero,12e90 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
   12e14:	e0fffd17 	ldw	r3,-12(fp)
   12e18:	e0bff817 	ldw	r2,-32(fp)
   12e1c:	1880022e 	bgeu	r3,r2,12e28 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   12e20:	e0bffd17 	ldw	r2,-12(fp)
   12e24:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   12e28:	e0bffb17 	ldw	r2,-20(fp)
   12e2c:	10c20e04 	addi	r3,r2,2104
   12e30:	e0bffa17 	ldw	r2,-24(fp)
   12e34:	1885883a 	add	r2,r3,r2
   12e38:	e0fffc17 	ldw	r3,-16(fp)
   12e3c:	1009883a 	mov	r4,r2
   12e40:	180b883a 	mov	r5,r3
   12e44:	e1bff817 	ldw	r6,-32(fp)
   12e48:	00036840 	call	3684 <memcpy>
      ptr   += n;
   12e4c:	e0fff817 	ldw	r3,-32(fp)
   12e50:	e0bffc17 	ldw	r2,-16(fp)
   12e54:	10c5883a 	add	r2,r2,r3
   12e58:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
   12e5c:	e0fffd17 	ldw	r3,-12(fp)
   12e60:	e0bff817 	ldw	r2,-32(fp)
   12e64:	1885c83a 	sub	r2,r3,r2
   12e68:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   12e6c:	e0fffa17 	ldw	r3,-24(fp)
   12e70:	e0bff817 	ldw	r2,-32(fp)
   12e74:	1885883a 	add	r2,r3,r2
   12e78:	10c1ffcc 	andi	r3,r2,2047
   12e7c:	e0bffb17 	ldw	r2,-20(fp)
   12e80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   12e84:	e0bffd17 	ldw	r2,-12(fp)
   12e88:	10800048 	cmpgei	r2,r2,1
   12e8c:	103fc31e 	bne	r2,zero,12d9c <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12e90:	0005303a 	rdctl	r2,status
   12e94:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12e98:	e0fff517 	ldw	r3,-44(fp)
   12e9c:	00bfff84 	movi	r2,-2
   12ea0:	1884703a 	and	r2,r3,r2
   12ea4:	1001703a 	wrctl	status,r2
  
  return context;
   12ea8:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   12eac:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   12eb0:	e0bffb17 	ldw	r2,-20(fp)
   12eb4:	10800817 	ldw	r2,32(r2)
   12eb8:	10c00094 	ori	r3,r2,2
   12ebc:	e0bffb17 	ldw	r2,-20(fp)
   12ec0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   12ec4:	e0bffb17 	ldw	r2,-20(fp)
   12ec8:	10800017 	ldw	r2,0(r2)
   12ecc:	11000104 	addi	r4,r2,4
   12ed0:	e0bffb17 	ldw	r2,-20(fp)
   12ed4:	10800817 	ldw	r2,32(r2)
   12ed8:	1007883a 	mov	r3,r2
   12edc:	2005883a 	mov	r2,r4
   12ee0:	10c00035 	stwio	r3,0(r2)
   12ee4:	e0bff717 	ldw	r2,-36(fp)
   12ee8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   12eec:	e0bff417 	ldw	r2,-48(fp)
   12ef0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   12ef4:	e0bffd17 	ldw	r2,-12(fp)
   12ef8:	10800050 	cmplti	r2,r2,1
   12efc:	1000111e 	bne	r2,zero,12f44 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
   12f00:	e0bffe17 	ldw	r2,-8(fp)
   12f04:	1090000c 	andi	r2,r2,16384
   12f08:	1004c03a 	cmpne	r2,r2,zero
   12f0c:	1000101e 	bne	r2,zero,12f50 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   12f10:	e0bffb17 	ldw	r2,-20(fp)
   12f14:	10c00d17 	ldw	r3,52(r2)
   12f18:	e0bff917 	ldw	r2,-28(fp)
   12f1c:	1880051e 	bne	r3,r2,12f34 <altera_avalon_jtag_uart_write+0x1c8>
   12f20:	e0bffb17 	ldw	r2,-20(fp)
   12f24:	10c00917 	ldw	r3,36(r2)
   12f28:	e0bffb17 	ldw	r2,-20(fp)
   12f2c:	10800117 	ldw	r2,4(r2)
   12f30:	18bff736 	bltu	r3,r2,12f10 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   12f34:	e0bffb17 	ldw	r2,-20(fp)
   12f38:	10c00d17 	ldw	r3,52(r2)
   12f3c:	e0bff917 	ldw	r2,-28(fp)
   12f40:	18800326 	beq	r3,r2,12f50 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
   12f44:	e0bffd17 	ldw	r2,-12(fp)
   12f48:	10800048 	cmpgei	r2,r2,1
   12f4c:	103fcd1e 	bne	r2,zero,12e84 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   12f50:	e0fffc17 	ldw	r3,-16(fp)
   12f54:	e0bff617 	ldw	r2,-40(fp)
   12f58:	18800526 	beq	r3,r2,12f70 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
   12f5c:	e0fffc17 	ldw	r3,-16(fp)
   12f60:	e0bff617 	ldw	r2,-40(fp)
   12f64:	1887c83a 	sub	r3,r3,r2
   12f68:	e0ffff15 	stw	r3,-4(fp)
   12f6c:	00000906 	br	12f94 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
   12f70:	e0bffe17 	ldw	r2,-8(fp)
   12f74:	1090000c 	andi	r2,r2,16384
   12f78:	1005003a 	cmpeq	r2,r2,zero
   12f7c:	1000031e 	bne	r2,zero,12f8c <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
   12f80:	00bffd44 	movi	r2,-11
   12f84:	e0bfff15 	stw	r2,-4(fp)
   12f88:	00000206 	br	12f94 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   12f8c:	00bffec4 	movi	r2,-5
   12f90:	e0bfff15 	stw	r2,-4(fp)
   12f94:	e0bfff17 	ldw	r2,-4(fp)
}
   12f98:	e037883a 	mov	sp,fp
   12f9c:	dfc00117 	ldw	ra,4(sp)
   12fa0:	df000017 	ldw	fp,0(sp)
   12fa4:	dec00204 	addi	sp,sp,8
   12fa8:	f800283a 	ret

00012fac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   12fac:	defffa04 	addi	sp,sp,-24
   12fb0:	dfc00515 	stw	ra,20(sp)
   12fb4:	df000415 	stw	fp,16(sp)
   12fb8:	df000404 	addi	fp,sp,16
   12fbc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   12fc0:	e0bfff17 	ldw	r2,-4(fp)
   12fc4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   12fc8:	e0bfff17 	ldw	r2,-4(fp)
   12fcc:	10800104 	addi	r2,r2,4
   12fd0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   12fd4:	0005303a 	rdctl	r2,status
   12fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   12fdc:	e0fffd17 	ldw	r3,-12(fp)
   12fe0:	00bfff84 	movi	r2,-2
   12fe4:	1884703a 	and	r2,r3,r2
   12fe8:	1001703a 	wrctl	status,r2
  
  return context;
   12fec:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   12ff0:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
   12ff4:	0013bb40 	call	13bb4 <alt_tick>
   12ff8:	e0bffe17 	ldw	r2,-8(fp)
   12ffc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13000:	e0bffc17 	ldw	r2,-16(fp)
   13004:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   13008:	e037883a 	mov	sp,fp
   1300c:	dfc00117 	ldw	ra,4(sp)
   13010:	df000017 	ldw	fp,0(sp)
   13014:	dec00204 	addi	sp,sp,8
   13018:	f800283a 	ret

0001301c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   1301c:	defff804 	addi	sp,sp,-32
   13020:	dfc00715 	stw	ra,28(sp)
   13024:	df000615 	stw	fp,24(sp)
   13028:	df000604 	addi	fp,sp,24
   1302c:	e13ffc15 	stw	r4,-16(fp)
   13030:	e17ffd15 	stw	r5,-12(fp)
   13034:	e1bffe15 	stw	r6,-8(fp)
   13038:	e1ffff15 	stw	r7,-4(fp)
   1303c:	e0bfff17 	ldw	r2,-4(fp)
   13040:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   13044:	008000b4 	movhi	r2,2
   13048:	10a1c604 	addi	r2,r2,-30952
   1304c:	10800017 	ldw	r2,0(r2)
   13050:	1004c03a 	cmpne	r2,r2,zero
   13054:	1000041e 	bne	r2,zero,13068 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
   13058:	00c000b4 	movhi	r3,2
   1305c:	18e1c604 	addi	r3,r3,-30952
   13060:	e0bffb17 	ldw	r2,-20(fp)
   13064:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   13068:	e0bffc17 	ldw	r2,-16(fp)
   1306c:	10800104 	addi	r2,r2,4
   13070:	1007883a 	mov	r3,r2
   13074:	008001c4 	movi	r2,7
   13078:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   1307c:	d8000015 	stw	zero,0(sp)
   13080:	e13ffd17 	ldw	r4,-12(fp)
   13084:	e17ffe17 	ldw	r5,-8(fp)
   13088:	01800074 	movhi	r6,1
   1308c:	318beb04 	addi	r6,r6,12204
   13090:	e1fffc17 	ldw	r7,-16(fp)
   13094:	00134500 	call	13450 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   13098:	e037883a 	mov	sp,fp
   1309c:	dfc00117 	ldw	ra,4(sp)
   130a0:	df000017 	ldw	fp,0(sp)
   130a4:	dec00204 	addi	sp,sp,8
   130a8:	f800283a 	ret

000130ac <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   130ac:	defff404 	addi	sp,sp,-48
   130b0:	df000b15 	stw	fp,44(sp)
   130b4:	df000b04 	addi	fp,sp,44
   130b8:	e13ffb15 	stw	r4,-20(fp)
   130bc:	e17ffc15 	stw	r5,-16(fp)
   130c0:	e1bffd15 	stw	r6,-12(fp)
   130c4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   130c8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   130cc:	008000b4 	movhi	r2,2
   130d0:	10a1c604 	addi	r2,r2,-30952
   130d4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   130d8:	1005003a 	cmpeq	r2,r2,zero
   130dc:	1000411e 	bne	r2,zero,131e4 <alt_alarm_start+0x138>
  {
    if (alarm)
   130e0:	e0bffb17 	ldw	r2,-20(fp)
   130e4:	1005003a 	cmpeq	r2,r2,zero
   130e8:	10003b1e 	bne	r2,zero,131d8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
   130ec:	e0fffb17 	ldw	r3,-20(fp)
   130f0:	e0bffd17 	ldw	r2,-12(fp)
   130f4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
   130f8:	e0fffb17 	ldw	r3,-20(fp)
   130fc:	e0bffe17 	ldw	r2,-8(fp)
   13100:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13104:	0005303a 	rdctl	r2,status
   13108:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   1310c:	e0fff817 	ldw	r3,-32(fp)
   13110:	00bfff84 	movi	r2,-2
   13114:	1884703a 	and	r2,r3,r2
   13118:	1001703a 	wrctl	status,r2
  
  return context;
   1311c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   13120:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   13124:	008000b4 	movhi	r2,2
   13128:	10a1c704 	addi	r2,r2,-30948
   1312c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   13130:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   13134:	e0fffc17 	ldw	r3,-16(fp)
   13138:	e0bff917 	ldw	r2,-28(fp)
   1313c:	1885883a 	add	r2,r3,r2
   13140:	10c00044 	addi	r3,r2,1
   13144:	e0bffb17 	ldw	r2,-20(fp)
   13148:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   1314c:	e0bffb17 	ldw	r2,-20(fp)
   13150:	10c00217 	ldw	r3,8(r2)
   13154:	e0bff917 	ldw	r2,-28(fp)
   13158:	1880042e 	bgeu	r3,r2,1316c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
   1315c:	e0fffb17 	ldw	r3,-20(fp)
   13160:	00800044 	movi	r2,1
   13164:	18800405 	stb	r2,16(r3)
   13168:	00000206 	br	13174 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
   1316c:	e0bffb17 	ldw	r2,-20(fp)
   13170:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   13174:	e0fffb17 	ldw	r3,-20(fp)
   13178:	00800074 	movhi	r2,1
   1317c:	109af004 	addi	r2,r2,27584
   13180:	e0bff615 	stw	r2,-40(fp)
   13184:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   13188:	e0fff717 	ldw	r3,-36(fp)
   1318c:	e0bff617 	ldw	r2,-40(fp)
   13190:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   13194:	e0bff617 	ldw	r2,-40(fp)
   13198:	10c00017 	ldw	r3,0(r2)
   1319c:	e0bff717 	ldw	r2,-36(fp)
   131a0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   131a4:	e0bff617 	ldw	r2,-40(fp)
   131a8:	10c00017 	ldw	r3,0(r2)
   131ac:	e0bff717 	ldw	r2,-36(fp)
   131b0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   131b4:	e0fff617 	ldw	r3,-40(fp)
   131b8:	e0bff717 	ldw	r2,-36(fp)
   131bc:	18800015 	stw	r2,0(r3)
   131c0:	e0bffa17 	ldw	r2,-24(fp)
   131c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   131c8:	e0bff517 	ldw	r2,-44(fp)
   131cc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   131d0:	e03fff15 	stw	zero,-4(fp)
   131d4:	00000506 	br	131ec <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
   131d8:	00bffa84 	movi	r2,-22
   131dc:	e0bfff15 	stw	r2,-4(fp)
   131e0:	00000206 	br	131ec <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
   131e4:	00bfde84 	movi	r2,-134
   131e8:	e0bfff15 	stw	r2,-4(fp)
   131ec:	e0bfff17 	ldw	r2,-4(fp)
  }
}
   131f0:	e037883a 	mov	sp,fp
   131f4:	df000017 	ldw	fp,0(sp)
   131f8:	dec00104 	addi	sp,sp,4
   131fc:	f800283a 	ret

00013200 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   13200:	defffe04 	addi	sp,sp,-8
   13204:	df000115 	stw	fp,4(sp)
   13208:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1320c:	e03fff15 	stw	zero,-4(fp)
   13210:	00000506 	br	13228 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   13214:	e0bfff17 	ldw	r2,-4(fp)
   13218:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   1321c:	e0bfff17 	ldw	r2,-4(fp)
   13220:	10800804 	addi	r2,r2,32
   13224:	e0bfff15 	stw	r2,-4(fp)
   13228:	e0bfff17 	ldw	r2,-4(fp)
   1322c:	10820030 	cmpltui	r2,r2,2048
   13230:	103ff81e 	bne	r2,zero,13214 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   13234:	e037883a 	mov	sp,fp
   13238:	df000017 	ldw	fp,0(sp)
   1323c:	dec00104 	addi	sp,sp,4
   13240:	f800283a 	ret

00013244 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   13244:	defff904 	addi	sp,sp,-28
   13248:	dfc00615 	stw	ra,24(sp)
   1324c:	df000515 	stw	fp,20(sp)
   13250:	df000504 	addi	fp,sp,20
   13254:	e13ffd15 	stw	r4,-12(fp)
   13258:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   1325c:	e0bffd17 	ldw	r2,-12(fp)
   13260:	1005003a 	cmpeq	r2,r2,zero
   13264:	1000041e 	bne	r2,zero,13278 <alt_dev_llist_insert+0x34>
   13268:	e0bffd17 	ldw	r2,-12(fp)
   1326c:	10800217 	ldw	r2,8(r2)
   13270:	1004c03a 	cmpne	r2,r2,zero
   13274:	1000071e 	bne	r2,zero,13294 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
   13278:	00132f80 	call	132f8 <alt_get_errno>
   1327c:	1007883a 	mov	r3,r2
   13280:	00800584 	movi	r2,22
   13284:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   13288:	00bffa84 	movi	r2,-22
   1328c:	e0bfff15 	stw	r2,-4(fp)
   13290:	00001306 	br	132e0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   13294:	e0fffd17 	ldw	r3,-12(fp)
   13298:	e0bffe17 	ldw	r2,-8(fp)
   1329c:	e0bffb15 	stw	r2,-20(fp)
   132a0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   132a4:	e0fffc17 	ldw	r3,-16(fp)
   132a8:	e0bffb17 	ldw	r2,-20(fp)
   132ac:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
   132b0:	e0bffb17 	ldw	r2,-20(fp)
   132b4:	10c00017 	ldw	r3,0(r2)
   132b8:	e0bffc17 	ldw	r2,-16(fp)
   132bc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   132c0:	e0bffb17 	ldw	r2,-20(fp)
   132c4:	10c00017 	ldw	r3,0(r2)
   132c8:	e0bffc17 	ldw	r2,-16(fp)
   132cc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
   132d0:	e0fffb17 	ldw	r3,-20(fp)
   132d4:	e0bffc17 	ldw	r2,-16(fp)
   132d8:	18800015 	stw	r2,0(r3)

  return 0;  
   132dc:	e03fff15 	stw	zero,-4(fp)
   132e0:	e0bfff17 	ldw	r2,-4(fp)
}
   132e4:	e037883a 	mov	sp,fp
   132e8:	dfc00117 	ldw	ra,4(sp)
   132ec:	df000017 	ldw	fp,0(sp)
   132f0:	dec00204 	addi	sp,sp,8
   132f4:	f800283a 	ret

000132f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132f8:	defffd04 	addi	sp,sp,-12
   132fc:	dfc00215 	stw	ra,8(sp)
   13300:	df000115 	stw	fp,4(sp)
   13304:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13308:	00800074 	movhi	r2,1
   1330c:	109aed04 	addi	r2,r2,27572
   13310:	10800017 	ldw	r2,0(r2)
   13314:	1005003a 	cmpeq	r2,r2,zero
   13318:	1000061e 	bne	r2,zero,13334 <alt_get_errno+0x3c>
   1331c:	00800074 	movhi	r2,1
   13320:	109aed04 	addi	r2,r2,27572
   13324:	10800017 	ldw	r2,0(r2)
   13328:	103ee83a 	callr	r2
   1332c:	e0bfff15 	stw	r2,-4(fp)
   13330:	00000306 	br	13340 <alt_get_errno+0x48>
   13334:	008000b4 	movhi	r2,2
   13338:	10a1be04 	addi	r2,r2,-30984
   1333c:	e0bfff15 	stw	r2,-4(fp)
   13340:	e0bfff17 	ldw	r2,-4(fp)
}
   13344:	e037883a 	mov	sp,fp
   13348:	dfc00117 	ldw	ra,4(sp)
   1334c:	df000017 	ldw	fp,0(sp)
   13350:	dec00204 	addi	sp,sp,8
   13354:	f800283a 	ret

00013358 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   13358:	defffd04 	addi	sp,sp,-12
   1335c:	dfc00215 	stw	ra,8(sp)
   13360:	df000115 	stw	fp,4(sp)
   13364:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   13368:	00bfff04 	movi	r2,-4
   1336c:	00c00074 	movhi	r3,1
   13370:	18d0fa04 	addi	r3,r3,17384
   13374:	1885883a 	add	r2,r3,r2
   13378:	e0bfff15 	stw	r2,-4(fp)
   1337c:	00000606 	br	13398 <_do_ctors+0x40>
        (*ctor) (); 
   13380:	e0bfff17 	ldw	r2,-4(fp)
   13384:	10800017 	ldw	r2,0(r2)
   13388:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   1338c:	e0bfff17 	ldw	r2,-4(fp)
   13390:	10bfff04 	addi	r2,r2,-4
   13394:	e0bfff15 	stw	r2,-4(fp)
   13398:	e0ffff17 	ldw	r3,-4(fp)
   1339c:	00800074 	movhi	r2,1
   133a0:	1090f904 	addi	r2,r2,17380
   133a4:	18bff62e 	bgeu	r3,r2,13380 <_do_ctors+0x28>
        (*ctor) (); 
}
   133a8:	e037883a 	mov	sp,fp
   133ac:	dfc00117 	ldw	ra,4(sp)
   133b0:	df000017 	ldw	fp,0(sp)
   133b4:	dec00204 	addi	sp,sp,8
   133b8:	f800283a 	ret

000133bc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   133bc:	defffd04 	addi	sp,sp,-12
   133c0:	dfc00215 	stw	ra,8(sp)
   133c4:	df000115 	stw	fp,4(sp)
   133c8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   133cc:	00bfff04 	movi	r2,-4
   133d0:	00c00074 	movhi	r3,1
   133d4:	18d0fa04 	addi	r3,r3,17384
   133d8:	1885883a 	add	r2,r3,r2
   133dc:	e0bfff15 	stw	r2,-4(fp)
   133e0:	00000606 	br	133fc <_do_dtors+0x40>
        (*dtor) (); 
   133e4:	e0bfff17 	ldw	r2,-4(fp)
   133e8:	10800017 	ldw	r2,0(r2)
   133ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   133f0:	e0bfff17 	ldw	r2,-4(fp)
   133f4:	10bfff04 	addi	r2,r2,-4
   133f8:	e0bfff15 	stw	r2,-4(fp)
   133fc:	e0ffff17 	ldw	r3,-4(fp)
   13400:	00800074 	movhi	r2,1
   13404:	1090fa04 	addi	r2,r2,17384
   13408:	18bff62e 	bgeu	r3,r2,133e4 <_do_dtors+0x28>
        (*dtor) (); 
}
   1340c:	e037883a 	mov	sp,fp
   13410:	dfc00117 	ldw	ra,4(sp)
   13414:	df000017 	ldw	fp,0(sp)
   13418:	dec00204 	addi	sp,sp,8
   1341c:	f800283a 	ret

00013420 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   13420:	defffe04 	addi	sp,sp,-8
   13424:	dfc00115 	stw	ra,4(sp)
   13428:	df000015 	stw	fp,0(sp)
   1342c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   13430:	0009883a 	mov	r4,zero
   13434:	01440004 	movi	r5,4096
   13438:	0013f4c0 	call	13f4c <alt_icache_flush>
#endif
}
   1343c:	e037883a 	mov	sp,fp
   13440:	dfc00117 	ldw	ra,4(sp)
   13444:	df000017 	ldw	fp,0(sp)
   13448:	dec00204 	addi	sp,sp,8
   1344c:	f800283a 	ret

00013450 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13450:	defff904 	addi	sp,sp,-28
   13454:	dfc00615 	stw	ra,24(sp)
   13458:	df000515 	stw	fp,20(sp)
   1345c:	df000504 	addi	fp,sp,20
   13460:	e13ffc15 	stw	r4,-16(fp)
   13464:	e17ffd15 	stw	r5,-12(fp)
   13468:	e1bffe15 	stw	r6,-8(fp)
   1346c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   13470:	e0800217 	ldw	r2,8(fp)
   13474:	d8800015 	stw	r2,0(sp)
   13478:	e13ffc17 	ldw	r4,-16(fp)
   1347c:	e17ffd17 	ldw	r5,-12(fp)
   13480:	e1bffe17 	ldw	r6,-8(fp)
   13484:	e1ffff17 	ldw	r7,-4(fp)
   13488:	00136240 	call	13624 <alt_iic_isr_register>
}  
   1348c:	e037883a 	mov	sp,fp
   13490:	dfc00117 	ldw	ra,4(sp)
   13494:	df000017 	ldw	fp,0(sp)
   13498:	dec00204 	addi	sp,sp,8
   1349c:	f800283a 	ret

000134a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   134a0:	defff904 	addi	sp,sp,-28
   134a4:	df000615 	stw	fp,24(sp)
   134a8:	df000604 	addi	fp,sp,24
   134ac:	e13ffe15 	stw	r4,-8(fp)
   134b0:	e17fff15 	stw	r5,-4(fp)
   134b4:	e0bfff17 	ldw	r2,-4(fp)
   134b8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   134bc:	0005303a 	rdctl	r2,status
   134c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   134c4:	e0fffb17 	ldw	r3,-20(fp)
   134c8:	00bfff84 	movi	r2,-2
   134cc:	1884703a 	and	r2,r3,r2
   134d0:	1001703a 	wrctl	status,r2
  
  return context;
   134d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   134d8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   134dc:	e0fffc17 	ldw	r3,-16(fp)
   134e0:	00800044 	movi	r2,1
   134e4:	10c4983a 	sll	r2,r2,r3
   134e8:	1007883a 	mov	r3,r2
   134ec:	008000b4 	movhi	r2,2
   134f0:	10a1c504 	addi	r2,r2,-30956
   134f4:	10800017 	ldw	r2,0(r2)
   134f8:	1886b03a 	or	r3,r3,r2
   134fc:	008000b4 	movhi	r2,2
   13500:	10a1c504 	addi	r2,r2,-30956
   13504:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   13508:	008000b4 	movhi	r2,2
   1350c:	10a1c504 	addi	r2,r2,-30956
   13510:	10800017 	ldw	r2,0(r2)
   13514:	100170fa 	wrctl	ienable,r2
   13518:	e0bffd17 	ldw	r2,-12(fp)
   1351c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13520:	e0bffa17 	ldw	r2,-24(fp)
   13524:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   13528:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   1352c:	e037883a 	mov	sp,fp
   13530:	df000017 	ldw	fp,0(sp)
   13534:	dec00104 	addi	sp,sp,4
   13538:	f800283a 	ret

0001353c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   1353c:	defff904 	addi	sp,sp,-28
   13540:	df000615 	stw	fp,24(sp)
   13544:	df000604 	addi	fp,sp,24
   13548:	e13ffe15 	stw	r4,-8(fp)
   1354c:	e17fff15 	stw	r5,-4(fp)
   13550:	e0bfff17 	ldw	r2,-4(fp)
   13554:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13558:	0005303a 	rdctl	r2,status
   1355c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13560:	e0fffb17 	ldw	r3,-20(fp)
   13564:	00bfff84 	movi	r2,-2
   13568:	1884703a 	and	r2,r3,r2
   1356c:	1001703a 	wrctl	status,r2
  
  return context;
   13570:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   13574:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
   13578:	e0fffc17 	ldw	r3,-16(fp)
   1357c:	00800044 	movi	r2,1
   13580:	10c4983a 	sll	r2,r2,r3
   13584:	0084303a 	nor	r2,zero,r2
   13588:	1007883a 	mov	r3,r2
   1358c:	008000b4 	movhi	r2,2
   13590:	10a1c504 	addi	r2,r2,-30956
   13594:	10800017 	ldw	r2,0(r2)
   13598:	1886703a 	and	r3,r3,r2
   1359c:	008000b4 	movhi	r2,2
   135a0:	10a1c504 	addi	r2,r2,-30956
   135a4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   135a8:	008000b4 	movhi	r2,2
   135ac:	10a1c504 	addi	r2,r2,-30956
   135b0:	10800017 	ldw	r2,0(r2)
   135b4:	100170fa 	wrctl	ienable,r2
   135b8:	e0bffd17 	ldw	r2,-12(fp)
   135bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   135c0:	e0bffa17 	ldw	r2,-24(fp)
   135c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   135c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   135cc:	e037883a 	mov	sp,fp
   135d0:	df000017 	ldw	fp,0(sp)
   135d4:	dec00104 	addi	sp,sp,4
   135d8:	f800283a 	ret

000135dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   135dc:	defffc04 	addi	sp,sp,-16
   135e0:	df000315 	stw	fp,12(sp)
   135e4:	df000304 	addi	fp,sp,12
   135e8:	e13ffe15 	stw	r4,-8(fp)
   135ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   135f0:	000530fa 	rdctl	r2,ienable
   135f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   135f8:	e0ffff17 	ldw	r3,-4(fp)
   135fc:	00800044 	movi	r2,1
   13600:	10c4983a 	sll	r2,r2,r3
   13604:	1007883a 	mov	r3,r2
   13608:	e0bffd17 	ldw	r2,-12(fp)
   1360c:	1884703a 	and	r2,r3,r2
   13610:	1004c03a 	cmpne	r2,r2,zero
}
   13614:	e037883a 	mov	sp,fp
   13618:	df000017 	ldw	fp,0(sp)
   1361c:	dec00104 	addi	sp,sp,4
   13620:	f800283a 	ret

00013624 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   13624:	defff404 	addi	sp,sp,-48
   13628:	dfc00b15 	stw	ra,44(sp)
   1362c:	df000a15 	stw	fp,40(sp)
   13630:	df000a04 	addi	fp,sp,40
   13634:	e13ffb15 	stw	r4,-20(fp)
   13638:	e17ffc15 	stw	r5,-16(fp)
   1363c:	e1bffd15 	stw	r6,-12(fp)
   13640:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
   13644:	00bffa84 	movi	r2,-22
   13648:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   1364c:	e0bffc17 	ldw	r2,-16(fp)
   13650:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   13654:	e0bff917 	ldw	r2,-28(fp)
   13658:	10800808 	cmpgei	r2,r2,32
   1365c:	1000291e 	bne	r2,zero,13704 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13660:	0005303a 	rdctl	r2,status
   13664:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13668:	e0fff717 	ldw	r3,-36(fp)
   1366c:	00bfff84 	movi	r2,-2
   13670:	1884703a 	and	r2,r3,r2
   13674:	1001703a 	wrctl	status,r2
  
  return context;
   13678:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   1367c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
   13680:	e0bff917 	ldw	r2,-28(fp)
   13684:	00c000b4 	movhi	r3,2
   13688:	18e24304 	addi	r3,r3,-30452
   1368c:	100490fa 	slli	r2,r2,3
   13690:	10c7883a 	add	r3,r2,r3
   13694:	e0bffd17 	ldw	r2,-12(fp)
   13698:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
   1369c:	e0bff917 	ldw	r2,-28(fp)
   136a0:	00c000b4 	movhi	r3,2
   136a4:	18e24304 	addi	r3,r3,-30452
   136a8:	100490fa 	slli	r2,r2,3
   136ac:	10c5883a 	add	r2,r2,r3
   136b0:	10c00104 	addi	r3,r2,4
   136b4:	e0bffe17 	ldw	r2,-8(fp)
   136b8:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   136bc:	e0bffd17 	ldw	r2,-12(fp)
   136c0:	1005003a 	cmpeq	r2,r2,zero
   136c4:	1000051e 	bne	r2,zero,136dc <alt_iic_isr_register+0xb8>
   136c8:	e17ff917 	ldw	r5,-28(fp)
   136cc:	e13ffb17 	ldw	r4,-20(fp)
   136d0:	00134a00 	call	134a0 <alt_ic_irq_enable>
   136d4:	e0bfff15 	stw	r2,-4(fp)
   136d8:	00000406 	br	136ec <alt_iic_isr_register+0xc8>
   136dc:	e17ff917 	ldw	r5,-28(fp)
   136e0:	e13ffb17 	ldw	r4,-20(fp)
   136e4:	001353c0 	call	1353c <alt_ic_irq_disable>
   136e8:	e0bfff15 	stw	r2,-4(fp)
   136ec:	e0bfff17 	ldw	r2,-4(fp)
   136f0:	e0bffa15 	stw	r2,-24(fp)
   136f4:	e0bff817 	ldw	r2,-32(fp)
   136f8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   136fc:	e0bff617 	ldw	r2,-40(fp)
   13700:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   13704:	e0bffa17 	ldw	r2,-24(fp)
}
   13708:	e037883a 	mov	sp,fp
   1370c:	dfc00117 	ldw	ra,4(sp)
   13710:	df000017 	ldw	fp,0(sp)
   13714:	dec00204 	addi	sp,sp,8
   13718:	f800283a 	ret

0001371c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   1371c:	defff904 	addi	sp,sp,-28
   13720:	dfc00615 	stw	ra,24(sp)
   13724:	df000515 	stw	fp,20(sp)
   13728:	df000504 	addi	fp,sp,20
   1372c:	e13ffc15 	stw	r4,-16(fp)
   13730:	e17ffd15 	stw	r5,-12(fp)
   13734:	e1bffe15 	stw	r6,-8(fp)
   13738:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   1373c:	e13ffd17 	ldw	r4,-12(fp)
   13740:	e17ffe17 	ldw	r5,-8(fp)
   13744:	e1bfff17 	ldw	r6,-4(fp)
   13748:	00139340 	call	13934 <open>
   1374c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   13750:	e0bffb17 	ldw	r2,-20(fp)
   13754:	1004803a 	cmplt	r2,r2,zero
   13758:	10001c1e 	bne	r2,zero,137cc <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
   1375c:	e0bffb17 	ldw	r2,-20(fp)
   13760:	00c00074 	movhi	r3,1
   13764:	18d66904 	addi	r3,r3,22948
   13768:	10800324 	muli	r2,r2,12
   1376c:	10c5883a 	add	r2,r2,r3
   13770:	10c00017 	ldw	r3,0(r2)
   13774:	e0bffc17 	ldw	r2,-16(fp)
   13778:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   1377c:	e0bffb17 	ldw	r2,-20(fp)
   13780:	00c00074 	movhi	r3,1
   13784:	18d66904 	addi	r3,r3,22948
   13788:	10800324 	muli	r2,r2,12
   1378c:	10c5883a 	add	r2,r2,r3
   13790:	10800104 	addi	r2,r2,4
   13794:	10c00017 	ldw	r3,0(r2)
   13798:	e0bffc17 	ldw	r2,-16(fp)
   1379c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   137a0:	e0bffb17 	ldw	r2,-20(fp)
   137a4:	00c00074 	movhi	r3,1
   137a8:	18d66904 	addi	r3,r3,22948
   137ac:	10800324 	muli	r2,r2,12
   137b0:	10c5883a 	add	r2,r2,r3
   137b4:	10800204 	addi	r2,r2,8
   137b8:	10c00017 	ldw	r3,0(r2)
   137bc:	e0bffc17 	ldw	r2,-16(fp)
   137c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   137c4:	e13ffb17 	ldw	r4,-20(fp)
   137c8:	001219c0 	call	1219c <alt_release_fd>
  }
} 
   137cc:	e037883a 	mov	sp,fp
   137d0:	dfc00117 	ldw	ra,4(sp)
   137d4:	df000017 	ldw	fp,0(sp)
   137d8:	dec00204 	addi	sp,sp,8
   137dc:	f800283a 	ret

000137e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   137e0:	defffb04 	addi	sp,sp,-20
   137e4:	dfc00415 	stw	ra,16(sp)
   137e8:	df000315 	stw	fp,12(sp)
   137ec:	df000304 	addi	fp,sp,12
   137f0:	e13ffd15 	stw	r4,-12(fp)
   137f4:	e17ffe15 	stw	r5,-8(fp)
   137f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   137fc:	01000074 	movhi	r4,1
   13800:	21166c04 	addi	r4,r4,22960
   13804:	e17ffd17 	ldw	r5,-12(fp)
   13808:	01800044 	movi	r6,1
   1380c:	01c07fc4 	movi	r7,511
   13810:	001371c0 	call	1371c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   13814:	01000074 	movhi	r4,1
   13818:	21166904 	addi	r4,r4,22948
   1381c:	e17ffe17 	ldw	r5,-8(fp)
   13820:	000d883a 	mov	r6,zero
   13824:	01c07fc4 	movi	r7,511
   13828:	001371c0 	call	1371c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   1382c:	01000074 	movhi	r4,1
   13830:	21166f04 	addi	r4,r4,22972
   13834:	e17fff17 	ldw	r5,-4(fp)
   13838:	01800044 	movi	r6,1
   1383c:	01c07fc4 	movi	r7,511
   13840:	001371c0 	call	1371c <alt_open_fd>
}  
   13844:	e037883a 	mov	sp,fp
   13848:	dfc00117 	ldw	ra,4(sp)
   1384c:	df000017 	ldw	fp,0(sp)
   13850:	dec00204 	addi	sp,sp,8
   13854:	f800283a 	ret

00013858 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   13858:	defffc04 	addi	sp,sp,-16
   1385c:	df000315 	stw	fp,12(sp)
   13860:	df000304 	addi	fp,sp,12
   13864:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   13868:	e0bffe17 	ldw	r2,-8(fp)
   1386c:	10800217 	ldw	r2,8(r2)
   13870:	10d00034 	orhi	r3,r2,16384
   13874:	e0bffe17 	ldw	r2,-8(fp)
   13878:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   1387c:	e03ffd15 	stw	zero,-12(fp)
   13880:	00002006 	br	13904 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   13884:	e0bffd17 	ldw	r2,-12(fp)
   13888:	00c00074 	movhi	r3,1
   1388c:	18d66904 	addi	r3,r3,22948
   13890:	10800324 	muli	r2,r2,12
   13894:	10c5883a 	add	r2,r2,r3
   13898:	10c00017 	ldw	r3,0(r2)
   1389c:	e0bffe17 	ldw	r2,-8(fp)
   138a0:	10800017 	ldw	r2,0(r2)
   138a4:	1880141e 	bne	r3,r2,138f8 <alt_file_locked+0xa0>
   138a8:	e0bffd17 	ldw	r2,-12(fp)
   138ac:	00c00074 	movhi	r3,1
   138b0:	18d66904 	addi	r3,r3,22948
   138b4:	10800324 	muli	r2,r2,12
   138b8:	10c5883a 	add	r2,r2,r3
   138bc:	10800204 	addi	r2,r2,8
   138c0:	10800017 	ldw	r2,0(r2)
   138c4:	1004403a 	cmpge	r2,r2,zero
   138c8:	10000b1e 	bne	r2,zero,138f8 <alt_file_locked+0xa0>
   138cc:	e0bffd17 	ldw	r2,-12(fp)
   138d0:	10800324 	muli	r2,r2,12
   138d4:	1007883a 	mov	r3,r2
   138d8:	00800074 	movhi	r2,1
   138dc:	10966904 	addi	r2,r2,22948
   138e0:	1887883a 	add	r3,r3,r2
   138e4:	e0bffe17 	ldw	r2,-8(fp)
   138e8:	18800326 	beq	r3,r2,138f8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   138ec:	00bffcc4 	movi	r2,-13
   138f0:	e0bfff15 	stw	r2,-4(fp)
   138f4:	00000a06 	br	13920 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   138f8:	e0bffd17 	ldw	r2,-12(fp)
   138fc:	10800044 	addi	r2,r2,1
   13900:	e0bffd15 	stw	r2,-12(fp)
   13904:	00800074 	movhi	r2,1
   13908:	109aec04 	addi	r2,r2,27568
   1390c:	10800017 	ldw	r2,0(r2)
   13910:	1007883a 	mov	r3,r2
   13914:	e0bffd17 	ldw	r2,-12(fp)
   13918:	18bfda2e 	bgeu	r3,r2,13884 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   1391c:	e03fff15 	stw	zero,-4(fp)
   13920:	e0bfff17 	ldw	r2,-4(fp)
}
   13924:	e037883a 	mov	sp,fp
   13928:	df000017 	ldw	fp,0(sp)
   1392c:	dec00104 	addi	sp,sp,4
   13930:	f800283a 	ret

00013934 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   13934:	defff404 	addi	sp,sp,-48
   13938:	dfc00b15 	stw	ra,44(sp)
   1393c:	df000a15 	stw	fp,40(sp)
   13940:	df000a04 	addi	fp,sp,40
   13944:	e13ffb15 	stw	r4,-20(fp)
   13948:	e17ffc15 	stw	r5,-16(fp)
   1394c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   13950:	00bfffc4 	movi	r2,-1
   13954:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
   13958:	00bffb44 	movi	r2,-19
   1395c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
   13960:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   13964:	e13ffb17 	ldw	r4,-20(fp)
   13968:	01400074 	movhi	r5,1
   1396c:	295aea04 	addi	r5,r5,27560
   13970:	0013ce00 	call	13ce0 <alt_find_dev>
   13974:	e0bffa15 	stw	r2,-24(fp)
   13978:	e0bffa17 	ldw	r2,-24(fp)
   1397c:	1004c03a 	cmpne	r2,r2,zero
   13980:	1000051e 	bne	r2,zero,13998 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   13984:	e13ffb17 	ldw	r4,-20(fp)
   13988:	0013d740 	call	13d74 <alt_find_file>
   1398c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
   13990:	00800044 	movi	r2,1
   13994:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   13998:	e0bffa17 	ldw	r2,-24(fp)
   1399c:	1005003a 	cmpeq	r2,r2,zero
   139a0:	1000301e 	bne	r2,zero,13a64 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
   139a4:	e13ffa17 	ldw	r4,-24(fp)
   139a8:	0013e940 	call	13e94 <alt_get_fd>
   139ac:	e0bff815 	stw	r2,-32(fp)
   139b0:	e0bff817 	ldw	r2,-32(fp)
   139b4:	1004403a 	cmpge	r2,r2,zero
   139b8:	1000031e 	bne	r2,zero,139c8 <open+0x94>
    {
      status = index;
   139bc:	e0bff817 	ldw	r2,-32(fp)
   139c0:	e0bff715 	stw	r2,-36(fp)
   139c4:	00002906 	br	13a6c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
   139c8:	e0bff817 	ldw	r2,-32(fp)
   139cc:	10800324 	muli	r2,r2,12
   139d0:	1007883a 	mov	r3,r2
   139d4:	00800074 	movhi	r2,1
   139d8:	10966904 	addi	r2,r2,22948
   139dc:	1885883a 	add	r2,r3,r2
   139e0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   139e4:	e0fffc17 	ldw	r3,-16(fp)
   139e8:	00900034 	movhi	r2,16384
   139ec:	10bfffc4 	addi	r2,r2,-1
   139f0:	1886703a 	and	r3,r3,r2
   139f4:	e0bff917 	ldw	r2,-28(fp)
   139f8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   139fc:	e0bff617 	ldw	r2,-40(fp)
   13a00:	1004c03a 	cmpne	r2,r2,zero
   13a04:	1000061e 	bne	r2,zero,13a20 <open+0xec>
   13a08:	e13ff917 	ldw	r4,-28(fp)
   13a0c:	00138580 	call	13858 <alt_file_locked>
   13a10:	e0bff715 	stw	r2,-36(fp)
   13a14:	e0bff717 	ldw	r2,-36(fp)
   13a18:	1004803a 	cmplt	r2,r2,zero
   13a1c:	1000131e 	bne	r2,zero,13a6c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   13a20:	e0bffa17 	ldw	r2,-24(fp)
   13a24:	10800317 	ldw	r2,12(r2)
   13a28:	1005003a 	cmpeq	r2,r2,zero
   13a2c:	1000091e 	bne	r2,zero,13a54 <open+0x120>
   13a30:	e0bffa17 	ldw	r2,-24(fp)
   13a34:	10800317 	ldw	r2,12(r2)
   13a38:	e13ff917 	ldw	r4,-28(fp)
   13a3c:	e17ffb17 	ldw	r5,-20(fp)
   13a40:	e1bffc17 	ldw	r6,-16(fp)
   13a44:	e1fffd17 	ldw	r7,-12(fp)
   13a48:	103ee83a 	callr	r2
   13a4c:	e0bfff15 	stw	r2,-4(fp)
   13a50:	00000106 	br	13a58 <open+0x124>
   13a54:	e03fff15 	stw	zero,-4(fp)
   13a58:	e0bfff17 	ldw	r2,-4(fp)
   13a5c:	e0bff715 	stw	r2,-36(fp)
   13a60:	00000206 	br	13a6c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
   13a64:	00bffb44 	movi	r2,-19
   13a68:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   13a6c:	e0bff717 	ldw	r2,-36(fp)
   13a70:	1004403a 	cmpge	r2,r2,zero
   13a74:	1000091e 	bne	r2,zero,13a9c <open+0x168>
  {
    alt_release_fd (index);  
   13a78:	e13ff817 	ldw	r4,-32(fp)
   13a7c:	001219c0 	call	1219c <alt_release_fd>
    ALT_ERRNO = -status;
   13a80:	0013abc0 	call	13abc <alt_get_errno>
   13a84:	e0fff717 	ldw	r3,-36(fp)
   13a88:	00c7c83a 	sub	r3,zero,r3
   13a8c:	10c00015 	stw	r3,0(r2)
    return -1;
   13a90:	00bfffc4 	movi	r2,-1
   13a94:	e0bffe15 	stw	r2,-8(fp)
   13a98:	00000206 	br	13aa4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
   13a9c:	e0bff817 	ldw	r2,-32(fp)
   13aa0:	e0bffe15 	stw	r2,-8(fp)
   13aa4:	e0bffe17 	ldw	r2,-8(fp)
}
   13aa8:	e037883a 	mov	sp,fp
   13aac:	dfc00117 	ldw	ra,4(sp)
   13ab0:	df000017 	ldw	fp,0(sp)
   13ab4:	dec00204 	addi	sp,sp,8
   13ab8:	f800283a 	ret

00013abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13abc:	defffd04 	addi	sp,sp,-12
   13ac0:	dfc00215 	stw	ra,8(sp)
   13ac4:	df000115 	stw	fp,4(sp)
   13ac8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
   13acc:	00800074 	movhi	r2,1
   13ad0:	109aed04 	addi	r2,r2,27572
   13ad4:	10800017 	ldw	r2,0(r2)
   13ad8:	1005003a 	cmpeq	r2,r2,zero
   13adc:	1000061e 	bne	r2,zero,13af8 <alt_get_errno+0x3c>
   13ae0:	00800074 	movhi	r2,1
   13ae4:	109aed04 	addi	r2,r2,27572
   13ae8:	10800017 	ldw	r2,0(r2)
   13aec:	103ee83a 	callr	r2
   13af0:	e0bfff15 	stw	r2,-4(fp)
   13af4:	00000306 	br	13b04 <alt_get_errno+0x48>
   13af8:	008000b4 	movhi	r2,2
   13afc:	10a1be04 	addi	r2,r2,-30984
   13b00:	e0bfff15 	stw	r2,-4(fp)
   13b04:	e0bfff17 	ldw	r2,-4(fp)
}
   13b08:	e037883a 	mov	sp,fp
   13b0c:	dfc00117 	ldw	ra,4(sp)
   13b10:	df000017 	ldw	fp,0(sp)
   13b14:	dec00204 	addi	sp,sp,8
   13b18:	f800283a 	ret

00013b1c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   13b1c:	defffa04 	addi	sp,sp,-24
   13b20:	df000515 	stw	fp,20(sp)
   13b24:	df000504 	addi	fp,sp,20
   13b28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13b2c:	0005303a 	rdctl	r2,status
   13b30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13b34:	e0fffd17 	ldw	r3,-12(fp)
   13b38:	00bfff84 	movi	r2,-2
   13b3c:	1884703a 	and	r2,r3,r2
   13b40:	1001703a 	wrctl	status,r2
  
  return context;
   13b44:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   13b48:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
   13b4c:	e0bfff17 	ldw	r2,-4(fp)
   13b50:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   13b54:	e0bffc17 	ldw	r2,-16(fp)
   13b58:	10c00017 	ldw	r3,0(r2)
   13b5c:	e0bffc17 	ldw	r2,-16(fp)
   13b60:	10800117 	ldw	r2,4(r2)
   13b64:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
   13b68:	e0bffc17 	ldw	r2,-16(fp)
   13b6c:	10c00117 	ldw	r3,4(r2)
   13b70:	e0bffc17 	ldw	r2,-16(fp)
   13b74:	10800017 	ldw	r2,0(r2)
   13b78:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   13b7c:	e0fffc17 	ldw	r3,-16(fp)
   13b80:	e0bffc17 	ldw	r2,-16(fp)
   13b84:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
   13b88:	e0fffc17 	ldw	r3,-16(fp)
   13b8c:	e0bffc17 	ldw	r2,-16(fp)
   13b90:	18800015 	stw	r2,0(r3)
   13b94:	e0bffe17 	ldw	r2,-8(fp)
   13b98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   13b9c:	e0bffb17 	ldw	r2,-20(fp)
   13ba0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   13ba4:	e037883a 	mov	sp,fp
   13ba8:	df000017 	ldw	fp,0(sp)
   13bac:	dec00104 	addi	sp,sp,4
   13bb0:	f800283a 	ret

00013bb4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   13bb4:	defffb04 	addi	sp,sp,-20
   13bb8:	dfc00415 	stw	ra,16(sp)
   13bbc:	df000315 	stw	fp,12(sp)
   13bc0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   13bc4:	d0a00f17 	ldw	r2,-32708(gp)
   13bc8:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   13bcc:	d0a6e617 	ldw	r2,-25704(gp)
   13bd0:	10800044 	addi	r2,r2,1
   13bd4:	d0a6e615 	stw	r2,-25704(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13bd8:	00003106 	br	13ca0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
   13bdc:	e0bffe17 	ldw	r2,-8(fp)
   13be0:	10800017 	ldw	r2,0(r2)
   13be4:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   13be8:	e0bffe17 	ldw	r2,-8(fp)
   13bec:	10800403 	ldbu	r2,16(r2)
   13bf0:	10803fcc 	andi	r2,r2,255
   13bf4:	1005003a 	cmpeq	r2,r2,zero
   13bf8:	1000051e 	bne	r2,zero,13c10 <alt_tick+0x5c>
   13bfc:	d0a6e617 	ldw	r2,-25704(gp)
   13c00:	1004c03a 	cmpne	r2,r2,zero
   13c04:	1000021e 	bne	r2,zero,13c10 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
   13c08:	e0bffe17 	ldw	r2,-8(fp)
   13c0c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   13c10:	e0bffe17 	ldw	r2,-8(fp)
   13c14:	10c00217 	ldw	r3,8(r2)
   13c18:	d0a6e617 	ldw	r2,-25704(gp)
   13c1c:	10c01e36 	bltu	r2,r3,13c98 <alt_tick+0xe4>
   13c20:	e0bffe17 	ldw	r2,-8(fp)
   13c24:	10800403 	ldbu	r2,16(r2)
   13c28:	10803fcc 	andi	r2,r2,255
   13c2c:	1004c03a 	cmpne	r2,r2,zero
   13c30:	1000191e 	bne	r2,zero,13c98 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
   13c34:	e0bffe17 	ldw	r2,-8(fp)
   13c38:	10c00317 	ldw	r3,12(r2)
   13c3c:	e0bffe17 	ldw	r2,-8(fp)
   13c40:	11000517 	ldw	r4,20(r2)
   13c44:	183ee83a 	callr	r3
   13c48:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   13c4c:	e0bffd17 	ldw	r2,-12(fp)
   13c50:	1004c03a 	cmpne	r2,r2,zero
   13c54:	1000031e 	bne	r2,zero,13c64 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
   13c58:	e13ffe17 	ldw	r4,-8(fp)
   13c5c:	0013b1c0 	call	13b1c <alt_alarm_stop>
   13c60:	00000d06 	br	13c98 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
   13c64:	e0bffe17 	ldw	r2,-8(fp)
   13c68:	10c00217 	ldw	r3,8(r2)
   13c6c:	e0bffd17 	ldw	r2,-12(fp)
   13c70:	1887883a 	add	r3,r3,r2
   13c74:	e0bffe17 	ldw	r2,-8(fp)
   13c78:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   13c7c:	e0bffe17 	ldw	r2,-8(fp)
   13c80:	10c00217 	ldw	r3,8(r2)
   13c84:	d0a6e617 	ldw	r2,-25704(gp)
   13c88:	1880032e 	bgeu	r3,r2,13c98 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
   13c8c:	e0fffe17 	ldw	r3,-8(fp)
   13c90:	00800044 	movi	r2,1
   13c94:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
   13c98:	e0bfff17 	ldw	r2,-4(fp)
   13c9c:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   13ca0:	d0e00f04 	addi	r3,gp,-32708
   13ca4:	e0bffe17 	ldw	r2,-8(fp)
   13ca8:	10ffcc1e 	bne	r2,r3,13bdc <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   13cac:	e037883a 	mov	sp,fp
   13cb0:	dfc00117 	ldw	ra,4(sp)
   13cb4:	df000017 	ldw	fp,0(sp)
   13cb8:	dec00204 	addi	sp,sp,8
   13cbc:	f800283a 	ret

00013cc0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   13cc0:	deffff04 	addi	sp,sp,-4
   13cc4:	df000015 	stw	fp,0(sp)
   13cc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   13ccc:	000170fa 	wrctl	ienable,zero
}
   13cd0:	e037883a 	mov	sp,fp
   13cd4:	df000017 	ldw	fp,0(sp)
   13cd8:	dec00104 	addi	sp,sp,4
   13cdc:	f800283a 	ret

00013ce0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   13ce0:	defff904 	addi	sp,sp,-28
   13ce4:	dfc00615 	stw	ra,24(sp)
   13ce8:	df000515 	stw	fp,20(sp)
   13cec:	df000504 	addi	fp,sp,20
   13cf0:	e13ffd15 	stw	r4,-12(fp)
   13cf4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
   13cf8:	e0bffe17 	ldw	r2,-8(fp)
   13cfc:	10800017 	ldw	r2,0(r2)
   13d00:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   13d04:	e13ffd17 	ldw	r4,-12(fp)
   13d08:	00040680 	call	4068 <strlen>
   13d0c:	10800044 	addi	r2,r2,1
   13d10:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13d14:	00000d06 	br	13d4c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   13d18:	e0bffc17 	ldw	r2,-16(fp)
   13d1c:	11000217 	ldw	r4,8(r2)
   13d20:	e1bffb17 	ldw	r6,-20(fp)
   13d24:	e17ffd17 	ldw	r5,-12(fp)
   13d28:	00140280 	call	14028 <memcmp>
   13d2c:	1004c03a 	cmpne	r2,r2,zero
   13d30:	1000031e 	bne	r2,zero,13d40 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   13d34:	e0bffc17 	ldw	r2,-16(fp)
   13d38:	e0bfff15 	stw	r2,-4(fp)
   13d3c:	00000706 	br	13d5c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   13d40:	e0bffc17 	ldw	r2,-16(fp)
   13d44:	10800017 	ldw	r2,0(r2)
   13d48:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   13d4c:	e0fffe17 	ldw	r3,-8(fp)
   13d50:	e0bffc17 	ldw	r2,-16(fp)
   13d54:	10fff01e 	bne	r2,r3,13d18 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   13d58:	e03fff15 	stw	zero,-4(fp)
   13d5c:	e0bfff17 	ldw	r2,-4(fp)
}
   13d60:	e037883a 	mov	sp,fp
   13d64:	dfc00117 	ldw	ra,4(sp)
   13d68:	df000017 	ldw	fp,0(sp)
   13d6c:	dec00204 	addi	sp,sp,8
   13d70:	f800283a 	ret

00013d74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   13d74:	defffa04 	addi	sp,sp,-24
   13d78:	dfc00515 	stw	ra,20(sp)
   13d7c:	df000415 	stw	fp,16(sp)
   13d80:	df000404 	addi	fp,sp,16
   13d84:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   13d88:	00800074 	movhi	r2,1
   13d8c:	109ae804 	addi	r2,r2,27552
   13d90:	10800017 	ldw	r2,0(r2)
   13d94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13d98:	00003306 	br	13e68 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
   13d9c:	e0bffd17 	ldw	r2,-12(fp)
   13da0:	11000217 	ldw	r4,8(r2)
   13da4:	00040680 	call	4068 <strlen>
   13da8:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
   13dac:	e0bffd17 	ldw	r2,-12(fp)
   13db0:	10c00217 	ldw	r3,8(r2)
   13db4:	e0bffc17 	ldw	r2,-16(fp)
   13db8:	1885883a 	add	r2,r3,r2
   13dbc:	10bfffc4 	addi	r2,r2,-1
   13dc0:	10800003 	ldbu	r2,0(r2)
   13dc4:	10803fcc 	andi	r2,r2,255
   13dc8:	1080201c 	xori	r2,r2,128
   13dcc:	10bfe004 	addi	r2,r2,-128
   13dd0:	10800bd8 	cmpnei	r2,r2,47
   13dd4:	1000031e 	bne	r2,zero,13de4 <alt_find_file+0x70>
    {
      len -= 1;
   13dd8:	e0bffc17 	ldw	r2,-16(fp)
   13ddc:	10bfffc4 	addi	r2,r2,-1
   13de0:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   13de4:	e0bffc17 	ldw	r2,-16(fp)
   13de8:	1007883a 	mov	r3,r2
   13dec:	e0bffe17 	ldw	r2,-8(fp)
   13df0:	1885883a 	add	r2,r3,r2
   13df4:	10800003 	ldbu	r2,0(r2)
   13df8:	10803fcc 	andi	r2,r2,255
   13dfc:	1080201c 	xori	r2,r2,128
   13e00:	10bfe004 	addi	r2,r2,-128
   13e04:	10800be0 	cmpeqi	r2,r2,47
   13e08:	10000a1e 	bne	r2,zero,13e34 <alt_find_file+0xc0>
   13e0c:	e0bffc17 	ldw	r2,-16(fp)
   13e10:	1007883a 	mov	r3,r2
   13e14:	e0bffe17 	ldw	r2,-8(fp)
   13e18:	1885883a 	add	r2,r3,r2
   13e1c:	10800003 	ldbu	r2,0(r2)
   13e20:	10803fcc 	andi	r2,r2,255
   13e24:	1080201c 	xori	r2,r2,128
   13e28:	10bfe004 	addi	r2,r2,-128
   13e2c:	1004c03a 	cmpne	r2,r2,zero
   13e30:	10000a1e 	bne	r2,zero,13e5c <alt_find_file+0xe8>
   13e34:	e0bffd17 	ldw	r2,-12(fp)
   13e38:	11000217 	ldw	r4,8(r2)
   13e3c:	e1bffc17 	ldw	r6,-16(fp)
   13e40:	e17ffe17 	ldw	r5,-8(fp)
   13e44:	00140280 	call	14028 <memcmp>
   13e48:	1004c03a 	cmpne	r2,r2,zero
   13e4c:	1000031e 	bne	r2,zero,13e5c <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   13e50:	e0bffd17 	ldw	r2,-12(fp)
   13e54:	e0bfff15 	stw	r2,-4(fp)
   13e58:	00000806 	br	13e7c <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
   13e5c:	e0bffd17 	ldw	r2,-12(fp)
   13e60:	10800017 	ldw	r2,0(r2)
   13e64:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   13e68:	00c00074 	movhi	r3,1
   13e6c:	18dae804 	addi	r3,r3,27552
   13e70:	e0bffd17 	ldw	r2,-12(fp)
   13e74:	10ffc91e 	bne	r2,r3,13d9c <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   13e78:	e03fff15 	stw	zero,-4(fp)
   13e7c:	e0bfff17 	ldw	r2,-4(fp)
}
   13e80:	e037883a 	mov	sp,fp
   13e84:	dfc00117 	ldw	ra,4(sp)
   13e88:	df000017 	ldw	fp,0(sp)
   13e8c:	dec00204 	addi	sp,sp,8
   13e90:	f800283a 	ret

00013e94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   13e94:	defffc04 	addi	sp,sp,-16
   13e98:	df000315 	stw	fp,12(sp)
   13e9c:	df000304 	addi	fp,sp,12
   13ea0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   13ea4:	00bffa04 	movi	r2,-24
   13ea8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13eac:	e03ffe15 	stw	zero,-8(fp)
   13eb0:	00001e06 	br	13f2c <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
   13eb4:	e0bffe17 	ldw	r2,-8(fp)
   13eb8:	00c00074 	movhi	r3,1
   13ebc:	18d66904 	addi	r3,r3,22948
   13ec0:	10800324 	muli	r2,r2,12
   13ec4:	10c5883a 	add	r2,r2,r3
   13ec8:	10800017 	ldw	r2,0(r2)
   13ecc:	1004c03a 	cmpne	r2,r2,zero
   13ed0:	1000131e 	bne	r2,zero,13f20 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
   13ed4:	e0bffe17 	ldw	r2,-8(fp)
   13ed8:	00c00074 	movhi	r3,1
   13edc:	18d66904 	addi	r3,r3,22948
   13ee0:	10800324 	muli	r2,r2,12
   13ee4:	10c7883a 	add	r3,r2,r3
   13ee8:	e0bfff17 	ldw	r2,-4(fp)
   13eec:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
   13ef0:	00800074 	movhi	r2,1
   13ef4:	109aec04 	addi	r2,r2,27568
   13ef8:	10c00017 	ldw	r3,0(r2)
   13efc:	e0bffe17 	ldw	r2,-8(fp)
   13f00:	1880040e 	bge	r3,r2,13f14 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
   13f04:	00c00074 	movhi	r3,1
   13f08:	18daec04 	addi	r3,r3,27568
   13f0c:	e0bffe17 	ldw	r2,-8(fp)
   13f10:	18800015 	stw	r2,0(r3)
      }
      rc = i;
   13f14:	e0bffe17 	ldw	r2,-8(fp)
   13f18:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   13f1c:	00000606 	br	13f38 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   13f20:	e0bffe17 	ldw	r2,-8(fp)
   13f24:	10800044 	addi	r2,r2,1
   13f28:	e0bffe15 	stw	r2,-8(fp)
   13f2c:	e0bffe17 	ldw	r2,-8(fp)
   13f30:	10800810 	cmplti	r2,r2,32
   13f34:	103fdf1e 	bne	r2,zero,13eb4 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   13f38:	e0bffd17 	ldw	r2,-12(fp)
}
   13f3c:	e037883a 	mov	sp,fp
   13f40:	df000017 	ldw	fp,0(sp)
   13f44:	dec00104 	addi	sp,sp,4
   13f48:	f800283a 	ret

00013f4c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   13f4c:	defffb04 	addi	sp,sp,-20
   13f50:	df000415 	stw	fp,16(sp)
   13f54:	df000404 	addi	fp,sp,16
   13f58:	e13ffe15 	stw	r4,-8(fp)
   13f5c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   13f60:	e0bfff17 	ldw	r2,-4(fp)
   13f64:	10840070 	cmpltui	r2,r2,4097
   13f68:	1000021e 	bne	r2,zero,13f74 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   13f6c:	00840004 	movi	r2,4096
   13f70:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   13f74:	e0fffe17 	ldw	r3,-8(fp)
   13f78:	e0bfff17 	ldw	r2,-4(fp)
   13f7c:	1885883a 	add	r2,r3,r2
   13f80:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13f84:	e0bffe17 	ldw	r2,-8(fp)
   13f88:	e0bffd15 	stw	r2,-12(fp)
   13f8c:	00000506 	br	13fa4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   13f90:	e0bffd17 	ldw	r2,-12(fp)
   13f94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   13f98:	e0bffd17 	ldw	r2,-12(fp)
   13f9c:	10800804 	addi	r2,r2,32
   13fa0:	e0bffd15 	stw	r2,-12(fp)
   13fa4:	e0fffd17 	ldw	r3,-12(fp)
   13fa8:	e0bffc17 	ldw	r2,-16(fp)
   13fac:	18bff836 	bltu	r3,r2,13f90 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   13fb0:	e0bffe17 	ldw	r2,-8(fp)
   13fb4:	108007cc 	andi	r2,r2,31
   13fb8:	1005003a 	cmpeq	r2,r2,zero
   13fbc:	1000021e 	bne	r2,zero,13fc8 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   13fc0:	e0bffd17 	ldw	r2,-12(fp)
   13fc4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   13fc8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   13fcc:	e037883a 	mov	sp,fp
   13fd0:	df000017 	ldw	fp,0(sp)
   13fd4:	dec00104 	addi	sp,sp,4
   13fd8:	f800283a 	ret

00013fdc <atexit>:
   13fdc:	200b883a 	mov	r5,r4
   13fe0:	000d883a 	mov	r6,zero
   13fe4:	0009883a 	mov	r4,zero
   13fe8:	000f883a 	mov	r7,zero
   13fec:	001409c1 	jmpi	1409c <__register_exitproc>

00013ff0 <exit>:
   13ff0:	defffe04 	addi	sp,sp,-8
   13ff4:	000b883a 	mov	r5,zero
   13ff8:	dc000015 	stw	r16,0(sp)
   13ffc:	dfc00115 	stw	ra,4(sp)
   14000:	2021883a 	mov	r16,r4
   14004:	00141d40 	call	141d4 <__call_exitprocs>
   14008:	00800074 	movhi	r2,1
   1400c:	109ae304 	addi	r2,r2,27532
   14010:	11000017 	ldw	r4,0(r2)
   14014:	20800f17 	ldw	r2,60(r4)
   14018:	10000126 	beq	r2,zero,14020 <exit+0x30>
   1401c:	103ee83a 	callr	r2
   14020:	8009883a 	mov	r4,r16
   14024:	00143c40 	call	143c4 <_exit>

00014028 <memcmp>:
   14028:	00c000c4 	movi	r3,3
   1402c:	1980032e 	bgeu	r3,r6,1403c <memcmp+0x14>
   14030:	2144b03a 	or	r2,r4,r5
   14034:	10c4703a 	and	r2,r2,r3
   14038:	10000f26 	beq	r2,zero,14078 <memcmp+0x50>
   1403c:	31ffffc4 	addi	r7,r6,-1
   14040:	3000061e 	bne	r6,zero,1405c <memcmp+0x34>
   14044:	00000a06 	br	14070 <memcmp+0x48>
   14048:	39ffffc4 	addi	r7,r7,-1
   1404c:	00bfffc4 	movi	r2,-1
   14050:	21000044 	addi	r4,r4,1
   14054:	29400044 	addi	r5,r5,1
   14058:	38800526 	beq	r7,r2,14070 <memcmp+0x48>
   1405c:	20c00003 	ldbu	r3,0(r4)
   14060:	28800003 	ldbu	r2,0(r5)
   14064:	18bff826 	beq	r3,r2,14048 <memcmp+0x20>
   14068:	1885c83a 	sub	r2,r3,r2
   1406c:	f800283a 	ret
   14070:	0005883a 	mov	r2,zero
   14074:	f800283a 	ret
   14078:	180f883a 	mov	r7,r3
   1407c:	20c00017 	ldw	r3,0(r4)
   14080:	28800017 	ldw	r2,0(r5)
   14084:	18bfed1e 	bne	r3,r2,1403c <memcmp+0x14>
   14088:	31bfff04 	addi	r6,r6,-4
   1408c:	21000104 	addi	r4,r4,4
   14090:	29400104 	addi	r5,r5,4
   14094:	39bff936 	bltu	r7,r6,1407c <memcmp+0x54>
   14098:	003fe806 	br	1403c <memcmp+0x14>

0001409c <__register_exitproc>:
   1409c:	defffa04 	addi	sp,sp,-24
   140a0:	00800074 	movhi	r2,1
   140a4:	109ae304 	addi	r2,r2,27532
   140a8:	dc000015 	stw	r16,0(sp)
   140ac:	14000017 	ldw	r16,0(r2)
   140b0:	dd000415 	stw	r20,16(sp)
   140b4:	2829883a 	mov	r20,r5
   140b8:	81405217 	ldw	r5,328(r16)
   140bc:	dcc00315 	stw	r19,12(sp)
   140c0:	dc800215 	stw	r18,8(sp)
   140c4:	dc400115 	stw	r17,4(sp)
   140c8:	dfc00515 	stw	ra,20(sp)
   140cc:	2023883a 	mov	r17,r4
   140d0:	3027883a 	mov	r19,r6
   140d4:	3825883a 	mov	r18,r7
   140d8:	28002526 	beq	r5,zero,14170 <__register_exitproc+0xd4>
   140dc:	29000117 	ldw	r4,4(r5)
   140e0:	008007c4 	movi	r2,31
   140e4:	11002716 	blt	r2,r4,14184 <__register_exitproc+0xe8>
   140e8:	8800101e 	bne	r17,zero,1412c <__register_exitproc+0x90>
   140ec:	2105883a 	add	r2,r4,r4
   140f0:	1085883a 	add	r2,r2,r2
   140f4:	20c00044 	addi	r3,r4,1
   140f8:	1145883a 	add	r2,r2,r5
   140fc:	0009883a 	mov	r4,zero
   14100:	15000215 	stw	r20,8(r2)
   14104:	28c00115 	stw	r3,4(r5)
   14108:	2005883a 	mov	r2,r4
   1410c:	dfc00517 	ldw	ra,20(sp)
   14110:	dd000417 	ldw	r20,16(sp)
   14114:	dcc00317 	ldw	r19,12(sp)
   14118:	dc800217 	ldw	r18,8(sp)
   1411c:	dc400117 	ldw	r17,4(sp)
   14120:	dc000017 	ldw	r16,0(sp)
   14124:	dec00604 	addi	sp,sp,24
   14128:	f800283a 	ret
   1412c:	29802204 	addi	r6,r5,136
   14130:	00800044 	movi	r2,1
   14134:	110e983a 	sll	r7,r2,r4
   14138:	30c04017 	ldw	r3,256(r6)
   1413c:	2105883a 	add	r2,r4,r4
   14140:	1085883a 	add	r2,r2,r2
   14144:	1185883a 	add	r2,r2,r6
   14148:	19c6b03a 	or	r3,r3,r7
   1414c:	14802015 	stw	r18,128(r2)
   14150:	14c00015 	stw	r19,0(r2)
   14154:	00800084 	movi	r2,2
   14158:	30c04015 	stw	r3,256(r6)
   1415c:	88bfe31e 	bne	r17,r2,140ec <__register_exitproc+0x50>
   14160:	30804117 	ldw	r2,260(r6)
   14164:	11c4b03a 	or	r2,r2,r7
   14168:	30804115 	stw	r2,260(r6)
   1416c:	003fdf06 	br	140ec <__register_exitproc+0x50>
   14170:	008000b4 	movhi	r2,2
   14174:	10a28304 	addi	r2,r2,-30196
   14178:	100b883a 	mov	r5,r2
   1417c:	80805215 	stw	r2,328(r16)
   14180:	003fd606 	br	140dc <__register_exitproc+0x40>
   14184:	00800034 	movhi	r2,0
   14188:	10800004 	addi	r2,r2,0
   1418c:	1000021e 	bne	r2,zero,14198 <__register_exitproc+0xfc>
   14190:	013fffc4 	movi	r4,-1
   14194:	003fdc06 	br	14108 <__register_exitproc+0x6c>
   14198:	01006404 	movi	r4,400
   1419c:	103ee83a 	callr	r2
   141a0:	1007883a 	mov	r3,r2
   141a4:	103ffa26 	beq	r2,zero,14190 <__register_exitproc+0xf4>
   141a8:	80805217 	ldw	r2,328(r16)
   141ac:	180b883a 	mov	r5,r3
   141b0:	18000115 	stw	zero,4(r3)
   141b4:	18800015 	stw	r2,0(r3)
   141b8:	80c05215 	stw	r3,328(r16)
   141bc:	18006215 	stw	zero,392(r3)
   141c0:	18006315 	stw	zero,396(r3)
   141c4:	0009883a 	mov	r4,zero
   141c8:	883fc826 	beq	r17,zero,140ec <__register_exitproc+0x50>
   141cc:	003fd706 	br	1412c <__register_exitproc+0x90>

000141d0 <register_fini>:
   141d0:	f800283a 	ret

000141d4 <__call_exitprocs>:
   141d4:	00800074 	movhi	r2,1
   141d8:	109ae304 	addi	r2,r2,27532
   141dc:	10800017 	ldw	r2,0(r2)
   141e0:	defff304 	addi	sp,sp,-52
   141e4:	df000b15 	stw	fp,44(sp)
   141e8:	d8800115 	stw	r2,4(sp)
   141ec:	00800034 	movhi	r2,0
   141f0:	10800004 	addi	r2,r2,0
   141f4:	1005003a 	cmpeq	r2,r2,zero
   141f8:	d8800215 	stw	r2,8(sp)
   141fc:	d8800117 	ldw	r2,4(sp)
   14200:	dd400815 	stw	r21,32(sp)
   14204:	dd000715 	stw	r20,28(sp)
   14208:	10805204 	addi	r2,r2,328
   1420c:	dfc00c15 	stw	ra,48(sp)
   14210:	ddc00a15 	stw	r23,40(sp)
   14214:	dd800915 	stw	r22,36(sp)
   14218:	dcc00615 	stw	r19,24(sp)
   1421c:	dc800515 	stw	r18,20(sp)
   14220:	dc400415 	stw	r17,16(sp)
   14224:	dc000315 	stw	r16,12(sp)
   14228:	282b883a 	mov	r21,r5
   1422c:	2039883a 	mov	fp,r4
   14230:	d8800015 	stw	r2,0(sp)
   14234:	2829003a 	cmpeq	r20,r5,zero
   14238:	d8800117 	ldw	r2,4(sp)
   1423c:	14405217 	ldw	r17,328(r2)
   14240:	88001026 	beq	r17,zero,14284 <__call_exitprocs+0xb0>
   14244:	ddc00017 	ldw	r23,0(sp)
   14248:	88800117 	ldw	r2,4(r17)
   1424c:	8c802204 	addi	r18,r17,136
   14250:	143fffc4 	addi	r16,r2,-1
   14254:	80000916 	blt	r16,zero,1427c <__call_exitprocs+0xa8>
   14258:	05bfffc4 	movi	r22,-1
   1425c:	a000151e 	bne	r20,zero,142b4 <__call_exitprocs+0xe0>
   14260:	8409883a 	add	r4,r16,r16
   14264:	2105883a 	add	r2,r4,r4
   14268:	1485883a 	add	r2,r2,r18
   1426c:	10c02017 	ldw	r3,128(r2)
   14270:	a8c01126 	beq	r21,r3,142b8 <__call_exitprocs+0xe4>
   14274:	843fffc4 	addi	r16,r16,-1
   14278:	85bff81e 	bne	r16,r22,1425c <__call_exitprocs+0x88>
   1427c:	d8800217 	ldw	r2,8(sp)
   14280:	10003126 	beq	r2,zero,14348 <__call_exitprocs+0x174>
   14284:	dfc00c17 	ldw	ra,48(sp)
   14288:	df000b17 	ldw	fp,44(sp)
   1428c:	ddc00a17 	ldw	r23,40(sp)
   14290:	dd800917 	ldw	r22,36(sp)
   14294:	dd400817 	ldw	r21,32(sp)
   14298:	dd000717 	ldw	r20,28(sp)
   1429c:	dcc00617 	ldw	r19,24(sp)
   142a0:	dc800517 	ldw	r18,20(sp)
   142a4:	dc400417 	ldw	r17,16(sp)
   142a8:	dc000317 	ldw	r16,12(sp)
   142ac:	dec00d04 	addi	sp,sp,52
   142b0:	f800283a 	ret
   142b4:	8409883a 	add	r4,r16,r16
   142b8:	88c00117 	ldw	r3,4(r17)
   142bc:	2105883a 	add	r2,r4,r4
   142c0:	1445883a 	add	r2,r2,r17
   142c4:	18ffffc4 	addi	r3,r3,-1
   142c8:	11800217 	ldw	r6,8(r2)
   142cc:	1c001526 	beq	r3,r16,14324 <__call_exitprocs+0x150>
   142d0:	10000215 	stw	zero,8(r2)
   142d4:	303fe726 	beq	r6,zero,14274 <__call_exitprocs+0xa0>
   142d8:	00c00044 	movi	r3,1
   142dc:	1c06983a 	sll	r3,r3,r16
   142e0:	90804017 	ldw	r2,256(r18)
   142e4:	8cc00117 	ldw	r19,4(r17)
   142e8:	1884703a 	and	r2,r3,r2
   142ec:	10001426 	beq	r2,zero,14340 <__call_exitprocs+0x16c>
   142f0:	90804117 	ldw	r2,260(r18)
   142f4:	1884703a 	and	r2,r3,r2
   142f8:	10000c1e 	bne	r2,zero,1432c <__call_exitprocs+0x158>
   142fc:	2105883a 	add	r2,r4,r4
   14300:	1485883a 	add	r2,r2,r18
   14304:	11400017 	ldw	r5,0(r2)
   14308:	e009883a 	mov	r4,fp
   1430c:	303ee83a 	callr	r6
   14310:	88800117 	ldw	r2,4(r17)
   14314:	98bfc81e 	bne	r19,r2,14238 <__call_exitprocs+0x64>
   14318:	b8800017 	ldw	r2,0(r23)
   1431c:	147fd526 	beq	r2,r17,14274 <__call_exitprocs+0xa0>
   14320:	003fc506 	br	14238 <__call_exitprocs+0x64>
   14324:	8c000115 	stw	r16,4(r17)
   14328:	003fea06 	br	142d4 <__call_exitprocs+0x100>
   1432c:	2105883a 	add	r2,r4,r4
   14330:	1485883a 	add	r2,r2,r18
   14334:	11000017 	ldw	r4,0(r2)
   14338:	303ee83a 	callr	r6
   1433c:	003ff406 	br	14310 <__call_exitprocs+0x13c>
   14340:	303ee83a 	callr	r6
   14344:	003ff206 	br	14310 <__call_exitprocs+0x13c>
   14348:	88800117 	ldw	r2,4(r17)
   1434c:	1000081e 	bne	r2,zero,14370 <__call_exitprocs+0x19c>
   14350:	89000017 	ldw	r4,0(r17)
   14354:	20000726 	beq	r4,zero,14374 <__call_exitprocs+0x1a0>
   14358:	b9000015 	stw	r4,0(r23)
   1435c:	8809883a 	mov	r4,r17
   14360:	00000000 	call	0 <__alt_mem_sdram>
   14364:	bc400017 	ldw	r17,0(r23)
   14368:	883fb71e 	bne	r17,zero,14248 <__call_exitprocs+0x74>
   1436c:	003fc506 	br	14284 <__call_exitprocs+0xb0>
   14370:	89000017 	ldw	r4,0(r17)
   14374:	882f883a 	mov	r23,r17
   14378:	2023883a 	mov	r17,r4
   1437c:	883fb21e 	bne	r17,zero,14248 <__call_exitprocs+0x74>
   14380:	003fc006 	br	14284 <__call_exitprocs+0xb0>

00014384 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
   14384:	defffd04 	addi	sp,sp,-12
   14388:	df000215 	stw	fp,8(sp)
   1438c:	df000204 	addi	fp,sp,8
   14390:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
   14394:	e0bfff17 	ldw	r2,-4(fp)
   14398:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   1439c:	e0bffe17 	ldw	r2,-8(fp)
   143a0:	1005003a 	cmpeq	r2,r2,zero
   143a4:	1000021e 	bne	r2,zero,143b0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
   143a8:	002af070 	cmpltui	zero,zero,43969
   143ac:	00000106 	br	143b4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
   143b0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
   143b4:	e037883a 	mov	sp,fp
   143b8:	df000017 	ldw	fp,0(sp)
   143bc:	dec00104 	addi	sp,sp,4
   143c0:	f800283a 	ret

000143c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   143c4:	defffd04 	addi	sp,sp,-12
   143c8:	dfc00215 	stw	ra,8(sp)
   143cc:	df000115 	stw	fp,4(sp)
   143d0:	df000104 	addi	fp,sp,4
   143d4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
   143d8:	e13fff17 	ldw	r4,-4(fp)
   143dc:	00143840 	call	14384 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   143e0:	003fff06 	br	143e0 <_exit+0x1c>
   143e4:	000141d0 	cmplti	zero,zero,1287
